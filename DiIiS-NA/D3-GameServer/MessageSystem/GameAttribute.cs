//Blizzless Project 2022 
using DiIiS_NA.GameServer.GSSystem.ObjectsSystem;
//Blizzless Project 2022 
using System;
//Blizzless Project 2022 
using System.Collections.Generic;
//Blizzless Project 2022 
using System.Runtime.InteropServices;

namespace DiIiS_NA.GameServer.MessageSystem
{
	public class GameAttributeDependency
	{
		public GameAttribute Attribute;
		public int? Key;
		public bool UsesExplicitKey;
		public bool IsManualDependency;

		public GameAttributeDependency(GameAttribute attribute, int? key, bool usesExplicitKey,
			bool isManualDependency)
		{
			Attribute = attribute;
			Key = key;
			UsesExplicitKey = usesExplicitKey;
			IsManualDependency = isManualDependency;
		}
	}

	public enum GameAttributeEncoding
	{
		Null,
		Int,
		IntMinMax,
		//FloatMinMax,
		Float16,
		Float16Or32,
		Float32,
	}


	/// <summary>
	/// Flags for attribute replication.
	/// </summary>
	[Flags]
	public enum ReplicationFlags : byte
	{
		PlayerReplicated = 0x1,
		LivingReplicated = 0x2,
		GizmoReplicated = 0x4,
		ItemReplicated = 0x8,
		PlayerReplicated2 = 0x80
	}


	[StructLayout(LayoutKind.Explicit)]
	public struct GameAttributeValue
	{
		[FieldOffset(0)]
		public int Value;
		[FieldOffset(0)]
		public float ValueF;

		public GameAttributeValue(int value) { ValueF = 0f; Value = value; }
		public GameAttributeValue(float value) { Value = 0; ValueF = value; }
	}

	public partial class GameAttribute
	{
		public const float Float16Min = -65536.0f;
		public const float Float16Max = 65536.0f;

		public int Id;
		public GameAttributeValue _DefaultValue;
		public int U3;
		public int U4;
		public int U5;

		public string ScriptA;
		public string ScriptB;
		public string Name;

		public GameAttributeEncoding EncodingType;

		public ReplicationFlags Flags;

		public GameAttributeValue Min;
		public GameAttributeValue Max;
		public int BitCount;

		public bool IsInteger { get { return EncodingType == GameAttributeEncoding.Int || EncodingType == GameAttributeEncoding.IntMinMax; } }

		// script stuff generated by ScritpedAttributeInitializer and used by GameAttributeMap
		public Func<GameAttributeMap, int?, GameAttributeValue> ScriptFunc = null;
		public List<GameAttributeDependency> Dependents = null;
		public bool ScriptedAndSettable = false;

		public GameAttribute() { }

		public GameAttribute(int id, int defaultValue, int u3, int u4, int u5, string scriptA, string scriptB, string name, GameAttributeEncoding encodingType, byte flags, int min, int max, int bitCount)
		{
			Id = id;
			_DefaultValue.Value = defaultValue;
			U3 = u3;
			U4 = u4;
			U5 = u5;
			ScriptA = scriptA;
			ScriptB = scriptB;
			Name = name;
			EncodingType = encodingType;
			Flags = (ReplicationFlags)flags;

			Min = new GameAttributeValue(min);
			Max = new GameAttributeValue(max);
			BitCount = bitCount;
		}

		public GameAttribute(int id, float defaultValue, int u3, int u4, int u5, string scriptA, string scriptB, string name, GameAttributeEncoding encodingType, byte flags, float min, float max, int bitCount)
		{
			Id = id;
			_DefaultValue.ValueF = defaultValue;
			U3 = u3;
			U4 = u4;
			U5 = u5;
			ScriptA = scriptA;
			ScriptB = scriptB;
			Name = name;
			EncodingType = encodingType;
			Flags = (ReplicationFlags)flags;

			Min = new GameAttributeValue(min);
			Max = new GameAttributeValue(max);
			BitCount = bitCount;
		}
	}


	public class GameAttributeI : GameAttribute
	{
		public int DefaultValue { get { return _DefaultValue.Value; } }

		public GameAttributeI() { }

		public GameAttributeI(int id, int defaultValue, int u3, int u4, int u5, string scriptA, string scriptB, string name, GameAttributeEncoding encodingType, byte u10, int min, int max, int bitCount)
			: base(id, defaultValue, u3, u4, u5, scriptA, scriptB, name, encodingType, u10, min, max, bitCount)
		{

		}
	}

	public class GameAttributeF : GameAttribute
	{
		public float DefaultValue { get { return _DefaultValue.ValueF; } }

		public GameAttributeF() { }
		public GameAttributeF(int id, float defaultValue, int u3, int u4, int u5, string scriptA, string scriptB, string name, GameAttributeEncoding encodingType, byte u10, float min, float max, int bitCount)
			: base(id, defaultValue, u3, u4, u5, scriptA, scriptB, name, encodingType, u10, min, max, bitCount)
		{

		}
	}

	public class GameAttributeB : GameAttribute
	{
		public bool DefaultValue { get { return _DefaultValue.Value != 0; } }

		public GameAttributeB() { }
		public GameAttributeB(int id, int defaultValue, int u3, int u4, int u5, string scriptA, string scriptB, string name, GameAttributeEncoding encodingType, byte u10, int min, int max, int bitCount)
			: base(id, defaultValue, u3, u4, u5, scriptA, scriptB, name, encodingType, u10, min, max, bitCount)
		{

		}

	}
}
