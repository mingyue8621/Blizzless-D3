// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Achievements {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Achievements {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Achievements_AchievementUpdateRecord__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Achievements.AchievementUpdateRecord, global::D3.Achievements.AchievementUpdateRecord.Builder> internal__static_D3_Achievements_AchievementUpdateRecord__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Achievements_CriteriaUpdateRecord__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Achievements.CriteriaUpdateRecord, global::D3.Achievements.CriteriaUpdateRecord.Builder> internal__static_D3_Achievements_CriteriaUpdateRecord__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Achievements_Snapshot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Achievements.Snapshot, global::D3.Achievements.Snapshot.Builder> internal__static_D3_Achievements_Snapshot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Achievements_PartitionSnapshot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Achievements.PartitionSnapshot, global::D3.Achievements.PartitionSnapshot.Builder> internal__static_D3_Achievements_PartitionSnapshot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Achievements_AchievementsResetDate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Achievements.AchievementsResetDate, global::D3.Achievements.AchievementsResetDate.Builder> internal__static_D3_Achievements_AchievementsResetDate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Achievements_AchievementAwardedNotification__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Achievements.AchievementAwardedNotification, global::D3.Achievements.AchievementAwardedNotification.Builder> internal__static_D3_Achievements_AchievementAwardedNotification__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Achievements_DBAchievement__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Achievements.DBAchievement, global::D3.Achievements.DBAchievement.Builder> internal__static_D3_Achievements_DBAchievement__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Achievements_DBAchievements__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Achievements.DBAchievements, global::D3.Achievements.DBAchievements.Builder> internal__static_D3_Achievements_DBAchievements__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Achievements() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChJBY2hpZXZlbWVudHMucHJvdG8SD0QzLkFjaGlldmVtZW50cxoTT25saW5l" + 
          "U2VydmljZS5wcm90byJgChdBY2hpZXZlbWVudFVwZGF0ZVJlY29yZBIlCg5h" + 
          "Y2hpZXZlbWVudF9pZBgBIAIoBFINYWNoaWV2ZW1lbnRJZBIeCgpjb21wbGV0" + 
          "aW9uGAIgAigFUgpjb21wbGV0aW9uIpwBChRDcml0ZXJpYVVwZGF0ZVJlY29y" + 
          "ZBI5Chpjcml0ZXJpYV9JZF8zMl9hbmRfZmxhZ3NfOBgBIAIoDVIVY3JpdGVy" + 
          "aWFJZDMyQW5kRmxhZ3M4EiUKDXN0YXJ0X3RpbWVfMzIYAiABKA06ATBSC3N0" + 
          "YXJ0VGltZTMyEiIKC3F1YW50aXR5XzMyGAMgASgNOgEwUgpxdWFudGl0eTMy" + 
          "Iv0BCghTbmFwc2hvdBJbChRhY2hpZXZlbWVudF9zbmFwc2hvdBgBIAMoCzIo" + 
          "LkQzLkFjaGlldmVtZW50cy5BY2hpZXZlbWVudFVwZGF0ZVJlY29yZFITYWNo" + 
          "aWV2ZW1lbnRTbmFwc2hvdBJSChFjcml0ZXJpYV9zbmFwc2hvdBgCIAMoCzIl" + 
          "LkQzLkFjaGlldmVtZW50cy5Dcml0ZXJpYVVwZGF0ZVJlY29yZFIQY3JpdGVy" + 
          "aWFTbmFwc2hvdBIZCgZoZWFkZXIYAyABKAQ6ATBSBmhlYWRlchIlCg5jb250" + 
          "ZW50X2hhbmRsZRgEIAEoCVINY29udGVudEhhbmRsZSJwChFQYXJ0aXRpb25T" + 
          "bmFwc2hvdBIcCglwYXJ0aXRpb24YASABKA1SCXBhcnRpdGlvbhI9CgxhY2hp" + 
          "ZXZlbWVudHMYAiABKAsyGS5EMy5BY2hpZXZlbWVudHMuU25hcHNob3RSDGFj" + 
          "aGlldmVtZW50cyIrChVBY2hpZXZlbWVudHNSZXNldERhdGUSEgoEZGF0ZRgB" + 
          "IAEoA1IEZGF0ZSKWAQoeQWNoaWV2ZW1lbnRBd2FyZGVkTm90aWZpY2F0aW9u" + 
          "EksKD2dhbWVfYWNjb3VudF9pZBgBIAIoCzIjLkQzLk9ubGluZVNlcnZpY2Uu" + 
          "R2FtZUFjY291bnRIYW5kbGVSDWdhbWVBY2NvdW50SWQSJwoPYWNoaWV2ZW1l" + 
          "bnRfaWRzGAIgAygEUg5hY2hpZXZlbWVudElkcyJRCg1EQkFjaGlldmVtZW50" + 
          "EiAKC2FjaGlldmVtZW50GAEgAigNUgthY2hpZXZlbWVudBIeCgpjb21wbGV0" + 
          "aW9uGAIgAigNUgpjb21wbGV0aW9uIlQKDkRCQWNoaWV2ZW1lbnRzEkIKDGFj" + 
          "aGlldmVtZW50cxgBIAMoCzIeLkQzLkFjaGlldmVtZW50cy5EQkFjaGlldmVt" + 
          "ZW50UgxhY2hpZXZlbWVudHM=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Achievements_AchievementUpdateRecord__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Achievements_AchievementUpdateRecord__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Achievements.AchievementUpdateRecord, global::D3.Achievements.AchievementUpdateRecord.Builder>(internal__static_D3_Achievements_AchievementUpdateRecord__Descriptor,
                new string[] { "AchievementId", "Completion", });
        internal__static_D3_Achievements_CriteriaUpdateRecord__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Achievements_CriteriaUpdateRecord__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Achievements.CriteriaUpdateRecord, global::D3.Achievements.CriteriaUpdateRecord.Builder>(internal__static_D3_Achievements_CriteriaUpdateRecord__Descriptor,
                new string[] { "CriteriaId32AndFlags8", "StartTime32", "Quantity32", });
        internal__static_D3_Achievements_Snapshot__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_Achievements_Snapshot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Achievements.Snapshot, global::D3.Achievements.Snapshot.Builder>(internal__static_D3_Achievements_Snapshot__Descriptor,
                new string[] { "AchievementSnapshot", "CriteriaSnapshot", "Header", "ContentHandle", });
        internal__static_D3_Achievements_PartitionSnapshot__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_Achievements_PartitionSnapshot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Achievements.PartitionSnapshot, global::D3.Achievements.PartitionSnapshot.Builder>(internal__static_D3_Achievements_PartitionSnapshot__Descriptor,
                new string[] { "Partition", "Achievements", });
        internal__static_D3_Achievements_AchievementsResetDate__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_Achievements_AchievementsResetDate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Achievements.AchievementsResetDate, global::D3.Achievements.AchievementsResetDate.Builder>(internal__static_D3_Achievements_AchievementsResetDate__Descriptor,
                new string[] { "Date", });
        internal__static_D3_Achievements_AchievementAwardedNotification__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_Achievements_AchievementAwardedNotification__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Achievements.AchievementAwardedNotification, global::D3.Achievements.AchievementAwardedNotification.Builder>(internal__static_D3_Achievements_AchievementAwardedNotification__Descriptor,
                new string[] { "GameAccountId", "AchievementIds", });
        internal__static_D3_Achievements_DBAchievement__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_Achievements_DBAchievement__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Achievements.DBAchievement, global::D3.Achievements.DBAchievement.Builder>(internal__static_D3_Achievements_DBAchievement__Descriptor,
                new string[] { "Achievement", "Completion", });
        internal__static_D3_Achievements_DBAchievements__Descriptor = Descriptor.MessageTypes[7];
        internal__static_D3_Achievements_DBAchievements__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Achievements.DBAchievements, global::D3.Achievements.DBAchievements.Builder>(internal__static_D3_Achievements_DBAchievements__Descriptor,
                new string[] { "Achievements", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::D3.OnlineService.OnlineService.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.OnlineService.OnlineService.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AchievementUpdateRecord : pb::GeneratedMessage<AchievementUpdateRecord, AchievementUpdateRecord.Builder> {
    private AchievementUpdateRecord() { }
    private static readonly AchievementUpdateRecord defaultInstance = new AchievementUpdateRecord().MakeReadOnly();
    private static readonly string[] _achievementUpdateRecordFieldNames = new string[] { "achievement_id", "completion" };
    private static readonly uint[] _achievementUpdateRecordFieldTags = new uint[] { 8, 16 };
    public static AchievementUpdateRecord DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AchievementUpdateRecord DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AchievementUpdateRecord ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Achievements.Achievements.internal__static_D3_Achievements_AchievementUpdateRecord__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AchievementUpdateRecord, AchievementUpdateRecord.Builder> InternalFieldAccessors {
      get { return global::D3.Achievements.Achievements.internal__static_D3_Achievements_AchievementUpdateRecord__FieldAccessorTable; }
    }
    
    public const int AchievementIdFieldNumber = 1;
    private bool hasAchievementId;
    private ulong achievementId_;
    public bool HasAchievementId {
      get { return hasAchievementId; }
    }
    public ulong AchievementId {
      get { return achievementId_; }
    }
    
    public const int CompletionFieldNumber = 2;
    private bool hasCompletion;
    private int completion_;
    public bool HasCompletion {
      get { return hasCompletion; }
    }
    public int Completion {
      get { return completion_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAchievementId) return false;
        if (!hasCompletion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _achievementUpdateRecordFieldNames;
      if (hasAchievementId) {
        output.WriteUInt64(1, field_names[0], AchievementId);
      }
      if (hasCompletion) {
        output.WriteInt32(2, field_names[1], Completion);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAchievementId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, AchievementId);
        }
        if (hasCompletion) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Completion);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AchievementUpdateRecord ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AchievementUpdateRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementUpdateRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AchievementUpdateRecord MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AchievementUpdateRecord prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AchievementUpdateRecord, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AchievementUpdateRecord cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AchievementUpdateRecord result;
      
      private AchievementUpdateRecord PrepareBuilder() {
        if (resultIsReadOnly) {
          AchievementUpdateRecord original = result;
          result = new AchievementUpdateRecord();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AchievementUpdateRecord MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Achievements.AchievementUpdateRecord.Descriptor; }
      }
      
      public override AchievementUpdateRecord DefaultInstanceForType {
        get { return global::D3.Achievements.AchievementUpdateRecord.DefaultInstance; }
      }
      
      public override AchievementUpdateRecord BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AchievementUpdateRecord) {
          return MergeFrom((AchievementUpdateRecord) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AchievementUpdateRecord other) {
        if (other == global::D3.Achievements.AchievementUpdateRecord.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAchievementId) {
          AchievementId = other.AchievementId;
        }
        if (other.HasCompletion) {
          Completion = other.Completion;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_achievementUpdateRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _achievementUpdateRecordFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAchievementId = input.ReadUInt64(ref result.achievementId_);
              break;
            }
            case 16: {
              result.hasCompletion = input.ReadInt32(ref result.completion_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAchievementId {
        get { return result.hasAchievementId; }
      }
      public ulong AchievementId {
        get { return result.AchievementId; }
        set { SetAchievementId(value); }
      }
      public Builder SetAchievementId(ulong value) {
        PrepareBuilder();
        result.hasAchievementId = true;
        result.achievementId_ = value;
        return this;
      }
      public Builder ClearAchievementId() {
        PrepareBuilder();
        result.hasAchievementId = false;
        result.achievementId_ = 0UL;
        return this;
      }
      
      public bool HasCompletion {
        get { return result.hasCompletion; }
      }
      public int Completion {
        get { return result.Completion; }
        set { SetCompletion(value); }
      }
      public Builder SetCompletion(int value) {
        PrepareBuilder();
        result.hasCompletion = true;
        result.completion_ = value;
        return this;
      }
      public Builder ClearCompletion() {
        PrepareBuilder();
        result.hasCompletion = false;
        result.completion_ = 0;
        return this;
      }
    }
    static AchievementUpdateRecord() {
      object.ReferenceEquals(global::D3.Achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CriteriaUpdateRecord : pb::GeneratedMessage<CriteriaUpdateRecord, CriteriaUpdateRecord.Builder> {
    private CriteriaUpdateRecord() { }
    private static readonly CriteriaUpdateRecord defaultInstance = new CriteriaUpdateRecord().MakeReadOnly();
    private static readonly string[] _criteriaUpdateRecordFieldNames = new string[] { "criteria_Id_32_and_flags_8", "quantity_32", "start_time_32" };
    private static readonly uint[] _criteriaUpdateRecordFieldTags = new uint[] { 8, 24, 16 };
    public static CriteriaUpdateRecord DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CriteriaUpdateRecord DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CriteriaUpdateRecord ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Achievements.Achievements.internal__static_D3_Achievements_CriteriaUpdateRecord__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CriteriaUpdateRecord, CriteriaUpdateRecord.Builder> InternalFieldAccessors {
      get { return global::D3.Achievements.Achievements.internal__static_D3_Achievements_CriteriaUpdateRecord__FieldAccessorTable; }
    }
    
    public const int CriteriaId32AndFlags8FieldNumber = 1;
    private bool hasCriteriaId32AndFlags8;
    private uint criteriaId32AndFlags8_;
    public bool HasCriteriaId32AndFlags8 {
      get { return hasCriteriaId32AndFlags8; }
    }
    public uint CriteriaId32AndFlags8 {
      get { return criteriaId32AndFlags8_; }
    }
    
    public const int StartTime32FieldNumber = 2;
    private bool hasStartTime32;
    private uint startTime32_;
    public bool HasStartTime32 {
      get { return hasStartTime32; }
    }
    public uint StartTime32 {
      get { return startTime32_; }
    }
    
    public const int Quantity32FieldNumber = 3;
    private bool hasQuantity32;
    private uint quantity32_;
    public bool HasQuantity32 {
      get { return hasQuantity32; }
    }
    public uint Quantity32 {
      get { return quantity32_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCriteriaId32AndFlags8) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _criteriaUpdateRecordFieldNames;
      if (hasCriteriaId32AndFlags8) {
        output.WriteUInt32(1, field_names[0], CriteriaId32AndFlags8);
      }
      if (hasStartTime32) {
        output.WriteUInt32(2, field_names[2], StartTime32);
      }
      if (hasQuantity32) {
        output.WriteUInt32(3, field_names[1], Quantity32);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCriteriaId32AndFlags8) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, CriteriaId32AndFlags8);
        }
        if (hasStartTime32) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, StartTime32);
        }
        if (hasQuantity32) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Quantity32);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CriteriaUpdateRecord ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CriteriaUpdateRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CriteriaUpdateRecord MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CriteriaUpdateRecord prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CriteriaUpdateRecord, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CriteriaUpdateRecord cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CriteriaUpdateRecord result;
      
      private CriteriaUpdateRecord PrepareBuilder() {
        if (resultIsReadOnly) {
          CriteriaUpdateRecord original = result;
          result = new CriteriaUpdateRecord();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CriteriaUpdateRecord MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Achievements.CriteriaUpdateRecord.Descriptor; }
      }
      
      public override CriteriaUpdateRecord DefaultInstanceForType {
        get { return global::D3.Achievements.CriteriaUpdateRecord.DefaultInstance; }
      }
      
      public override CriteriaUpdateRecord BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CriteriaUpdateRecord) {
          return MergeFrom((CriteriaUpdateRecord) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CriteriaUpdateRecord other) {
        if (other == global::D3.Achievements.CriteriaUpdateRecord.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCriteriaId32AndFlags8) {
          CriteriaId32AndFlags8 = other.CriteriaId32AndFlags8;
        }
        if (other.HasStartTime32) {
          StartTime32 = other.StartTime32;
        }
        if (other.HasQuantity32) {
          Quantity32 = other.Quantity32;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_criteriaUpdateRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _criteriaUpdateRecordFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCriteriaId32AndFlags8 = input.ReadUInt32(ref result.criteriaId32AndFlags8_);
              break;
            }
            case 16: {
              result.hasStartTime32 = input.ReadUInt32(ref result.startTime32_);
              break;
            }
            case 24: {
              result.hasQuantity32 = input.ReadUInt32(ref result.quantity32_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCriteriaId32AndFlags8 {
        get { return result.hasCriteriaId32AndFlags8; }
      }
      public uint CriteriaId32AndFlags8 {
        get { return result.CriteriaId32AndFlags8; }
        set { SetCriteriaId32AndFlags8(value); }
      }
      public Builder SetCriteriaId32AndFlags8(uint value) {
        PrepareBuilder();
        result.hasCriteriaId32AndFlags8 = true;
        result.criteriaId32AndFlags8_ = value;
        return this;
      }
      public Builder ClearCriteriaId32AndFlags8() {
        PrepareBuilder();
        result.hasCriteriaId32AndFlags8 = false;
        result.criteriaId32AndFlags8_ = 0;
        return this;
      }
      
      public bool HasStartTime32 {
        get { return result.hasStartTime32; }
      }
      public uint StartTime32 {
        get { return result.StartTime32; }
        set { SetStartTime32(value); }
      }
      public Builder SetStartTime32(uint value) {
        PrepareBuilder();
        result.hasStartTime32 = true;
        result.startTime32_ = value;
        return this;
      }
      public Builder ClearStartTime32() {
        PrepareBuilder();
        result.hasStartTime32 = false;
        result.startTime32_ = 0;
        return this;
      }
      
      public bool HasQuantity32 {
        get { return result.hasQuantity32; }
      }
      public uint Quantity32 {
        get { return result.Quantity32; }
        set { SetQuantity32(value); }
      }
      public Builder SetQuantity32(uint value) {
        PrepareBuilder();
        result.hasQuantity32 = true;
        result.quantity32_ = value;
        return this;
      }
      public Builder ClearQuantity32() {
        PrepareBuilder();
        result.hasQuantity32 = false;
        result.quantity32_ = 0;
        return this;
      }
    }
    static CriteriaUpdateRecord() {
      object.ReferenceEquals(global::D3.Achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Snapshot : pb::GeneratedMessage<Snapshot, Snapshot.Builder> {
    private Snapshot() { }
    private static readonly Snapshot defaultInstance = new Snapshot().MakeReadOnly();
    private static readonly string[] _snapshotFieldNames = new string[] { "achievement_snapshot", "content_handle", "criteria_snapshot", "header" };
    private static readonly uint[] _snapshotFieldTags = new uint[] { 10, 34, 18, 24 };
    public static Snapshot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Snapshot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Snapshot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Achievements.Achievements.internal__static_D3_Achievements_Snapshot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Snapshot, Snapshot.Builder> InternalFieldAccessors {
      get { return global::D3.Achievements.Achievements.internal__static_D3_Achievements_Snapshot__FieldAccessorTable; }
    }
    
    public const int AchievementSnapshotFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Achievements.AchievementUpdateRecord> achievementSnapshot_ = new pbc::PopsicleList<global::D3.Achievements.AchievementUpdateRecord>();
    public scg::IList<global::D3.Achievements.AchievementUpdateRecord> AchievementSnapshotList {
      get { return achievementSnapshot_; }
    }
    public int AchievementSnapshotCount {
      get { return achievementSnapshot_.Count; }
    }
    public global::D3.Achievements.AchievementUpdateRecord GetAchievementSnapshot(int index) {
      return achievementSnapshot_[index];
    }
    
    public const int CriteriaSnapshotFieldNumber = 2;
    private pbc::PopsicleList<global::D3.Achievements.CriteriaUpdateRecord> criteriaSnapshot_ = new pbc::PopsicleList<global::D3.Achievements.CriteriaUpdateRecord>();
    public scg::IList<global::D3.Achievements.CriteriaUpdateRecord> CriteriaSnapshotList {
      get { return criteriaSnapshot_; }
    }
    public int CriteriaSnapshotCount {
      get { return criteriaSnapshot_.Count; }
    }
    public global::D3.Achievements.CriteriaUpdateRecord GetCriteriaSnapshot(int index) {
      return criteriaSnapshot_[index];
    }
    
    public const int HeaderFieldNumber = 3;
    private bool hasHeader;
    private ulong header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public ulong Header {
      get { return header_; }
    }
    
    public const int ContentHandleFieldNumber = 4;
    private bool hasContentHandle;
    private string contentHandle_ = "";
    public bool HasContentHandle {
      get { return hasContentHandle; }
    }
    public string ContentHandle {
      get { return contentHandle_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Achievements.AchievementUpdateRecord element in AchievementSnapshotList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::D3.Achievements.CriteriaUpdateRecord element in CriteriaSnapshotList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _snapshotFieldNames;
      if (achievementSnapshot_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], achievementSnapshot_);
      }
      if (criteriaSnapshot_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], criteriaSnapshot_);
      }
      if (hasHeader) {
        output.WriteUInt64(3, field_names[3], Header);
      }
      if (hasContentHandle) {
        output.WriteString(4, field_names[1], ContentHandle);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Achievements.AchievementUpdateRecord element in AchievementSnapshotList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        foreach (global::D3.Achievements.CriteriaUpdateRecord element in CriteriaSnapshotList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, Header);
        }
        if (hasContentHandle) {
          size += pb::CodedOutputStream.ComputeStringSize(4, ContentHandle);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Snapshot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Snapshot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Snapshot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Snapshot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Snapshot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Snapshot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Snapshot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Snapshot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Snapshot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Snapshot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Snapshot MakeReadOnly() {
      achievementSnapshot_.MakeReadOnly();
      criteriaSnapshot_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Snapshot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Snapshot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Snapshot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Snapshot result;
      
      private Snapshot PrepareBuilder() {
        if (resultIsReadOnly) {
          Snapshot original = result;
          result = new Snapshot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Snapshot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Achievements.Snapshot.Descriptor; }
      }
      
      public override Snapshot DefaultInstanceForType {
        get { return global::D3.Achievements.Snapshot.DefaultInstance; }
      }
      
      public override Snapshot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Snapshot) {
          return MergeFrom((Snapshot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Snapshot other) {
        if (other == global::D3.Achievements.Snapshot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.achievementSnapshot_.Count != 0) {
          result.achievementSnapshot_.Add(other.achievementSnapshot_);
        }
        if (other.criteriaSnapshot_.Count != 0) {
          result.criteriaSnapshot_.Add(other.criteriaSnapshot_);
        }
        if (other.HasHeader) {
          Header = other.Header;
        }
        if (other.HasContentHandle) {
          ContentHandle = other.ContentHandle;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_snapshotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _snapshotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.achievementSnapshot_, global::D3.Achievements.AchievementUpdateRecord.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.criteriaSnapshot_, global::D3.Achievements.CriteriaUpdateRecord.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasHeader = input.ReadUInt64(ref result.header_);
              break;
            }
            case 34: {
              result.hasContentHandle = input.ReadString(ref result.contentHandle_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Achievements.AchievementUpdateRecord> AchievementSnapshotList {
        get { return PrepareBuilder().achievementSnapshot_; }
      }
      public int AchievementSnapshotCount {
        get { return result.AchievementSnapshotCount; }
      }
      public global::D3.Achievements.AchievementUpdateRecord GetAchievementSnapshot(int index) {
        return result.GetAchievementSnapshot(index);
      }
      public Builder SetAchievementSnapshot(int index, global::D3.Achievements.AchievementUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achievementSnapshot_[index] = value;
        return this;
      }
      public Builder SetAchievementSnapshot(int index, global::D3.Achievements.AchievementUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achievementSnapshot_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAchievementSnapshot(global::D3.Achievements.AchievementUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achievementSnapshot_.Add(value);
        return this;
      }
      public Builder AddAchievementSnapshot(global::D3.Achievements.AchievementUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achievementSnapshot_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAchievementSnapshot(scg::IEnumerable<global::D3.Achievements.AchievementUpdateRecord> values) {
        PrepareBuilder();
        result.achievementSnapshot_.Add(values);
        return this;
      }
      public Builder ClearAchievementSnapshot() {
        PrepareBuilder();
        result.achievementSnapshot_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Achievements.CriteriaUpdateRecord> CriteriaSnapshotList {
        get { return PrepareBuilder().criteriaSnapshot_; }
      }
      public int CriteriaSnapshotCount {
        get { return result.CriteriaSnapshotCount; }
      }
      public global::D3.Achievements.CriteriaUpdateRecord GetCriteriaSnapshot(int index) {
        return result.GetCriteriaSnapshot(index);
      }
      public Builder SetCriteriaSnapshot(int index, global::D3.Achievements.CriteriaUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.criteriaSnapshot_[index] = value;
        return this;
      }
      public Builder SetCriteriaSnapshot(int index, global::D3.Achievements.CriteriaUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.criteriaSnapshot_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCriteriaSnapshot(global::D3.Achievements.CriteriaUpdateRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.criteriaSnapshot_.Add(value);
        return this;
      }
      public Builder AddCriteriaSnapshot(global::D3.Achievements.CriteriaUpdateRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.criteriaSnapshot_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCriteriaSnapshot(scg::IEnumerable<global::D3.Achievements.CriteriaUpdateRecord> values) {
        PrepareBuilder();
        result.criteriaSnapshot_.Add(values);
        return this;
      }
      public Builder ClearCriteriaSnapshot() {
        PrepareBuilder();
        result.criteriaSnapshot_.Clear();
        return this;
      }
      
      public bool HasHeader {
        get { return result.hasHeader; }
      }
      public ulong Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(ulong value) {
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = 0UL;
        return this;
      }
      
      public bool HasContentHandle {
        get { return result.hasContentHandle; }
      }
      public string ContentHandle {
        get { return result.ContentHandle; }
        set { SetContentHandle(value); }
      }
      public Builder SetContentHandle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContentHandle = true;
        result.contentHandle_ = value;
        return this;
      }
      public Builder ClearContentHandle() {
        PrepareBuilder();
        result.hasContentHandle = false;
        result.contentHandle_ = "";
        return this;
      }
    }
    static Snapshot() {
      object.ReferenceEquals(global::D3.Achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PartitionSnapshot : pb::GeneratedMessage<PartitionSnapshot, PartitionSnapshot.Builder> {
    private PartitionSnapshot() { }
    private static readonly PartitionSnapshot defaultInstance = new PartitionSnapshot().MakeReadOnly();
    private static readonly string[] _partitionSnapshotFieldNames = new string[] { "achievements", "partition" };
    private static readonly uint[] _partitionSnapshotFieldTags = new uint[] { 18, 8 };
    public static PartitionSnapshot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PartitionSnapshot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PartitionSnapshot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Achievements.Achievements.internal__static_D3_Achievements_PartitionSnapshot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PartitionSnapshot, PartitionSnapshot.Builder> InternalFieldAccessors {
      get { return global::D3.Achievements.Achievements.internal__static_D3_Achievements_PartitionSnapshot__FieldAccessorTable; }
    }
    
    public const int PartitionFieldNumber = 1;
    private bool hasPartition;
    private uint partition_;
    public bool HasPartition {
      get { return hasPartition; }
    }
    public uint Partition {
      get { return partition_; }
    }
    
    public const int AchievementsFieldNumber = 2;
    private bool hasAchievements;
    private global::D3.Achievements.Snapshot achievements_;
    public bool HasAchievements {
      get { return hasAchievements; }
    }
    public global::D3.Achievements.Snapshot Achievements {
      get { return achievements_ ?? global::D3.Achievements.Snapshot.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasAchievements) {
          if (!Achievements.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _partitionSnapshotFieldNames;
      if (hasPartition) {
        output.WriteUInt32(1, field_names[1], Partition);
      }
      if (hasAchievements) {
        output.WriteMessage(2, field_names[0], Achievements);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPartition) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Partition);
        }
        if (hasAchievements) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Achievements);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PartitionSnapshot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PartitionSnapshot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PartitionSnapshot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PartitionSnapshot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PartitionSnapshot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PartitionSnapshot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PartitionSnapshot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PartitionSnapshot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PartitionSnapshot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PartitionSnapshot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PartitionSnapshot MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PartitionSnapshot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PartitionSnapshot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PartitionSnapshot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PartitionSnapshot result;
      
      private PartitionSnapshot PrepareBuilder() {
        if (resultIsReadOnly) {
          PartitionSnapshot original = result;
          result = new PartitionSnapshot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PartitionSnapshot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Achievements.PartitionSnapshot.Descriptor; }
      }
      
      public override PartitionSnapshot DefaultInstanceForType {
        get { return global::D3.Achievements.PartitionSnapshot.DefaultInstance; }
      }
      
      public override PartitionSnapshot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PartitionSnapshot) {
          return MergeFrom((PartitionSnapshot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PartitionSnapshot other) {
        if (other == global::D3.Achievements.PartitionSnapshot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPartition) {
          Partition = other.Partition;
        }
        if (other.HasAchievements) {
          MergeAchievements(other.Achievements);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_partitionSnapshotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _partitionSnapshotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPartition = input.ReadUInt32(ref result.partition_);
              break;
            }
            case 18: {
              global::D3.Achievements.Snapshot.Builder subBuilder = global::D3.Achievements.Snapshot.CreateBuilder();
              if (result.hasAchievements) {
                subBuilder.MergeFrom(Achievements);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Achievements = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPartition {
        get { return result.hasPartition; }
      }
      public uint Partition {
        get { return result.Partition; }
        set { SetPartition(value); }
      }
      public Builder SetPartition(uint value) {
        PrepareBuilder();
        result.hasPartition = true;
        result.partition_ = value;
        return this;
      }
      public Builder ClearPartition() {
        PrepareBuilder();
        result.hasPartition = false;
        result.partition_ = 0;
        return this;
      }
      
      public bool HasAchievements {
       get { return result.hasAchievements; }
      }
      public global::D3.Achievements.Snapshot Achievements {
        get { return result.Achievements; }
        set { SetAchievements(value); }
      }
      public Builder SetAchievements(global::D3.Achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAchievements = true;
        result.achievements_ = value;
        return this;
      }
      public Builder SetAchievements(global::D3.Achievements.Snapshot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAchievements = true;
        result.achievements_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAchievements(global::D3.Achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAchievements &&
            result.achievements_ != global::D3.Achievements.Snapshot.DefaultInstance) {
            result.achievements_ = global::D3.Achievements.Snapshot.CreateBuilder(result.achievements_).MergeFrom(value).BuildPartial();
        } else {
          result.achievements_ = value;
        }
        result.hasAchievements = true;
        return this;
      }
      public Builder ClearAchievements() {
        PrepareBuilder();
        result.hasAchievements = false;
        result.achievements_ = null;
        return this;
      }
    }
    static PartitionSnapshot() {
      object.ReferenceEquals(global::D3.Achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AchievementsResetDate : pb::GeneratedMessage<AchievementsResetDate, AchievementsResetDate.Builder> {
    private AchievementsResetDate() { }
    private static readonly AchievementsResetDate defaultInstance = new AchievementsResetDate().MakeReadOnly();
    private static readonly string[] _achievementsResetDateFieldNames = new string[] { "date" };
    private static readonly uint[] _achievementsResetDateFieldTags = new uint[] { 8 };
    public static AchievementsResetDate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AchievementsResetDate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AchievementsResetDate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Achievements.Achievements.internal__static_D3_Achievements_AchievementsResetDate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AchievementsResetDate, AchievementsResetDate.Builder> InternalFieldAccessors {
      get { return global::D3.Achievements.Achievements.internal__static_D3_Achievements_AchievementsResetDate__FieldAccessorTable; }
    }
    
    public const int DateFieldNumber = 1;
    private bool hasDate;
    private long date_;
    public bool HasDate {
      get { return hasDate; }
    }
    public long Date {
      get { return date_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _achievementsResetDateFieldNames;
      if (hasDate) {
        output.WriteInt64(1, field_names[0], Date);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDate) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, Date);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AchievementsResetDate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementsResetDate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementsResetDate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementsResetDate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementsResetDate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementsResetDate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AchievementsResetDate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AchievementsResetDate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AchievementsResetDate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementsResetDate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AchievementsResetDate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AchievementsResetDate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AchievementsResetDate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AchievementsResetDate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AchievementsResetDate result;
      
      private AchievementsResetDate PrepareBuilder() {
        if (resultIsReadOnly) {
          AchievementsResetDate original = result;
          result = new AchievementsResetDate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AchievementsResetDate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Achievements.AchievementsResetDate.Descriptor; }
      }
      
      public override AchievementsResetDate DefaultInstanceForType {
        get { return global::D3.Achievements.AchievementsResetDate.DefaultInstance; }
      }
      
      public override AchievementsResetDate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AchievementsResetDate) {
          return MergeFrom((AchievementsResetDate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AchievementsResetDate other) {
        if (other == global::D3.Achievements.AchievementsResetDate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDate) {
          Date = other.Date;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_achievementsResetDateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _achievementsResetDateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDate = input.ReadInt64(ref result.date_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDate {
        get { return result.hasDate; }
      }
      public long Date {
        get { return result.Date; }
        set { SetDate(value); }
      }
      public Builder SetDate(long value) {
        PrepareBuilder();
        result.hasDate = true;
        result.date_ = value;
        return this;
      }
      public Builder ClearDate() {
        PrepareBuilder();
        result.hasDate = false;
        result.date_ = 0L;
        return this;
      }
    }
    static AchievementsResetDate() {
      object.ReferenceEquals(global::D3.Achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AchievementAwardedNotification : pb::GeneratedMessage<AchievementAwardedNotification, AchievementAwardedNotification.Builder> {
    private AchievementAwardedNotification() { }
    private static readonly AchievementAwardedNotification defaultInstance = new AchievementAwardedNotification().MakeReadOnly();
    private static readonly string[] _achievementAwardedNotificationFieldNames = new string[] { "achievement_ids", "game_account_id" };
    private static readonly uint[] _achievementAwardedNotificationFieldTags = new uint[] { 16, 10 };
    public static AchievementAwardedNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AchievementAwardedNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AchievementAwardedNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Achievements.Achievements.internal__static_D3_Achievements_AchievementAwardedNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AchievementAwardedNotification, AchievementAwardedNotification.Builder> InternalFieldAccessors {
      get { return global::D3.Achievements.Achievements.internal__static_D3_Achievements_AchievementAwardedNotification__FieldAccessorTable; }
    }
    
    public const int GameAccountIdFieldNumber = 1;
    private bool hasGameAccountId;
    private global::D3.OnlineService.GameAccountHandle gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle GameAccountId {
      get { return gameAccountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public const int AchievementIdsFieldNumber = 2;
    private pbc::PopsicleList<ulong> achievementIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> AchievementIdsList {
      get { return pbc::Lists.AsReadOnly(achievementIds_); }
    }
    public int AchievementIdsCount {
      get { return achievementIds_.Count; }
    }
    public ulong GetAchievementIds(int index) {
      return achievementIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameAccountId) return false;
        if (!GameAccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _achievementAwardedNotificationFieldNames;
      if (hasGameAccountId) {
        output.WriteMessage(1, field_names[1], GameAccountId);
      }
      if (achievementIds_.Count > 0) {
        output.WriteUInt64Array(2, field_names[0], achievementIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, GameAccountId);
        }
        {
          int dataSize = 0;
          foreach (ulong element in AchievementIdsList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * achievementIds_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AchievementAwardedNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementAwardedNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementAwardedNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementAwardedNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementAwardedNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementAwardedNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AchievementAwardedNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AchievementAwardedNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AchievementAwardedNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementAwardedNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AchievementAwardedNotification MakeReadOnly() {
      achievementIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AchievementAwardedNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AchievementAwardedNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AchievementAwardedNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AchievementAwardedNotification result;
      
      private AchievementAwardedNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          AchievementAwardedNotification original = result;
          result = new AchievementAwardedNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AchievementAwardedNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Achievements.AchievementAwardedNotification.Descriptor; }
      }
      
      public override AchievementAwardedNotification DefaultInstanceForType {
        get { return global::D3.Achievements.AchievementAwardedNotification.DefaultInstance; }
      }
      
      public override AchievementAwardedNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AchievementAwardedNotification) {
          return MergeFrom((AchievementAwardedNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AchievementAwardedNotification other) {
        if (other == global::D3.Achievements.AchievementAwardedNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        if (other.achievementIds_.Count != 0) {
          result.achievementIds_.Add(other.achievementIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_achievementAwardedNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _achievementAwardedNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt64Array(tag, field_name, result.achievementIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameAccountId {
       get { return result.hasGameAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccountId &&
            result.gameAccountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.gameAccountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> AchievementIdsList {
        get { return PrepareBuilder().achievementIds_; }
      }
      public int AchievementIdsCount {
        get { return result.AchievementIdsCount; }
      }
      public ulong GetAchievementIds(int index) {
        return result.GetAchievementIds(index);
      }
      public Builder SetAchievementIds(int index, ulong value) {
        PrepareBuilder();
        result.achievementIds_[index] = value;
        return this;
      }
      public Builder AddAchievementIds(ulong value) {
        PrepareBuilder();
        result.achievementIds_.Add(value);
        return this;
      }
      public Builder AddRangeAchievementIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.achievementIds_.Add(values);
        return this;
      }
      public Builder ClearAchievementIds() {
        PrepareBuilder();
        result.achievementIds_.Clear();
        return this;
      }
    }
    static AchievementAwardedNotification() {
      object.ReferenceEquals(global::D3.Achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DBAchievement : pb::GeneratedMessage<DBAchievement, DBAchievement.Builder> {
    private DBAchievement() { }
    private static readonly DBAchievement defaultInstance = new DBAchievement().MakeReadOnly();
    private static readonly string[] _dBAchievementFieldNames = new string[] { "achievement", "completion" };
    private static readonly uint[] _dBAchievementFieldTags = new uint[] { 8, 16 };
    public static DBAchievement DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DBAchievement DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DBAchievement ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Achievements.Achievements.internal__static_D3_Achievements_DBAchievement__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DBAchievement, DBAchievement.Builder> InternalFieldAccessors {
      get { return global::D3.Achievements.Achievements.internal__static_D3_Achievements_DBAchievement__FieldAccessorTable; }
    }
    
    public const int AchievementFieldNumber = 1;
    private bool hasAchievement;
    private uint achievement_;
    public bool HasAchievement {
      get { return hasAchievement; }
    }
    public uint Achievement {
      get { return achievement_; }
    }
    
    public const int CompletionFieldNumber = 2;
    private bool hasCompletion;
    private uint completion_;
    public bool HasCompletion {
      get { return hasCompletion; }
    }
    public uint Completion {
      get { return completion_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAchievement) return false;
        if (!hasCompletion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dBAchievementFieldNames;
      if (hasAchievement) {
        output.WriteUInt32(1, field_names[0], Achievement);
      }
      if (hasCompletion) {
        output.WriteUInt32(2, field_names[1], Completion);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAchievement) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Achievement);
        }
        if (hasCompletion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Completion);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DBAchievement ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DBAchievement ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DBAchievement ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DBAchievement ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DBAchievement ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DBAchievement ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DBAchievement ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DBAchievement ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DBAchievement ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DBAchievement ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DBAchievement MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DBAchievement prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DBAchievement, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DBAchievement cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DBAchievement result;
      
      private DBAchievement PrepareBuilder() {
        if (resultIsReadOnly) {
          DBAchievement original = result;
          result = new DBAchievement();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DBAchievement MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Achievements.DBAchievement.Descriptor; }
      }
      
      public override DBAchievement DefaultInstanceForType {
        get { return global::D3.Achievements.DBAchievement.DefaultInstance; }
      }
      
      public override DBAchievement BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DBAchievement) {
          return MergeFrom((DBAchievement) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DBAchievement other) {
        if (other == global::D3.Achievements.DBAchievement.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAchievement) {
          Achievement = other.Achievement;
        }
        if (other.HasCompletion) {
          Completion = other.Completion;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dBAchievementFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dBAchievementFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAchievement = input.ReadUInt32(ref result.achievement_);
              break;
            }
            case 16: {
              result.hasCompletion = input.ReadUInt32(ref result.completion_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAchievement {
        get { return result.hasAchievement; }
      }
      public uint Achievement {
        get { return result.Achievement; }
        set { SetAchievement(value); }
      }
      public Builder SetAchievement(uint value) {
        PrepareBuilder();
        result.hasAchievement = true;
        result.achievement_ = value;
        return this;
      }
      public Builder ClearAchievement() {
        PrepareBuilder();
        result.hasAchievement = false;
        result.achievement_ = 0;
        return this;
      }
      
      public bool HasCompletion {
        get { return result.hasCompletion; }
      }
      public uint Completion {
        get { return result.Completion; }
        set { SetCompletion(value); }
      }
      public Builder SetCompletion(uint value) {
        PrepareBuilder();
        result.hasCompletion = true;
        result.completion_ = value;
        return this;
      }
      public Builder ClearCompletion() {
        PrepareBuilder();
        result.hasCompletion = false;
        result.completion_ = 0;
        return this;
      }
    }
    static DBAchievement() {
      object.ReferenceEquals(global::D3.Achievements.Achievements.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DBAchievements : pb::GeneratedMessage<DBAchievements, DBAchievements.Builder> {
    private DBAchievements() { }
    private static readonly DBAchievements defaultInstance = new DBAchievements().MakeReadOnly();
    private static readonly string[] _dBAchievementsFieldNames = new string[] { "achievements" };
    private static readonly uint[] _dBAchievementsFieldTags = new uint[] { 10 };
    public static DBAchievements DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DBAchievements DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DBAchievements ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Achievements.Achievements.internal__static_D3_Achievements_DBAchievements__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DBAchievements, DBAchievements.Builder> InternalFieldAccessors {
      get { return global::D3.Achievements.Achievements.internal__static_D3_Achievements_DBAchievements__FieldAccessorTable; }
    }
    
    public const int AchievementsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Achievements.DBAchievement> achievements_ = new pbc::PopsicleList<global::D3.Achievements.DBAchievement>();
    public scg::IList<global::D3.Achievements.DBAchievement> AchievementsList {
      get { return achievements_; }
    }
    public int AchievementsCount {
      get { return achievements_.Count; }
    }
    public global::D3.Achievements.DBAchievement GetAchievements(int index) {
      return achievements_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Achievements.DBAchievement element in AchievementsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dBAchievementsFieldNames;
      if (achievements_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], achievements_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Achievements.DBAchievement element in AchievementsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DBAchievements ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DBAchievements ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DBAchievements ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DBAchievements ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DBAchievements ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DBAchievements ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DBAchievements ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DBAchievements ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DBAchievements ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DBAchievements ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DBAchievements MakeReadOnly() {
      achievements_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DBAchievements prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DBAchievements, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DBAchievements cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DBAchievements result;
      
      private DBAchievements PrepareBuilder() {
        if (resultIsReadOnly) {
          DBAchievements original = result;
          result = new DBAchievements();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DBAchievements MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Achievements.DBAchievements.Descriptor; }
      }
      
      public override DBAchievements DefaultInstanceForType {
        get { return global::D3.Achievements.DBAchievements.DefaultInstance; }
      }
      
      public override DBAchievements BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DBAchievements) {
          return MergeFrom((DBAchievements) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DBAchievements other) {
        if (other == global::D3.Achievements.DBAchievements.DefaultInstance) return this;
        PrepareBuilder();
        if (other.achievements_.Count != 0) {
          result.achievements_.Add(other.achievements_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dBAchievementsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dBAchievementsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.achievements_, global::D3.Achievements.DBAchievement.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Achievements.DBAchievement> AchievementsList {
        get { return PrepareBuilder().achievements_; }
      }
      public int AchievementsCount {
        get { return result.AchievementsCount; }
      }
      public global::D3.Achievements.DBAchievement GetAchievements(int index) {
        return result.GetAchievements(index);
      }
      public Builder SetAchievements(int index, global::D3.Achievements.DBAchievement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achievements_[index] = value;
        return this;
      }
      public Builder SetAchievements(int index, global::D3.Achievements.DBAchievement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achievements_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAchievements(global::D3.Achievements.DBAchievement value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achievements_.Add(value);
        return this;
      }
      public Builder AddAchievements(global::D3.Achievements.DBAchievement.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achievements_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAchievements(scg::IEnumerable<global::D3.Achievements.DBAchievement> values) {
        PrepareBuilder();
        result.achievements_.Add(values);
        return this;
      }
      public Builder ClearAchievements() {
        PrepareBuilder();
        result.achievements_.Clear();
        return this;
      }
    }
    static DBAchievements() {
      object.ReferenceEquals(global::D3.Achievements.Achievements.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
