// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.GameMessage {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class GameMessage {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_HeroDigestList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestList, global::D3.GameMessage.HeroDigestList.Builder> internal__static_D3_GameMessage_HeroDigestList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ClientToonSettings__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ClientToonSettings, global::D3.GameMessage.ClientToonSettings.Builder> internal__static_D3_GameMessage_ClientToonSettings__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_HeroDigestListRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestListRequest, global::D3.GameMessage.HeroDigestListRequest.Builder> internal__static_D3_GameMessage_HeroDigestListRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_HeroDigestListResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestListResponse, global::D3.GameMessage.HeroDigestListResponse.Builder> internal__static_D3_GameMessage_HeroDigestListResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_PlayerBanner__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.PlayerBanner, global::D3.GameMessage.PlayerBanner.Builder> internal__static_D3_GameMessage_PlayerBanner__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_SaveBannerConfiguration__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.SaveBannerConfiguration, global::D3.GameMessage.SaveBannerConfiguration.Builder> internal__static_D3_GameMessage_SaveBannerConfiguration__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_HeroDigestBanner__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestBanner, global::D3.GameMessage.HeroDigestBanner.Builder> internal__static_D3_GameMessage_HeroDigestBanner__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GameCurrentPlayers__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GameCurrentPlayers, global::D3.GameMessage.GameCurrentPlayers.Builder> internal__static_D3_GameMessage_GameCurrentPlayers__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_TooltipIds__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TooltipIds, global::D3.GameMessage.TooltipIds.Builder> internal__static_D3_GameMessage_TooltipIds__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_TooltipGenerators__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TooltipGenerators, global::D3.GameMessage.TooltipGenerators.Builder> internal__static_D3_GameMessage_TooltipGenerators__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_TutorialMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TutorialMessage, global::D3.GameMessage.TutorialMessage.Builder> internal__static_D3_GameMessage_TutorialMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_TutorialState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TutorialState, global::D3.GameMessage.TutorialState.Builder> internal__static_D3_GameMessage_TutorialState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_CreateHeroResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CreateHeroResponse, global::D3.GameMessage.CreateHeroResponse.Builder> internal__static_D3_GameMessage_CreateHeroResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_SelectHero__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.SelectHero, global::D3.GameMessage.SelectHero.Builder> internal__static_D3_GameMessage_SelectHero__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_DeleteHero__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.DeleteHero, global::D3.GameMessage.DeleteHero.Builder> internal__static_D3_GameMessage_DeleteHero__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_UndeleteHero__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.UndeleteHero, global::D3.GameMessage.UndeleteHero.Builder> internal__static_D3_GameMessage_UndeleteHero__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GetFallenHeros__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetFallenHeros, global::D3.GameMessage.GetFallenHeros.Builder> internal__static_D3_GameMessage_GetFallenHeros__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ArchiveHardcore__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ArchiveHardcore, global::D3.GameMessage.ArchiveHardcore.Builder> internal__static_D3_GameMessage_ArchiveHardcore__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ArchiveHardcoreResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ArchiveHardcoreResponse, global::D3.GameMessage.ArchiveHardcoreResponse.Builder> internal__static_D3_GameMessage_ArchiveHardcoreResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_DeleteFallenHero__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.DeleteFallenHero, global::D3.GameMessage.DeleteFallenHero.Builder> internal__static_D3_GameMessage_DeleteFallenHero__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_AccountVersionList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.AccountVersionList, global::D3.GameMessage.AccountVersionList.Builder> internal__static_D3_GameMessage_AccountVersionList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_AccountVersionSync__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.AccountVersionSync, global::D3.GameMessage.AccountVersionSync.Builder> internal__static_D3_GameMessage_AccountVersionSync__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServerDeleteHero__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerDeleteHero, global::D3.GameMessage.ServerDeleteHero.Builder> internal__static_D3_GameMessage_ServerDeleteHero__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServerUndeleteHero__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerUndeleteHero, global::D3.GameMessage.ServerUndeleteHero.Builder> internal__static_D3_GameMessage_ServerUndeleteHero__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServerForceRenameHero__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerForceRenameHero, global::D3.GameMessage.ServerForceRenameHero.Builder> internal__static_D3_GameMessage_ServerForceRenameHero__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServerFetchHeros__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerFetchHeros, global::D3.GameMessage.ServerFetchHeros.Builder> internal__static_D3_GameMessage_ServerFetchHeros__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServerFetchInventory__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerFetchInventory, global::D3.GameMessage.ServerFetchInventory.Builder> internal__static_D3_GameMessage_ServerFetchInventory__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServerSnapshot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerSnapshot, global::D3.GameMessage.ServerSnapshot.Builder> internal__static_D3_GameMessage_ServerSnapshot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServerSnapshotResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerSnapshotResponse, global::D3.GameMessage.ServerSnapshotResponse.Builder> internal__static_D3_GameMessage_ServerSnapshotResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServerFetchSnapshot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerFetchSnapshot, global::D3.GameMessage.ServerFetchSnapshot.Builder> internal__static_D3_GameMessage_ServerFetchSnapshot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServerRevokeItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerRevokeItem, global::D3.GameMessage.ServerRevokeItem.Builder> internal__static_D3_GameMessage_ServerRevokeItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServerGuildFilterDef__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerGuildFilterDef, global::D3.GameMessage.ServerGuildFilterDef.Builder> internal__static_D3_GameMessage_ServerGuildFilterDef__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServerGuildRename__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerGuildRename, global::D3.GameMessage.ServerGuildRename.Builder> internal__static_D3_GameMessage_ServerGuildRename__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServerGuildDescriptionClear__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerGuildDescriptionClear, global::D3.GameMessage.ServerGuildDescriptionClear.Builder> internal__static_D3_GameMessage_ServerGuildDescriptionClear__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServerGuildPlayerGroups__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerGuildPlayerGroups, global::D3.GameMessage.ServerGuildPlayerGroups.Builder> internal__static_D3_GameMessage_ServerGuildPlayerGroups__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServerForceColdStorage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerForceColdStorage, global::D3.GameMessage.ServerForceColdStorage.Builder> internal__static_D3_GameMessage_ServerForceColdStorage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServerForceColdStorageResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerForceColdStorageResponse, global::D3.GameMessage.ServerForceColdStorageResponse.Builder> internal__static_D3_GameMessage_ServerForceColdStorageResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServerFetchAccountData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerFetchAccountData, global::D3.GameMessage.ServerFetchAccountData.Builder> internal__static_D3_GameMessage_ServerFetchAccountData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_InitialLoginDataRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.InitialLoginDataRequest, global::D3.GameMessage.InitialLoginDataRequest.Builder> internal__static_D3_GameMessage_InitialLoginDataRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_InitialLoginDataQueuedResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.InitialLoginDataQueuedResponse, global::D3.GameMessage.InitialLoginDataQueuedResponse.Builder> internal__static_D3_GameMessage_InitialLoginDataQueuedResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_CancelLoginDataRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CancelLoginDataRequest, global::D3.GameMessage.CancelLoginDataRequest.Builder> internal__static_D3_GameMessage_CancelLoginDataRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_RenameHero__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.RenameHero, global::D3.GameMessage.RenameHero.Builder> internal__static_D3_GameMessage_RenameHero__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_RebirthHeroRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.RebirthHeroRequest, global::D3.GameMessage.RebirthHeroRequest.Builder> internal__static_D3_GameMessage_RebirthHeroRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_RebirthHeroResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.RebirthHeroResponse, global::D3.GameMessage.RebirthHeroResponse.Builder> internal__static_D3_GameMessage_RebirthHeroResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_SetGameAccountSettings__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.SetGameAccountSettings, global::D3.GameMessage.SetGameAccountSettings.Builder> internal__static_D3_GameMessage_SetGameAccountSettings__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GetToonSettings__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetToonSettings, global::D3.GameMessage.GetToonSettings.Builder> internal__static_D3_GameMessage_GetToonSettings__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_SetToonSettings__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.SetToonSettings, global::D3.GameMessage.SetToonSettings.Builder> internal__static_D3_GameMessage_SetToonSettings__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GetAccountDigest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetAccountDigest, global::D3.GameMessage.GetAccountDigest.Builder> internal__static_D3_GameMessage_GetAccountDigest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GetHeroItems__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetHeroItems, global::D3.GameMessage.GetHeroItems.Builder> internal__static_D3_GameMessage_GetHeroItems__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GetAccountItems__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetAccountItems, global::D3.GameMessage.GetAccountItems.Builder> internal__static_D3_GameMessage_GetAccountItems__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GetAccountProfile__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetAccountProfile, global::D3.GameMessage.GetAccountProfile.Builder> internal__static_D3_GameMessage_GetAccountProfile__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GetHeroProfiles__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetHeroProfiles, global::D3.GameMessage.GetHeroProfiles.Builder> internal__static_D3_GameMessage_GetHeroProfiles__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GetAccountPrefs__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetAccountPrefs, global::D3.GameMessage.GetAccountPrefs.Builder> internal__static_D3_GameMessage_GetAccountPrefs__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_SetAccountPrefs__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.SetAccountPrefs, global::D3.GameMessage.SetAccountPrefs.Builder> internal__static_D3_GameMessage_SetAccountPrefs__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GetCosmeticItems__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetCosmeticItems, global::D3.GameMessage.GetCosmeticItems.Builder> internal__static_D3_GameMessage_GetCosmeticItems__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GetHeroDigest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetHeroDigest, global::D3.GameMessage.GetHeroDigest.Builder> internal__static_D3_GameMessage_GetHeroDigest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GetHeroIds__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetHeroIds, global::D3.GameMessage.GetHeroIds.Builder> internal__static_D3_GameMessage_GetHeroIds__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GetHeroIdsResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetHeroIdsResponse, global::D3.GameMessage.GetHeroIdsResponse.Builder> internal__static_D3_GameMessage_GetHeroIdsResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GetDeletedHero__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetDeletedHero, global::D3.GameMessage.GetDeletedHero.Builder> internal__static_D3_GameMessage_GetDeletedHero__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_CSGetSnapshots__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CSGetSnapshots, global::D3.GameMessage.CSGetSnapshots.Builder> internal__static_D3_GameMessage_CSGetSnapshots__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_CSPullSnapshot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CSPullSnapshot, global::D3.GameMessage.CSPullSnapshot.Builder> internal__static_D3_GameMessage_CSPullSnapshot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_CSPushSnapshot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CSPushSnapshot, global::D3.GameMessage.CSPushSnapshot.Builder> internal__static_D3_GameMessage_CSPushSnapshot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_CSWriteSnapshot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CSWriteSnapshot, global::D3.GameMessage.CSWriteSnapshot.Builder> internal__static_D3_GameMessage_CSWriteSnapshot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_CSGiveCarePackage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CSGiveCarePackage, global::D3.GameMessage.CSGiveCarePackage.Builder> internal__static_D3_GameMessage_CSGiveCarePackage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_CSForceColdStorage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CSForceColdStorage, global::D3.GameMessage.CSForceColdStorage.Builder> internal__static_D3_GameMessage_CSForceColdStorage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_TransferAccountCheck__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TransferAccountCheck, global::D3.GameMessage.TransferAccountCheck.Builder> internal__static_D3_GameMessage_TransferAccountCheck__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_TransferAccountCheckResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TransferAccountCheckResponse, global::D3.GameMessage.TransferAccountCheckResponse.Builder> internal__static_D3_GameMessage_TransferAccountCheckResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_TransferAccountBegin__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TransferAccountBegin, global::D3.GameMessage.TransferAccountBegin.Builder> internal__static_D3_GameMessage_TransferAccountBegin__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_TransferAccountGetStatus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TransferAccountGetStatus, global::D3.GameMessage.TransferAccountGetStatus.Builder> internal__static_D3_GameMessage_TransferAccountGetStatus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_TransferAccountResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TransferAccountResponse, global::D3.GameMessage.TransferAccountResponse.Builder> internal__static_D3_GameMessage_TransferAccountResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_BannerSaveConfirm__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.BannerSaveConfirm, global::D3.GameMessage.BannerSaveConfirm.Builder> internal__static_D3_GameMessage_BannerSaveConfirm__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ClientAccountTransferRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ClientAccountTransferRequest, global::D3.GameMessage.ClientAccountTransferRequest.Builder> internal__static_D3_GameMessage_ClientAccountTransferRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_NumPlayersRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.NumPlayersRequest, global::D3.GameMessage.NumPlayersRequest.Builder> internal__static_D3_GameMessage_NumPlayersRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_NumPlayersResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.NumPlayersResponse, global::D3.GameMessage.NumPlayersResponse.Builder> internal__static_D3_GameMessage_NumPlayersResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GetHeroAttributesRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetHeroAttributesRequest, global::D3.GameMessage.GetHeroAttributesRequest.Builder> internal__static_D3_GameMessage_GetHeroAttributesRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_MailContents__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.MailContents, global::D3.GameMessage.MailContents.Builder> internal__static_D3_GameMessage_MailContents__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_MailOperation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.MailOperation, global::D3.GameMessage.MailOperation.Builder> internal__static_D3_GameMessage_MailOperation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_MailOperationResponseResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.MailOperationResponseResult, global::D3.GameMessage.MailOperationResponseResult.Builder> internal__static_D3_GameMessage_MailOperationResponseResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_MailOperationResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.MailOperationResponse, global::D3.GameMessage.MailOperationResponse.Builder> internal__static_D3_GameMessage_MailOperationResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_TutorialFlags__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TutorialFlags, global::D3.GameMessage.TutorialFlags.Builder> internal__static_D3_GameMessage_TutorialFlags__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ResetHeroStoryProgress__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ResetHeroStoryProgress, global::D3.GameMessage.ResetHeroStoryProgress.Builder> internal__static_D3_GameMessage_ResetHeroStoryProgress__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ForceAccountMigration__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ForceAccountMigration, global::D3.GameMessage.ForceAccountMigration.Builder> internal__static_D3_GameMessage_ForceAccountMigration__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_EquipCosmeticItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.EquipCosmeticItem, global::D3.GameMessage.EquipCosmeticItem.Builder> internal__static_D3_GameMessage_EquipCosmeticItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildId, global::D3.GameMessage.GuildId.Builder> internal__static_D3_GameMessage_GuildId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildIds__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildIds, global::D3.GameMessage.GuildIds.Builder> internal__static_D3_GameMessage_GuildIds__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildCreate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildCreate, global::D3.GameMessage.GuildCreate.Builder> internal__static_D3_GameMessage_GuildCreate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GroupCreate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GroupCreate, global::D3.GameMessage.GroupCreate.Builder> internal__static_D3_GameMessage_GroupCreate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildInvite__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildInvite, global::D3.GameMessage.GuildInvite.Builder> internal__static_D3_GameMessage_GuildInvite__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildInviteResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildInviteResponse, global::D3.GameMessage.GuildInviteResponse.Builder> internal__static_D3_GameMessage_GuildInviteResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildFetchPlayerNote__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildFetchPlayerNote, global::D3.GameMessage.GuildFetchPlayerNote.Builder> internal__static_D3_GameMessage_GuildFetchPlayerNote__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildSetMotd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSetMotd, global::D3.GameMessage.GuildSetMotd.Builder> internal__static_D3_GameMessage_GuildSetMotd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildSetDescription__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSetDescription, global::D3.GameMessage.GuildSetDescription.Builder> internal__static_D3_GameMessage_GuildSetDescription__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildSetNews__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSetNews, global::D3.GameMessage.GuildSetNews.Builder> internal__static_D3_GameMessage_GuildSetNews__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildEditNews__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildEditNews, global::D3.GameMessage.GuildEditNews.Builder> internal__static_D3_GameMessage_GuildEditNews__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildDeleteNews__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildDeleteNews, global::D3.GameMessage.GuildDeleteNews.Builder> internal__static_D3_GameMessage_GuildDeleteNews__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildDeleteAccountNews__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildDeleteAccountNews, global::D3.GameMessage.GuildDeleteAccountNews.Builder> internal__static_D3_GameMessage_GuildDeleteAccountNews__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildCreateRank__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildCreateRank, global::D3.GameMessage.GuildCreateRank.Builder> internal__static_D3_GameMessage_GuildCreateRank__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildDeleteRank__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildDeleteRank, global::D3.GameMessage.GuildDeleteRank.Builder> internal__static_D3_GameMessage_GuildDeleteRank__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildModifyRank__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildModifyRank, global::D3.GameMessage.GuildModifyRank.Builder> internal__static_D3_GameMessage_GuildModifyRank__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildPromoteMember__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildPromoteMember, global::D3.GameMessage.GuildPromoteMember.Builder> internal__static_D3_GameMessage_GuildPromoteMember__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildDemoteMember__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildDemoteMember, global::D3.GameMessage.GuildDemoteMember.Builder> internal__static_D3_GameMessage_GuildDemoteMember__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildSetPlayerNote__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSetPlayerNote, global::D3.GameMessage.GuildSetPlayerNote.Builder> internal__static_D3_GameMessage_GuildSetPlayerNote__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildSetBanner__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSetBanner, global::D3.GameMessage.GuildSetBanner.Builder> internal__static_D3_GameMessage_GuildSetBanner__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildKickMember__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildKickMember, global::D3.GameMessage.GuildKickMember.Builder> internal__static_D3_GameMessage_GuildKickMember__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildFetchRoster__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildFetchRoster, global::D3.GameMessage.GuildFetchRoster.Builder> internal__static_D3_GameMessage_GuildFetchRoster__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildMoveRank__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildMoveRank, global::D3.GameMessage.GuildMoveRank.Builder> internal__static_D3_GameMessage_GuildMoveRank__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildSearch__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSearch, global::D3.GameMessage.GuildSearch.Builder> internal__static_D3_GameMessage_GuildSearch__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildInviteGroupChat__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildInviteGroupChat, global::D3.GameMessage.GuildInviteGroupChat.Builder> internal__static_D3_GameMessage_GuildInviteGroupChat__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildAcceptGroupChat__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildAcceptGroupChat, global::D3.GameMessage.GuildAcceptGroupChat.Builder> internal__static_D3_GameMessage_GuildAcceptGroupChat__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildSetLeader__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSetLeader, global::D3.GameMessage.GuildSetLeader.Builder> internal__static_D3_GameMessage_GuildSetLeader__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildCancelInvite__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildCancelInvite, global::D3.GameMessage.GuildCancelInvite.Builder> internal__static_D3_GameMessage_GuildCancelInvite__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildSuggest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSuggest, global::D3.GameMessage.GuildSuggest.Builder> internal__static_D3_GameMessage_GuildSuggest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildSuggestionResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSuggestionResponse, global::D3.GameMessage.GuildSuggestionResponse.Builder> internal__static_D3_GameMessage_GuildSuggestionResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildFetchNews__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildFetchNews, global::D3.GameMessage.GuildFetchNews.Builder> internal__static_D3_GameMessage_GuildFetchNews__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildSetSearchSettings__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSetSearchSettings, global::D3.GameMessage.GuildSetSearchSettings.Builder> internal__static_D3_GameMessage_GuildSetSearchSettings__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildSetLFM__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSetLFM, global::D3.GameMessage.GuildSetLFM.Builder> internal__static_D3_GameMessage_GuildSetLFM__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GroupSetPrivacyLevel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GroupSetPrivacyLevel, global::D3.GameMessage.GroupSetPrivacyLevel.Builder> internal__static_D3_GameMessage_GroupSetPrivacyLevel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GetPlayerGuilds__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetPlayerGuilds, global::D3.GameMessage.GetPlayerGuilds.Builder> internal__static_D3_GameMessage_GetPlayerGuilds__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildResponseId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildResponseId, global::D3.GameMessage.GuildResponseId.Builder> internal__static_D3_GameMessage_GuildResponseId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildResponseString__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildResponseString, global::D3.GameMessage.GuildResponseString.Builder> internal__static_D3_GameMessage_GuildResponseString__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildResponseGuilds__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildResponseGuilds, global::D3.GameMessage.GuildResponseGuilds.Builder> internal__static_D3_GameMessage_GuildResponseGuilds__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildSummaryResolution__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSummaryResolution, global::D3.GameMessage.GuildSummaryResolution.Builder> internal__static_D3_GameMessage_GuildSummaryResolution__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_GuildSummariesResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSummariesResponse, global::D3.GameMessage.GuildSummariesResponse.Builder> internal__static_D3_GameMessage_GuildSummariesResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_LeaderboardList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.LeaderboardList, global::D3.GameMessage.LeaderboardList.Builder> internal__static_D3_GameMessage_LeaderboardList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_LeaderboardListResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.LeaderboardListResponse, global::D3.GameMessage.LeaderboardListResponse.Builder> internal__static_D3_GameMessage_LeaderboardListResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_LeaderboardFetchScores__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.LeaderboardFetchScores, global::D3.GameMessage.LeaderboardFetchScores.Builder> internal__static_D3_GameMessage_LeaderboardFetchScores__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_LeaderboardFetchScoresResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.LeaderboardFetchScoresResponse, global::D3.GameMessage.LeaderboardFetchScoresResponse.Builder> internal__static_D3_GameMessage_LeaderboardFetchScoresResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_LeaderboardGetHeroSnapshot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.LeaderboardGetHeroSnapshot, global::D3.GameMessage.LeaderboardGetHeroSnapshot.Builder> internal__static_D3_GameMessage_LeaderboardGetHeroSnapshot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_LeaderboardGetHeroSnapshotResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.LeaderboardGetHeroSnapshotResponse, global::D3.GameMessage.LeaderboardGetHeroSnapshotResponse.Builder> internal__static_D3_GameMessage_LeaderboardGetHeroSnapshotResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_CheatRefetchProductCatalog__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CheatRefetchProductCatalog, global::D3.GameMessage.CheatRefetchProductCatalog.Builder> internal__static_D3_GameMessage_CheatRefetchProductCatalog__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_CheatModifyStoreState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CheatModifyStoreState, global::D3.GameMessage.CheatModifyStoreState.Builder> internal__static_D3_GameMessage_CheatModifyStoreState__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_RiftEndScreenAddParticipants__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.RiftEndScreenAddParticipants, global::D3.GameMessage.RiftEndScreenAddParticipants.Builder> internal__static_D3_GameMessage_RiftEndScreenAddParticipants__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_RiftEndScreenConsolePlayerInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.RiftEndScreenConsolePlayerInfo, global::D3.GameMessage.RiftEndScreenConsolePlayerInfo.Builder> internal__static_D3_GameMessage_RiftEndScreenConsolePlayerInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_RiftEndScreenInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.RiftEndScreenInfo, global::D3.GameMessage.RiftEndScreenInfo.Builder> internal__static_D3_GameMessage_RiftEndScreenInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_RiftStartPreloadingLeaderBoardData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.RiftStartPreloadingLeaderBoardData, global::D3.GameMessage.RiftStartPreloadingLeaderBoardData.Builder> internal__static_D3_GameMessage_RiftStartPreloadingLeaderBoardData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_AchievementsGetSnapshot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.AchievementsGetSnapshot, global::D3.GameMessage.AchievementsGetSnapshot.Builder> internal__static_D3_GameMessage_AchievementsGetSnapshot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_AchievementsResetAchievements__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.AchievementsResetAchievements, global::D3.GameMessage.AchievementsResetAchievements.Builder> internal__static_D3_GameMessage_AchievementsResetAchievements__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_AchievementsCriteriaUpdateConsole__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.AchievementsCriteriaUpdateConsole, global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Builder> internal__static_D3_GameMessage_AchievementsCriteriaUpdateConsole__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_AchievementsCriteriaUpdateConsole_Criteria__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria, global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria.Builder> internal__static_D3_GameMessage_AchievementsCriteriaUpdateConsole_Criteria__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_AchievementsAwardedConsole__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.AchievementsAwardedConsole, global::D3.GameMessage.AchievementsAwardedConsole.Builder> internal__static_D3_GameMessage_AchievementsAwardedConsole__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_AchievementsSnapshot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.AchievementsSnapshot, global::D3.GameMessage.AchievementsSnapshot.Builder> internal__static_D3_GameMessage_AchievementsSnapshot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_MatchmakingGetStats__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.MatchmakingGetStats, global::D3.GameMessage.MatchmakingGetStats.Builder> internal__static_D3_GameMessage_MatchmakingGetStats__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_MatchmakingStatsBucket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.MatchmakingStatsBucket, global::D3.GameMessage.MatchmakingStatsBucket.Builder> internal__static_D3_GameMessage_MatchmakingStatsBucket__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_MatchmakingGetStatsResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.MatchmakingGetStatsResponse, global::D3.GameMessage.MatchmakingGetStatsResponse.Builder> internal__static_D3_GameMessage_MatchmakingGetStatsResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_TriggerNewClientAvailable__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TriggerNewClientAvailable, global::D3.GameMessage.TriggerNewClientAvailable.Builder> internal__static_D3_GameMessage_TriggerNewClientAvailable__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_UnlockedDyesRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.UnlockedDyesRequest, global::D3.GameMessage.UnlockedDyesRequest.Builder> internal__static_D3_GameMessage_UnlockedDyesRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_UnlockedDyesData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.UnlockedDyesData, global::D3.GameMessage.UnlockedDyesData.Builder> internal__static_D3_GameMessage_UnlockedDyesData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ChallengeRiftFetchHeroData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ChallengeRiftFetchHeroData, global::D3.GameMessage.ChallengeRiftFetchHeroData.Builder> internal__static_D3_GameMessage_ChallengeRiftFetchHeroData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ChallengeRiftFetchHeroDataResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ChallengeRiftFetchHeroDataResponse, global::D3.GameMessage.ChallengeRiftFetchHeroDataResponse.Builder> internal__static_D3_GameMessage_ChallengeRiftFetchHeroDataResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ChallengeRiftClearRewardRecord__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ChallengeRiftClearRewardRecord, global::D3.GameMessage.ChallengeRiftClearRewardRecord.Builder> internal__static_D3_GameMessage_ChallengeRiftClearRewardRecord__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServiceInitRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServiceInitRequest, global::D3.GameMessage.ServiceInitRequest.Builder> internal__static_D3_GameMessage_ServiceInitRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServiceInitResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServiceInitResponse, global::D3.GameMessage.ServiceInitResponse.Builder> internal__static_D3_GameMessage_ServiceInitResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_GameMessage_ServiceSendDataRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServiceSendDataRequest, global::D3.GameMessage.ServiceSendDataRequest.Builder> internal__static_D3_GameMessage_ServiceSendDataRequest__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static GameMessage() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChFHYW1lTWVzc2FnZS5wcm90bxIORDMuR2FtZU1lc3NhZ2UaCkhlcm8ucHJv" + 
          "dG8aEEhlcm9Db21tb24ucHJvdG8aE09ubGluZVNlcnZpY2UucHJvdG8aDlNl" + 
          "dHRpbmdzLnByb3RvGg1BY2NvdW50LnByb3RvGgtJdGVtcy5wcm90bxoIQ1Mu" + 
          "cHJvdG8aC0d1aWxkLnByb3RvGhFMZWFkZXJib2FyZC5wcm90bxoSQWNoaWV2" + 
          "ZW1lbnRzLnByb3RvGg1Qcm9maWxlLnByb3RvIoYBCg5IZXJvRGlnZXN0TGlz" + 
          "dBJCCgphY2NvdW50X2lkGAEgAigLMiMuRDMuT25saW5lU2VydmljZS5HYW1l" + 
          "QWNjb3VudEhhbmRsZVIJYWNjb3VudElkEjAKC2RpZ2VzdF9saXN0GAIgAygL" + 
          "Mg8uRDMuSGVyby5EaWdlc3RSCmRpZ2VzdExpc3QieAoSQ2xpZW50VG9vblNl" + 
          "dHRpbmdzEhcKB3Rvb25faWQYASACKARSBnRvb25JZBJJChRjbGllbnRfdG9v" + 
          "bl9zZXR0aW5ncxgCIAIoCzIXLkQzLkNsaWVudC5Ub29uU2V0dGluZ3NSEmNs" + 
          "aWVudFRvb25TZXR0aW5ncyKlAQoVSGVyb0RpZ2VzdExpc3RSZXF1ZXN0EkIK" + 
          "CmFjY291bnRfaWQYASACKAsyIy5EMy5PbmxpbmVTZXJ2aWNlLkdhbWVBY2Nv" + 
          "dW50SGFuZGxlUglhY2NvdW50SWQSFwoHdG9vbl9pZBgCIAMoBFIGdG9vbklk" + 
          "Ei8KEGdldF9kZWxldGVkX2hlcm8YAyABKAg6BWZhbHNlUg5nZXREZWxldGVk" + 
          "SGVybyJKChZIZXJvRGlnZXN0TGlzdFJlc3BvbnNlEjAKC2RpZ2VzdF9saXN0" + 
          "GAEgAygLMg8uRDMuSGVyby5EaWdlc3RSCmRpZ2VzdExpc3QiagoMUGxheWVy" + 
          "QmFubmVyEiEKDHBsYXllcl9pbmRleBgBIAIoDVILcGxheWVySW5kZXgSNwoG" + 
          "YmFubmVyGAIgAigLMh8uRDMuQWNjb3VudC5CYW5uZXJDb25maWd1cmF0aW9u" + 
          "UgZiYW5uZXIimwEKF1NhdmVCYW5uZXJDb25maWd1cmF0aW9uEjcKBmJhbm5l" + 
          "chgBIAIoCzIfLkQzLkFjY291bnQuQmFubmVyQ29uZmlndXJhdGlvblIGYmFu" + 
          "bmVyEiAKCnNsb3RfaW5kZXgYAiABKA06ATBSCXNsb3RJbmRleBIlCgttYWtl" + 
          "X2FjdGl2ZRgDIAEoCDoEdHJ1ZVIKbWFrZUFjdGl2ZSJ9ChBIZXJvRGlnZXN0" + 
          "QmFubmVyEjAKC2hlcm9fZGlnZXN0GAEgAigLMg8uRDMuSGVyby5EaWdlc3RS" + 
          "Cmhlcm9EaWdlc3QSNwoGYmFubmVyGAIgAigLMh8uRDMuQWNjb3VudC5CYW5u" + 
          "ZXJDb25maWd1cmF0aW9uUgZiYW5uZXIiUAoSR2FtZUN1cnJlbnRQbGF5ZXJz" + 
          "EjoKB3BsYXllcnMYASADKAsyIC5EMy5HYW1lTWVzc2FnZS5IZXJvRGlnZXN0" + 
          "QmFubmVyUgdwbGF5ZXJzIlAKClRvb2x0aXBJZHMSFgoGbG9jYWxlGAEgAigN" + 
          "UgZsb2NhbGUSKgoDaWRzGAIgAygLMhguRDMuT25saW5lU2VydmljZS5JdGVt" + 
          "SWRSA2lkcyJVChFUb29sdGlwR2VuZXJhdG9ycxIWCgZsb2NhbGUYASACKA1S" + 
          "BmxvY2FsZRIoCgVpdGVtcxgCIAIoCzISLkQzLkl0ZW1zLkl0ZW1MaXN0UgVp" + 
          "dGVtcyJ5Cg9UdXRvcmlhbE1lc3NhZ2USIQoMdHV0b3JpYWxfc25vGAEgAigN" + 
          "Ugt0dXRvcmlhbFNubxIkCg51aV9hbmNob3JfbmFtZRgCIAEoCVIMdWlBbmNo" + 
          "b3JOYW1lEh0KCGFjdG9yX2lkGAMgASgFOgItMVIHYWN0b3JJZCI2Cg1UdXRv" + 
          "cmlhbFN0YXRlEiUKDnNlZW5fdHV0b3JpYWxzGAEgAigMUg1zZWVuVHV0b3Jp" + 
          "YWxzIi0KEkNyZWF0ZUhlcm9SZXNwb25zZRIXCgdoZXJvX2lkGAEgAigEUgZo" + 
          "ZXJvSWQiJQoKU2VsZWN0SGVybxIXCgdoZXJvX2lkGAEgAigEUgZoZXJvSWQi" + 
          "JQoKRGVsZXRlSGVybxIXCgdoZXJvX2lkGAEgAigEUgZoZXJvSWQiYAoMVW5k" + 
          "ZWxldGVIZXJvEigKEHVuZGVsZXRlX2hlcm9faWQYASACKARSDnVuZGVsZXRl" + 
          "SGVyb0lkEiYKD3JlcGxhY2VfaGVyb19pZBgCIAEoBFINcmVwbGFjZUhlcm9J" + 
          "ZCJUCg5HZXRGYWxsZW5IZXJvcxJCCgphY2NvdW50X2lkGAEgAigLMiMuRDMu" + 
          "T25saW5lU2VydmljZS5HYW1lQWNjb3VudEhhbmRsZVIJYWNjb3VudElkIkQK" + 
          "D0FyY2hpdmVIYXJkY29yZRIXCgdoZXJvX2lkGAEgAigEUgZoZXJvSWQSGAoH" + 
          "ZXBpdGFwaBgCIAIoCVIHZXBpdGFwaCIyChdBcmNoaXZlSGFyZGNvcmVSZXNw" + 
          "b25zZRIXCgdoZXJvX2lkGAEgAigEUgZoZXJvSWQiKwoQRGVsZXRlRmFsbGVu" + 
          "SGVybxIXCgdoZXJvX2lkGAEgAigEUgZoZXJvSWQigQEKEkFjY291bnRWZXJz" + 
          "aW9uTGlzdBI5CgphY2NvdW50X2lkGAEgAigLMhouRDMuT25saW5lU2Vydmlj" + 
          "ZS5FbnRpdHlJZFIJYWNjb3VudElkEjAKEHJldHVybl9zbmFwc2hvdHMYAiAB" + 
          "KAg6BWZhbHNlUg9yZXR1cm5TbmFwc2hvdHMi6gIKEkFjY291bnRWZXJzaW9u" + 
          "U3luYxI5CgphY2NvdW50X2lkGAEgAigLMhouRDMuT25saW5lU2VydmljZS5F" + 
          "bnRpdHlJZFIJYWNjb3VudElkEhgKB3ZlcnNpb24YAiACKARSB3ZlcnNpb24S" + 
          "PwoYYWxsb3dfaGFyZGNvcmVfcmVzdXJyZWN0GAQgASgIOgVmYWxzZVIWYWxs" + 
          "b3dIYXJkY29yZVJlc3VycmVjdBIsCg9iaW5kX29uX3Jlc3RvcmUYAyABKAg6" + 
          "BHRydWVSDWJpbmRPblJlc3RvcmUSSAoScmVjcmVhdGVfaXRlbV9saXN0GAUg" + 
          "ASgLMhouRDMuQ1MuUGFydGl0aW9uZWRHQklETGlzdFIQcmVjcmVhdGVJdGVt" + 
          "TGlzdBJGChFzb3VyY2VfYWNjb3VudF9pZBgGIAEoCzIaLkQzLk9ubGluZVNl" + 
          "cnZpY2UuRW50aXR5SWRSD3NvdXJjZUFjY291bnRJZCKCAQoQU2VydmVyRGVs" + 
          "ZXRlSGVybxI5CgphY2NvdW50X2lkGAEgAigLMhouRDMuT25saW5lU2Vydmlj" + 
          "ZS5FbnRpdHlJZFIJYWNjb3VudElkEjMKB2hlcm9faWQYAiACKAsyGi5EMy5P" + 
          "bmxpbmVTZXJ2aWNlLkVudGl0eUlkUgZoZXJvSWQi2QEKElNlcnZlclVuZGVs" + 
          "ZXRlSGVybxI5CgphY2NvdW50X2lkGAEgAigLMhouRDMuT25saW5lU2Vydmlj" + 
          "ZS5FbnRpdHlJZFIJYWNjb3VudElkEkQKEHVuZGVsZXRlX2hlcm9faWQYAiAC" + 
          "KAsyGi5EMy5PbmxpbmVTZXJ2aWNlLkVudGl0eUlkUg51bmRlbGV0ZUhlcm9J" + 
          "ZBJCCg9yZXBsYWNlX2hlcm9faWQYAyABKAsyGi5EMy5PbmxpbmVTZXJ2aWNl" + 
          "LkVudGl0eUlkUg1yZXBsYWNlSGVyb0lkIocBChVTZXJ2ZXJGb3JjZVJlbmFt" + 
          "ZUhlcm8SOQoKYWNjb3VudF9pZBgBIAIoCzIaLkQzLk9ubGluZVNlcnZpY2Uu" + 
          "RW50aXR5SWRSCWFjY291bnRJZBIzCgdoZXJvX2lkGAIgAigLMhouRDMuT25s" + 
          "aW5lU2VydmljZS5FbnRpdHlJZFIGaGVyb0lkIk0KEFNlcnZlckZldGNoSGVy" + 
          "b3MSOQoKYWNjb3VudF9pZBgBIAIoCzIaLkQzLk9ubGluZVNlcnZpY2UuRW50" + 
          "aXR5SWRSCWFjY291bnRJZCKGAQoUU2VydmVyRmV0Y2hJbnZlbnRvcnkSOQoK" + 
          "YWNjb3VudF9pZBgBIAIoCzIaLkQzLk9ubGluZVNlcnZpY2UuRW50aXR5SWRS" + 
          "CWFjY291bnRJZBIzCgdoZXJvX2lkGAIgAigLMhouRDMuT25saW5lU2Vydmlj" + 
          "ZS5FbnRpdHlJZFIGaGVyb0lkIksKDlNlcnZlclNuYXBzaG90EjkKCmFjY291" + 
          "bnRfaWQYASACKAsyGi5EMy5PbmxpbmVTZXJ2aWNlLkVudGl0eUlkUglhY2Nv" + 
          "dW50SWQibQoWU2VydmVyU25hcHNob3RSZXNwb25zZRI5CgphY2NvdW50X2lk" + 
          "GAEgAigLMhouRDMuT25saW5lU2VydmljZS5FbnRpdHlJZFIJYWNjb3VudElk" + 
          "EhgKB3ZlcnNpb24YAiACKARSB3ZlcnNpb24iagoTU2VydmVyRmV0Y2hTbmFw" + 
          "c2hvdBI5CgphY2NvdW50X2lkGAEgAigLMhouRDMuT25saW5lU2VydmljZS5F" + 
          "bnRpdHlJZFIJYWNjb3VudElkEhgKB3ZlcnNpb24YAiACKARSB3ZlcnNpb24i" + 
          "tQEKEFNlcnZlclJldm9rZUl0ZW0SOQoKYWNjb3VudF9pZBgBIAIoCzIaLkQz" + 
          "Lk9ubGluZVNlcnZpY2UuRW50aXR5SWRSCWFjY291bnRJZBIzCgdoZXJvX2lk" + 
          "GAIgAigLMhouRDMuT25saW5lU2VydmljZS5FbnRpdHlJZFIGaGVyb0lkEjEK" + 
          "B2l0ZW1faWQYAyACKAsyGC5EMy5PbmxpbmVTZXJ2aWNlLkl0ZW1JZFIGaXRl" + 
          "bUlkIlIKFFNlcnZlckd1aWxkRmlsdGVyRGVmEhkKCGd1aWxkX2lkGAEgAigE" + 
          "UgdndWlsZElkEh8KC2ZpbHRlcl9iaXRzGAIgAigNUgpmaWx0ZXJCaXRzImIK" + 
          "EVNlcnZlckd1aWxkUmVuYW1lEhkKCGd1aWxkX2lkGAEgAigEUgdndWlsZElk" + 
          "EhkKCG5ld19uYW1lGAIgAigJUgduZXdOYW1lEhcKB25ld190YWcYAyACKAlS" + 
          "Bm5ld1RhZyJUChtTZXJ2ZXJHdWlsZERlc2NyaXB0aW9uQ2xlYXISNQoIZ3Vp" + 
          "bGRfaWQYASACKAsyGi5EMy5PbmxpbmVTZXJ2aWNlLkVudGl0eUlkUgdndWls" + 
          "ZElkIlQKF1NlcnZlckd1aWxkUGxheWVyR3JvdXBzEjkKCmFjY291bnRfaWQY" + 
          "AiACKAsyGi5EMy5PbmxpbmVTZXJ2aWNlLkVudGl0eUlkUglhY2NvdW50SWQi" + 
          "UwoWU2VydmVyRm9yY2VDb2xkU3RvcmFnZRI5CgphY2NvdW50X2lkGAEgAigL" + 
          "MhouRDMuT25saW5lU2VydmljZS5FbnRpdHlJZFIJYWNjb3VudElkInUKHlNl" + 
          "cnZlckZvcmNlQ29sZFN0b3JhZ2VSZXNwb25zZRI5CgphY2NvdW50X2lkGAEg" + 
          "AigLMhouRDMuT25saW5lU2VydmljZS5FbnRpdHlJZFIJYWNjb3VudElkEhgK" + 
          "B3ZlcnNpb24YAiACKARSB3ZlcnNpb24iUwoWU2VydmVyRmV0Y2hBY2NvdW50" + 
          "RGF0YRI5CgphY2NvdW50X2lkGAEgAigLMhouRDMuT25saW5lU2VydmljZS5F" + 
          "bnRpdHlJZFIJYWNjb3VudElkImoKF0luaXRpYWxMb2dpbkRhdGFSZXF1ZXN0" + 
          "EioKEWNvdW50cnlfaWRfZm91cmNjGAEgAigNUg9jb3VudHJ5SWRGb3VyY2MS" + 
          "IwoNcGF0Y2hfdmVyc2lvbhgCIAEoCVIMcGF0Y2hWZXJzaW9uInMKHkluaXRp" + 
          "YWxMb2dpbkRhdGFRdWV1ZWRSZXNwb25zZRIdCgpzZXJ2aWNlX2lkGAEgAigN" + 
          "UglzZXJ2aWNlSWQSMgoVdGltZW91dF90aWNrX2ludGVydmFsGAIgAigNUhN0" + 
          "aW1lb3V0VGlja0ludGVydmFsIhgKFkNhbmNlbExvZ2luRGF0YVJlcXVlc3Qi" + 
          "QAoKUmVuYW1lSGVybxIXCgdoZXJvX2lkGAEgAigEUgZoZXJvSWQSGQoIbmV3" + 
          "X25hbWUYAiACKAlSB25ld05hbWUiVQoSUmViaXJ0aEhlcm9SZXF1ZXN0EhcK" + 
          "B2hlcm9faWQYASACKARSBmhlcm9JZBImCg9pc19jdXJyZW50X2hlcm8YAiAC" + 
          "KAhSDWlzQ3VycmVudEhlcm8iRwoTUmViaXJ0aEhlcm9SZXNwb25zZRIwCgto" + 
          "ZXJvX2RpZ2VzdBgBIAIoCzIPLkQzLkhlcm8uRGlnZXN0UgpoZXJvRGlnZXN0" + 
          "IlQKFlNldEdhbWVBY2NvdW50U2V0dGluZ3MSOgoIc2V0dGluZ3MYASACKAsy" + 
          "Hi5EMy5DbGllbnQuR2FtZUFjY291bnRTZXR0aW5nc1IIc2V0dGluZ3MiKgoP" + 
          "R2V0VG9vblNldHRpbmdzEhcKB2hlcm9faWQYASACKARSBmhlcm9JZCJfCg9T" + 
          "ZXRUb29uU2V0dGluZ3MSFwoHaGVyb19pZBgBIAIoBFIGaGVyb0lkEjMKCHNl" + 
          "dHRpbmdzGAIgAigLMhcuRDMuQ2xpZW50LlRvb25TZXR0aW5nc1IIc2V0dGlu" + 
          "Z3MiEgoQR2V0QWNjb3VudERpZ2VzdCInCgxHZXRIZXJvSXRlbXMSFwoHaGVy" + 
          "b19pZBgBIAIoBFIGaGVyb0lkIi0KD0dldEFjY291bnRJdGVtcxIaCghoYXJk" + 
          "Y29yZRgBIAIoCFIIaGFyZGNvcmUidwoRR2V0QWNjb3VudFByb2ZpbGUSQgoK" + 
          "YWNjb3VudF9pZBgBIAIoCzIjLkQzLk9ubGluZVNlcnZpY2UuR2FtZUFjY291" + 
          "bnRIYW5kbGVSCWFjY291bnRJZBIeCglzZWFzb25faWQYAiABKAU6ATBSCHNl" + 
          "YXNvbklkInAKD0dldEhlcm9Qcm9maWxlcxJCCgphY2NvdW50X2lkGAEgAigL" + 
          "MiMuRDMuT25saW5lU2VydmljZS5HYW1lQWNjb3VudEhhbmRsZVIJYWNjb3Vu" + 
          "dElkEhkKCGhlcm9faWRzGAIgAygEUgdoZXJvSWRzIhEKD0dldEFjY291bnRQ" + 
          "cmVmcyI/Cg9TZXRBY2NvdW50UHJlZnMSLAoFcHJlZnMYASACKAsyFi5EMy5D" + 
          "bGllbnQuUHJlZmVyZW5jZXNSBXByZWZzIhIKEEdldENvc21ldGljSXRlbXMi" + 
          "bAoNR2V0SGVyb0RpZ2VzdBJCCgphY2NvdW50X2lkGAEgAigLMiMuRDMuT25s" + 
          "aW5lU2VydmljZS5HYW1lQWNjb3VudEhhbmRsZVIJYWNjb3VudElkEhcKB2hl" + 
          "cm9faWQYAiACKARSBmhlcm9JZCJQCgpHZXRIZXJvSWRzEkIKCmFjY291bnRf" + 
          "aWQYASACKAsyIy5EMy5PbmxpbmVTZXJ2aWNlLkdhbWVBY2NvdW50SGFuZGxl" + 
          "UglhY2NvdW50SWQiLwoSR2V0SGVyb0lkc1Jlc3BvbnNlEhkKCGhlcm9faWRz" + 
          "GAEgAygEUgdoZXJvSWRzIhAKDkdldERlbGV0ZWRIZXJvIhAKDkNTR2V0U25h" + 
          "cHNob3RzIioKDkNTUHVsbFNuYXBzaG90EhgKB3ZlcnNpb24YASACKARSB3Zl" + 
          "cnNpb24iNQoOQ1NQdXNoU25hcHNob3QSIwoEZGF0YRgBIAIoCzIPLkQzLkNT" + 
          "LlNuYXBzaG90UgRkYXRhIhEKD0NTV3JpdGVTbmFwc2hvdCKIAQoRQ1NHaXZl" + 
          "Q2FyZVBhY2thZ2USQgoKYWNjb3VudF9pZBgBIAIoCzIjLkQzLk9ubGluZVNl" + 
          "cnZpY2UuR2FtZUFjY291bnRIYW5kbGVSCWFjY291bnRJZBIXCgdjYXJlX2lk" + 
          "GAIgAigNUgZjYXJlSWQSFgoGbG9jYWxlGAMgAigNUgZsb2NhbGUiWAoSQ1NG" + 
          "b3JjZUNvbGRTdG9yYWdlEkIKCmFjY291bnRfaWQYASACKAsyIy5EMy5Pbmxp" + 
          "bmVTZXJ2aWNlLkdhbWVBY2NvdW50SGFuZGxlUglhY2NvdW50SWQiZQoUVHJh" + 
          "bnNmZXJBY2NvdW50Q2hlY2sSTQoQbG9jYWxfYWNjb3VudF9pZBgBIAIoCzIj" + 
          "LkQzLk9ubGluZVNlcnZpY2UuR2FtZUFjY291bnRIYW5kbGVSDmxvY2FsQWNj" + 
          "b3VudElkIl0KHFRyYW5zZmVyQWNjb3VudENoZWNrUmVzcG9uc2USFgoGc3Rh" + 
          "dHVzGAEgAigFUgZzdGF0dXMSJQoOYXZhaWxhYmxlX3RpbWUYAiACKAVSDWF2" + 
          "YWlsYWJsZVRpbWUi5AEKFFRyYW5zZmVyQWNjb3VudEJlZ2luEk0KEGxvY2Fs" + 
          "X2FjY291bnRfaWQYASACKAsyIy5EMy5PbmxpbmVTZXJ2aWNlLkdhbWVBY2Nv" + 
          "dW50SGFuZGxlUg5sb2NhbEFjY291bnRJZBJPChFzb3VyY2VfYWNjb3VudF9p" + 
          "ZBgCIAIoCzIjLkQzLk9ubGluZVNlcnZpY2UuR2FtZUFjY291bnRIYW5kbGVS" + 
          "D3NvdXJjZUFjY291bnRJZBIWCgZyZWdpb24YAyACKAlSBnJlZ2lvbhIUCgVm" + 
          "b3JjZRgEIAIoCFIFZm9yY2UifwoYVHJhbnNmZXJBY2NvdW50R2V0U3RhdHVz" + 
          "Ek0KEGxvY2FsX2FjY291bnRfaWQYASACKAsyIy5EMy5PbmxpbmVTZXJ2aWNl" + 
          "LkdhbWVBY2NvdW50SGFuZGxlUg5sb2NhbEFjY291bnRJZBIUCgV0b2tlbhgC" + 
          "IAIoBFIFdG9rZW4ilgEKF1RyYW5zZmVyQWNjb3VudFJlc3BvbnNlEk0KEGxv" + 
          "Y2FsX2FjY291bnRfaWQYASACKAsyIy5EMy5PbmxpbmVTZXJ2aWNlLkdhbWVB" + 
          "Y2NvdW50SGFuZGxlUg5sb2NhbEFjY291bnRJZBIUCgV0b2tlbhgCIAIoBFIF" + 
          "dG9rZW4SFgoGc3RhdHVzGAMgAigFUgZzdGF0dXMirgEKEUJhbm5lclNhdmVD" + 
          "b25maXJtEkIKCmFjY291bnRfaWQYASACKAsyIy5EMy5PbmxpbmVTZXJ2aWNl" + 
          "LkdhbWVBY2NvdW50SGFuZGxlUglhY2NvdW50SWQSNwoGYmFubmVyGAIgAigL" + 
          "Mh8uRDMuQWNjb3VudC5CYW5uZXJDb25maWd1cmF0aW9uUgZiYW5uZXISHAoJ" + 
          "ZGJFcnJDb2RlGAMgAigFUglkYkVyckNvZGUiXgocQ2xpZW50QWNjb3VudFRy" + 
          "YW5zZmVyUmVxdWVzdBIWCgZyZWdpb24YASACKAlSBnJlZ2lvbhImCg9nYW1l" + 
          "X2FjY291bnRfaWQYAiABKARSDWdhbWVBY2NvdW50SWQiEwoRTnVtUGxheWVy" + 
          "c1JlcXVlc3QiLAoSTnVtUGxheWVyc1Jlc3BvbnNlEhYKBnJlc3VsdBgBIAIo" + 
          "BVIGcmVzdWx0IjMKGEdldEhlcm9BdHRyaWJ1dGVzUmVxdWVzdBIXCgdoZXJv" + 
          "X2lkGAEgAigEUgZoZXJvSWQiXgoMTWFpbENvbnRlbnRzEicKD2FwcGVuZF9t" + 
          "ZXNzYWdlcxgBIAIoCFIOYXBwZW5kTWVzc2FnZXMSJQoFbWFpbHMYAiACKAsy" + 
          "Dy5EMy5JdGVtcy5NYWlsc1IFbWFpbHMiyQEKDU1haWxPcGVyYXRpb24SXQoO" + 
          "bWFpbF9vcGVyYXRpb24YASACKA4yJy5EMy5HYW1lTWVzc2FnZS5NYWlsT3Bl" + 
          "cmF0aW9uLk9wZXJhdGlvbjoNTUFJTF9SRVRSSUVWRVINbWFpbE9wZXJhdGlv" + 
          "bhIZCghtYWlsX2lkcxgCIAMoBFIHbWFpbElkcyI+CglPcGVyYXRpb24SEQoN" + 
          "TUFJTF9SRVRSSUVWRRAAEg8KC01BSUxfREVMRVRFEAESDQoJTUFJTF9SRUFE" + 
          "EAIiWAobTWFpbE9wZXJhdGlvblJlc3BvbnNlUmVzdWx0EhcKB21haWxfaWQY" + 
          "ASACKARSBm1haWxJZBIgCgptYWlsX2Vycm9yGAIgASgNOgEwUgltYWlsRXJy" + 
          "b3Ii2QEKFU1haWxPcGVyYXRpb25SZXNwb25zZRJdCg5tYWlsX29wZXJhdGlv" + 
          "bhgBIAIoDjInLkQzLkdhbWVNZXNzYWdlLk1haWxPcGVyYXRpb24uT3BlcmF0" + 
          "aW9uOg1NQUlMX1JFVFJJRVZFUg1tYWlsT3BlcmF0aW9uEmEKFm1haWxfb3Bl" + 
          "cmF0aW9uX3Jlc3VsdHMYAiADKAsyKy5EMy5HYW1lTWVzc2FnZS5NYWlsT3Bl" + 
          "cmF0aW9uUmVzcG9uc2VSZXN1bHRSFG1haWxPcGVyYXRpb25SZXN1bHRzIjYK" + 
          "DVR1dG9yaWFsRmxhZ3MSJQoOc2Vlbl90dXRvcmlhbHMYASACKAxSDXNlZW5U" + 
          "dXRvcmlhbHMiMQoWUmVzZXRIZXJvU3RvcnlQcm9ncmVzcxIXCgdoZXJvX2lk" + 
          "GAEgAigEUgZoZXJvSWQiFwoVRm9yY2VBY2NvdW50TWlncmF0aW9uInIKEUVx" + 
          "dWlwQ29zbWV0aWNJdGVtEhcKB2hlcm9faWQYASACKARSBmhlcm9JZBIsChJj" + 
          "b3NtZXRpY19pdGVtX3R5cGUYAiACKAVSEGNvc21ldGljSXRlbVR5cGUSFgoE" + 
          "Z2JpZBgDIAEoDzoCLTFSBGdiaWQiJAoHR3VpbGRJZBIZCghndWlsZF9pZBgB" + 
          "IAIoBFIHZ3VpbGRJZCInCghHdWlsZElkcxIbCglndWlsZF9pZHMYASADKARS" + 
          "CGd1aWxkSWRzIn8KC0d1aWxkQ3JlYXRlEhIKBG5hbWUYASACKAlSBG5hbWUS" + 
          "EAoDdGFnGAIgAigJUgN0YWcSGgoIbGFuZ3VhZ2UYAyACKA1SCGxhbmd1YWdl" + 
          "Ei4KE2xvb2tpbmdfZm9yX21lbWJlcnMYBCACKAhSEWxvb2tpbmdGb3JNZW1i" + 
          "ZXJzIosBCgtHcm91cENyZWF0ZRISCgRuYW1lGAEgAigJUgRuYW1lEicKD3Nl" + 
          "YXJjaF9jYXRlZ29yeRgCIAIoDVIOc2VhcmNoQ2F0ZWdvcnkSGgoIbGFuZ3Vh" + 
          "Z2UYAyACKA1SCGxhbmd1YWdlEiMKDXByaXZhY3lfbGV2ZWwYBCACKA1SDHBy" + 
          "aXZhY3lMZXZlbCJ2CgtHdWlsZEludml0ZRIZCghndWlsZF9pZBgBIAIoBFIH" + 
          "Z3VpbGRJZBIdCgppbnZpdGVlX2lkGAIgASgEUglpbnZpdGVlSWQSLQoTYmF0" + 
          "dGxlX3RhZ19vcl9lbWFpbBgDIAEoCVIQYmF0dGxlVGFnT3JFbWFpbCJ2ChNH" + 
          "dWlsZEludml0ZVJlc3BvbnNlEhkKCGd1aWxkX2lkGAEgAigEUgdndWlsZElk" + 
          "EhYKBnJlc3VsdBgCIAIoCFIGcmVzdWx0EiwKDmFwcGx5X2Nvb2xkb3duGAMg" + 
          "ASgIOgVmYWxzZVINYXBwbHlDb29sZG93biJOChRHdWlsZEZldGNoUGxheWVy" + 
          "Tm90ZRIZCghndWlsZF9pZBgBIAIoBFIHZ3VpbGRJZBIbCgltZW1iZXJfaWQY" + 
          "AiACKA1SCG1lbWJlcklkIj0KDEd1aWxkU2V0TW90ZBIZCghndWlsZF9pZBgB" + 
          "IAIoBFIHZ3VpbGRJZBISCgRtb3RkGAIgAigJUgRtb3RkIlIKE0d1aWxkU2V0" + 
          "RGVzY3JpcHRpb24SGQoIZ3VpbGRfaWQYASACKARSB2d1aWxkSWQSIAoLZGVz" + 
          "Y3JpcHRpb24YAiACKAlSC2Rlc2NyaXB0aW9uIskBCgxHdWlsZFNldE5ld3MS" + 
          "GQoIZ3VpbGRfaWQYASACKARSB2d1aWxkSWQSQgoKYWNjb3VudF9pZBgCIAIo" + 
          "CzIjLkQzLk9ubGluZVNlcnZpY2UuR2FtZUFjY291bnRIYW5kbGVSCWFjY291" + 
          "bnRJZBIbCgluZXdzX3R5cGUYAyACKA1SCG5ld3NUeXBlEhsKCW5ld3NfZGF0" + 
          "YRgEIAIoDFIIbmV3c0RhdGESIAoKbmV3c19mbGFncxgFIAIoDToBMFIJbmV3" + 
          "c0ZsYWdzIn8KDUd1aWxkRWRpdE5ld3MSGQoIZ3VpbGRfaWQYASACKARSB2d1" + 
          "aWxkSWQSFwoHbmV3c19pZBgCIAIoBFIGbmV3c0lkEhsKCW5ld3NfZGF0YRgD" + 
          "IAIoDFIIbmV3c0RhdGESHQoKbmV3c19mbGFncxgEIAIoDVIJbmV3c0ZsYWdz" + 
          "IkUKD0d1aWxkRGVsZXRlTmV3cxIZCghndWlsZF9pZBgBIAIoBFIHZ3VpbGRJ" + 
          "ZBIXCgduZXdzX2lkGAIgAigEUgZuZXdzSWQiawoWR3VpbGREZWxldGVBY2Nv" + 
          "dW50TmV3cxIdCgphY2NvdW50X2lkGAEgAigEUglhY2NvdW50SWQSGQoIZ3Vp" + 
          "bGRfaWQYAiACKARSB2d1aWxkSWQSFwoHbmV3c19pZBgDIAMoBFIGbmV3c0lk" + 
          "IkAKD0d1aWxkQ3JlYXRlUmFuaxIZCghndWlsZF9pZBgBIAIoBFIHZ3VpbGRJ" + 
          "ZBISCgRuYW1lGAIgAigJUgRuYW1lIkUKD0d1aWxkRGVsZXRlUmFuaxIZCghn" + 
          "dWlsZF9pZBgBIAIoBFIHZ3VpbGRJZBIXCgdyYW5rX2lkGAIgAigNUgZyYW5r" + 
          "SWQieQoPR3VpbGRNb2RpZnlSYW5rEhkKCGd1aWxkX2lkGAEgAigEUgdndWls" + 
          "ZElkEhcKB3JhbmtfaWQYAiACKA1SBnJhbmtJZBISCgRuYW1lGAMgAigJUgRu" + 
          "YW1lEh4KCnBlcm1pc3Npb24YBCACKA1SCnBlcm1pc3Npb24iTAoSR3VpbGRQ" + 
          "cm9tb3RlTWVtYmVyEhkKCGd1aWxkX2lkGAEgAigEUgdndWlsZElkEhsKCW1l" + 
          "bWJlcl9pZBgCIAIoDVIIbWVtYmVySWQiSwoRR3VpbGREZW1vdGVNZW1iZXIS" + 
          "GQoIZ3VpbGRfaWQYASACKARSB2d1aWxkSWQSGwoJbWVtYmVyX2lkGAIgAigN" + 
          "UghtZW1iZXJJZCJgChJHdWlsZFNldFBsYXllck5vdGUSGQoIZ3VpbGRfaWQY" + 
          "ASACKARSB2d1aWxkSWQSGwoJbWVtYmVyX2lkGAIgAigNUghtZW1iZXJJZBIS" + 
          "CgRub3RlGAMgAigJUgRub3RlImQKDkd1aWxkU2V0QmFubmVyEhkKCGd1aWxk" + 
          "X2lkGAEgAigEUgdndWlsZElkEjcKBmJhbm5lchgCIAIoCzIfLkQzLkFjY291" + 
          "bnQuQmFubmVyQ29uZmlndXJhdGlvblIGYmFubmVyIkkKD0d1aWxkS2lja01l" + 
          "bWJlchIZCghndWlsZF9pZBgBIAIoBFIHZ3VpbGRJZBIbCgltZW1iZXJfaWQY" + 
          "AiACKA1SCG1lbWJlcklkInUKEEd1aWxkRmV0Y2hSb3N0ZXISGQoIZ3VpbGRf" + 
          "aWQYASACKARSB2d1aWxkSWQSJQoOc3RhcnRfcG9zaXRpb24YAiACKA1SDXN0" + 
          "YXJ0UG9zaXRpb24SHwoLbnVtX21lbWJlcnMYAyACKA1SCm51bU1lbWJlcnMi" + 
          "XAoNR3VpbGRNb3ZlUmFuaxIZCghndWlsZF9pZBgBIAIoBFIHZ3VpbGRJZBIX" + 
          "CgdyYW5rX2lkGAIgAigNUgZyYW5rSWQSFwoHbW92ZV91cBgDIAIoCFIGbW92" + 
          "ZVVwIoYBCgtHdWlsZFNlYXJjaBIWCgZsb2NhbGUYASACKA1SBmxvY2FsZRIn" + 
          "Cg9zZWFyY2hfY2F0ZWdvcnkYAiABKA1SDnNlYXJjaENhdGVnb3J5EhIKBG5h" + 
          "bWUYAyABKAlSBG5hbWUSIgoNY2xhbl9vcl9ncm91cBgEIAIoDVILY2xhbk9y" + 
          "R3JvdXAiUAoUR3VpbGRJbnZpdGVHcm91cENoYXQSGQoIZ3VpbGRfaWQYASAC" + 
          "KARSB2d1aWxkSWQSHQoKaW52aXRlZV9pZBgCIAIoBFIJaW52aXRlZUlkIoEB" + 
          "ChRHdWlsZEFjY2VwdEdyb3VwQ2hhdBIZCghndWlsZF9pZBgBIAIoBFIHZ3Vp" + 
          "bGRJZBIWCgZyZXN1bHQYAiACKAhSBnJlc3VsdBI2CghwYXJ0eV9pZBgDIAIo" + 
          "CzIbLkQzLk9ubGluZVNlcnZpY2UuQ2hhbm5lbElkUgdwYXJ0eUlkIkgKDkd1" + 
          "aWxkU2V0TGVhZGVyEhkKCGd1aWxkX2lkGAEgAigEUgdndWlsZElkEhsKCW1l" + 
          "bWJlcl9pZBgCIAIoDVIIbWVtYmVySWQiTQoRR3VpbGRDYW5jZWxJbnZpdGUS" + 
          "GQoIZ3VpbGRfaWQYASACKARSB2d1aWxkSWQSHQoKYWNjb3VudF9pZBgCIAIo" + 
          "BFIJYWNjb3VudElkIlMKDEd1aWxkU3VnZ2VzdBIZCghndWlsZF9pZBgBIAIo" + 
          "BFIHZ3VpbGRJZBIoChBvdGhlcl9hY2NvdW50X2lkGAIgAigEUg5vdGhlckFj" + 
          "Y291bnRJZCJrChdHdWlsZFN1Z2dlc3Rpb25SZXNwb25zZRIZCghndWlsZF9p" + 
          "ZBgBIAIoBFIHZ3VpbGRJZBIdCgppbnZpdGVlX2lkGAIgAigEUglpbnZpdGVl" + 
          "SWQSFgoGcmVzdWx0GAMgAigIUgZyZXN1bHQiSAoOR3VpbGRGZXRjaE5ld3MS" + 
          "GQoIZ3VpbGRfaWQYASACKARSB2d1aWxkSWQSGwoJbmV3c190aW1lGAIgAigE" + 
          "UghuZXdzVGltZSJ4ChZHdWlsZFNldFNlYXJjaFNldHRpbmdzEhkKCGd1aWxk" + 
          "X2lkGAEgAigEUgdndWlsZElkEicKD3NlYXJjaF9jYXRlZ29yeRgCIAIoDVIO" + 
          "c2VhcmNoQ2F0ZWdvcnkSGgoIbGFuZ3VhZ2UYAyACKA1SCGxhbmd1YWdlIjoK" + 
          "C0d1aWxkU2V0TEZNEhkKCGd1aWxkX2lkGAEgAigEUgdndWlsZElkEhAKA2xm" + 
          "bRgCIAIoCFIDbGZtIlYKFEdyb3VwU2V0UHJpdmFjeUxldmVsEhkKCGdyb3Vw" + 
          "X2lkGAEgAigEUgdncm91cElkEiMKDXByaXZhY3lfbGV2ZWwYAiACKA1SDHBy" + 
          "aXZhY3lMZXZlbCJVCg9HZXRQbGF5ZXJHdWlsZHMSJQoOZ3VpbGRfY2F0ZWdv" + 
          "cnkYASACKA1SDWd1aWxkQ2F0ZWdvcnkSGwoJdGFyZ2V0X2lkGAIgAigEUgh0" + 
          "YXJnZXRJZCIsCg9HdWlsZFJlc3BvbnNlSWQSGQoIZ3VpbGRfaWQYASACKARS" + 
          "B2d1aWxkSWQiMQoTR3VpbGRSZXNwb25zZVN0cmluZxIaCghyZXNwb25zZRgB" + 
          "IAIoCVIIcmVzcG9uc2UiRwoTR3VpbGRSZXNwb25zZUd1aWxkcxIwCglndWls" + 
          "ZF9pZHMYASACKAsyEy5EMy5HdWlsZC5HdWlsZExpc3RSCGd1aWxkSWRzIoQB" + 
          "ChZHdWlsZFN1bW1hcnlSZXNvbHV0aW9uEhkKCGd1aWxkX2lkGAEgAigEUgdn" + 
          "dWlsZElkEh0KCmVycm9yX2NvZGUYAiABKA1SCWVycm9yQ29kZRIwCgdzdW1t" + 
          "YXJ5GAMgASgLMhYuRDMuR3VpbGQuR3VpbGRTdW1tYXJ5UgdzdW1tYXJ5ImkK" + 
          "Fkd1aWxkU3VtbWFyaWVzUmVzcG9uc2USTwoPZ3VpbGRfc3VtbWFyaWVzGAEg" + 
          "AygLMiYuRDMuR2FtZU1lc3NhZ2UuR3VpbGRTdW1tYXJ5UmVzb2x1dGlvblIO" + 
          "Z3VpbGRTdW1tYXJpZXMivgEKD0xlYWRlcmJvYXJkTGlzdBIlCg5sZWFkZXJi" + 
          "b2FyZF9pZBgBIAIoBFINbGVhZGVyYm9hcmRJZBIZCghzY29wZV9pZBgCIAIo" + 
          "DVIHc2NvcGVJZBIWCgZvZmZzZXQYAyACKA1SBm9mZnNldBIUCgVsaW1pdBgE" + 
          "IAIoDVIFbGltaXQSGAoHdmVyc2lvbhgGIAEoBFIHdmVyc2lvbhIhCgxwYXJ0" + 
          "aXRpb25faWQYByABKA1SC3BhcnRpdGlvbklkIuQBChdMZWFkZXJib2FyZExp" + 
          "c3RSZXNwb25zZRIWCgZvZmZzZXQYASACKA1SBm9mZnNldBIUCgVsaW1pdBgC" + 
          "IAIoDVIFbGltaXQSKgoFZW50cnkYAyADKAsyFC5EMy5MZWFkZXJib2FyZC5T" + 
          "bG90UgVlbnRyeRI6Chl0b3RhbF9sZWFkZXJib2FyZF9lbnRyaWVzGAQgAigN" + 
          "Uhd0b3RhbExlYWRlcmJvYXJkRW50cmllcxIZCghvd25fcmFuaxgFIAEoDVIH" + 
          "b3duUmFuaxIYCgd2ZXJzaW9uGAYgASgEUgd2ZXJzaW9uIvUBChZMZWFkZXJi" + 
          "b2FyZEZldGNoU2NvcmVzEiEKDHBhcnRpdGlvbl9pZBgCIAIoDVILcGFydGl0" + 
          "aW9uSWQSKAoQZ2FtZV9hY2NvdW50X2lkcxgDIAMoBFIOZ2FtZUFjY291bnRJ" + 
          "ZHMSJQoObGVhZGVyYm9hcmRfaWQYBCABKARSDWxlYWRlcmJvYXJkSWQSGQoI" + 
          "c2NvcGVfaWQYBSABKA1SB3Njb3BlSWQSTAoOcGFydGl0aW9uX3R5cGUYASAB" + 
          "KA4yHS5EMy5MZWFkZXJib2FyZC5QYXJ0aXRpb25UeXBlOgZTRUFTT05SDXBh" + 
          "cnRpdGlvblR5cGUiTQoeTGVhZGVyYm9hcmRGZXRjaFNjb3Jlc1Jlc3BvbnNl" + 
          "EisKBWVudHJ5GAEgAygLMhUuRDMuTGVhZGVyYm9hcmQuU2NvcmVSBWVudHJ5" + 
          "IqkBChpMZWFkZXJib2FyZEdldEhlcm9TbmFwc2hvdBImCg9nYW1lX2FjY291" + 
          "bnRfaWQYASACKARSDWdhbWVBY2NvdW50SWQSIQoMcGFydGl0aW9uX2lkGAIg" + 
          "AigNUgtwYXJ0aXRpb25JZBIZCghzY29wZV9pZBgDIAIoDVIHc2NvcGVJZBIl" + 
          "Cg5sZWFkZXJib2FyZF9pZBgEIAIoBFINbGVhZGVyYm9hcmRJZCJeCiJMZWFk" + 
          "ZXJib2FyZEdldEhlcm9TbmFwc2hvdFJlc3BvbnNlEjgKCHNuYXBzaG90GAEg" + 
          "ASgLMhwuRDMuTGVhZGVyYm9hcmQuSGVyb1NuYXBzaG90UghzbmFwc2hvdCIc" + 
          "ChpDaGVhdFJlZmV0Y2hQcm9kdWN0Q2F0YWxvZyIvChVDaGVhdE1vZGlmeVN0" + 
          "b3JlU3RhdGUSFgoGZW5hYmxlGAEgASgIUgZlbmFibGUifwocUmlmdEVuZFNj" + 
          "cmVlbkFkZFBhcnRpY2lwYW50cxJfChlwYXJ0aWNpcGFudF9nYW1lX2FjY291" + 
          "bnRzGAEgAygLMiMuRDMuT25saW5lU2VydmljZS5HYW1lQWNjb3VudEhhbmRs" + 
          "ZVIXcGFydGljaXBhbnRHYW1lQWNjb3VudHMikgIKHlJpZnRFbmRTY3JlZW5D" + 
          "b25zb2xlUGxheWVySW5mbxIfCgtwbGF5ZXJfbmFtZRgBIAEoCVIKcGxheWVy" + 
          "TmFtZRImCg9oZXJvX2diaWRfY2xhc3MYAiABKA9SDWhlcm9HYmlkQ2xhc3MS" + 
          "HQoKaGVyb19mbGFncxgDIAEoDVIJaGVyb0ZsYWdzEh0KCmhlcm9fbGV2ZWwY" + 
          "BCABKA1SCWhlcm9MZXZlbBIbCglhbHRfbGV2ZWwYBSABKA1SCGFsdExldmVs" + 
          "EkwKFWhlcm9fdmlzdWFsX2VxdWlwbWVudBgGIAEoCzIYLkQzLkhlcm8uVmlz" + 
          "dWFsRXF1aXBtZW50UhNoZXJvVmlzdWFsRXF1aXBtZW50IsgGChFSaWZ0RW5k" + 
          "U2NyZWVuSW5mbxIbCglyaWZ0X3RpZXIYASACKAVSCHJpZnRUaWVyEhgKB3N1" + 
          "Y2Nlc3MYAiACKAhSB3N1Y2Nlc3MSLAoSY29tcGxldGlvbl90aW1lX21zGAMg" + 
          "AigFUhBjb21wbGV0aW9uVGltZU1zEhsKCXhwX3Jld2FyZBgEIAIoElIIeHBS" + 
          "ZXdhcmQSHwoLZ29sZF9yZXdhcmQYBSACKAVSCmdvbGRSZXdhcmQSXwoZcGFy" + 
          "dGljaXBhbnRfZ2FtZV9hY2NvdW50cxgGIAMoCzIjLkQzLk9ubGluZVNlcnZp" + 
          "Y2UuR2FtZUFjY291bnRIYW5kbGVSF3BhcnRpY2lwYW50R2FtZUFjY291bnRz" + 
          "EiIKDWlzX2Zyb21fY2hlYXQYByACKAhSC2lzRnJvbUNoZWF0EioKEW5ld19w" + 
          "ZXJzb25hbF9iZXN0GAggAigIUg9uZXdQZXJzb25hbEJlc3QSUgoUYmFubmVy" + 
          "X2NvbmZpZ3VyYXRpb24YCSACKAsyHy5EMy5BY2NvdW50LkJhbm5lckNvbmZp" + 
          "Z3VyYXRpb25SE2Jhbm5lckNvbmZpZ3VyYXRpb24SXgoTY29uc29sZV9wbGF5" + 
          "ZXJfaW5mbxgKIAMoCzIuLkQzLkdhbWVNZXNzYWdlLlJpZnRFbmRTY3JlZW5D" + 
          "b25zb2xlUGxheWVySW5mb1IRY29uc29sZVBsYXllckluZm8SOAoYY29uc29s" + 
          "ZV9udW1fcGFydGljaXBhbnRzGA8gASgNUhZjb25zb2xlTnVtUGFydGljaXBh" + 
          "bnRzEjsKGmNoYWxsZW5nZV9yaWZ0X3Jld2FyZF9nYmlkGAsgASgFUhdjaGFs" + 
          "bGVuZ2VSaWZ0UmV3YXJkR2JpZBJBCh5jaGFsbGVuZ2VfcmlmdF90aW1lX3Rv" + 
          "X2JlYXRfbXMYDCABKAVSGWNoYWxsZW5nZVJpZnRUaW1lVG9CZWF0TXMSPQob" + 
          "Y2hhbGxlbmdlX3JpZnRfcmV3YXJkX3N0YXRlGA0gASgFUhhjaGFsbGVuZ2VS" + 
          "aWZ0UmV3YXJkU3RhdGUSMgoVY2hhbGxlbmdlX3JpZnRfbnVtYmVyGA4gASgN" + 
          "UhNjaGFsbGVuZ2VSaWZ0TnVtYmVyIpoBCiJSaWZ0U3RhcnRQcmVsb2FkaW5n" + 
          "TGVhZGVyQm9hcmREYXRhEhsKCXJpZnRfdGllchgBIAIoBVIIcmlmdFRpZXIS" + 
          "KQoQbnVtX3BhcnRpY2lwYW50cxgCIAIoBVIPbnVtUGFydGljaXBhbnRzEiwK" + 
          "EmNvbXBsZXRpb25fdGltZV9tcxgDIAIoBVIQY29tcGxldGlvblRpbWVNcyJm" + 
          "ChdBY2hpZXZlbWVudHNHZXRTbmFwc2hvdBJLCg9nYW1lX2FjY291bnRfaWQY" + 
          "ASACKAsyIy5EMy5PbmxpbmVTZXJ2aWNlLkdhbWVBY2NvdW50SGFuZGxlUg1n" + 
          "YW1lQWNjb3VudElkImwKHUFjaGlldmVtZW50c1Jlc2V0QWNoaWV2ZW1lbnRz" + 
          "EksKD2dhbWVfYWNjb3VudF9pZBgBIAIoCzIjLkQzLk9ubGluZVNlcnZpY2Uu" + 
          "R2FtZUFjY291bnRIYW5kbGVSDWdhbWVBY2NvdW50SWQizQEKIUFjaGlldmVt" + 
          "ZW50c0NyaXRlcmlhVXBkYXRlQ29uc29sZRJWCghjcml0ZXJpYRgBIAMoCzI6" + 
          "LkQzLkdhbWVNZXNzYWdlLkFjaGlldmVtZW50c0NyaXRlcmlhVXBkYXRlQ29u" + 
          "c29sZS5Dcml0ZXJpYVIIY3JpdGVyaWEaUAoIQ3JpdGVyaWESDgoCaWQYASAC" + 
          "KA1SAmlkEhgKB2RlbGV0ZWQYAiABKAhSB2RlbGV0ZWQSGgoIcXVhbnRpdHkY" + 
          "AyABKA1SCHF1YW50aXR5ImMKGkFjaGlldmVtZW50c0F3YXJkZWRDb25zb2xl" + 
          "EiEKDHBsYXllcl9pbmRleBgBIAIoDVILcGxheWVySW5kZXgSIgoMYWNoaWV2" + 
          "ZW1lbnRzGAIgAygEUgxhY2hpZXZlbWVudHMiuQEKFEFjaGlldmVtZW50c1Nu" + 
          "YXBzaG90EksKD2dhbWVfYWNjb3VudF9pZBgBIAIoCzIjLkQzLk9ubGluZVNl" + 
          "cnZpY2UuR2FtZUFjY291bnRIYW5kbGVSDWdhbWVBY2NvdW50SWQSNQoIc25h" + 
          "cHNob3QYAiABKAsyGS5EMy5BY2hpZXZlbWVudHMuU25hcHNob3RSCHNuYXBz" + 
          "aG90Eh0KCmVycm9yX2NvZGUYAyABKA1SCWVycm9yQ29kZSLMAgoTTWF0Y2ht" + 
          "YWtpbmdHZXRTdGF0cxIYCgd2ZXJzaW9uGAEgASgJUgd2ZXJzaW9uEiAKCXBh" + 
          "cnRpdGlvbhgCIAEoBToCLTFSCXBhcnRpdGlvbhIfCgtzZXJ2ZXJfcG9vbBgD" + 
          "IAEoCVIKc2VydmVyUG9vbBIZCghnYW1lX2FjdBgEIAEoBVIHZ2FtZUFjdBId" + 
          "CgpnYW1lX3F1ZXN0GAUgASgHUglnYW1lUXVlc3QSJQoOaGFuZGljYXBfbGV2" + 
          "ZWwYBiABKAVSDWhhbmRpY2FwTGV2ZWwSGQoIZ2FtZV90YWcYByABKAlSB2dh" + 
          "bWVUYWcSIwoNbW9uc3Rlcl9sZXZlbBgIIAEoBVIMbW9uc3RlckxldmVsEjcK" + 
          "GGdhbWVfY29udGVudF9hY3RfbGljZW5zZRgJIAEoBVIVZ2FtZUNvbnRlbnRB" + 
          "Y3RMaWNlbnNlItoBChZNYXRjaG1ha2luZ1N0YXRzQnVja2V0EiYKDWZvcm1p" + 
          "bmdfZ2FtZXMYASABKA06ATBSDGZvcm1pbmdHYW1lcxIqCg93YWl0aW5nX3Bs" + 
          "YXllcnMYAiABKA06ATBSDndhaXRpbmdQbGF5ZXJzEisKEG9wZW5fZ2FtZXNf" + 
          "dG90YWwYAyABKA06ATBSDm9wZW5HYW1lc1RvdGFsEj8KG3BsYXllcnNfaW5f" + 
          "b3Blbl9nYW1lc190b3RhbBgEIAEoDToBMFIXcGxheWVyc0luT3BlbkdhbWVz" + 
          "VG90YWwiaAobTWF0Y2htYWtpbmdHZXRTdGF0c1Jlc3BvbnNlEkkKDHN0YXRz" + 
          "X2J1Y2tldBgBIAMoCzImLkQzLkdhbWVNZXNzYWdlLk1hdGNobWFraW5nU3Rh" + 
          "dHNCdWNrZXRSC3N0YXRzQnVja2V0IksKGVRyaWdnZXJOZXdDbGllbnRBdmFp" + 
          "bGFibGUSLgoTY2xpZW50X2J1aWxkX251bWJlchgBIAIoDVIRY2xpZW50QnVp" + 
          "bGROdW1iZXIiFQoTVW5sb2NrZWREeWVzUmVxdWVzdCIvChBVbmxvY2tlZER5" + 
          "ZXNEYXRhEhsKCWR5ZV9nYmlkcxgBIAMoD1IIZHllR2JpZHMiRwoaQ2hhbGxl" + 
          "bmdlUmlmdEZldGNoSGVyb0RhdGESKQoQY2hhbGxlbmdlX251bWJlchgBIAIo" + 
          "DVIPY2hhbGxlbmdlTnVtYmVyIuQCCiJDaGFsbGVuZ2VSaWZ0RmV0Y2hIZXJv" + 
          "RGF0YVJlc3BvbnNlEhsKCWFsdF9sZXZlbBgBIAIoDVIIYWx0TGV2ZWwSMAoL" + 
          "aGVyb19kaWdlc3QYAiACKAsyDy5EMy5IZXJvLkRpZ2VzdFIKaGVyb0RpZ2Vz" + 
          "dBI6CgxoZXJvX3Byb2ZpbGUYAyACKAsyFy5EMy5Qcm9maWxlLkhlcm9Qcm9m" + 
          "aWxlUgtoZXJvUHJvZmlsZRIfCgtyZXdhcmRfZ2JpZBgEIAEoD1IKcmV3YXJk" + 
          "R2JpZBItChJ0YXJnZXRfbWlsbGlzZWNvbmQYBSACKA1SEXRhcmdldE1pbGxp" + 
          "c2Vjb25kEh0KCmJhdHRsZV90YWcYBiABKAlSCWJhdHRsZVRhZxJECh9jaGFs" + 
          "bGVuZ2VfZW5kX3RpbWVfdW5peF9zZWNvbmRzGAcgASgEUhtjaGFsbGVuZ2VF" + 
          "bmRUaW1lVW5peFNlY29uZHMiYQoeQ2hhbGxlbmdlUmlmdENsZWFyUmV3YXJk" + 
          "UmVjb3JkEj8KHGxhc3RfY2hhbGxlbmdlX3Jld2FyZF9lYXJuZWQYASACKA1S" + 
          "GWxhc3RDaGFsbGVuZ2VSZXdhcmRFYXJuZWQirwEKElNlcnZpY2VJbml0UmVx" + 
          "dWVzdBJVCghwbGF0Zm9ybRgBIAIoDjIrLkQzLkdhbWVNZXNzYWdlLlNlcnZp" + 
          "Y2VJbml0UmVxdWVzdC5QbGF0Zm9ybToMUExBVEZPUk1fV0lOUghwbGF0Zm9y" + 
          "bSJCCghQbGF0Zm9ybRIQCgxQTEFURk9STV9XSU4QABISCg5QTEFURk9STV9X" + 
          "SU42NBABEhAKDFBMQVRGT1JNX01BQxACIjQKE1NlcnZpY2VJbml0UmVzcG9u" + 
          "c2USHQoKc2VydmljZV9pZBgBIAIoDVIJc2VydmljZUlkIiwKFlNlcnZpY2VT" + 
          "ZW5kRGF0YVJlcXVlc3QSEgoEZGF0YRgBIAMoDFIEZGF0YQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_GameMessage_HeroDigestList__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_GameMessage_HeroDigestList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestList, global::D3.GameMessage.HeroDigestList.Builder>(internal__static_D3_GameMessage_HeroDigestList__Descriptor,
                new string[] { "AccountId", "DigestList", });
        internal__static_D3_GameMessage_ClientToonSettings__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_GameMessage_ClientToonSettings__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ClientToonSettings, global::D3.GameMessage.ClientToonSettings.Builder>(internal__static_D3_GameMessage_ClientToonSettings__Descriptor,
                new string[] { "ToonId", "ClientToonSettings_", });
        internal__static_D3_GameMessage_HeroDigestListRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_GameMessage_HeroDigestListRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestListRequest, global::D3.GameMessage.HeroDigestListRequest.Builder>(internal__static_D3_GameMessage_HeroDigestListRequest__Descriptor,
                new string[] { "AccountId", "ToonId", "GetDeletedHero", });
        internal__static_D3_GameMessage_HeroDigestListResponse__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_GameMessage_HeroDigestListResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestListResponse, global::D3.GameMessage.HeroDigestListResponse.Builder>(internal__static_D3_GameMessage_HeroDigestListResponse__Descriptor,
                new string[] { "DigestList", });
        internal__static_D3_GameMessage_PlayerBanner__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_GameMessage_PlayerBanner__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.PlayerBanner, global::D3.GameMessage.PlayerBanner.Builder>(internal__static_D3_GameMessage_PlayerBanner__Descriptor,
                new string[] { "PlayerIndex", "Banner", });
        internal__static_D3_GameMessage_SaveBannerConfiguration__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_GameMessage_SaveBannerConfiguration__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.SaveBannerConfiguration, global::D3.GameMessage.SaveBannerConfiguration.Builder>(internal__static_D3_GameMessage_SaveBannerConfiguration__Descriptor,
                new string[] { "Banner", "SlotIndex", "MakeActive", });
        internal__static_D3_GameMessage_HeroDigestBanner__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_GameMessage_HeroDigestBanner__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.HeroDigestBanner, global::D3.GameMessage.HeroDigestBanner.Builder>(internal__static_D3_GameMessage_HeroDigestBanner__Descriptor,
                new string[] { "HeroDigest", "Banner", });
        internal__static_D3_GameMessage_GameCurrentPlayers__Descriptor = Descriptor.MessageTypes[7];
        internal__static_D3_GameMessage_GameCurrentPlayers__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GameCurrentPlayers, global::D3.GameMessage.GameCurrentPlayers.Builder>(internal__static_D3_GameMessage_GameCurrentPlayers__Descriptor,
                new string[] { "Players", });
        internal__static_D3_GameMessage_TooltipIds__Descriptor = Descriptor.MessageTypes[8];
        internal__static_D3_GameMessage_TooltipIds__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TooltipIds, global::D3.GameMessage.TooltipIds.Builder>(internal__static_D3_GameMessage_TooltipIds__Descriptor,
                new string[] { "Locale", "Ids", });
        internal__static_D3_GameMessage_TooltipGenerators__Descriptor = Descriptor.MessageTypes[9];
        internal__static_D3_GameMessage_TooltipGenerators__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TooltipGenerators, global::D3.GameMessage.TooltipGenerators.Builder>(internal__static_D3_GameMessage_TooltipGenerators__Descriptor,
                new string[] { "Locale", "Items", });
        internal__static_D3_GameMessage_TutorialMessage__Descriptor = Descriptor.MessageTypes[10];
        internal__static_D3_GameMessage_TutorialMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TutorialMessage, global::D3.GameMessage.TutorialMessage.Builder>(internal__static_D3_GameMessage_TutorialMessage__Descriptor,
                new string[] { "TutorialSno", "UiAnchorName", "ActorId", });
        internal__static_D3_GameMessage_TutorialState__Descriptor = Descriptor.MessageTypes[11];
        internal__static_D3_GameMessage_TutorialState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TutorialState, global::D3.GameMessage.TutorialState.Builder>(internal__static_D3_GameMessage_TutorialState__Descriptor,
                new string[] { "SeenTutorials", });
        internal__static_D3_GameMessage_CreateHeroResponse__Descriptor = Descriptor.MessageTypes[12];
        internal__static_D3_GameMessage_CreateHeroResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CreateHeroResponse, global::D3.GameMessage.CreateHeroResponse.Builder>(internal__static_D3_GameMessage_CreateHeroResponse__Descriptor,
                new string[] { "HeroId", });
        internal__static_D3_GameMessage_SelectHero__Descriptor = Descriptor.MessageTypes[13];
        internal__static_D3_GameMessage_SelectHero__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.SelectHero, global::D3.GameMessage.SelectHero.Builder>(internal__static_D3_GameMessage_SelectHero__Descriptor,
                new string[] { "HeroId", });
        internal__static_D3_GameMessage_DeleteHero__Descriptor = Descriptor.MessageTypes[14];
        internal__static_D3_GameMessage_DeleteHero__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.DeleteHero, global::D3.GameMessage.DeleteHero.Builder>(internal__static_D3_GameMessage_DeleteHero__Descriptor,
                new string[] { "HeroId", });
        internal__static_D3_GameMessage_UndeleteHero__Descriptor = Descriptor.MessageTypes[15];
        internal__static_D3_GameMessage_UndeleteHero__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.UndeleteHero, global::D3.GameMessage.UndeleteHero.Builder>(internal__static_D3_GameMessage_UndeleteHero__Descriptor,
                new string[] { "UndeleteHeroId", "ReplaceHeroId", });
        internal__static_D3_GameMessage_GetFallenHeros__Descriptor = Descriptor.MessageTypes[16];
        internal__static_D3_GameMessage_GetFallenHeros__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetFallenHeros, global::D3.GameMessage.GetFallenHeros.Builder>(internal__static_D3_GameMessage_GetFallenHeros__Descriptor,
                new string[] { "AccountId", });
        internal__static_D3_GameMessage_ArchiveHardcore__Descriptor = Descriptor.MessageTypes[17];
        internal__static_D3_GameMessage_ArchiveHardcore__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ArchiveHardcore, global::D3.GameMessage.ArchiveHardcore.Builder>(internal__static_D3_GameMessage_ArchiveHardcore__Descriptor,
                new string[] { "HeroId", "Epitaph", });
        internal__static_D3_GameMessage_ArchiveHardcoreResponse__Descriptor = Descriptor.MessageTypes[18];
        internal__static_D3_GameMessage_ArchiveHardcoreResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ArchiveHardcoreResponse, global::D3.GameMessage.ArchiveHardcoreResponse.Builder>(internal__static_D3_GameMessage_ArchiveHardcoreResponse__Descriptor,
                new string[] { "HeroId", });
        internal__static_D3_GameMessage_DeleteFallenHero__Descriptor = Descriptor.MessageTypes[19];
        internal__static_D3_GameMessage_DeleteFallenHero__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.DeleteFallenHero, global::D3.GameMessage.DeleteFallenHero.Builder>(internal__static_D3_GameMessage_DeleteFallenHero__Descriptor,
                new string[] { "HeroId", });
        internal__static_D3_GameMessage_AccountVersionList__Descriptor = Descriptor.MessageTypes[20];
        internal__static_D3_GameMessage_AccountVersionList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.AccountVersionList, global::D3.GameMessage.AccountVersionList.Builder>(internal__static_D3_GameMessage_AccountVersionList__Descriptor,
                new string[] { "AccountId", "ReturnSnapshots", });
        internal__static_D3_GameMessage_AccountVersionSync__Descriptor = Descriptor.MessageTypes[21];
        internal__static_D3_GameMessage_AccountVersionSync__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.AccountVersionSync, global::D3.GameMessage.AccountVersionSync.Builder>(internal__static_D3_GameMessage_AccountVersionSync__Descriptor,
                new string[] { "AccountId", "Version", "AllowHardcoreResurrect", "BindOnRestore", "RecreateItemList", "SourceAccountId", });
        internal__static_D3_GameMessage_ServerDeleteHero__Descriptor = Descriptor.MessageTypes[22];
        internal__static_D3_GameMessage_ServerDeleteHero__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerDeleteHero, global::D3.GameMessage.ServerDeleteHero.Builder>(internal__static_D3_GameMessage_ServerDeleteHero__Descriptor,
                new string[] { "AccountId", "HeroId", });
        internal__static_D3_GameMessage_ServerUndeleteHero__Descriptor = Descriptor.MessageTypes[23];
        internal__static_D3_GameMessage_ServerUndeleteHero__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerUndeleteHero, global::D3.GameMessage.ServerUndeleteHero.Builder>(internal__static_D3_GameMessage_ServerUndeleteHero__Descriptor,
                new string[] { "AccountId", "UndeleteHeroId", "ReplaceHeroId", });
        internal__static_D3_GameMessage_ServerForceRenameHero__Descriptor = Descriptor.MessageTypes[24];
        internal__static_D3_GameMessage_ServerForceRenameHero__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerForceRenameHero, global::D3.GameMessage.ServerForceRenameHero.Builder>(internal__static_D3_GameMessage_ServerForceRenameHero__Descriptor,
                new string[] { "AccountId", "HeroId", });
        internal__static_D3_GameMessage_ServerFetchHeros__Descriptor = Descriptor.MessageTypes[25];
        internal__static_D3_GameMessage_ServerFetchHeros__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerFetchHeros, global::D3.GameMessage.ServerFetchHeros.Builder>(internal__static_D3_GameMessage_ServerFetchHeros__Descriptor,
                new string[] { "AccountId", });
        internal__static_D3_GameMessage_ServerFetchInventory__Descriptor = Descriptor.MessageTypes[26];
        internal__static_D3_GameMessage_ServerFetchInventory__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerFetchInventory, global::D3.GameMessage.ServerFetchInventory.Builder>(internal__static_D3_GameMessage_ServerFetchInventory__Descriptor,
                new string[] { "AccountId", "HeroId", });
        internal__static_D3_GameMessage_ServerSnapshot__Descriptor = Descriptor.MessageTypes[27];
        internal__static_D3_GameMessage_ServerSnapshot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerSnapshot, global::D3.GameMessage.ServerSnapshot.Builder>(internal__static_D3_GameMessage_ServerSnapshot__Descriptor,
                new string[] { "AccountId", });
        internal__static_D3_GameMessage_ServerSnapshotResponse__Descriptor = Descriptor.MessageTypes[28];
        internal__static_D3_GameMessage_ServerSnapshotResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerSnapshotResponse, global::D3.GameMessage.ServerSnapshotResponse.Builder>(internal__static_D3_GameMessage_ServerSnapshotResponse__Descriptor,
                new string[] { "AccountId", "Version", });
        internal__static_D3_GameMessage_ServerFetchSnapshot__Descriptor = Descriptor.MessageTypes[29];
        internal__static_D3_GameMessage_ServerFetchSnapshot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerFetchSnapshot, global::D3.GameMessage.ServerFetchSnapshot.Builder>(internal__static_D3_GameMessage_ServerFetchSnapshot__Descriptor,
                new string[] { "AccountId", "Version", });
        internal__static_D3_GameMessage_ServerRevokeItem__Descriptor = Descriptor.MessageTypes[30];
        internal__static_D3_GameMessage_ServerRevokeItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerRevokeItem, global::D3.GameMessage.ServerRevokeItem.Builder>(internal__static_D3_GameMessage_ServerRevokeItem__Descriptor,
                new string[] { "AccountId", "HeroId", "ItemId", });
        internal__static_D3_GameMessage_ServerGuildFilterDef__Descriptor = Descriptor.MessageTypes[31];
        internal__static_D3_GameMessage_ServerGuildFilterDef__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerGuildFilterDef, global::D3.GameMessage.ServerGuildFilterDef.Builder>(internal__static_D3_GameMessage_ServerGuildFilterDef__Descriptor,
                new string[] { "GuildId", "FilterBits", });
        internal__static_D3_GameMessage_ServerGuildRename__Descriptor = Descriptor.MessageTypes[32];
        internal__static_D3_GameMessage_ServerGuildRename__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerGuildRename, global::D3.GameMessage.ServerGuildRename.Builder>(internal__static_D3_GameMessage_ServerGuildRename__Descriptor,
                new string[] { "GuildId", "NewName", "NewTag", });
        internal__static_D3_GameMessage_ServerGuildDescriptionClear__Descriptor = Descriptor.MessageTypes[33];
        internal__static_D3_GameMessage_ServerGuildDescriptionClear__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerGuildDescriptionClear, global::D3.GameMessage.ServerGuildDescriptionClear.Builder>(internal__static_D3_GameMessage_ServerGuildDescriptionClear__Descriptor,
                new string[] { "GuildId", });
        internal__static_D3_GameMessage_ServerGuildPlayerGroups__Descriptor = Descriptor.MessageTypes[34];
        internal__static_D3_GameMessage_ServerGuildPlayerGroups__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerGuildPlayerGroups, global::D3.GameMessage.ServerGuildPlayerGroups.Builder>(internal__static_D3_GameMessage_ServerGuildPlayerGroups__Descriptor,
                new string[] { "AccountId", });
        internal__static_D3_GameMessage_ServerForceColdStorage__Descriptor = Descriptor.MessageTypes[35];
        internal__static_D3_GameMessage_ServerForceColdStorage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerForceColdStorage, global::D3.GameMessage.ServerForceColdStorage.Builder>(internal__static_D3_GameMessage_ServerForceColdStorage__Descriptor,
                new string[] { "AccountId", });
        internal__static_D3_GameMessage_ServerForceColdStorageResponse__Descriptor = Descriptor.MessageTypes[36];
        internal__static_D3_GameMessage_ServerForceColdStorageResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerForceColdStorageResponse, global::D3.GameMessage.ServerForceColdStorageResponse.Builder>(internal__static_D3_GameMessage_ServerForceColdStorageResponse__Descriptor,
                new string[] { "AccountId", "Version", });
        internal__static_D3_GameMessage_ServerFetchAccountData__Descriptor = Descriptor.MessageTypes[37];
        internal__static_D3_GameMessage_ServerFetchAccountData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServerFetchAccountData, global::D3.GameMessage.ServerFetchAccountData.Builder>(internal__static_D3_GameMessage_ServerFetchAccountData__Descriptor,
                new string[] { "AccountId", });
        internal__static_D3_GameMessage_InitialLoginDataRequest__Descriptor = Descriptor.MessageTypes[38];
        internal__static_D3_GameMessage_InitialLoginDataRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.InitialLoginDataRequest, global::D3.GameMessage.InitialLoginDataRequest.Builder>(internal__static_D3_GameMessage_InitialLoginDataRequest__Descriptor,
                new string[] { "CountryIdFourcc", "PatchVersion", });
        internal__static_D3_GameMessage_InitialLoginDataQueuedResponse__Descriptor = Descriptor.MessageTypes[39];
        internal__static_D3_GameMessage_InitialLoginDataQueuedResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.InitialLoginDataQueuedResponse, global::D3.GameMessage.InitialLoginDataQueuedResponse.Builder>(internal__static_D3_GameMessage_InitialLoginDataQueuedResponse__Descriptor,
                new string[] { "ServiceId", "TimeoutTickInterval", });
        internal__static_D3_GameMessage_CancelLoginDataRequest__Descriptor = Descriptor.MessageTypes[40];
        internal__static_D3_GameMessage_CancelLoginDataRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CancelLoginDataRequest, global::D3.GameMessage.CancelLoginDataRequest.Builder>(internal__static_D3_GameMessage_CancelLoginDataRequest__Descriptor,
                new string[] { });
        internal__static_D3_GameMessage_RenameHero__Descriptor = Descriptor.MessageTypes[41];
        internal__static_D3_GameMessage_RenameHero__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.RenameHero, global::D3.GameMessage.RenameHero.Builder>(internal__static_D3_GameMessage_RenameHero__Descriptor,
                new string[] { "HeroId", "NewName", });
        internal__static_D3_GameMessage_RebirthHeroRequest__Descriptor = Descriptor.MessageTypes[42];
        internal__static_D3_GameMessage_RebirthHeroRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.RebirthHeroRequest, global::D3.GameMessage.RebirthHeroRequest.Builder>(internal__static_D3_GameMessage_RebirthHeroRequest__Descriptor,
                new string[] { "HeroId", "IsCurrentHero", });
        internal__static_D3_GameMessage_RebirthHeroResponse__Descriptor = Descriptor.MessageTypes[43];
        internal__static_D3_GameMessage_RebirthHeroResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.RebirthHeroResponse, global::D3.GameMessage.RebirthHeroResponse.Builder>(internal__static_D3_GameMessage_RebirthHeroResponse__Descriptor,
                new string[] { "HeroDigest", });
        internal__static_D3_GameMessage_SetGameAccountSettings__Descriptor = Descriptor.MessageTypes[44];
        internal__static_D3_GameMessage_SetGameAccountSettings__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.SetGameAccountSettings, global::D3.GameMessage.SetGameAccountSettings.Builder>(internal__static_D3_GameMessage_SetGameAccountSettings__Descriptor,
                new string[] { "Settings", });
        internal__static_D3_GameMessage_GetToonSettings__Descriptor = Descriptor.MessageTypes[45];
        internal__static_D3_GameMessage_GetToonSettings__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetToonSettings, global::D3.GameMessage.GetToonSettings.Builder>(internal__static_D3_GameMessage_GetToonSettings__Descriptor,
                new string[] { "HeroId", });
        internal__static_D3_GameMessage_SetToonSettings__Descriptor = Descriptor.MessageTypes[46];
        internal__static_D3_GameMessage_SetToonSettings__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.SetToonSettings, global::D3.GameMessage.SetToonSettings.Builder>(internal__static_D3_GameMessage_SetToonSettings__Descriptor,
                new string[] { "HeroId", "Settings", });
        internal__static_D3_GameMessage_GetAccountDigest__Descriptor = Descriptor.MessageTypes[47];
        internal__static_D3_GameMessage_GetAccountDigest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetAccountDigest, global::D3.GameMessage.GetAccountDigest.Builder>(internal__static_D3_GameMessage_GetAccountDigest__Descriptor,
                new string[] { });
        internal__static_D3_GameMessage_GetHeroItems__Descriptor = Descriptor.MessageTypes[48];
        internal__static_D3_GameMessage_GetHeroItems__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetHeroItems, global::D3.GameMessage.GetHeroItems.Builder>(internal__static_D3_GameMessage_GetHeroItems__Descriptor,
                new string[] { "HeroId", });
        internal__static_D3_GameMessage_GetAccountItems__Descriptor = Descriptor.MessageTypes[49];
        internal__static_D3_GameMessage_GetAccountItems__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetAccountItems, global::D3.GameMessage.GetAccountItems.Builder>(internal__static_D3_GameMessage_GetAccountItems__Descriptor,
                new string[] { "Hardcore", });
        internal__static_D3_GameMessage_GetAccountProfile__Descriptor = Descriptor.MessageTypes[50];
        internal__static_D3_GameMessage_GetAccountProfile__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetAccountProfile, global::D3.GameMessage.GetAccountProfile.Builder>(internal__static_D3_GameMessage_GetAccountProfile__Descriptor,
                new string[] { "AccountId", "SeasonId", });
        internal__static_D3_GameMessage_GetHeroProfiles__Descriptor = Descriptor.MessageTypes[51];
        internal__static_D3_GameMessage_GetHeroProfiles__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetHeroProfiles, global::D3.GameMessage.GetHeroProfiles.Builder>(internal__static_D3_GameMessage_GetHeroProfiles__Descriptor,
                new string[] { "AccountId", "HeroIds", });
        internal__static_D3_GameMessage_GetAccountPrefs__Descriptor = Descriptor.MessageTypes[52];
        internal__static_D3_GameMessage_GetAccountPrefs__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetAccountPrefs, global::D3.GameMessage.GetAccountPrefs.Builder>(internal__static_D3_GameMessage_GetAccountPrefs__Descriptor,
                new string[] { });
        internal__static_D3_GameMessage_SetAccountPrefs__Descriptor = Descriptor.MessageTypes[53];
        internal__static_D3_GameMessage_SetAccountPrefs__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.SetAccountPrefs, global::D3.GameMessage.SetAccountPrefs.Builder>(internal__static_D3_GameMessage_SetAccountPrefs__Descriptor,
                new string[] { "Prefs", });
        internal__static_D3_GameMessage_GetCosmeticItems__Descriptor = Descriptor.MessageTypes[54];
        internal__static_D3_GameMessage_GetCosmeticItems__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetCosmeticItems, global::D3.GameMessage.GetCosmeticItems.Builder>(internal__static_D3_GameMessage_GetCosmeticItems__Descriptor,
                new string[] { });
        internal__static_D3_GameMessage_GetHeroDigest__Descriptor = Descriptor.MessageTypes[55];
        internal__static_D3_GameMessage_GetHeroDigest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetHeroDigest, global::D3.GameMessage.GetHeroDigest.Builder>(internal__static_D3_GameMessage_GetHeroDigest__Descriptor,
                new string[] { "AccountId", "HeroId", });
        internal__static_D3_GameMessage_GetHeroIds__Descriptor = Descriptor.MessageTypes[56];
        internal__static_D3_GameMessage_GetHeroIds__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetHeroIds, global::D3.GameMessage.GetHeroIds.Builder>(internal__static_D3_GameMessage_GetHeroIds__Descriptor,
                new string[] { "AccountId", });
        internal__static_D3_GameMessage_GetHeroIdsResponse__Descriptor = Descriptor.MessageTypes[57];
        internal__static_D3_GameMessage_GetHeroIdsResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetHeroIdsResponse, global::D3.GameMessage.GetHeroIdsResponse.Builder>(internal__static_D3_GameMessage_GetHeroIdsResponse__Descriptor,
                new string[] { "HeroIds", });
        internal__static_D3_GameMessage_GetDeletedHero__Descriptor = Descriptor.MessageTypes[58];
        internal__static_D3_GameMessage_GetDeletedHero__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetDeletedHero, global::D3.GameMessage.GetDeletedHero.Builder>(internal__static_D3_GameMessage_GetDeletedHero__Descriptor,
                new string[] { });
        internal__static_D3_GameMessage_CSGetSnapshots__Descriptor = Descriptor.MessageTypes[59];
        internal__static_D3_GameMessage_CSGetSnapshots__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CSGetSnapshots, global::D3.GameMessage.CSGetSnapshots.Builder>(internal__static_D3_GameMessage_CSGetSnapshots__Descriptor,
                new string[] { });
        internal__static_D3_GameMessage_CSPullSnapshot__Descriptor = Descriptor.MessageTypes[60];
        internal__static_D3_GameMessage_CSPullSnapshot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CSPullSnapshot, global::D3.GameMessage.CSPullSnapshot.Builder>(internal__static_D3_GameMessage_CSPullSnapshot__Descriptor,
                new string[] { "Version", });
        internal__static_D3_GameMessage_CSPushSnapshot__Descriptor = Descriptor.MessageTypes[61];
        internal__static_D3_GameMessage_CSPushSnapshot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CSPushSnapshot, global::D3.GameMessage.CSPushSnapshot.Builder>(internal__static_D3_GameMessage_CSPushSnapshot__Descriptor,
                new string[] { "Data", });
        internal__static_D3_GameMessage_CSWriteSnapshot__Descriptor = Descriptor.MessageTypes[62];
        internal__static_D3_GameMessage_CSWriteSnapshot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CSWriteSnapshot, global::D3.GameMessage.CSWriteSnapshot.Builder>(internal__static_D3_GameMessage_CSWriteSnapshot__Descriptor,
                new string[] { });
        internal__static_D3_GameMessage_CSGiveCarePackage__Descriptor = Descriptor.MessageTypes[63];
        internal__static_D3_GameMessage_CSGiveCarePackage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CSGiveCarePackage, global::D3.GameMessage.CSGiveCarePackage.Builder>(internal__static_D3_GameMessage_CSGiveCarePackage__Descriptor,
                new string[] { "AccountId", "CareId", "Locale", });
        internal__static_D3_GameMessage_CSForceColdStorage__Descriptor = Descriptor.MessageTypes[64];
        internal__static_D3_GameMessage_CSForceColdStorage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CSForceColdStorage, global::D3.GameMessage.CSForceColdStorage.Builder>(internal__static_D3_GameMessage_CSForceColdStorage__Descriptor,
                new string[] { "AccountId", });
        internal__static_D3_GameMessage_TransferAccountCheck__Descriptor = Descriptor.MessageTypes[65];
        internal__static_D3_GameMessage_TransferAccountCheck__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TransferAccountCheck, global::D3.GameMessage.TransferAccountCheck.Builder>(internal__static_D3_GameMessage_TransferAccountCheck__Descriptor,
                new string[] { "LocalAccountId", });
        internal__static_D3_GameMessage_TransferAccountCheckResponse__Descriptor = Descriptor.MessageTypes[66];
        internal__static_D3_GameMessage_TransferAccountCheckResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TransferAccountCheckResponse, global::D3.GameMessage.TransferAccountCheckResponse.Builder>(internal__static_D3_GameMessage_TransferAccountCheckResponse__Descriptor,
                new string[] { "Status", "AvailableTime", });
        internal__static_D3_GameMessage_TransferAccountBegin__Descriptor = Descriptor.MessageTypes[67];
        internal__static_D3_GameMessage_TransferAccountBegin__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TransferAccountBegin, global::D3.GameMessage.TransferAccountBegin.Builder>(internal__static_D3_GameMessage_TransferAccountBegin__Descriptor,
                new string[] { "LocalAccountId", "SourceAccountId", "Region", "Force", });
        internal__static_D3_GameMessage_TransferAccountGetStatus__Descriptor = Descriptor.MessageTypes[68];
        internal__static_D3_GameMessage_TransferAccountGetStatus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TransferAccountGetStatus, global::D3.GameMessage.TransferAccountGetStatus.Builder>(internal__static_D3_GameMessage_TransferAccountGetStatus__Descriptor,
                new string[] { "LocalAccountId", "Token", });
        internal__static_D3_GameMessage_TransferAccountResponse__Descriptor = Descriptor.MessageTypes[69];
        internal__static_D3_GameMessage_TransferAccountResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TransferAccountResponse, global::D3.GameMessage.TransferAccountResponse.Builder>(internal__static_D3_GameMessage_TransferAccountResponse__Descriptor,
                new string[] { "LocalAccountId", "Token", "Status", });
        internal__static_D3_GameMessage_BannerSaveConfirm__Descriptor = Descriptor.MessageTypes[70];
        internal__static_D3_GameMessage_BannerSaveConfirm__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.BannerSaveConfirm, global::D3.GameMessage.BannerSaveConfirm.Builder>(internal__static_D3_GameMessage_BannerSaveConfirm__Descriptor,
                new string[] { "AccountId", "Banner", "DbErrCode", });
        internal__static_D3_GameMessage_ClientAccountTransferRequest__Descriptor = Descriptor.MessageTypes[71];
        internal__static_D3_GameMessage_ClientAccountTransferRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ClientAccountTransferRequest, global::D3.GameMessage.ClientAccountTransferRequest.Builder>(internal__static_D3_GameMessage_ClientAccountTransferRequest__Descriptor,
                new string[] { "Region", "GameAccountId", });
        internal__static_D3_GameMessage_NumPlayersRequest__Descriptor = Descriptor.MessageTypes[72];
        internal__static_D3_GameMessage_NumPlayersRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.NumPlayersRequest, global::D3.GameMessage.NumPlayersRequest.Builder>(internal__static_D3_GameMessage_NumPlayersRequest__Descriptor,
                new string[] { });
        internal__static_D3_GameMessage_NumPlayersResponse__Descriptor = Descriptor.MessageTypes[73];
        internal__static_D3_GameMessage_NumPlayersResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.NumPlayersResponse, global::D3.GameMessage.NumPlayersResponse.Builder>(internal__static_D3_GameMessage_NumPlayersResponse__Descriptor,
                new string[] { "Result", });
        internal__static_D3_GameMessage_GetHeroAttributesRequest__Descriptor = Descriptor.MessageTypes[74];
        internal__static_D3_GameMessage_GetHeroAttributesRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetHeroAttributesRequest, global::D3.GameMessage.GetHeroAttributesRequest.Builder>(internal__static_D3_GameMessage_GetHeroAttributesRequest__Descriptor,
                new string[] { "HeroId", });
        internal__static_D3_GameMessage_MailContents__Descriptor = Descriptor.MessageTypes[75];
        internal__static_D3_GameMessage_MailContents__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.MailContents, global::D3.GameMessage.MailContents.Builder>(internal__static_D3_GameMessage_MailContents__Descriptor,
                new string[] { "AppendMessages", "Mails", });
        internal__static_D3_GameMessage_MailOperation__Descriptor = Descriptor.MessageTypes[76];
        internal__static_D3_GameMessage_MailOperation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.MailOperation, global::D3.GameMessage.MailOperation.Builder>(internal__static_D3_GameMessage_MailOperation__Descriptor,
                new string[] { "MailOperation_", "MailIds", });
        internal__static_D3_GameMessage_MailOperationResponseResult__Descriptor = Descriptor.MessageTypes[77];
        internal__static_D3_GameMessage_MailOperationResponseResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.MailOperationResponseResult, global::D3.GameMessage.MailOperationResponseResult.Builder>(internal__static_D3_GameMessage_MailOperationResponseResult__Descriptor,
                new string[] { "MailId", "MailError", });
        internal__static_D3_GameMessage_MailOperationResponse__Descriptor = Descriptor.MessageTypes[78];
        internal__static_D3_GameMessage_MailOperationResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.MailOperationResponse, global::D3.GameMessage.MailOperationResponse.Builder>(internal__static_D3_GameMessage_MailOperationResponse__Descriptor,
                new string[] { "MailOperation", "MailOperationResults", });
        internal__static_D3_GameMessage_TutorialFlags__Descriptor = Descriptor.MessageTypes[79];
        internal__static_D3_GameMessage_TutorialFlags__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TutorialFlags, global::D3.GameMessage.TutorialFlags.Builder>(internal__static_D3_GameMessage_TutorialFlags__Descriptor,
                new string[] { "SeenTutorials", });
        internal__static_D3_GameMessage_ResetHeroStoryProgress__Descriptor = Descriptor.MessageTypes[80];
        internal__static_D3_GameMessage_ResetHeroStoryProgress__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ResetHeroStoryProgress, global::D3.GameMessage.ResetHeroStoryProgress.Builder>(internal__static_D3_GameMessage_ResetHeroStoryProgress__Descriptor,
                new string[] { "HeroId", });
        internal__static_D3_GameMessage_ForceAccountMigration__Descriptor = Descriptor.MessageTypes[81];
        internal__static_D3_GameMessage_ForceAccountMigration__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ForceAccountMigration, global::D3.GameMessage.ForceAccountMigration.Builder>(internal__static_D3_GameMessage_ForceAccountMigration__Descriptor,
                new string[] { });
        internal__static_D3_GameMessage_EquipCosmeticItem__Descriptor = Descriptor.MessageTypes[82];
        internal__static_D3_GameMessage_EquipCosmeticItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.EquipCosmeticItem, global::D3.GameMessage.EquipCosmeticItem.Builder>(internal__static_D3_GameMessage_EquipCosmeticItem__Descriptor,
                new string[] { "HeroId", "CosmeticItemType", "Gbid", });
        internal__static_D3_GameMessage_GuildId__Descriptor = Descriptor.MessageTypes[83];
        internal__static_D3_GameMessage_GuildId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildId, global::D3.GameMessage.GuildId.Builder>(internal__static_D3_GameMessage_GuildId__Descriptor,
                new string[] { "GuildId_", });
        internal__static_D3_GameMessage_GuildIds__Descriptor = Descriptor.MessageTypes[84];
        internal__static_D3_GameMessage_GuildIds__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildIds, global::D3.GameMessage.GuildIds.Builder>(internal__static_D3_GameMessage_GuildIds__Descriptor,
                new string[] { "GuildIds_", });
        internal__static_D3_GameMessage_GuildCreate__Descriptor = Descriptor.MessageTypes[85];
        internal__static_D3_GameMessage_GuildCreate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildCreate, global::D3.GameMessage.GuildCreate.Builder>(internal__static_D3_GameMessage_GuildCreate__Descriptor,
                new string[] { "Name", "Tag", "Language", "LookingForMembers", });
        internal__static_D3_GameMessage_GroupCreate__Descriptor = Descriptor.MessageTypes[86];
        internal__static_D3_GameMessage_GroupCreate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GroupCreate, global::D3.GameMessage.GroupCreate.Builder>(internal__static_D3_GameMessage_GroupCreate__Descriptor,
                new string[] { "Name", "SearchCategory", "Language", "PrivacyLevel", });
        internal__static_D3_GameMessage_GuildInvite__Descriptor = Descriptor.MessageTypes[87];
        internal__static_D3_GameMessage_GuildInvite__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildInvite, global::D3.GameMessage.GuildInvite.Builder>(internal__static_D3_GameMessage_GuildInvite__Descriptor,
                new string[] { "GuildId", "InviteeId", "BattleTagOrEmail", });
        internal__static_D3_GameMessage_GuildInviteResponse__Descriptor = Descriptor.MessageTypes[88];
        internal__static_D3_GameMessage_GuildInviteResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildInviteResponse, global::D3.GameMessage.GuildInviteResponse.Builder>(internal__static_D3_GameMessage_GuildInviteResponse__Descriptor,
                new string[] { "GuildId", "Result", "ApplyCooldown", });
        internal__static_D3_GameMessage_GuildFetchPlayerNote__Descriptor = Descriptor.MessageTypes[89];
        internal__static_D3_GameMessage_GuildFetchPlayerNote__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildFetchPlayerNote, global::D3.GameMessage.GuildFetchPlayerNote.Builder>(internal__static_D3_GameMessage_GuildFetchPlayerNote__Descriptor,
                new string[] { "GuildId", "MemberId", });
        internal__static_D3_GameMessage_GuildSetMotd__Descriptor = Descriptor.MessageTypes[90];
        internal__static_D3_GameMessage_GuildSetMotd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSetMotd, global::D3.GameMessage.GuildSetMotd.Builder>(internal__static_D3_GameMessage_GuildSetMotd__Descriptor,
                new string[] { "GuildId", "Motd", });
        internal__static_D3_GameMessage_GuildSetDescription__Descriptor = Descriptor.MessageTypes[91];
        internal__static_D3_GameMessage_GuildSetDescription__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSetDescription, global::D3.GameMessage.GuildSetDescription.Builder>(internal__static_D3_GameMessage_GuildSetDescription__Descriptor,
                new string[] { "GuildId", "Description", });
        internal__static_D3_GameMessage_GuildSetNews__Descriptor = Descriptor.MessageTypes[92];
        internal__static_D3_GameMessage_GuildSetNews__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSetNews, global::D3.GameMessage.GuildSetNews.Builder>(internal__static_D3_GameMessage_GuildSetNews__Descriptor,
                new string[] { "GuildId", "AccountId", "NewsType", "NewsData", "NewsFlags", });
        internal__static_D3_GameMessage_GuildEditNews__Descriptor = Descriptor.MessageTypes[93];
        internal__static_D3_GameMessage_GuildEditNews__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildEditNews, global::D3.GameMessage.GuildEditNews.Builder>(internal__static_D3_GameMessage_GuildEditNews__Descriptor,
                new string[] { "GuildId", "NewsId", "NewsData", "NewsFlags", });
        internal__static_D3_GameMessage_GuildDeleteNews__Descriptor = Descriptor.MessageTypes[94];
        internal__static_D3_GameMessage_GuildDeleteNews__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildDeleteNews, global::D3.GameMessage.GuildDeleteNews.Builder>(internal__static_D3_GameMessage_GuildDeleteNews__Descriptor,
                new string[] { "GuildId", "NewsId", });
        internal__static_D3_GameMessage_GuildDeleteAccountNews__Descriptor = Descriptor.MessageTypes[95];
        internal__static_D3_GameMessage_GuildDeleteAccountNews__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildDeleteAccountNews, global::D3.GameMessage.GuildDeleteAccountNews.Builder>(internal__static_D3_GameMessage_GuildDeleteAccountNews__Descriptor,
                new string[] { "AccountId", "GuildId", "NewsId", });
        internal__static_D3_GameMessage_GuildCreateRank__Descriptor = Descriptor.MessageTypes[96];
        internal__static_D3_GameMessage_GuildCreateRank__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildCreateRank, global::D3.GameMessage.GuildCreateRank.Builder>(internal__static_D3_GameMessage_GuildCreateRank__Descriptor,
                new string[] { "GuildId", "Name", });
        internal__static_D3_GameMessage_GuildDeleteRank__Descriptor = Descriptor.MessageTypes[97];
        internal__static_D3_GameMessage_GuildDeleteRank__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildDeleteRank, global::D3.GameMessage.GuildDeleteRank.Builder>(internal__static_D3_GameMessage_GuildDeleteRank__Descriptor,
                new string[] { "GuildId", "RankId", });
        internal__static_D3_GameMessage_GuildModifyRank__Descriptor = Descriptor.MessageTypes[98];
        internal__static_D3_GameMessage_GuildModifyRank__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildModifyRank, global::D3.GameMessage.GuildModifyRank.Builder>(internal__static_D3_GameMessage_GuildModifyRank__Descriptor,
                new string[] { "GuildId", "RankId", "Name", "Permission", });
        internal__static_D3_GameMessage_GuildPromoteMember__Descriptor = Descriptor.MessageTypes[99];
        internal__static_D3_GameMessage_GuildPromoteMember__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildPromoteMember, global::D3.GameMessage.GuildPromoteMember.Builder>(internal__static_D3_GameMessage_GuildPromoteMember__Descriptor,
                new string[] { "GuildId", "MemberId", });
        internal__static_D3_GameMessage_GuildDemoteMember__Descriptor = Descriptor.MessageTypes[100];
        internal__static_D3_GameMessage_GuildDemoteMember__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildDemoteMember, global::D3.GameMessage.GuildDemoteMember.Builder>(internal__static_D3_GameMessage_GuildDemoteMember__Descriptor,
                new string[] { "GuildId", "MemberId", });
        internal__static_D3_GameMessage_GuildSetPlayerNote__Descriptor = Descriptor.MessageTypes[101];
        internal__static_D3_GameMessage_GuildSetPlayerNote__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSetPlayerNote, global::D3.GameMessage.GuildSetPlayerNote.Builder>(internal__static_D3_GameMessage_GuildSetPlayerNote__Descriptor,
                new string[] { "GuildId", "MemberId", "Note", });
        internal__static_D3_GameMessage_GuildSetBanner__Descriptor = Descriptor.MessageTypes[102];
        internal__static_D3_GameMessage_GuildSetBanner__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSetBanner, global::D3.GameMessage.GuildSetBanner.Builder>(internal__static_D3_GameMessage_GuildSetBanner__Descriptor,
                new string[] { "GuildId", "Banner", });
        internal__static_D3_GameMessage_GuildKickMember__Descriptor = Descriptor.MessageTypes[103];
        internal__static_D3_GameMessage_GuildKickMember__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildKickMember, global::D3.GameMessage.GuildKickMember.Builder>(internal__static_D3_GameMessage_GuildKickMember__Descriptor,
                new string[] { "GuildId", "MemberId", });
        internal__static_D3_GameMessage_GuildFetchRoster__Descriptor = Descriptor.MessageTypes[104];
        internal__static_D3_GameMessage_GuildFetchRoster__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildFetchRoster, global::D3.GameMessage.GuildFetchRoster.Builder>(internal__static_D3_GameMessage_GuildFetchRoster__Descriptor,
                new string[] { "GuildId", "StartPosition", "NumMembers", });
        internal__static_D3_GameMessage_GuildMoveRank__Descriptor = Descriptor.MessageTypes[105];
        internal__static_D3_GameMessage_GuildMoveRank__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildMoveRank, global::D3.GameMessage.GuildMoveRank.Builder>(internal__static_D3_GameMessage_GuildMoveRank__Descriptor,
                new string[] { "GuildId", "RankId", "MoveUp", });
        internal__static_D3_GameMessage_GuildSearch__Descriptor = Descriptor.MessageTypes[106];
        internal__static_D3_GameMessage_GuildSearch__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSearch, global::D3.GameMessage.GuildSearch.Builder>(internal__static_D3_GameMessage_GuildSearch__Descriptor,
                new string[] { "Locale", "SearchCategory", "Name", "ClanOrGroup", });
        internal__static_D3_GameMessage_GuildInviteGroupChat__Descriptor = Descriptor.MessageTypes[107];
        internal__static_D3_GameMessage_GuildInviteGroupChat__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildInviteGroupChat, global::D3.GameMessage.GuildInviteGroupChat.Builder>(internal__static_D3_GameMessage_GuildInviteGroupChat__Descriptor,
                new string[] { "GuildId", "InviteeId", });
        internal__static_D3_GameMessage_GuildAcceptGroupChat__Descriptor = Descriptor.MessageTypes[108];
        internal__static_D3_GameMessage_GuildAcceptGroupChat__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildAcceptGroupChat, global::D3.GameMessage.GuildAcceptGroupChat.Builder>(internal__static_D3_GameMessage_GuildAcceptGroupChat__Descriptor,
                new string[] { "GuildId", "Result", "PartyId", });
        internal__static_D3_GameMessage_GuildSetLeader__Descriptor = Descriptor.MessageTypes[109];
        internal__static_D3_GameMessage_GuildSetLeader__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSetLeader, global::D3.GameMessage.GuildSetLeader.Builder>(internal__static_D3_GameMessage_GuildSetLeader__Descriptor,
                new string[] { "GuildId", "MemberId", });
        internal__static_D3_GameMessage_GuildCancelInvite__Descriptor = Descriptor.MessageTypes[110];
        internal__static_D3_GameMessage_GuildCancelInvite__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildCancelInvite, global::D3.GameMessage.GuildCancelInvite.Builder>(internal__static_D3_GameMessage_GuildCancelInvite__Descriptor,
                new string[] { "GuildId", "AccountId", });
        internal__static_D3_GameMessage_GuildSuggest__Descriptor = Descriptor.MessageTypes[111];
        internal__static_D3_GameMessage_GuildSuggest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSuggest, global::D3.GameMessage.GuildSuggest.Builder>(internal__static_D3_GameMessage_GuildSuggest__Descriptor,
                new string[] { "GuildId", "OtherAccountId", });
        internal__static_D3_GameMessage_GuildSuggestionResponse__Descriptor = Descriptor.MessageTypes[112];
        internal__static_D3_GameMessage_GuildSuggestionResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSuggestionResponse, global::D3.GameMessage.GuildSuggestionResponse.Builder>(internal__static_D3_GameMessage_GuildSuggestionResponse__Descriptor,
                new string[] { "GuildId", "InviteeId", "Result", });
        internal__static_D3_GameMessage_GuildFetchNews__Descriptor = Descriptor.MessageTypes[113];
        internal__static_D3_GameMessage_GuildFetchNews__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildFetchNews, global::D3.GameMessage.GuildFetchNews.Builder>(internal__static_D3_GameMessage_GuildFetchNews__Descriptor,
                new string[] { "GuildId", "NewsTime", });
        internal__static_D3_GameMessage_GuildSetSearchSettings__Descriptor = Descriptor.MessageTypes[114];
        internal__static_D3_GameMessage_GuildSetSearchSettings__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSetSearchSettings, global::D3.GameMessage.GuildSetSearchSettings.Builder>(internal__static_D3_GameMessage_GuildSetSearchSettings__Descriptor,
                new string[] { "GuildId", "SearchCategory", "Language", });
        internal__static_D3_GameMessage_GuildSetLFM__Descriptor = Descriptor.MessageTypes[115];
        internal__static_D3_GameMessage_GuildSetLFM__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSetLFM, global::D3.GameMessage.GuildSetLFM.Builder>(internal__static_D3_GameMessage_GuildSetLFM__Descriptor,
                new string[] { "GuildId", "Lfm", });
        internal__static_D3_GameMessage_GroupSetPrivacyLevel__Descriptor = Descriptor.MessageTypes[116];
        internal__static_D3_GameMessage_GroupSetPrivacyLevel__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GroupSetPrivacyLevel, global::D3.GameMessage.GroupSetPrivacyLevel.Builder>(internal__static_D3_GameMessage_GroupSetPrivacyLevel__Descriptor,
                new string[] { "GroupId", "PrivacyLevel", });
        internal__static_D3_GameMessage_GetPlayerGuilds__Descriptor = Descriptor.MessageTypes[117];
        internal__static_D3_GameMessage_GetPlayerGuilds__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GetPlayerGuilds, global::D3.GameMessage.GetPlayerGuilds.Builder>(internal__static_D3_GameMessage_GetPlayerGuilds__Descriptor,
                new string[] { "GuildCategory", "TargetId", });
        internal__static_D3_GameMessage_GuildResponseId__Descriptor = Descriptor.MessageTypes[118];
        internal__static_D3_GameMessage_GuildResponseId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildResponseId, global::D3.GameMessage.GuildResponseId.Builder>(internal__static_D3_GameMessage_GuildResponseId__Descriptor,
                new string[] { "GuildId", });
        internal__static_D3_GameMessage_GuildResponseString__Descriptor = Descriptor.MessageTypes[119];
        internal__static_D3_GameMessage_GuildResponseString__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildResponseString, global::D3.GameMessage.GuildResponseString.Builder>(internal__static_D3_GameMessage_GuildResponseString__Descriptor,
                new string[] { "Response", });
        internal__static_D3_GameMessage_GuildResponseGuilds__Descriptor = Descriptor.MessageTypes[120];
        internal__static_D3_GameMessage_GuildResponseGuilds__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildResponseGuilds, global::D3.GameMessage.GuildResponseGuilds.Builder>(internal__static_D3_GameMessage_GuildResponseGuilds__Descriptor,
                new string[] { "GuildIds", });
        internal__static_D3_GameMessage_GuildSummaryResolution__Descriptor = Descriptor.MessageTypes[121];
        internal__static_D3_GameMessage_GuildSummaryResolution__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSummaryResolution, global::D3.GameMessage.GuildSummaryResolution.Builder>(internal__static_D3_GameMessage_GuildSummaryResolution__Descriptor,
                new string[] { "GuildId", "ErrorCode", "Summary", });
        internal__static_D3_GameMessage_GuildSummariesResponse__Descriptor = Descriptor.MessageTypes[122];
        internal__static_D3_GameMessage_GuildSummariesResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.GuildSummariesResponse, global::D3.GameMessage.GuildSummariesResponse.Builder>(internal__static_D3_GameMessage_GuildSummariesResponse__Descriptor,
                new string[] { "GuildSummaries", });
        internal__static_D3_GameMessage_LeaderboardList__Descriptor = Descriptor.MessageTypes[123];
        internal__static_D3_GameMessage_LeaderboardList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.LeaderboardList, global::D3.GameMessage.LeaderboardList.Builder>(internal__static_D3_GameMessage_LeaderboardList__Descriptor,
                new string[] { "LeaderboardId", "ScopeId", "Offset", "Limit", "Version", "PartitionId", });
        internal__static_D3_GameMessage_LeaderboardListResponse__Descriptor = Descriptor.MessageTypes[124];
        internal__static_D3_GameMessage_LeaderboardListResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.LeaderboardListResponse, global::D3.GameMessage.LeaderboardListResponse.Builder>(internal__static_D3_GameMessage_LeaderboardListResponse__Descriptor,
                new string[] { "Offset", "Limit", "Entry", "TotalLeaderboardEntries", "OwnRank", "Version", });
        internal__static_D3_GameMessage_LeaderboardFetchScores__Descriptor = Descriptor.MessageTypes[125];
        internal__static_D3_GameMessage_LeaderboardFetchScores__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.LeaderboardFetchScores, global::D3.GameMessage.LeaderboardFetchScores.Builder>(internal__static_D3_GameMessage_LeaderboardFetchScores__Descriptor,
                new string[] { "PartitionId", "GameAccountIds", "LeaderboardId", "ScopeId", "PartitionType", });
        internal__static_D3_GameMessage_LeaderboardFetchScoresResponse__Descriptor = Descriptor.MessageTypes[126];
        internal__static_D3_GameMessage_LeaderboardFetchScoresResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.LeaderboardFetchScoresResponse, global::D3.GameMessage.LeaderboardFetchScoresResponse.Builder>(internal__static_D3_GameMessage_LeaderboardFetchScoresResponse__Descriptor,
                new string[] { "Entry", });
        internal__static_D3_GameMessage_LeaderboardGetHeroSnapshot__Descriptor = Descriptor.MessageTypes[127];
        internal__static_D3_GameMessage_LeaderboardGetHeroSnapshot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.LeaderboardGetHeroSnapshot, global::D3.GameMessage.LeaderboardGetHeroSnapshot.Builder>(internal__static_D3_GameMessage_LeaderboardGetHeroSnapshot__Descriptor,
                new string[] { "GameAccountId", "PartitionId", "ScopeId", "LeaderboardId", });
        internal__static_D3_GameMessage_LeaderboardGetHeroSnapshotResponse__Descriptor = Descriptor.MessageTypes[128];
        internal__static_D3_GameMessage_LeaderboardGetHeroSnapshotResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.LeaderboardGetHeroSnapshotResponse, global::D3.GameMessage.LeaderboardGetHeroSnapshotResponse.Builder>(internal__static_D3_GameMessage_LeaderboardGetHeroSnapshotResponse__Descriptor,
                new string[] { "Snapshot", });
        internal__static_D3_GameMessage_CheatRefetchProductCatalog__Descriptor = Descriptor.MessageTypes[129];
        internal__static_D3_GameMessage_CheatRefetchProductCatalog__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CheatRefetchProductCatalog, global::D3.GameMessage.CheatRefetchProductCatalog.Builder>(internal__static_D3_GameMessage_CheatRefetchProductCatalog__Descriptor,
                new string[] { });
        internal__static_D3_GameMessage_CheatModifyStoreState__Descriptor = Descriptor.MessageTypes[130];
        internal__static_D3_GameMessage_CheatModifyStoreState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.CheatModifyStoreState, global::D3.GameMessage.CheatModifyStoreState.Builder>(internal__static_D3_GameMessage_CheatModifyStoreState__Descriptor,
                new string[] { "Enable", });
        internal__static_D3_GameMessage_RiftEndScreenAddParticipants__Descriptor = Descriptor.MessageTypes[131];
        internal__static_D3_GameMessage_RiftEndScreenAddParticipants__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.RiftEndScreenAddParticipants, global::D3.GameMessage.RiftEndScreenAddParticipants.Builder>(internal__static_D3_GameMessage_RiftEndScreenAddParticipants__Descriptor,
                new string[] { "ParticipantGameAccounts", });
        internal__static_D3_GameMessage_RiftEndScreenConsolePlayerInfo__Descriptor = Descriptor.MessageTypes[132];
        internal__static_D3_GameMessage_RiftEndScreenConsolePlayerInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.RiftEndScreenConsolePlayerInfo, global::D3.GameMessage.RiftEndScreenConsolePlayerInfo.Builder>(internal__static_D3_GameMessage_RiftEndScreenConsolePlayerInfo__Descriptor,
                new string[] { "PlayerName", "HeroGbidClass", "HeroFlags", "HeroLevel", "AltLevel", "HeroVisualEquipment", });
        internal__static_D3_GameMessage_RiftEndScreenInfo__Descriptor = Descriptor.MessageTypes[133];
        internal__static_D3_GameMessage_RiftEndScreenInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.RiftEndScreenInfo, global::D3.GameMessage.RiftEndScreenInfo.Builder>(internal__static_D3_GameMessage_RiftEndScreenInfo__Descriptor,
                new string[] { "RiftTier", "Success", "CompletionTimeMs", "XpReward", "GoldReward", "ParticipantGameAccounts", "IsFromCheat", "NewPersonalBest", "BannerConfiguration", "ConsolePlayerInfo", "ConsoleNumParticipants", "ChallengeRiftRewardGbid", "ChallengeRiftTimeToBeatMs", "ChallengeRiftRewardState", "ChallengeRiftNumber", });
        internal__static_D3_GameMessage_RiftStartPreloadingLeaderBoardData__Descriptor = Descriptor.MessageTypes[134];
        internal__static_D3_GameMessage_RiftStartPreloadingLeaderBoardData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.RiftStartPreloadingLeaderBoardData, global::D3.GameMessage.RiftStartPreloadingLeaderBoardData.Builder>(internal__static_D3_GameMessage_RiftStartPreloadingLeaderBoardData__Descriptor,
                new string[] { "RiftTier", "NumParticipants", "CompletionTimeMs", });
        internal__static_D3_GameMessage_AchievementsGetSnapshot__Descriptor = Descriptor.MessageTypes[135];
        internal__static_D3_GameMessage_AchievementsGetSnapshot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.AchievementsGetSnapshot, global::D3.GameMessage.AchievementsGetSnapshot.Builder>(internal__static_D3_GameMessage_AchievementsGetSnapshot__Descriptor,
                new string[] { "GameAccountId", });
        internal__static_D3_GameMessage_AchievementsResetAchievements__Descriptor = Descriptor.MessageTypes[136];
        internal__static_D3_GameMessage_AchievementsResetAchievements__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.AchievementsResetAchievements, global::D3.GameMessage.AchievementsResetAchievements.Builder>(internal__static_D3_GameMessage_AchievementsResetAchievements__Descriptor,
                new string[] { "GameAccountId", });
        internal__static_D3_GameMessage_AchievementsCriteriaUpdateConsole__Descriptor = Descriptor.MessageTypes[137];
        internal__static_D3_GameMessage_AchievementsCriteriaUpdateConsole__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.AchievementsCriteriaUpdateConsole, global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Builder>(internal__static_D3_GameMessage_AchievementsCriteriaUpdateConsole__Descriptor,
                new string[] { "Criteria", });
        internal__static_D3_GameMessage_AchievementsCriteriaUpdateConsole_Criteria__Descriptor = internal__static_D3_GameMessage_AchievementsCriteriaUpdateConsole__Descriptor.NestedTypes[0];
        internal__static_D3_GameMessage_AchievementsCriteriaUpdateConsole_Criteria__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria, global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria.Builder>(internal__static_D3_GameMessage_AchievementsCriteriaUpdateConsole_Criteria__Descriptor,
                new string[] { "Id", "Deleted", "Quantity", });
        internal__static_D3_GameMessage_AchievementsAwardedConsole__Descriptor = Descriptor.MessageTypes[138];
        internal__static_D3_GameMessage_AchievementsAwardedConsole__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.AchievementsAwardedConsole, global::D3.GameMessage.AchievementsAwardedConsole.Builder>(internal__static_D3_GameMessage_AchievementsAwardedConsole__Descriptor,
                new string[] { "PlayerIndex", "Achievements", });
        internal__static_D3_GameMessage_AchievementsSnapshot__Descriptor = Descriptor.MessageTypes[139];
        internal__static_D3_GameMessage_AchievementsSnapshot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.AchievementsSnapshot, global::D3.GameMessage.AchievementsSnapshot.Builder>(internal__static_D3_GameMessage_AchievementsSnapshot__Descriptor,
                new string[] { "GameAccountId", "Snapshot", "ErrorCode", });
        internal__static_D3_GameMessage_MatchmakingGetStats__Descriptor = Descriptor.MessageTypes[140];
        internal__static_D3_GameMessage_MatchmakingGetStats__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.MatchmakingGetStats, global::D3.GameMessage.MatchmakingGetStats.Builder>(internal__static_D3_GameMessage_MatchmakingGetStats__Descriptor,
                new string[] { "Version", "Partition", "ServerPool", "GameAct", "GameQuest", "HandicapLevel", "GameTag", "MonsterLevel", "GameContentActLicense", });
        internal__static_D3_GameMessage_MatchmakingStatsBucket__Descriptor = Descriptor.MessageTypes[141];
        internal__static_D3_GameMessage_MatchmakingStatsBucket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.MatchmakingStatsBucket, global::D3.GameMessage.MatchmakingStatsBucket.Builder>(internal__static_D3_GameMessage_MatchmakingStatsBucket__Descriptor,
                new string[] { "FormingGames", "WaitingPlayers", "OpenGamesTotal", "PlayersInOpenGamesTotal", });
        internal__static_D3_GameMessage_MatchmakingGetStatsResponse__Descriptor = Descriptor.MessageTypes[142];
        internal__static_D3_GameMessage_MatchmakingGetStatsResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.MatchmakingGetStatsResponse, global::D3.GameMessage.MatchmakingGetStatsResponse.Builder>(internal__static_D3_GameMessage_MatchmakingGetStatsResponse__Descriptor,
                new string[] { "StatsBucket", });
        internal__static_D3_GameMessage_TriggerNewClientAvailable__Descriptor = Descriptor.MessageTypes[143];
        internal__static_D3_GameMessage_TriggerNewClientAvailable__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.TriggerNewClientAvailable, global::D3.GameMessage.TriggerNewClientAvailable.Builder>(internal__static_D3_GameMessage_TriggerNewClientAvailable__Descriptor,
                new string[] { "ClientBuildNumber", });
        internal__static_D3_GameMessage_UnlockedDyesRequest__Descriptor = Descriptor.MessageTypes[144];
        internal__static_D3_GameMessage_UnlockedDyesRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.UnlockedDyesRequest, global::D3.GameMessage.UnlockedDyesRequest.Builder>(internal__static_D3_GameMessage_UnlockedDyesRequest__Descriptor,
                new string[] { });
        internal__static_D3_GameMessage_UnlockedDyesData__Descriptor = Descriptor.MessageTypes[145];
        internal__static_D3_GameMessage_UnlockedDyesData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.UnlockedDyesData, global::D3.GameMessage.UnlockedDyesData.Builder>(internal__static_D3_GameMessage_UnlockedDyesData__Descriptor,
                new string[] { "DyeGbids", });
        internal__static_D3_GameMessage_ChallengeRiftFetchHeroData__Descriptor = Descriptor.MessageTypes[146];
        internal__static_D3_GameMessage_ChallengeRiftFetchHeroData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ChallengeRiftFetchHeroData, global::D3.GameMessage.ChallengeRiftFetchHeroData.Builder>(internal__static_D3_GameMessage_ChallengeRiftFetchHeroData__Descriptor,
                new string[] { "ChallengeNumber", });
        internal__static_D3_GameMessage_ChallengeRiftFetchHeroDataResponse__Descriptor = Descriptor.MessageTypes[147];
        internal__static_D3_GameMessage_ChallengeRiftFetchHeroDataResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ChallengeRiftFetchHeroDataResponse, global::D3.GameMessage.ChallengeRiftFetchHeroDataResponse.Builder>(internal__static_D3_GameMessage_ChallengeRiftFetchHeroDataResponse__Descriptor,
                new string[] { "AltLevel", "HeroDigest", "HeroProfile", "RewardGbid", "TargetMillisecond", "BattleTag", "ChallengeEndTimeUnixSeconds", });
        internal__static_D3_GameMessage_ChallengeRiftClearRewardRecord__Descriptor = Descriptor.MessageTypes[148];
        internal__static_D3_GameMessage_ChallengeRiftClearRewardRecord__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ChallengeRiftClearRewardRecord, global::D3.GameMessage.ChallengeRiftClearRewardRecord.Builder>(internal__static_D3_GameMessage_ChallengeRiftClearRewardRecord__Descriptor,
                new string[] { "LastChallengeRewardEarned", });
        internal__static_D3_GameMessage_ServiceInitRequest__Descriptor = Descriptor.MessageTypes[149];
        internal__static_D3_GameMessage_ServiceInitRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServiceInitRequest, global::D3.GameMessage.ServiceInitRequest.Builder>(internal__static_D3_GameMessage_ServiceInitRequest__Descriptor,
                new string[] { "Platform", });
        internal__static_D3_GameMessage_ServiceInitResponse__Descriptor = Descriptor.MessageTypes[150];
        internal__static_D3_GameMessage_ServiceInitResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServiceInitResponse, global::D3.GameMessage.ServiceInitResponse.Builder>(internal__static_D3_GameMessage_ServiceInitResponse__Descriptor,
                new string[] { "ServiceId", });
        internal__static_D3_GameMessage_ServiceSendDataRequest__Descriptor = Descriptor.MessageTypes[151];
        internal__static_D3_GameMessage_ServiceSendDataRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.GameMessage.ServiceSendDataRequest, global::D3.GameMessage.ServiceSendDataRequest.Builder>(internal__static_D3_GameMessage_ServiceSendDataRequest__Descriptor,
                new string[] { "Data", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::D3.Hero.Hero.RegisterAllExtensions(registry);
        global::D3.Hero.HeroCommon.RegisterAllExtensions(registry);
        global::D3.OnlineService.OnlineService.RegisterAllExtensions(registry);
        global::D3.Client.Settings.RegisterAllExtensions(registry);
        global::D3.Account.Account.RegisterAllExtensions(registry);
        global::D3.Items.Items.RegisterAllExtensions(registry);
        global::D3.CS.CS.RegisterAllExtensions(registry);
        global::D3.Guild.Proto.Guild.RegisterAllExtensions(registry);
        global::D3.Leaderboard.Leaderboard.RegisterAllExtensions(registry);
        global::D3.Achievements.Achievements.RegisterAllExtensions(registry);
        global::D3.Profile.Profile.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.Hero.Hero.Descriptor, 
          global::D3.Hero.HeroCommon.Descriptor, 
          global::D3.OnlineService.OnlineService.Descriptor, 
          global::D3.Client.Settings.Descriptor, 
          global::D3.Account.Account.Descriptor, 
          global::D3.Items.Items.Descriptor, 
          global::D3.CS.CS.Descriptor, 
          global::D3.Guild.Proto.Guild.Descriptor, 
          global::D3.Leaderboard.Leaderboard.Descriptor, 
          global::D3.Achievements.Achievements.Descriptor, 
          global::D3.Profile.Profile.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeroDigestList : pb::GeneratedMessage<HeroDigestList, HeroDigestList.Builder> {
    private HeroDigestList() { }
    private static readonly HeroDigestList defaultInstance = new HeroDigestList().MakeReadOnly();
    private static readonly string[] _heroDigestListFieldNames = new string[] { "account_id", "digest_list" };
    private static readonly uint[] _heroDigestListFieldTags = new uint[] { 10, 18 };
    public static HeroDigestList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroDigestList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeroDigestList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroDigestList, HeroDigestList.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestList__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.GameAccountHandle accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle AccountId {
      get { return accountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public const int DigestListFieldNumber = 2;
    private pbc::PopsicleList<global::D3.Hero.Digest> digestList_ = new pbc::PopsicleList<global::D3.Hero.Digest>();
    public scg::IList<global::D3.Hero.Digest> DigestListList {
      get { return digestList_; }
    }
    public int DigestListCount {
      get { return digestList_.Count; }
    }
    public global::D3.Hero.Digest GetDigestList(int index) {
      return digestList_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!AccountId.IsInitialized) return false;
        foreach (global::D3.Hero.Digest element in DigestListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _heroDigestListFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (digestList_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], digestList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        foreach (global::D3.Hero.Digest element in DigestListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroDigestList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroDigestList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroDigestList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeroDigestList MakeReadOnly() {
      digestList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroDigestList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HeroDigestList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeroDigestList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeroDigestList result;
      
      private HeroDigestList PrepareBuilder() {
        if (resultIsReadOnly) {
          HeroDigestList original = result;
          result = new HeroDigestList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeroDigestList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.HeroDigestList.Descriptor; }
      }
      
      public override HeroDigestList DefaultInstanceForType {
        get { return global::D3.GameMessage.HeroDigestList.DefaultInstance; }
      }
      
      public override HeroDigestList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroDigestList) {
          return MergeFrom((HeroDigestList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroDigestList other) {
        if (other == global::D3.GameMessage.HeroDigestList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.digestList_.Count != 0) {
          result.digestList_.Add(other.digestList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heroDigestListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heroDigestListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.digestList_, global::D3.Hero.Digest.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Hero.Digest> DigestListList {
        get { return PrepareBuilder().digestList_; }
      }
      public int DigestListCount {
        get { return result.DigestListCount; }
      }
      public global::D3.Hero.Digest GetDigestList(int index) {
        return result.GetDigestList(index);
      }
      public Builder SetDigestList(int index, global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.digestList_[index] = value;
        return this;
      }
      public Builder SetDigestList(int index, global::D3.Hero.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.digestList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDigestList(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.digestList_.Add(value);
        return this;
      }
      public Builder AddDigestList(global::D3.Hero.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.digestList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDigestList(scg::IEnumerable<global::D3.Hero.Digest> values) {
        PrepareBuilder();
        result.digestList_.Add(values);
        return this;
      }
      public Builder ClearDigestList() {
        PrepareBuilder();
        result.digestList_.Clear();
        return this;
      }
    }
    static HeroDigestList() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ClientToonSettings : pb::GeneratedMessage<ClientToonSettings, ClientToonSettings.Builder> {
    private ClientToonSettings() { }
    private static readonly ClientToonSettings defaultInstance = new ClientToonSettings().MakeReadOnly();
    private static readonly string[] _clientToonSettingsFieldNames = new string[] { "client_toon_settings", "toon_id" };
    private static readonly uint[] _clientToonSettingsFieldTags = new uint[] { 18, 8 };
    public static ClientToonSettings DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClientToonSettings DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ClientToonSettings ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ClientToonSettings__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClientToonSettings, ClientToonSettings.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ClientToonSettings__FieldAccessorTable; }
    }
    
    public const int ToonIdFieldNumber = 1;
    private bool hasToonId;
    private ulong toonId_;
    public bool HasToonId {
      get { return hasToonId; }
    }
    public ulong ToonId {
      get { return toonId_; }
    }
    
    public const int ClientToonSettings_FieldNumber = 2;
    private bool hasClientToonSettings_;
    private global::D3.Client.ToonSettings clientToonSettings_;
    public bool HasClientToonSettings_ {
      get { return hasClientToonSettings_; }
    }
    public global::D3.Client.ToonSettings ClientToonSettings_ {
      get { return clientToonSettings_ ?? global::D3.Client.ToonSettings.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasToonId) return false;
        if (!hasClientToonSettings_) return false;
        //if (!ClientToonSettings.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _clientToonSettingsFieldNames;
      if (hasToonId) {
        output.WriteUInt64(1, field_names[1], ToonId);
      }
      if (hasClientToonSettings_) {
        output.WriteMessage(2, field_names[0], ClientToonSettings_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasToonId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, ToonId);
        }
        if (hasClientToonSettings_) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ClientToonSettings_);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClientToonSettings ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientToonSettings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientToonSettings ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientToonSettings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientToonSettings ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientToonSettings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClientToonSettings ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClientToonSettings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClientToonSettings ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientToonSettings ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ClientToonSettings MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClientToonSettings prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ClientToonSettings, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ClientToonSettings cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ClientToonSettings result;
      
      private ClientToonSettings PrepareBuilder() {
        if (resultIsReadOnly) {
          ClientToonSettings original = result;
          result = new ClientToonSettings();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ClientToonSettings MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ClientToonSettings.Descriptor; }
      }
      
      public override ClientToonSettings DefaultInstanceForType {
        get { return global::D3.GameMessage.ClientToonSettings.DefaultInstance; }
      }
      
      public override ClientToonSettings BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClientToonSettings) {
          return MergeFrom((ClientToonSettings) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClientToonSettings other) {
        if (other == global::D3.GameMessage.ClientToonSettings.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasToonId) {
          ToonId = other.ToonId;
        }
        if (other.HasClientToonSettings_) {
          MergeClientToonSettings_(other.ClientToonSettings_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_clientToonSettingsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _clientToonSettingsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasToonId = input.ReadUInt64(ref result.toonId_);
              break;
            }
            case 18: {
              global::D3.Client.ToonSettings.Builder subBuilder = global::D3.Client.ToonSettings.CreateBuilder();
              if (result.hasClientToonSettings_) {
                subBuilder.MergeFrom(ClientToonSettings_);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClientToonSettings_ = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasToonId {
        get { return result.hasToonId; }
      }
      public ulong ToonId {
        get { return result.ToonId; }
        set { SetToonId(value); }
      }
      public Builder SetToonId(ulong value) {
        PrepareBuilder();
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder ClearToonId() {
        PrepareBuilder();
        result.hasToonId = false;
        result.toonId_ = 0UL;
        return this;
      }
      
      public bool HasClientToonSettings_ {
       get { return result.hasClientToonSettings_; }
      }
      public global::D3.Client.ToonSettings ClientToonSettings_ {
        get { return result.ClientToonSettings_; }
        set { SetClientToonSettings_(value); }
      }
      public Builder SetClientToonSettings_(global::D3.Client.ToonSettings value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientToonSettings_ = true;
        result.clientToonSettings_ = value;
        return this;
      }
      public Builder SetClientToonSettings_(global::D3.Client.ToonSettings.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClientToonSettings_ = true;
        result.clientToonSettings_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClientToonSettings_(global::D3.Client.ToonSettings value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClientToonSettings_ &&
            result.clientToonSettings_ != global::D3.Client.ToonSettings.DefaultInstance) {
            result.clientToonSettings_ = global::D3.Client.ToonSettings.CreateBuilder(result.clientToonSettings_).MergeFrom(value).BuildPartial();
        } else {
          result.clientToonSettings_ = value;
        }
        result.hasClientToonSettings_ = true;
        return this;
      }
      public Builder ClearClientToonSettings_() {
        PrepareBuilder();
        result.hasClientToonSettings_ = false;
        result.clientToonSettings_ = null;
        return this;
      }
    }
    static ClientToonSettings() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeroDigestListRequest : pb::GeneratedMessage<HeroDigestListRequest, HeroDigestListRequest.Builder> {
    private HeroDigestListRequest() { }
    private static readonly HeroDigestListRequest defaultInstance = new HeroDigestListRequest().MakeReadOnly();
    private static readonly string[] _heroDigestListRequestFieldNames = new string[] { "account_id", "get_deleted_hero", "toon_id" };
    private static readonly uint[] _heroDigestListRequestFieldTags = new uint[] { 10, 24, 16 };
    public static HeroDigestListRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroDigestListRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeroDigestListRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestListRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroDigestListRequest, HeroDigestListRequest.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestListRequest__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.GameAccountHandle accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle AccountId {
      get { return accountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public const int ToonIdFieldNumber = 2;
    private pbc::PopsicleList<ulong> toonId_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> ToonIdList {
      get { return pbc::Lists.AsReadOnly(toonId_); }
    }
    public int ToonIdCount {
      get { return toonId_.Count; }
    }
    public ulong GetToonId(int index) {
      return toonId_[index];
    }
    
    public const int GetDeletedHeroFieldNumber = 3;
    private bool hasGetDeletedHero;
    private bool getDeletedHero_;
    public bool HasGetDeletedHero {
      get { return hasGetDeletedHero; }
    }
    public bool GetDeletedHero {
      get { return getDeletedHero_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _heroDigestListRequestFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (toonId_.Count > 0) {
        output.WriteUInt64Array(2, field_names[2], toonId_);
      }
      if (hasGetDeletedHero) {
        output.WriteBool(3, field_names[1], GetDeletedHero);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        {
          int dataSize = 0;
          foreach (ulong element in ToonIdList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * toonId_.Count;
        }
        if (hasGetDeletedHero) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, GetDeletedHero);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroDigestListRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestListRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestListRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestListRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestListRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestListRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestListRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroDigestListRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroDigestListRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestListRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeroDigestListRequest MakeReadOnly() {
      toonId_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroDigestListRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HeroDigestListRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeroDigestListRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeroDigestListRequest result;
      
      private HeroDigestListRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          HeroDigestListRequest original = result;
          result = new HeroDigestListRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeroDigestListRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.HeroDigestListRequest.Descriptor; }
      }
      
      public override HeroDigestListRequest DefaultInstanceForType {
        get { return global::D3.GameMessage.HeroDigestListRequest.DefaultInstance; }
      }
      
      public override HeroDigestListRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroDigestListRequest) {
          return MergeFrom((HeroDigestListRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroDigestListRequest other) {
        if (other == global::D3.GameMessage.HeroDigestListRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.toonId_.Count != 0) {
          result.toonId_.Add(other.toonId_);
        }
        if (other.HasGetDeletedHero) {
          GetDeletedHero = other.GetDeletedHero;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heroDigestListRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heroDigestListRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt64Array(tag, field_name, result.toonId_);
              break;
            }
            case 24: {
              result.hasGetDeletedHero = input.ReadBool(ref result.getDeletedHero_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> ToonIdList {
        get { return PrepareBuilder().toonId_; }
      }
      public int ToonIdCount {
        get { return result.ToonIdCount; }
      }
      public ulong GetToonId(int index) {
        return result.GetToonId(index);
      }
      public Builder SetToonId(int index, ulong value) {
        PrepareBuilder();
        result.toonId_[index] = value;
        return this;
      }
      public Builder AddToonId(ulong value) {
        PrepareBuilder();
        result.toonId_.Add(value);
        return this;
      }
      public Builder AddRangeToonId(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.toonId_.Add(values);
        return this;
      }
      public Builder ClearToonId() {
        PrepareBuilder();
        result.toonId_.Clear();
        return this;
      }
      
      public bool HasGetDeletedHero {
        get { return result.hasGetDeletedHero; }
      }
      public bool GetDeletedHero {
        get { return result.GetDeletedHero; }
        set { SetGetDeletedHero(value); }
      }
      public Builder SetGetDeletedHero(bool value) {
        PrepareBuilder();
        result.hasGetDeletedHero = true;
        result.getDeletedHero_ = value;
        return this;
      }
      public Builder ClearGetDeletedHero() {
        PrepareBuilder();
        result.hasGetDeletedHero = false;
        result.getDeletedHero_ = false;
        return this;
      }
    }
    static HeroDigestListRequest() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeroDigestListResponse : pb::GeneratedMessage<HeroDigestListResponse, HeroDigestListResponse.Builder> {
    private HeroDigestListResponse() { }
    private static readonly HeroDigestListResponse defaultInstance = new HeroDigestListResponse().MakeReadOnly();
    private static readonly string[] _heroDigestListResponseFieldNames = new string[] { "digest_list" };
    private static readonly uint[] _heroDigestListResponseFieldTags = new uint[] { 10 };
    public static HeroDigestListResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroDigestListResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeroDigestListResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestListResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroDigestListResponse, HeroDigestListResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestListResponse__FieldAccessorTable; }
    }
    
    public const int DigestListFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Hero.Digest> digestList_ = new pbc::PopsicleList<global::D3.Hero.Digest>();
    public scg::IList<global::D3.Hero.Digest> DigestListList {
      get { return digestList_; }
    }
    public int DigestListCount {
      get { return digestList_.Count; }
    }
    public global::D3.Hero.Digest GetDigestList(int index) {
      return digestList_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Hero.Digest element in DigestListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _heroDigestListResponseFieldNames;
      if (digestList_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], digestList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Hero.Digest element in DigestListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroDigestListResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestListResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestListResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestListResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestListResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestListResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestListResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroDigestListResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroDigestListResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestListResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeroDigestListResponse MakeReadOnly() {
      digestList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroDigestListResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HeroDigestListResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeroDigestListResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeroDigestListResponse result;
      
      private HeroDigestListResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          HeroDigestListResponse original = result;
          result = new HeroDigestListResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeroDigestListResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.HeroDigestListResponse.Descriptor; }
      }
      
      public override HeroDigestListResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.HeroDigestListResponse.DefaultInstance; }
      }
      
      public override HeroDigestListResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroDigestListResponse) {
          return MergeFrom((HeroDigestListResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroDigestListResponse other) {
        if (other == global::D3.GameMessage.HeroDigestListResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.digestList_.Count != 0) {
          result.digestList_.Add(other.digestList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heroDigestListResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heroDigestListResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.digestList_, global::D3.Hero.Digest.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Hero.Digest> DigestListList {
        get { return PrepareBuilder().digestList_; }
      }
      public int DigestListCount {
        get { return result.DigestListCount; }
      }
      public global::D3.Hero.Digest GetDigestList(int index) {
        return result.GetDigestList(index);
      }
      public Builder SetDigestList(int index, global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.digestList_[index] = value;
        return this;
      }
      public Builder SetDigestList(int index, global::D3.Hero.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.digestList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDigestList(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.digestList_.Add(value);
        return this;
      }
      public Builder AddDigestList(global::D3.Hero.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.digestList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDigestList(scg::IEnumerable<global::D3.Hero.Digest> values) {
        PrepareBuilder();
        result.digestList_.Add(values);
        return this;
      }
      public Builder ClearDigestList() {
        PrepareBuilder();
        result.digestList_.Clear();
        return this;
      }
    }
    static HeroDigestListResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PlayerBanner : pb::GeneratedMessage<PlayerBanner, PlayerBanner.Builder> {
    private PlayerBanner() { }
    private static readonly PlayerBanner defaultInstance = new PlayerBanner().MakeReadOnly();
    private static readonly string[] _playerBannerFieldNames = new string[] { "banner", "player_index" };
    private static readonly uint[] _playerBannerFieldTags = new uint[] { 18, 8 };
    public static PlayerBanner DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerBanner DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerBanner ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_PlayerBanner__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerBanner, PlayerBanner.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_PlayerBanner__FieldAccessorTable; }
    }
    
    public const int PlayerIndexFieldNumber = 1;
    private bool hasPlayerIndex;
    private uint playerIndex_;
    public bool HasPlayerIndex {
      get { return hasPlayerIndex; }
    }
    public uint PlayerIndex {
      get { return playerIndex_; }
    }
    
    public const int BannerFieldNumber = 2;
    private bool hasBanner;
    private global::D3.Account.BannerConfiguration banner_;
    public bool HasBanner {
      get { return hasBanner; }
    }
    public global::D3.Account.BannerConfiguration Banner {
      get { return banner_ ?? global::D3.Account.BannerConfiguration.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerIndex) return false;
        if (!hasBanner) return false;
        if (!Banner.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerBannerFieldNames;
      if (hasPlayerIndex) {
        output.WriteUInt32(1, field_names[1], PlayerIndex);
      }
      if (hasBanner) {
        output.WriteMessage(2, field_names[0], Banner);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayerIndex) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, PlayerIndex);
        }
        if (hasBanner) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Banner);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PlayerBanner ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerBanner ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerBanner ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerBanner ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerBanner ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerBanner ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerBanner ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerBanner ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerBanner ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerBanner ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerBanner MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerBanner prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerBanner, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerBanner cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerBanner result;
      
      private PlayerBanner PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerBanner original = result;
          result = new PlayerBanner();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerBanner MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.PlayerBanner.Descriptor; }
      }
      
      public override PlayerBanner DefaultInstanceForType {
        get { return global::D3.GameMessage.PlayerBanner.DefaultInstance; }
      }
      
      public override PlayerBanner BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerBanner) {
          return MergeFrom((PlayerBanner) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerBanner other) {
        if (other == global::D3.GameMessage.PlayerBanner.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerIndex) {
          PlayerIndex = other.PlayerIndex;
        }
        if (other.HasBanner) {
          MergeBanner(other.Banner);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerBannerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerBannerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerIndex = input.ReadUInt32(ref result.playerIndex_);
              break;
            }
            case 18: {
              global::D3.Account.BannerConfiguration.Builder subBuilder = global::D3.Account.BannerConfiguration.CreateBuilder();
              if (result.hasBanner) {
                subBuilder.MergeFrom(Banner);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Banner = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerIndex {
        get { return result.hasPlayerIndex; }
      }
      public uint PlayerIndex {
        get { return result.PlayerIndex; }
        set { SetPlayerIndex(value); }
      }
      public Builder SetPlayerIndex(uint value) {
        PrepareBuilder();
        result.hasPlayerIndex = true;
        result.playerIndex_ = value;
        return this;
      }
      public Builder ClearPlayerIndex() {
        PrepareBuilder();
        result.hasPlayerIndex = false;
        result.playerIndex_ = 0;
        return this;
      }
      
      public bool HasBanner {
       get { return result.hasBanner; }
      }
      public global::D3.Account.BannerConfiguration Banner {
        get { return result.Banner; }
        set { SetBanner(value); }
      }
      public Builder SetBanner(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBanner = true;
        result.banner_ = value;
        return this;
      }
      public Builder SetBanner(global::D3.Account.BannerConfiguration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBanner = true;
        result.banner_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBanner(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBanner &&
            result.banner_ != global::D3.Account.BannerConfiguration.DefaultInstance) {
            result.banner_ = global::D3.Account.BannerConfiguration.CreateBuilder(result.banner_).MergeFrom(value).BuildPartial();
        } else {
          result.banner_ = value;
        }
        result.hasBanner = true;
        return this;
      }
      public Builder ClearBanner() {
        PrepareBuilder();
        result.hasBanner = false;
        result.banner_ = null;
        return this;
      }
    }
    static PlayerBanner() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SaveBannerConfiguration : pb::GeneratedMessage<SaveBannerConfiguration, SaveBannerConfiguration.Builder> {
    private SaveBannerConfiguration() { }
    private static readonly SaveBannerConfiguration defaultInstance = new SaveBannerConfiguration().MakeReadOnly();
    private static readonly string[] _saveBannerConfigurationFieldNames = new string[] { "banner", "make_active", "slot_index" };
    private static readonly uint[] _saveBannerConfigurationFieldTags = new uint[] { 10, 24, 16 };
    public static SaveBannerConfiguration DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SaveBannerConfiguration DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SaveBannerConfiguration ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_SaveBannerConfiguration__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SaveBannerConfiguration, SaveBannerConfiguration.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_SaveBannerConfiguration__FieldAccessorTable; }
    }
    
    public const int BannerFieldNumber = 1;
    private bool hasBanner;
    private global::D3.Account.BannerConfiguration banner_;
    public bool HasBanner {
      get { return hasBanner; }
    }
    public global::D3.Account.BannerConfiguration Banner {
      get { return banner_ ?? global::D3.Account.BannerConfiguration.DefaultInstance; }
    }
    
    public const int SlotIndexFieldNumber = 2;
    private bool hasSlotIndex;
    private uint slotIndex_;
    public bool HasSlotIndex {
      get { return hasSlotIndex; }
    }
    public uint SlotIndex {
      get { return slotIndex_; }
    }
    
    public const int MakeActiveFieldNumber = 3;
    private bool hasMakeActive;
    private bool makeActive_ = true;
    public bool HasMakeActive {
      get { return hasMakeActive; }
    }
    public bool MakeActive {
      get { return makeActive_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBanner) return false;
        if (!Banner.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _saveBannerConfigurationFieldNames;
      if (hasBanner) {
        output.WriteMessage(1, field_names[0], Banner);
      }
      if (hasSlotIndex) {
        output.WriteUInt32(2, field_names[2], SlotIndex);
      }
      if (hasMakeActive) {
        output.WriteBool(3, field_names[1], MakeActive);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBanner) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Banner);
        }
        if (hasSlotIndex) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, SlotIndex);
        }
        if (hasMakeActive) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, MakeActive);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SaveBannerConfiguration ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SaveBannerConfiguration ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SaveBannerConfiguration ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SaveBannerConfiguration ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SaveBannerConfiguration ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SaveBannerConfiguration ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SaveBannerConfiguration ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SaveBannerConfiguration ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SaveBannerConfiguration ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SaveBannerConfiguration ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SaveBannerConfiguration MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SaveBannerConfiguration prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SaveBannerConfiguration, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SaveBannerConfiguration cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SaveBannerConfiguration result;
      
      private SaveBannerConfiguration PrepareBuilder() {
        if (resultIsReadOnly) {
          SaveBannerConfiguration original = result;
          result = new SaveBannerConfiguration();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SaveBannerConfiguration MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.SaveBannerConfiguration.Descriptor; }
      }
      
      public override SaveBannerConfiguration DefaultInstanceForType {
        get { return global::D3.GameMessage.SaveBannerConfiguration.DefaultInstance; }
      }
      
      public override SaveBannerConfiguration BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SaveBannerConfiguration) {
          return MergeFrom((SaveBannerConfiguration) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SaveBannerConfiguration other) {
        if (other == global::D3.GameMessage.SaveBannerConfiguration.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBanner) {
          MergeBanner(other.Banner);
        }
        if (other.HasSlotIndex) {
          SlotIndex = other.SlotIndex;
        }
        if (other.HasMakeActive) {
          MakeActive = other.MakeActive;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_saveBannerConfigurationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _saveBannerConfigurationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.Account.BannerConfiguration.Builder subBuilder = global::D3.Account.BannerConfiguration.CreateBuilder();
              if (result.hasBanner) {
                subBuilder.MergeFrom(Banner);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Banner = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasSlotIndex = input.ReadUInt32(ref result.slotIndex_);
              break;
            }
            case 24: {
              result.hasMakeActive = input.ReadBool(ref result.makeActive_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBanner {
       get { return result.hasBanner; }
      }
      public global::D3.Account.BannerConfiguration Banner {
        get { return result.Banner; }
        set { SetBanner(value); }
      }
      public Builder SetBanner(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBanner = true;
        result.banner_ = value;
        return this;
      }
      public Builder SetBanner(global::D3.Account.BannerConfiguration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBanner = true;
        result.banner_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBanner(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBanner &&
            result.banner_ != global::D3.Account.BannerConfiguration.DefaultInstance) {
            result.banner_ = global::D3.Account.BannerConfiguration.CreateBuilder(result.banner_).MergeFrom(value).BuildPartial();
        } else {
          result.banner_ = value;
        }
        result.hasBanner = true;
        return this;
      }
      public Builder ClearBanner() {
        PrepareBuilder();
        result.hasBanner = false;
        result.banner_ = null;
        return this;
      }
      
      public bool HasSlotIndex {
        get { return result.hasSlotIndex; }
      }
      public uint SlotIndex {
        get { return result.SlotIndex; }
        set { SetSlotIndex(value); }
      }
      public Builder SetSlotIndex(uint value) {
        PrepareBuilder();
        result.hasSlotIndex = true;
        result.slotIndex_ = value;
        return this;
      }
      public Builder ClearSlotIndex() {
        PrepareBuilder();
        result.hasSlotIndex = false;
        result.slotIndex_ = 0;
        return this;
      }
      
      public bool HasMakeActive {
        get { return result.hasMakeActive; }
      }
      public bool MakeActive {
        get { return result.MakeActive; }
        set { SetMakeActive(value); }
      }
      public Builder SetMakeActive(bool value) {
        PrepareBuilder();
        result.hasMakeActive = true;
        result.makeActive_ = value;
        return this;
      }
      public Builder ClearMakeActive() {
        PrepareBuilder();
        result.hasMakeActive = false;
        result.makeActive_ = true;
        return this;
      }
    }
    static SaveBannerConfiguration() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeroDigestBanner : pb::GeneratedMessage<HeroDigestBanner, HeroDigestBanner.Builder> {
    private HeroDigestBanner() { }
    private static readonly HeroDigestBanner defaultInstance = new HeroDigestBanner().MakeReadOnly();
    private static readonly string[] _heroDigestBannerFieldNames = new string[] { "banner", "hero_digest" };
    private static readonly uint[] _heroDigestBannerFieldTags = new uint[] { 18, 10 };
    public static HeroDigestBanner DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroDigestBanner DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeroDigestBanner ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestBanner__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroDigestBanner, HeroDigestBanner.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_HeroDigestBanner__FieldAccessorTable; }
    }
    
    public const int HeroDigestFieldNumber = 1;
    private bool hasHeroDigest;
    private global::D3.Hero.Digest heroDigest_;
    public bool HasHeroDigest {
      get { return hasHeroDigest; }
    }
    public global::D3.Hero.Digest HeroDigest {
      get { return heroDigest_ ?? global::D3.Hero.Digest.DefaultInstance; }
    }
    
    public const int BannerFieldNumber = 2;
    private bool hasBanner;
    private global::D3.Account.BannerConfiguration banner_;
    public bool HasBanner {
      get { return hasBanner; }
    }
    public global::D3.Account.BannerConfiguration Banner {
      get { return banner_ ?? global::D3.Account.BannerConfiguration.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroDigest) return false;
        if (!hasBanner) return false;
        if (!HeroDigest.IsInitialized) return false;
        if (!Banner.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _heroDigestBannerFieldNames;
      if (hasHeroDigest) {
        output.WriteMessage(1, field_names[1], HeroDigest);
      }
      if (hasBanner) {
        output.WriteMessage(2, field_names[0], Banner);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroDigest) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, HeroDigest);
        }
        if (hasBanner) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Banner);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroDigestBanner ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestBanner ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestBanner ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroDigestBanner ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestBanner ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestBanner ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroDigestBanner ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroDigestBanner ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroDigestBanner ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroDigestBanner ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeroDigestBanner MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroDigestBanner prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HeroDigestBanner, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeroDigestBanner cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeroDigestBanner result;
      
      private HeroDigestBanner PrepareBuilder() {
        if (resultIsReadOnly) {
          HeroDigestBanner original = result;
          result = new HeroDigestBanner();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeroDigestBanner MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.HeroDigestBanner.Descriptor; }
      }
      
      public override HeroDigestBanner DefaultInstanceForType {
        get { return global::D3.GameMessage.HeroDigestBanner.DefaultInstance; }
      }
      
      public override HeroDigestBanner BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroDigestBanner) {
          return MergeFrom((HeroDigestBanner) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroDigestBanner other) {
        if (other == global::D3.GameMessage.HeroDigestBanner.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroDigest) {
          MergeHeroDigest(other.HeroDigest);
        }
        if (other.HasBanner) {
          MergeBanner(other.Banner);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heroDigestBannerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heroDigestBannerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.Hero.Digest.Builder subBuilder = global::D3.Hero.Digest.CreateBuilder();
              if (result.hasHeroDigest) {
                subBuilder.MergeFrom(HeroDigest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroDigest = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.Account.BannerConfiguration.Builder subBuilder = global::D3.Account.BannerConfiguration.CreateBuilder();
              if (result.hasBanner) {
                subBuilder.MergeFrom(Banner);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Banner = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroDigest {
       get { return result.hasHeroDigest; }
      }
      public global::D3.Hero.Digest HeroDigest {
        get { return result.HeroDigest; }
        set { SetHeroDigest(value); }
      }
      public Builder SetHeroDigest(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroDigest = true;
        result.heroDigest_ = value;
        return this;
      }
      public Builder SetHeroDigest(global::D3.Hero.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroDigest = true;
        result.heroDigest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroDigest(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroDigest &&
            result.heroDigest_ != global::D3.Hero.Digest.DefaultInstance) {
            result.heroDigest_ = global::D3.Hero.Digest.CreateBuilder(result.heroDigest_).MergeFrom(value).BuildPartial();
        } else {
          result.heroDigest_ = value;
        }
        result.hasHeroDigest = true;
        return this;
      }
      public Builder ClearHeroDigest() {
        PrepareBuilder();
        result.hasHeroDigest = false;
        result.heroDigest_ = null;
        return this;
      }
      
      public bool HasBanner {
       get { return result.hasBanner; }
      }
      public global::D3.Account.BannerConfiguration Banner {
        get { return result.Banner; }
        set { SetBanner(value); }
      }
      public Builder SetBanner(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBanner = true;
        result.banner_ = value;
        return this;
      }
      public Builder SetBanner(global::D3.Account.BannerConfiguration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBanner = true;
        result.banner_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBanner(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBanner &&
            result.banner_ != global::D3.Account.BannerConfiguration.DefaultInstance) {
            result.banner_ = global::D3.Account.BannerConfiguration.CreateBuilder(result.banner_).MergeFrom(value).BuildPartial();
        } else {
          result.banner_ = value;
        }
        result.hasBanner = true;
        return this;
      }
      public Builder ClearBanner() {
        PrepareBuilder();
        result.hasBanner = false;
        result.banner_ = null;
        return this;
      }
    }
    static HeroDigestBanner() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameCurrentPlayers : pb::GeneratedMessage<GameCurrentPlayers, GameCurrentPlayers.Builder> {
    private GameCurrentPlayers() { }
    private static readonly GameCurrentPlayers defaultInstance = new GameCurrentPlayers().MakeReadOnly();
    private static readonly string[] _gameCurrentPlayersFieldNames = new string[] { "players" };
    private static readonly uint[] _gameCurrentPlayersFieldTags = new uint[] { 10 };
    public static GameCurrentPlayers DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameCurrentPlayers DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameCurrentPlayers ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GameCurrentPlayers__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameCurrentPlayers, GameCurrentPlayers.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GameCurrentPlayers__FieldAccessorTable; }
    }
    
    public const int PlayersFieldNumber = 1;
    private pbc::PopsicleList<global::D3.GameMessage.HeroDigestBanner> players_ = new pbc::PopsicleList<global::D3.GameMessage.HeroDigestBanner>();
    public scg::IList<global::D3.GameMessage.HeroDigestBanner> PlayersList {
      get { return players_; }
    }
    public int PlayersCount {
      get { return players_.Count; }
    }
    public global::D3.GameMessage.HeroDigestBanner GetPlayers(int index) {
      return players_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.GameMessage.HeroDigestBanner element in PlayersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameCurrentPlayersFieldNames;
      if (players_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], players_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.GameMessage.HeroDigestBanner element in PlayersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameCurrentPlayers ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameCurrentPlayers ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameCurrentPlayers ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameCurrentPlayers ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameCurrentPlayers ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameCurrentPlayers ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameCurrentPlayers ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameCurrentPlayers ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameCurrentPlayers ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameCurrentPlayers ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameCurrentPlayers MakeReadOnly() {
      players_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameCurrentPlayers prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameCurrentPlayers, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameCurrentPlayers cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameCurrentPlayers result;
      
      private GameCurrentPlayers PrepareBuilder() {
        if (resultIsReadOnly) {
          GameCurrentPlayers original = result;
          result = new GameCurrentPlayers();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameCurrentPlayers MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GameCurrentPlayers.Descriptor; }
      }
      
      public override GameCurrentPlayers DefaultInstanceForType {
        get { return global::D3.GameMessage.GameCurrentPlayers.DefaultInstance; }
      }
      
      public override GameCurrentPlayers BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameCurrentPlayers) {
          return MergeFrom((GameCurrentPlayers) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameCurrentPlayers other) {
        if (other == global::D3.GameMessage.GameCurrentPlayers.DefaultInstance) return this;
        PrepareBuilder();
        if (other.players_.Count != 0) {
          result.players_.Add(other.players_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameCurrentPlayersFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameCurrentPlayersFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.players_, global::D3.GameMessage.HeroDigestBanner.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.GameMessage.HeroDigestBanner> PlayersList {
        get { return PrepareBuilder().players_; }
      }
      public int PlayersCount {
        get { return result.PlayersCount; }
      }
      public global::D3.GameMessage.HeroDigestBanner GetPlayers(int index) {
        return result.GetPlayers(index);
      }
      public Builder SetPlayers(int index, global::D3.GameMessage.HeroDigestBanner value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.players_[index] = value;
        return this;
      }
      public Builder SetPlayers(int index, global::D3.GameMessage.HeroDigestBanner.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.players_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPlayers(global::D3.GameMessage.HeroDigestBanner value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.players_.Add(value);
        return this;
      }
      public Builder AddPlayers(global::D3.GameMessage.HeroDigestBanner.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.players_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePlayers(scg::IEnumerable<global::D3.GameMessage.HeroDigestBanner> values) {
        PrepareBuilder();
        result.players_.Add(values);
        return this;
      }
      public Builder ClearPlayers() {
        PrepareBuilder();
        result.players_.Clear();
        return this;
      }
    }
    static GameCurrentPlayers() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TooltipIds : pb::GeneratedMessage<TooltipIds, TooltipIds.Builder> {
    private TooltipIds() { }
    private static readonly TooltipIds defaultInstance = new TooltipIds().MakeReadOnly();
    private static readonly string[] _tooltipIdsFieldNames = new string[] { "ids", "locale" };
    private static readonly uint[] _tooltipIdsFieldTags = new uint[] { 18, 8 };
    public static TooltipIds DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TooltipIds DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TooltipIds ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TooltipIds__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TooltipIds, TooltipIds.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TooltipIds__FieldAccessorTable; }
    }
    
    public const int LocaleFieldNumber = 1;
    private bool hasLocale;
    private uint locale_;
    public bool HasLocale {
      get { return hasLocale; }
    }
    public uint Locale {
      get { return locale_; }
    }
    
    public const int IdsFieldNumber = 2;
    private pbc::PopsicleList<global::D3.OnlineService.ItemId> ids_ = new pbc::PopsicleList<global::D3.OnlineService.ItemId>();
    public scg::IList<global::D3.OnlineService.ItemId> IdsList {
      get { return ids_; }
    }
    public int IdsCount {
      get { return ids_.Count; }
    }
    public global::D3.OnlineService.ItemId GetIds(int index) {
      return ids_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLocale) return false;
        foreach (global::D3.OnlineService.ItemId element in IdsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tooltipIdsFieldNames;
      if (hasLocale) {
        output.WriteUInt32(1, field_names[1], Locale);
      }
      if (ids_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], ids_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLocale) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Locale);
        }
        foreach (global::D3.OnlineService.ItemId element in IdsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TooltipIds ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TooltipIds ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TooltipIds ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TooltipIds ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TooltipIds ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TooltipIds ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TooltipIds ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TooltipIds ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TooltipIds ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TooltipIds ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TooltipIds MakeReadOnly() {
      ids_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TooltipIds prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TooltipIds, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TooltipIds cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TooltipIds result;
      
      private TooltipIds PrepareBuilder() {
        if (resultIsReadOnly) {
          TooltipIds original = result;
          result = new TooltipIds();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TooltipIds MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.TooltipIds.Descriptor; }
      }
      
      public override TooltipIds DefaultInstanceForType {
        get { return global::D3.GameMessage.TooltipIds.DefaultInstance; }
      }
      
      public override TooltipIds BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TooltipIds) {
          return MergeFrom((TooltipIds) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TooltipIds other) {
        if (other == global::D3.GameMessage.TooltipIds.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLocale) {
          Locale = other.Locale;
        }
        if (other.ids_.Count != 0) {
          result.ids_.Add(other.ids_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tooltipIdsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tooltipIdsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLocale = input.ReadUInt32(ref result.locale_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.ids_, global::D3.OnlineService.ItemId.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLocale {
        get { return result.hasLocale; }
      }
      public uint Locale {
        get { return result.Locale; }
        set { SetLocale(value); }
      }
      public Builder SetLocale(uint value) {
        PrepareBuilder();
        result.hasLocale = true;
        result.locale_ = value;
        return this;
      }
      public Builder ClearLocale() {
        PrepareBuilder();
        result.hasLocale = false;
        result.locale_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.OnlineService.ItemId> IdsList {
        get { return PrepareBuilder().ids_; }
      }
      public int IdsCount {
        get { return result.IdsCount; }
      }
      public global::D3.OnlineService.ItemId GetIds(int index) {
        return result.GetIds(index);
      }
      public Builder SetIds(int index, global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ids_[index] = value;
        return this;
      }
      public Builder SetIds(int index, global::D3.OnlineService.ItemId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ids_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddIds(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ids_.Add(value);
        return this;
      }
      public Builder AddIds(global::D3.OnlineService.ItemId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ids_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeIds(scg::IEnumerable<global::D3.OnlineService.ItemId> values) {
        PrepareBuilder();
        result.ids_.Add(values);
        return this;
      }
      public Builder ClearIds() {
        PrepareBuilder();
        result.ids_.Clear();
        return this;
      }
    }
    static TooltipIds() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TooltipGenerators : pb::GeneratedMessage<TooltipGenerators, TooltipGenerators.Builder> {
    private TooltipGenerators() { }
    private static readonly TooltipGenerators defaultInstance = new TooltipGenerators().MakeReadOnly();
    private static readonly string[] _tooltipGeneratorsFieldNames = new string[] { "items", "locale" };
    private static readonly uint[] _tooltipGeneratorsFieldTags = new uint[] { 18, 8 };
    public static TooltipGenerators DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TooltipGenerators DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TooltipGenerators ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TooltipGenerators__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TooltipGenerators, TooltipGenerators.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TooltipGenerators__FieldAccessorTable; }
    }
    
    public const int LocaleFieldNumber = 1;
    private bool hasLocale;
    private uint locale_;
    public bool HasLocale {
      get { return hasLocale; }
    }
    public uint Locale {
      get { return locale_; }
    }
    
    public const int ItemsFieldNumber = 2;
    private bool hasItems;
    private global::D3.Items.ItemList items_;
    public bool HasItems {
      get { return hasItems; }
    }
    public global::D3.Items.ItemList Items {
      get { return items_ ?? global::D3.Items.ItemList.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLocale) return false;
        if (!hasItems) return false;
        if (!Items.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tooltipGeneratorsFieldNames;
      if (hasLocale) {
        output.WriteUInt32(1, field_names[1], Locale);
      }
      if (hasItems) {
        output.WriteMessage(2, field_names[0], Items);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLocale) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Locale);
        }
        if (hasItems) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Items);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TooltipGenerators ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TooltipGenerators ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TooltipGenerators ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TooltipGenerators ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TooltipGenerators ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TooltipGenerators ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TooltipGenerators ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TooltipGenerators ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TooltipGenerators ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TooltipGenerators ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TooltipGenerators MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TooltipGenerators prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TooltipGenerators, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TooltipGenerators cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TooltipGenerators result;
      
      private TooltipGenerators PrepareBuilder() {
        if (resultIsReadOnly) {
          TooltipGenerators original = result;
          result = new TooltipGenerators();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TooltipGenerators MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.TooltipGenerators.Descriptor; }
      }
      
      public override TooltipGenerators DefaultInstanceForType {
        get { return global::D3.GameMessage.TooltipGenerators.DefaultInstance; }
      }
      
      public override TooltipGenerators BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TooltipGenerators) {
          return MergeFrom((TooltipGenerators) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TooltipGenerators other) {
        if (other == global::D3.GameMessage.TooltipGenerators.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLocale) {
          Locale = other.Locale;
        }
        if (other.HasItems) {
          MergeItems(other.Items);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tooltipGeneratorsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tooltipGeneratorsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLocale = input.ReadUInt32(ref result.locale_);
              break;
            }
            case 18: {
              global::D3.Items.ItemList.Builder subBuilder = global::D3.Items.ItemList.CreateBuilder();
              if (result.hasItems) {
                subBuilder.MergeFrom(Items);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Items = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLocale {
        get { return result.hasLocale; }
      }
      public uint Locale {
        get { return result.Locale; }
        set { SetLocale(value); }
      }
      public Builder SetLocale(uint value) {
        PrepareBuilder();
        result.hasLocale = true;
        result.locale_ = value;
        return this;
      }
      public Builder ClearLocale() {
        PrepareBuilder();
        result.hasLocale = false;
        result.locale_ = 0;
        return this;
      }
      
      public bool HasItems {
       get { return result.hasItems; }
      }
      public global::D3.Items.ItemList Items {
        get { return result.Items; }
        set { SetItems(value); }
      }
      public Builder SetItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItems = true;
        result.items_ = value;
        return this;
      }
      public Builder SetItems(global::D3.Items.ItemList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItems = true;
        result.items_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItems &&
            result.items_ != global::D3.Items.ItemList.DefaultInstance) {
            result.items_ = global::D3.Items.ItemList.CreateBuilder(result.items_).MergeFrom(value).BuildPartial();
        } else {
          result.items_ = value;
        }
        result.hasItems = true;
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.hasItems = false;
        result.items_ = null;
        return this;
      }
    }
    static TooltipGenerators() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TutorialMessage : pb::GeneratedMessage<TutorialMessage, TutorialMessage.Builder> {
    private TutorialMessage() { }
    private static readonly TutorialMessage defaultInstance = new TutorialMessage().MakeReadOnly();
    private static readonly string[] _tutorialMessageFieldNames = new string[] { "actor_id", "tutorial_sno", "ui_anchor_name" };
    private static readonly uint[] _tutorialMessageFieldTags = new uint[] { 24, 8, 18 };
    public static TutorialMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TutorialMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TutorialMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TutorialMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TutorialMessage, TutorialMessage.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TutorialMessage__FieldAccessorTable; }
    }
    
    public const int TutorialSnoFieldNumber = 1;
    private bool hasTutorialSno;
    private uint tutorialSno_;
    public bool HasTutorialSno {
      get { return hasTutorialSno; }
    }
    public uint TutorialSno {
      get { return tutorialSno_; }
    }
    
    public const int UiAnchorNameFieldNumber = 2;
    private bool hasUiAnchorName;
    private string uiAnchorName_ = "";
    public bool HasUiAnchorName {
      get { return hasUiAnchorName; }
    }
    public string UiAnchorName {
      get { return uiAnchorName_; }
    }
    
    public const int ActorIdFieldNumber = 3;
    private bool hasActorId;
    private int actorId_ = -1;
    public bool HasActorId {
      get { return hasActorId; }
    }
    public int ActorId {
      get { return actorId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTutorialSno) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tutorialMessageFieldNames;
      if (hasTutorialSno) {
        output.WriteUInt32(1, field_names[1], TutorialSno);
      }
      if (hasUiAnchorName) {
        output.WriteString(2, field_names[2], UiAnchorName);
      }
      if (hasActorId) {
        output.WriteInt32(3, field_names[0], ActorId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTutorialSno) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, TutorialSno);
        }
        if (hasUiAnchorName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, UiAnchorName);
        }
        if (hasActorId) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, ActorId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TutorialMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TutorialMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TutorialMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TutorialMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TutorialMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TutorialMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TutorialMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TutorialMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TutorialMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TutorialMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TutorialMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TutorialMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TutorialMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TutorialMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TutorialMessage result;
      
      private TutorialMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          TutorialMessage original = result;
          result = new TutorialMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TutorialMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.TutorialMessage.Descriptor; }
      }
      
      public override TutorialMessage DefaultInstanceForType {
        get { return global::D3.GameMessage.TutorialMessage.DefaultInstance; }
      }
      
      public override TutorialMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TutorialMessage) {
          return MergeFrom((TutorialMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TutorialMessage other) {
        if (other == global::D3.GameMessage.TutorialMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTutorialSno) {
          TutorialSno = other.TutorialSno;
        }
        if (other.HasUiAnchorName) {
          UiAnchorName = other.UiAnchorName;
        }
        if (other.HasActorId) {
          ActorId = other.ActorId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tutorialMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tutorialMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTutorialSno = input.ReadUInt32(ref result.tutorialSno_);
              break;
            }
            case 18: {
              result.hasUiAnchorName = input.ReadString(ref result.uiAnchorName_);
              break;
            }
            case 24: {
              result.hasActorId = input.ReadInt32(ref result.actorId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTutorialSno {
        get { return result.hasTutorialSno; }
      }
      public uint TutorialSno {
        get { return result.TutorialSno; }
        set { SetTutorialSno(value); }
      }
      public Builder SetTutorialSno(uint value) {
        PrepareBuilder();
        result.hasTutorialSno = true;
        result.tutorialSno_ = value;
        return this;
      }
      public Builder ClearTutorialSno() {
        PrepareBuilder();
        result.hasTutorialSno = false;
        result.tutorialSno_ = 0;
        return this;
      }
      
      public bool HasUiAnchorName {
        get { return result.hasUiAnchorName; }
      }
      public string UiAnchorName {
        get { return result.UiAnchorName; }
        set { SetUiAnchorName(value); }
      }
      public Builder SetUiAnchorName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUiAnchorName = true;
        result.uiAnchorName_ = value;
        return this;
      }
      public Builder ClearUiAnchorName() {
        PrepareBuilder();
        result.hasUiAnchorName = false;
        result.uiAnchorName_ = "";
        return this;
      }
      
      public bool HasActorId {
        get { return result.hasActorId; }
      }
      public int ActorId {
        get { return result.ActorId; }
        set { SetActorId(value); }
      }
      public Builder SetActorId(int value) {
        PrepareBuilder();
        result.hasActorId = true;
        result.actorId_ = value;
        return this;
      }
      public Builder ClearActorId() {
        PrepareBuilder();
        result.hasActorId = false;
        result.actorId_ = -1;
        return this;
      }
    }
    static TutorialMessage() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TutorialState : pb::GeneratedMessage<TutorialState, TutorialState.Builder> {
    private TutorialState() { }
    private static readonly TutorialState defaultInstance = new TutorialState().MakeReadOnly();
    private static readonly string[] _tutorialStateFieldNames = new string[] { "seen_tutorials" };
    private static readonly uint[] _tutorialStateFieldTags = new uint[] { 10 };
    public static TutorialState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TutorialState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TutorialState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TutorialState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TutorialState, TutorialState.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TutorialState__FieldAccessorTable; }
    }
    
    public const int SeenTutorialsFieldNumber = 1;
    private bool hasSeenTutorials;
    private pb::ByteString seenTutorials_ = pb::ByteString.Empty;
    public bool HasSeenTutorials {
      get { return hasSeenTutorials; }
    }
    public pb::ByteString SeenTutorials {
      get { return seenTutorials_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSeenTutorials) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tutorialStateFieldNames;
      if (hasSeenTutorials) {
        output.WriteBytes(1, field_names[0], SeenTutorials);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSeenTutorials) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, SeenTutorials);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TutorialState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TutorialState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TutorialState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TutorialState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TutorialState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TutorialState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TutorialState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TutorialState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TutorialState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TutorialState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TutorialState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TutorialState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TutorialState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TutorialState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TutorialState result;
      
      private TutorialState PrepareBuilder() {
        if (resultIsReadOnly) {
          TutorialState original = result;
          result = new TutorialState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TutorialState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.TutorialState.Descriptor; }
      }
      
      public override TutorialState DefaultInstanceForType {
        get { return global::D3.GameMessage.TutorialState.DefaultInstance; }
      }
      
      public override TutorialState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TutorialState) {
          return MergeFrom((TutorialState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TutorialState other) {
        if (other == global::D3.GameMessage.TutorialState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSeenTutorials) {
          SeenTutorials = other.SeenTutorials;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tutorialStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tutorialStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSeenTutorials = input.ReadBytes(ref result.seenTutorials_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSeenTutorials {
        get { return result.hasSeenTutorials; }
      }
      public pb::ByteString SeenTutorials {
        get { return result.SeenTutorials; }
        set { SetSeenTutorials(value); }
      }
      public Builder SetSeenTutorials(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeenTutorials = true;
        result.seenTutorials_ = value;
        return this;
      }
      public Builder ClearSeenTutorials() {
        PrepareBuilder();
        result.hasSeenTutorials = false;
        result.seenTutorials_ = pb::ByteString.Empty;
        return this;
      }
    }
    static TutorialState() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CreateHeroResponse : pb::GeneratedMessage<CreateHeroResponse, CreateHeroResponse.Builder> {
    private CreateHeroResponse() { }
    private static readonly CreateHeroResponse defaultInstance = new CreateHeroResponse().MakeReadOnly();
    private static readonly string[] _createHeroResponseFieldNames = new string[] { "hero_id" };
    private static readonly uint[] _createHeroResponseFieldTags = new uint[] { 8 };
    public static CreateHeroResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateHeroResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreateHeroResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CreateHeroResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateHeroResponse, CreateHeroResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CreateHeroResponse__FieldAccessorTable; }
    }
    
    public const int HeroIdFieldNumber = 1;
    private bool hasHeroId;
    private ulong heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public ulong HeroId {
      get { return heroId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _createHeroResponseFieldNames;
      if (hasHeroId) {
        output.WriteUInt64(1, field_names[0], HeroId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, HeroId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateHeroResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateHeroResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateHeroResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateHeroResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateHeroResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateHeroResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateHeroResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateHeroResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateHeroResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateHeroResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreateHeroResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateHeroResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CreateHeroResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreateHeroResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreateHeroResponse result;
      
      private CreateHeroResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CreateHeroResponse original = result;
          result = new CreateHeroResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreateHeroResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.CreateHeroResponse.Descriptor; }
      }
      
      public override CreateHeroResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.CreateHeroResponse.DefaultInstance; }
      }
      
      public override CreateHeroResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateHeroResponse) {
          return MergeFrom((CreateHeroResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateHeroResponse other) {
        if (other == global::D3.GameMessage.CreateHeroResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_createHeroResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _createHeroResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHeroId = input.ReadUInt64(ref result.heroId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public ulong HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(ulong value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0UL;
        return this;
      }
    }
    static CreateHeroResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SelectHero : pb::GeneratedMessage<SelectHero, SelectHero.Builder> {
    private SelectHero() { }
    private static readonly SelectHero defaultInstance = new SelectHero().MakeReadOnly();
    private static readonly string[] _selectHeroFieldNames = new string[] { "hero_id" };
    private static readonly uint[] _selectHeroFieldTags = new uint[] { 8 };
    public static SelectHero DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SelectHero DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SelectHero ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_SelectHero__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SelectHero, SelectHero.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_SelectHero__FieldAccessorTable; }
    }
    
    public const int HeroIdFieldNumber = 1;
    private bool hasHeroId;
    private ulong heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public ulong HeroId {
      get { return heroId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _selectHeroFieldNames;
      if (hasHeroId) {
        output.WriteUInt64(1, field_names[0], HeroId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, HeroId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SelectHero ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SelectHero ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SelectHero ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SelectHero ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SelectHero ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SelectHero ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SelectHero ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SelectHero ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SelectHero ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SelectHero ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SelectHero MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SelectHero prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SelectHero, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SelectHero cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SelectHero result;
      
      private SelectHero PrepareBuilder() {
        if (resultIsReadOnly) {
          SelectHero original = result;
          result = new SelectHero();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SelectHero MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.SelectHero.Descriptor; }
      }
      
      public override SelectHero DefaultInstanceForType {
        get { return global::D3.GameMessage.SelectHero.DefaultInstance; }
      }
      
      public override SelectHero BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SelectHero) {
          return MergeFrom((SelectHero) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SelectHero other) {
        if (other == global::D3.GameMessage.SelectHero.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_selectHeroFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _selectHeroFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHeroId = input.ReadUInt64(ref result.heroId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public ulong HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(ulong value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0UL;
        return this;
      }
    }
    static SelectHero() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DeleteHero : pb::GeneratedMessage<DeleteHero, DeleteHero.Builder> {
    private DeleteHero() { }
    private static readonly DeleteHero defaultInstance = new DeleteHero().MakeReadOnly();
    private static readonly string[] _deleteHeroFieldNames = new string[] { "hero_id" };
    private static readonly uint[] _deleteHeroFieldTags = new uint[] { 8 };
    public static DeleteHero DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DeleteHero DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DeleteHero ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_DeleteHero__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DeleteHero, DeleteHero.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_DeleteHero__FieldAccessorTable; }
    }
    
    public const int HeroIdFieldNumber = 1;
    private bool hasHeroId;
    private ulong heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public ulong HeroId {
      get { return heroId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _deleteHeroFieldNames;
      if (hasHeroId) {
        output.WriteUInt64(1, field_names[0], HeroId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, HeroId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DeleteHero ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeleteHero ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeleteHero ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeleteHero ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeleteHero ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeleteHero ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DeleteHero ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DeleteHero ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DeleteHero ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeleteHero ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DeleteHero MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DeleteHero prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DeleteHero, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DeleteHero cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DeleteHero result;
      
      private DeleteHero PrepareBuilder() {
        if (resultIsReadOnly) {
          DeleteHero original = result;
          result = new DeleteHero();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DeleteHero MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.DeleteHero.Descriptor; }
      }
      
      public override DeleteHero DefaultInstanceForType {
        get { return global::D3.GameMessage.DeleteHero.DefaultInstance; }
      }
      
      public override DeleteHero BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DeleteHero) {
          return MergeFrom((DeleteHero) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DeleteHero other) {
        if (other == global::D3.GameMessage.DeleteHero.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_deleteHeroFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _deleteHeroFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHeroId = input.ReadUInt64(ref result.heroId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public ulong HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(ulong value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0UL;
        return this;
      }
    }
    static DeleteHero() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class UndeleteHero : pb::GeneratedMessage<UndeleteHero, UndeleteHero.Builder> {
    private UndeleteHero() { }
    private static readonly UndeleteHero defaultInstance = new UndeleteHero().MakeReadOnly();
    private static readonly string[] _undeleteHeroFieldNames = new string[] { "replace_hero_id", "undelete_hero_id" };
    private static readonly uint[] _undeleteHeroFieldTags = new uint[] { 16, 8 };
    public static UndeleteHero DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UndeleteHero DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UndeleteHero ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_UndeleteHero__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UndeleteHero, UndeleteHero.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_UndeleteHero__FieldAccessorTable; }
    }
    
    public const int UndeleteHeroIdFieldNumber = 1;
    private bool hasUndeleteHeroId;
    private ulong undeleteHeroId_;
    public bool HasUndeleteHeroId {
      get { return hasUndeleteHeroId; }
    }
    public ulong UndeleteHeroId {
      get { return undeleteHeroId_; }
    }
    
    public const int ReplaceHeroIdFieldNumber = 2;
    private bool hasReplaceHeroId;
    private ulong replaceHeroId_;
    public bool HasReplaceHeroId {
      get { return hasReplaceHeroId; }
    }
    public ulong ReplaceHeroId {
      get { return replaceHeroId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUndeleteHeroId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _undeleteHeroFieldNames;
      if (hasUndeleteHeroId) {
        output.WriteUInt64(1, field_names[1], UndeleteHeroId);
      }
      if (hasReplaceHeroId) {
        output.WriteUInt64(2, field_names[0], ReplaceHeroId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUndeleteHeroId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, UndeleteHeroId);
        }
        if (hasReplaceHeroId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, ReplaceHeroId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UndeleteHero ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UndeleteHero ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UndeleteHero ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UndeleteHero ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UndeleteHero ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UndeleteHero ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UndeleteHero ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UndeleteHero ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UndeleteHero ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UndeleteHero ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UndeleteHero MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UndeleteHero prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<UndeleteHero, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UndeleteHero cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UndeleteHero result;
      
      private UndeleteHero PrepareBuilder() {
        if (resultIsReadOnly) {
          UndeleteHero original = result;
          result = new UndeleteHero();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UndeleteHero MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.UndeleteHero.Descriptor; }
      }
      
      public override UndeleteHero DefaultInstanceForType {
        get { return global::D3.GameMessage.UndeleteHero.DefaultInstance; }
      }
      
      public override UndeleteHero BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UndeleteHero) {
          return MergeFrom((UndeleteHero) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UndeleteHero other) {
        if (other == global::D3.GameMessage.UndeleteHero.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUndeleteHeroId) {
          UndeleteHeroId = other.UndeleteHeroId;
        }
        if (other.HasReplaceHeroId) {
          ReplaceHeroId = other.ReplaceHeroId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_undeleteHeroFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _undeleteHeroFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUndeleteHeroId = input.ReadUInt64(ref result.undeleteHeroId_);
              break;
            }
            case 16: {
              result.hasReplaceHeroId = input.ReadUInt64(ref result.replaceHeroId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUndeleteHeroId {
        get { return result.hasUndeleteHeroId; }
      }
      public ulong UndeleteHeroId {
        get { return result.UndeleteHeroId; }
        set { SetUndeleteHeroId(value); }
      }
      public Builder SetUndeleteHeroId(ulong value) {
        PrepareBuilder();
        result.hasUndeleteHeroId = true;
        result.undeleteHeroId_ = value;
        return this;
      }
      public Builder ClearUndeleteHeroId() {
        PrepareBuilder();
        result.hasUndeleteHeroId = false;
        result.undeleteHeroId_ = 0UL;
        return this;
      }
      
      public bool HasReplaceHeroId {
        get { return result.hasReplaceHeroId; }
      }
      public ulong ReplaceHeroId {
        get { return result.ReplaceHeroId; }
        set { SetReplaceHeroId(value); }
      }
      public Builder SetReplaceHeroId(ulong value) {
        PrepareBuilder();
        result.hasReplaceHeroId = true;
        result.replaceHeroId_ = value;
        return this;
      }
      public Builder ClearReplaceHeroId() {
        PrepareBuilder();
        result.hasReplaceHeroId = false;
        result.replaceHeroId_ = 0UL;
        return this;
      }
    }
    static UndeleteHero() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetFallenHeros : pb::GeneratedMessage<GetFallenHeros, GetFallenHeros.Builder> {
    private GetFallenHeros() { }
    private static readonly GetFallenHeros defaultInstance = new GetFallenHeros().MakeReadOnly();
    private static readonly string[] _getFallenHerosFieldNames = new string[] { "account_id" };
    private static readonly uint[] _getFallenHerosFieldTags = new uint[] { 10 };
    public static GetFallenHeros DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetFallenHeros DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetFallenHeros ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetFallenHeros__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetFallenHeros, GetFallenHeros.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetFallenHeros__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.GameAccountHandle accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle AccountId {
      get { return accountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getFallenHerosFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetFallenHeros ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetFallenHeros ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetFallenHeros ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetFallenHeros ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetFallenHeros ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetFallenHeros ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetFallenHeros ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetFallenHeros ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetFallenHeros ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetFallenHeros ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetFallenHeros MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetFallenHeros prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetFallenHeros, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetFallenHeros cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetFallenHeros result;
      
      private GetFallenHeros PrepareBuilder() {
        if (resultIsReadOnly) {
          GetFallenHeros original = result;
          result = new GetFallenHeros();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetFallenHeros MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GetFallenHeros.Descriptor; }
      }
      
      public override GetFallenHeros DefaultInstanceForType {
        get { return global::D3.GameMessage.GetFallenHeros.DefaultInstance; }
      }
      
      public override GetFallenHeros BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetFallenHeros) {
          return MergeFrom((GetFallenHeros) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetFallenHeros other) {
        if (other == global::D3.GameMessage.GetFallenHeros.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getFallenHerosFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getFallenHerosFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
    }
    static GetFallenHeros() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ArchiveHardcore : pb::GeneratedMessage<ArchiveHardcore, ArchiveHardcore.Builder> {
    private ArchiveHardcore() { }
    private static readonly ArchiveHardcore defaultInstance = new ArchiveHardcore().MakeReadOnly();
    private static readonly string[] _archiveHardcoreFieldNames = new string[] { "epitaph", "hero_id" };
    private static readonly uint[] _archiveHardcoreFieldTags = new uint[] { 18, 8 };
    public static ArchiveHardcore DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ArchiveHardcore DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ArchiveHardcore ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ArchiveHardcore__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ArchiveHardcore, ArchiveHardcore.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ArchiveHardcore__FieldAccessorTable; }
    }
    
    public const int HeroIdFieldNumber = 1;
    private bool hasHeroId;
    private ulong heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public ulong HeroId {
      get { return heroId_; }
    }
    
    public const int EpitaphFieldNumber = 2;
    private bool hasEpitaph;
    private string epitaph_ = "";
    public bool HasEpitaph {
      get { return hasEpitaph; }
    }
    public string Epitaph {
      get { return epitaph_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroId) return false;
        if (!hasEpitaph) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _archiveHardcoreFieldNames;
      if (hasHeroId) {
        output.WriteUInt64(1, field_names[1], HeroId);
      }
      if (hasEpitaph) {
        output.WriteString(2, field_names[0], Epitaph);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, HeroId);
        }
        if (hasEpitaph) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Epitaph);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ArchiveHardcore ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ArchiveHardcore ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ArchiveHardcore ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ArchiveHardcore ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ArchiveHardcore ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ArchiveHardcore ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ArchiveHardcore ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ArchiveHardcore ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ArchiveHardcore ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ArchiveHardcore ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ArchiveHardcore MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ArchiveHardcore prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ArchiveHardcore, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ArchiveHardcore cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ArchiveHardcore result;
      
      private ArchiveHardcore PrepareBuilder() {
        if (resultIsReadOnly) {
          ArchiveHardcore original = result;
          result = new ArchiveHardcore();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ArchiveHardcore MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ArchiveHardcore.Descriptor; }
      }
      
      public override ArchiveHardcore DefaultInstanceForType {
        get { return global::D3.GameMessage.ArchiveHardcore.DefaultInstance; }
      }
      
      public override ArchiveHardcore BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ArchiveHardcore) {
          return MergeFrom((ArchiveHardcore) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ArchiveHardcore other) {
        if (other == global::D3.GameMessage.ArchiveHardcore.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        if (other.HasEpitaph) {
          Epitaph = other.Epitaph;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_archiveHardcoreFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _archiveHardcoreFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHeroId = input.ReadUInt64(ref result.heroId_);
              break;
            }
            case 18: {
              result.hasEpitaph = input.ReadString(ref result.epitaph_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public ulong HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(ulong value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0UL;
        return this;
      }
      
      public bool HasEpitaph {
        get { return result.hasEpitaph; }
      }
      public string Epitaph {
        get { return result.Epitaph; }
        set { SetEpitaph(value); }
      }
      public Builder SetEpitaph(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEpitaph = true;
        result.epitaph_ = value;
        return this;
      }
      public Builder ClearEpitaph() {
        PrepareBuilder();
        result.hasEpitaph = false;
        result.epitaph_ = "";
        return this;
      }
    }
    static ArchiveHardcore() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ArchiveHardcoreResponse : pb::GeneratedMessage<ArchiveHardcoreResponse, ArchiveHardcoreResponse.Builder> {
    private ArchiveHardcoreResponse() { }
    private static readonly ArchiveHardcoreResponse defaultInstance = new ArchiveHardcoreResponse().MakeReadOnly();
    private static readonly string[] _archiveHardcoreResponseFieldNames = new string[] { "hero_id" };
    private static readonly uint[] _archiveHardcoreResponseFieldTags = new uint[] { 8 };
    public static ArchiveHardcoreResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ArchiveHardcoreResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ArchiveHardcoreResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ArchiveHardcoreResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ArchiveHardcoreResponse, ArchiveHardcoreResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ArchiveHardcoreResponse__FieldAccessorTable; }
    }
    
    public const int HeroIdFieldNumber = 1;
    private bool hasHeroId;
    private ulong heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public ulong HeroId {
      get { return heroId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _archiveHardcoreResponseFieldNames;
      if (hasHeroId) {
        output.WriteUInt64(1, field_names[0], HeroId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, HeroId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ArchiveHardcoreResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ArchiveHardcoreResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ArchiveHardcoreResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ArchiveHardcoreResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ArchiveHardcoreResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ArchiveHardcoreResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ArchiveHardcoreResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ArchiveHardcoreResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ArchiveHardcoreResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ArchiveHardcoreResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ArchiveHardcoreResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ArchiveHardcoreResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ArchiveHardcoreResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ArchiveHardcoreResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ArchiveHardcoreResponse result;
      
      private ArchiveHardcoreResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ArchiveHardcoreResponse original = result;
          result = new ArchiveHardcoreResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ArchiveHardcoreResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ArchiveHardcoreResponse.Descriptor; }
      }
      
      public override ArchiveHardcoreResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.ArchiveHardcoreResponse.DefaultInstance; }
      }
      
      public override ArchiveHardcoreResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ArchiveHardcoreResponse) {
          return MergeFrom((ArchiveHardcoreResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ArchiveHardcoreResponse other) {
        if (other == global::D3.GameMessage.ArchiveHardcoreResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_archiveHardcoreResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _archiveHardcoreResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHeroId = input.ReadUInt64(ref result.heroId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public ulong HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(ulong value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0UL;
        return this;
      }
    }
    static ArchiveHardcoreResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DeleteFallenHero : pb::GeneratedMessage<DeleteFallenHero, DeleteFallenHero.Builder> {
    private DeleteFallenHero() { }
    private static readonly DeleteFallenHero defaultInstance = new DeleteFallenHero().MakeReadOnly();
    private static readonly string[] _deleteFallenHeroFieldNames = new string[] { "hero_id" };
    private static readonly uint[] _deleteFallenHeroFieldTags = new uint[] { 8 };
    public static DeleteFallenHero DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DeleteFallenHero DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DeleteFallenHero ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_DeleteFallenHero__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DeleteFallenHero, DeleteFallenHero.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_DeleteFallenHero__FieldAccessorTable; }
    }
    
    public const int HeroIdFieldNumber = 1;
    private bool hasHeroId;
    private ulong heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public ulong HeroId {
      get { return heroId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _deleteFallenHeroFieldNames;
      if (hasHeroId) {
        output.WriteUInt64(1, field_names[0], HeroId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, HeroId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DeleteFallenHero ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeleteFallenHero ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeleteFallenHero ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeleteFallenHero ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeleteFallenHero ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeleteFallenHero ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DeleteFallenHero ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DeleteFallenHero ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DeleteFallenHero ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeleteFallenHero ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DeleteFallenHero MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DeleteFallenHero prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DeleteFallenHero, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DeleteFallenHero cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DeleteFallenHero result;
      
      private DeleteFallenHero PrepareBuilder() {
        if (resultIsReadOnly) {
          DeleteFallenHero original = result;
          result = new DeleteFallenHero();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DeleteFallenHero MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.DeleteFallenHero.Descriptor; }
      }
      
      public override DeleteFallenHero DefaultInstanceForType {
        get { return global::D3.GameMessage.DeleteFallenHero.DefaultInstance; }
      }
      
      public override DeleteFallenHero BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DeleteFallenHero) {
          return MergeFrom((DeleteFallenHero) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DeleteFallenHero other) {
        if (other == global::D3.GameMessage.DeleteFallenHero.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_deleteFallenHeroFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _deleteFallenHeroFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHeroId = input.ReadUInt64(ref result.heroId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public ulong HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(ulong value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0UL;
        return this;
      }
    }
    static DeleteFallenHero() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AccountVersionList : pb::GeneratedMessage<AccountVersionList, AccountVersionList.Builder> {
    private AccountVersionList() { }
    private static readonly AccountVersionList defaultInstance = new AccountVersionList().MakeReadOnly();
    private static readonly string[] _accountVersionListFieldNames = new string[] { "account_id", "return_snapshots" };
    private static readonly uint[] _accountVersionListFieldTags = new uint[] { 10, 16 };
    public static AccountVersionList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AccountVersionList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AccountVersionList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_AccountVersionList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AccountVersionList, AccountVersionList.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_AccountVersionList__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int ReturnSnapshotsFieldNumber = 2;
    private bool hasReturnSnapshots;
    private bool returnSnapshots_;
    public bool HasReturnSnapshots {
      get { return hasReturnSnapshots; }
    }
    public bool ReturnSnapshots {
      get { return returnSnapshots_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _accountVersionListFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (hasReturnSnapshots) {
        output.WriteBool(2, field_names[1], ReturnSnapshots);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        if (hasReturnSnapshots) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, ReturnSnapshots);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AccountVersionList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountVersionList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountVersionList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountVersionList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountVersionList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountVersionList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountVersionList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountVersionList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountVersionList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountVersionList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AccountVersionList MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountVersionList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AccountVersionList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AccountVersionList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AccountVersionList result;
      
      private AccountVersionList PrepareBuilder() {
        if (resultIsReadOnly) {
          AccountVersionList original = result;
          result = new AccountVersionList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AccountVersionList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.AccountVersionList.Descriptor; }
      }
      
      public override AccountVersionList DefaultInstanceForType {
        get { return global::D3.GameMessage.AccountVersionList.DefaultInstance; }
      }
      
      public override AccountVersionList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountVersionList) {
          return MergeFrom((AccountVersionList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AccountVersionList other) {
        if (other == global::D3.GameMessage.AccountVersionList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.HasReturnSnapshots) {
          ReturnSnapshots = other.ReturnSnapshots;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_accountVersionListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _accountVersionListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasReturnSnapshots = input.ReadBool(ref result.returnSnapshots_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public bool HasReturnSnapshots {
        get { return result.hasReturnSnapshots; }
      }
      public bool ReturnSnapshots {
        get { return result.ReturnSnapshots; }
        set { SetReturnSnapshots(value); }
      }
      public Builder SetReturnSnapshots(bool value) {
        PrepareBuilder();
        result.hasReturnSnapshots = true;
        result.returnSnapshots_ = value;
        return this;
      }
      public Builder ClearReturnSnapshots() {
        PrepareBuilder();
        result.hasReturnSnapshots = false;
        result.returnSnapshots_ = false;
        return this;
      }
    }
    static AccountVersionList() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AccountVersionSync : pb::GeneratedMessage<AccountVersionSync, AccountVersionSync.Builder> {
    private AccountVersionSync() { }
    private static readonly AccountVersionSync defaultInstance = new AccountVersionSync().MakeReadOnly();
    private static readonly string[] _accountVersionSyncFieldNames = new string[] { "account_id", "allow_hardcore_resurrect", "bind_on_restore", "recreate_item_list", "source_account_id", "version" };
    private static readonly uint[] _accountVersionSyncFieldTags = new uint[] { 10, 32, 24, 42, 50, 16 };
    public static AccountVersionSync DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AccountVersionSync DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AccountVersionSync ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_AccountVersionSync__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AccountVersionSync, AccountVersionSync.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_AccountVersionSync__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int VersionFieldNumber = 2;
    private bool hasVersion;
    private ulong version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public ulong Version {
      get { return version_; }
    }
    
    public const int AllowHardcoreResurrectFieldNumber = 4;
    private bool hasAllowHardcoreResurrect;
    private bool allowHardcoreResurrect_;
    public bool HasAllowHardcoreResurrect {
      get { return hasAllowHardcoreResurrect; }
    }
    public bool AllowHardcoreResurrect {
      get { return allowHardcoreResurrect_; }
    }
    
    public const int BindOnRestoreFieldNumber = 3;
    private bool hasBindOnRestore;
    private bool bindOnRestore_ = true;
    public bool HasBindOnRestore {
      get { return hasBindOnRestore; }
    }
    public bool BindOnRestore {
      get { return bindOnRestore_; }
    }
    
    public const int RecreateItemListFieldNumber = 5;
    private bool hasRecreateItemList;
    private global::D3.CS.PartitionedGBIDList recreateItemList_;
    public bool HasRecreateItemList {
      get { return hasRecreateItemList; }
    }
    public global::D3.CS.PartitionedGBIDList RecreateItemList {
      get { return recreateItemList_ ?? global::D3.CS.PartitionedGBIDList.DefaultInstance; }
    }
    
    public const int SourceAccountIdFieldNumber = 6;
    private bool hasSourceAccountId;
    private global::D3.OnlineService.EntityId sourceAccountId_;
    public bool HasSourceAccountId {
      get { return hasSourceAccountId; }
    }
    public global::D3.OnlineService.EntityId SourceAccountId {
      get { return sourceAccountId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasVersion) return false;
        if (!AccountId.IsInitialized) return false;
        if (HasRecreateItemList) {
          if (!RecreateItemList.IsInitialized) return false;
        }
        if (HasSourceAccountId) {
          if (!SourceAccountId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _accountVersionSyncFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (hasVersion) {
        output.WriteUInt64(2, field_names[5], Version);
      }
      if (hasBindOnRestore) {
        output.WriteBool(3, field_names[2], BindOnRestore);
      }
      if (hasAllowHardcoreResurrect) {
        output.WriteBool(4, field_names[1], AllowHardcoreResurrect);
      }
      if (hasRecreateItemList) {
        output.WriteMessage(5, field_names[3], RecreateItemList);
      }
      if (hasSourceAccountId) {
        output.WriteMessage(6, field_names[4], SourceAccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, Version);
        }
        if (hasAllowHardcoreResurrect) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, AllowHardcoreResurrect);
        }
        if (hasBindOnRestore) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, BindOnRestore);
        }
        if (hasRecreateItemList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, RecreateItemList);
        }
        if (hasSourceAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, SourceAccountId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AccountVersionSync ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountVersionSync ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountVersionSync ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountVersionSync ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountVersionSync ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountVersionSync ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountVersionSync ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountVersionSync ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountVersionSync ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountVersionSync ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AccountVersionSync MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountVersionSync prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AccountVersionSync, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AccountVersionSync cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AccountVersionSync result;
      
      private AccountVersionSync PrepareBuilder() {
        if (resultIsReadOnly) {
          AccountVersionSync original = result;
          result = new AccountVersionSync();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AccountVersionSync MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.AccountVersionSync.Descriptor; }
      }
      
      public override AccountVersionSync DefaultInstanceForType {
        get { return global::D3.GameMessage.AccountVersionSync.DefaultInstance; }
      }
      
      public override AccountVersionSync BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountVersionSync) {
          return MergeFrom((AccountVersionSync) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AccountVersionSync other) {
        if (other == global::D3.GameMessage.AccountVersionSync.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasAllowHardcoreResurrect) {
          AllowHardcoreResurrect = other.AllowHardcoreResurrect;
        }
        if (other.HasBindOnRestore) {
          BindOnRestore = other.BindOnRestore;
        }
        if (other.HasRecreateItemList) {
          MergeRecreateItemList(other.RecreateItemList);
        }
        if (other.HasSourceAccountId) {
          MergeSourceAccountId(other.SourceAccountId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_accountVersionSyncFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _accountVersionSyncFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasVersion = input.ReadUInt64(ref result.version_);
              break;
            }
            case 24: {
              result.hasBindOnRestore = input.ReadBool(ref result.bindOnRestore_);
              break;
            }
            case 32: {
              result.hasAllowHardcoreResurrect = input.ReadBool(ref result.allowHardcoreResurrect_);
              break;
            }
            case 42: {
              global::D3.CS.PartitionedGBIDList.Builder subBuilder = global::D3.CS.PartitionedGBIDList.CreateBuilder();
              if (result.hasRecreateItemList) {
                subBuilder.MergeFrom(RecreateItemList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RecreateItemList = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasSourceAccountId) {
                subBuilder.MergeFrom(SourceAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SourceAccountId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public ulong Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(ulong value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0UL;
        return this;
      }
      
      public bool HasAllowHardcoreResurrect {
        get { return result.hasAllowHardcoreResurrect; }
      }
      public bool AllowHardcoreResurrect {
        get { return result.AllowHardcoreResurrect; }
        set { SetAllowHardcoreResurrect(value); }
      }
      public Builder SetAllowHardcoreResurrect(bool value) {
        PrepareBuilder();
        result.hasAllowHardcoreResurrect = true;
        result.allowHardcoreResurrect_ = value;
        return this;
      }
      public Builder ClearAllowHardcoreResurrect() {
        PrepareBuilder();
        result.hasAllowHardcoreResurrect = false;
        result.allowHardcoreResurrect_ = false;
        return this;
      }
      
      public bool HasBindOnRestore {
        get { return result.hasBindOnRestore; }
      }
      public bool BindOnRestore {
        get { return result.BindOnRestore; }
        set { SetBindOnRestore(value); }
      }
      public Builder SetBindOnRestore(bool value) {
        PrepareBuilder();
        result.hasBindOnRestore = true;
        result.bindOnRestore_ = value;
        return this;
      }
      public Builder ClearBindOnRestore() {
        PrepareBuilder();
        result.hasBindOnRestore = false;
        result.bindOnRestore_ = true;
        return this;
      }
      
      public bool HasRecreateItemList {
       get { return result.hasRecreateItemList; }
      }
      public global::D3.CS.PartitionedGBIDList RecreateItemList {
        get { return result.RecreateItemList; }
        set { SetRecreateItemList(value); }
      }
      public Builder SetRecreateItemList(global::D3.CS.PartitionedGBIDList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRecreateItemList = true;
        result.recreateItemList_ = value;
        return this;
      }
      public Builder SetRecreateItemList(global::D3.CS.PartitionedGBIDList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRecreateItemList = true;
        result.recreateItemList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRecreateItemList(global::D3.CS.PartitionedGBIDList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRecreateItemList &&
            result.recreateItemList_ != global::D3.CS.PartitionedGBIDList.DefaultInstance) {
            result.recreateItemList_ = global::D3.CS.PartitionedGBIDList.CreateBuilder(result.recreateItemList_).MergeFrom(value).BuildPartial();
        } else {
          result.recreateItemList_ = value;
        }
        result.hasRecreateItemList = true;
        return this;
      }
      public Builder ClearRecreateItemList() {
        PrepareBuilder();
        result.hasRecreateItemList = false;
        result.recreateItemList_ = null;
        return this;
      }
      
      public bool HasSourceAccountId {
       get { return result.hasSourceAccountId; }
      }
      public global::D3.OnlineService.EntityId SourceAccountId {
        get { return result.SourceAccountId; }
        set { SetSourceAccountId(value); }
      }
      public Builder SetSourceAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSourceAccountId = true;
        result.sourceAccountId_ = value;
        return this;
      }
      public Builder SetSourceAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSourceAccountId = true;
        result.sourceAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSourceAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSourceAccountId &&
            result.sourceAccountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.sourceAccountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.sourceAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.sourceAccountId_ = value;
        }
        result.hasSourceAccountId = true;
        return this;
      }
      public Builder ClearSourceAccountId() {
        PrepareBuilder();
        result.hasSourceAccountId = false;
        result.sourceAccountId_ = null;
        return this;
      }
    }
    static AccountVersionSync() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerDeleteHero : pb::GeneratedMessage<ServerDeleteHero, ServerDeleteHero.Builder> {
    private ServerDeleteHero() { }
    private static readonly ServerDeleteHero defaultInstance = new ServerDeleteHero().MakeReadOnly();
    private static readonly string[] _serverDeleteHeroFieldNames = new string[] { "account_id", "hero_id" };
    private static readonly uint[] _serverDeleteHeroFieldTags = new uint[] { 10, 18 };
    public static ServerDeleteHero DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerDeleteHero DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerDeleteHero ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerDeleteHero__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerDeleteHero, ServerDeleteHero.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerDeleteHero__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int HeroIdFieldNumber = 2;
    private bool hasHeroId;
    private global::D3.OnlineService.EntityId heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public global::D3.OnlineService.EntityId HeroId {
      get { return heroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasHeroId) return false;
        if (!AccountId.IsInitialized) return false;
        if (!HeroId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverDeleteHeroFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (hasHeroId) {
        output.WriteMessage(2, field_names[1], HeroId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, HeroId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerDeleteHero ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerDeleteHero ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerDeleteHero ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerDeleteHero ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerDeleteHero ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerDeleteHero ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerDeleteHero ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerDeleteHero ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerDeleteHero ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerDeleteHero ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerDeleteHero MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerDeleteHero prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerDeleteHero, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerDeleteHero cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerDeleteHero result;
      
      private ServerDeleteHero PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerDeleteHero original = result;
          result = new ServerDeleteHero();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerDeleteHero MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServerDeleteHero.Descriptor; }
      }
      
      public override ServerDeleteHero DefaultInstanceForType {
        get { return global::D3.GameMessage.ServerDeleteHero.DefaultInstance; }
      }
      
      public override ServerDeleteHero BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerDeleteHero) {
          return MergeFrom((ServerDeleteHero) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerDeleteHero other) {
        if (other == global::D3.GameMessage.ServerDeleteHero.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.HasHeroId) {
          MergeHeroId(other.HeroId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverDeleteHeroFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverDeleteHeroFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasHeroId) {
                subBuilder.MergeFrom(HeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public bool HasHeroId {
       get { return result.hasHeroId; }
      }
      public global::D3.OnlineService.EntityId HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroId &&
            result.heroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.heroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.heroId_).MergeFrom(value).BuildPartial();
        } else {
          result.heroId_ = value;
        }
        result.hasHeroId = true;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = null;
        return this;
      }
    }
    static ServerDeleteHero() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerUndeleteHero : pb::GeneratedMessage<ServerUndeleteHero, ServerUndeleteHero.Builder> {
    private ServerUndeleteHero() { }
    private static readonly ServerUndeleteHero defaultInstance = new ServerUndeleteHero().MakeReadOnly();
    private static readonly string[] _serverUndeleteHeroFieldNames = new string[] { "account_id", "replace_hero_id", "undelete_hero_id" };
    private static readonly uint[] _serverUndeleteHeroFieldTags = new uint[] { 10, 26, 18 };
    public static ServerUndeleteHero DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerUndeleteHero DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerUndeleteHero ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerUndeleteHero__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerUndeleteHero, ServerUndeleteHero.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerUndeleteHero__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int UndeleteHeroIdFieldNumber = 2;
    private bool hasUndeleteHeroId;
    private global::D3.OnlineService.EntityId undeleteHeroId_;
    public bool HasUndeleteHeroId {
      get { return hasUndeleteHeroId; }
    }
    public global::D3.OnlineService.EntityId UndeleteHeroId {
      get { return undeleteHeroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int ReplaceHeroIdFieldNumber = 3;
    private bool hasReplaceHeroId;
    private global::D3.OnlineService.EntityId replaceHeroId_;
    public bool HasReplaceHeroId {
      get { return hasReplaceHeroId; }
    }
    public global::D3.OnlineService.EntityId ReplaceHeroId {
      get { return replaceHeroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasUndeleteHeroId) return false;
        if (!AccountId.IsInitialized) return false;
        if (!UndeleteHeroId.IsInitialized) return false;
        if (HasReplaceHeroId) {
          if (!ReplaceHeroId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverUndeleteHeroFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (hasUndeleteHeroId) {
        output.WriteMessage(2, field_names[2], UndeleteHeroId);
      }
      if (hasReplaceHeroId) {
        output.WriteMessage(3, field_names[1], ReplaceHeroId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        if (hasUndeleteHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, UndeleteHeroId);
        }
        if (hasReplaceHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ReplaceHeroId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerUndeleteHero ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerUndeleteHero ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerUndeleteHero ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerUndeleteHero ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerUndeleteHero ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerUndeleteHero ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerUndeleteHero ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerUndeleteHero ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerUndeleteHero ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerUndeleteHero ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerUndeleteHero MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerUndeleteHero prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerUndeleteHero, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerUndeleteHero cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerUndeleteHero result;
      
      private ServerUndeleteHero PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerUndeleteHero original = result;
          result = new ServerUndeleteHero();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerUndeleteHero MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServerUndeleteHero.Descriptor; }
      }
      
      public override ServerUndeleteHero DefaultInstanceForType {
        get { return global::D3.GameMessage.ServerUndeleteHero.DefaultInstance; }
      }
      
      public override ServerUndeleteHero BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerUndeleteHero) {
          return MergeFrom((ServerUndeleteHero) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerUndeleteHero other) {
        if (other == global::D3.GameMessage.ServerUndeleteHero.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.HasUndeleteHeroId) {
          MergeUndeleteHeroId(other.UndeleteHeroId);
        }
        if (other.HasReplaceHeroId) {
          MergeReplaceHeroId(other.ReplaceHeroId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverUndeleteHeroFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverUndeleteHeroFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasUndeleteHeroId) {
                subBuilder.MergeFrom(UndeleteHeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UndeleteHeroId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasReplaceHeroId) {
                subBuilder.MergeFrom(ReplaceHeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ReplaceHeroId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public bool HasUndeleteHeroId {
       get { return result.hasUndeleteHeroId; }
      }
      public global::D3.OnlineService.EntityId UndeleteHeroId {
        get { return result.UndeleteHeroId; }
        set { SetUndeleteHeroId(value); }
      }
      public Builder SetUndeleteHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUndeleteHeroId = true;
        result.undeleteHeroId_ = value;
        return this;
      }
      public Builder SetUndeleteHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUndeleteHeroId = true;
        result.undeleteHeroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUndeleteHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUndeleteHeroId &&
            result.undeleteHeroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.undeleteHeroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.undeleteHeroId_).MergeFrom(value).BuildPartial();
        } else {
          result.undeleteHeroId_ = value;
        }
        result.hasUndeleteHeroId = true;
        return this;
      }
      public Builder ClearUndeleteHeroId() {
        PrepareBuilder();
        result.hasUndeleteHeroId = false;
        result.undeleteHeroId_ = null;
        return this;
      }
      
      public bool HasReplaceHeroId {
       get { return result.hasReplaceHeroId; }
      }
      public global::D3.OnlineService.EntityId ReplaceHeroId {
        get { return result.ReplaceHeroId; }
        set { SetReplaceHeroId(value); }
      }
      public Builder SetReplaceHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReplaceHeroId = true;
        result.replaceHeroId_ = value;
        return this;
      }
      public Builder SetReplaceHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReplaceHeroId = true;
        result.replaceHeroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReplaceHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReplaceHeroId &&
            result.replaceHeroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.replaceHeroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.replaceHeroId_).MergeFrom(value).BuildPartial();
        } else {
          result.replaceHeroId_ = value;
        }
        result.hasReplaceHeroId = true;
        return this;
      }
      public Builder ClearReplaceHeroId() {
        PrepareBuilder();
        result.hasReplaceHeroId = false;
        result.replaceHeroId_ = null;
        return this;
      }
    }
    static ServerUndeleteHero() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerForceRenameHero : pb::GeneratedMessage<ServerForceRenameHero, ServerForceRenameHero.Builder> {
    private ServerForceRenameHero() { }
    private static readonly ServerForceRenameHero defaultInstance = new ServerForceRenameHero().MakeReadOnly();
    private static readonly string[] _serverForceRenameHeroFieldNames = new string[] { "account_id", "hero_id" };
    private static readonly uint[] _serverForceRenameHeroFieldTags = new uint[] { 10, 18 };
    public static ServerForceRenameHero DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerForceRenameHero DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerForceRenameHero ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerForceRenameHero__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerForceRenameHero, ServerForceRenameHero.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerForceRenameHero__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int HeroIdFieldNumber = 2;
    private bool hasHeroId;
    private global::D3.OnlineService.EntityId heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public global::D3.OnlineService.EntityId HeroId {
      get { return heroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasHeroId) return false;
        if (!AccountId.IsInitialized) return false;
        if (!HeroId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverForceRenameHeroFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (hasHeroId) {
        output.WriteMessage(2, field_names[1], HeroId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, HeroId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerForceRenameHero ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerForceRenameHero ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerForceRenameHero ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerForceRenameHero ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerForceRenameHero ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerForceRenameHero ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerForceRenameHero ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerForceRenameHero ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerForceRenameHero ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerForceRenameHero ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerForceRenameHero MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerForceRenameHero prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerForceRenameHero, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerForceRenameHero cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerForceRenameHero result;
      
      private ServerForceRenameHero PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerForceRenameHero original = result;
          result = new ServerForceRenameHero();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerForceRenameHero MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServerForceRenameHero.Descriptor; }
      }
      
      public override ServerForceRenameHero DefaultInstanceForType {
        get { return global::D3.GameMessage.ServerForceRenameHero.DefaultInstance; }
      }
      
      public override ServerForceRenameHero BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerForceRenameHero) {
          return MergeFrom((ServerForceRenameHero) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerForceRenameHero other) {
        if (other == global::D3.GameMessage.ServerForceRenameHero.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.HasHeroId) {
          MergeHeroId(other.HeroId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverForceRenameHeroFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverForceRenameHeroFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasHeroId) {
                subBuilder.MergeFrom(HeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public bool HasHeroId {
       get { return result.hasHeroId; }
      }
      public global::D3.OnlineService.EntityId HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroId &&
            result.heroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.heroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.heroId_).MergeFrom(value).BuildPartial();
        } else {
          result.heroId_ = value;
        }
        result.hasHeroId = true;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = null;
        return this;
      }
    }
    static ServerForceRenameHero() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerFetchHeros : pb::GeneratedMessage<ServerFetchHeros, ServerFetchHeros.Builder> {
    private ServerFetchHeros() { }
    private static readonly ServerFetchHeros defaultInstance = new ServerFetchHeros().MakeReadOnly();
    private static readonly string[] _serverFetchHerosFieldNames = new string[] { "account_id" };
    private static readonly uint[] _serverFetchHerosFieldTags = new uint[] { 10 };
    public static ServerFetchHeros DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerFetchHeros DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerFetchHeros ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerFetchHeros__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerFetchHeros, ServerFetchHeros.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerFetchHeros__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverFetchHerosFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerFetchHeros ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerFetchHeros ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerFetchHeros ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerFetchHeros ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerFetchHeros ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerFetchHeros ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerFetchHeros ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerFetchHeros ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerFetchHeros ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerFetchHeros ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerFetchHeros MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerFetchHeros prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerFetchHeros, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerFetchHeros cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerFetchHeros result;
      
      private ServerFetchHeros PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerFetchHeros original = result;
          result = new ServerFetchHeros();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerFetchHeros MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServerFetchHeros.Descriptor; }
      }
      
      public override ServerFetchHeros DefaultInstanceForType {
        get { return global::D3.GameMessage.ServerFetchHeros.DefaultInstance; }
      }
      
      public override ServerFetchHeros BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerFetchHeros) {
          return MergeFrom((ServerFetchHeros) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerFetchHeros other) {
        if (other == global::D3.GameMessage.ServerFetchHeros.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverFetchHerosFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverFetchHerosFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
    }
    static ServerFetchHeros() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerFetchInventory : pb::GeneratedMessage<ServerFetchInventory, ServerFetchInventory.Builder> {
    private ServerFetchInventory() { }
    private static readonly ServerFetchInventory defaultInstance = new ServerFetchInventory().MakeReadOnly();
    private static readonly string[] _serverFetchInventoryFieldNames = new string[] { "account_id", "hero_id" };
    private static readonly uint[] _serverFetchInventoryFieldTags = new uint[] { 10, 18 };
    public static ServerFetchInventory DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerFetchInventory DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerFetchInventory ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerFetchInventory__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerFetchInventory, ServerFetchInventory.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerFetchInventory__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int HeroIdFieldNumber = 2;
    private bool hasHeroId;
    private global::D3.OnlineService.EntityId heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public global::D3.OnlineService.EntityId HeroId {
      get { return heroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasHeroId) return false;
        if (!AccountId.IsInitialized) return false;
        if (!HeroId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverFetchInventoryFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (hasHeroId) {
        output.WriteMessage(2, field_names[1], HeroId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, HeroId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerFetchInventory ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerFetchInventory ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerFetchInventory ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerFetchInventory ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerFetchInventory ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerFetchInventory ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerFetchInventory ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerFetchInventory ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerFetchInventory ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerFetchInventory ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerFetchInventory MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerFetchInventory prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerFetchInventory, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerFetchInventory cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerFetchInventory result;
      
      private ServerFetchInventory PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerFetchInventory original = result;
          result = new ServerFetchInventory();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerFetchInventory MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServerFetchInventory.Descriptor; }
      }
      
      public override ServerFetchInventory DefaultInstanceForType {
        get { return global::D3.GameMessage.ServerFetchInventory.DefaultInstance; }
      }
      
      public override ServerFetchInventory BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerFetchInventory) {
          return MergeFrom((ServerFetchInventory) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerFetchInventory other) {
        if (other == global::D3.GameMessage.ServerFetchInventory.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.HasHeroId) {
          MergeHeroId(other.HeroId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverFetchInventoryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverFetchInventoryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasHeroId) {
                subBuilder.MergeFrom(HeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public bool HasHeroId {
       get { return result.hasHeroId; }
      }
      public global::D3.OnlineService.EntityId HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroId &&
            result.heroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.heroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.heroId_).MergeFrom(value).BuildPartial();
        } else {
          result.heroId_ = value;
        }
        result.hasHeroId = true;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = null;
        return this;
      }
    }
    static ServerFetchInventory() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerSnapshot : pb::GeneratedMessage<ServerSnapshot, ServerSnapshot.Builder> {
    private ServerSnapshot() { }
    private static readonly ServerSnapshot defaultInstance = new ServerSnapshot().MakeReadOnly();
    private static readonly string[] _serverSnapshotFieldNames = new string[] { "account_id" };
    private static readonly uint[] _serverSnapshotFieldTags = new uint[] { 10 };
    public static ServerSnapshot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerSnapshot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerSnapshot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerSnapshot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerSnapshot, ServerSnapshot.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerSnapshot__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverSnapshotFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerSnapshot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerSnapshot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerSnapshot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerSnapshot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerSnapshot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerSnapshot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerSnapshot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerSnapshot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerSnapshot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerSnapshot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerSnapshot MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerSnapshot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerSnapshot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerSnapshot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerSnapshot result;
      
      private ServerSnapshot PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerSnapshot original = result;
          result = new ServerSnapshot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerSnapshot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServerSnapshot.Descriptor; }
      }
      
      public override ServerSnapshot DefaultInstanceForType {
        get { return global::D3.GameMessage.ServerSnapshot.DefaultInstance; }
      }
      
      public override ServerSnapshot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerSnapshot) {
          return MergeFrom((ServerSnapshot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerSnapshot other) {
        if (other == global::D3.GameMessage.ServerSnapshot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverSnapshotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverSnapshotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
    }
    static ServerSnapshot() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerSnapshotResponse : pb::GeneratedMessage<ServerSnapshotResponse, ServerSnapshotResponse.Builder> {
    private ServerSnapshotResponse() { }
    private static readonly ServerSnapshotResponse defaultInstance = new ServerSnapshotResponse().MakeReadOnly();
    private static readonly string[] _serverSnapshotResponseFieldNames = new string[] { "account_id", "version" };
    private static readonly uint[] _serverSnapshotResponseFieldTags = new uint[] { 10, 16 };
    public static ServerSnapshotResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerSnapshotResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerSnapshotResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerSnapshotResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerSnapshotResponse, ServerSnapshotResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerSnapshotResponse__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int VersionFieldNumber = 2;
    private bool hasVersion;
    private ulong version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public ulong Version {
      get { return version_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasVersion) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverSnapshotResponseFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (hasVersion) {
        output.WriteUInt64(2, field_names[1], Version);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, Version);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerSnapshotResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerSnapshotResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerSnapshotResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerSnapshotResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerSnapshotResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerSnapshotResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerSnapshotResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerSnapshotResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerSnapshotResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerSnapshotResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerSnapshotResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerSnapshotResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerSnapshotResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerSnapshotResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerSnapshotResponse result;
      
      private ServerSnapshotResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerSnapshotResponse original = result;
          result = new ServerSnapshotResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerSnapshotResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServerSnapshotResponse.Descriptor; }
      }
      
      public override ServerSnapshotResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.ServerSnapshotResponse.DefaultInstance; }
      }
      
      public override ServerSnapshotResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerSnapshotResponse) {
          return MergeFrom((ServerSnapshotResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerSnapshotResponse other) {
        if (other == global::D3.GameMessage.ServerSnapshotResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverSnapshotResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverSnapshotResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasVersion = input.ReadUInt64(ref result.version_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public ulong Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(ulong value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0UL;
        return this;
      }
    }
    static ServerSnapshotResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerFetchSnapshot : pb::GeneratedMessage<ServerFetchSnapshot, ServerFetchSnapshot.Builder> {
    private ServerFetchSnapshot() { }
    private static readonly ServerFetchSnapshot defaultInstance = new ServerFetchSnapshot().MakeReadOnly();
    private static readonly string[] _serverFetchSnapshotFieldNames = new string[] { "account_id", "version" };
    private static readonly uint[] _serverFetchSnapshotFieldTags = new uint[] { 10, 16 };
    public static ServerFetchSnapshot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerFetchSnapshot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerFetchSnapshot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerFetchSnapshot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerFetchSnapshot, ServerFetchSnapshot.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerFetchSnapshot__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int VersionFieldNumber = 2;
    private bool hasVersion;
    private ulong version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public ulong Version {
      get { return version_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasVersion) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverFetchSnapshotFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (hasVersion) {
        output.WriteUInt64(2, field_names[1], Version);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, Version);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerFetchSnapshot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerFetchSnapshot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerFetchSnapshot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerFetchSnapshot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerFetchSnapshot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerFetchSnapshot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerFetchSnapshot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerFetchSnapshot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerFetchSnapshot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerFetchSnapshot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerFetchSnapshot MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerFetchSnapshot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerFetchSnapshot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerFetchSnapshot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerFetchSnapshot result;
      
      private ServerFetchSnapshot PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerFetchSnapshot original = result;
          result = new ServerFetchSnapshot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerFetchSnapshot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServerFetchSnapshot.Descriptor; }
      }
      
      public override ServerFetchSnapshot DefaultInstanceForType {
        get { return global::D3.GameMessage.ServerFetchSnapshot.DefaultInstance; }
      }
      
      public override ServerFetchSnapshot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerFetchSnapshot) {
          return MergeFrom((ServerFetchSnapshot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerFetchSnapshot other) {
        if (other == global::D3.GameMessage.ServerFetchSnapshot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverFetchSnapshotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverFetchSnapshotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasVersion = input.ReadUInt64(ref result.version_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public ulong Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(ulong value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0UL;
        return this;
      }
    }
    static ServerFetchSnapshot() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerRevokeItem : pb::GeneratedMessage<ServerRevokeItem, ServerRevokeItem.Builder> {
    private ServerRevokeItem() { }
    private static readonly ServerRevokeItem defaultInstance = new ServerRevokeItem().MakeReadOnly();
    private static readonly string[] _serverRevokeItemFieldNames = new string[] { "account_id", "hero_id", "item_id" };
    private static readonly uint[] _serverRevokeItemFieldTags = new uint[] { 10, 18, 26 };
    public static ServerRevokeItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerRevokeItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerRevokeItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerRevokeItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerRevokeItem, ServerRevokeItem.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerRevokeItem__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int HeroIdFieldNumber = 2;
    private bool hasHeroId;
    private global::D3.OnlineService.EntityId heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public global::D3.OnlineService.EntityId HeroId {
      get { return heroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int ItemIdFieldNumber = 3;
    private bool hasItemId;
    private global::D3.OnlineService.ItemId itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public global::D3.OnlineService.ItemId ItemId {
      get { return itemId_ ?? global::D3.OnlineService.ItemId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasHeroId) return false;
        if (!hasItemId) return false;
        if (!AccountId.IsInitialized) return false;
        if (!HeroId.IsInitialized) return false;
        if (!ItemId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverRevokeItemFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (hasHeroId) {
        output.WriteMessage(2, field_names[1], HeroId);
      }
      if (hasItemId) {
        output.WriteMessage(3, field_names[2], ItemId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, HeroId);
        }
        if (hasItemId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ItemId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerRevokeItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerRevokeItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerRevokeItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerRevokeItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerRevokeItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerRevokeItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerRevokeItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerRevokeItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerRevokeItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerRevokeItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerRevokeItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerRevokeItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerRevokeItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerRevokeItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerRevokeItem result;
      
      private ServerRevokeItem PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerRevokeItem original = result;
          result = new ServerRevokeItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerRevokeItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServerRevokeItem.Descriptor; }
      }
      
      public override ServerRevokeItem DefaultInstanceForType {
        get { return global::D3.GameMessage.ServerRevokeItem.DefaultInstance; }
      }
      
      public override ServerRevokeItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerRevokeItem) {
          return MergeFrom((ServerRevokeItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerRevokeItem other) {
        if (other == global::D3.GameMessage.ServerRevokeItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.HasHeroId) {
          MergeHeroId(other.HeroId);
        }
        if (other.HasItemId) {
          MergeItemId(other.ItemId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverRevokeItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverRevokeItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasHeroId) {
                subBuilder.MergeFrom(HeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.OnlineService.ItemId.Builder subBuilder = global::D3.OnlineService.ItemId.CreateBuilder();
              if (result.hasItemId) {
                subBuilder.MergeFrom(ItemId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ItemId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public bool HasHeroId {
       get { return result.hasHeroId; }
      }
      public global::D3.OnlineService.EntityId HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroId &&
            result.heroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.heroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.heroId_).MergeFrom(value).BuildPartial();
        } else {
          result.heroId_ = value;
        }
        result.hasHeroId = true;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = null;
        return this;
      }
      
      public bool HasItemId {
       get { return result.hasItemId; }
      }
      public global::D3.OnlineService.ItemId ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder SetItemId(global::D3.OnlineService.ItemId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItemId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItemId &&
            result.itemId_ != global::D3.OnlineService.ItemId.DefaultInstance) {
            result.itemId_ = global::D3.OnlineService.ItemId.CreateBuilder(result.itemId_).MergeFrom(value).BuildPartial();
        } else {
          result.itemId_ = value;
        }
        result.hasItemId = true;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = null;
        return this;
      }
    }
    static ServerRevokeItem() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerGuildFilterDef : pb::GeneratedMessage<ServerGuildFilterDef, ServerGuildFilterDef.Builder> {
    private ServerGuildFilterDef() { }
    private static readonly ServerGuildFilterDef defaultInstance = new ServerGuildFilterDef().MakeReadOnly();
    private static readonly string[] _serverGuildFilterDefFieldNames = new string[] { "filter_bits", "guild_id" };
    private static readonly uint[] _serverGuildFilterDefFieldTags = new uint[] { 16, 8 };
    public static ServerGuildFilterDef DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerGuildFilterDef DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerGuildFilterDef ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerGuildFilterDef__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerGuildFilterDef, ServerGuildFilterDef.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerGuildFilterDef__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int FilterBitsFieldNumber = 2;
    private bool hasFilterBits;
    private uint filterBits_;
    public bool HasFilterBits {
      get { return hasFilterBits; }
    }
    public uint FilterBits {
      get { return filterBits_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasFilterBits) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverGuildFilterDefFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[1], GuildId);
      }
      if (hasFilterBits) {
        output.WriteUInt32(2, field_names[0], FilterBits);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasFilterBits) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, FilterBits);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerGuildFilterDef ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerGuildFilterDef ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerGuildFilterDef ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerGuildFilterDef ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerGuildFilterDef ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerGuildFilterDef ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerGuildFilterDef ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerGuildFilterDef ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerGuildFilterDef ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerGuildFilterDef ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerGuildFilterDef MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerGuildFilterDef prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerGuildFilterDef, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerGuildFilterDef cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerGuildFilterDef result;
      
      private ServerGuildFilterDef PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerGuildFilterDef original = result;
          result = new ServerGuildFilterDef();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerGuildFilterDef MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServerGuildFilterDef.Descriptor; }
      }
      
      public override ServerGuildFilterDef DefaultInstanceForType {
        get { return global::D3.GameMessage.ServerGuildFilterDef.DefaultInstance; }
      }
      
      public override ServerGuildFilterDef BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerGuildFilterDef) {
          return MergeFrom((ServerGuildFilterDef) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerGuildFilterDef other) {
        if (other == global::D3.GameMessage.ServerGuildFilterDef.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasFilterBits) {
          FilterBits = other.FilterBits;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverGuildFilterDefFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverGuildFilterDefFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasFilterBits = input.ReadUInt32(ref result.filterBits_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasFilterBits {
        get { return result.hasFilterBits; }
      }
      public uint FilterBits {
        get { return result.FilterBits; }
        set { SetFilterBits(value); }
      }
      public Builder SetFilterBits(uint value) {
        PrepareBuilder();
        result.hasFilterBits = true;
        result.filterBits_ = value;
        return this;
      }
      public Builder ClearFilterBits() {
        PrepareBuilder();
        result.hasFilterBits = false;
        result.filterBits_ = 0;
        return this;
      }
    }
    static ServerGuildFilterDef() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerGuildRename : pb::GeneratedMessage<ServerGuildRename, ServerGuildRename.Builder> {
    private ServerGuildRename() { }
    private static readonly ServerGuildRename defaultInstance = new ServerGuildRename().MakeReadOnly();
    private static readonly string[] _serverGuildRenameFieldNames = new string[] { "guild_id", "new_name", "new_tag" };
    private static readonly uint[] _serverGuildRenameFieldTags = new uint[] { 8, 18, 26 };
    public static ServerGuildRename DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerGuildRename DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerGuildRename ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerGuildRename__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerGuildRename, ServerGuildRename.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerGuildRename__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int NewNameFieldNumber = 2;
    private bool hasNewName;
    private string newName_ = "";
    public bool HasNewName {
      get { return hasNewName; }
    }
    public string NewName {
      get { return newName_; }
    }
    
    public const int NewTagFieldNumber = 3;
    private bool hasNewTag;
    private string newTag_ = "";
    public bool HasNewTag {
      get { return hasNewTag; }
    }
    public string NewTag {
      get { return newTag_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasNewName) return false;
        if (!hasNewTag) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverGuildRenameFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasNewName) {
        output.WriteString(2, field_names[1], NewName);
      }
      if (hasNewTag) {
        output.WriteString(3, field_names[2], NewTag);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasNewName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, NewName);
        }
        if (hasNewTag) {
          size += pb::CodedOutputStream.ComputeStringSize(3, NewTag);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerGuildRename ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerGuildRename ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerGuildRename ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerGuildRename ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerGuildRename ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerGuildRename ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerGuildRename ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerGuildRename ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerGuildRename ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerGuildRename ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerGuildRename MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerGuildRename prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerGuildRename, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerGuildRename cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerGuildRename result;
      
      private ServerGuildRename PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerGuildRename original = result;
          result = new ServerGuildRename();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerGuildRename MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServerGuildRename.Descriptor; }
      }
      
      public override ServerGuildRename DefaultInstanceForType {
        get { return global::D3.GameMessage.ServerGuildRename.DefaultInstance; }
      }
      
      public override ServerGuildRename BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerGuildRename) {
          return MergeFrom((ServerGuildRename) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerGuildRename other) {
        if (other == global::D3.GameMessage.ServerGuildRename.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasNewName) {
          NewName = other.NewName;
        }
        if (other.HasNewTag) {
          NewTag = other.NewTag;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverGuildRenameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverGuildRenameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 18: {
              result.hasNewName = input.ReadString(ref result.newName_);
              break;
            }
            case 26: {
              result.hasNewTag = input.ReadString(ref result.newTag_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasNewName {
        get { return result.hasNewName; }
      }
      public string NewName {
        get { return result.NewName; }
        set { SetNewName(value); }
      }
      public Builder SetNewName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewName = true;
        result.newName_ = value;
        return this;
      }
      public Builder ClearNewName() {
        PrepareBuilder();
        result.hasNewName = false;
        result.newName_ = "";
        return this;
      }
      
      public bool HasNewTag {
        get { return result.hasNewTag; }
      }
      public string NewTag {
        get { return result.NewTag; }
        set { SetNewTag(value); }
      }
      public Builder SetNewTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewTag = true;
        result.newTag_ = value;
        return this;
      }
      public Builder ClearNewTag() {
        PrepareBuilder();
        result.hasNewTag = false;
        result.newTag_ = "";
        return this;
      }
    }
    static ServerGuildRename() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerGuildDescriptionClear : pb::GeneratedMessage<ServerGuildDescriptionClear, ServerGuildDescriptionClear.Builder> {
    private ServerGuildDescriptionClear() { }
    private static readonly ServerGuildDescriptionClear defaultInstance = new ServerGuildDescriptionClear().MakeReadOnly();
    private static readonly string[] _serverGuildDescriptionClearFieldNames = new string[] { "guild_id" };
    private static readonly uint[] _serverGuildDescriptionClearFieldTags = new uint[] { 10 };
    public static ServerGuildDescriptionClear DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerGuildDescriptionClear DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerGuildDescriptionClear ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerGuildDescriptionClear__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerGuildDescriptionClear, ServerGuildDescriptionClear.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerGuildDescriptionClear__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private global::D3.OnlineService.EntityId guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public global::D3.OnlineService.EntityId GuildId {
      get { return guildId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!GuildId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverGuildDescriptionClearFieldNames;
      if (hasGuildId) {
        output.WriteMessage(1, field_names[0], GuildId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, GuildId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerGuildDescriptionClear ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerGuildDescriptionClear ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerGuildDescriptionClear ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerGuildDescriptionClear ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerGuildDescriptionClear ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerGuildDescriptionClear ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerGuildDescriptionClear ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerGuildDescriptionClear ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerGuildDescriptionClear ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerGuildDescriptionClear ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerGuildDescriptionClear MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerGuildDescriptionClear prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerGuildDescriptionClear, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerGuildDescriptionClear cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerGuildDescriptionClear result;
      
      private ServerGuildDescriptionClear PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerGuildDescriptionClear original = result;
          result = new ServerGuildDescriptionClear();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerGuildDescriptionClear MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServerGuildDescriptionClear.Descriptor; }
      }
      
      public override ServerGuildDescriptionClear DefaultInstanceForType {
        get { return global::D3.GameMessage.ServerGuildDescriptionClear.DefaultInstance; }
      }
      
      public override ServerGuildDescriptionClear BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerGuildDescriptionClear) {
          return MergeFrom((ServerGuildDescriptionClear) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerGuildDescriptionClear other) {
        if (other == global::D3.GameMessage.ServerGuildDescriptionClear.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          MergeGuildId(other.GuildId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverGuildDescriptionClearFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverGuildDescriptionClearFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasGuildId) {
                subBuilder.MergeFrom(GuildId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
       get { return result.hasGuildId; }
      }
      public global::D3.OnlineService.EntityId GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder SetGuildId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildId &&
            result.guildId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.guildId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.guildId_).MergeFrom(value).BuildPartial();
        } else {
          result.guildId_ = value;
        }
        result.hasGuildId = true;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = null;
        return this;
      }
    }
    static ServerGuildDescriptionClear() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerGuildPlayerGroups : pb::GeneratedMessage<ServerGuildPlayerGroups, ServerGuildPlayerGroups.Builder> {
    private ServerGuildPlayerGroups() { }
    private static readonly ServerGuildPlayerGroups defaultInstance = new ServerGuildPlayerGroups().MakeReadOnly();
    private static readonly string[] _serverGuildPlayerGroupsFieldNames = new string[] { "account_id" };
    private static readonly uint[] _serverGuildPlayerGroupsFieldTags = new uint[] { 18 };
    public static ServerGuildPlayerGroups DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerGuildPlayerGroups DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerGuildPlayerGroups ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerGuildPlayerGroups__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerGuildPlayerGroups, ServerGuildPlayerGroups.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerGuildPlayerGroups__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 2;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverGuildPlayerGroupsFieldNames;
      if (hasAccountId) {
        output.WriteMessage(2, field_names[0], AccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, AccountId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerGuildPlayerGroups ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerGuildPlayerGroups ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerGuildPlayerGroups ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerGuildPlayerGroups ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerGuildPlayerGroups ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerGuildPlayerGroups ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerGuildPlayerGroups ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerGuildPlayerGroups ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerGuildPlayerGroups ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerGuildPlayerGroups ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerGuildPlayerGroups MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerGuildPlayerGroups prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerGuildPlayerGroups, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerGuildPlayerGroups cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerGuildPlayerGroups result;
      
      private ServerGuildPlayerGroups PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerGuildPlayerGroups original = result;
          result = new ServerGuildPlayerGroups();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerGuildPlayerGroups MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServerGuildPlayerGroups.Descriptor; }
      }
      
      public override ServerGuildPlayerGroups DefaultInstanceForType {
        get { return global::D3.GameMessage.ServerGuildPlayerGroups.DefaultInstance; }
      }
      
      public override ServerGuildPlayerGroups BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerGuildPlayerGroups) {
          return MergeFrom((ServerGuildPlayerGroups) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerGuildPlayerGroups other) {
        if (other == global::D3.GameMessage.ServerGuildPlayerGroups.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverGuildPlayerGroupsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverGuildPlayerGroupsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
    }
    static ServerGuildPlayerGroups() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerForceColdStorage : pb::GeneratedMessage<ServerForceColdStorage, ServerForceColdStorage.Builder> {
    private ServerForceColdStorage() { }
    private static readonly ServerForceColdStorage defaultInstance = new ServerForceColdStorage().MakeReadOnly();
    private static readonly string[] _serverForceColdStorageFieldNames = new string[] { "account_id" };
    private static readonly uint[] _serverForceColdStorageFieldTags = new uint[] { 10 };
    public static ServerForceColdStorage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerForceColdStorage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerForceColdStorage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerForceColdStorage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerForceColdStorage, ServerForceColdStorage.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerForceColdStorage__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverForceColdStorageFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerForceColdStorage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerForceColdStorage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerForceColdStorage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerForceColdStorage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerForceColdStorage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerForceColdStorage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerForceColdStorage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerForceColdStorage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerForceColdStorage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerForceColdStorage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerForceColdStorage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerForceColdStorage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerForceColdStorage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerForceColdStorage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerForceColdStorage result;
      
      private ServerForceColdStorage PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerForceColdStorage original = result;
          result = new ServerForceColdStorage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerForceColdStorage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServerForceColdStorage.Descriptor; }
      }
      
      public override ServerForceColdStorage DefaultInstanceForType {
        get { return global::D3.GameMessage.ServerForceColdStorage.DefaultInstance; }
      }
      
      public override ServerForceColdStorage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerForceColdStorage) {
          return MergeFrom((ServerForceColdStorage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerForceColdStorage other) {
        if (other == global::D3.GameMessage.ServerForceColdStorage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverForceColdStorageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverForceColdStorageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
    }
    static ServerForceColdStorage() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerForceColdStorageResponse : pb::GeneratedMessage<ServerForceColdStorageResponse, ServerForceColdStorageResponse.Builder> {
    private ServerForceColdStorageResponse() { }
    private static readonly ServerForceColdStorageResponse defaultInstance = new ServerForceColdStorageResponse().MakeReadOnly();
    private static readonly string[] _serverForceColdStorageResponseFieldNames = new string[] { "account_id", "version" };
    private static readonly uint[] _serverForceColdStorageResponseFieldTags = new uint[] { 10, 16 };
    public static ServerForceColdStorageResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerForceColdStorageResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerForceColdStorageResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerForceColdStorageResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerForceColdStorageResponse, ServerForceColdStorageResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerForceColdStorageResponse__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int VersionFieldNumber = 2;
    private bool hasVersion;
    private ulong version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public ulong Version {
      get { return version_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasVersion) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverForceColdStorageResponseFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (hasVersion) {
        output.WriteUInt64(2, field_names[1], Version);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, Version);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerForceColdStorageResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerForceColdStorageResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerForceColdStorageResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerForceColdStorageResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerForceColdStorageResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerForceColdStorageResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerForceColdStorageResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerForceColdStorageResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerForceColdStorageResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerForceColdStorageResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerForceColdStorageResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerForceColdStorageResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerForceColdStorageResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerForceColdStorageResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerForceColdStorageResponse result;
      
      private ServerForceColdStorageResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerForceColdStorageResponse original = result;
          result = new ServerForceColdStorageResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerForceColdStorageResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServerForceColdStorageResponse.Descriptor; }
      }
      
      public override ServerForceColdStorageResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.ServerForceColdStorageResponse.DefaultInstance; }
      }
      
      public override ServerForceColdStorageResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerForceColdStorageResponse) {
          return MergeFrom((ServerForceColdStorageResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerForceColdStorageResponse other) {
        if (other == global::D3.GameMessage.ServerForceColdStorageResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverForceColdStorageResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverForceColdStorageResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasVersion = input.ReadUInt64(ref result.version_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public ulong Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(ulong value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0UL;
        return this;
      }
    }
    static ServerForceColdStorageResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServerFetchAccountData : pb::GeneratedMessage<ServerFetchAccountData, ServerFetchAccountData.Builder> {
    private ServerFetchAccountData() { }
    private static readonly ServerFetchAccountData defaultInstance = new ServerFetchAccountData().MakeReadOnly();
    private static readonly string[] _serverFetchAccountDataFieldNames = new string[] { "account_id" };
    private static readonly uint[] _serverFetchAccountDataFieldTags = new uint[] { 10 };
    public static ServerFetchAccountData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerFetchAccountData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerFetchAccountData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerFetchAccountData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerFetchAccountData, ServerFetchAccountData.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServerFetchAccountData__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.EntityId accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.EntityId AccountId {
      get { return accountId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverFetchAccountDataFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerFetchAccountData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerFetchAccountData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerFetchAccountData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerFetchAccountData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerFetchAccountData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerFetchAccountData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerFetchAccountData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerFetchAccountData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerFetchAccountData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerFetchAccountData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerFetchAccountData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerFetchAccountData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerFetchAccountData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerFetchAccountData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerFetchAccountData result;
      
      private ServerFetchAccountData PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerFetchAccountData original = result;
          result = new ServerFetchAccountData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerFetchAccountData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServerFetchAccountData.Descriptor; }
      }
      
      public override ServerFetchAccountData DefaultInstanceForType {
        get { return global::D3.GameMessage.ServerFetchAccountData.DefaultInstance; }
      }
      
      public override ServerFetchAccountData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerFetchAccountData) {
          return MergeFrom((ServerFetchAccountData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerFetchAccountData other) {
        if (other == global::D3.GameMessage.ServerFetchAccountData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverFetchAccountDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverFetchAccountDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
    }
    static ServerFetchAccountData() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class InitialLoginDataRequest : pb::GeneratedMessage<InitialLoginDataRequest, InitialLoginDataRequest.Builder> {
    private InitialLoginDataRequest() { }
    private static readonly InitialLoginDataRequest defaultInstance = new InitialLoginDataRequest().MakeReadOnly();
    private static readonly string[] _initialLoginDataRequestFieldNames = new string[] { "country_id_fourcc", "patch_version" };
    private static readonly uint[] _initialLoginDataRequestFieldTags = new uint[] { 8, 18 };
    public static InitialLoginDataRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InitialLoginDataRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override InitialLoginDataRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_InitialLoginDataRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InitialLoginDataRequest, InitialLoginDataRequest.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_InitialLoginDataRequest__FieldAccessorTable; }
    }
    
    public const int CountryIdFourccFieldNumber = 1;
    private bool hasCountryIdFourcc;
    private uint countryIdFourcc_;
    public bool HasCountryIdFourcc {
      get { return hasCountryIdFourcc; }
    }
    public uint CountryIdFourcc {
      get { return countryIdFourcc_; }
    }
    
    public const int PatchVersionFieldNumber = 2;
    private bool hasPatchVersion;
    private string patchVersion_ = "";
    public bool HasPatchVersion {
      get { return hasPatchVersion; }
    }
    public string PatchVersion {
      get { return patchVersion_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCountryIdFourcc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _initialLoginDataRequestFieldNames;
      if (hasCountryIdFourcc) {
        output.WriteUInt32(1, field_names[0], CountryIdFourcc);
      }
      if (hasPatchVersion) {
        output.WriteString(2, field_names[1], PatchVersion);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCountryIdFourcc) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, CountryIdFourcc);
        }
        if (hasPatchVersion) {
          size += pb::CodedOutputStream.ComputeStringSize(2, PatchVersion);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InitialLoginDataRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitialLoginDataRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitialLoginDataRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitialLoginDataRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitialLoginDataRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitialLoginDataRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InitialLoginDataRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InitialLoginDataRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InitialLoginDataRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitialLoginDataRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private InitialLoginDataRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InitialLoginDataRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<InitialLoginDataRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(InitialLoginDataRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private InitialLoginDataRequest result;
      
      private InitialLoginDataRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          InitialLoginDataRequest original = result;
          result = new InitialLoginDataRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override InitialLoginDataRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.InitialLoginDataRequest.Descriptor; }
      }
      
      public override InitialLoginDataRequest DefaultInstanceForType {
        get { return global::D3.GameMessage.InitialLoginDataRequest.DefaultInstance; }
      }
      
      public override InitialLoginDataRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InitialLoginDataRequest) {
          return MergeFrom((InitialLoginDataRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InitialLoginDataRequest other) {
        if (other == global::D3.GameMessage.InitialLoginDataRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCountryIdFourcc) {
          CountryIdFourcc = other.CountryIdFourcc;
        }
        if (other.HasPatchVersion) {
          PatchVersion = other.PatchVersion;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_initialLoginDataRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _initialLoginDataRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCountryIdFourcc = input.ReadUInt32(ref result.countryIdFourcc_);
              break;
            }
            case 18: {
              result.hasPatchVersion = input.ReadString(ref result.patchVersion_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCountryIdFourcc {
        get { return result.hasCountryIdFourcc; }
      }
      public uint CountryIdFourcc {
        get { return result.CountryIdFourcc; }
        set { SetCountryIdFourcc(value); }
      }
      public Builder SetCountryIdFourcc(uint value) {
        PrepareBuilder();
        result.hasCountryIdFourcc = true;
        result.countryIdFourcc_ = value;
        return this;
      }
      public Builder ClearCountryIdFourcc() {
        PrepareBuilder();
        result.hasCountryIdFourcc = false;
        result.countryIdFourcc_ = 0;
        return this;
      }
      
      public bool HasPatchVersion {
        get { return result.hasPatchVersion; }
      }
      public string PatchVersion {
        get { return result.PatchVersion; }
        set { SetPatchVersion(value); }
      }
      public Builder SetPatchVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPatchVersion = true;
        result.patchVersion_ = value;
        return this;
      }
      public Builder ClearPatchVersion() {
        PrepareBuilder();
        result.hasPatchVersion = false;
        result.patchVersion_ = "";
        return this;
      }
    }
    static InitialLoginDataRequest() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class InitialLoginDataQueuedResponse : pb::GeneratedMessage<InitialLoginDataQueuedResponse, InitialLoginDataQueuedResponse.Builder> {
    private InitialLoginDataQueuedResponse() { }
    private static readonly InitialLoginDataQueuedResponse defaultInstance = new InitialLoginDataQueuedResponse().MakeReadOnly();
    private static readonly string[] _initialLoginDataQueuedResponseFieldNames = new string[] { "service_id", "timeout_tick_interval" };
    private static readonly uint[] _initialLoginDataQueuedResponseFieldTags = new uint[] { 8, 16 };
    public static InitialLoginDataQueuedResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InitialLoginDataQueuedResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override InitialLoginDataQueuedResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_InitialLoginDataQueuedResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InitialLoginDataQueuedResponse, InitialLoginDataQueuedResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_InitialLoginDataQueuedResponse__FieldAccessorTable; }
    }
    
    public const int ServiceIdFieldNumber = 1;
    private bool hasServiceId;
    private uint serviceId_;
    public bool HasServiceId {
      get { return hasServiceId; }
    }
    public uint ServiceId {
      get { return serviceId_; }
    }
    
    public const int TimeoutTickIntervalFieldNumber = 2;
    private bool hasTimeoutTickInterval;
    private uint timeoutTickInterval_;
    public bool HasTimeoutTickInterval {
      get { return hasTimeoutTickInterval; }
    }
    public uint TimeoutTickInterval {
      get { return timeoutTickInterval_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasServiceId) return false;
        if (!hasTimeoutTickInterval) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _initialLoginDataQueuedResponseFieldNames;
      if (hasServiceId) {
        output.WriteUInt32(1, field_names[0], ServiceId);
      }
      if (hasTimeoutTickInterval) {
        output.WriteUInt32(2, field_names[1], TimeoutTickInterval);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasServiceId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ServiceId);
        }
        if (hasTimeoutTickInterval) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, TimeoutTickInterval);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InitialLoginDataQueuedResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitialLoginDataQueuedResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitialLoginDataQueuedResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitialLoginDataQueuedResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitialLoginDataQueuedResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitialLoginDataQueuedResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InitialLoginDataQueuedResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InitialLoginDataQueuedResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InitialLoginDataQueuedResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitialLoginDataQueuedResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private InitialLoginDataQueuedResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InitialLoginDataQueuedResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<InitialLoginDataQueuedResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(InitialLoginDataQueuedResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private InitialLoginDataQueuedResponse result;
      
      private InitialLoginDataQueuedResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          InitialLoginDataQueuedResponse original = result;
          result = new InitialLoginDataQueuedResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override InitialLoginDataQueuedResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.InitialLoginDataQueuedResponse.Descriptor; }
      }
      
      public override InitialLoginDataQueuedResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.InitialLoginDataQueuedResponse.DefaultInstance; }
      }
      
      public override InitialLoginDataQueuedResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InitialLoginDataQueuedResponse) {
          return MergeFrom((InitialLoginDataQueuedResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InitialLoginDataQueuedResponse other) {
        if (other == global::D3.GameMessage.InitialLoginDataQueuedResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServiceId) {
          ServiceId = other.ServiceId;
        }
        if (other.HasTimeoutTickInterval) {
          TimeoutTickInterval = other.TimeoutTickInterval;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_initialLoginDataQueuedResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _initialLoginDataQueuedResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasServiceId = input.ReadUInt32(ref result.serviceId_);
              break;
            }
            case 16: {
              result.hasTimeoutTickInterval = input.ReadUInt32(ref result.timeoutTickInterval_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServiceId {
        get { return result.hasServiceId; }
      }
      public uint ServiceId {
        get { return result.ServiceId; }
        set { SetServiceId(value); }
      }
      public Builder SetServiceId(uint value) {
        PrepareBuilder();
        result.hasServiceId = true;
        result.serviceId_ = value;
        return this;
      }
      public Builder ClearServiceId() {
        PrepareBuilder();
        result.hasServiceId = false;
        result.serviceId_ = 0;
        return this;
      }
      
      public bool HasTimeoutTickInterval {
        get { return result.hasTimeoutTickInterval; }
      }
      public uint TimeoutTickInterval {
        get { return result.TimeoutTickInterval; }
        set { SetTimeoutTickInterval(value); }
      }
      public Builder SetTimeoutTickInterval(uint value) {
        PrepareBuilder();
        result.hasTimeoutTickInterval = true;
        result.timeoutTickInterval_ = value;
        return this;
      }
      public Builder ClearTimeoutTickInterval() {
        PrepareBuilder();
        result.hasTimeoutTickInterval = false;
        result.timeoutTickInterval_ = 0;
        return this;
      }
    }
    static InitialLoginDataQueuedResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CancelLoginDataRequest : pb::GeneratedMessage<CancelLoginDataRequest, CancelLoginDataRequest.Builder> {
    private CancelLoginDataRequest() { }
    private static readonly CancelLoginDataRequest defaultInstance = new CancelLoginDataRequest().MakeReadOnly();
    private static readonly string[] _cancelLoginDataRequestFieldNames = new string[] {  };
    private static readonly uint[] _cancelLoginDataRequestFieldTags = new uint[] {  };
    public static CancelLoginDataRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CancelLoginDataRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CancelLoginDataRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CancelLoginDataRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CancelLoginDataRequest, CancelLoginDataRequest.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CancelLoginDataRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cancelLoginDataRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CancelLoginDataRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CancelLoginDataRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CancelLoginDataRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CancelLoginDataRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CancelLoginDataRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CancelLoginDataRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CancelLoginDataRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CancelLoginDataRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CancelLoginDataRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CancelLoginDataRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CancelLoginDataRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CancelLoginDataRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CancelLoginDataRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CancelLoginDataRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CancelLoginDataRequest result;
      
      private CancelLoginDataRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CancelLoginDataRequest original = result;
          result = new CancelLoginDataRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CancelLoginDataRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.CancelLoginDataRequest.Descriptor; }
      }
      
      public override CancelLoginDataRequest DefaultInstanceForType {
        get { return global::D3.GameMessage.CancelLoginDataRequest.DefaultInstance; }
      }
      
      public override CancelLoginDataRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CancelLoginDataRequest) {
          return MergeFrom((CancelLoginDataRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CancelLoginDataRequest other) {
        if (other == global::D3.GameMessage.CancelLoginDataRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cancelLoginDataRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cancelLoginDataRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static CancelLoginDataRequest() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RenameHero : pb::GeneratedMessage<RenameHero, RenameHero.Builder> {
    private RenameHero() { }
    private static readonly RenameHero defaultInstance = new RenameHero().MakeReadOnly();
    private static readonly string[] _renameHeroFieldNames = new string[] { "hero_id", "new_name" };
    private static readonly uint[] _renameHeroFieldTags = new uint[] { 8, 18 };
    public static RenameHero DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RenameHero DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RenameHero ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_RenameHero__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RenameHero, RenameHero.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_RenameHero__FieldAccessorTable; }
    }
    
    public const int HeroIdFieldNumber = 1;
    private bool hasHeroId;
    private ulong heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public ulong HeroId {
      get { return heroId_; }
    }
    
    public const int NewNameFieldNumber = 2;
    private bool hasNewName;
    private string newName_ = "";
    public bool HasNewName {
      get { return hasNewName; }
    }
    public string NewName {
      get { return newName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroId) return false;
        if (!hasNewName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _renameHeroFieldNames;
      if (hasHeroId) {
        output.WriteUInt64(1, field_names[0], HeroId);
      }
      if (hasNewName) {
        output.WriteString(2, field_names[1], NewName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, HeroId);
        }
        if (hasNewName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, NewName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RenameHero ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RenameHero ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RenameHero ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RenameHero ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RenameHero ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RenameHero ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RenameHero ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RenameHero ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RenameHero ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RenameHero ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RenameHero MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RenameHero prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RenameHero, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RenameHero cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RenameHero result;
      
      private RenameHero PrepareBuilder() {
        if (resultIsReadOnly) {
          RenameHero original = result;
          result = new RenameHero();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RenameHero MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.RenameHero.Descriptor; }
      }
      
      public override RenameHero DefaultInstanceForType {
        get { return global::D3.GameMessage.RenameHero.DefaultInstance; }
      }
      
      public override RenameHero BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RenameHero) {
          return MergeFrom((RenameHero) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RenameHero other) {
        if (other == global::D3.GameMessage.RenameHero.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        if (other.HasNewName) {
          NewName = other.NewName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_renameHeroFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _renameHeroFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHeroId = input.ReadUInt64(ref result.heroId_);
              break;
            }
            case 18: {
              result.hasNewName = input.ReadString(ref result.newName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public ulong HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(ulong value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0UL;
        return this;
      }
      
      public bool HasNewName {
        get { return result.hasNewName; }
      }
      public string NewName {
        get { return result.NewName; }
        set { SetNewName(value); }
      }
      public Builder SetNewName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewName = true;
        result.newName_ = value;
        return this;
      }
      public Builder ClearNewName() {
        PrepareBuilder();
        result.hasNewName = false;
        result.newName_ = "";
        return this;
      }
    }
    static RenameHero() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RebirthHeroRequest : pb::GeneratedMessage<RebirthHeroRequest, RebirthHeroRequest.Builder> {
    private RebirthHeroRequest() { }
    private static readonly RebirthHeroRequest defaultInstance = new RebirthHeroRequest().MakeReadOnly();
    private static readonly string[] _rebirthHeroRequestFieldNames = new string[] { "hero_id", "is_current_hero" };
    private static readonly uint[] _rebirthHeroRequestFieldTags = new uint[] { 8, 16 };
    public static RebirthHeroRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RebirthHeroRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RebirthHeroRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_RebirthHeroRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RebirthHeroRequest, RebirthHeroRequest.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_RebirthHeroRequest__FieldAccessorTable; }
    }
    
    public const int HeroIdFieldNumber = 1;
    private bool hasHeroId;
    private ulong heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public ulong HeroId {
      get { return heroId_; }
    }
    
    public const int IsCurrentHeroFieldNumber = 2;
    private bool hasIsCurrentHero;
    private bool isCurrentHero_;
    public bool HasIsCurrentHero {
      get { return hasIsCurrentHero; }
    }
    public bool IsCurrentHero {
      get { return isCurrentHero_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroId) return false;
        if (!hasIsCurrentHero) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rebirthHeroRequestFieldNames;
      if (hasHeroId) {
        output.WriteUInt64(1, field_names[0], HeroId);
      }
      if (hasIsCurrentHero) {
        output.WriteBool(2, field_names[1], IsCurrentHero);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, HeroId);
        }
        if (hasIsCurrentHero) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IsCurrentHero);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RebirthHeroRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RebirthHeroRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RebirthHeroRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RebirthHeroRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RebirthHeroRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RebirthHeroRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RebirthHeroRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RebirthHeroRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RebirthHeroRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RebirthHeroRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RebirthHeroRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RebirthHeroRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RebirthHeroRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RebirthHeroRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RebirthHeroRequest result;
      
      private RebirthHeroRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          RebirthHeroRequest original = result;
          result = new RebirthHeroRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RebirthHeroRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.RebirthHeroRequest.Descriptor; }
      }
      
      public override RebirthHeroRequest DefaultInstanceForType {
        get { return global::D3.GameMessage.RebirthHeroRequest.DefaultInstance; }
      }
      
      public override RebirthHeroRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RebirthHeroRequest) {
          return MergeFrom((RebirthHeroRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RebirthHeroRequest other) {
        if (other == global::D3.GameMessage.RebirthHeroRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        if (other.HasIsCurrentHero) {
          IsCurrentHero = other.IsCurrentHero;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rebirthHeroRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rebirthHeroRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHeroId = input.ReadUInt64(ref result.heroId_);
              break;
            }
            case 16: {
              result.hasIsCurrentHero = input.ReadBool(ref result.isCurrentHero_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public ulong HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(ulong value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0UL;
        return this;
      }
      
      public bool HasIsCurrentHero {
        get { return result.hasIsCurrentHero; }
      }
      public bool IsCurrentHero {
        get { return result.IsCurrentHero; }
        set { SetIsCurrentHero(value); }
      }
      public Builder SetIsCurrentHero(bool value) {
        PrepareBuilder();
        result.hasIsCurrentHero = true;
        result.isCurrentHero_ = value;
        return this;
      }
      public Builder ClearIsCurrentHero() {
        PrepareBuilder();
        result.hasIsCurrentHero = false;
        result.isCurrentHero_ = false;
        return this;
      }
    }
    static RebirthHeroRequest() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RebirthHeroResponse : pb::GeneratedMessage<RebirthHeroResponse, RebirthHeroResponse.Builder> {
    private RebirthHeroResponse() { }
    private static readonly RebirthHeroResponse defaultInstance = new RebirthHeroResponse().MakeReadOnly();
    private static readonly string[] _rebirthHeroResponseFieldNames = new string[] { "hero_digest" };
    private static readonly uint[] _rebirthHeroResponseFieldTags = new uint[] { 10 };
    public static RebirthHeroResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RebirthHeroResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RebirthHeroResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_RebirthHeroResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RebirthHeroResponse, RebirthHeroResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_RebirthHeroResponse__FieldAccessorTable; }
    }
    
    public const int HeroDigestFieldNumber = 1;
    private bool hasHeroDigest;
    private global::D3.Hero.Digest heroDigest_;
    public bool HasHeroDigest {
      get { return hasHeroDigest; }
    }
    public global::D3.Hero.Digest HeroDigest {
      get { return heroDigest_ ?? global::D3.Hero.Digest.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroDigest) return false;
        if (!HeroDigest.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rebirthHeroResponseFieldNames;
      if (hasHeroDigest) {
        output.WriteMessage(1, field_names[0], HeroDigest);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroDigest) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, HeroDigest);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RebirthHeroResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RebirthHeroResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RebirthHeroResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RebirthHeroResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RebirthHeroResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RebirthHeroResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RebirthHeroResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RebirthHeroResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RebirthHeroResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RebirthHeroResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RebirthHeroResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RebirthHeroResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RebirthHeroResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RebirthHeroResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RebirthHeroResponse result;
      
      private RebirthHeroResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          RebirthHeroResponse original = result;
          result = new RebirthHeroResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RebirthHeroResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.RebirthHeroResponse.Descriptor; }
      }
      
      public override RebirthHeroResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.RebirthHeroResponse.DefaultInstance; }
      }
      
      public override RebirthHeroResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RebirthHeroResponse) {
          return MergeFrom((RebirthHeroResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RebirthHeroResponse other) {
        if (other == global::D3.GameMessage.RebirthHeroResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroDigest) {
          MergeHeroDigest(other.HeroDigest);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rebirthHeroResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rebirthHeroResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.Hero.Digest.Builder subBuilder = global::D3.Hero.Digest.CreateBuilder();
              if (result.hasHeroDigest) {
                subBuilder.MergeFrom(HeroDigest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroDigest = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroDigest {
       get { return result.hasHeroDigest; }
      }
      public global::D3.Hero.Digest HeroDigest {
        get { return result.HeroDigest; }
        set { SetHeroDigest(value); }
      }
      public Builder SetHeroDigest(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroDigest = true;
        result.heroDigest_ = value;
        return this;
      }
      public Builder SetHeroDigest(global::D3.Hero.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroDigest = true;
        result.heroDigest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroDigest(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroDigest &&
            result.heroDigest_ != global::D3.Hero.Digest.DefaultInstance) {
            result.heroDigest_ = global::D3.Hero.Digest.CreateBuilder(result.heroDigest_).MergeFrom(value).BuildPartial();
        } else {
          result.heroDigest_ = value;
        }
        result.hasHeroDigest = true;
        return this;
      }
      public Builder ClearHeroDigest() {
        PrepareBuilder();
        result.hasHeroDigest = false;
        result.heroDigest_ = null;
        return this;
      }
    }
    static RebirthHeroResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SetGameAccountSettings : pb::GeneratedMessage<SetGameAccountSettings, SetGameAccountSettings.Builder> {
    private SetGameAccountSettings() { }
    private static readonly SetGameAccountSettings defaultInstance = new SetGameAccountSettings().MakeReadOnly();
    private static readonly string[] _setGameAccountSettingsFieldNames = new string[] { "settings" };
    private static readonly uint[] _setGameAccountSettingsFieldTags = new uint[] { 10 };
    public static SetGameAccountSettings DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SetGameAccountSettings DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SetGameAccountSettings ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_SetGameAccountSettings__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SetGameAccountSettings, SetGameAccountSettings.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_SetGameAccountSettings__FieldAccessorTable; }
    }
    
    public const int SettingsFieldNumber = 1;
    private bool hasSettings;
    private global::D3.Client.GameAccountSettings settings_;
    public bool HasSettings {
      get { return hasSettings; }
    }
    public global::D3.Client.GameAccountSettings Settings {
      get { return settings_ ?? global::D3.Client.GameAccountSettings.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSettings) return false;
        if (!Settings.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _setGameAccountSettingsFieldNames;
      if (hasSettings) {
        output.WriteMessage(1, field_names[0], Settings);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSettings) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Settings);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SetGameAccountSettings ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SetGameAccountSettings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SetGameAccountSettings ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SetGameAccountSettings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SetGameAccountSettings ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SetGameAccountSettings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SetGameAccountSettings ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SetGameAccountSettings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SetGameAccountSettings ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SetGameAccountSettings ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SetGameAccountSettings MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SetGameAccountSettings prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SetGameAccountSettings, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SetGameAccountSettings cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SetGameAccountSettings result;
      
      private SetGameAccountSettings PrepareBuilder() {
        if (resultIsReadOnly) {
          SetGameAccountSettings original = result;
          result = new SetGameAccountSettings();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SetGameAccountSettings MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.SetGameAccountSettings.Descriptor; }
      }
      
      public override SetGameAccountSettings DefaultInstanceForType {
        get { return global::D3.GameMessage.SetGameAccountSettings.DefaultInstance; }
      }
      
      public override SetGameAccountSettings BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SetGameAccountSettings) {
          return MergeFrom((SetGameAccountSettings) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SetGameAccountSettings other) {
        if (other == global::D3.GameMessage.SetGameAccountSettings.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSettings) {
          MergeSettings(other.Settings);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_setGameAccountSettingsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _setGameAccountSettingsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.Client.GameAccountSettings.Builder subBuilder = global::D3.Client.GameAccountSettings.CreateBuilder();
              if (result.hasSettings) {
                subBuilder.MergeFrom(Settings);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Settings = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSettings {
       get { return result.hasSettings; }
      }
      public global::D3.Client.GameAccountSettings Settings {
        get { return result.Settings; }
        set { SetSettings(value); }
      }
      public Builder SetSettings(global::D3.Client.GameAccountSettings value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSettings = true;
        result.settings_ = value;
        return this;
      }
      public Builder SetSettings(global::D3.Client.GameAccountSettings.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSettings = true;
        result.settings_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSettings(global::D3.Client.GameAccountSettings value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSettings &&
            result.settings_ != global::D3.Client.GameAccountSettings.DefaultInstance) {
            result.settings_ = global::D3.Client.GameAccountSettings.CreateBuilder(result.settings_).MergeFrom(value).BuildPartial();
        } else {
          result.settings_ = value;
        }
        result.hasSettings = true;
        return this;
      }
      public Builder ClearSettings() {
        PrepareBuilder();
        result.hasSettings = false;
        result.settings_ = null;
        return this;
      }
    }
    static SetGameAccountSettings() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetToonSettings : pb::GeneratedMessage<GetToonSettings, GetToonSettings.Builder> {
    private GetToonSettings() { }
    private static readonly GetToonSettings defaultInstance = new GetToonSettings().MakeReadOnly();
    private static readonly string[] _getToonSettingsFieldNames = new string[] { "hero_id" };
    private static readonly uint[] _getToonSettingsFieldTags = new uint[] { 8 };
    public static GetToonSettings DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetToonSettings DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetToonSettings ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetToonSettings__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetToonSettings, GetToonSettings.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetToonSettings__FieldAccessorTable; }
    }
    
    public const int HeroIdFieldNumber = 1;
    private bool hasHeroId;
    private ulong heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public ulong HeroId {
      get { return heroId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getToonSettingsFieldNames;
      if (hasHeroId) {
        output.WriteUInt64(1, field_names[0], HeroId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, HeroId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetToonSettings ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetToonSettings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetToonSettings ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetToonSettings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetToonSettings ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetToonSettings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetToonSettings ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetToonSettings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetToonSettings ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetToonSettings ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetToonSettings MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetToonSettings prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetToonSettings, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetToonSettings cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetToonSettings result;
      
      private GetToonSettings PrepareBuilder() {
        if (resultIsReadOnly) {
          GetToonSettings original = result;
          result = new GetToonSettings();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetToonSettings MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GetToonSettings.Descriptor; }
      }
      
      public override GetToonSettings DefaultInstanceForType {
        get { return global::D3.GameMessage.GetToonSettings.DefaultInstance; }
      }
      
      public override GetToonSettings BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetToonSettings) {
          return MergeFrom((GetToonSettings) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetToonSettings other) {
        if (other == global::D3.GameMessage.GetToonSettings.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getToonSettingsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getToonSettingsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHeroId = input.ReadUInt64(ref result.heroId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public ulong HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(ulong value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0UL;
        return this;
      }
    }
    static GetToonSettings() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SetToonSettings : pb::GeneratedMessage<SetToonSettings, SetToonSettings.Builder> {
    private SetToonSettings() { }
    private static readonly SetToonSettings defaultInstance = new SetToonSettings().MakeReadOnly();
    private static readonly string[] _setToonSettingsFieldNames = new string[] { "hero_id", "settings" };
    private static readonly uint[] _setToonSettingsFieldTags = new uint[] { 8, 18 };
    public static SetToonSettings DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SetToonSettings DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SetToonSettings ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_SetToonSettings__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SetToonSettings, SetToonSettings.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_SetToonSettings__FieldAccessorTable; }
    }
    
    public const int HeroIdFieldNumber = 1;
    private bool hasHeroId;
    private ulong heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public ulong HeroId {
      get { return heroId_; }
    }
    
    public const int SettingsFieldNumber = 2;
    private bool hasSettings;
    private global::D3.Client.ToonSettings settings_;
    public bool HasSettings {
      get { return hasSettings; }
    }
    public global::D3.Client.ToonSettings Settings {
      get { return settings_ ?? global::D3.Client.ToonSettings.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroId) return false;
        if (!hasSettings) return false;
        if (!Settings.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _setToonSettingsFieldNames;
      if (hasHeroId) {
        output.WriteUInt64(1, field_names[0], HeroId);
      }
      if (hasSettings) {
        output.WriteMessage(2, field_names[1], Settings);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, HeroId);
        }
        if (hasSettings) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Settings);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SetToonSettings ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SetToonSettings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SetToonSettings ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SetToonSettings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SetToonSettings ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SetToonSettings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SetToonSettings ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SetToonSettings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SetToonSettings ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SetToonSettings ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SetToonSettings MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SetToonSettings prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SetToonSettings, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SetToonSettings cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SetToonSettings result;
      
      private SetToonSettings PrepareBuilder() {
        if (resultIsReadOnly) {
          SetToonSettings original = result;
          result = new SetToonSettings();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SetToonSettings MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.SetToonSettings.Descriptor; }
      }
      
      public override SetToonSettings DefaultInstanceForType {
        get { return global::D3.GameMessage.SetToonSettings.DefaultInstance; }
      }
      
      public override SetToonSettings BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SetToonSettings) {
          return MergeFrom((SetToonSettings) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SetToonSettings other) {
        if (other == global::D3.GameMessage.SetToonSettings.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        if (other.HasSettings) {
          MergeSettings(other.Settings);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_setToonSettingsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _setToonSettingsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHeroId = input.ReadUInt64(ref result.heroId_);
              break;
            }
            case 18: {
              global::D3.Client.ToonSettings.Builder subBuilder = global::D3.Client.ToonSettings.CreateBuilder();
              if (result.hasSettings) {
                subBuilder.MergeFrom(Settings);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Settings = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public ulong HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(ulong value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0UL;
        return this;
      }
      
      public bool HasSettings {
       get { return result.hasSettings; }
      }
      public global::D3.Client.ToonSettings Settings {
        get { return result.Settings; }
        set { SetSettings(value); }
      }
      public Builder SetSettings(global::D3.Client.ToonSettings value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSettings = true;
        result.settings_ = value;
        return this;
      }
      public Builder SetSettings(global::D3.Client.ToonSettings.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSettings = true;
        result.settings_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSettings(global::D3.Client.ToonSettings value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSettings &&
            result.settings_ != global::D3.Client.ToonSettings.DefaultInstance) {
            result.settings_ = global::D3.Client.ToonSettings.CreateBuilder(result.settings_).MergeFrom(value).BuildPartial();
        } else {
          result.settings_ = value;
        }
        result.hasSettings = true;
        return this;
      }
      public Builder ClearSettings() {
        PrepareBuilder();
        result.hasSettings = false;
        result.settings_ = null;
        return this;
      }
    }
    static SetToonSettings() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetAccountDigest : pb::GeneratedMessage<GetAccountDigest, GetAccountDigest.Builder> {
    private GetAccountDigest() { }
    private static readonly GetAccountDigest defaultInstance = new GetAccountDigest().MakeReadOnly();
    private static readonly string[] _getAccountDigestFieldNames = new string[] {  };
    private static readonly uint[] _getAccountDigestFieldTags = new uint[] {  };
    public static GetAccountDigest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetAccountDigest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetAccountDigest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetAccountDigest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetAccountDigest, GetAccountDigest.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetAccountDigest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getAccountDigestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetAccountDigest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAccountDigest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAccountDigest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAccountDigest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAccountDigest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAccountDigest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetAccountDigest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetAccountDigest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetAccountDigest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAccountDigest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetAccountDigest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetAccountDigest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetAccountDigest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetAccountDigest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetAccountDigest result;
      
      private GetAccountDigest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetAccountDigest original = result;
          result = new GetAccountDigest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetAccountDigest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GetAccountDigest.Descriptor; }
      }
      
      public override GetAccountDigest DefaultInstanceForType {
        get { return global::D3.GameMessage.GetAccountDigest.DefaultInstance; }
      }
      
      public override GetAccountDigest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetAccountDigest) {
          return MergeFrom((GetAccountDigest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetAccountDigest other) {
        if (other == global::D3.GameMessage.GetAccountDigest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getAccountDigestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getAccountDigestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static GetAccountDigest() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetHeroItems : pb::GeneratedMessage<GetHeroItems, GetHeroItems.Builder> {
    private GetHeroItems() { }
    private static readonly GetHeroItems defaultInstance = new GetHeroItems().MakeReadOnly();
    private static readonly string[] _getHeroItemsFieldNames = new string[] { "hero_id" };
    private static readonly uint[] _getHeroItemsFieldTags = new uint[] { 8 };
    public static GetHeroItems DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetHeroItems DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetHeroItems ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetHeroItems__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetHeroItems, GetHeroItems.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetHeroItems__FieldAccessorTable; }
    }
    
    public const int HeroIdFieldNumber = 1;
    private bool hasHeroId;
    private ulong heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public ulong HeroId {
      get { return heroId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getHeroItemsFieldNames;
      if (hasHeroId) {
        output.WriteUInt64(1, field_names[0], HeroId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, HeroId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetHeroItems ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetHeroItems ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetHeroItems ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetHeroItems ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetHeroItems ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetHeroItems ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetHeroItems ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetHeroItems ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetHeroItems ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetHeroItems ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetHeroItems MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetHeroItems prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetHeroItems, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetHeroItems cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetHeroItems result;
      
      private GetHeroItems PrepareBuilder() {
        if (resultIsReadOnly) {
          GetHeroItems original = result;
          result = new GetHeroItems();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetHeroItems MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GetHeroItems.Descriptor; }
      }
      
      public override GetHeroItems DefaultInstanceForType {
        get { return global::D3.GameMessage.GetHeroItems.DefaultInstance; }
      }
      
      public override GetHeroItems BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetHeroItems) {
          return MergeFrom((GetHeroItems) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetHeroItems other) {
        if (other == global::D3.GameMessage.GetHeroItems.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getHeroItemsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getHeroItemsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHeroId = input.ReadUInt64(ref result.heroId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public ulong HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(ulong value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0UL;
        return this;
      }
    }
    static GetHeroItems() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetAccountItems : pb::GeneratedMessage<GetAccountItems, GetAccountItems.Builder> {
    private GetAccountItems() { }
    private static readonly GetAccountItems defaultInstance = new GetAccountItems().MakeReadOnly();
    private static readonly string[] _getAccountItemsFieldNames = new string[] { "hardcore" };
    private static readonly uint[] _getAccountItemsFieldTags = new uint[] { 8 };
    public static GetAccountItems DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetAccountItems DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetAccountItems ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetAccountItems__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetAccountItems, GetAccountItems.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetAccountItems__FieldAccessorTable; }
    }
    
    public const int HardcoreFieldNumber = 1;
    private bool hasHardcore;
    private bool hardcore_;
    public bool HasHardcore {
      get { return hasHardcore; }
    }
    public bool Hardcore {
      get { return hardcore_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHardcore) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getAccountItemsFieldNames;
      if (hasHardcore) {
        output.WriteBool(1, field_names[0], Hardcore);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHardcore) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, Hardcore);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetAccountItems ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAccountItems ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAccountItems ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAccountItems ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAccountItems ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAccountItems ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetAccountItems ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetAccountItems ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetAccountItems ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAccountItems ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetAccountItems MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetAccountItems prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetAccountItems, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetAccountItems cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetAccountItems result;
      
      private GetAccountItems PrepareBuilder() {
        if (resultIsReadOnly) {
          GetAccountItems original = result;
          result = new GetAccountItems();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetAccountItems MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GetAccountItems.Descriptor; }
      }
      
      public override GetAccountItems DefaultInstanceForType {
        get { return global::D3.GameMessage.GetAccountItems.DefaultInstance; }
      }
      
      public override GetAccountItems BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetAccountItems) {
          return MergeFrom((GetAccountItems) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetAccountItems other) {
        if (other == global::D3.GameMessage.GetAccountItems.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHardcore) {
          Hardcore = other.Hardcore;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getAccountItemsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getAccountItemsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHardcore = input.ReadBool(ref result.hardcore_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHardcore {
        get { return result.hasHardcore; }
      }
      public bool Hardcore {
        get { return result.Hardcore; }
        set { SetHardcore(value); }
      }
      public Builder SetHardcore(bool value) {
        PrepareBuilder();
        result.hasHardcore = true;
        result.hardcore_ = value;
        return this;
      }
      public Builder ClearHardcore() {
        PrepareBuilder();
        result.hasHardcore = false;
        result.hardcore_ = false;
        return this;
      }
    }
    static GetAccountItems() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetAccountProfile : pb::GeneratedMessage<GetAccountProfile, GetAccountProfile.Builder> {
    private GetAccountProfile() { }
    private static readonly GetAccountProfile defaultInstance = new GetAccountProfile().MakeReadOnly();
    private static readonly string[] _getAccountProfileFieldNames = new string[] { "account_id", "season_id" };
    private static readonly uint[] _getAccountProfileFieldTags = new uint[] { 10, 16 };
    public static GetAccountProfile DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetAccountProfile DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetAccountProfile ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetAccountProfile__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetAccountProfile, GetAccountProfile.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetAccountProfile__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.GameAccountHandle accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle AccountId {
      get { return accountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public const int SeasonIdFieldNumber = 2;
    private bool hasSeasonId;
    private int seasonId_;
    public bool HasSeasonId {
      get { return hasSeasonId; }
    }
    public int SeasonId {
      get { return seasonId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getAccountProfileFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (hasSeasonId) {
        output.WriteInt32(2, field_names[1], SeasonId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        if (hasSeasonId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, SeasonId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetAccountProfile ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAccountProfile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAccountProfile ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAccountProfile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAccountProfile ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAccountProfile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetAccountProfile ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetAccountProfile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetAccountProfile ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAccountProfile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetAccountProfile MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetAccountProfile prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetAccountProfile, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetAccountProfile cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetAccountProfile result;
      
      private GetAccountProfile PrepareBuilder() {
        if (resultIsReadOnly) {
          GetAccountProfile original = result;
          result = new GetAccountProfile();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetAccountProfile MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GetAccountProfile.Descriptor; }
      }
      
      public override GetAccountProfile DefaultInstanceForType {
        get { return global::D3.GameMessage.GetAccountProfile.DefaultInstance; }
      }
      
      public override GetAccountProfile BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetAccountProfile) {
          return MergeFrom((GetAccountProfile) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetAccountProfile other) {
        if (other == global::D3.GameMessage.GetAccountProfile.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.HasSeasonId) {
          SeasonId = other.SeasonId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getAccountProfileFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getAccountProfileFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasSeasonId = input.ReadInt32(ref result.seasonId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public bool HasSeasonId {
        get { return result.hasSeasonId; }
      }
      public int SeasonId {
        get { return result.SeasonId; }
        set { SetSeasonId(value); }
      }
      public Builder SetSeasonId(int value) {
        PrepareBuilder();
        result.hasSeasonId = true;
        result.seasonId_ = value;
        return this;
      }
      public Builder ClearSeasonId() {
        PrepareBuilder();
        result.hasSeasonId = false;
        result.seasonId_ = 0;
        return this;
      }
    }
    static GetAccountProfile() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetHeroProfiles : pb::GeneratedMessage<GetHeroProfiles, GetHeroProfiles.Builder> {
    private GetHeroProfiles() { }
    private static readonly GetHeroProfiles defaultInstance = new GetHeroProfiles().MakeReadOnly();
    private static readonly string[] _getHeroProfilesFieldNames = new string[] { "account_id", "hero_ids" };
    private static readonly uint[] _getHeroProfilesFieldTags = new uint[] { 10, 16 };
    public static GetHeroProfiles DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetHeroProfiles DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetHeroProfiles ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetHeroProfiles__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetHeroProfiles, GetHeroProfiles.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetHeroProfiles__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.GameAccountHandle accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle AccountId {
      get { return accountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public const int HeroIdsFieldNumber = 2;
    private pbc::PopsicleList<ulong> heroIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> HeroIdsList {
      get { return pbc::Lists.AsReadOnly(heroIds_); }
    }
    public int HeroIdsCount {
      get { return heroIds_.Count; }
    }
    public ulong GetHeroIds(int index) {
      return heroIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getHeroProfilesFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (heroIds_.Count > 0) {
        output.WriteUInt64Array(2, field_names[1], heroIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        {
          int dataSize = 0;
          foreach (ulong element in HeroIdsList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * heroIds_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetHeroProfiles ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetHeroProfiles ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetHeroProfiles ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetHeroProfiles ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetHeroProfiles ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetHeroProfiles ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetHeroProfiles ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetHeroProfiles ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetHeroProfiles ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetHeroProfiles ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetHeroProfiles MakeReadOnly() {
      heroIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetHeroProfiles prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetHeroProfiles, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetHeroProfiles cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetHeroProfiles result;
      
      private GetHeroProfiles PrepareBuilder() {
        if (resultIsReadOnly) {
          GetHeroProfiles original = result;
          result = new GetHeroProfiles();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetHeroProfiles MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GetHeroProfiles.Descriptor; }
      }
      
      public override GetHeroProfiles DefaultInstanceForType {
        get { return global::D3.GameMessage.GetHeroProfiles.DefaultInstance; }
      }
      
      public override GetHeroProfiles BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetHeroProfiles) {
          return MergeFrom((GetHeroProfiles) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetHeroProfiles other) {
        if (other == global::D3.GameMessage.GetHeroProfiles.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.heroIds_.Count != 0) {
          result.heroIds_.Add(other.heroIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getHeroProfilesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getHeroProfilesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt64Array(tag, field_name, result.heroIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> HeroIdsList {
        get { return PrepareBuilder().heroIds_; }
      }
      public int HeroIdsCount {
        get { return result.HeroIdsCount; }
      }
      public ulong GetHeroIds(int index) {
        return result.GetHeroIds(index);
      }
      public Builder SetHeroIds(int index, ulong value) {
        PrepareBuilder();
        result.heroIds_[index] = value;
        return this;
      }
      public Builder AddHeroIds(ulong value) {
        PrepareBuilder();
        result.heroIds_.Add(value);
        return this;
      }
      public Builder AddRangeHeroIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.heroIds_.Add(values);
        return this;
      }
      public Builder ClearHeroIds() {
        PrepareBuilder();
        result.heroIds_.Clear();
        return this;
      }
    }
    static GetHeroProfiles() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetAccountPrefs : pb::GeneratedMessage<GetAccountPrefs, GetAccountPrefs.Builder> {
    private GetAccountPrefs() { }
    private static readonly GetAccountPrefs defaultInstance = new GetAccountPrefs().MakeReadOnly();
    private static readonly string[] _getAccountPrefsFieldNames = new string[] {  };
    private static readonly uint[] _getAccountPrefsFieldTags = new uint[] {  };
    public static GetAccountPrefs DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetAccountPrefs DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetAccountPrefs ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetAccountPrefs__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetAccountPrefs, GetAccountPrefs.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetAccountPrefs__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getAccountPrefsFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetAccountPrefs ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAccountPrefs ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAccountPrefs ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetAccountPrefs ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetAccountPrefs ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAccountPrefs ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetAccountPrefs ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetAccountPrefs ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetAccountPrefs ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetAccountPrefs ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetAccountPrefs MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetAccountPrefs prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetAccountPrefs, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetAccountPrefs cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetAccountPrefs result;
      
      private GetAccountPrefs PrepareBuilder() {
        if (resultIsReadOnly) {
          GetAccountPrefs original = result;
          result = new GetAccountPrefs();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetAccountPrefs MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GetAccountPrefs.Descriptor; }
      }
      
      public override GetAccountPrefs DefaultInstanceForType {
        get { return global::D3.GameMessage.GetAccountPrefs.DefaultInstance; }
      }
      
      public override GetAccountPrefs BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetAccountPrefs) {
          return MergeFrom((GetAccountPrefs) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetAccountPrefs other) {
        if (other == global::D3.GameMessage.GetAccountPrefs.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getAccountPrefsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getAccountPrefsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static GetAccountPrefs() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SetAccountPrefs : pb::GeneratedMessage<SetAccountPrefs, SetAccountPrefs.Builder> {
    private SetAccountPrefs() { }
    private static readonly SetAccountPrefs defaultInstance = new SetAccountPrefs().MakeReadOnly();
    private static readonly string[] _setAccountPrefsFieldNames = new string[] { "prefs" };
    private static readonly uint[] _setAccountPrefsFieldTags = new uint[] { 10 };
    public static SetAccountPrefs DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SetAccountPrefs DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SetAccountPrefs ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_SetAccountPrefs__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SetAccountPrefs, SetAccountPrefs.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_SetAccountPrefs__FieldAccessorTable; }
    }
    
    public const int PrefsFieldNumber = 1;
    private bool hasPrefs;
    private global::D3.Client.Preferences prefs_;
    public bool HasPrefs {
      get { return hasPrefs; }
    }
    public global::D3.Client.Preferences Prefs {
      get { return prefs_ ?? global::D3.Client.Preferences.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPrefs) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _setAccountPrefsFieldNames;
      if (hasPrefs) {
        output.WriteMessage(1, field_names[0], Prefs);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPrefs) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Prefs);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SetAccountPrefs ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SetAccountPrefs ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SetAccountPrefs ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SetAccountPrefs ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SetAccountPrefs ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SetAccountPrefs ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SetAccountPrefs ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SetAccountPrefs ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SetAccountPrefs ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SetAccountPrefs ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SetAccountPrefs MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SetAccountPrefs prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SetAccountPrefs, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SetAccountPrefs cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SetAccountPrefs result;
      
      private SetAccountPrefs PrepareBuilder() {
        if (resultIsReadOnly) {
          SetAccountPrefs original = result;
          result = new SetAccountPrefs();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SetAccountPrefs MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.SetAccountPrefs.Descriptor; }
      }
      
      public override SetAccountPrefs DefaultInstanceForType {
        get { return global::D3.GameMessage.SetAccountPrefs.DefaultInstance; }
      }
      
      public override SetAccountPrefs BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SetAccountPrefs) {
          return MergeFrom((SetAccountPrefs) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SetAccountPrefs other) {
        if (other == global::D3.GameMessage.SetAccountPrefs.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPrefs) {
          MergePrefs(other.Prefs);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_setAccountPrefsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _setAccountPrefsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.Client.Preferences.Builder subBuilder = global::D3.Client.Preferences.CreateBuilder();
              if (result.hasPrefs) {
                subBuilder.MergeFrom(Prefs);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Prefs = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPrefs {
       get { return result.hasPrefs; }
      }
      public global::D3.Client.Preferences Prefs {
        get { return result.Prefs; }
        set { SetPrefs(value); }
      }
      public Builder SetPrefs(global::D3.Client.Preferences value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPrefs = true;
        result.prefs_ = value;
        return this;
      }
      public Builder SetPrefs(global::D3.Client.Preferences.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPrefs = true;
        result.prefs_ = builderForValue.Build();
        return this;
      }
      public Builder MergePrefs(global::D3.Client.Preferences value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPrefs &&
            result.prefs_ != global::D3.Client.Preferences.DefaultInstance) {
            result.prefs_ = global::D3.Client.Preferences.CreateBuilder(result.prefs_).MergeFrom(value).BuildPartial();
        } else {
          result.prefs_ = value;
        }
        result.hasPrefs = true;
        return this;
      }
      public Builder ClearPrefs() {
        PrepareBuilder();
        result.hasPrefs = false;
        result.prefs_ = null;
        return this;
      }
    }
    static SetAccountPrefs() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetCosmeticItems : pb::GeneratedMessage<GetCosmeticItems, GetCosmeticItems.Builder> {
    private GetCosmeticItems() { }
    private static readonly GetCosmeticItems defaultInstance = new GetCosmeticItems().MakeReadOnly();
    private static readonly string[] _getCosmeticItemsFieldNames = new string[] {  };
    private static readonly uint[] _getCosmeticItemsFieldTags = new uint[] {  };
    public static GetCosmeticItems DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetCosmeticItems DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetCosmeticItems ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetCosmeticItems__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetCosmeticItems, GetCosmeticItems.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetCosmeticItems__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getCosmeticItemsFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetCosmeticItems ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetCosmeticItems ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetCosmeticItems ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetCosmeticItems ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetCosmeticItems ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetCosmeticItems ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetCosmeticItems ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetCosmeticItems ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetCosmeticItems ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetCosmeticItems ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetCosmeticItems MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetCosmeticItems prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetCosmeticItems, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetCosmeticItems cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetCosmeticItems result;
      
      private GetCosmeticItems PrepareBuilder() {
        if (resultIsReadOnly) {
          GetCosmeticItems original = result;
          result = new GetCosmeticItems();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetCosmeticItems MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GetCosmeticItems.Descriptor; }
      }
      
      public override GetCosmeticItems DefaultInstanceForType {
        get { return global::D3.GameMessage.GetCosmeticItems.DefaultInstance; }
      }
      
      public override GetCosmeticItems BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetCosmeticItems) {
          return MergeFrom((GetCosmeticItems) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetCosmeticItems other) {
        if (other == global::D3.GameMessage.GetCosmeticItems.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getCosmeticItemsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getCosmeticItemsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static GetCosmeticItems() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetHeroDigest : pb::GeneratedMessage<GetHeroDigest, GetHeroDigest.Builder> {
    private GetHeroDigest() { }
    private static readonly GetHeroDigest defaultInstance = new GetHeroDigest().MakeReadOnly();
    private static readonly string[] _getHeroDigestFieldNames = new string[] { "account_id", "hero_id" };
    private static readonly uint[] _getHeroDigestFieldTags = new uint[] { 10, 16 };
    public static GetHeroDigest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetHeroDigest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetHeroDigest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetHeroDigest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetHeroDigest, GetHeroDigest.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetHeroDigest__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.GameAccountHandle accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle AccountId {
      get { return accountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public const int HeroIdFieldNumber = 2;
    private bool hasHeroId;
    private ulong heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public ulong HeroId {
      get { return heroId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasHeroId) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getHeroDigestFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (hasHeroId) {
        output.WriteUInt64(2, field_names[1], HeroId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, HeroId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetHeroDigest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetHeroDigest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetHeroDigest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetHeroDigest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetHeroDigest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetHeroDigest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetHeroDigest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetHeroDigest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetHeroDigest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetHeroDigest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetHeroDigest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetHeroDigest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetHeroDigest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetHeroDigest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetHeroDigest result;
      
      private GetHeroDigest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetHeroDigest original = result;
          result = new GetHeroDigest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetHeroDigest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GetHeroDigest.Descriptor; }
      }
      
      public override GetHeroDigest DefaultInstanceForType {
        get { return global::D3.GameMessage.GetHeroDigest.DefaultInstance; }
      }
      
      public override GetHeroDigest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetHeroDigest) {
          return MergeFrom((GetHeroDigest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetHeroDigest other) {
        if (other == global::D3.GameMessage.GetHeroDigest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getHeroDigestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getHeroDigestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasHeroId = input.ReadUInt64(ref result.heroId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public ulong HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(ulong value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0UL;
        return this;
      }
    }
    static GetHeroDigest() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetHeroIds : pb::GeneratedMessage<GetHeroIds, GetHeroIds.Builder> {
    private GetHeroIds() { }
    private static readonly GetHeroIds defaultInstance = new GetHeroIds().MakeReadOnly();
    private static readonly string[] _getHeroIdsFieldNames = new string[] { "account_id" };
    private static readonly uint[] _getHeroIdsFieldTags = new uint[] { 10 };
    public static GetHeroIds DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetHeroIds DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetHeroIds ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetHeroIds__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetHeroIds, GetHeroIds.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetHeroIds__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.GameAccountHandle accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle AccountId {
      get { return accountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getHeroIdsFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetHeroIds ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetHeroIds ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetHeroIds ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetHeroIds ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetHeroIds ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetHeroIds ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetHeroIds ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetHeroIds ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetHeroIds ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetHeroIds ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetHeroIds MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetHeroIds prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetHeroIds, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetHeroIds cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetHeroIds result;
      
      private GetHeroIds PrepareBuilder() {
        if (resultIsReadOnly) {
          GetHeroIds original = result;
          result = new GetHeroIds();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetHeroIds MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GetHeroIds.Descriptor; }
      }
      
      public override GetHeroIds DefaultInstanceForType {
        get { return global::D3.GameMessage.GetHeroIds.DefaultInstance; }
      }
      
      public override GetHeroIds BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetHeroIds) {
          return MergeFrom((GetHeroIds) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetHeroIds other) {
        if (other == global::D3.GameMessage.GetHeroIds.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getHeroIdsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getHeroIdsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
    }
    static GetHeroIds() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetHeroIdsResponse : pb::GeneratedMessage<GetHeroIdsResponse, GetHeroIdsResponse.Builder> {
    private GetHeroIdsResponse() { }
    private static readonly GetHeroIdsResponse defaultInstance = new GetHeroIdsResponse().MakeReadOnly();
    private static readonly string[] _getHeroIdsResponseFieldNames = new string[] { "hero_ids" };
    private static readonly uint[] _getHeroIdsResponseFieldTags = new uint[] { 8 };
    public static GetHeroIdsResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetHeroIdsResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetHeroIdsResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetHeroIdsResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetHeroIdsResponse, GetHeroIdsResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetHeroIdsResponse__FieldAccessorTable; }
    }
    
    public const int HeroIdsFieldNumber = 1;
    private pbc::PopsicleList<ulong> heroIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> HeroIdsList {
      get { return pbc::Lists.AsReadOnly(heroIds_); }
    }
    public int HeroIdsCount {
      get { return heroIds_.Count; }
    }
    public ulong GetHeroIds(int index) {
      return heroIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getHeroIdsResponseFieldNames;
      if (heroIds_.Count > 0) {
        output.WriteUInt64Array(1, field_names[0], heroIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (ulong element in HeroIdsList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * heroIds_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetHeroIdsResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetHeroIdsResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetHeroIdsResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetHeroIdsResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetHeroIdsResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetHeroIdsResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetHeroIdsResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetHeroIdsResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetHeroIdsResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetHeroIdsResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetHeroIdsResponse MakeReadOnly() {
      heroIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetHeroIdsResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetHeroIdsResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetHeroIdsResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetHeroIdsResponse result;
      
      private GetHeroIdsResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetHeroIdsResponse original = result;
          result = new GetHeroIdsResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetHeroIdsResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GetHeroIdsResponse.Descriptor; }
      }
      
      public override GetHeroIdsResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.GetHeroIdsResponse.DefaultInstance; }
      }
      
      public override GetHeroIdsResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetHeroIdsResponse) {
          return MergeFrom((GetHeroIdsResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetHeroIdsResponse other) {
        if (other == global::D3.GameMessage.GetHeroIdsResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.heroIds_.Count != 0) {
          result.heroIds_.Add(other.heroIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getHeroIdsResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getHeroIdsResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt64Array(tag, field_name, result.heroIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<ulong> HeroIdsList {
        get { return PrepareBuilder().heroIds_; }
      }
      public int HeroIdsCount {
        get { return result.HeroIdsCount; }
      }
      public ulong GetHeroIds(int index) {
        return result.GetHeroIds(index);
      }
      public Builder SetHeroIds(int index, ulong value) {
        PrepareBuilder();
        result.heroIds_[index] = value;
        return this;
      }
      public Builder AddHeroIds(ulong value) {
        PrepareBuilder();
        result.heroIds_.Add(value);
        return this;
      }
      public Builder AddRangeHeroIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.heroIds_.Add(values);
        return this;
      }
      public Builder ClearHeroIds() {
        PrepareBuilder();
        result.heroIds_.Clear();
        return this;
      }
    }
    static GetHeroIdsResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetDeletedHero : pb::GeneratedMessage<GetDeletedHero, GetDeletedHero.Builder> {
    private GetDeletedHero() { }
    private static readonly GetDeletedHero defaultInstance = new GetDeletedHero().MakeReadOnly();
    private static readonly string[] _getDeletedHeroFieldNames = new string[] {  };
    private static readonly uint[] _getDeletedHeroFieldTags = new uint[] {  };
    public static GetDeletedHero DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetDeletedHero DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetDeletedHero ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetDeletedHero__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetDeletedHero, GetDeletedHero.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetDeletedHero__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getDeletedHeroFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetDeletedHero ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetDeletedHero ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetDeletedHero ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetDeletedHero ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetDeletedHero ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetDeletedHero ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetDeletedHero ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetDeletedHero ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetDeletedHero ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetDeletedHero ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetDeletedHero MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetDeletedHero prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetDeletedHero, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetDeletedHero cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetDeletedHero result;
      
      private GetDeletedHero PrepareBuilder() {
        if (resultIsReadOnly) {
          GetDeletedHero original = result;
          result = new GetDeletedHero();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetDeletedHero MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GetDeletedHero.Descriptor; }
      }
      
      public override GetDeletedHero DefaultInstanceForType {
        get { return global::D3.GameMessage.GetDeletedHero.DefaultInstance; }
      }
      
      public override GetDeletedHero BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetDeletedHero) {
          return MergeFrom((GetDeletedHero) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetDeletedHero other) {
        if (other == global::D3.GameMessage.GetDeletedHero.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getDeletedHeroFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getDeletedHeroFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static GetDeletedHero() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CSGetSnapshots : pb::GeneratedMessage<CSGetSnapshots, CSGetSnapshots.Builder> {
    private CSGetSnapshots() { }
    private static readonly CSGetSnapshots defaultInstance = new CSGetSnapshots().MakeReadOnly();
    private static readonly string[] _cSGetSnapshotsFieldNames = new string[] {  };
    private static readonly uint[] _cSGetSnapshotsFieldTags = new uint[] {  };
    public static CSGetSnapshots DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CSGetSnapshots DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CSGetSnapshots ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CSGetSnapshots__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CSGetSnapshots, CSGetSnapshots.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CSGetSnapshots__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cSGetSnapshotsFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CSGetSnapshots ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CSGetSnapshots ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CSGetSnapshots ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CSGetSnapshots ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CSGetSnapshots ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CSGetSnapshots ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CSGetSnapshots ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CSGetSnapshots ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CSGetSnapshots ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CSGetSnapshots ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CSGetSnapshots MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CSGetSnapshots prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CSGetSnapshots, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CSGetSnapshots cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CSGetSnapshots result;
      
      private CSGetSnapshots PrepareBuilder() {
        if (resultIsReadOnly) {
          CSGetSnapshots original = result;
          result = new CSGetSnapshots();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CSGetSnapshots MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.CSGetSnapshots.Descriptor; }
      }
      
      public override CSGetSnapshots DefaultInstanceForType {
        get { return global::D3.GameMessage.CSGetSnapshots.DefaultInstance; }
      }
      
      public override CSGetSnapshots BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CSGetSnapshots) {
          return MergeFrom((CSGetSnapshots) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CSGetSnapshots other) {
        if (other == global::D3.GameMessage.CSGetSnapshots.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cSGetSnapshotsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cSGetSnapshotsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static CSGetSnapshots() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CSPullSnapshot : pb::GeneratedMessage<CSPullSnapshot, CSPullSnapshot.Builder> {
    private CSPullSnapshot() { }
    private static readonly CSPullSnapshot defaultInstance = new CSPullSnapshot().MakeReadOnly();
    private static readonly string[] _cSPullSnapshotFieldNames = new string[] { "version" };
    private static readonly uint[] _cSPullSnapshotFieldTags = new uint[] { 8 };
    public static CSPullSnapshot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CSPullSnapshot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CSPullSnapshot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CSPullSnapshot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CSPullSnapshot, CSPullSnapshot.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CSPullSnapshot__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private ulong version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public ulong Version {
      get { return version_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cSPullSnapshotFieldNames;
      if (hasVersion) {
        output.WriteUInt64(1, field_names[0], Version);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, Version);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CSPullSnapshot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CSPullSnapshot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CSPullSnapshot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CSPullSnapshot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CSPullSnapshot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CSPullSnapshot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CSPullSnapshot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CSPullSnapshot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CSPullSnapshot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CSPullSnapshot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CSPullSnapshot MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CSPullSnapshot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CSPullSnapshot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CSPullSnapshot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CSPullSnapshot result;
      
      private CSPullSnapshot PrepareBuilder() {
        if (resultIsReadOnly) {
          CSPullSnapshot original = result;
          result = new CSPullSnapshot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CSPullSnapshot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.CSPullSnapshot.Descriptor; }
      }
      
      public override CSPullSnapshot DefaultInstanceForType {
        get { return global::D3.GameMessage.CSPullSnapshot.DefaultInstance; }
      }
      
      public override CSPullSnapshot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CSPullSnapshot) {
          return MergeFrom((CSPullSnapshot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CSPullSnapshot other) {
        if (other == global::D3.GameMessage.CSPullSnapshot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cSPullSnapshotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cSPullSnapshotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadUInt64(ref result.version_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public ulong Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(ulong value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0UL;
        return this;
      }
    }
    static CSPullSnapshot() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CSPushSnapshot : pb::GeneratedMessage<CSPushSnapshot, CSPushSnapshot.Builder> {
    private CSPushSnapshot() { }
    private static readonly CSPushSnapshot defaultInstance = new CSPushSnapshot().MakeReadOnly();
    private static readonly string[] _cSPushSnapshotFieldNames = new string[] { "data" };
    private static readonly uint[] _cSPushSnapshotFieldTags = new uint[] { 10 };
    public static CSPushSnapshot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CSPushSnapshot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CSPushSnapshot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CSPushSnapshot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CSPushSnapshot, CSPushSnapshot.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CSPushSnapshot__FieldAccessorTable; }
    }
    
    public const int DataFieldNumber = 1;
    private bool hasData;
    private global::D3.CS.Snapshot data_;
    public bool HasData {
      get { return hasData; }
    }
    public global::D3.CS.Snapshot Data {
      get { return data_ ?? global::D3.CS.Snapshot.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasData) return false;
        if (!Data.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cSPushSnapshotFieldNames;
      if (hasData) {
        output.WriteMessage(1, field_names[0], Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasData) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Data);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CSPushSnapshot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CSPushSnapshot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CSPushSnapshot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CSPushSnapshot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CSPushSnapshot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CSPushSnapshot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CSPushSnapshot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CSPushSnapshot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CSPushSnapshot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CSPushSnapshot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CSPushSnapshot MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CSPushSnapshot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CSPushSnapshot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CSPushSnapshot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CSPushSnapshot result;
      
      private CSPushSnapshot PrepareBuilder() {
        if (resultIsReadOnly) {
          CSPushSnapshot original = result;
          result = new CSPushSnapshot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CSPushSnapshot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.CSPushSnapshot.Descriptor; }
      }
      
      public override CSPushSnapshot DefaultInstanceForType {
        get { return global::D3.GameMessage.CSPushSnapshot.DefaultInstance; }
      }
      
      public override CSPushSnapshot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CSPushSnapshot) {
          return MergeFrom((CSPushSnapshot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CSPushSnapshot other) {
        if (other == global::D3.GameMessage.CSPushSnapshot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasData) {
          MergeData(other.Data);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cSPushSnapshotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cSPushSnapshotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.CS.Snapshot.Builder subBuilder = global::D3.CS.Snapshot.CreateBuilder();
              if (result.hasData) {
                subBuilder.MergeFrom(Data);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Data = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasData {
       get { return result.hasData; }
      }
      public global::D3.CS.Snapshot Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(global::D3.CS.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder SetData(global::D3.CS.Snapshot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = builderForValue.Build();
        return this;
      }
      public Builder MergeData(global::D3.CS.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasData &&
            result.data_ != global::D3.CS.Snapshot.DefaultInstance) {
            result.data_ = global::D3.CS.Snapshot.CreateBuilder(result.data_).MergeFrom(value).BuildPartial();
        } else {
          result.data_ = value;
        }
        result.hasData = true;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = null;
        return this;
      }
    }
    static CSPushSnapshot() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CSWriteSnapshot : pb::GeneratedMessage<CSWriteSnapshot, CSWriteSnapshot.Builder> {
    private CSWriteSnapshot() { }
    private static readonly CSWriteSnapshot defaultInstance = new CSWriteSnapshot().MakeReadOnly();
    private static readonly string[] _cSWriteSnapshotFieldNames = new string[] {  };
    private static readonly uint[] _cSWriteSnapshotFieldTags = new uint[] {  };
    public static CSWriteSnapshot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CSWriteSnapshot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CSWriteSnapshot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CSWriteSnapshot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CSWriteSnapshot, CSWriteSnapshot.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CSWriteSnapshot__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cSWriteSnapshotFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CSWriteSnapshot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CSWriteSnapshot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CSWriteSnapshot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CSWriteSnapshot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CSWriteSnapshot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CSWriteSnapshot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CSWriteSnapshot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CSWriteSnapshot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CSWriteSnapshot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CSWriteSnapshot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CSWriteSnapshot MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CSWriteSnapshot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CSWriteSnapshot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CSWriteSnapshot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CSWriteSnapshot result;
      
      private CSWriteSnapshot PrepareBuilder() {
        if (resultIsReadOnly) {
          CSWriteSnapshot original = result;
          result = new CSWriteSnapshot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CSWriteSnapshot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.CSWriteSnapshot.Descriptor; }
      }
      
      public override CSWriteSnapshot DefaultInstanceForType {
        get { return global::D3.GameMessage.CSWriteSnapshot.DefaultInstance; }
      }
      
      public override CSWriteSnapshot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CSWriteSnapshot) {
          return MergeFrom((CSWriteSnapshot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CSWriteSnapshot other) {
        if (other == global::D3.GameMessage.CSWriteSnapshot.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cSWriteSnapshotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cSWriteSnapshotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static CSWriteSnapshot() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CSGiveCarePackage : pb::GeneratedMessage<CSGiveCarePackage, CSGiveCarePackage.Builder> {
    private CSGiveCarePackage() { }
    private static readonly CSGiveCarePackage defaultInstance = new CSGiveCarePackage().MakeReadOnly();
    private static readonly string[] _cSGiveCarePackageFieldNames = new string[] { "account_id", "care_id", "locale" };
    private static readonly uint[] _cSGiveCarePackageFieldTags = new uint[] { 10, 16, 24 };
    public static CSGiveCarePackage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CSGiveCarePackage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CSGiveCarePackage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CSGiveCarePackage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CSGiveCarePackage, CSGiveCarePackage.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CSGiveCarePackage__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.GameAccountHandle accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle AccountId {
      get { return accountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public const int CareIdFieldNumber = 2;
    private bool hasCareId;
    private uint careId_;
    public bool HasCareId {
      get { return hasCareId; }
    }
    public uint CareId {
      get { return careId_; }
    }
    
    public const int LocaleFieldNumber = 3;
    private bool hasLocale;
    private uint locale_;
    public bool HasLocale {
      get { return hasLocale; }
    }
    public uint Locale {
      get { return locale_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasCareId) return false;
        if (!hasLocale) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cSGiveCarePackageFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (hasCareId) {
        output.WriteUInt32(2, field_names[1], CareId);
      }
      if (hasLocale) {
        output.WriteUInt32(3, field_names[2], Locale);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        if (hasCareId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, CareId);
        }
        if (hasLocale) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Locale);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CSGiveCarePackage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CSGiveCarePackage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CSGiveCarePackage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CSGiveCarePackage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CSGiveCarePackage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CSGiveCarePackage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CSGiveCarePackage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CSGiveCarePackage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CSGiveCarePackage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CSGiveCarePackage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CSGiveCarePackage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CSGiveCarePackage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CSGiveCarePackage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CSGiveCarePackage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CSGiveCarePackage result;
      
      private CSGiveCarePackage PrepareBuilder() {
        if (resultIsReadOnly) {
          CSGiveCarePackage original = result;
          result = new CSGiveCarePackage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CSGiveCarePackage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.CSGiveCarePackage.Descriptor; }
      }
      
      public override CSGiveCarePackage DefaultInstanceForType {
        get { return global::D3.GameMessage.CSGiveCarePackage.DefaultInstance; }
      }
      
      public override CSGiveCarePackage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CSGiveCarePackage) {
          return MergeFrom((CSGiveCarePackage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CSGiveCarePackage other) {
        if (other == global::D3.GameMessage.CSGiveCarePackage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.HasCareId) {
          CareId = other.CareId;
        }
        if (other.HasLocale) {
          Locale = other.Locale;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cSGiveCarePackageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cSGiveCarePackageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasCareId = input.ReadUInt32(ref result.careId_);
              break;
            }
            case 24: {
              result.hasLocale = input.ReadUInt32(ref result.locale_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public bool HasCareId {
        get { return result.hasCareId; }
      }
      public uint CareId {
        get { return result.CareId; }
        set { SetCareId(value); }
      }
      public Builder SetCareId(uint value) {
        PrepareBuilder();
        result.hasCareId = true;
        result.careId_ = value;
        return this;
      }
      public Builder ClearCareId() {
        PrepareBuilder();
        result.hasCareId = false;
        result.careId_ = 0;
        return this;
      }
      
      public bool HasLocale {
        get { return result.hasLocale; }
      }
      public uint Locale {
        get { return result.Locale; }
        set { SetLocale(value); }
      }
      public Builder SetLocale(uint value) {
        PrepareBuilder();
        result.hasLocale = true;
        result.locale_ = value;
        return this;
      }
      public Builder ClearLocale() {
        PrepareBuilder();
        result.hasLocale = false;
        result.locale_ = 0;
        return this;
      }
    }
    static CSGiveCarePackage() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CSForceColdStorage : pb::GeneratedMessage<CSForceColdStorage, CSForceColdStorage.Builder> {
    private CSForceColdStorage() { }
    private static readonly CSForceColdStorage defaultInstance = new CSForceColdStorage().MakeReadOnly();
    private static readonly string[] _cSForceColdStorageFieldNames = new string[] { "account_id" };
    private static readonly uint[] _cSForceColdStorageFieldTags = new uint[] { 10 };
    public static CSForceColdStorage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CSForceColdStorage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CSForceColdStorage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CSForceColdStorage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CSForceColdStorage, CSForceColdStorage.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CSForceColdStorage__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.GameAccountHandle accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle AccountId {
      get { return accountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cSForceColdStorageFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CSForceColdStorage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CSForceColdStorage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CSForceColdStorage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CSForceColdStorage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CSForceColdStorage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CSForceColdStorage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CSForceColdStorage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CSForceColdStorage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CSForceColdStorage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CSForceColdStorage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CSForceColdStorage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CSForceColdStorage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CSForceColdStorage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CSForceColdStorage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CSForceColdStorage result;
      
      private CSForceColdStorage PrepareBuilder() {
        if (resultIsReadOnly) {
          CSForceColdStorage original = result;
          result = new CSForceColdStorage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CSForceColdStorage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.CSForceColdStorage.Descriptor; }
      }
      
      public override CSForceColdStorage DefaultInstanceForType {
        get { return global::D3.GameMessage.CSForceColdStorage.DefaultInstance; }
      }
      
      public override CSForceColdStorage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CSForceColdStorage) {
          return MergeFrom((CSForceColdStorage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CSForceColdStorage other) {
        if (other == global::D3.GameMessage.CSForceColdStorage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cSForceColdStorageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cSForceColdStorageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
    }
    static CSForceColdStorage() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TransferAccountCheck : pb::GeneratedMessage<TransferAccountCheck, TransferAccountCheck.Builder> {
    private TransferAccountCheck() { }
    private static readonly TransferAccountCheck defaultInstance = new TransferAccountCheck().MakeReadOnly();
    private static readonly string[] _transferAccountCheckFieldNames = new string[] { "local_account_id" };
    private static readonly uint[] _transferAccountCheckFieldTags = new uint[] { 10 };
    public static TransferAccountCheck DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TransferAccountCheck DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TransferAccountCheck ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TransferAccountCheck__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TransferAccountCheck, TransferAccountCheck.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TransferAccountCheck__FieldAccessorTable; }
    }
    
    public const int LocalAccountIdFieldNumber = 1;
    private bool hasLocalAccountId;
    private global::D3.OnlineService.GameAccountHandle localAccountId_;
    public bool HasLocalAccountId {
      get { return hasLocalAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle LocalAccountId {
      get { return localAccountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLocalAccountId) return false;
        if (!LocalAccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _transferAccountCheckFieldNames;
      if (hasLocalAccountId) {
        output.WriteMessage(1, field_names[0], LocalAccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLocalAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, LocalAccountId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TransferAccountCheck ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TransferAccountCheck ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TransferAccountCheck ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TransferAccountCheck ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TransferAccountCheck ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TransferAccountCheck ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TransferAccountCheck ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TransferAccountCheck ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TransferAccountCheck ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TransferAccountCheck ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TransferAccountCheck MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TransferAccountCheck prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TransferAccountCheck, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TransferAccountCheck cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TransferAccountCheck result;
      
      private TransferAccountCheck PrepareBuilder() {
        if (resultIsReadOnly) {
          TransferAccountCheck original = result;
          result = new TransferAccountCheck();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TransferAccountCheck MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.TransferAccountCheck.Descriptor; }
      }
      
      public override TransferAccountCheck DefaultInstanceForType {
        get { return global::D3.GameMessage.TransferAccountCheck.DefaultInstance; }
      }
      
      public override TransferAccountCheck BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TransferAccountCheck) {
          return MergeFrom((TransferAccountCheck) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TransferAccountCheck other) {
        if (other == global::D3.GameMessage.TransferAccountCheck.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLocalAccountId) {
          MergeLocalAccountId(other.LocalAccountId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_transferAccountCheckFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _transferAccountCheckFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasLocalAccountId) {
                subBuilder.MergeFrom(LocalAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LocalAccountId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLocalAccountId {
       get { return result.hasLocalAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle LocalAccountId {
        get { return result.LocalAccountId; }
        set { SetLocalAccountId(value); }
      }
      public Builder SetLocalAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocalAccountId = true;
        result.localAccountId_ = value;
        return this;
      }
      public Builder SetLocalAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLocalAccountId = true;
        result.localAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLocalAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLocalAccountId &&
            result.localAccountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.localAccountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.localAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.localAccountId_ = value;
        }
        result.hasLocalAccountId = true;
        return this;
      }
      public Builder ClearLocalAccountId() {
        PrepareBuilder();
        result.hasLocalAccountId = false;
        result.localAccountId_ = null;
        return this;
      }
    }
    static TransferAccountCheck() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TransferAccountCheckResponse : pb::GeneratedMessage<TransferAccountCheckResponse, TransferAccountCheckResponse.Builder> {
    private TransferAccountCheckResponse() { }
    private static readonly TransferAccountCheckResponse defaultInstance = new TransferAccountCheckResponse().MakeReadOnly();
    private static readonly string[] _transferAccountCheckResponseFieldNames = new string[] { "available_time", "status" };
    private static readonly uint[] _transferAccountCheckResponseFieldTags = new uint[] { 16, 8 };
    public static TransferAccountCheckResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TransferAccountCheckResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TransferAccountCheckResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TransferAccountCheckResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TransferAccountCheckResponse, TransferAccountCheckResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TransferAccountCheckResponse__FieldAccessorTable; }
    }
    
    public const int StatusFieldNumber = 1;
    private bool hasStatus;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public const int AvailableTimeFieldNumber = 2;
    private bool hasAvailableTime;
    private int availableTime_;
    public bool HasAvailableTime {
      get { return hasAvailableTime; }
    }
    public int AvailableTime {
      get { return availableTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStatus) return false;
        if (!hasAvailableTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _transferAccountCheckResponseFieldNames;
      if (hasStatus) {
        output.WriteInt32(1, field_names[1], Status);
      }
      if (hasAvailableTime) {
        output.WriteInt32(2, field_names[0], AvailableTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Status);
        }
        if (hasAvailableTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, AvailableTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TransferAccountCheckResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TransferAccountCheckResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TransferAccountCheckResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TransferAccountCheckResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TransferAccountCheckResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TransferAccountCheckResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TransferAccountCheckResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TransferAccountCheckResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TransferAccountCheckResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TransferAccountCheckResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TransferAccountCheckResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TransferAccountCheckResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TransferAccountCheckResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TransferAccountCheckResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TransferAccountCheckResponse result;
      
      private TransferAccountCheckResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          TransferAccountCheckResponse original = result;
          result = new TransferAccountCheckResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TransferAccountCheckResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.TransferAccountCheckResponse.Descriptor; }
      }
      
      public override TransferAccountCheckResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.TransferAccountCheckResponse.DefaultInstance; }
      }
      
      public override TransferAccountCheckResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TransferAccountCheckResponse) {
          return MergeFrom((TransferAccountCheckResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TransferAccountCheckResponse other) {
        if (other == global::D3.GameMessage.TransferAccountCheckResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasAvailableTime) {
          AvailableTime = other.AvailableTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_transferAccountCheckResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _transferAccountCheckResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStatus = input.ReadInt32(ref result.status_);
              break;
            }
            case 16: {
              result.hasAvailableTime = input.ReadInt32(ref result.availableTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasAvailableTime {
        get { return result.hasAvailableTime; }
      }
      public int AvailableTime {
        get { return result.AvailableTime; }
        set { SetAvailableTime(value); }
      }
      public Builder SetAvailableTime(int value) {
        PrepareBuilder();
        result.hasAvailableTime = true;
        result.availableTime_ = value;
        return this;
      }
      public Builder ClearAvailableTime() {
        PrepareBuilder();
        result.hasAvailableTime = false;
        result.availableTime_ = 0;
        return this;
      }
    }
    static TransferAccountCheckResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TransferAccountBegin : pb::GeneratedMessage<TransferAccountBegin, TransferAccountBegin.Builder> {
    private TransferAccountBegin() { }
    private static readonly TransferAccountBegin defaultInstance = new TransferAccountBegin().MakeReadOnly();
    private static readonly string[] _transferAccountBeginFieldNames = new string[] { "force", "local_account_id", "region", "source_account_id" };
    private static readonly uint[] _transferAccountBeginFieldTags = new uint[] { 32, 10, 26, 18 };
    public static TransferAccountBegin DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TransferAccountBegin DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TransferAccountBegin ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TransferAccountBegin__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TransferAccountBegin, TransferAccountBegin.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TransferAccountBegin__FieldAccessorTable; }
    }
    
    public const int LocalAccountIdFieldNumber = 1;
    private bool hasLocalAccountId;
    private global::D3.OnlineService.GameAccountHandle localAccountId_;
    public bool HasLocalAccountId {
      get { return hasLocalAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle LocalAccountId {
      get { return localAccountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public const int SourceAccountIdFieldNumber = 2;
    private bool hasSourceAccountId;
    private global::D3.OnlineService.GameAccountHandle sourceAccountId_;
    public bool HasSourceAccountId {
      get { return hasSourceAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle SourceAccountId {
      get { return sourceAccountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public const int RegionFieldNumber = 3;
    private bool hasRegion;
    private string region_ = "";
    public bool HasRegion {
      get { return hasRegion; }
    }
    public string Region {
      get { return region_; }
    }
    
    public const int ForceFieldNumber = 4;
    private bool hasForce;
    private bool force_;
    public bool HasForce {
      get { return hasForce; }
    }
    public bool Force {
      get { return force_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLocalAccountId) return false;
        if (!hasSourceAccountId) return false;
        if (!hasRegion) return false;
        if (!hasForce) return false;
        if (!LocalAccountId.IsInitialized) return false;
        if (!SourceAccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _transferAccountBeginFieldNames;
      if (hasLocalAccountId) {
        output.WriteMessage(1, field_names[1], LocalAccountId);
      }
      if (hasSourceAccountId) {
        output.WriteMessage(2, field_names[3], SourceAccountId);
      }
      if (hasRegion) {
        output.WriteString(3, field_names[2], Region);
      }
      if (hasForce) {
        output.WriteBool(4, field_names[0], Force);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLocalAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, LocalAccountId);
        }
        if (hasSourceAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, SourceAccountId);
        }
        if (hasRegion) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Region);
        }
        if (hasForce) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, Force);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TransferAccountBegin ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TransferAccountBegin ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TransferAccountBegin ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TransferAccountBegin ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TransferAccountBegin ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TransferAccountBegin ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TransferAccountBegin ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TransferAccountBegin ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TransferAccountBegin ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TransferAccountBegin ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TransferAccountBegin MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TransferAccountBegin prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TransferAccountBegin, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TransferAccountBegin cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TransferAccountBegin result;
      
      private TransferAccountBegin PrepareBuilder() {
        if (resultIsReadOnly) {
          TransferAccountBegin original = result;
          result = new TransferAccountBegin();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TransferAccountBegin MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.TransferAccountBegin.Descriptor; }
      }
      
      public override TransferAccountBegin DefaultInstanceForType {
        get { return global::D3.GameMessage.TransferAccountBegin.DefaultInstance; }
      }
      
      public override TransferAccountBegin BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TransferAccountBegin) {
          return MergeFrom((TransferAccountBegin) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TransferAccountBegin other) {
        if (other == global::D3.GameMessage.TransferAccountBegin.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLocalAccountId) {
          MergeLocalAccountId(other.LocalAccountId);
        }
        if (other.HasSourceAccountId) {
          MergeSourceAccountId(other.SourceAccountId);
        }
        if (other.HasRegion) {
          Region = other.Region;
        }
        if (other.HasForce) {
          Force = other.Force;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_transferAccountBeginFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _transferAccountBeginFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasLocalAccountId) {
                subBuilder.MergeFrom(LocalAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LocalAccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasSourceAccountId) {
                subBuilder.MergeFrom(SourceAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SourceAccountId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              result.hasRegion = input.ReadString(ref result.region_);
              break;
            }
            case 32: {
              result.hasForce = input.ReadBool(ref result.force_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLocalAccountId {
       get { return result.hasLocalAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle LocalAccountId {
        get { return result.LocalAccountId; }
        set { SetLocalAccountId(value); }
      }
      public Builder SetLocalAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocalAccountId = true;
        result.localAccountId_ = value;
        return this;
      }
      public Builder SetLocalAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLocalAccountId = true;
        result.localAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLocalAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLocalAccountId &&
            result.localAccountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.localAccountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.localAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.localAccountId_ = value;
        }
        result.hasLocalAccountId = true;
        return this;
      }
      public Builder ClearLocalAccountId() {
        PrepareBuilder();
        result.hasLocalAccountId = false;
        result.localAccountId_ = null;
        return this;
      }
      
      public bool HasSourceAccountId {
       get { return result.hasSourceAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle SourceAccountId {
        get { return result.SourceAccountId; }
        set { SetSourceAccountId(value); }
      }
      public Builder SetSourceAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSourceAccountId = true;
        result.sourceAccountId_ = value;
        return this;
      }
      public Builder SetSourceAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSourceAccountId = true;
        result.sourceAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSourceAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSourceAccountId &&
            result.sourceAccountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.sourceAccountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.sourceAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.sourceAccountId_ = value;
        }
        result.hasSourceAccountId = true;
        return this;
      }
      public Builder ClearSourceAccountId() {
        PrepareBuilder();
        result.hasSourceAccountId = false;
        result.sourceAccountId_ = null;
        return this;
      }
      
      public bool HasRegion {
        get { return result.hasRegion; }
      }
      public string Region {
        get { return result.Region; }
        set { SetRegion(value); }
      }
      public Builder SetRegion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRegion = true;
        result.region_ = value;
        return this;
      }
      public Builder ClearRegion() {
        PrepareBuilder();
        result.hasRegion = false;
        result.region_ = "";
        return this;
      }
      
      public bool HasForce {
        get { return result.hasForce; }
      }
      public bool Force {
        get { return result.Force; }
        set { SetForce(value); }
      }
      public Builder SetForce(bool value) {
        PrepareBuilder();
        result.hasForce = true;
        result.force_ = value;
        return this;
      }
      public Builder ClearForce() {
        PrepareBuilder();
        result.hasForce = false;
        result.force_ = false;
        return this;
      }
    }
    static TransferAccountBegin() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TransferAccountGetStatus : pb::GeneratedMessage<TransferAccountGetStatus, TransferAccountGetStatus.Builder> {
    private TransferAccountGetStatus() { }
    private static readonly TransferAccountGetStatus defaultInstance = new TransferAccountGetStatus().MakeReadOnly();
    private static readonly string[] _transferAccountGetStatusFieldNames = new string[] { "local_account_id", "token" };
    private static readonly uint[] _transferAccountGetStatusFieldTags = new uint[] { 10, 16 };
    public static TransferAccountGetStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TransferAccountGetStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TransferAccountGetStatus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TransferAccountGetStatus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TransferAccountGetStatus, TransferAccountGetStatus.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TransferAccountGetStatus__FieldAccessorTable; }
    }
    
    public const int LocalAccountIdFieldNumber = 1;
    private bool hasLocalAccountId;
    private global::D3.OnlineService.GameAccountHandle localAccountId_;
    public bool HasLocalAccountId {
      get { return hasLocalAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle LocalAccountId {
      get { return localAccountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public const int TokenFieldNumber = 2;
    private bool hasToken;
    private ulong token_;
    public bool HasToken {
      get { return hasToken; }
    }
    public ulong Token {
      get { return token_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLocalAccountId) return false;
        if (!hasToken) return false;
        if (!LocalAccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _transferAccountGetStatusFieldNames;
      if (hasLocalAccountId) {
        output.WriteMessage(1, field_names[0], LocalAccountId);
      }
      if (hasToken) {
        output.WriteUInt64(2, field_names[1], Token);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLocalAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, LocalAccountId);
        }
        if (hasToken) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, Token);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TransferAccountGetStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TransferAccountGetStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TransferAccountGetStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TransferAccountGetStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TransferAccountGetStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TransferAccountGetStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TransferAccountGetStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TransferAccountGetStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TransferAccountGetStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TransferAccountGetStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TransferAccountGetStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TransferAccountGetStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TransferAccountGetStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TransferAccountGetStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TransferAccountGetStatus result;
      
      private TransferAccountGetStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          TransferAccountGetStatus original = result;
          result = new TransferAccountGetStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TransferAccountGetStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.TransferAccountGetStatus.Descriptor; }
      }
      
      public override TransferAccountGetStatus DefaultInstanceForType {
        get { return global::D3.GameMessage.TransferAccountGetStatus.DefaultInstance; }
      }
      
      public override TransferAccountGetStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TransferAccountGetStatus) {
          return MergeFrom((TransferAccountGetStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TransferAccountGetStatus other) {
        if (other == global::D3.GameMessage.TransferAccountGetStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLocalAccountId) {
          MergeLocalAccountId(other.LocalAccountId);
        }
        if (other.HasToken) {
          Token = other.Token;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_transferAccountGetStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _transferAccountGetStatusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasLocalAccountId) {
                subBuilder.MergeFrom(LocalAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LocalAccountId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasToken = input.ReadUInt64(ref result.token_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLocalAccountId {
       get { return result.hasLocalAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle LocalAccountId {
        get { return result.LocalAccountId; }
        set { SetLocalAccountId(value); }
      }
      public Builder SetLocalAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocalAccountId = true;
        result.localAccountId_ = value;
        return this;
      }
      public Builder SetLocalAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLocalAccountId = true;
        result.localAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLocalAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLocalAccountId &&
            result.localAccountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.localAccountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.localAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.localAccountId_ = value;
        }
        result.hasLocalAccountId = true;
        return this;
      }
      public Builder ClearLocalAccountId() {
        PrepareBuilder();
        result.hasLocalAccountId = false;
        result.localAccountId_ = null;
        return this;
      }
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public ulong Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(ulong value) {
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = 0UL;
        return this;
      }
    }
    static TransferAccountGetStatus() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TransferAccountResponse : pb::GeneratedMessage<TransferAccountResponse, TransferAccountResponse.Builder> {
    private TransferAccountResponse() { }
    private static readonly TransferAccountResponse defaultInstance = new TransferAccountResponse().MakeReadOnly();
    private static readonly string[] _transferAccountResponseFieldNames = new string[] { "local_account_id", "status", "token" };
    private static readonly uint[] _transferAccountResponseFieldTags = new uint[] { 10, 24, 16 };
    public static TransferAccountResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TransferAccountResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TransferAccountResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TransferAccountResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TransferAccountResponse, TransferAccountResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TransferAccountResponse__FieldAccessorTable; }
    }
    
    public const int LocalAccountIdFieldNumber = 1;
    private bool hasLocalAccountId;
    private global::D3.OnlineService.GameAccountHandle localAccountId_;
    public bool HasLocalAccountId {
      get { return hasLocalAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle LocalAccountId {
      get { return localAccountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public const int TokenFieldNumber = 2;
    private bool hasToken;
    private ulong token_;
    public bool HasToken {
      get { return hasToken; }
    }
    public ulong Token {
      get { return token_; }
    }
    
    public const int StatusFieldNumber = 3;
    private bool hasStatus;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLocalAccountId) return false;
        if (!hasToken) return false;
        if (!hasStatus) return false;
        if (!LocalAccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _transferAccountResponseFieldNames;
      if (hasLocalAccountId) {
        output.WriteMessage(1, field_names[0], LocalAccountId);
      }
      if (hasToken) {
        output.WriteUInt64(2, field_names[2], Token);
      }
      if (hasStatus) {
        output.WriteInt32(3, field_names[1], Status);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLocalAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, LocalAccountId);
        }
        if (hasToken) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, Token);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Status);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TransferAccountResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TransferAccountResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TransferAccountResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TransferAccountResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TransferAccountResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TransferAccountResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TransferAccountResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TransferAccountResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TransferAccountResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TransferAccountResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TransferAccountResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TransferAccountResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TransferAccountResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TransferAccountResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TransferAccountResponse result;
      
      private TransferAccountResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          TransferAccountResponse original = result;
          result = new TransferAccountResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TransferAccountResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.TransferAccountResponse.Descriptor; }
      }
      
      public override TransferAccountResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.TransferAccountResponse.DefaultInstance; }
      }
      
      public override TransferAccountResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TransferAccountResponse) {
          return MergeFrom((TransferAccountResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TransferAccountResponse other) {
        if (other == global::D3.GameMessage.TransferAccountResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLocalAccountId) {
          MergeLocalAccountId(other.LocalAccountId);
        }
        if (other.HasToken) {
          Token = other.Token;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_transferAccountResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _transferAccountResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasLocalAccountId) {
                subBuilder.MergeFrom(LocalAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LocalAccountId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasToken = input.ReadUInt64(ref result.token_);
              break;
            }
            case 24: {
              result.hasStatus = input.ReadInt32(ref result.status_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLocalAccountId {
       get { return result.hasLocalAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle LocalAccountId {
        get { return result.LocalAccountId; }
        set { SetLocalAccountId(value); }
      }
      public Builder SetLocalAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocalAccountId = true;
        result.localAccountId_ = value;
        return this;
      }
      public Builder SetLocalAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLocalAccountId = true;
        result.localAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLocalAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLocalAccountId &&
            result.localAccountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.localAccountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.localAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.localAccountId_ = value;
        }
        result.hasLocalAccountId = true;
        return this;
      }
      public Builder ClearLocalAccountId() {
        PrepareBuilder();
        result.hasLocalAccountId = false;
        result.localAccountId_ = null;
        return this;
      }
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public ulong Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(ulong value) {
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = 0UL;
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
    }
    static TransferAccountResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BannerSaveConfirm : pb::GeneratedMessage<BannerSaveConfirm, BannerSaveConfirm.Builder> {
    private BannerSaveConfirm() { }
    private static readonly BannerSaveConfirm defaultInstance = new BannerSaveConfirm().MakeReadOnly();
    private static readonly string[] _bannerSaveConfirmFieldNames = new string[] { "account_id", "banner", "dbErrCode" };
    private static readonly uint[] _bannerSaveConfirmFieldTags = new uint[] { 10, 18, 24 };
    public static BannerSaveConfirm DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BannerSaveConfirm DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BannerSaveConfirm ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_BannerSaveConfirm__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BannerSaveConfirm, BannerSaveConfirm.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_BannerSaveConfirm__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private global::D3.OnlineService.GameAccountHandle accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle AccountId {
      get { return accountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public const int BannerFieldNumber = 2;
    private bool hasBanner;
    private global::D3.Account.BannerConfiguration banner_;
    public bool HasBanner {
      get { return hasBanner; }
    }
    public global::D3.Account.BannerConfiguration Banner {
      get { return banner_ ?? global::D3.Account.BannerConfiguration.DefaultInstance; }
    }
    
    public const int DbErrCodeFieldNumber = 3;
    private bool hasDbErrCode;
    private int dbErrCode_;
    public bool HasDbErrCode {
      get { return hasDbErrCode; }
    }
    public int DbErrCode {
      get { return dbErrCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasBanner) return false;
        if (!hasDbErrCode) return false;
        if (!AccountId.IsInitialized) return false;
        if (!Banner.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _bannerSaveConfirmFieldNames;
      if (hasAccountId) {
        output.WriteMessage(1, field_names[0], AccountId);
      }
      if (hasBanner) {
        output.WriteMessage(2, field_names[1], Banner);
      }
      if (hasDbErrCode) {
        output.WriteInt32(3, field_names[2], DbErrCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountId);
        }
        if (hasBanner) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Banner);
        }
        if (hasDbErrCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, DbErrCode);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BannerSaveConfirm ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BannerSaveConfirm ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BannerSaveConfirm ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BannerSaveConfirm ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BannerSaveConfirm ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BannerSaveConfirm ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BannerSaveConfirm ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BannerSaveConfirm ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BannerSaveConfirm ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BannerSaveConfirm ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BannerSaveConfirm MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BannerSaveConfirm prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<BannerSaveConfirm, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BannerSaveConfirm cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BannerSaveConfirm result;
      
      private BannerSaveConfirm PrepareBuilder() {
        if (resultIsReadOnly) {
          BannerSaveConfirm original = result;
          result = new BannerSaveConfirm();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BannerSaveConfirm MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.BannerSaveConfirm.Descriptor; }
      }
      
      public override BannerSaveConfirm DefaultInstanceForType {
        get { return global::D3.GameMessage.BannerSaveConfirm.DefaultInstance; }
      }
      
      public override BannerSaveConfirm BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BannerSaveConfirm) {
          return MergeFrom((BannerSaveConfirm) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BannerSaveConfirm other) {
        if (other == global::D3.GameMessage.BannerSaveConfirm.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.HasBanner) {
          MergeBanner(other.Banner);
        }
        if (other.HasDbErrCode) {
          DbErrCode = other.DbErrCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bannerSaveConfirmFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bannerSaveConfirmFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.Account.BannerConfiguration.Builder subBuilder = global::D3.Account.BannerConfiguration.CreateBuilder();
              if (result.hasBanner) {
                subBuilder.MergeFrom(Banner);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Banner = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasDbErrCode = input.ReadInt32(ref result.dbErrCode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public bool HasBanner {
       get { return result.hasBanner; }
      }
      public global::D3.Account.BannerConfiguration Banner {
        get { return result.Banner; }
        set { SetBanner(value); }
      }
      public Builder SetBanner(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBanner = true;
        result.banner_ = value;
        return this;
      }
      public Builder SetBanner(global::D3.Account.BannerConfiguration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBanner = true;
        result.banner_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBanner(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBanner &&
            result.banner_ != global::D3.Account.BannerConfiguration.DefaultInstance) {
            result.banner_ = global::D3.Account.BannerConfiguration.CreateBuilder(result.banner_).MergeFrom(value).BuildPartial();
        } else {
          result.banner_ = value;
        }
        result.hasBanner = true;
        return this;
      }
      public Builder ClearBanner() {
        PrepareBuilder();
        result.hasBanner = false;
        result.banner_ = null;
        return this;
      }
      
      public bool HasDbErrCode {
        get { return result.hasDbErrCode; }
      }
      public int DbErrCode {
        get { return result.DbErrCode; }
        set { SetDbErrCode(value); }
      }
      public Builder SetDbErrCode(int value) {
        PrepareBuilder();
        result.hasDbErrCode = true;
        result.dbErrCode_ = value;
        return this;
      }
      public Builder ClearDbErrCode() {
        PrepareBuilder();
        result.hasDbErrCode = false;
        result.dbErrCode_ = 0;
        return this;
      }
    }
    static BannerSaveConfirm() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ClientAccountTransferRequest : pb::GeneratedMessage<ClientAccountTransferRequest, ClientAccountTransferRequest.Builder> {
    private ClientAccountTransferRequest() { }
    private static readonly ClientAccountTransferRequest defaultInstance = new ClientAccountTransferRequest().MakeReadOnly();
    private static readonly string[] _clientAccountTransferRequestFieldNames = new string[] { "game_account_id", "region" };
    private static readonly uint[] _clientAccountTransferRequestFieldTags = new uint[] { 16, 10 };
    public static ClientAccountTransferRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClientAccountTransferRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ClientAccountTransferRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ClientAccountTransferRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClientAccountTransferRequest, ClientAccountTransferRequest.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ClientAccountTransferRequest__FieldAccessorTable; }
    }
    
    public const int RegionFieldNumber = 1;
    private bool hasRegion;
    private string region_ = "";
    public bool HasRegion {
      get { return hasRegion; }
    }
    public string Region {
      get { return region_; }
    }
    
    public const int GameAccountIdFieldNumber = 2;
    private bool hasGameAccountId;
    private ulong gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public ulong GameAccountId {
      get { return gameAccountId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRegion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _clientAccountTransferRequestFieldNames;
      if (hasRegion) {
        output.WriteString(1, field_names[1], Region);
      }
      if (hasGameAccountId) {
        output.WriteUInt64(2, field_names[0], GameAccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRegion) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Region);
        }
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, GameAccountId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClientAccountTransferRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientAccountTransferRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientAccountTransferRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientAccountTransferRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientAccountTransferRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientAccountTransferRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClientAccountTransferRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClientAccountTransferRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClientAccountTransferRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientAccountTransferRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ClientAccountTransferRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClientAccountTransferRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ClientAccountTransferRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ClientAccountTransferRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ClientAccountTransferRequest result;
      
      private ClientAccountTransferRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ClientAccountTransferRequest original = result;
          result = new ClientAccountTransferRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ClientAccountTransferRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ClientAccountTransferRequest.Descriptor; }
      }
      
      public override ClientAccountTransferRequest DefaultInstanceForType {
        get { return global::D3.GameMessage.ClientAccountTransferRequest.DefaultInstance; }
      }
      
      public override ClientAccountTransferRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClientAccountTransferRequest) {
          return MergeFrom((ClientAccountTransferRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClientAccountTransferRequest other) {
        if (other == global::D3.GameMessage.ClientAccountTransferRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRegion) {
          Region = other.Region;
        }
        if (other.HasGameAccountId) {
          GameAccountId = other.GameAccountId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_clientAccountTransferRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _clientAccountTransferRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasRegion = input.ReadString(ref result.region_);
              break;
            }
            case 16: {
              result.hasGameAccountId = input.ReadUInt64(ref result.gameAccountId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRegion {
        get { return result.hasRegion; }
      }
      public string Region {
        get { return result.Region; }
        set { SetRegion(value); }
      }
      public Builder SetRegion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRegion = true;
        result.region_ = value;
        return this;
      }
      public Builder ClearRegion() {
        PrepareBuilder();
        result.hasRegion = false;
        result.region_ = "";
        return this;
      }
      
      public bool HasGameAccountId {
        get { return result.hasGameAccountId; }
      }
      public ulong GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(ulong value) {
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = 0UL;
        return this;
      }
    }
    static ClientAccountTransferRequest() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class NumPlayersRequest : pb::GeneratedMessage<NumPlayersRequest, NumPlayersRequest.Builder> {
    private NumPlayersRequest() { }
    private static readonly NumPlayersRequest defaultInstance = new NumPlayersRequest().MakeReadOnly();
    private static readonly string[] _numPlayersRequestFieldNames = new string[] {  };
    private static readonly uint[] _numPlayersRequestFieldTags = new uint[] {  };
    public static NumPlayersRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NumPlayersRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NumPlayersRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_NumPlayersRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NumPlayersRequest, NumPlayersRequest.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_NumPlayersRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _numPlayersRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NumPlayersRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NumPlayersRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NumPlayersRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NumPlayersRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NumPlayersRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NumPlayersRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NumPlayersRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NumPlayersRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NumPlayersRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NumPlayersRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NumPlayersRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NumPlayersRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<NumPlayersRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NumPlayersRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NumPlayersRequest result;
      
      private NumPlayersRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NumPlayersRequest original = result;
          result = new NumPlayersRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NumPlayersRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.NumPlayersRequest.Descriptor; }
      }
      
      public override NumPlayersRequest DefaultInstanceForType {
        get { return global::D3.GameMessage.NumPlayersRequest.DefaultInstance; }
      }
      
      public override NumPlayersRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NumPlayersRequest) {
          return MergeFrom((NumPlayersRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NumPlayersRequest other) {
        if (other == global::D3.GameMessage.NumPlayersRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_numPlayersRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _numPlayersRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static NumPlayersRequest() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class NumPlayersResponse : pb::GeneratedMessage<NumPlayersResponse, NumPlayersResponse.Builder> {
    private NumPlayersResponse() { }
    private static readonly NumPlayersResponse defaultInstance = new NumPlayersResponse().MakeReadOnly();
    private static readonly string[] _numPlayersResponseFieldNames = new string[] { "result" };
    private static readonly uint[] _numPlayersResponseFieldTags = new uint[] { 8 };
    public static NumPlayersResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NumPlayersResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NumPlayersResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_NumPlayersResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NumPlayersResponse, NumPlayersResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_NumPlayersResponse__FieldAccessorTable; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasResult) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _numPlayersResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasResult) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NumPlayersResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NumPlayersResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NumPlayersResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NumPlayersResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NumPlayersResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NumPlayersResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NumPlayersResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NumPlayersResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NumPlayersResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NumPlayersResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NumPlayersResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NumPlayersResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<NumPlayersResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NumPlayersResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NumPlayersResponse result;
      
      private NumPlayersResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NumPlayersResponse original = result;
          result = new NumPlayersResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NumPlayersResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.NumPlayersResponse.Descriptor; }
      }
      
      public override NumPlayersResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.NumPlayersResponse.DefaultInstance; }
      }
      
      public override NumPlayersResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NumPlayersResponse) {
          return MergeFrom((NumPlayersResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NumPlayersResponse other) {
        if (other == global::D3.GameMessage.NumPlayersResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_numPlayersResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _numPlayersResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
    }
    static NumPlayersResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetHeroAttributesRequest : pb::GeneratedMessage<GetHeroAttributesRequest, GetHeroAttributesRequest.Builder> {
    private GetHeroAttributesRequest() { }
    private static readonly GetHeroAttributesRequest defaultInstance = new GetHeroAttributesRequest().MakeReadOnly();
    private static readonly string[] _getHeroAttributesRequestFieldNames = new string[] { "hero_id" };
    private static readonly uint[] _getHeroAttributesRequestFieldTags = new uint[] { 8 };
    public static GetHeroAttributesRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetHeroAttributesRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetHeroAttributesRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetHeroAttributesRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetHeroAttributesRequest, GetHeroAttributesRequest.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetHeroAttributesRequest__FieldAccessorTable; }
    }
    
    public const int HeroIdFieldNumber = 1;
    private bool hasHeroId;
    private ulong heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public ulong HeroId {
      get { return heroId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getHeroAttributesRequestFieldNames;
      if (hasHeroId) {
        output.WriteUInt64(1, field_names[0], HeroId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, HeroId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetHeroAttributesRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetHeroAttributesRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetHeroAttributesRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetHeroAttributesRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetHeroAttributesRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetHeroAttributesRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetHeroAttributesRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetHeroAttributesRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetHeroAttributesRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetHeroAttributesRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetHeroAttributesRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetHeroAttributesRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetHeroAttributesRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetHeroAttributesRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetHeroAttributesRequest result;
      
      private GetHeroAttributesRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetHeroAttributesRequest original = result;
          result = new GetHeroAttributesRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetHeroAttributesRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GetHeroAttributesRequest.Descriptor; }
      }
      
      public override GetHeroAttributesRequest DefaultInstanceForType {
        get { return global::D3.GameMessage.GetHeroAttributesRequest.DefaultInstance; }
      }
      
      public override GetHeroAttributesRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetHeroAttributesRequest) {
          return MergeFrom((GetHeroAttributesRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetHeroAttributesRequest other) {
        if (other == global::D3.GameMessage.GetHeroAttributesRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getHeroAttributesRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getHeroAttributesRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHeroId = input.ReadUInt64(ref result.heroId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public ulong HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(ulong value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0UL;
        return this;
      }
    }
    static GetHeroAttributesRequest() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MailContents : pb::GeneratedMessage<MailContents, MailContents.Builder> {
    private MailContents() { }
    private static readonly MailContents defaultInstance = new MailContents().MakeReadOnly();
    private static readonly string[] _mailContentsFieldNames = new string[] { "append_messages", "mails" };
    private static readonly uint[] _mailContentsFieldTags = new uint[] { 8, 18 };
    public static MailContents DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MailContents DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MailContents ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_MailContents__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MailContents, MailContents.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_MailContents__FieldAccessorTable; }
    }
    
    public const int AppendMessagesFieldNumber = 1;
    private bool hasAppendMessages;
    private bool appendMessages_;
    public bool HasAppendMessages {
      get { return hasAppendMessages; }
    }
    public bool AppendMessages {
      get { return appendMessages_; }
    }
    
    public const int MailsFieldNumber = 2;
    private bool hasMails;
    private global::D3.Items.Mails mails_;
    public bool HasMails {
      get { return hasMails; }
    }
    public global::D3.Items.Mails Mails {
      get { return mails_ ?? global::D3.Items.Mails.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAppendMessages) return false;
        if (!hasMails) return false;
        if (!Mails.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mailContentsFieldNames;
      if (hasAppendMessages) {
        output.WriteBool(1, field_names[0], AppendMessages);
      }
      if (hasMails) {
        output.WriteMessage(2, field_names[1], Mails);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAppendMessages) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, AppendMessages);
        }
        if (hasMails) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Mails);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MailContents ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MailContents ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MailContents ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MailContents ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MailContents ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MailContents ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MailContents ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MailContents ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MailContents ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MailContents ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MailContents MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MailContents prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MailContents, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MailContents cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MailContents result;
      
      private MailContents PrepareBuilder() {
        if (resultIsReadOnly) {
          MailContents original = result;
          result = new MailContents();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MailContents MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.MailContents.Descriptor; }
      }
      
      public override MailContents DefaultInstanceForType {
        get { return global::D3.GameMessage.MailContents.DefaultInstance; }
      }
      
      public override MailContents BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MailContents) {
          return MergeFrom((MailContents) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MailContents other) {
        if (other == global::D3.GameMessage.MailContents.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAppendMessages) {
          AppendMessages = other.AppendMessages;
        }
        if (other.HasMails) {
          MergeMails(other.Mails);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mailContentsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mailContentsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAppendMessages = input.ReadBool(ref result.appendMessages_);
              break;
            }
            case 18: {
              global::D3.Items.Mails.Builder subBuilder = global::D3.Items.Mails.CreateBuilder();
              if (result.hasMails) {
                subBuilder.MergeFrom(Mails);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Mails = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAppendMessages {
        get { return result.hasAppendMessages; }
      }
      public bool AppendMessages {
        get { return result.AppendMessages; }
        set { SetAppendMessages(value); }
      }
      public Builder SetAppendMessages(bool value) {
        PrepareBuilder();
        result.hasAppendMessages = true;
        result.appendMessages_ = value;
        return this;
      }
      public Builder ClearAppendMessages() {
        PrepareBuilder();
        result.hasAppendMessages = false;
        result.appendMessages_ = false;
        return this;
      }
      
      public bool HasMails {
       get { return result.hasMails; }
      }
      public global::D3.Items.Mails Mails {
        get { return result.Mails; }
        set { SetMails(value); }
      }
      public Builder SetMails(global::D3.Items.Mails value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMails = true;
        result.mails_ = value;
        return this;
      }
      public Builder SetMails(global::D3.Items.Mails.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMails = true;
        result.mails_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMails(global::D3.Items.Mails value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMails &&
            result.mails_ != global::D3.Items.Mails.DefaultInstance) {
            result.mails_ = global::D3.Items.Mails.CreateBuilder(result.mails_).MergeFrom(value).BuildPartial();
        } else {
          result.mails_ = value;
        }
        result.hasMails = true;
        return this;
      }
      public Builder ClearMails() {
        PrepareBuilder();
        result.hasMails = false;
        result.mails_ = null;
        return this;
      }
    }
    static MailContents() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MailOperation : pb::GeneratedMessage<MailOperation, MailOperation.Builder> {
    private MailOperation() { }
    private static readonly MailOperation defaultInstance = new MailOperation().MakeReadOnly();
    private static readonly string[] _mailOperationFieldNames = new string[] { "mail_ids", "mail_operation" };
    private static readonly uint[] _mailOperationFieldTags = new uint[] { 16, 8 };
    public static MailOperation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MailOperation DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MailOperation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_MailOperation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MailOperation, MailOperation.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_MailOperation__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Operation {
        MAIL_RETRIEVE = 0,
        MAIL_DELETE = 1,
        MAIL_READ = 2,
      }
      
    }
    #endregion
    
    public const int MailOperation_FieldNumber = 1;
    private bool hasMailOperation_;
    private global::D3.GameMessage.MailOperation.Types.Operation mailOperation_ = global::D3.GameMessage.MailOperation.Types.Operation.MAIL_RETRIEVE;
    public bool HasMailOperation_ {
      get { return hasMailOperation_; }
    }
    public global::D3.GameMessage.MailOperation.Types.Operation MailOperation_ {
      get { return mailOperation_; }
    }
    
    public const int MailIdsFieldNumber = 2;
    private pbc::PopsicleList<ulong> mailIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> MailIdsList {
      get { return pbc::Lists.AsReadOnly(mailIds_); }
    }
    public int MailIdsCount {
      get { return mailIds_.Count; }
    }
    public ulong GetMailIds(int index) {
      return mailIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMailOperation_) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mailOperationFieldNames;
      if (hasMailOperation_) {
        output.WriteEnum(1, field_names[1], (int) MailOperation_, MailOperation_);
      }
      if (mailIds_.Count > 0) {
        output.WriteUInt64Array(2, field_names[0], mailIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMailOperation_) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) MailOperation_);
        }
        {
          int dataSize = 0;
          foreach (ulong element in MailIdsList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * mailIds_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MailOperation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MailOperation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MailOperation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MailOperation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MailOperation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MailOperation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MailOperation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MailOperation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MailOperation ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MailOperation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MailOperation MakeReadOnly() {
      mailIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MailOperation prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MailOperation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MailOperation cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MailOperation result;
      
      private MailOperation PrepareBuilder() {
        if (resultIsReadOnly) {
          MailOperation original = result;
          result = new MailOperation();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MailOperation MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.MailOperation.Descriptor; }
      }
      
      public override MailOperation DefaultInstanceForType {
        get { return global::D3.GameMessage.MailOperation.DefaultInstance; }
      }
      
      public override MailOperation BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MailOperation) {
          return MergeFrom((MailOperation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MailOperation other) {
        if (other == global::D3.GameMessage.MailOperation.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMailOperation_) {
          MailOperation_ = other.MailOperation_;
        }
        if (other.mailIds_.Count != 0) {
          result.mailIds_.Add(other.mailIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mailOperationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mailOperationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.mailOperation_, out unknown)) {
                result.hasMailOperation_ = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt64Array(tag, field_name, result.mailIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMailOperation_ {
       get { return result.hasMailOperation_; }
      }
      public global::D3.GameMessage.MailOperation.Types.Operation MailOperation_ {
        get { return result.MailOperation_; }
        set { SetMailOperation_(value); }
      }
      public Builder SetMailOperation_(global::D3.GameMessage.MailOperation.Types.Operation value) {
        PrepareBuilder();
        result.hasMailOperation_ = true;
        result.mailOperation_ = value;
        return this;
      }
      public Builder ClearMailOperation_() {
        PrepareBuilder();
        result.hasMailOperation_ = false;
        result.mailOperation_ = global::D3.GameMessage.MailOperation.Types.Operation.MAIL_RETRIEVE;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> MailIdsList {
        get { return PrepareBuilder().mailIds_; }
      }
      public int MailIdsCount {
        get { return result.MailIdsCount; }
      }
      public ulong GetMailIds(int index) {
        return result.GetMailIds(index);
      }
      public Builder SetMailIds(int index, ulong value) {
        PrepareBuilder();
        result.mailIds_[index] = value;
        return this;
      }
      public Builder AddMailIds(ulong value) {
        PrepareBuilder();
        result.mailIds_.Add(value);
        return this;
      }
      public Builder AddRangeMailIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.mailIds_.Add(values);
        return this;
      }
      public Builder ClearMailIds() {
        PrepareBuilder();
        result.mailIds_.Clear();
        return this;
      }
    }
    static MailOperation() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MailOperationResponseResult : pb::GeneratedMessage<MailOperationResponseResult, MailOperationResponseResult.Builder> {
    private MailOperationResponseResult() { }
    private static readonly MailOperationResponseResult defaultInstance = new MailOperationResponseResult().MakeReadOnly();
    private static readonly string[] _mailOperationResponseResultFieldNames = new string[] { "mail_error", "mail_id" };
    private static readonly uint[] _mailOperationResponseResultFieldTags = new uint[] { 16, 8 };
    public static MailOperationResponseResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MailOperationResponseResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MailOperationResponseResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_MailOperationResponseResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MailOperationResponseResult, MailOperationResponseResult.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_MailOperationResponseResult__FieldAccessorTable; }
    }
    
    public const int MailIdFieldNumber = 1;
    private bool hasMailId;
    private ulong mailId_;
    public bool HasMailId {
      get { return hasMailId; }
    }
    public ulong MailId {
      get { return mailId_; }
    }
    
    public const int MailErrorFieldNumber = 2;
    private bool hasMailError;
    private uint mailError_;
    public bool HasMailError {
      get { return hasMailError; }
    }
    public uint MailError {
      get { return mailError_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMailId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mailOperationResponseResultFieldNames;
      if (hasMailId) {
        output.WriteUInt64(1, field_names[1], MailId);
      }
      if (hasMailError) {
        output.WriteUInt32(2, field_names[0], MailError);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMailId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, MailId);
        }
        if (hasMailError) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, MailError);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MailOperationResponseResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MailOperationResponseResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MailOperationResponseResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MailOperationResponseResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MailOperationResponseResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MailOperationResponseResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MailOperationResponseResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MailOperationResponseResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MailOperationResponseResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MailOperationResponseResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MailOperationResponseResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MailOperationResponseResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MailOperationResponseResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MailOperationResponseResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MailOperationResponseResult result;
      
      private MailOperationResponseResult PrepareBuilder() {
        if (resultIsReadOnly) {
          MailOperationResponseResult original = result;
          result = new MailOperationResponseResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MailOperationResponseResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.MailOperationResponseResult.Descriptor; }
      }
      
      public override MailOperationResponseResult DefaultInstanceForType {
        get { return global::D3.GameMessage.MailOperationResponseResult.DefaultInstance; }
      }
      
      public override MailOperationResponseResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MailOperationResponseResult) {
          return MergeFrom((MailOperationResponseResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MailOperationResponseResult other) {
        if (other == global::D3.GameMessage.MailOperationResponseResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMailId) {
          MailId = other.MailId;
        }
        if (other.HasMailError) {
          MailError = other.MailError;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mailOperationResponseResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mailOperationResponseResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMailId = input.ReadUInt64(ref result.mailId_);
              break;
            }
            case 16: {
              result.hasMailError = input.ReadUInt32(ref result.mailError_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMailId {
        get { return result.hasMailId; }
      }
      public ulong MailId {
        get { return result.MailId; }
        set { SetMailId(value); }
      }
      public Builder SetMailId(ulong value) {
        PrepareBuilder();
        result.hasMailId = true;
        result.mailId_ = value;
        return this;
      }
      public Builder ClearMailId() {
        PrepareBuilder();
        result.hasMailId = false;
        result.mailId_ = 0UL;
        return this;
      }
      
      public bool HasMailError {
        get { return result.hasMailError; }
      }
      public uint MailError {
        get { return result.MailError; }
        set { SetMailError(value); }
      }
      public Builder SetMailError(uint value) {
        PrepareBuilder();
        result.hasMailError = true;
        result.mailError_ = value;
        return this;
      }
      public Builder ClearMailError() {
        PrepareBuilder();
        result.hasMailError = false;
        result.mailError_ = 0;
        return this;
      }
    }
    static MailOperationResponseResult() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MailOperationResponse : pb::GeneratedMessage<MailOperationResponse, MailOperationResponse.Builder> {
    private MailOperationResponse() { }
    private static readonly MailOperationResponse defaultInstance = new MailOperationResponse().MakeReadOnly();
    private static readonly string[] _mailOperationResponseFieldNames = new string[] { "mail_operation", "mail_operation_results" };
    private static readonly uint[] _mailOperationResponseFieldTags = new uint[] { 8, 18 };
    public static MailOperationResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MailOperationResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MailOperationResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_MailOperationResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MailOperationResponse, MailOperationResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_MailOperationResponse__FieldAccessorTable; }
    }
    
    public const int MailOperationFieldNumber = 1;
    private bool hasMailOperation;
    private global::D3.GameMessage.MailOperation.Types.Operation mailOperation_ = global::D3.GameMessage.MailOperation.Types.Operation.MAIL_RETRIEVE;
    public bool HasMailOperation {
      get { return hasMailOperation; }
    }
    public global::D3.GameMessage.MailOperation.Types.Operation MailOperation {
      get { return mailOperation_; }
    }
    
    public const int MailOperationResultsFieldNumber = 2;
    private pbc::PopsicleList<global::D3.GameMessage.MailOperationResponseResult> mailOperationResults_ = new pbc::PopsicleList<global::D3.GameMessage.MailOperationResponseResult>();
    public scg::IList<global::D3.GameMessage.MailOperationResponseResult> MailOperationResultsList {
      get { return mailOperationResults_; }
    }
    public int MailOperationResultsCount {
      get { return mailOperationResults_.Count; }
    }
    public global::D3.GameMessage.MailOperationResponseResult GetMailOperationResults(int index) {
      return mailOperationResults_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMailOperation) return false;
        foreach (global::D3.GameMessage.MailOperationResponseResult element in MailOperationResultsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mailOperationResponseFieldNames;
      if (hasMailOperation) {
        output.WriteEnum(1, field_names[0], (int) MailOperation, MailOperation);
      }
      if (mailOperationResults_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], mailOperationResults_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMailOperation) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) MailOperation);
        }
        foreach (global::D3.GameMessage.MailOperationResponseResult element in MailOperationResultsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MailOperationResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MailOperationResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MailOperationResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MailOperationResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MailOperationResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MailOperationResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MailOperationResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MailOperationResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MailOperationResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MailOperationResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MailOperationResponse MakeReadOnly() {
      mailOperationResults_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MailOperationResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MailOperationResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MailOperationResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MailOperationResponse result;
      
      private MailOperationResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          MailOperationResponse original = result;
          result = new MailOperationResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MailOperationResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.MailOperationResponse.Descriptor; }
      }
      
      public override MailOperationResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.MailOperationResponse.DefaultInstance; }
      }
      
      public override MailOperationResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MailOperationResponse) {
          return MergeFrom((MailOperationResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MailOperationResponse other) {
        if (other == global::D3.GameMessage.MailOperationResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMailOperation) {
          MailOperation = other.MailOperation;
        }
        if (other.mailOperationResults_.Count != 0) {
          result.mailOperationResults_.Add(other.mailOperationResults_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mailOperationResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mailOperationResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.mailOperation_, out unknown)) {
                result.hasMailOperation = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.mailOperationResults_, global::D3.GameMessage.MailOperationResponseResult.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMailOperation {
       get { return result.hasMailOperation; }
      }
      public global::D3.GameMessage.MailOperation.Types.Operation MailOperation {
        get { return result.MailOperation; }
        set { SetMailOperation(value); }
      }
      public Builder SetMailOperation(global::D3.GameMessage.MailOperation.Types.Operation value) {
        PrepareBuilder();
        result.hasMailOperation = true;
        result.mailOperation_ = value;
        return this;
      }
      public Builder ClearMailOperation() {
        PrepareBuilder();
        result.hasMailOperation = false;
        result.mailOperation_ = global::D3.GameMessage.MailOperation.Types.Operation.MAIL_RETRIEVE;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.GameMessage.MailOperationResponseResult> MailOperationResultsList {
        get { return PrepareBuilder().mailOperationResults_; }
      }
      public int MailOperationResultsCount {
        get { return result.MailOperationResultsCount; }
      }
      public global::D3.GameMessage.MailOperationResponseResult GetMailOperationResults(int index) {
        return result.GetMailOperationResults(index);
      }
      public Builder SetMailOperationResults(int index, global::D3.GameMessage.MailOperationResponseResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mailOperationResults_[index] = value;
        return this;
      }
      public Builder SetMailOperationResults(int index, global::D3.GameMessage.MailOperationResponseResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mailOperationResults_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMailOperationResults(global::D3.GameMessage.MailOperationResponseResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mailOperationResults_.Add(value);
        return this;
      }
      public Builder AddMailOperationResults(global::D3.GameMessage.MailOperationResponseResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mailOperationResults_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMailOperationResults(scg::IEnumerable<global::D3.GameMessage.MailOperationResponseResult> values) {
        PrepareBuilder();
        result.mailOperationResults_.Add(values);
        return this;
      }
      public Builder ClearMailOperationResults() {
        PrepareBuilder();
        result.mailOperationResults_.Clear();
        return this;
      }
    }
    static MailOperationResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TutorialFlags : pb::GeneratedMessage<TutorialFlags, TutorialFlags.Builder> {
    private TutorialFlags() { }
    private static readonly TutorialFlags defaultInstance = new TutorialFlags().MakeReadOnly();
    private static readonly string[] _tutorialFlagsFieldNames = new string[] { "seen_tutorials" };
    private static readonly uint[] _tutorialFlagsFieldTags = new uint[] { 10 };
    public static TutorialFlags DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TutorialFlags DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TutorialFlags ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TutorialFlags__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TutorialFlags, TutorialFlags.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TutorialFlags__FieldAccessorTable; }
    }
    
    public const int SeenTutorialsFieldNumber = 1;
    private bool hasSeenTutorials;
    private pb::ByteString seenTutorials_ = pb::ByteString.Empty;
    public bool HasSeenTutorials {
      get { return hasSeenTutorials; }
    }
    public pb::ByteString SeenTutorials {
      get { return seenTutorials_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSeenTutorials) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tutorialFlagsFieldNames;
      if (hasSeenTutorials) {
        output.WriteBytes(1, field_names[0], SeenTutorials);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSeenTutorials) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, SeenTutorials);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TutorialFlags ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TutorialFlags ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TutorialFlags ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TutorialFlags ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TutorialFlags ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TutorialFlags ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TutorialFlags ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TutorialFlags ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TutorialFlags ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TutorialFlags ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TutorialFlags MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TutorialFlags prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TutorialFlags, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TutorialFlags cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TutorialFlags result;
      
      private TutorialFlags PrepareBuilder() {
        if (resultIsReadOnly) {
          TutorialFlags original = result;
          result = new TutorialFlags();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TutorialFlags MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.TutorialFlags.Descriptor; }
      }
      
      public override TutorialFlags DefaultInstanceForType {
        get { return global::D3.GameMessage.TutorialFlags.DefaultInstance; }
      }
      
      public override TutorialFlags BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TutorialFlags) {
          return MergeFrom((TutorialFlags) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TutorialFlags other) {
        if (other == global::D3.GameMessage.TutorialFlags.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSeenTutorials) {
          SeenTutorials = other.SeenTutorials;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tutorialFlagsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tutorialFlagsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSeenTutorials = input.ReadBytes(ref result.seenTutorials_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSeenTutorials {
        get { return result.hasSeenTutorials; }
      }
      public pb::ByteString SeenTutorials {
        get { return result.SeenTutorials; }
        set { SetSeenTutorials(value); }
      }
      public Builder SetSeenTutorials(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeenTutorials = true;
        result.seenTutorials_ = value;
        return this;
      }
      public Builder ClearSeenTutorials() {
        PrepareBuilder();
        result.hasSeenTutorials = false;
        result.seenTutorials_ = pb::ByteString.Empty;
        return this;
      }
    }
    static TutorialFlags() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ResetHeroStoryProgress : pb::GeneratedMessage<ResetHeroStoryProgress, ResetHeroStoryProgress.Builder> {
    private ResetHeroStoryProgress() { }
    private static readonly ResetHeroStoryProgress defaultInstance = new ResetHeroStoryProgress().MakeReadOnly();
    private static readonly string[] _resetHeroStoryProgressFieldNames = new string[] { "hero_id" };
    private static readonly uint[] _resetHeroStoryProgressFieldTags = new uint[] { 8 };
    public static ResetHeroStoryProgress DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ResetHeroStoryProgress DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ResetHeroStoryProgress ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ResetHeroStoryProgress__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ResetHeroStoryProgress, ResetHeroStoryProgress.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ResetHeroStoryProgress__FieldAccessorTable; }
    }
    
    public const int HeroIdFieldNumber = 1;
    private bool hasHeroId;
    private ulong heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public ulong HeroId {
      get { return heroId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _resetHeroStoryProgressFieldNames;
      if (hasHeroId) {
        output.WriteUInt64(1, field_names[0], HeroId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, HeroId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ResetHeroStoryProgress ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ResetHeroStoryProgress ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ResetHeroStoryProgress ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ResetHeroStoryProgress ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ResetHeroStoryProgress ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ResetHeroStoryProgress ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ResetHeroStoryProgress ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ResetHeroStoryProgress ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ResetHeroStoryProgress ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ResetHeroStoryProgress ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ResetHeroStoryProgress MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ResetHeroStoryProgress prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ResetHeroStoryProgress, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ResetHeroStoryProgress cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ResetHeroStoryProgress result;
      
      private ResetHeroStoryProgress PrepareBuilder() {
        if (resultIsReadOnly) {
          ResetHeroStoryProgress original = result;
          result = new ResetHeroStoryProgress();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ResetHeroStoryProgress MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ResetHeroStoryProgress.Descriptor; }
      }
      
      public override ResetHeroStoryProgress DefaultInstanceForType {
        get { return global::D3.GameMessage.ResetHeroStoryProgress.DefaultInstance; }
      }
      
      public override ResetHeroStoryProgress BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ResetHeroStoryProgress) {
          return MergeFrom((ResetHeroStoryProgress) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ResetHeroStoryProgress other) {
        if (other == global::D3.GameMessage.ResetHeroStoryProgress.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_resetHeroStoryProgressFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _resetHeroStoryProgressFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHeroId = input.ReadUInt64(ref result.heroId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public ulong HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(ulong value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0UL;
        return this;
      }
    }
    static ResetHeroStoryProgress() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ForceAccountMigration : pb::GeneratedMessage<ForceAccountMigration, ForceAccountMigration.Builder> {
    private ForceAccountMigration() { }
    private static readonly ForceAccountMigration defaultInstance = new ForceAccountMigration().MakeReadOnly();
    private static readonly string[] _forceAccountMigrationFieldNames = new string[] {  };
    private static readonly uint[] _forceAccountMigrationFieldTags = new uint[] {  };
    public static ForceAccountMigration DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ForceAccountMigration DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ForceAccountMigration ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ForceAccountMigration__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ForceAccountMigration, ForceAccountMigration.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ForceAccountMigration__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _forceAccountMigrationFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ForceAccountMigration ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ForceAccountMigration ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ForceAccountMigration ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ForceAccountMigration ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ForceAccountMigration ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ForceAccountMigration ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ForceAccountMigration ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ForceAccountMigration ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ForceAccountMigration ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ForceAccountMigration ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ForceAccountMigration MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ForceAccountMigration prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ForceAccountMigration, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ForceAccountMigration cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ForceAccountMigration result;
      
      private ForceAccountMigration PrepareBuilder() {
        if (resultIsReadOnly) {
          ForceAccountMigration original = result;
          result = new ForceAccountMigration();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ForceAccountMigration MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ForceAccountMigration.Descriptor; }
      }
      
      public override ForceAccountMigration DefaultInstanceForType {
        get { return global::D3.GameMessage.ForceAccountMigration.DefaultInstance; }
      }
      
      public override ForceAccountMigration BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ForceAccountMigration) {
          return MergeFrom((ForceAccountMigration) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ForceAccountMigration other) {
        if (other == global::D3.GameMessage.ForceAccountMigration.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_forceAccountMigrationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _forceAccountMigrationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static ForceAccountMigration() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class EquipCosmeticItem : pb::GeneratedMessage<EquipCosmeticItem, EquipCosmeticItem.Builder> {
    private EquipCosmeticItem() { }
    private static readonly EquipCosmeticItem defaultInstance = new EquipCosmeticItem().MakeReadOnly();
    private static readonly string[] _equipCosmeticItemFieldNames = new string[] { "cosmetic_item_type", "gbid", "hero_id" };
    private static readonly uint[] _equipCosmeticItemFieldTags = new uint[] { 16, 29, 8 };
    public static EquipCosmeticItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EquipCosmeticItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EquipCosmeticItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_EquipCosmeticItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EquipCosmeticItem, EquipCosmeticItem.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_EquipCosmeticItem__FieldAccessorTable; }
    }
    
    public const int HeroIdFieldNumber = 1;
    private bool hasHeroId;
    private ulong heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public ulong HeroId {
      get { return heroId_; }
    }
    
    public const int CosmeticItemTypeFieldNumber = 2;
    private bool hasCosmeticItemType;
    private int cosmeticItemType_;
    public bool HasCosmeticItemType {
      get { return hasCosmeticItemType; }
    }
    public int CosmeticItemType {
      get { return cosmeticItemType_; }
    }
    
    public const int GbidFieldNumber = 3;
    private bool hasGbid;
    private int gbid_ = -1;
    public bool HasGbid {
      get { return hasGbid; }
    }
    public int Gbid {
      get { return gbid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroId) return false;
        if (!hasCosmeticItemType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _equipCosmeticItemFieldNames;
      if (hasHeroId) {
        output.WriteUInt64(1, field_names[2], HeroId);
      }
      if (hasCosmeticItemType) {
        output.WriteInt32(2, field_names[0], CosmeticItemType);
      }
      if (hasGbid) {
        output.WriteSFixed32(3, field_names[1], Gbid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, HeroId);
        }
        if (hasCosmeticItemType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, CosmeticItemType);
        }
        if (hasGbid) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(3, Gbid);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EquipCosmeticItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EquipCosmeticItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EquipCosmeticItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EquipCosmeticItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EquipCosmeticItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EquipCosmeticItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EquipCosmeticItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EquipCosmeticItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EquipCosmeticItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EquipCosmeticItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EquipCosmeticItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EquipCosmeticItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<EquipCosmeticItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EquipCosmeticItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EquipCosmeticItem result;
      
      private EquipCosmeticItem PrepareBuilder() {
        if (resultIsReadOnly) {
          EquipCosmeticItem original = result;
          result = new EquipCosmeticItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EquipCosmeticItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.EquipCosmeticItem.Descriptor; }
      }
      
      public override EquipCosmeticItem DefaultInstanceForType {
        get { return global::D3.GameMessage.EquipCosmeticItem.DefaultInstance; }
      }
      
      public override EquipCosmeticItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EquipCosmeticItem) {
          return MergeFrom((EquipCosmeticItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EquipCosmeticItem other) {
        if (other == global::D3.GameMessage.EquipCosmeticItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        if (other.HasCosmeticItemType) {
          CosmeticItemType = other.CosmeticItemType;
        }
        if (other.HasGbid) {
          Gbid = other.Gbid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_equipCosmeticItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _equipCosmeticItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHeroId = input.ReadUInt64(ref result.heroId_);
              break;
            }
            case 16: {
              result.hasCosmeticItemType = input.ReadInt32(ref result.cosmeticItemType_);
              break;
            }
            case 29: {
              result.hasGbid = input.ReadSFixed32(ref result.gbid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public ulong HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(ulong value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0UL;
        return this;
      }
      
      public bool HasCosmeticItemType {
        get { return result.hasCosmeticItemType; }
      }
      public int CosmeticItemType {
        get { return result.CosmeticItemType; }
        set { SetCosmeticItemType(value); }
      }
      public Builder SetCosmeticItemType(int value) {
        PrepareBuilder();
        result.hasCosmeticItemType = true;
        result.cosmeticItemType_ = value;
        return this;
      }
      public Builder ClearCosmeticItemType() {
        PrepareBuilder();
        result.hasCosmeticItemType = false;
        result.cosmeticItemType_ = 0;
        return this;
      }
      
      public bool HasGbid {
        get { return result.hasGbid; }
      }
      public int Gbid {
        get { return result.Gbid; }
        set { SetGbid(value); }
      }
      public Builder SetGbid(int value) {
        PrepareBuilder();
        result.hasGbid = true;
        result.gbid_ = value;
        return this;
      }
      public Builder ClearGbid() {
        PrepareBuilder();
        result.hasGbid = false;
        result.gbid_ = -1;
        return this;
      }
    }
    static EquipCosmeticItem() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildId : pb::GeneratedMessage<GuildId, GuildId.Builder> {
    private GuildId() { }
    private static readonly GuildId defaultInstance = new GuildId().MakeReadOnly();
    private static readonly string[] _guildIdFieldNames = new string[] { "guild_id" };
    private static readonly uint[] _guildIdFieldTags = new uint[] { 8 };
    public static GuildId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildId, GuildId.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildId__FieldAccessorTable; }
    }
    
    public const int GuildId_FieldNumber = 1;
    private bool hasGuildId_;
    private ulong guildId_;
    public bool HasGuildId_ {
      get { return hasGuildId_; }
    }
    public ulong GuildId_ {
      get { return guildId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId_) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildIdFieldNames;
      if (hasGuildId_) {
        output.WriteUInt64(1, field_names[0], GuildId_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId_) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId_);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildId result;
      
      private GuildId PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildId original = result;
          result = new GuildId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildId.Descriptor; }
      }
      
      public override GuildId DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildId.DefaultInstance; }
      }
      
      public override GuildId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildId) {
          return MergeFrom((GuildId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildId other) {
        if (other == global::D3.GameMessage.GuildId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId_) {
          GuildId_ = other.GuildId_;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId_ = input.ReadUInt64(ref result.guildId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId_ {
        get { return result.hasGuildId_; }
      }
      public ulong GuildId_ {
        get { return result.GuildId_; }
        set { SetGuildId_(value); }
      }
      public Builder SetGuildId_(ulong value) {
        PrepareBuilder();
        result.hasGuildId_ = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId_() {
        PrepareBuilder();
        result.hasGuildId_ = false;
        result.guildId_ = 0UL;
        return this;
      }
    }
    static GuildId() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildIds : pb::GeneratedMessage<GuildIds, GuildIds.Builder> {
    private GuildIds() { }
    private static readonly GuildIds defaultInstance = new GuildIds().MakeReadOnly();
    private static readonly string[] _guildIdsFieldNames = new string[] { "guild_ids" };
    private static readonly uint[] _guildIdsFieldTags = new uint[] { 8 };
    public static GuildIds DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildIds DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildIds ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildIds__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildIds, GuildIds.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildIds__FieldAccessorTable; }
    }
    
    public const int GuildIds_FieldNumber = 1;
    private pbc::PopsicleList<ulong> guildIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> GuildIds_List {
      get { return pbc::Lists.AsReadOnly(guildIds_); }
    }
    public int GuildIds_Count {
      get { return guildIds_.Count; }
    }
    public ulong GetGuildIds_(int index) {
      return guildIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildIdsFieldNames;
      if (guildIds_.Count > 0) {
        output.WriteUInt64Array(1, field_names[0], guildIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (ulong element in GuildIds_List) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * guildIds_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildIds ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildIds ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildIds ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildIds ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildIds ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildIds ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildIds ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildIds ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildIds ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildIds ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildIds MakeReadOnly() {
      guildIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildIds prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildIds, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildIds cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildIds result;
      
      private GuildIds PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildIds original = result;
          result = new GuildIds();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildIds MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildIds.Descriptor; }
      }
      
      public override GuildIds DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildIds.DefaultInstance; }
      }
      
      public override GuildIds BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildIds) {
          return MergeFrom((GuildIds) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildIds other) {
        if (other == global::D3.GameMessage.GuildIds.DefaultInstance) return this;
        PrepareBuilder();
        if (other.guildIds_.Count != 0) {
          result.guildIds_.Add(other.guildIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildIdsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildIdsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt64Array(tag, field_name, result.guildIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<ulong> GuildIds_List {
        get { return PrepareBuilder().guildIds_; }
      }
      public int GuildIds_Count {
        get { return result.GuildIds_Count; }
      }
      public ulong GetGuildIds_(int index) {
        return result.GetGuildIds_(index);
      }
      public Builder SetGuildIds_(int index, ulong value) {
        PrepareBuilder();
        result.guildIds_[index] = value;
        return this;
      }
      public Builder AddGuildIds_(ulong value) {
        PrepareBuilder();
        result.guildIds_.Add(value);
        return this;
      }
      public Builder AddRangeGuildIds_(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.guildIds_.Add(values);
        return this;
      }
      public Builder ClearGuildIds_() {
        PrepareBuilder();
        result.guildIds_.Clear();
        return this;
      }
    }
    static GuildIds() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildCreate : pb::GeneratedMessage<GuildCreate, GuildCreate.Builder> {
    private GuildCreate() { }
    private static readonly GuildCreate defaultInstance = new GuildCreate().MakeReadOnly();
    private static readonly string[] _guildCreateFieldNames = new string[] { "language", "looking_for_members", "name", "tag" };
    private static readonly uint[] _guildCreateFieldTags = new uint[] { 24, 32, 10, 18 };
    public static GuildCreate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildCreate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildCreate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildCreate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildCreate, GuildCreate.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildCreate__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int TagFieldNumber = 2;
    private bool hasTag;
    private string tag_ = "";
    public bool HasTag {
      get { return hasTag; }
    }
    public string Tag {
      get { return tag_; }
    }
    
    public const int LanguageFieldNumber = 3;
    private bool hasLanguage;
    private uint language_;
    public bool HasLanguage {
      get { return hasLanguage; }
    }
    public uint Language {
      get { return language_; }
    }
    
    public const int LookingForMembersFieldNumber = 4;
    private bool hasLookingForMembers;
    private bool lookingForMembers_;
    public bool HasLookingForMembers {
      get { return hasLookingForMembers; }
    }
    public bool LookingForMembers {
      get { return lookingForMembers_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasTag) return false;
        if (!hasLanguage) return false;
        if (!hasLookingForMembers) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildCreateFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[2], Name);
      }
      if (hasTag) {
        output.WriteString(2, field_names[3], Tag);
      }
      if (hasLanguage) {
        output.WriteUInt32(3, field_names[0], Language);
      }
      if (hasLookingForMembers) {
        output.WriteBool(4, field_names[1], LookingForMembers);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasTag) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Tag);
        }
        if (hasLanguage) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Language);
        }
        if (hasLookingForMembers) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, LookingForMembers);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildCreate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildCreate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildCreate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildCreate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildCreate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildCreate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildCreate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildCreate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildCreate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildCreate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildCreate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildCreate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildCreate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildCreate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildCreate result;
      
      private GuildCreate PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildCreate original = result;
          result = new GuildCreate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildCreate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildCreate.Descriptor; }
      }
      
      public override GuildCreate DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildCreate.DefaultInstance; }
      }
      
      public override GuildCreate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildCreate) {
          return MergeFrom((GuildCreate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildCreate other) {
        if (other == global::D3.GameMessage.GuildCreate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasTag) {
          Tag = other.Tag;
        }
        if (other.HasLanguage) {
          Language = other.Language;
        }
        if (other.HasLookingForMembers) {
          LookingForMembers = other.LookingForMembers;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildCreateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildCreateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              result.hasTag = input.ReadString(ref result.tag_);
              break;
            }
            case 24: {
              result.hasLanguage = input.ReadUInt32(ref result.language_);
              break;
            }
            case 32: {
              result.hasLookingForMembers = input.ReadBool(ref result.lookingForMembers_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasTag {
        get { return result.hasTag; }
      }
      public string Tag {
        get { return result.Tag; }
        set { SetTag(value); }
      }
      public Builder SetTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTag = true;
        result.tag_ = value;
        return this;
      }
      public Builder ClearTag() {
        PrepareBuilder();
        result.hasTag = false;
        result.tag_ = "";
        return this;
      }
      
      public bool HasLanguage {
        get { return result.hasLanguage; }
      }
      public uint Language {
        get { return result.Language; }
        set { SetLanguage(value); }
      }
      public Builder SetLanguage(uint value) {
        PrepareBuilder();
        result.hasLanguage = true;
        result.language_ = value;
        return this;
      }
      public Builder ClearLanguage() {
        PrepareBuilder();
        result.hasLanguage = false;
        result.language_ = 0;
        return this;
      }
      
      public bool HasLookingForMembers {
        get { return result.hasLookingForMembers; }
      }
      public bool LookingForMembers {
        get { return result.LookingForMembers; }
        set { SetLookingForMembers(value); }
      }
      public Builder SetLookingForMembers(bool value) {
        PrepareBuilder();
        result.hasLookingForMembers = true;
        result.lookingForMembers_ = value;
        return this;
      }
      public Builder ClearLookingForMembers() {
        PrepareBuilder();
        result.hasLookingForMembers = false;
        result.lookingForMembers_ = false;
        return this;
      }
    }
    static GuildCreate() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GroupCreate : pb::GeneratedMessage<GroupCreate, GroupCreate.Builder> {
    private GroupCreate() { }
    private static readonly GroupCreate defaultInstance = new GroupCreate().MakeReadOnly();
    private static readonly string[] _groupCreateFieldNames = new string[] { "language", "name", "privacy_level", "search_category" };
    private static readonly uint[] _groupCreateFieldTags = new uint[] { 24, 10, 32, 16 };
    public static GroupCreate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GroupCreate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GroupCreate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GroupCreate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GroupCreate, GroupCreate.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GroupCreate__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int SearchCategoryFieldNumber = 2;
    private bool hasSearchCategory;
    private uint searchCategory_;
    public bool HasSearchCategory {
      get { return hasSearchCategory; }
    }
    public uint SearchCategory {
      get { return searchCategory_; }
    }
    
    public const int LanguageFieldNumber = 3;
    private bool hasLanguage;
    private uint language_;
    public bool HasLanguage {
      get { return hasLanguage; }
    }
    public uint Language {
      get { return language_; }
    }
    
    public const int PrivacyLevelFieldNumber = 4;
    private bool hasPrivacyLevel;
    private uint privacyLevel_;
    public bool HasPrivacyLevel {
      get { return hasPrivacyLevel; }
    }
    public uint PrivacyLevel {
      get { return privacyLevel_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasSearchCategory) return false;
        if (!hasLanguage) return false;
        if (!hasPrivacyLevel) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _groupCreateFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[1], Name);
      }
      if (hasSearchCategory) {
        output.WriteUInt32(2, field_names[3], SearchCategory);
      }
      if (hasLanguage) {
        output.WriteUInt32(3, field_names[0], Language);
      }
      if (hasPrivacyLevel) {
        output.WriteUInt32(4, field_names[2], PrivacyLevel);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasSearchCategory) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, SearchCategory);
        }
        if (hasLanguage) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Language);
        }
        if (hasPrivacyLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, PrivacyLevel);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GroupCreate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GroupCreate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GroupCreate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GroupCreate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GroupCreate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GroupCreate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GroupCreate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GroupCreate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GroupCreate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GroupCreate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GroupCreate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GroupCreate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GroupCreate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GroupCreate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GroupCreate result;
      
      private GroupCreate PrepareBuilder() {
        if (resultIsReadOnly) {
          GroupCreate original = result;
          result = new GroupCreate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GroupCreate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GroupCreate.Descriptor; }
      }
      
      public override GroupCreate DefaultInstanceForType {
        get { return global::D3.GameMessage.GroupCreate.DefaultInstance; }
      }
      
      public override GroupCreate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GroupCreate) {
          return MergeFrom((GroupCreate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GroupCreate other) {
        if (other == global::D3.GameMessage.GroupCreate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasSearchCategory) {
          SearchCategory = other.SearchCategory;
        }
        if (other.HasLanguage) {
          Language = other.Language;
        }
        if (other.HasPrivacyLevel) {
          PrivacyLevel = other.PrivacyLevel;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_groupCreateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _groupCreateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 16: {
              result.hasSearchCategory = input.ReadUInt32(ref result.searchCategory_);
              break;
            }
            case 24: {
              result.hasLanguage = input.ReadUInt32(ref result.language_);
              break;
            }
            case 32: {
              result.hasPrivacyLevel = input.ReadUInt32(ref result.privacyLevel_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasSearchCategory {
        get { return result.hasSearchCategory; }
      }
      public uint SearchCategory {
        get { return result.SearchCategory; }
        set { SetSearchCategory(value); }
      }
      public Builder SetSearchCategory(uint value) {
        PrepareBuilder();
        result.hasSearchCategory = true;
        result.searchCategory_ = value;
        return this;
      }
      public Builder ClearSearchCategory() {
        PrepareBuilder();
        result.hasSearchCategory = false;
        result.searchCategory_ = 0;
        return this;
      }
      
      public bool HasLanguage {
        get { return result.hasLanguage; }
      }
      public uint Language {
        get { return result.Language; }
        set { SetLanguage(value); }
      }
      public Builder SetLanguage(uint value) {
        PrepareBuilder();
        result.hasLanguage = true;
        result.language_ = value;
        return this;
      }
      public Builder ClearLanguage() {
        PrepareBuilder();
        result.hasLanguage = false;
        result.language_ = 0;
        return this;
      }
      
      public bool HasPrivacyLevel {
        get { return result.hasPrivacyLevel; }
      }
      public uint PrivacyLevel {
        get { return result.PrivacyLevel; }
        set { SetPrivacyLevel(value); }
      }
      public Builder SetPrivacyLevel(uint value) {
        PrepareBuilder();
        result.hasPrivacyLevel = true;
        result.privacyLevel_ = value;
        return this;
      }
      public Builder ClearPrivacyLevel() {
        PrepareBuilder();
        result.hasPrivacyLevel = false;
        result.privacyLevel_ = 0;
        return this;
      }
    }
    static GroupCreate() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildInvite : pb::GeneratedMessage<GuildInvite, GuildInvite.Builder> {
    private GuildInvite() { }
    private static readonly GuildInvite defaultInstance = new GuildInvite().MakeReadOnly();
    private static readonly string[] _guildInviteFieldNames = new string[] { "battle_tag_or_email", "guild_id", "invitee_id" };
    private static readonly uint[] _guildInviteFieldTags = new uint[] { 26, 8, 16 };
    public static GuildInvite DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildInvite DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildInvite ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildInvite__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildInvite, GuildInvite.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildInvite__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int InviteeIdFieldNumber = 2;
    private bool hasInviteeId;
    private ulong inviteeId_;
    public bool HasInviteeId {
      get { return hasInviteeId; }
    }
    public ulong InviteeId {
      get { return inviteeId_; }
    }
    
    public const int BattleTagOrEmailFieldNumber = 3;
    private bool hasBattleTagOrEmail;
    private string battleTagOrEmail_ = "";
    public bool HasBattleTagOrEmail {
      get { return hasBattleTagOrEmail; }
    }
    public string BattleTagOrEmail {
      get { return battleTagOrEmail_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildInviteFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[1], GuildId);
      }
      if (hasInviteeId) {
        output.WriteUInt64(2, field_names[2], InviteeId);
      }
      if (hasBattleTagOrEmail) {
        output.WriteString(3, field_names[0], BattleTagOrEmail);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasInviteeId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, InviteeId);
        }
        if (hasBattleTagOrEmail) {
          size += pb::CodedOutputStream.ComputeStringSize(3, BattleTagOrEmail);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildInvite ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInvite ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInvite ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInvite ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInvite ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInvite ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildInvite ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildInvite ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildInvite ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInvite ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildInvite MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildInvite prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildInvite, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildInvite cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildInvite result;
      
      private GuildInvite PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildInvite original = result;
          result = new GuildInvite();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildInvite MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildInvite.Descriptor; }
      }
      
      public override GuildInvite DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildInvite.DefaultInstance; }
      }
      
      public override GuildInvite BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildInvite) {
          return MergeFrom((GuildInvite) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildInvite other) {
        if (other == global::D3.GameMessage.GuildInvite.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasInviteeId) {
          InviteeId = other.InviteeId;
        }
        if (other.HasBattleTagOrEmail) {
          BattleTagOrEmail = other.BattleTagOrEmail;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildInviteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildInviteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasInviteeId = input.ReadUInt64(ref result.inviteeId_);
              break;
            }
            case 26: {
              result.hasBattleTagOrEmail = input.ReadString(ref result.battleTagOrEmail_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasInviteeId {
        get { return result.hasInviteeId; }
      }
      public ulong InviteeId {
        get { return result.InviteeId; }
        set { SetInviteeId(value); }
      }
      public Builder SetInviteeId(ulong value) {
        PrepareBuilder();
        result.hasInviteeId = true;
        result.inviteeId_ = value;
        return this;
      }
      public Builder ClearInviteeId() {
        PrepareBuilder();
        result.hasInviteeId = false;
        result.inviteeId_ = 0UL;
        return this;
      }
      
      public bool HasBattleTagOrEmail {
        get { return result.hasBattleTagOrEmail; }
      }
      public string BattleTagOrEmail {
        get { return result.BattleTagOrEmail; }
        set { SetBattleTagOrEmail(value); }
      }
      public Builder SetBattleTagOrEmail(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBattleTagOrEmail = true;
        result.battleTagOrEmail_ = value;
        return this;
      }
      public Builder ClearBattleTagOrEmail() {
        PrepareBuilder();
        result.hasBattleTagOrEmail = false;
        result.battleTagOrEmail_ = "";
        return this;
      }
    }
    static GuildInvite() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildInviteResponse : pb::GeneratedMessage<GuildInviteResponse, GuildInviteResponse.Builder> {
    private GuildInviteResponse() { }
    private static readonly GuildInviteResponse defaultInstance = new GuildInviteResponse().MakeReadOnly();
    private static readonly string[] _guildInviteResponseFieldNames = new string[] { "apply_cooldown", "guild_id", "result" };
    private static readonly uint[] _guildInviteResponseFieldTags = new uint[] { 24, 8, 16 };
    public static GuildInviteResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildInviteResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildInviteResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildInviteResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildInviteResponse, GuildInviteResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildInviteResponse__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int ResultFieldNumber = 2;
    private bool hasResult;
    private bool result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public bool Result {
      get { return result_; }
    }
    
    public const int ApplyCooldownFieldNumber = 3;
    private bool hasApplyCooldown;
    private bool applyCooldown_;
    public bool HasApplyCooldown {
      get { return hasApplyCooldown; }
    }
    public bool ApplyCooldown {
      get { return applyCooldown_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasResult) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildInviteResponseFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[1], GuildId);
      }
      if (hasResult) {
        output.WriteBool(2, field_names[2], Result);
      }
      if (hasApplyCooldown) {
        output.WriteBool(3, field_names[0], ApplyCooldown);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasResult) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, Result);
        }
        if (hasApplyCooldown) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, ApplyCooldown);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildInviteResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInviteResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInviteResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInviteResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInviteResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInviteResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildInviteResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildInviteResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildInviteResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInviteResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildInviteResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildInviteResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildInviteResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildInviteResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildInviteResponse result;
      
      private GuildInviteResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildInviteResponse original = result;
          result = new GuildInviteResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildInviteResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildInviteResponse.Descriptor; }
      }
      
      public override GuildInviteResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildInviteResponse.DefaultInstance; }
      }
      
      public override GuildInviteResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildInviteResponse) {
          return MergeFrom((GuildInviteResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildInviteResponse other) {
        if (other == global::D3.GameMessage.GuildInviteResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasApplyCooldown) {
          ApplyCooldown = other.ApplyCooldown;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildInviteResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildInviteResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasResult = input.ReadBool(ref result.result_);
              break;
            }
            case 24: {
              result.hasApplyCooldown = input.ReadBool(ref result.applyCooldown_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public bool Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(bool value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = false;
        return this;
      }
      
      public bool HasApplyCooldown {
        get { return result.hasApplyCooldown; }
      }
      public bool ApplyCooldown {
        get { return result.ApplyCooldown; }
        set { SetApplyCooldown(value); }
      }
      public Builder SetApplyCooldown(bool value) {
        PrepareBuilder();
        result.hasApplyCooldown = true;
        result.applyCooldown_ = value;
        return this;
      }
      public Builder ClearApplyCooldown() {
        PrepareBuilder();
        result.hasApplyCooldown = false;
        result.applyCooldown_ = false;
        return this;
      }
    }
    static GuildInviteResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildFetchPlayerNote : pb::GeneratedMessage<GuildFetchPlayerNote, GuildFetchPlayerNote.Builder> {
    private GuildFetchPlayerNote() { }
    private static readonly GuildFetchPlayerNote defaultInstance = new GuildFetchPlayerNote().MakeReadOnly();
    private static readonly string[] _guildFetchPlayerNoteFieldNames = new string[] { "guild_id", "member_id" };
    private static readonly uint[] _guildFetchPlayerNoteFieldTags = new uint[] { 8, 16 };
    public static GuildFetchPlayerNote DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildFetchPlayerNote DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildFetchPlayerNote ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildFetchPlayerNote__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildFetchPlayerNote, GuildFetchPlayerNote.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildFetchPlayerNote__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int MemberIdFieldNumber = 2;
    private bool hasMemberId;
    private uint memberId_;
    public bool HasMemberId {
      get { return hasMemberId; }
    }
    public uint MemberId {
      get { return memberId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasMemberId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildFetchPlayerNoteFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasMemberId) {
        output.WriteUInt32(2, field_names[1], MemberId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasMemberId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, MemberId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildFetchPlayerNote ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildFetchPlayerNote ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildFetchPlayerNote ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildFetchPlayerNote ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildFetchPlayerNote ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildFetchPlayerNote ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildFetchPlayerNote ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildFetchPlayerNote ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildFetchPlayerNote ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildFetchPlayerNote ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildFetchPlayerNote MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildFetchPlayerNote prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildFetchPlayerNote, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildFetchPlayerNote cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildFetchPlayerNote result;
      
      private GuildFetchPlayerNote PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildFetchPlayerNote original = result;
          result = new GuildFetchPlayerNote();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildFetchPlayerNote MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildFetchPlayerNote.Descriptor; }
      }
      
      public override GuildFetchPlayerNote DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildFetchPlayerNote.DefaultInstance; }
      }
      
      public override GuildFetchPlayerNote BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildFetchPlayerNote) {
          return MergeFrom((GuildFetchPlayerNote) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildFetchPlayerNote other) {
        if (other == global::D3.GameMessage.GuildFetchPlayerNote.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasMemberId) {
          MemberId = other.MemberId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildFetchPlayerNoteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildFetchPlayerNoteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasMemberId = input.ReadUInt32(ref result.memberId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasMemberId {
        get { return result.hasMemberId; }
      }
      public uint MemberId {
        get { return result.MemberId; }
        set { SetMemberId(value); }
      }
      public Builder SetMemberId(uint value) {
        PrepareBuilder();
        result.hasMemberId = true;
        result.memberId_ = value;
        return this;
      }
      public Builder ClearMemberId() {
        PrepareBuilder();
        result.hasMemberId = false;
        result.memberId_ = 0;
        return this;
      }
    }
    static GuildFetchPlayerNote() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildSetMotd : pb::GeneratedMessage<GuildSetMotd, GuildSetMotd.Builder> {
    private GuildSetMotd() { }
    private static readonly GuildSetMotd defaultInstance = new GuildSetMotd().MakeReadOnly();
    private static readonly string[] _guildSetMotdFieldNames = new string[] { "guild_id", "motd" };
    private static readonly uint[] _guildSetMotdFieldTags = new uint[] { 8, 18 };
    public static GuildSetMotd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildSetMotd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildSetMotd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSetMotd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildSetMotd, GuildSetMotd.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSetMotd__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int MotdFieldNumber = 2;
    private bool hasMotd;
    private string motd_ = "";
    public bool HasMotd {
      get { return hasMotd; }
    }
    public string Motd {
      get { return motd_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasMotd) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildSetMotdFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasMotd) {
        output.WriteString(2, field_names[1], Motd);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasMotd) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Motd);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildSetMotd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSetMotd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSetMotd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSetMotd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSetMotd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSetMotd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildSetMotd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildSetMotd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildSetMotd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSetMotd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildSetMotd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildSetMotd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildSetMotd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildSetMotd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildSetMotd result;
      
      private GuildSetMotd PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildSetMotd original = result;
          result = new GuildSetMotd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildSetMotd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildSetMotd.Descriptor; }
      }
      
      public override GuildSetMotd DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildSetMotd.DefaultInstance; }
      }
      
      public override GuildSetMotd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildSetMotd) {
          return MergeFrom((GuildSetMotd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildSetMotd other) {
        if (other == global::D3.GameMessage.GuildSetMotd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasMotd) {
          Motd = other.Motd;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildSetMotdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildSetMotdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 18: {
              result.hasMotd = input.ReadString(ref result.motd_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasMotd {
        get { return result.hasMotd; }
      }
      public string Motd {
        get { return result.Motd; }
        set { SetMotd(value); }
      }
      public Builder SetMotd(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMotd = true;
        result.motd_ = value;
        return this;
      }
      public Builder ClearMotd() {
        PrepareBuilder();
        result.hasMotd = false;
        result.motd_ = "";
        return this;
      }
    }
    static GuildSetMotd() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildSetDescription : pb::GeneratedMessage<GuildSetDescription, GuildSetDescription.Builder> {
    private GuildSetDescription() { }
    private static readonly GuildSetDescription defaultInstance = new GuildSetDescription().MakeReadOnly();
    private static readonly string[] _guildSetDescriptionFieldNames = new string[] { "description", "guild_id" };
    private static readonly uint[] _guildSetDescriptionFieldTags = new uint[] { 18, 8 };
    public static GuildSetDescription DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildSetDescription DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildSetDescription ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSetDescription__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildSetDescription, GuildSetDescription.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSetDescription__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int DescriptionFieldNumber = 2;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasDescription) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildSetDescriptionFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[1], GuildId);
      }
      if (hasDescription) {
        output.WriteString(2, field_names[0], Description);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasDescription) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Description);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildSetDescription ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSetDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSetDescription ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSetDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSetDescription ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSetDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildSetDescription ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildSetDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildSetDescription ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSetDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildSetDescription MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildSetDescription prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildSetDescription, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildSetDescription cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildSetDescription result;
      
      private GuildSetDescription PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildSetDescription original = result;
          result = new GuildSetDescription();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildSetDescription MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildSetDescription.Descriptor; }
      }
      
      public override GuildSetDescription DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildSetDescription.DefaultInstance; }
      }
      
      public override GuildSetDescription BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildSetDescription) {
          return MergeFrom((GuildSetDescription) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildSetDescription other) {
        if (other == global::D3.GameMessage.GuildSetDescription.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildSetDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildSetDescriptionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 18: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
    }
    static GuildSetDescription() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildSetNews : pb::GeneratedMessage<GuildSetNews, GuildSetNews.Builder> {
    private GuildSetNews() { }
    private static readonly GuildSetNews defaultInstance = new GuildSetNews().MakeReadOnly();
    private static readonly string[] _guildSetNewsFieldNames = new string[] { "account_id", "guild_id", "news_data", "news_flags", "news_type" };
    private static readonly uint[] _guildSetNewsFieldTags = new uint[] { 18, 8, 34, 40, 24 };
    public static GuildSetNews DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildSetNews DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildSetNews ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSetNews__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildSetNews, GuildSetNews.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSetNews__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int AccountIdFieldNumber = 2;
    private bool hasAccountId;
    private global::D3.OnlineService.GameAccountHandle accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle AccountId {
      get { return accountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public const int NewsTypeFieldNumber = 3;
    private bool hasNewsType;
    private uint newsType_;
    public bool HasNewsType {
      get { return hasNewsType; }
    }
    public uint NewsType {
      get { return newsType_; }
    }
    
    public const int NewsDataFieldNumber = 4;
    private bool hasNewsData;
    private pb::ByteString newsData_ = pb::ByteString.Empty;
    public bool HasNewsData {
      get { return hasNewsData; }
    }
    public pb::ByteString NewsData {
      get { return newsData_; }
    }
    
    public const int NewsFlagsFieldNumber = 5;
    private bool hasNewsFlags;
    private uint newsFlags_;
    public bool HasNewsFlags {
      get { return hasNewsFlags; }
    }
    public uint NewsFlags {
      get { return newsFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasAccountId) return false;
        if (!hasNewsType) return false;
        if (!hasNewsData) return false;
        if (!hasNewsFlags) return false;
        if (!AccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildSetNewsFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[1], GuildId);
      }
      if (hasAccountId) {
        output.WriteMessage(2, field_names[0], AccountId);
      }
      if (hasNewsType) {
        output.WriteUInt32(3, field_names[4], NewsType);
      }
      if (hasNewsData) {
        output.WriteBytes(4, field_names[2], NewsData);
      }
      if (hasNewsFlags) {
        output.WriteUInt32(5, field_names[3], NewsFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, AccountId);
        }
        if (hasNewsType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, NewsType);
        }
        if (hasNewsData) {
          size += pb::CodedOutputStream.ComputeBytesSize(4, NewsData);
        }
        if (hasNewsFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, NewsFlags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildSetNews ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSetNews ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSetNews ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSetNews ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSetNews ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSetNews ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildSetNews ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildSetNews ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildSetNews ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSetNews ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildSetNews MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildSetNews prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildSetNews, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildSetNews cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildSetNews result;
      
      private GuildSetNews PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildSetNews original = result;
          result = new GuildSetNews();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildSetNews MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildSetNews.Descriptor; }
      }
      
      public override GuildSetNews DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildSetNews.DefaultInstance; }
      }
      
      public override GuildSetNews BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildSetNews) {
          return MergeFrom((GuildSetNews) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildSetNews other) {
        if (other == global::D3.GameMessage.GuildSetNews.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasAccountId) {
          MergeAccountId(other.AccountId);
        }
        if (other.HasNewsType) {
          NewsType = other.NewsType;
        }
        if (other.HasNewsData) {
          NewsData = other.NewsData;
        }
        if (other.HasNewsFlags) {
          NewsFlags = other.NewsFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildSetNewsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildSetNewsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 18: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasAccountId) {
                subBuilder.MergeFrom(AccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountId = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasNewsType = input.ReadUInt32(ref result.newsType_);
              break;
            }
            case 34: {
              result.hasNewsData = input.ReadBytes(ref result.newsData_);
              break;
            }
            case 40: {
              result.hasNewsFlags = input.ReadUInt32(ref result.newsFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.accountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
      
      public bool HasNewsType {
        get { return result.hasNewsType; }
      }
      public uint NewsType {
        get { return result.NewsType; }
        set { SetNewsType(value); }
      }
      public Builder SetNewsType(uint value) {
        PrepareBuilder();
        result.hasNewsType = true;
        result.newsType_ = value;
        return this;
      }
      public Builder ClearNewsType() {
        PrepareBuilder();
        result.hasNewsType = false;
        result.newsType_ = 0;
        return this;
      }
      
      public bool HasNewsData {
        get { return result.hasNewsData; }
      }
      public pb::ByteString NewsData {
        get { return result.NewsData; }
        set { SetNewsData(value); }
      }
      public Builder SetNewsData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewsData = true;
        result.newsData_ = value;
        return this;
      }
      public Builder ClearNewsData() {
        PrepareBuilder();
        result.hasNewsData = false;
        result.newsData_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasNewsFlags {
        get { return result.hasNewsFlags; }
      }
      public uint NewsFlags {
        get { return result.NewsFlags; }
        set { SetNewsFlags(value); }
      }
      public Builder SetNewsFlags(uint value) {
        PrepareBuilder();
        result.hasNewsFlags = true;
        result.newsFlags_ = value;
        return this;
      }
      public Builder ClearNewsFlags() {
        PrepareBuilder();
        result.hasNewsFlags = false;
        result.newsFlags_ = 0;
        return this;
      }
    }
    static GuildSetNews() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildEditNews : pb::GeneratedMessage<GuildEditNews, GuildEditNews.Builder> {
    private GuildEditNews() { }
    private static readonly GuildEditNews defaultInstance = new GuildEditNews().MakeReadOnly();
    private static readonly string[] _guildEditNewsFieldNames = new string[] { "guild_id", "news_data", "news_flags", "news_id" };
    private static readonly uint[] _guildEditNewsFieldTags = new uint[] { 8, 26, 32, 16 };
    public static GuildEditNews DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildEditNews DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildEditNews ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildEditNews__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildEditNews, GuildEditNews.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildEditNews__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int NewsIdFieldNumber = 2;
    private bool hasNewsId;
    private ulong newsId_;
    public bool HasNewsId {
      get { return hasNewsId; }
    }
    public ulong NewsId {
      get { return newsId_; }
    }
    
    public const int NewsDataFieldNumber = 3;
    private bool hasNewsData;
    private pb::ByteString newsData_ = pb::ByteString.Empty;
    public bool HasNewsData {
      get { return hasNewsData; }
    }
    public pb::ByteString NewsData {
      get { return newsData_; }
    }
    
    public const int NewsFlagsFieldNumber = 4;
    private bool hasNewsFlags;
    private uint newsFlags_;
    public bool HasNewsFlags {
      get { return hasNewsFlags; }
    }
    public uint NewsFlags {
      get { return newsFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasNewsId) return false;
        if (!hasNewsData) return false;
        if (!hasNewsFlags) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildEditNewsFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasNewsId) {
        output.WriteUInt64(2, field_names[3], NewsId);
      }
      if (hasNewsData) {
        output.WriteBytes(3, field_names[1], NewsData);
      }
      if (hasNewsFlags) {
        output.WriteUInt32(4, field_names[2], NewsFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasNewsId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, NewsId);
        }
        if (hasNewsData) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, NewsData);
        }
        if (hasNewsFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, NewsFlags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildEditNews ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildEditNews ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildEditNews ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildEditNews ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildEditNews ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildEditNews ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildEditNews ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildEditNews ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildEditNews ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildEditNews ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildEditNews MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildEditNews prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildEditNews, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildEditNews cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildEditNews result;
      
      private GuildEditNews PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildEditNews original = result;
          result = new GuildEditNews();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildEditNews MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildEditNews.Descriptor; }
      }
      
      public override GuildEditNews DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildEditNews.DefaultInstance; }
      }
      
      public override GuildEditNews BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildEditNews) {
          return MergeFrom((GuildEditNews) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildEditNews other) {
        if (other == global::D3.GameMessage.GuildEditNews.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasNewsId) {
          NewsId = other.NewsId;
        }
        if (other.HasNewsData) {
          NewsData = other.NewsData;
        }
        if (other.HasNewsFlags) {
          NewsFlags = other.NewsFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildEditNewsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildEditNewsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasNewsId = input.ReadUInt64(ref result.newsId_);
              break;
            }
            case 26: {
              result.hasNewsData = input.ReadBytes(ref result.newsData_);
              break;
            }
            case 32: {
              result.hasNewsFlags = input.ReadUInt32(ref result.newsFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasNewsId {
        get { return result.hasNewsId; }
      }
      public ulong NewsId {
        get { return result.NewsId; }
        set { SetNewsId(value); }
      }
      public Builder SetNewsId(ulong value) {
        PrepareBuilder();
        result.hasNewsId = true;
        result.newsId_ = value;
        return this;
      }
      public Builder ClearNewsId() {
        PrepareBuilder();
        result.hasNewsId = false;
        result.newsId_ = 0UL;
        return this;
      }
      
      public bool HasNewsData {
        get { return result.hasNewsData; }
      }
      public pb::ByteString NewsData {
        get { return result.NewsData; }
        set { SetNewsData(value); }
      }
      public Builder SetNewsData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewsData = true;
        result.newsData_ = value;
        return this;
      }
      public Builder ClearNewsData() {
        PrepareBuilder();
        result.hasNewsData = false;
        result.newsData_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasNewsFlags {
        get { return result.hasNewsFlags; }
      }
      public uint NewsFlags {
        get { return result.NewsFlags; }
        set { SetNewsFlags(value); }
      }
      public Builder SetNewsFlags(uint value) {
        PrepareBuilder();
        result.hasNewsFlags = true;
        result.newsFlags_ = value;
        return this;
      }
      public Builder ClearNewsFlags() {
        PrepareBuilder();
        result.hasNewsFlags = false;
        result.newsFlags_ = 0;
        return this;
      }
    }
    static GuildEditNews() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildDeleteNews : pb::GeneratedMessage<GuildDeleteNews, GuildDeleteNews.Builder> {
    private GuildDeleteNews() { }
    private static readonly GuildDeleteNews defaultInstance = new GuildDeleteNews().MakeReadOnly();
    private static readonly string[] _guildDeleteNewsFieldNames = new string[] { "guild_id", "news_id" };
    private static readonly uint[] _guildDeleteNewsFieldTags = new uint[] { 8, 16 };
    public static GuildDeleteNews DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildDeleteNews DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildDeleteNews ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildDeleteNews__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildDeleteNews, GuildDeleteNews.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildDeleteNews__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int NewsIdFieldNumber = 2;
    private bool hasNewsId;
    private ulong newsId_;
    public bool HasNewsId {
      get { return hasNewsId; }
    }
    public ulong NewsId {
      get { return newsId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasNewsId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildDeleteNewsFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasNewsId) {
        output.WriteUInt64(2, field_names[1], NewsId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasNewsId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, NewsId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildDeleteNews ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildDeleteNews ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildDeleteNews ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildDeleteNews ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildDeleteNews ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildDeleteNews ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildDeleteNews ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildDeleteNews ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildDeleteNews ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildDeleteNews ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildDeleteNews MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildDeleteNews prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildDeleteNews, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildDeleteNews cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildDeleteNews result;
      
      private GuildDeleteNews PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildDeleteNews original = result;
          result = new GuildDeleteNews();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildDeleteNews MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildDeleteNews.Descriptor; }
      }
      
      public override GuildDeleteNews DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildDeleteNews.DefaultInstance; }
      }
      
      public override GuildDeleteNews BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildDeleteNews) {
          return MergeFrom((GuildDeleteNews) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildDeleteNews other) {
        if (other == global::D3.GameMessage.GuildDeleteNews.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasNewsId) {
          NewsId = other.NewsId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildDeleteNewsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildDeleteNewsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasNewsId = input.ReadUInt64(ref result.newsId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasNewsId {
        get { return result.hasNewsId; }
      }
      public ulong NewsId {
        get { return result.NewsId; }
        set { SetNewsId(value); }
      }
      public Builder SetNewsId(ulong value) {
        PrepareBuilder();
        result.hasNewsId = true;
        result.newsId_ = value;
        return this;
      }
      public Builder ClearNewsId() {
        PrepareBuilder();
        result.hasNewsId = false;
        result.newsId_ = 0UL;
        return this;
      }
    }
    static GuildDeleteNews() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildDeleteAccountNews : pb::GeneratedMessage<GuildDeleteAccountNews, GuildDeleteAccountNews.Builder> {
    private GuildDeleteAccountNews() { }
    private static readonly GuildDeleteAccountNews defaultInstance = new GuildDeleteAccountNews().MakeReadOnly();
    private static readonly string[] _guildDeleteAccountNewsFieldNames = new string[] { "account_id", "guild_id", "news_id" };
    private static readonly uint[] _guildDeleteAccountNewsFieldTags = new uint[] { 8, 16, 24 };
    public static GuildDeleteAccountNews DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildDeleteAccountNews DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildDeleteAccountNews ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildDeleteAccountNews__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildDeleteAccountNews, GuildDeleteAccountNews.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildDeleteAccountNews__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private ulong accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public ulong AccountId {
      get { return accountId_; }
    }
    
    public const int GuildIdFieldNumber = 2;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int NewsIdFieldNumber = 3;
    private pbc::PopsicleList<ulong> newsId_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> NewsIdList {
      get { return pbc::Lists.AsReadOnly(newsId_); }
    }
    public int NewsIdCount {
      get { return newsId_.Count; }
    }
    public ulong GetNewsId(int index) {
      return newsId_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasGuildId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildDeleteAccountNewsFieldNames;
      if (hasAccountId) {
        output.WriteUInt64(1, field_names[0], AccountId);
      }
      if (hasGuildId) {
        output.WriteUInt64(2, field_names[1], GuildId);
      }
      if (newsId_.Count > 0) {
        output.WriteUInt64Array(3, field_names[2], newsId_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, AccountId);
        }
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, GuildId);
        }
        {
          int dataSize = 0;
          foreach (ulong element in NewsIdList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * newsId_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildDeleteAccountNews ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildDeleteAccountNews ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildDeleteAccountNews ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildDeleteAccountNews ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildDeleteAccountNews ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildDeleteAccountNews ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildDeleteAccountNews ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildDeleteAccountNews ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildDeleteAccountNews ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildDeleteAccountNews ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildDeleteAccountNews MakeReadOnly() {
      newsId_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildDeleteAccountNews prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildDeleteAccountNews, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildDeleteAccountNews cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildDeleteAccountNews result;
      
      private GuildDeleteAccountNews PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildDeleteAccountNews original = result;
          result = new GuildDeleteAccountNews();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildDeleteAccountNews MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildDeleteAccountNews.Descriptor; }
      }
      
      public override GuildDeleteAccountNews DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildDeleteAccountNews.DefaultInstance; }
      }
      
      public override GuildDeleteAccountNews BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildDeleteAccountNews) {
          return MergeFrom((GuildDeleteAccountNews) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildDeleteAccountNews other) {
        if (other == global::D3.GameMessage.GuildDeleteAccountNews.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.newsId_.Count != 0) {
          result.newsId_.Add(other.newsId_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildDeleteAccountNewsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildDeleteAccountNewsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAccountId = input.ReadUInt64(ref result.accountId_);
              break;
            }
            case 16: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 26:
            case 24: {
              input.ReadUInt64Array(tag, field_name, result.newsId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
        get { return result.hasAccountId; }
      }
      public ulong AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(ulong value) {
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = 0UL;
        return this;
      }
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> NewsIdList {
        get { return PrepareBuilder().newsId_; }
      }
      public int NewsIdCount {
        get { return result.NewsIdCount; }
      }
      public ulong GetNewsId(int index) {
        return result.GetNewsId(index);
      }
      public Builder SetNewsId(int index, ulong value) {
        PrepareBuilder();
        result.newsId_[index] = value;
        return this;
      }
      public Builder AddNewsId(ulong value) {
        PrepareBuilder();
        result.newsId_.Add(value);
        return this;
      }
      public Builder AddRangeNewsId(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.newsId_.Add(values);
        return this;
      }
      public Builder ClearNewsId() {
        PrepareBuilder();
        result.newsId_.Clear();
        return this;
      }
    }
    static GuildDeleteAccountNews() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildCreateRank : pb::GeneratedMessage<GuildCreateRank, GuildCreateRank.Builder> {
    private GuildCreateRank() { }
    private static readonly GuildCreateRank defaultInstance = new GuildCreateRank().MakeReadOnly();
    private static readonly string[] _guildCreateRankFieldNames = new string[] { "guild_id", "name" };
    private static readonly uint[] _guildCreateRankFieldTags = new uint[] { 8, 18 };
    public static GuildCreateRank DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildCreateRank DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildCreateRank ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildCreateRank__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildCreateRank, GuildCreateRank.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildCreateRank__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildCreateRankFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasName) {
        output.WriteString(2, field_names[1], Name);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildCreateRank ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildCreateRank ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildCreateRank ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildCreateRank ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildCreateRank ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildCreateRank ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildCreateRank ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildCreateRank ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildCreateRank ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildCreateRank ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildCreateRank MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildCreateRank prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildCreateRank, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildCreateRank cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildCreateRank result;
      
      private GuildCreateRank PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildCreateRank original = result;
          result = new GuildCreateRank();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildCreateRank MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildCreateRank.Descriptor; }
      }
      
      public override GuildCreateRank DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildCreateRank.DefaultInstance; }
      }
      
      public override GuildCreateRank BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildCreateRank) {
          return MergeFrom((GuildCreateRank) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildCreateRank other) {
        if (other == global::D3.GameMessage.GuildCreateRank.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildCreateRankFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildCreateRankFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static GuildCreateRank() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildDeleteRank : pb::GeneratedMessage<GuildDeleteRank, GuildDeleteRank.Builder> {
    private GuildDeleteRank() { }
    private static readonly GuildDeleteRank defaultInstance = new GuildDeleteRank().MakeReadOnly();
    private static readonly string[] _guildDeleteRankFieldNames = new string[] { "guild_id", "rank_id" };
    private static readonly uint[] _guildDeleteRankFieldTags = new uint[] { 8, 16 };
    public static GuildDeleteRank DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildDeleteRank DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildDeleteRank ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildDeleteRank__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildDeleteRank, GuildDeleteRank.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildDeleteRank__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int RankIdFieldNumber = 2;
    private bool hasRankId;
    private uint rankId_;
    public bool HasRankId {
      get { return hasRankId; }
    }
    public uint RankId {
      get { return rankId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasRankId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildDeleteRankFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasRankId) {
        output.WriteUInt32(2, field_names[1], RankId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasRankId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, RankId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildDeleteRank ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildDeleteRank ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildDeleteRank ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildDeleteRank ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildDeleteRank ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildDeleteRank ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildDeleteRank ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildDeleteRank ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildDeleteRank ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildDeleteRank ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildDeleteRank MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildDeleteRank prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildDeleteRank, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildDeleteRank cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildDeleteRank result;
      
      private GuildDeleteRank PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildDeleteRank original = result;
          result = new GuildDeleteRank();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildDeleteRank MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildDeleteRank.Descriptor; }
      }
      
      public override GuildDeleteRank DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildDeleteRank.DefaultInstance; }
      }
      
      public override GuildDeleteRank BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildDeleteRank) {
          return MergeFrom((GuildDeleteRank) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildDeleteRank other) {
        if (other == global::D3.GameMessage.GuildDeleteRank.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasRankId) {
          RankId = other.RankId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildDeleteRankFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildDeleteRankFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasRankId = input.ReadUInt32(ref result.rankId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasRankId {
        get { return result.hasRankId; }
      }
      public uint RankId {
        get { return result.RankId; }
        set { SetRankId(value); }
      }
      public Builder SetRankId(uint value) {
        PrepareBuilder();
        result.hasRankId = true;
        result.rankId_ = value;
        return this;
      }
      public Builder ClearRankId() {
        PrepareBuilder();
        result.hasRankId = false;
        result.rankId_ = 0;
        return this;
      }
    }
    static GuildDeleteRank() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildModifyRank : pb::GeneratedMessage<GuildModifyRank, GuildModifyRank.Builder> {
    private GuildModifyRank() { }
    private static readonly GuildModifyRank defaultInstance = new GuildModifyRank().MakeReadOnly();
    private static readonly string[] _guildModifyRankFieldNames = new string[] { "guild_id", "name", "permission", "rank_id" };
    private static readonly uint[] _guildModifyRankFieldTags = new uint[] { 8, 26, 32, 16 };
    public static GuildModifyRank DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildModifyRank DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildModifyRank ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildModifyRank__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildModifyRank, GuildModifyRank.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildModifyRank__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int RankIdFieldNumber = 2;
    private bool hasRankId;
    private uint rankId_;
    public bool HasRankId {
      get { return hasRankId; }
    }
    public uint RankId {
      get { return rankId_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int PermissionFieldNumber = 4;
    private bool hasPermission;
    private uint permission_;
    public bool HasPermission {
      get { return hasPermission; }
    }
    public uint Permission {
      get { return permission_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasRankId) return false;
        if (!hasName) return false;
        if (!hasPermission) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildModifyRankFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasRankId) {
        output.WriteUInt32(2, field_names[3], RankId);
      }
      if (hasName) {
        output.WriteString(3, field_names[1], Name);
      }
      if (hasPermission) {
        output.WriteUInt32(4, field_names[2], Permission);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasRankId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, RankId);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Name);
        }
        if (hasPermission) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, Permission);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildModifyRank ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildModifyRank ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildModifyRank ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildModifyRank ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildModifyRank ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildModifyRank ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildModifyRank ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildModifyRank ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildModifyRank ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildModifyRank ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildModifyRank MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildModifyRank prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildModifyRank, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildModifyRank cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildModifyRank result;
      
      private GuildModifyRank PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildModifyRank original = result;
          result = new GuildModifyRank();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildModifyRank MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildModifyRank.Descriptor; }
      }
      
      public override GuildModifyRank DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildModifyRank.DefaultInstance; }
      }
      
      public override GuildModifyRank BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildModifyRank) {
          return MergeFrom((GuildModifyRank) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildModifyRank other) {
        if (other == global::D3.GameMessage.GuildModifyRank.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasRankId) {
          RankId = other.RankId;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasPermission) {
          Permission = other.Permission;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildModifyRankFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildModifyRankFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasRankId = input.ReadUInt32(ref result.rankId_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 32: {
              result.hasPermission = input.ReadUInt32(ref result.permission_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasRankId {
        get { return result.hasRankId; }
      }
      public uint RankId {
        get { return result.RankId; }
        set { SetRankId(value); }
      }
      public Builder SetRankId(uint value) {
        PrepareBuilder();
        result.hasRankId = true;
        result.rankId_ = value;
        return this;
      }
      public Builder ClearRankId() {
        PrepareBuilder();
        result.hasRankId = false;
        result.rankId_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasPermission {
        get { return result.hasPermission; }
      }
      public uint Permission {
        get { return result.Permission; }
        set { SetPermission(value); }
      }
      public Builder SetPermission(uint value) {
        PrepareBuilder();
        result.hasPermission = true;
        result.permission_ = value;
        return this;
      }
      public Builder ClearPermission() {
        PrepareBuilder();
        result.hasPermission = false;
        result.permission_ = 0;
        return this;
      }
    }
    static GuildModifyRank() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildPromoteMember : pb::GeneratedMessage<GuildPromoteMember, GuildPromoteMember.Builder> {
    private GuildPromoteMember() { }
    private static readonly GuildPromoteMember defaultInstance = new GuildPromoteMember().MakeReadOnly();
    private static readonly string[] _guildPromoteMemberFieldNames = new string[] { "guild_id", "member_id" };
    private static readonly uint[] _guildPromoteMemberFieldTags = new uint[] { 8, 16 };
    public static GuildPromoteMember DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildPromoteMember DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildPromoteMember ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildPromoteMember__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildPromoteMember, GuildPromoteMember.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildPromoteMember__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int MemberIdFieldNumber = 2;
    private bool hasMemberId;
    private uint memberId_;
    public bool HasMemberId {
      get { return hasMemberId; }
    }
    public uint MemberId {
      get { return memberId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasMemberId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildPromoteMemberFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasMemberId) {
        output.WriteUInt32(2, field_names[1], MemberId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasMemberId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, MemberId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildPromoteMember ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildPromoteMember ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildPromoteMember ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildPromoteMember ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildPromoteMember ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildPromoteMember ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildPromoteMember ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildPromoteMember ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildPromoteMember ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildPromoteMember ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildPromoteMember MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildPromoteMember prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildPromoteMember, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildPromoteMember cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildPromoteMember result;
      
      private GuildPromoteMember PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildPromoteMember original = result;
          result = new GuildPromoteMember();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildPromoteMember MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildPromoteMember.Descriptor; }
      }
      
      public override GuildPromoteMember DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildPromoteMember.DefaultInstance; }
      }
      
      public override GuildPromoteMember BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildPromoteMember) {
          return MergeFrom((GuildPromoteMember) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildPromoteMember other) {
        if (other == global::D3.GameMessage.GuildPromoteMember.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasMemberId) {
          MemberId = other.MemberId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildPromoteMemberFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildPromoteMemberFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasMemberId = input.ReadUInt32(ref result.memberId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasMemberId {
        get { return result.hasMemberId; }
      }
      public uint MemberId {
        get { return result.MemberId; }
        set { SetMemberId(value); }
      }
      public Builder SetMemberId(uint value) {
        PrepareBuilder();
        result.hasMemberId = true;
        result.memberId_ = value;
        return this;
      }
      public Builder ClearMemberId() {
        PrepareBuilder();
        result.hasMemberId = false;
        result.memberId_ = 0;
        return this;
      }
    }
    static GuildPromoteMember() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildDemoteMember : pb::GeneratedMessage<GuildDemoteMember, GuildDemoteMember.Builder> {
    private GuildDemoteMember() { }
    private static readonly GuildDemoteMember defaultInstance = new GuildDemoteMember().MakeReadOnly();
    private static readonly string[] _guildDemoteMemberFieldNames = new string[] { "guild_id", "member_id" };
    private static readonly uint[] _guildDemoteMemberFieldTags = new uint[] { 8, 16 };
    public static GuildDemoteMember DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildDemoteMember DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildDemoteMember ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildDemoteMember__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildDemoteMember, GuildDemoteMember.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildDemoteMember__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int MemberIdFieldNumber = 2;
    private bool hasMemberId;
    private uint memberId_;
    public bool HasMemberId {
      get { return hasMemberId; }
    }
    public uint MemberId {
      get { return memberId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasMemberId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildDemoteMemberFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasMemberId) {
        output.WriteUInt32(2, field_names[1], MemberId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasMemberId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, MemberId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildDemoteMember ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildDemoteMember ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildDemoteMember ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildDemoteMember ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildDemoteMember ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildDemoteMember ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildDemoteMember ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildDemoteMember ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildDemoteMember ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildDemoteMember ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildDemoteMember MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildDemoteMember prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildDemoteMember, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildDemoteMember cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildDemoteMember result;
      
      private GuildDemoteMember PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildDemoteMember original = result;
          result = new GuildDemoteMember();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildDemoteMember MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildDemoteMember.Descriptor; }
      }
      
      public override GuildDemoteMember DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildDemoteMember.DefaultInstance; }
      }
      
      public override GuildDemoteMember BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildDemoteMember) {
          return MergeFrom((GuildDemoteMember) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildDemoteMember other) {
        if (other == global::D3.GameMessage.GuildDemoteMember.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasMemberId) {
          MemberId = other.MemberId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildDemoteMemberFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildDemoteMemberFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasMemberId = input.ReadUInt32(ref result.memberId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasMemberId {
        get { return result.hasMemberId; }
      }
      public uint MemberId {
        get { return result.MemberId; }
        set { SetMemberId(value); }
      }
      public Builder SetMemberId(uint value) {
        PrepareBuilder();
        result.hasMemberId = true;
        result.memberId_ = value;
        return this;
      }
      public Builder ClearMemberId() {
        PrepareBuilder();
        result.hasMemberId = false;
        result.memberId_ = 0;
        return this;
      }
    }
    static GuildDemoteMember() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildSetPlayerNote : pb::GeneratedMessage<GuildSetPlayerNote, GuildSetPlayerNote.Builder> {
    private GuildSetPlayerNote() { }
    private static readonly GuildSetPlayerNote defaultInstance = new GuildSetPlayerNote().MakeReadOnly();
    private static readonly string[] _guildSetPlayerNoteFieldNames = new string[] { "guild_id", "member_id", "note" };
    private static readonly uint[] _guildSetPlayerNoteFieldTags = new uint[] { 8, 16, 26 };
    public static GuildSetPlayerNote DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildSetPlayerNote DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildSetPlayerNote ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSetPlayerNote__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildSetPlayerNote, GuildSetPlayerNote.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSetPlayerNote__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int MemberIdFieldNumber = 2;
    private bool hasMemberId;
    private uint memberId_;
    public bool HasMemberId {
      get { return hasMemberId; }
    }
    public uint MemberId {
      get { return memberId_; }
    }
    
    public const int NoteFieldNumber = 3;
    private bool hasNote;
    private string note_ = "";
    public bool HasNote {
      get { return hasNote; }
    }
    public string Note {
      get { return note_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasMemberId) return false;
        if (!hasNote) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildSetPlayerNoteFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasMemberId) {
        output.WriteUInt32(2, field_names[1], MemberId);
      }
      if (hasNote) {
        output.WriteString(3, field_names[2], Note);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasMemberId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, MemberId);
        }
        if (hasNote) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Note);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildSetPlayerNote ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSetPlayerNote ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSetPlayerNote ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSetPlayerNote ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSetPlayerNote ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSetPlayerNote ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildSetPlayerNote ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildSetPlayerNote ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildSetPlayerNote ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSetPlayerNote ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildSetPlayerNote MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildSetPlayerNote prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildSetPlayerNote, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildSetPlayerNote cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildSetPlayerNote result;
      
      private GuildSetPlayerNote PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildSetPlayerNote original = result;
          result = new GuildSetPlayerNote();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildSetPlayerNote MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildSetPlayerNote.Descriptor; }
      }
      
      public override GuildSetPlayerNote DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildSetPlayerNote.DefaultInstance; }
      }
      
      public override GuildSetPlayerNote BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildSetPlayerNote) {
          return MergeFrom((GuildSetPlayerNote) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildSetPlayerNote other) {
        if (other == global::D3.GameMessage.GuildSetPlayerNote.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasMemberId) {
          MemberId = other.MemberId;
        }
        if (other.HasNote) {
          Note = other.Note;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildSetPlayerNoteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildSetPlayerNoteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasMemberId = input.ReadUInt32(ref result.memberId_);
              break;
            }
            case 26: {
              result.hasNote = input.ReadString(ref result.note_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasMemberId {
        get { return result.hasMemberId; }
      }
      public uint MemberId {
        get { return result.MemberId; }
        set { SetMemberId(value); }
      }
      public Builder SetMemberId(uint value) {
        PrepareBuilder();
        result.hasMemberId = true;
        result.memberId_ = value;
        return this;
      }
      public Builder ClearMemberId() {
        PrepareBuilder();
        result.hasMemberId = false;
        result.memberId_ = 0;
        return this;
      }
      
      public bool HasNote {
        get { return result.hasNote; }
      }
      public string Note {
        get { return result.Note; }
        set { SetNote(value); }
      }
      public Builder SetNote(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNote = true;
        result.note_ = value;
        return this;
      }
      public Builder ClearNote() {
        PrepareBuilder();
        result.hasNote = false;
        result.note_ = "";
        return this;
      }
    }
    static GuildSetPlayerNote() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildSetBanner : pb::GeneratedMessage<GuildSetBanner, GuildSetBanner.Builder> {
    private GuildSetBanner() { }
    private static readonly GuildSetBanner defaultInstance = new GuildSetBanner().MakeReadOnly();
    private static readonly string[] _guildSetBannerFieldNames = new string[] { "banner", "guild_id" };
    private static readonly uint[] _guildSetBannerFieldTags = new uint[] { 18, 8 };
    public static GuildSetBanner DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildSetBanner DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildSetBanner ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSetBanner__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildSetBanner, GuildSetBanner.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSetBanner__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int BannerFieldNumber = 2;
    private bool hasBanner;
    private global::D3.Account.BannerConfiguration banner_;
    public bool HasBanner {
      get { return hasBanner; }
    }
    public global::D3.Account.BannerConfiguration Banner {
      get { return banner_ ?? global::D3.Account.BannerConfiguration.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasBanner) return false;
        if (!Banner.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildSetBannerFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[1], GuildId);
      }
      if (hasBanner) {
        output.WriteMessage(2, field_names[0], Banner);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasBanner) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Banner);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildSetBanner ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSetBanner ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSetBanner ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSetBanner ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSetBanner ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSetBanner ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildSetBanner ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildSetBanner ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildSetBanner ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSetBanner ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildSetBanner MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildSetBanner prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildSetBanner, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildSetBanner cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildSetBanner result;
      
      private GuildSetBanner PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildSetBanner original = result;
          result = new GuildSetBanner();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildSetBanner MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildSetBanner.Descriptor; }
      }
      
      public override GuildSetBanner DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildSetBanner.DefaultInstance; }
      }
      
      public override GuildSetBanner BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildSetBanner) {
          return MergeFrom((GuildSetBanner) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildSetBanner other) {
        if (other == global::D3.GameMessage.GuildSetBanner.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasBanner) {
          MergeBanner(other.Banner);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildSetBannerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildSetBannerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 18: {
              global::D3.Account.BannerConfiguration.Builder subBuilder = global::D3.Account.BannerConfiguration.CreateBuilder();
              if (result.hasBanner) {
                subBuilder.MergeFrom(Banner);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Banner = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasBanner {
       get { return result.hasBanner; }
      }
      public global::D3.Account.BannerConfiguration Banner {
        get { return result.Banner; }
        set { SetBanner(value); }
      }
      public Builder SetBanner(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBanner = true;
        result.banner_ = value;
        return this;
      }
      public Builder SetBanner(global::D3.Account.BannerConfiguration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBanner = true;
        result.banner_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBanner(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBanner &&
            result.banner_ != global::D3.Account.BannerConfiguration.DefaultInstance) {
            result.banner_ = global::D3.Account.BannerConfiguration.CreateBuilder(result.banner_).MergeFrom(value).BuildPartial();
        } else {
          result.banner_ = value;
        }
        result.hasBanner = true;
        return this;
      }
      public Builder ClearBanner() {
        PrepareBuilder();
        result.hasBanner = false;
        result.banner_ = null;
        return this;
      }
    }
    static GuildSetBanner() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildKickMember : pb::GeneratedMessage<GuildKickMember, GuildKickMember.Builder> {
    private GuildKickMember() { }
    private static readonly GuildKickMember defaultInstance = new GuildKickMember().MakeReadOnly();
    private static readonly string[] _guildKickMemberFieldNames = new string[] { "guild_id", "member_id" };
    private static readonly uint[] _guildKickMemberFieldTags = new uint[] { 8, 16 };
    public static GuildKickMember DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildKickMember DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildKickMember ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildKickMember__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildKickMember, GuildKickMember.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildKickMember__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int MemberIdFieldNumber = 2;
    private bool hasMemberId;
    private uint memberId_;
    public bool HasMemberId {
      get { return hasMemberId; }
    }
    public uint MemberId {
      get { return memberId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasMemberId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildKickMemberFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasMemberId) {
        output.WriteUInt32(2, field_names[1], MemberId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasMemberId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, MemberId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildKickMember ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildKickMember ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildKickMember ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildKickMember ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildKickMember ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildKickMember ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildKickMember ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildKickMember ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildKickMember ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildKickMember ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildKickMember MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildKickMember prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildKickMember, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildKickMember cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildKickMember result;
      
      private GuildKickMember PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildKickMember original = result;
          result = new GuildKickMember();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildKickMember MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildKickMember.Descriptor; }
      }
      
      public override GuildKickMember DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildKickMember.DefaultInstance; }
      }
      
      public override GuildKickMember BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildKickMember) {
          return MergeFrom((GuildKickMember) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildKickMember other) {
        if (other == global::D3.GameMessage.GuildKickMember.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasMemberId) {
          MemberId = other.MemberId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildKickMemberFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildKickMemberFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasMemberId = input.ReadUInt32(ref result.memberId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasMemberId {
        get { return result.hasMemberId; }
      }
      public uint MemberId {
        get { return result.MemberId; }
        set { SetMemberId(value); }
      }
      public Builder SetMemberId(uint value) {
        PrepareBuilder();
        result.hasMemberId = true;
        result.memberId_ = value;
        return this;
      }
      public Builder ClearMemberId() {
        PrepareBuilder();
        result.hasMemberId = false;
        result.memberId_ = 0;
        return this;
      }
    }
    static GuildKickMember() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildFetchRoster : pb::GeneratedMessage<GuildFetchRoster, GuildFetchRoster.Builder> {
    private GuildFetchRoster() { }
    private static readonly GuildFetchRoster defaultInstance = new GuildFetchRoster().MakeReadOnly();
    private static readonly string[] _guildFetchRosterFieldNames = new string[] { "guild_id", "num_members", "start_position" };
    private static readonly uint[] _guildFetchRosterFieldTags = new uint[] { 8, 24, 16 };
    public static GuildFetchRoster DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildFetchRoster DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildFetchRoster ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildFetchRoster__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildFetchRoster, GuildFetchRoster.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildFetchRoster__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int StartPositionFieldNumber = 2;
    private bool hasStartPosition;
    private uint startPosition_;
    public bool HasStartPosition {
      get { return hasStartPosition; }
    }
    public uint StartPosition {
      get { return startPosition_; }
    }
    
    public const int NumMembersFieldNumber = 3;
    private bool hasNumMembers;
    private uint numMembers_;
    public bool HasNumMembers {
      get { return hasNumMembers; }
    }
    public uint NumMembers {
      get { return numMembers_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasStartPosition) return false;
        if (!hasNumMembers) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildFetchRosterFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasStartPosition) {
        output.WriteUInt32(2, field_names[2], StartPosition);
      }
      if (hasNumMembers) {
        output.WriteUInt32(3, field_names[1], NumMembers);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasStartPosition) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, StartPosition);
        }
        if (hasNumMembers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, NumMembers);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildFetchRoster ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildFetchRoster ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildFetchRoster ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildFetchRoster ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildFetchRoster ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildFetchRoster ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildFetchRoster ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildFetchRoster ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildFetchRoster ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildFetchRoster ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildFetchRoster MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildFetchRoster prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildFetchRoster, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildFetchRoster cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildFetchRoster result;
      
      private GuildFetchRoster PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildFetchRoster original = result;
          result = new GuildFetchRoster();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildFetchRoster MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildFetchRoster.Descriptor; }
      }
      
      public override GuildFetchRoster DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildFetchRoster.DefaultInstance; }
      }
      
      public override GuildFetchRoster BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildFetchRoster) {
          return MergeFrom((GuildFetchRoster) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildFetchRoster other) {
        if (other == global::D3.GameMessage.GuildFetchRoster.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasStartPosition) {
          StartPosition = other.StartPosition;
        }
        if (other.HasNumMembers) {
          NumMembers = other.NumMembers;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildFetchRosterFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildFetchRosterFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasStartPosition = input.ReadUInt32(ref result.startPosition_);
              break;
            }
            case 24: {
              result.hasNumMembers = input.ReadUInt32(ref result.numMembers_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasStartPosition {
        get { return result.hasStartPosition; }
      }
      public uint StartPosition {
        get { return result.StartPosition; }
        set { SetStartPosition(value); }
      }
      public Builder SetStartPosition(uint value) {
        PrepareBuilder();
        result.hasStartPosition = true;
        result.startPosition_ = value;
        return this;
      }
      public Builder ClearStartPosition() {
        PrepareBuilder();
        result.hasStartPosition = false;
        result.startPosition_ = 0;
        return this;
      }
      
      public bool HasNumMembers {
        get { return result.hasNumMembers; }
      }
      public uint NumMembers {
        get { return result.NumMembers; }
        set { SetNumMembers(value); }
      }
      public Builder SetNumMembers(uint value) {
        PrepareBuilder();
        result.hasNumMembers = true;
        result.numMembers_ = value;
        return this;
      }
      public Builder ClearNumMembers() {
        PrepareBuilder();
        result.hasNumMembers = false;
        result.numMembers_ = 0;
        return this;
      }
    }
    static GuildFetchRoster() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildMoveRank : pb::GeneratedMessage<GuildMoveRank, GuildMoveRank.Builder> {
    private GuildMoveRank() { }
    private static readonly GuildMoveRank defaultInstance = new GuildMoveRank().MakeReadOnly();
    private static readonly string[] _guildMoveRankFieldNames = new string[] { "guild_id", "move_up", "rank_id" };
    private static readonly uint[] _guildMoveRankFieldTags = new uint[] { 8, 24, 16 };
    public static GuildMoveRank DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildMoveRank DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildMoveRank ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildMoveRank__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildMoveRank, GuildMoveRank.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildMoveRank__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int RankIdFieldNumber = 2;
    private bool hasRankId;
    private uint rankId_;
    public bool HasRankId {
      get { return hasRankId; }
    }
    public uint RankId {
      get { return rankId_; }
    }
    
    public const int MoveUpFieldNumber = 3;
    private bool hasMoveUp;
    private bool moveUp_;
    public bool HasMoveUp {
      get { return hasMoveUp; }
    }
    public bool MoveUp {
      get { return moveUp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasRankId) return false;
        if (!hasMoveUp) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildMoveRankFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasRankId) {
        output.WriteUInt32(2, field_names[2], RankId);
      }
      if (hasMoveUp) {
        output.WriteBool(3, field_names[1], MoveUp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasRankId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, RankId);
        }
        if (hasMoveUp) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, MoveUp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildMoveRank ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildMoveRank ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildMoveRank ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildMoveRank ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildMoveRank ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildMoveRank ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildMoveRank ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildMoveRank ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildMoveRank ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildMoveRank ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildMoveRank MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildMoveRank prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildMoveRank, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildMoveRank cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildMoveRank result;
      
      private GuildMoveRank PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildMoveRank original = result;
          result = new GuildMoveRank();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildMoveRank MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildMoveRank.Descriptor; }
      }
      
      public override GuildMoveRank DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildMoveRank.DefaultInstance; }
      }
      
      public override GuildMoveRank BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildMoveRank) {
          return MergeFrom((GuildMoveRank) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildMoveRank other) {
        if (other == global::D3.GameMessage.GuildMoveRank.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasRankId) {
          RankId = other.RankId;
        }
        if (other.HasMoveUp) {
          MoveUp = other.MoveUp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildMoveRankFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildMoveRankFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasRankId = input.ReadUInt32(ref result.rankId_);
              break;
            }
            case 24: {
              result.hasMoveUp = input.ReadBool(ref result.moveUp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasRankId {
        get { return result.hasRankId; }
      }
      public uint RankId {
        get { return result.RankId; }
        set { SetRankId(value); }
      }
      public Builder SetRankId(uint value) {
        PrepareBuilder();
        result.hasRankId = true;
        result.rankId_ = value;
        return this;
      }
      public Builder ClearRankId() {
        PrepareBuilder();
        result.hasRankId = false;
        result.rankId_ = 0;
        return this;
      }
      
      public bool HasMoveUp {
        get { return result.hasMoveUp; }
      }
      public bool MoveUp {
        get { return result.MoveUp; }
        set { SetMoveUp(value); }
      }
      public Builder SetMoveUp(bool value) {
        PrepareBuilder();
        result.hasMoveUp = true;
        result.moveUp_ = value;
        return this;
      }
      public Builder ClearMoveUp() {
        PrepareBuilder();
        result.hasMoveUp = false;
        result.moveUp_ = false;
        return this;
      }
    }
    static GuildMoveRank() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildSearch : pb::GeneratedMessage<GuildSearch, GuildSearch.Builder> {
    private GuildSearch() { }
    private static readonly GuildSearch defaultInstance = new GuildSearch().MakeReadOnly();
    private static readonly string[] _guildSearchFieldNames = new string[] { "clan_or_group", "locale", "name", "search_category" };
    private static readonly uint[] _guildSearchFieldTags = new uint[] { 32, 8, 26, 16 };
    public static GuildSearch DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildSearch DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildSearch ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSearch__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildSearch, GuildSearch.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSearch__FieldAccessorTable; }
    }
    
    public const int LocaleFieldNumber = 1;
    private bool hasLocale;
    private uint locale_;
    public bool HasLocale {
      get { return hasLocale; }
    }
    public uint Locale {
      get { return locale_; }
    }
    
    public const int SearchCategoryFieldNumber = 2;
    private bool hasSearchCategory;
    private uint searchCategory_;
    public bool HasSearchCategory {
      get { return hasSearchCategory; }
    }
    public uint SearchCategory {
      get { return searchCategory_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ClanOrGroupFieldNumber = 4;
    private bool hasClanOrGroup;
    private uint clanOrGroup_;
    public bool HasClanOrGroup {
      get { return hasClanOrGroup; }
    }
    public uint ClanOrGroup {
      get { return clanOrGroup_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLocale) return false;
        if (!hasClanOrGroup) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildSearchFieldNames;
      if (hasLocale) {
        output.WriteUInt32(1, field_names[1], Locale);
      }
      if (hasSearchCategory) {
        output.WriteUInt32(2, field_names[3], SearchCategory);
      }
      if (hasName) {
        output.WriteString(3, field_names[2], Name);
      }
      if (hasClanOrGroup) {
        output.WriteUInt32(4, field_names[0], ClanOrGroup);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLocale) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Locale);
        }
        if (hasSearchCategory) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, SearchCategory);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Name);
        }
        if (hasClanOrGroup) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, ClanOrGroup);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildSearch ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSearch ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSearch ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSearch ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSearch ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSearch ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildSearch ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildSearch ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildSearch ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSearch ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildSearch MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildSearch prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildSearch, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildSearch cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildSearch result;
      
      private GuildSearch PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildSearch original = result;
          result = new GuildSearch();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildSearch MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildSearch.Descriptor; }
      }
      
      public override GuildSearch DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildSearch.DefaultInstance; }
      }
      
      public override GuildSearch BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildSearch) {
          return MergeFrom((GuildSearch) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildSearch other) {
        if (other == global::D3.GameMessage.GuildSearch.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLocale) {
          Locale = other.Locale;
        }
        if (other.HasSearchCategory) {
          SearchCategory = other.SearchCategory;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasClanOrGroup) {
          ClanOrGroup = other.ClanOrGroup;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildSearchFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildSearchFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLocale = input.ReadUInt32(ref result.locale_);
              break;
            }
            case 16: {
              result.hasSearchCategory = input.ReadUInt32(ref result.searchCategory_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 32: {
              result.hasClanOrGroup = input.ReadUInt32(ref result.clanOrGroup_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLocale {
        get { return result.hasLocale; }
      }
      public uint Locale {
        get { return result.Locale; }
        set { SetLocale(value); }
      }
      public Builder SetLocale(uint value) {
        PrepareBuilder();
        result.hasLocale = true;
        result.locale_ = value;
        return this;
      }
      public Builder ClearLocale() {
        PrepareBuilder();
        result.hasLocale = false;
        result.locale_ = 0;
        return this;
      }
      
      public bool HasSearchCategory {
        get { return result.hasSearchCategory; }
      }
      public uint SearchCategory {
        get { return result.SearchCategory; }
        set { SetSearchCategory(value); }
      }
      public Builder SetSearchCategory(uint value) {
        PrepareBuilder();
        result.hasSearchCategory = true;
        result.searchCategory_ = value;
        return this;
      }
      public Builder ClearSearchCategory() {
        PrepareBuilder();
        result.hasSearchCategory = false;
        result.searchCategory_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasClanOrGroup {
        get { return result.hasClanOrGroup; }
      }
      public uint ClanOrGroup {
        get { return result.ClanOrGroup; }
        set { SetClanOrGroup(value); }
      }
      public Builder SetClanOrGroup(uint value) {
        PrepareBuilder();
        result.hasClanOrGroup = true;
        result.clanOrGroup_ = value;
        return this;
      }
      public Builder ClearClanOrGroup() {
        PrepareBuilder();
        result.hasClanOrGroup = false;
        result.clanOrGroup_ = 0;
        return this;
      }
    }
    static GuildSearch() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildInviteGroupChat : pb::GeneratedMessage<GuildInviteGroupChat, GuildInviteGroupChat.Builder> {
    private GuildInviteGroupChat() { }
    private static readonly GuildInviteGroupChat defaultInstance = new GuildInviteGroupChat().MakeReadOnly();
    private static readonly string[] _guildInviteGroupChatFieldNames = new string[] { "guild_id", "invitee_id" };
    private static readonly uint[] _guildInviteGroupChatFieldTags = new uint[] { 8, 16 };
    public static GuildInviteGroupChat DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildInviteGroupChat DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildInviteGroupChat ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildInviteGroupChat__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildInviteGroupChat, GuildInviteGroupChat.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildInviteGroupChat__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int InviteeIdFieldNumber = 2;
    private bool hasInviteeId;
    private ulong inviteeId_;
    public bool HasInviteeId {
      get { return hasInviteeId; }
    }
    public ulong InviteeId {
      get { return inviteeId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasInviteeId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildInviteGroupChatFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasInviteeId) {
        output.WriteUInt64(2, field_names[1], InviteeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasInviteeId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, InviteeId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildInviteGroupChat ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInviteGroupChat ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInviteGroupChat ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInviteGroupChat ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInviteGroupChat ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInviteGroupChat ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildInviteGroupChat ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildInviteGroupChat ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildInviteGroupChat ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInviteGroupChat ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildInviteGroupChat MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildInviteGroupChat prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildInviteGroupChat, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildInviteGroupChat cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildInviteGroupChat result;
      
      private GuildInviteGroupChat PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildInviteGroupChat original = result;
          result = new GuildInviteGroupChat();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildInviteGroupChat MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildInviteGroupChat.Descriptor; }
      }
      
      public override GuildInviteGroupChat DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildInviteGroupChat.DefaultInstance; }
      }
      
      public override GuildInviteGroupChat BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildInviteGroupChat) {
          return MergeFrom((GuildInviteGroupChat) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildInviteGroupChat other) {
        if (other == global::D3.GameMessage.GuildInviteGroupChat.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasInviteeId) {
          InviteeId = other.InviteeId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildInviteGroupChatFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildInviteGroupChatFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasInviteeId = input.ReadUInt64(ref result.inviteeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasInviteeId {
        get { return result.hasInviteeId; }
      }
      public ulong InviteeId {
        get { return result.InviteeId; }
        set { SetInviteeId(value); }
      }
      public Builder SetInviteeId(ulong value) {
        PrepareBuilder();
        result.hasInviteeId = true;
        result.inviteeId_ = value;
        return this;
      }
      public Builder ClearInviteeId() {
        PrepareBuilder();
        result.hasInviteeId = false;
        result.inviteeId_ = 0UL;
        return this;
      }
    }
    static GuildInviteGroupChat() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildAcceptGroupChat : pb::GeneratedMessage<GuildAcceptGroupChat, GuildAcceptGroupChat.Builder> {
    private GuildAcceptGroupChat() { }
    private static readonly GuildAcceptGroupChat defaultInstance = new GuildAcceptGroupChat().MakeReadOnly();
    private static readonly string[] _guildAcceptGroupChatFieldNames = new string[] { "guild_id", "party_id", "result" };
    private static readonly uint[] _guildAcceptGroupChatFieldTags = new uint[] { 8, 26, 16 };
    public static GuildAcceptGroupChat DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildAcceptGroupChat DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildAcceptGroupChat ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildAcceptGroupChat__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildAcceptGroupChat, GuildAcceptGroupChat.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildAcceptGroupChat__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int ResultFieldNumber = 2;
    private bool hasResult;
    private bool result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public bool Result {
      get { return result_; }
    }
    
    public const int PartyIdFieldNumber = 3;
    private bool hasPartyId;
    private global::D3.OnlineService.ChannelId partyId_;
    public bool HasPartyId {
      get { return hasPartyId; }
    }
    public global::D3.OnlineService.ChannelId PartyId {
      get { return partyId_ ?? global::D3.OnlineService.ChannelId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasResult) return false;
        if (!hasPartyId) return false;
        if (!PartyId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildAcceptGroupChatFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasResult) {
        output.WriteBool(2, field_names[2], Result);
      }
      if (hasPartyId) {
        output.WriteMessage(3, field_names[1], PartyId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasResult) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, Result);
        }
        if (hasPartyId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, PartyId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildAcceptGroupChat ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildAcceptGroupChat ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildAcceptGroupChat ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildAcceptGroupChat ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildAcceptGroupChat ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildAcceptGroupChat ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildAcceptGroupChat ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildAcceptGroupChat ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildAcceptGroupChat ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildAcceptGroupChat ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildAcceptGroupChat MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildAcceptGroupChat prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildAcceptGroupChat, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildAcceptGroupChat cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildAcceptGroupChat result;
      
      private GuildAcceptGroupChat PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildAcceptGroupChat original = result;
          result = new GuildAcceptGroupChat();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildAcceptGroupChat MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildAcceptGroupChat.Descriptor; }
      }
      
      public override GuildAcceptGroupChat DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildAcceptGroupChat.DefaultInstance; }
      }
      
      public override GuildAcceptGroupChat BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildAcceptGroupChat) {
          return MergeFrom((GuildAcceptGroupChat) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildAcceptGroupChat other) {
        if (other == global::D3.GameMessage.GuildAcceptGroupChat.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasPartyId) {
          MergePartyId(other.PartyId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildAcceptGroupChatFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildAcceptGroupChatFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasResult = input.ReadBool(ref result.result_);
              break;
            }
            case 26: {
              global::D3.OnlineService.ChannelId.Builder subBuilder = global::D3.OnlineService.ChannelId.CreateBuilder();
              if (result.hasPartyId) {
                subBuilder.MergeFrom(PartyId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PartyId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public bool Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(bool value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = false;
        return this;
      }
      
      public bool HasPartyId {
       get { return result.hasPartyId; }
      }
      public global::D3.OnlineService.ChannelId PartyId {
        get { return result.PartyId; }
        set { SetPartyId(value); }
      }
      public Builder SetPartyId(global::D3.OnlineService.ChannelId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPartyId = true;
        result.partyId_ = value;
        return this;
      }
      public Builder SetPartyId(global::D3.OnlineService.ChannelId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPartyId = true;
        result.partyId_ = builderForValue.Build();
        return this;
      }
      public Builder MergePartyId(global::D3.OnlineService.ChannelId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPartyId &&
            result.partyId_ != global::D3.OnlineService.ChannelId.DefaultInstance) {
            result.partyId_ = global::D3.OnlineService.ChannelId.CreateBuilder(result.partyId_).MergeFrom(value).BuildPartial();
        } else {
          result.partyId_ = value;
        }
        result.hasPartyId = true;
        return this;
      }
      public Builder ClearPartyId() {
        PrepareBuilder();
        result.hasPartyId = false;
        result.partyId_ = null;
        return this;
      }
    }
    static GuildAcceptGroupChat() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildSetLeader : pb::GeneratedMessage<GuildSetLeader, GuildSetLeader.Builder> {
    private GuildSetLeader() { }
    private static readonly GuildSetLeader defaultInstance = new GuildSetLeader().MakeReadOnly();
    private static readonly string[] _guildSetLeaderFieldNames = new string[] { "guild_id", "member_id" };
    private static readonly uint[] _guildSetLeaderFieldTags = new uint[] { 8, 16 };
    public static GuildSetLeader DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildSetLeader DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildSetLeader ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSetLeader__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildSetLeader, GuildSetLeader.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSetLeader__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int MemberIdFieldNumber = 2;
    private bool hasMemberId;
    private uint memberId_;
    public bool HasMemberId {
      get { return hasMemberId; }
    }
    public uint MemberId {
      get { return memberId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasMemberId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildSetLeaderFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasMemberId) {
        output.WriteUInt32(2, field_names[1], MemberId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasMemberId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, MemberId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildSetLeader ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSetLeader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSetLeader ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSetLeader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSetLeader ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSetLeader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildSetLeader ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildSetLeader ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildSetLeader ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSetLeader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildSetLeader MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildSetLeader prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildSetLeader, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildSetLeader cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildSetLeader result;
      
      private GuildSetLeader PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildSetLeader original = result;
          result = new GuildSetLeader();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildSetLeader MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildSetLeader.Descriptor; }
      }
      
      public override GuildSetLeader DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildSetLeader.DefaultInstance; }
      }
      
      public override GuildSetLeader BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildSetLeader) {
          return MergeFrom((GuildSetLeader) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildSetLeader other) {
        if (other == global::D3.GameMessage.GuildSetLeader.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasMemberId) {
          MemberId = other.MemberId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildSetLeaderFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildSetLeaderFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasMemberId = input.ReadUInt32(ref result.memberId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasMemberId {
        get { return result.hasMemberId; }
      }
      public uint MemberId {
        get { return result.MemberId; }
        set { SetMemberId(value); }
      }
      public Builder SetMemberId(uint value) {
        PrepareBuilder();
        result.hasMemberId = true;
        result.memberId_ = value;
        return this;
      }
      public Builder ClearMemberId() {
        PrepareBuilder();
        result.hasMemberId = false;
        result.memberId_ = 0;
        return this;
      }
    }
    static GuildSetLeader() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildCancelInvite : pb::GeneratedMessage<GuildCancelInvite, GuildCancelInvite.Builder> {
    private GuildCancelInvite() { }
    private static readonly GuildCancelInvite defaultInstance = new GuildCancelInvite().MakeReadOnly();
    private static readonly string[] _guildCancelInviteFieldNames = new string[] { "account_id", "guild_id" };
    private static readonly uint[] _guildCancelInviteFieldTags = new uint[] { 16, 8 };
    public static GuildCancelInvite DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildCancelInvite DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildCancelInvite ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildCancelInvite__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildCancelInvite, GuildCancelInvite.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildCancelInvite__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int AccountIdFieldNumber = 2;
    private bool hasAccountId;
    private ulong accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public ulong AccountId {
      get { return accountId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasAccountId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildCancelInviteFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[1], GuildId);
      }
      if (hasAccountId) {
        output.WriteUInt64(2, field_names[0], AccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, AccountId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildCancelInvite ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildCancelInvite ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildCancelInvite ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildCancelInvite ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildCancelInvite ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildCancelInvite ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildCancelInvite ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildCancelInvite ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildCancelInvite ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildCancelInvite ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildCancelInvite MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildCancelInvite prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildCancelInvite, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildCancelInvite cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildCancelInvite result;
      
      private GuildCancelInvite PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildCancelInvite original = result;
          result = new GuildCancelInvite();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildCancelInvite MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildCancelInvite.Descriptor; }
      }
      
      public override GuildCancelInvite DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildCancelInvite.DefaultInstance; }
      }
      
      public override GuildCancelInvite BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildCancelInvite) {
          return MergeFrom((GuildCancelInvite) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildCancelInvite other) {
        if (other == global::D3.GameMessage.GuildCancelInvite.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildCancelInviteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildCancelInviteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasAccountId = input.ReadUInt64(ref result.accountId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasAccountId {
        get { return result.hasAccountId; }
      }
      public ulong AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(ulong value) {
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = 0UL;
        return this;
      }
    }
    static GuildCancelInvite() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildSuggest : pb::GeneratedMessage<GuildSuggest, GuildSuggest.Builder> {
    private GuildSuggest() { }
    private static readonly GuildSuggest defaultInstance = new GuildSuggest().MakeReadOnly();
    private static readonly string[] _guildSuggestFieldNames = new string[] { "guild_id", "other_account_id" };
    private static readonly uint[] _guildSuggestFieldTags = new uint[] { 8, 16 };
    public static GuildSuggest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildSuggest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildSuggest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSuggest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildSuggest, GuildSuggest.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSuggest__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int OtherAccountIdFieldNumber = 2;
    private bool hasOtherAccountId;
    private ulong otherAccountId_;
    public bool HasOtherAccountId {
      get { return hasOtherAccountId; }
    }
    public ulong OtherAccountId {
      get { return otherAccountId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasOtherAccountId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildSuggestFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasOtherAccountId) {
        output.WriteUInt64(2, field_names[1], OtherAccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasOtherAccountId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, OtherAccountId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildSuggest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSuggest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSuggest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSuggest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSuggest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSuggest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildSuggest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildSuggest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildSuggest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSuggest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildSuggest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildSuggest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildSuggest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildSuggest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildSuggest result;
      
      private GuildSuggest PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildSuggest original = result;
          result = new GuildSuggest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildSuggest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildSuggest.Descriptor; }
      }
      
      public override GuildSuggest DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildSuggest.DefaultInstance; }
      }
      
      public override GuildSuggest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildSuggest) {
          return MergeFrom((GuildSuggest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildSuggest other) {
        if (other == global::D3.GameMessage.GuildSuggest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasOtherAccountId) {
          OtherAccountId = other.OtherAccountId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildSuggestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildSuggestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasOtherAccountId = input.ReadUInt64(ref result.otherAccountId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasOtherAccountId {
        get { return result.hasOtherAccountId; }
      }
      public ulong OtherAccountId {
        get { return result.OtherAccountId; }
        set { SetOtherAccountId(value); }
      }
      public Builder SetOtherAccountId(ulong value) {
        PrepareBuilder();
        result.hasOtherAccountId = true;
        result.otherAccountId_ = value;
        return this;
      }
      public Builder ClearOtherAccountId() {
        PrepareBuilder();
        result.hasOtherAccountId = false;
        result.otherAccountId_ = 0UL;
        return this;
      }
    }
    static GuildSuggest() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildSuggestionResponse : pb::GeneratedMessage<GuildSuggestionResponse, GuildSuggestionResponse.Builder> {
    private GuildSuggestionResponse() { }
    private static readonly GuildSuggestionResponse defaultInstance = new GuildSuggestionResponse().MakeReadOnly();
    private static readonly string[] _guildSuggestionResponseFieldNames = new string[] { "guild_id", "invitee_id", "result" };
    private static readonly uint[] _guildSuggestionResponseFieldTags = new uint[] { 8, 16, 24 };
    public static GuildSuggestionResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildSuggestionResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildSuggestionResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSuggestionResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildSuggestionResponse, GuildSuggestionResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSuggestionResponse__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int InviteeIdFieldNumber = 2;
    private bool hasInviteeId;
    private ulong inviteeId_;
    public bool HasInviteeId {
      get { return hasInviteeId; }
    }
    public ulong InviteeId {
      get { return inviteeId_; }
    }
    
    public const int ResultFieldNumber = 3;
    private bool hasResult;
    private bool result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public bool Result {
      get { return result_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasInviteeId) return false;
        if (!hasResult) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildSuggestionResponseFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasInviteeId) {
        output.WriteUInt64(2, field_names[1], InviteeId);
      }
      if (hasResult) {
        output.WriteBool(3, field_names[2], Result);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasInviteeId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, InviteeId);
        }
        if (hasResult) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, Result);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildSuggestionResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSuggestionResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSuggestionResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSuggestionResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSuggestionResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSuggestionResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildSuggestionResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildSuggestionResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildSuggestionResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSuggestionResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildSuggestionResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildSuggestionResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildSuggestionResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildSuggestionResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildSuggestionResponse result;
      
      private GuildSuggestionResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildSuggestionResponse original = result;
          result = new GuildSuggestionResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildSuggestionResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildSuggestionResponse.Descriptor; }
      }
      
      public override GuildSuggestionResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildSuggestionResponse.DefaultInstance; }
      }
      
      public override GuildSuggestionResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildSuggestionResponse) {
          return MergeFrom((GuildSuggestionResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildSuggestionResponse other) {
        if (other == global::D3.GameMessage.GuildSuggestionResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasInviteeId) {
          InviteeId = other.InviteeId;
        }
        if (other.HasResult) {
          Result = other.Result;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildSuggestionResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildSuggestionResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasInviteeId = input.ReadUInt64(ref result.inviteeId_);
              break;
            }
            case 24: {
              result.hasResult = input.ReadBool(ref result.result_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasInviteeId {
        get { return result.hasInviteeId; }
      }
      public ulong InviteeId {
        get { return result.InviteeId; }
        set { SetInviteeId(value); }
      }
      public Builder SetInviteeId(ulong value) {
        PrepareBuilder();
        result.hasInviteeId = true;
        result.inviteeId_ = value;
        return this;
      }
      public Builder ClearInviteeId() {
        PrepareBuilder();
        result.hasInviteeId = false;
        result.inviteeId_ = 0UL;
        return this;
      }
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public bool Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(bool value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = false;
        return this;
      }
    }
    static GuildSuggestionResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildFetchNews : pb::GeneratedMessage<GuildFetchNews, GuildFetchNews.Builder> {
    private GuildFetchNews() { }
    private static readonly GuildFetchNews defaultInstance = new GuildFetchNews().MakeReadOnly();
    private static readonly string[] _guildFetchNewsFieldNames = new string[] { "guild_id", "news_time" };
    private static readonly uint[] _guildFetchNewsFieldTags = new uint[] { 8, 16 };
    public static GuildFetchNews DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildFetchNews DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildFetchNews ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildFetchNews__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildFetchNews, GuildFetchNews.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildFetchNews__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int NewsTimeFieldNumber = 2;
    private bool hasNewsTime;
    private ulong newsTime_;
    public bool HasNewsTime {
      get { return hasNewsTime; }
    }
    public ulong NewsTime {
      get { return newsTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasNewsTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildFetchNewsFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasNewsTime) {
        output.WriteUInt64(2, field_names[1], NewsTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasNewsTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, NewsTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildFetchNews ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildFetchNews ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildFetchNews ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildFetchNews ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildFetchNews ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildFetchNews ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildFetchNews ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildFetchNews ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildFetchNews ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildFetchNews ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildFetchNews MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildFetchNews prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildFetchNews, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildFetchNews cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildFetchNews result;
      
      private GuildFetchNews PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildFetchNews original = result;
          result = new GuildFetchNews();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildFetchNews MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildFetchNews.Descriptor; }
      }
      
      public override GuildFetchNews DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildFetchNews.DefaultInstance; }
      }
      
      public override GuildFetchNews BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildFetchNews) {
          return MergeFrom((GuildFetchNews) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildFetchNews other) {
        if (other == global::D3.GameMessage.GuildFetchNews.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasNewsTime) {
          NewsTime = other.NewsTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildFetchNewsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildFetchNewsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasNewsTime = input.ReadUInt64(ref result.newsTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasNewsTime {
        get { return result.hasNewsTime; }
      }
      public ulong NewsTime {
        get { return result.NewsTime; }
        set { SetNewsTime(value); }
      }
      public Builder SetNewsTime(ulong value) {
        PrepareBuilder();
        result.hasNewsTime = true;
        result.newsTime_ = value;
        return this;
      }
      public Builder ClearNewsTime() {
        PrepareBuilder();
        result.hasNewsTime = false;
        result.newsTime_ = 0UL;
        return this;
      }
    }
    static GuildFetchNews() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildSetSearchSettings : pb::GeneratedMessage<GuildSetSearchSettings, GuildSetSearchSettings.Builder> {
    private GuildSetSearchSettings() { }
    private static readonly GuildSetSearchSettings defaultInstance = new GuildSetSearchSettings().MakeReadOnly();
    private static readonly string[] _guildSetSearchSettingsFieldNames = new string[] { "guild_id", "language", "search_category" };
    private static readonly uint[] _guildSetSearchSettingsFieldTags = new uint[] { 8, 24, 16 };
    public static GuildSetSearchSettings DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildSetSearchSettings DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildSetSearchSettings ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSetSearchSettings__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildSetSearchSettings, GuildSetSearchSettings.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSetSearchSettings__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int SearchCategoryFieldNumber = 2;
    private bool hasSearchCategory;
    private uint searchCategory_;
    public bool HasSearchCategory {
      get { return hasSearchCategory; }
    }
    public uint SearchCategory {
      get { return searchCategory_; }
    }
    
    public const int LanguageFieldNumber = 3;
    private bool hasLanguage;
    private uint language_;
    public bool HasLanguage {
      get { return hasLanguage; }
    }
    public uint Language {
      get { return language_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasSearchCategory) return false;
        if (!hasLanguage) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildSetSearchSettingsFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasSearchCategory) {
        output.WriteUInt32(2, field_names[2], SearchCategory);
      }
      if (hasLanguage) {
        output.WriteUInt32(3, field_names[1], Language);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasSearchCategory) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, SearchCategory);
        }
        if (hasLanguage) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Language);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildSetSearchSettings ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSetSearchSettings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSetSearchSettings ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSetSearchSettings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSetSearchSettings ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSetSearchSettings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildSetSearchSettings ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildSetSearchSettings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildSetSearchSettings ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSetSearchSettings ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildSetSearchSettings MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildSetSearchSettings prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildSetSearchSettings, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildSetSearchSettings cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildSetSearchSettings result;
      
      private GuildSetSearchSettings PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildSetSearchSettings original = result;
          result = new GuildSetSearchSettings();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildSetSearchSettings MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildSetSearchSettings.Descriptor; }
      }
      
      public override GuildSetSearchSettings DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildSetSearchSettings.DefaultInstance; }
      }
      
      public override GuildSetSearchSettings BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildSetSearchSettings) {
          return MergeFrom((GuildSetSearchSettings) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildSetSearchSettings other) {
        if (other == global::D3.GameMessage.GuildSetSearchSettings.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasSearchCategory) {
          SearchCategory = other.SearchCategory;
        }
        if (other.HasLanguage) {
          Language = other.Language;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildSetSearchSettingsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildSetSearchSettingsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasSearchCategory = input.ReadUInt32(ref result.searchCategory_);
              break;
            }
            case 24: {
              result.hasLanguage = input.ReadUInt32(ref result.language_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasSearchCategory {
        get { return result.hasSearchCategory; }
      }
      public uint SearchCategory {
        get { return result.SearchCategory; }
        set { SetSearchCategory(value); }
      }
      public Builder SetSearchCategory(uint value) {
        PrepareBuilder();
        result.hasSearchCategory = true;
        result.searchCategory_ = value;
        return this;
      }
      public Builder ClearSearchCategory() {
        PrepareBuilder();
        result.hasSearchCategory = false;
        result.searchCategory_ = 0;
        return this;
      }
      
      public bool HasLanguage {
        get { return result.hasLanguage; }
      }
      public uint Language {
        get { return result.Language; }
        set { SetLanguage(value); }
      }
      public Builder SetLanguage(uint value) {
        PrepareBuilder();
        result.hasLanguage = true;
        result.language_ = value;
        return this;
      }
      public Builder ClearLanguage() {
        PrepareBuilder();
        result.hasLanguage = false;
        result.language_ = 0;
        return this;
      }
    }
    static GuildSetSearchSettings() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildSetLFM : pb::GeneratedMessage<GuildSetLFM, GuildSetLFM.Builder> {
    private GuildSetLFM() { }
    private static readonly GuildSetLFM defaultInstance = new GuildSetLFM().MakeReadOnly();
    private static readonly string[] _guildSetLFMFieldNames = new string[] { "guild_id", "lfm" };
    private static readonly uint[] _guildSetLFMFieldTags = new uint[] { 8, 16 };
    public static GuildSetLFM DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildSetLFM DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildSetLFM ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSetLFM__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildSetLFM, GuildSetLFM.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSetLFM__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int LfmFieldNumber = 2;
    private bool hasLfm;
    private bool lfm_;
    public bool HasLfm {
      get { return hasLfm; }
    }
    public bool Lfm {
      get { return lfm_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasLfm) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildSetLFMFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      if (hasLfm) {
        output.WriteBool(2, field_names[1], Lfm);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasLfm) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, Lfm);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildSetLFM ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSetLFM ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSetLFM ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSetLFM ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSetLFM ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSetLFM ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildSetLFM ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildSetLFM ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildSetLFM ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSetLFM ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildSetLFM MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildSetLFM prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildSetLFM, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildSetLFM cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildSetLFM result;
      
      private GuildSetLFM PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildSetLFM original = result;
          result = new GuildSetLFM();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildSetLFM MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildSetLFM.Descriptor; }
      }
      
      public override GuildSetLFM DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildSetLFM.DefaultInstance; }
      }
      
      public override GuildSetLFM BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildSetLFM) {
          return MergeFrom((GuildSetLFM) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildSetLFM other) {
        if (other == global::D3.GameMessage.GuildSetLFM.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasLfm) {
          Lfm = other.Lfm;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildSetLFMFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildSetLFMFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasLfm = input.ReadBool(ref result.lfm_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasLfm {
        get { return result.hasLfm; }
      }
      public bool Lfm {
        get { return result.Lfm; }
        set { SetLfm(value); }
      }
      public Builder SetLfm(bool value) {
        PrepareBuilder();
        result.hasLfm = true;
        result.lfm_ = value;
        return this;
      }
      public Builder ClearLfm() {
        PrepareBuilder();
        result.hasLfm = false;
        result.lfm_ = false;
        return this;
      }
    }
    static GuildSetLFM() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GroupSetPrivacyLevel : pb::GeneratedMessage<GroupSetPrivacyLevel, GroupSetPrivacyLevel.Builder> {
    private GroupSetPrivacyLevel() { }
    private static readonly GroupSetPrivacyLevel defaultInstance = new GroupSetPrivacyLevel().MakeReadOnly();
    private static readonly string[] _groupSetPrivacyLevelFieldNames = new string[] { "group_id", "privacy_level" };
    private static readonly uint[] _groupSetPrivacyLevelFieldTags = new uint[] { 8, 16 };
    public static GroupSetPrivacyLevel DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GroupSetPrivacyLevel DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GroupSetPrivacyLevel ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GroupSetPrivacyLevel__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GroupSetPrivacyLevel, GroupSetPrivacyLevel.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GroupSetPrivacyLevel__FieldAccessorTable; }
    }
    
    public const int GroupIdFieldNumber = 1;
    private bool hasGroupId;
    private ulong groupId_;
    public bool HasGroupId {
      get { return hasGroupId; }
    }
    public ulong GroupId {
      get { return groupId_; }
    }
    
    public const int PrivacyLevelFieldNumber = 2;
    private bool hasPrivacyLevel;
    private uint privacyLevel_;
    public bool HasPrivacyLevel {
      get { return hasPrivacyLevel; }
    }
    public uint PrivacyLevel {
      get { return privacyLevel_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGroupId) return false;
        if (!hasPrivacyLevel) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _groupSetPrivacyLevelFieldNames;
      if (hasGroupId) {
        output.WriteUInt64(1, field_names[0], GroupId);
      }
      if (hasPrivacyLevel) {
        output.WriteUInt32(2, field_names[1], PrivacyLevel);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGroupId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GroupId);
        }
        if (hasPrivacyLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, PrivacyLevel);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GroupSetPrivacyLevel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GroupSetPrivacyLevel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GroupSetPrivacyLevel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GroupSetPrivacyLevel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GroupSetPrivacyLevel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GroupSetPrivacyLevel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GroupSetPrivacyLevel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GroupSetPrivacyLevel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GroupSetPrivacyLevel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GroupSetPrivacyLevel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GroupSetPrivacyLevel MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GroupSetPrivacyLevel prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GroupSetPrivacyLevel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GroupSetPrivacyLevel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GroupSetPrivacyLevel result;
      
      private GroupSetPrivacyLevel PrepareBuilder() {
        if (resultIsReadOnly) {
          GroupSetPrivacyLevel original = result;
          result = new GroupSetPrivacyLevel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GroupSetPrivacyLevel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GroupSetPrivacyLevel.Descriptor; }
      }
      
      public override GroupSetPrivacyLevel DefaultInstanceForType {
        get { return global::D3.GameMessage.GroupSetPrivacyLevel.DefaultInstance; }
      }
      
      public override GroupSetPrivacyLevel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GroupSetPrivacyLevel) {
          return MergeFrom((GroupSetPrivacyLevel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GroupSetPrivacyLevel other) {
        if (other == global::D3.GameMessage.GroupSetPrivacyLevel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGroupId) {
          GroupId = other.GroupId;
        }
        if (other.HasPrivacyLevel) {
          PrivacyLevel = other.PrivacyLevel;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_groupSetPrivacyLevelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _groupSetPrivacyLevelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGroupId = input.ReadUInt64(ref result.groupId_);
              break;
            }
            case 16: {
              result.hasPrivacyLevel = input.ReadUInt32(ref result.privacyLevel_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGroupId {
        get { return result.hasGroupId; }
      }
      public ulong GroupId {
        get { return result.GroupId; }
        set { SetGroupId(value); }
      }
      public Builder SetGroupId(ulong value) {
        PrepareBuilder();
        result.hasGroupId = true;
        result.groupId_ = value;
        return this;
      }
      public Builder ClearGroupId() {
        PrepareBuilder();
        result.hasGroupId = false;
        result.groupId_ = 0UL;
        return this;
      }
      
      public bool HasPrivacyLevel {
        get { return result.hasPrivacyLevel; }
      }
      public uint PrivacyLevel {
        get { return result.PrivacyLevel; }
        set { SetPrivacyLevel(value); }
      }
      public Builder SetPrivacyLevel(uint value) {
        PrepareBuilder();
        result.hasPrivacyLevel = true;
        result.privacyLevel_ = value;
        return this;
      }
      public Builder ClearPrivacyLevel() {
        PrepareBuilder();
        result.hasPrivacyLevel = false;
        result.privacyLevel_ = 0;
        return this;
      }
    }
    static GroupSetPrivacyLevel() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetPlayerGuilds : pb::GeneratedMessage<GetPlayerGuilds, GetPlayerGuilds.Builder> {
    private GetPlayerGuilds() { }
    private static readonly GetPlayerGuilds defaultInstance = new GetPlayerGuilds().MakeReadOnly();
    private static readonly string[] _getPlayerGuildsFieldNames = new string[] { "guild_category", "target_id" };
    private static readonly uint[] _getPlayerGuildsFieldTags = new uint[] { 8, 16 };
    public static GetPlayerGuilds DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetPlayerGuilds DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetPlayerGuilds ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetPlayerGuilds__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetPlayerGuilds, GetPlayerGuilds.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GetPlayerGuilds__FieldAccessorTable; }
    }
    
    public const int GuildCategoryFieldNumber = 1;
    private bool hasGuildCategory;
    private uint guildCategory_;
    public bool HasGuildCategory {
      get { return hasGuildCategory; }
    }
    public uint GuildCategory {
      get { return guildCategory_; }
    }
    
    public const int TargetIdFieldNumber = 2;
    private bool hasTargetId;
    private ulong targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public ulong TargetId {
      get { return targetId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildCategory) return false;
        if (!hasTargetId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getPlayerGuildsFieldNames;
      if (hasGuildCategory) {
        output.WriteUInt32(1, field_names[0], GuildCategory);
      }
      if (hasTargetId) {
        output.WriteUInt64(2, field_names[1], TargetId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildCategory) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, GuildCategory);
        }
        if (hasTargetId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, TargetId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetPlayerGuilds ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetPlayerGuilds ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetPlayerGuilds ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetPlayerGuilds ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetPlayerGuilds ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetPlayerGuilds ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetPlayerGuilds ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetPlayerGuilds ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetPlayerGuilds ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetPlayerGuilds ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetPlayerGuilds MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetPlayerGuilds prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetPlayerGuilds, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetPlayerGuilds cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetPlayerGuilds result;
      
      private GetPlayerGuilds PrepareBuilder() {
        if (resultIsReadOnly) {
          GetPlayerGuilds original = result;
          result = new GetPlayerGuilds();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetPlayerGuilds MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GetPlayerGuilds.Descriptor; }
      }
      
      public override GetPlayerGuilds DefaultInstanceForType {
        get { return global::D3.GameMessage.GetPlayerGuilds.DefaultInstance; }
      }
      
      public override GetPlayerGuilds BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetPlayerGuilds) {
          return MergeFrom((GetPlayerGuilds) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetPlayerGuilds other) {
        if (other == global::D3.GameMessage.GetPlayerGuilds.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildCategory) {
          GuildCategory = other.GuildCategory;
        }
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getPlayerGuildsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getPlayerGuildsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildCategory = input.ReadUInt32(ref result.guildCategory_);
              break;
            }
            case 16: {
              result.hasTargetId = input.ReadUInt64(ref result.targetId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildCategory {
        get { return result.hasGuildCategory; }
      }
      public uint GuildCategory {
        get { return result.GuildCategory; }
        set { SetGuildCategory(value); }
      }
      public Builder SetGuildCategory(uint value) {
        PrepareBuilder();
        result.hasGuildCategory = true;
        result.guildCategory_ = value;
        return this;
      }
      public Builder ClearGuildCategory() {
        PrepareBuilder();
        result.hasGuildCategory = false;
        result.guildCategory_ = 0;
        return this;
      }
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public ulong TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(ulong value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0UL;
        return this;
      }
    }
    static GetPlayerGuilds() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildResponseId : pb::GeneratedMessage<GuildResponseId, GuildResponseId.Builder> {
    private GuildResponseId() { }
    private static readonly GuildResponseId defaultInstance = new GuildResponseId().MakeReadOnly();
    private static readonly string[] _guildResponseIdFieldNames = new string[] { "guild_id" };
    private static readonly uint[] _guildResponseIdFieldTags = new uint[] { 8 };
    public static GuildResponseId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildResponseId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildResponseId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildResponseId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildResponseId, GuildResponseId.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildResponseId__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildResponseIdFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[0], GuildId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildResponseId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildResponseId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildResponseId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildResponseId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildResponseId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildResponseId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildResponseId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildResponseId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildResponseId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildResponseId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildResponseId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildResponseId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildResponseId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildResponseId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildResponseId result;
      
      private GuildResponseId PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildResponseId original = result;
          result = new GuildResponseId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildResponseId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildResponseId.Descriptor; }
      }
      
      public override GuildResponseId DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildResponseId.DefaultInstance; }
      }
      
      public override GuildResponseId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildResponseId) {
          return MergeFrom((GuildResponseId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildResponseId other) {
        if (other == global::D3.GameMessage.GuildResponseId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildResponseIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildResponseIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
    }
    static GuildResponseId() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildResponseString : pb::GeneratedMessage<GuildResponseString, GuildResponseString.Builder> {
    private GuildResponseString() { }
    private static readonly GuildResponseString defaultInstance = new GuildResponseString().MakeReadOnly();
    private static readonly string[] _guildResponseStringFieldNames = new string[] { "response" };
    private static readonly uint[] _guildResponseStringFieldTags = new uint[] { 10 };
    public static GuildResponseString DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildResponseString DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildResponseString ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildResponseString__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildResponseString, GuildResponseString.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildResponseString__FieldAccessorTable; }
    }
    
    public const int ResponseFieldNumber = 1;
    private bool hasResponse;
    private string response_ = "";
    public bool HasResponse {
      get { return hasResponse; }
    }
    public string Response {
      get { return response_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasResponse) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildResponseStringFieldNames;
      if (hasResponse) {
        output.WriteString(1, field_names[0], Response);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasResponse) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Response);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildResponseString ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildResponseString ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildResponseString ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildResponseString ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildResponseString ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildResponseString ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildResponseString ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildResponseString ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildResponseString ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildResponseString ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildResponseString MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildResponseString prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildResponseString, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildResponseString cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildResponseString result;
      
      private GuildResponseString PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildResponseString original = result;
          result = new GuildResponseString();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildResponseString MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildResponseString.Descriptor; }
      }
      
      public override GuildResponseString DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildResponseString.DefaultInstance; }
      }
      
      public override GuildResponseString BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildResponseString) {
          return MergeFrom((GuildResponseString) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildResponseString other) {
        if (other == global::D3.GameMessage.GuildResponseString.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResponse) {
          Response = other.Response;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildResponseStringFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildResponseStringFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasResponse = input.ReadString(ref result.response_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasResponse {
        get { return result.hasResponse; }
      }
      public string Response {
        get { return result.Response; }
        set { SetResponse(value); }
      }
      public Builder SetResponse(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResponse = true;
        result.response_ = value;
        return this;
      }
      public Builder ClearResponse() {
        PrepareBuilder();
        result.hasResponse = false;
        result.response_ = "";
        return this;
      }
    }
    static GuildResponseString() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildResponseGuilds : pb::GeneratedMessage<GuildResponseGuilds, GuildResponseGuilds.Builder> {
    private GuildResponseGuilds() { }
    private static readonly GuildResponseGuilds defaultInstance = new GuildResponseGuilds().MakeReadOnly();
    private static readonly string[] _guildResponseGuildsFieldNames = new string[] { "guild_ids" };
    private static readonly uint[] _guildResponseGuildsFieldTags = new uint[] { 10 };
    public static GuildResponseGuilds DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildResponseGuilds DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildResponseGuilds ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildResponseGuilds__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildResponseGuilds, GuildResponseGuilds.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildResponseGuilds__FieldAccessorTable; }
    }
    
    public const int GuildIdsFieldNumber = 1;
    private bool hasGuildIds;
    private global::D3.Guild.GuildList guildIds_;
    public bool HasGuildIds {
      get { return hasGuildIds; }
    }
    public global::D3.Guild.GuildList GuildIds {
      get { return guildIds_ ?? global::D3.Guild.GuildList.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildIds) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildResponseGuildsFieldNames;
      if (hasGuildIds) {
        output.WriteMessage(1, field_names[0], GuildIds);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildIds) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, GuildIds);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildResponseGuilds ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildResponseGuilds ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildResponseGuilds ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildResponseGuilds ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildResponseGuilds ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildResponseGuilds ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildResponseGuilds ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildResponseGuilds ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildResponseGuilds ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildResponseGuilds ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildResponseGuilds MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildResponseGuilds prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildResponseGuilds, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildResponseGuilds cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildResponseGuilds result;
      
      private GuildResponseGuilds PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildResponseGuilds original = result;
          result = new GuildResponseGuilds();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildResponseGuilds MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildResponseGuilds.Descriptor; }
      }
      
      public override GuildResponseGuilds DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildResponseGuilds.DefaultInstance; }
      }
      
      public override GuildResponseGuilds BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildResponseGuilds) {
          return MergeFrom((GuildResponseGuilds) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildResponseGuilds other) {
        if (other == global::D3.GameMessage.GuildResponseGuilds.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildIds) {
          MergeGuildIds(other.GuildIds);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildResponseGuildsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildResponseGuildsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.Guild.GuildList.Builder subBuilder = global::D3.Guild.GuildList.CreateBuilder();
              if (result.hasGuildIds) {
                subBuilder.MergeFrom(GuildIds);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildIds = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildIds {
       get { return result.hasGuildIds; }
      }
      public global::D3.Guild.GuildList GuildIds {
        get { return result.GuildIds; }
        set { SetGuildIds(value); }
      }
      public Builder SetGuildIds(global::D3.Guild.GuildList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildIds = true;
        result.guildIds_ = value;
        return this;
      }
      public Builder SetGuildIds(global::D3.Guild.GuildList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildIds = true;
        result.guildIds_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildIds(global::D3.Guild.GuildList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildIds &&
            result.guildIds_ != global::D3.Guild.GuildList.DefaultInstance) {
            result.guildIds_ = global::D3.Guild.GuildList.CreateBuilder(result.guildIds_).MergeFrom(value).BuildPartial();
        } else {
          result.guildIds_ = value;
        }
        result.hasGuildIds = true;
        return this;
      }
      public Builder ClearGuildIds() {
        PrepareBuilder();
        result.hasGuildIds = false;
        result.guildIds_ = null;
        return this;
      }
    }
    static GuildResponseGuilds() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildSummaryResolution : pb::GeneratedMessage<GuildSummaryResolution, GuildSummaryResolution.Builder> {
    private GuildSummaryResolution() { }
    private static readonly GuildSummaryResolution defaultInstance = new GuildSummaryResolution().MakeReadOnly();
    private static readonly string[] _guildSummaryResolutionFieldNames = new string[] { "error_code", "guild_id", "summary" };
    private static readonly uint[] _guildSummaryResolutionFieldTags = new uint[] { 16, 8, 26 };
    public static GuildSummaryResolution DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildSummaryResolution DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildSummaryResolution ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSummaryResolution__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildSummaryResolution, GuildSummaryResolution.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSummaryResolution__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int ErrorCodeFieldNumber = 2;
    private bool hasErrorCode;
    private uint errorCode_;
    public bool HasErrorCode {
      get { return hasErrorCode; }
    }
    public uint ErrorCode {
      get { return errorCode_; }
    }
    
    public const int SummaryFieldNumber = 3;
    private bool hasSummary;
    private global::D3.Guild.GuildSummary summary_;
    public bool HasSummary {
      get { return hasSummary; }
    }
    public global::D3.Guild.GuildSummary Summary {
      get { return summary_ ?? global::D3.Guild.GuildSummary.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (HasSummary) {
          if (!Summary.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildSummaryResolutionFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[1], GuildId);
      }
      if (hasErrorCode) {
        output.WriteUInt32(2, field_names[0], ErrorCode);
      }
      if (hasSummary) {
        output.WriteMessage(3, field_names[2], Summary);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasErrorCode) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, ErrorCode);
        }
        if (hasSummary) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Summary);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildSummaryResolution ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSummaryResolution ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSummaryResolution ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSummaryResolution ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSummaryResolution ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSummaryResolution ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildSummaryResolution ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildSummaryResolution ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildSummaryResolution ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSummaryResolution ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildSummaryResolution MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildSummaryResolution prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildSummaryResolution, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildSummaryResolution cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildSummaryResolution result;
      
      private GuildSummaryResolution PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildSummaryResolution original = result;
          result = new GuildSummaryResolution();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildSummaryResolution MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildSummaryResolution.Descriptor; }
      }
      
      public override GuildSummaryResolution DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildSummaryResolution.DefaultInstance; }
      }
      
      public override GuildSummaryResolution BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildSummaryResolution) {
          return MergeFrom((GuildSummaryResolution) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildSummaryResolution other) {
        if (other == global::D3.GameMessage.GuildSummaryResolution.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasErrorCode) {
          ErrorCode = other.ErrorCode;
        }
        if (other.HasSummary) {
          MergeSummary(other.Summary);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildSummaryResolutionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildSummaryResolutionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasErrorCode = input.ReadUInt32(ref result.errorCode_);
              break;
            }
            case 26: {
              global::D3.Guild.GuildSummary.Builder subBuilder = global::D3.Guild.GuildSummary.CreateBuilder();
              if (result.hasSummary) {
                subBuilder.MergeFrom(Summary);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Summary = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasErrorCode {
        get { return result.hasErrorCode; }
      }
      public uint ErrorCode {
        get { return result.ErrorCode; }
        set { SetErrorCode(value); }
      }
      public Builder SetErrorCode(uint value) {
        PrepareBuilder();
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder ClearErrorCode() {
        PrepareBuilder();
        result.hasErrorCode = false;
        result.errorCode_ = 0;
        return this;
      }
      
      public bool HasSummary {
       get { return result.hasSummary; }
      }
      public global::D3.Guild.GuildSummary Summary {
        get { return result.Summary; }
        set { SetSummary(value); }
      }
      public Builder SetSummary(global::D3.Guild.GuildSummary value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSummary = true;
        result.summary_ = value;
        return this;
      }
      public Builder SetSummary(global::D3.Guild.GuildSummary.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSummary = true;
        result.summary_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSummary(global::D3.Guild.GuildSummary value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSummary &&
            result.summary_ != global::D3.Guild.GuildSummary.DefaultInstance) {
            result.summary_ = global::D3.Guild.GuildSummary.CreateBuilder(result.summary_).MergeFrom(value).BuildPartial();
        } else {
          result.summary_ = value;
        }
        result.hasSummary = true;
        return this;
      }
      public Builder ClearSummary() {
        PrepareBuilder();
        result.hasSummary = false;
        result.summary_ = null;
        return this;
      }
    }
    static GuildSummaryResolution() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildSummariesResponse : pb::GeneratedMessage<GuildSummariesResponse, GuildSummariesResponse.Builder> {
    private GuildSummariesResponse() { }
    private static readonly GuildSummariesResponse defaultInstance = new GuildSummariesResponse().MakeReadOnly();
    private static readonly string[] _guildSummariesResponseFieldNames = new string[] { "guild_summaries" };
    private static readonly uint[] _guildSummariesResponseFieldTags = new uint[] { 10 };
    public static GuildSummariesResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildSummariesResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildSummariesResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSummariesResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildSummariesResponse, GuildSummariesResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_GuildSummariesResponse__FieldAccessorTable; }
    }
    
    public const int GuildSummariesFieldNumber = 1;
    private pbc::PopsicleList<global::D3.GameMessage.GuildSummaryResolution> guildSummaries_ = new pbc::PopsicleList<global::D3.GameMessage.GuildSummaryResolution>();
    public scg::IList<global::D3.GameMessage.GuildSummaryResolution> GuildSummariesList {
      get { return guildSummaries_; }
    }
    public int GuildSummariesCount {
      get { return guildSummaries_.Count; }
    }
    public global::D3.GameMessage.GuildSummaryResolution GetGuildSummaries(int index) {
      return guildSummaries_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.GameMessage.GuildSummaryResolution element in GuildSummariesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildSummariesResponseFieldNames;
      if (guildSummaries_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], guildSummaries_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.GameMessage.GuildSummaryResolution element in GuildSummariesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildSummariesResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSummariesResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSummariesResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSummariesResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSummariesResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSummariesResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildSummariesResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildSummariesResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildSummariesResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSummariesResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildSummariesResponse MakeReadOnly() {
      guildSummaries_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildSummariesResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildSummariesResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildSummariesResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildSummariesResponse result;
      
      private GuildSummariesResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildSummariesResponse original = result;
          result = new GuildSummariesResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildSummariesResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.GuildSummariesResponse.Descriptor; }
      }
      
      public override GuildSummariesResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.GuildSummariesResponse.DefaultInstance; }
      }
      
      public override GuildSummariesResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildSummariesResponse) {
          return MergeFrom((GuildSummariesResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildSummariesResponse other) {
        if (other == global::D3.GameMessage.GuildSummariesResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.guildSummaries_.Count != 0) {
          result.guildSummaries_.Add(other.guildSummaries_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildSummariesResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildSummariesResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.guildSummaries_, global::D3.GameMessage.GuildSummaryResolution.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.GameMessage.GuildSummaryResolution> GuildSummariesList {
        get { return PrepareBuilder().guildSummaries_; }
      }
      public int GuildSummariesCount {
        get { return result.GuildSummariesCount; }
      }
      public global::D3.GameMessage.GuildSummaryResolution GetGuildSummaries(int index) {
        return result.GetGuildSummaries(index);
      }
      public Builder SetGuildSummaries(int index, global::D3.GameMessage.GuildSummaryResolution value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.guildSummaries_[index] = value;
        return this;
      }
      public Builder SetGuildSummaries(int index, global::D3.GameMessage.GuildSummaryResolution.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.guildSummaries_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGuildSummaries(global::D3.GameMessage.GuildSummaryResolution value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.guildSummaries_.Add(value);
        return this;
      }
      public Builder AddGuildSummaries(global::D3.GameMessage.GuildSummaryResolution.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.guildSummaries_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGuildSummaries(scg::IEnumerable<global::D3.GameMessage.GuildSummaryResolution> values) {
        PrepareBuilder();
        result.guildSummaries_.Add(values);
        return this;
      }
      public Builder ClearGuildSummaries() {
        PrepareBuilder();
        result.guildSummaries_.Clear();
        return this;
      }
    }
    static GuildSummariesResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LeaderboardList : pb::GeneratedMessage<LeaderboardList, LeaderboardList.Builder> {
    private LeaderboardList() { }
    private static readonly LeaderboardList defaultInstance = new LeaderboardList().MakeReadOnly();
    private static readonly string[] _leaderboardListFieldNames = new string[] { "leaderboard_id", "limit", "offset", "partition_id", "scope_id", "version" };
    private static readonly uint[] _leaderboardListFieldTags = new uint[] { 8, 32, 24, 56, 16, 48 };
    public static LeaderboardList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LeaderboardList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LeaderboardList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_LeaderboardList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LeaderboardList, LeaderboardList.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_LeaderboardList__FieldAccessorTable; }
    }
    
    public const int LeaderboardIdFieldNumber = 1;
    private bool hasLeaderboardId;
    private ulong leaderboardId_;
    public bool HasLeaderboardId {
      get { return hasLeaderboardId; }
    }
    public ulong LeaderboardId {
      get { return leaderboardId_; }
    }
    
    public const int ScopeIdFieldNumber = 2;
    private bool hasScopeId;
    private uint scopeId_;
    public bool HasScopeId {
      get { return hasScopeId; }
    }
    public uint ScopeId {
      get { return scopeId_; }
    }
    
    public const int OffsetFieldNumber = 3;
    private bool hasOffset;
    private uint offset_;
    public bool HasOffset {
      get { return hasOffset; }
    }
    public uint Offset {
      get { return offset_; }
    }
    
    public const int LimitFieldNumber = 4;
    private bool hasLimit;
    private uint limit_;
    public bool HasLimit {
      get { return hasLimit; }
    }
    public uint Limit {
      get { return limit_; }
    }
    
    public const int VersionFieldNumber = 6;
    private bool hasVersion;
    private ulong version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public ulong Version {
      get { return version_; }
    }
    
    public const int PartitionIdFieldNumber = 7;
    private bool hasPartitionId;
    private uint partitionId_;
    public bool HasPartitionId {
      get { return hasPartitionId; }
    }
    public uint PartitionId {
      get { return partitionId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLeaderboardId) return false;
        if (!hasScopeId) return false;
        if (!hasOffset) return false;
        if (!hasLimit) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _leaderboardListFieldNames;
      if (hasLeaderboardId) {
        output.WriteUInt64(1, field_names[0], LeaderboardId);
      }
      if (hasScopeId) {
        output.WriteUInt32(2, field_names[4], ScopeId);
      }
      if (hasOffset) {
        output.WriteUInt32(3, field_names[2], Offset);
      }
      if (hasLimit) {
        output.WriteUInt32(4, field_names[1], Limit);
      }
      if (hasVersion) {
        output.WriteUInt64(6, field_names[5], Version);
      }
      if (hasPartitionId) {
        output.WriteUInt32(7, field_names[3], PartitionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLeaderboardId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, LeaderboardId);
        }
        if (hasScopeId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, ScopeId);
        }
        if (hasOffset) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Offset);
        }
        if (hasLimit) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, Limit);
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt64Size(6, Version);
        }
        if (hasPartitionId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, PartitionId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LeaderboardList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LeaderboardList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LeaderboardList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LeaderboardList MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LeaderboardList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LeaderboardList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LeaderboardList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LeaderboardList result;
      
      private LeaderboardList PrepareBuilder() {
        if (resultIsReadOnly) {
          LeaderboardList original = result;
          result = new LeaderboardList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LeaderboardList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.LeaderboardList.Descriptor; }
      }
      
      public override LeaderboardList DefaultInstanceForType {
        get { return global::D3.GameMessage.LeaderboardList.DefaultInstance; }
      }
      
      public override LeaderboardList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LeaderboardList) {
          return MergeFrom((LeaderboardList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LeaderboardList other) {
        if (other == global::D3.GameMessage.LeaderboardList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLeaderboardId) {
          LeaderboardId = other.LeaderboardId;
        }
        if (other.HasScopeId) {
          ScopeId = other.ScopeId;
        }
        if (other.HasOffset) {
          Offset = other.Offset;
        }
        if (other.HasLimit) {
          Limit = other.Limit;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasPartitionId) {
          PartitionId = other.PartitionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_leaderboardListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _leaderboardListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLeaderboardId = input.ReadUInt64(ref result.leaderboardId_);
              break;
            }
            case 16: {
              result.hasScopeId = input.ReadUInt32(ref result.scopeId_);
              break;
            }
            case 24: {
              result.hasOffset = input.ReadUInt32(ref result.offset_);
              break;
            }
            case 32: {
              result.hasLimit = input.ReadUInt32(ref result.limit_);
              break;
            }
            case 48: {
              result.hasVersion = input.ReadUInt64(ref result.version_);
              break;
            }
            case 56: {
              result.hasPartitionId = input.ReadUInt32(ref result.partitionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLeaderboardId {
        get { return result.hasLeaderboardId; }
      }
      public ulong LeaderboardId {
        get { return result.LeaderboardId; }
        set { SetLeaderboardId(value); }
      }
      public Builder SetLeaderboardId(ulong value) {
        PrepareBuilder();
        result.hasLeaderboardId = true;
        result.leaderboardId_ = value;
        return this;
      }
      public Builder ClearLeaderboardId() {
        PrepareBuilder();
        result.hasLeaderboardId = false;
        result.leaderboardId_ = 0UL;
        return this;
      }
      
      public bool HasScopeId {
        get { return result.hasScopeId; }
      }
      public uint ScopeId {
        get { return result.ScopeId; }
        set { SetScopeId(value); }
      }
      public Builder SetScopeId(uint value) {
        PrepareBuilder();
        result.hasScopeId = true;
        result.scopeId_ = value;
        return this;
      }
      public Builder ClearScopeId() {
        PrepareBuilder();
        result.hasScopeId = false;
        result.scopeId_ = 0;
        return this;
      }
      
      public bool HasOffset {
        get { return result.hasOffset; }
      }
      public uint Offset {
        get { return result.Offset; }
        set { SetOffset(value); }
      }
      public Builder SetOffset(uint value) {
        PrepareBuilder();
        result.hasOffset = true;
        result.offset_ = value;
        return this;
      }
      public Builder ClearOffset() {
        PrepareBuilder();
        result.hasOffset = false;
        result.offset_ = 0;
        return this;
      }
      
      public bool HasLimit {
        get { return result.hasLimit; }
      }
      public uint Limit {
        get { return result.Limit; }
        set { SetLimit(value); }
      }
      public Builder SetLimit(uint value) {
        PrepareBuilder();
        result.hasLimit = true;
        result.limit_ = value;
        return this;
      }
      public Builder ClearLimit() {
        PrepareBuilder();
        result.hasLimit = false;
        result.limit_ = 0;
        return this;
      }
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public ulong Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(ulong value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0UL;
        return this;
      }
      
      public bool HasPartitionId {
        get { return result.hasPartitionId; }
      }
      public uint PartitionId {
        get { return result.PartitionId; }
        set { SetPartitionId(value); }
      }
      public Builder SetPartitionId(uint value) {
        PrepareBuilder();
        result.hasPartitionId = true;
        result.partitionId_ = value;
        return this;
      }
      public Builder ClearPartitionId() {
        PrepareBuilder();
        result.hasPartitionId = false;
        result.partitionId_ = 0;
        return this;
      }
    }
    static LeaderboardList() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LeaderboardListResponse : pb::GeneratedMessage<LeaderboardListResponse, LeaderboardListResponse.Builder> {
    private LeaderboardListResponse() { }
    private static readonly LeaderboardListResponse defaultInstance = new LeaderboardListResponse().MakeReadOnly();
    private static readonly string[] _leaderboardListResponseFieldNames = new string[] { "entry", "limit", "offset", "own_rank", "total_leaderboard_entries", "version" };
    private static readonly uint[] _leaderboardListResponseFieldTags = new uint[] { 26, 16, 8, 40, 32, 48 };
    public static LeaderboardListResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LeaderboardListResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LeaderboardListResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_LeaderboardListResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LeaderboardListResponse, LeaderboardListResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_LeaderboardListResponse__FieldAccessorTable; }
    }
    
    public const int OffsetFieldNumber = 1;
    private bool hasOffset;
    private uint offset_;
    public bool HasOffset {
      get { return hasOffset; }
    }
    public uint Offset {
      get { return offset_; }
    }
    
    public const int LimitFieldNumber = 2;
    private bool hasLimit;
    private uint limit_;
    public bool HasLimit {
      get { return hasLimit; }
    }
    public uint Limit {
      get { return limit_; }
    }
    
    public const int EntryFieldNumber = 3;
    private pbc::PopsicleList<global::D3.Leaderboard.Slot> entry_ = new pbc::PopsicleList<global::D3.Leaderboard.Slot>();
    public scg::IList<global::D3.Leaderboard.Slot> EntryList {
      get { return entry_; }
    }
    public int EntryCount {
      get { return entry_.Count; }
    }
    public global::D3.Leaderboard.Slot GetEntry(int index) {
      return entry_[index];
    }
    
    public const int TotalLeaderboardEntriesFieldNumber = 4;
    private bool hasTotalLeaderboardEntries;
    private uint totalLeaderboardEntries_;
    public bool HasTotalLeaderboardEntries {
      get { return hasTotalLeaderboardEntries; }
    }
    public uint TotalLeaderboardEntries {
      get { return totalLeaderboardEntries_; }
    }
    
    public const int OwnRankFieldNumber = 5;
    private bool hasOwnRank;
    private uint ownRank_;
    public bool HasOwnRank {
      get { return hasOwnRank; }
    }
    public uint OwnRank {
      get { return ownRank_; }
    }
    
    public const int VersionFieldNumber = 6;
    private bool hasVersion;
    private ulong version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public ulong Version {
      get { return version_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOffset) return false;
        if (!hasLimit) return false;
        if (!hasTotalLeaderboardEntries) return false;
        foreach (global::D3.Leaderboard.Slot element in EntryList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _leaderboardListResponseFieldNames;
      if (hasOffset) {
        output.WriteUInt32(1, field_names[2], Offset);
      }
      if (hasLimit) {
        output.WriteUInt32(2, field_names[1], Limit);
      }
      if (entry_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], entry_);
      }
      if (hasTotalLeaderboardEntries) {
        output.WriteUInt32(4, field_names[4], TotalLeaderboardEntries);
      }
      if (hasOwnRank) {
        output.WriteUInt32(5, field_names[3], OwnRank);
      }
      if (hasVersion) {
        output.WriteUInt64(6, field_names[5], Version);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasOffset) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Offset);
        }
        if (hasLimit) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Limit);
        }
        foreach (global::D3.Leaderboard.Slot element in EntryList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (hasTotalLeaderboardEntries) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, TotalLeaderboardEntries);
        }
        if (hasOwnRank) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, OwnRank);
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt64Size(6, Version);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LeaderboardListResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardListResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardListResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardListResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardListResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardListResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardListResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LeaderboardListResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LeaderboardListResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardListResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LeaderboardListResponse MakeReadOnly() {
      entry_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LeaderboardListResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LeaderboardListResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LeaderboardListResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LeaderboardListResponse result;
      
      private LeaderboardListResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          LeaderboardListResponse original = result;
          result = new LeaderboardListResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LeaderboardListResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.LeaderboardListResponse.Descriptor; }
      }
      
      public override LeaderboardListResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.LeaderboardListResponse.DefaultInstance; }
      }
      
      public override LeaderboardListResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LeaderboardListResponse) {
          return MergeFrom((LeaderboardListResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LeaderboardListResponse other) {
        if (other == global::D3.GameMessage.LeaderboardListResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOffset) {
          Offset = other.Offset;
        }
        if (other.HasLimit) {
          Limit = other.Limit;
        }
        if (other.entry_.Count != 0) {
          result.entry_.Add(other.entry_);
        }
        if (other.HasTotalLeaderboardEntries) {
          TotalLeaderboardEntries = other.TotalLeaderboardEntries;
        }
        if (other.HasOwnRank) {
          OwnRank = other.OwnRank;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_leaderboardListResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _leaderboardListResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOffset = input.ReadUInt32(ref result.offset_);
              break;
            }
            case 16: {
              result.hasLimit = input.ReadUInt32(ref result.limit_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.entry_, global::D3.Leaderboard.Slot.DefaultInstance, extensionRegistry);
              break;
            }
            case 32: {
              result.hasTotalLeaderboardEntries = input.ReadUInt32(ref result.totalLeaderboardEntries_);
              break;
            }
            case 40: {
              result.hasOwnRank = input.ReadUInt32(ref result.ownRank_);
              break;
            }
            case 48: {
              result.hasVersion = input.ReadUInt64(ref result.version_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOffset {
        get { return result.hasOffset; }
      }
      public uint Offset {
        get { return result.Offset; }
        set { SetOffset(value); }
      }
      public Builder SetOffset(uint value) {
        PrepareBuilder();
        result.hasOffset = true;
        result.offset_ = value;
        return this;
      }
      public Builder ClearOffset() {
        PrepareBuilder();
        result.hasOffset = false;
        result.offset_ = 0;
        return this;
      }
      
      public bool HasLimit {
        get { return result.hasLimit; }
      }
      public uint Limit {
        get { return result.Limit; }
        set { SetLimit(value); }
      }
      public Builder SetLimit(uint value) {
        PrepareBuilder();
        result.hasLimit = true;
        result.limit_ = value;
        return this;
      }
      public Builder ClearLimit() {
        PrepareBuilder();
        result.hasLimit = false;
        result.limit_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Leaderboard.Slot> EntryList {
        get { return PrepareBuilder().entry_; }
      }
      public int EntryCount {
        get { return result.EntryCount; }
      }
      public global::D3.Leaderboard.Slot GetEntry(int index) {
        return result.GetEntry(index);
      }
      public Builder SetEntry(int index, global::D3.Leaderboard.Slot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entry_[index] = value;
        return this;
      }
      public Builder SetEntry(int index, global::D3.Leaderboard.Slot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entry_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntry(global::D3.Leaderboard.Slot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entry_.Add(value);
        return this;
      }
      public Builder AddEntry(global::D3.Leaderboard.Slot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entry_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntry(scg::IEnumerable<global::D3.Leaderboard.Slot> values) {
        PrepareBuilder();
        result.entry_.Add(values);
        return this;
      }
      public Builder ClearEntry() {
        PrepareBuilder();
        result.entry_.Clear();
        return this;
      }
      
      public bool HasTotalLeaderboardEntries {
        get { return result.hasTotalLeaderboardEntries; }
      }
      public uint TotalLeaderboardEntries {
        get { return result.TotalLeaderboardEntries; }
        set { SetTotalLeaderboardEntries(value); }
      }
      public Builder SetTotalLeaderboardEntries(uint value) {
        PrepareBuilder();
        result.hasTotalLeaderboardEntries = true;
        result.totalLeaderboardEntries_ = value;
        return this;
      }
      public Builder ClearTotalLeaderboardEntries() {
        PrepareBuilder();
        result.hasTotalLeaderboardEntries = false;
        result.totalLeaderboardEntries_ = 0;
        return this;
      }
      
      public bool HasOwnRank {
        get { return result.hasOwnRank; }
      }
      public uint OwnRank {
        get { return result.OwnRank; }
        set { SetOwnRank(value); }
      }
      public Builder SetOwnRank(uint value) {
        PrepareBuilder();
        result.hasOwnRank = true;
        result.ownRank_ = value;
        return this;
      }
      public Builder ClearOwnRank() {
        PrepareBuilder();
        result.hasOwnRank = false;
        result.ownRank_ = 0;
        return this;
      }
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public ulong Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(ulong value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0UL;
        return this;
      }
    }
    static LeaderboardListResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LeaderboardFetchScores : pb::GeneratedMessage<LeaderboardFetchScores, LeaderboardFetchScores.Builder> {
    private LeaderboardFetchScores() { }
    private static readonly LeaderboardFetchScores defaultInstance = new LeaderboardFetchScores().MakeReadOnly();
    private static readonly string[] _leaderboardFetchScoresFieldNames = new string[] { "game_account_ids", "leaderboard_id", "partition_id", "partition_type", "scope_id" };
    private static readonly uint[] _leaderboardFetchScoresFieldTags = new uint[] { 24, 32, 16, 8, 40 };
    public static LeaderboardFetchScores DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LeaderboardFetchScores DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LeaderboardFetchScores ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_LeaderboardFetchScores__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LeaderboardFetchScores, LeaderboardFetchScores.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_LeaderboardFetchScores__FieldAccessorTable; }
    }
    
    public const int PartitionIdFieldNumber = 2;
    private bool hasPartitionId;
    private uint partitionId_;
    public bool HasPartitionId {
      get { return hasPartitionId; }
    }
    public uint PartitionId {
      get { return partitionId_; }
    }
    
    public const int GameAccountIdsFieldNumber = 3;
    private pbc::PopsicleList<ulong> gameAccountIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> GameAccountIdsList {
      get { return pbc::Lists.AsReadOnly(gameAccountIds_); }
    }
    public int GameAccountIdsCount {
      get { return gameAccountIds_.Count; }
    }
    public ulong GetGameAccountIds(int index) {
      return gameAccountIds_[index];
    }
    
    public const int LeaderboardIdFieldNumber = 4;
    private bool hasLeaderboardId;
    private ulong leaderboardId_;
    public bool HasLeaderboardId {
      get { return hasLeaderboardId; }
    }
    public ulong LeaderboardId {
      get { return leaderboardId_; }
    }
    
    public const int ScopeIdFieldNumber = 5;
    private bool hasScopeId;
    private uint scopeId_;
    public bool HasScopeId {
      get { return hasScopeId; }
    }
    public uint ScopeId {
      get { return scopeId_; }
    }
    
    public const int PartitionTypeFieldNumber = 1;
    private bool hasPartitionType;
    private global::D3.Leaderboard.PartitionType partitionType_ = global::D3.Leaderboard.PartitionType.SEASON;
    public bool HasPartitionType {
      get { return hasPartitionType; }
    }
    public global::D3.Leaderboard.PartitionType PartitionType {
      get { return partitionType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPartitionId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _leaderboardFetchScoresFieldNames;
      if (hasPartitionType) {
        output.WriteEnum(1, field_names[3], (int) PartitionType, PartitionType);
      }
      if (hasPartitionId) {
        output.WriteUInt32(2, field_names[2], PartitionId);
      }
      if (gameAccountIds_.Count > 0) {
        output.WriteUInt64Array(3, field_names[0], gameAccountIds_);
      }
      if (hasLeaderboardId) {
        output.WriteUInt64(4, field_names[1], LeaderboardId);
      }
      if (hasScopeId) {
        output.WriteUInt32(5, field_names[4], ScopeId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPartitionId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, PartitionId);
        }
        {
          int dataSize = 0;
          foreach (ulong element in GameAccountIdsList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * gameAccountIds_.Count;
        }
        if (hasLeaderboardId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, LeaderboardId);
        }
        if (hasScopeId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, ScopeId);
        }
        if (hasPartitionType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) PartitionType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LeaderboardFetchScores ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardFetchScores ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardFetchScores ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardFetchScores ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardFetchScores ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardFetchScores ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardFetchScores ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LeaderboardFetchScores ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LeaderboardFetchScores ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardFetchScores ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LeaderboardFetchScores MakeReadOnly() {
      gameAccountIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LeaderboardFetchScores prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LeaderboardFetchScores, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LeaderboardFetchScores cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LeaderboardFetchScores result;
      
      private LeaderboardFetchScores PrepareBuilder() {
        if (resultIsReadOnly) {
          LeaderboardFetchScores original = result;
          result = new LeaderboardFetchScores();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LeaderboardFetchScores MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.LeaderboardFetchScores.Descriptor; }
      }
      
      public override LeaderboardFetchScores DefaultInstanceForType {
        get { return global::D3.GameMessage.LeaderboardFetchScores.DefaultInstance; }
      }
      
      public override LeaderboardFetchScores BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LeaderboardFetchScores) {
          return MergeFrom((LeaderboardFetchScores) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LeaderboardFetchScores other) {
        if (other == global::D3.GameMessage.LeaderboardFetchScores.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPartitionId) {
          PartitionId = other.PartitionId;
        }
        if (other.gameAccountIds_.Count != 0) {
          result.gameAccountIds_.Add(other.gameAccountIds_);
        }
        if (other.HasLeaderboardId) {
          LeaderboardId = other.LeaderboardId;
        }
        if (other.HasScopeId) {
          ScopeId = other.ScopeId;
        }
        if (other.HasPartitionType) {
          PartitionType = other.PartitionType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_leaderboardFetchScoresFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _leaderboardFetchScoresFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.partitionType_, out unknown)) {
                result.hasPartitionType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasPartitionId = input.ReadUInt32(ref result.partitionId_);
              break;
            }
            case 26:
            case 24: {
              input.ReadUInt64Array(tag, field_name, result.gameAccountIds_);
              break;
            }
            case 32: {
              result.hasLeaderboardId = input.ReadUInt64(ref result.leaderboardId_);
              break;
            }
            case 40: {
              result.hasScopeId = input.ReadUInt32(ref result.scopeId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPartitionId {
        get { return result.hasPartitionId; }
      }
      public uint PartitionId {
        get { return result.PartitionId; }
        set { SetPartitionId(value); }
      }
      public Builder SetPartitionId(uint value) {
        PrepareBuilder();
        result.hasPartitionId = true;
        result.partitionId_ = value;
        return this;
      }
      public Builder ClearPartitionId() {
        PrepareBuilder();
        result.hasPartitionId = false;
        result.partitionId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> GameAccountIdsList {
        get { return PrepareBuilder().gameAccountIds_; }
      }
      public int GameAccountIdsCount {
        get { return result.GameAccountIdsCount; }
      }
      public ulong GetGameAccountIds(int index) {
        return result.GetGameAccountIds(index);
      }
      public Builder SetGameAccountIds(int index, ulong value) {
        PrepareBuilder();
        result.gameAccountIds_[index] = value;
        return this;
      }
      public Builder AddGameAccountIds(ulong value) {
        PrepareBuilder();
        result.gameAccountIds_.Add(value);
        return this;
      }
      public Builder AddRangeGameAccountIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.gameAccountIds_.Add(values);
        return this;
      }
      public Builder ClearGameAccountIds() {
        PrepareBuilder();
        result.gameAccountIds_.Clear();
        return this;
      }
      
      public bool HasLeaderboardId {
        get { return result.hasLeaderboardId; }
      }
      public ulong LeaderboardId {
        get { return result.LeaderboardId; }
        set { SetLeaderboardId(value); }
      }
      public Builder SetLeaderboardId(ulong value) {
        PrepareBuilder();
        result.hasLeaderboardId = true;
        result.leaderboardId_ = value;
        return this;
      }
      public Builder ClearLeaderboardId() {
        PrepareBuilder();
        result.hasLeaderboardId = false;
        result.leaderboardId_ = 0UL;
        return this;
      }
      
      public bool HasScopeId {
        get { return result.hasScopeId; }
      }
      public uint ScopeId {
        get { return result.ScopeId; }
        set { SetScopeId(value); }
      }
      public Builder SetScopeId(uint value) {
        PrepareBuilder();
        result.hasScopeId = true;
        result.scopeId_ = value;
        return this;
      }
      public Builder ClearScopeId() {
        PrepareBuilder();
        result.hasScopeId = false;
        result.scopeId_ = 0;
        return this;
      }
      
      public bool HasPartitionType {
       get { return result.hasPartitionType; }
      }
      public global::D3.Leaderboard.PartitionType PartitionType {
        get { return result.PartitionType; }
        set { SetPartitionType(value); }
      }
      public Builder SetPartitionType(global::D3.Leaderboard.PartitionType value) {
        PrepareBuilder();
        result.hasPartitionType = true;
        result.partitionType_ = value;
        return this;
      }
      public Builder ClearPartitionType() {
        PrepareBuilder();
        result.hasPartitionType = false;
        result.partitionType_ = global::D3.Leaderboard.PartitionType.SEASON;
        return this;
      }
    }
    static LeaderboardFetchScores() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LeaderboardFetchScoresResponse : pb::GeneratedMessage<LeaderboardFetchScoresResponse, LeaderboardFetchScoresResponse.Builder> {
    private LeaderboardFetchScoresResponse() { }
    private static readonly LeaderboardFetchScoresResponse defaultInstance = new LeaderboardFetchScoresResponse().MakeReadOnly();
    private static readonly string[] _leaderboardFetchScoresResponseFieldNames = new string[] { "entry" };
    private static readonly uint[] _leaderboardFetchScoresResponseFieldTags = new uint[] { 10 };
    public static LeaderboardFetchScoresResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LeaderboardFetchScoresResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LeaderboardFetchScoresResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_LeaderboardFetchScoresResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LeaderboardFetchScoresResponse, LeaderboardFetchScoresResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_LeaderboardFetchScoresResponse__FieldAccessorTable; }
    }
    
    public const int EntryFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Leaderboard.Score> entry_ = new pbc::PopsicleList<global::D3.Leaderboard.Score>();
    public scg::IList<global::D3.Leaderboard.Score> EntryList {
      get { return entry_; }
    }
    public int EntryCount {
      get { return entry_.Count; }
    }
    public global::D3.Leaderboard.Score GetEntry(int index) {
      return entry_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Leaderboard.Score element in EntryList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _leaderboardFetchScoresResponseFieldNames;
      if (entry_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], entry_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Leaderboard.Score element in EntryList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LeaderboardFetchScoresResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardFetchScoresResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardFetchScoresResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardFetchScoresResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardFetchScoresResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardFetchScoresResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardFetchScoresResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LeaderboardFetchScoresResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LeaderboardFetchScoresResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardFetchScoresResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LeaderboardFetchScoresResponse MakeReadOnly() {
      entry_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LeaderboardFetchScoresResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LeaderboardFetchScoresResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LeaderboardFetchScoresResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LeaderboardFetchScoresResponse result;
      
      private LeaderboardFetchScoresResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          LeaderboardFetchScoresResponse original = result;
          result = new LeaderboardFetchScoresResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LeaderboardFetchScoresResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.LeaderboardFetchScoresResponse.Descriptor; }
      }
      
      public override LeaderboardFetchScoresResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.LeaderboardFetchScoresResponse.DefaultInstance; }
      }
      
      public override LeaderboardFetchScoresResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LeaderboardFetchScoresResponse) {
          return MergeFrom((LeaderboardFetchScoresResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LeaderboardFetchScoresResponse other) {
        if (other == global::D3.GameMessage.LeaderboardFetchScoresResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.entry_.Count != 0) {
          result.entry_.Add(other.entry_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_leaderboardFetchScoresResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _leaderboardFetchScoresResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.entry_, global::D3.Leaderboard.Score.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Leaderboard.Score> EntryList {
        get { return PrepareBuilder().entry_; }
      }
      public int EntryCount {
        get { return result.EntryCount; }
      }
      public global::D3.Leaderboard.Score GetEntry(int index) {
        return result.GetEntry(index);
      }
      public Builder SetEntry(int index, global::D3.Leaderboard.Score value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entry_[index] = value;
        return this;
      }
      public Builder SetEntry(int index, global::D3.Leaderboard.Score.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entry_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntry(global::D3.Leaderboard.Score value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entry_.Add(value);
        return this;
      }
      public Builder AddEntry(global::D3.Leaderboard.Score.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entry_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntry(scg::IEnumerable<global::D3.Leaderboard.Score> values) {
        PrepareBuilder();
        result.entry_.Add(values);
        return this;
      }
      public Builder ClearEntry() {
        PrepareBuilder();
        result.entry_.Clear();
        return this;
      }
    }
    static LeaderboardFetchScoresResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LeaderboardGetHeroSnapshot : pb::GeneratedMessage<LeaderboardGetHeroSnapshot, LeaderboardGetHeroSnapshot.Builder> {
    private LeaderboardGetHeroSnapshot() { }
    private static readonly LeaderboardGetHeroSnapshot defaultInstance = new LeaderboardGetHeroSnapshot().MakeReadOnly();
    private static readonly string[] _leaderboardGetHeroSnapshotFieldNames = new string[] { "game_account_id", "leaderboard_id", "partition_id", "scope_id" };
    private static readonly uint[] _leaderboardGetHeroSnapshotFieldTags = new uint[] { 8, 32, 16, 24 };
    public static LeaderboardGetHeroSnapshot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LeaderboardGetHeroSnapshot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LeaderboardGetHeroSnapshot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_LeaderboardGetHeroSnapshot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LeaderboardGetHeroSnapshot, LeaderboardGetHeroSnapshot.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_LeaderboardGetHeroSnapshot__FieldAccessorTable; }
    }
    
    public const int GameAccountIdFieldNumber = 1;
    private bool hasGameAccountId;
    private ulong gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public ulong GameAccountId {
      get { return gameAccountId_; }
    }
    
    public const int PartitionIdFieldNumber = 2;
    private bool hasPartitionId;
    private uint partitionId_;
    public bool HasPartitionId {
      get { return hasPartitionId; }
    }
    public uint PartitionId {
      get { return partitionId_; }
    }
    
    public const int ScopeIdFieldNumber = 3;
    private bool hasScopeId;
    private uint scopeId_;
    public bool HasScopeId {
      get { return hasScopeId; }
    }
    public uint ScopeId {
      get { return scopeId_; }
    }
    
    public const int LeaderboardIdFieldNumber = 4;
    private bool hasLeaderboardId;
    private ulong leaderboardId_;
    public bool HasLeaderboardId {
      get { return hasLeaderboardId; }
    }
    public ulong LeaderboardId {
      get { return leaderboardId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameAccountId) return false;
        if (!hasPartitionId) return false;
        if (!hasScopeId) return false;
        if (!hasLeaderboardId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _leaderboardGetHeroSnapshotFieldNames;
      if (hasGameAccountId) {
        output.WriteUInt64(1, field_names[0], GameAccountId);
      }
      if (hasPartitionId) {
        output.WriteUInt32(2, field_names[2], PartitionId);
      }
      if (hasScopeId) {
        output.WriteUInt32(3, field_names[3], ScopeId);
      }
      if (hasLeaderboardId) {
        output.WriteUInt64(4, field_names[1], LeaderboardId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GameAccountId);
        }
        if (hasPartitionId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, PartitionId);
        }
        if (hasScopeId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, ScopeId);
        }
        if (hasLeaderboardId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, LeaderboardId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LeaderboardGetHeroSnapshot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LeaderboardGetHeroSnapshot MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LeaderboardGetHeroSnapshot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LeaderboardGetHeroSnapshot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LeaderboardGetHeroSnapshot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LeaderboardGetHeroSnapshot result;
      
      private LeaderboardGetHeroSnapshot PrepareBuilder() {
        if (resultIsReadOnly) {
          LeaderboardGetHeroSnapshot original = result;
          result = new LeaderboardGetHeroSnapshot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LeaderboardGetHeroSnapshot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.LeaderboardGetHeroSnapshot.Descriptor; }
      }
      
      public override LeaderboardGetHeroSnapshot DefaultInstanceForType {
        get { return global::D3.GameMessage.LeaderboardGetHeroSnapshot.DefaultInstance; }
      }
      
      public override LeaderboardGetHeroSnapshot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LeaderboardGetHeroSnapshot) {
          return MergeFrom((LeaderboardGetHeroSnapshot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LeaderboardGetHeroSnapshot other) {
        if (other == global::D3.GameMessage.LeaderboardGetHeroSnapshot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameAccountId) {
          GameAccountId = other.GameAccountId;
        }
        if (other.HasPartitionId) {
          PartitionId = other.PartitionId;
        }
        if (other.HasScopeId) {
          ScopeId = other.ScopeId;
        }
        if (other.HasLeaderboardId) {
          LeaderboardId = other.LeaderboardId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_leaderboardGetHeroSnapshotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _leaderboardGetHeroSnapshotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGameAccountId = input.ReadUInt64(ref result.gameAccountId_);
              break;
            }
            case 16: {
              result.hasPartitionId = input.ReadUInt32(ref result.partitionId_);
              break;
            }
            case 24: {
              result.hasScopeId = input.ReadUInt32(ref result.scopeId_);
              break;
            }
            case 32: {
              result.hasLeaderboardId = input.ReadUInt64(ref result.leaderboardId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameAccountId {
        get { return result.hasGameAccountId; }
      }
      public ulong GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(ulong value) {
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = 0UL;
        return this;
      }
      
      public bool HasPartitionId {
        get { return result.hasPartitionId; }
      }
      public uint PartitionId {
        get { return result.PartitionId; }
        set { SetPartitionId(value); }
      }
      public Builder SetPartitionId(uint value) {
        PrepareBuilder();
        result.hasPartitionId = true;
        result.partitionId_ = value;
        return this;
      }
      public Builder ClearPartitionId() {
        PrepareBuilder();
        result.hasPartitionId = false;
        result.partitionId_ = 0;
        return this;
      }
      
      public bool HasScopeId {
        get { return result.hasScopeId; }
      }
      public uint ScopeId {
        get { return result.ScopeId; }
        set { SetScopeId(value); }
      }
      public Builder SetScopeId(uint value) {
        PrepareBuilder();
        result.hasScopeId = true;
        result.scopeId_ = value;
        return this;
      }
      public Builder ClearScopeId() {
        PrepareBuilder();
        result.hasScopeId = false;
        result.scopeId_ = 0;
        return this;
      }
      
      public bool HasLeaderboardId {
        get { return result.hasLeaderboardId; }
      }
      public ulong LeaderboardId {
        get { return result.LeaderboardId; }
        set { SetLeaderboardId(value); }
      }
      public Builder SetLeaderboardId(ulong value) {
        PrepareBuilder();
        result.hasLeaderboardId = true;
        result.leaderboardId_ = value;
        return this;
      }
      public Builder ClearLeaderboardId() {
        PrepareBuilder();
        result.hasLeaderboardId = false;
        result.leaderboardId_ = 0UL;
        return this;
      }
    }
    static LeaderboardGetHeroSnapshot() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LeaderboardGetHeroSnapshotResponse : pb::GeneratedMessage<LeaderboardGetHeroSnapshotResponse, LeaderboardGetHeroSnapshotResponse.Builder> {
    private LeaderboardGetHeroSnapshotResponse() { }
    private static readonly LeaderboardGetHeroSnapshotResponse defaultInstance = new LeaderboardGetHeroSnapshotResponse().MakeReadOnly();
    private static readonly string[] _leaderboardGetHeroSnapshotResponseFieldNames = new string[] { "snapshot" };
    private static readonly uint[] _leaderboardGetHeroSnapshotResponseFieldTags = new uint[] { 10 };
    public static LeaderboardGetHeroSnapshotResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LeaderboardGetHeroSnapshotResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LeaderboardGetHeroSnapshotResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_LeaderboardGetHeroSnapshotResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LeaderboardGetHeroSnapshotResponse, LeaderboardGetHeroSnapshotResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_LeaderboardGetHeroSnapshotResponse__FieldAccessorTable; }
    }
    
    public const int SnapshotFieldNumber = 1;
    private bool hasSnapshot;
    private global::D3.Leaderboard.HeroSnapshot snapshot_;
    public bool HasSnapshot {
      get { return hasSnapshot; }
    }
    public global::D3.Leaderboard.HeroSnapshot Snapshot {
      get { return snapshot_ ?? global::D3.Leaderboard.HeroSnapshot.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasSnapshot) {
          if (!Snapshot.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _leaderboardGetHeroSnapshotResponseFieldNames;
      if (hasSnapshot) {
        output.WriteMessage(1, field_names[0], Snapshot);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnapshot) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Snapshot);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LeaderboardGetHeroSnapshotResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshotResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshotResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshotResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshotResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshotResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshotResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshotResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshotResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardGetHeroSnapshotResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LeaderboardGetHeroSnapshotResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LeaderboardGetHeroSnapshotResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LeaderboardGetHeroSnapshotResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LeaderboardGetHeroSnapshotResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LeaderboardGetHeroSnapshotResponse result;
      
      private LeaderboardGetHeroSnapshotResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          LeaderboardGetHeroSnapshotResponse original = result;
          result = new LeaderboardGetHeroSnapshotResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LeaderboardGetHeroSnapshotResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.LeaderboardGetHeroSnapshotResponse.Descriptor; }
      }
      
      public override LeaderboardGetHeroSnapshotResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.LeaderboardGetHeroSnapshotResponse.DefaultInstance; }
      }
      
      public override LeaderboardGetHeroSnapshotResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LeaderboardGetHeroSnapshotResponse) {
          return MergeFrom((LeaderboardGetHeroSnapshotResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LeaderboardGetHeroSnapshotResponse other) {
        if (other == global::D3.GameMessage.LeaderboardGetHeroSnapshotResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnapshot) {
          MergeSnapshot(other.Snapshot);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_leaderboardGetHeroSnapshotResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _leaderboardGetHeroSnapshotResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.Leaderboard.HeroSnapshot.Builder subBuilder = global::D3.Leaderboard.HeroSnapshot.CreateBuilder();
              if (result.hasSnapshot) {
                subBuilder.MergeFrom(Snapshot);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Snapshot = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnapshot {
       get { return result.hasSnapshot; }
      }
      public global::D3.Leaderboard.HeroSnapshot Snapshot {
        get { return result.Snapshot; }
        set { SetSnapshot(value); }
      }
      public Builder SetSnapshot(global::D3.Leaderboard.HeroSnapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSnapshot = true;
        result.snapshot_ = value;
        return this;
      }
      public Builder SetSnapshot(global::D3.Leaderboard.HeroSnapshot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSnapshot = true;
        result.snapshot_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSnapshot(global::D3.Leaderboard.HeroSnapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSnapshot &&
            result.snapshot_ != global::D3.Leaderboard.HeroSnapshot.DefaultInstance) {
            result.snapshot_ = global::D3.Leaderboard.HeroSnapshot.CreateBuilder(result.snapshot_).MergeFrom(value).BuildPartial();
        } else {
          result.snapshot_ = value;
        }
        result.hasSnapshot = true;
        return this;
      }
      public Builder ClearSnapshot() {
        PrepareBuilder();
        result.hasSnapshot = false;
        result.snapshot_ = null;
        return this;
      }
    }
    static LeaderboardGetHeroSnapshotResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CheatRefetchProductCatalog : pb::GeneratedMessage<CheatRefetchProductCatalog, CheatRefetchProductCatalog.Builder> {
    private CheatRefetchProductCatalog() { }
    private static readonly CheatRefetchProductCatalog defaultInstance = new CheatRefetchProductCatalog().MakeReadOnly();
    private static readonly string[] _cheatRefetchProductCatalogFieldNames = new string[] {  };
    private static readonly uint[] _cheatRefetchProductCatalogFieldTags = new uint[] {  };
    public static CheatRefetchProductCatalog DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CheatRefetchProductCatalog DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CheatRefetchProductCatalog ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CheatRefetchProductCatalog__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CheatRefetchProductCatalog, CheatRefetchProductCatalog.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CheatRefetchProductCatalog__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cheatRefetchProductCatalogFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CheatRefetchProductCatalog ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CheatRefetchProductCatalog ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CheatRefetchProductCatalog ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CheatRefetchProductCatalog ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CheatRefetchProductCatalog ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CheatRefetchProductCatalog ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CheatRefetchProductCatalog ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CheatRefetchProductCatalog ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CheatRefetchProductCatalog ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CheatRefetchProductCatalog ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CheatRefetchProductCatalog MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CheatRefetchProductCatalog prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CheatRefetchProductCatalog, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CheatRefetchProductCatalog cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CheatRefetchProductCatalog result;
      
      private CheatRefetchProductCatalog PrepareBuilder() {
        if (resultIsReadOnly) {
          CheatRefetchProductCatalog original = result;
          result = new CheatRefetchProductCatalog();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CheatRefetchProductCatalog MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.CheatRefetchProductCatalog.Descriptor; }
      }
      
      public override CheatRefetchProductCatalog DefaultInstanceForType {
        get { return global::D3.GameMessage.CheatRefetchProductCatalog.DefaultInstance; }
      }
      
      public override CheatRefetchProductCatalog BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CheatRefetchProductCatalog) {
          return MergeFrom((CheatRefetchProductCatalog) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CheatRefetchProductCatalog other) {
        if (other == global::D3.GameMessage.CheatRefetchProductCatalog.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cheatRefetchProductCatalogFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cheatRefetchProductCatalogFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static CheatRefetchProductCatalog() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CheatModifyStoreState : pb::GeneratedMessage<CheatModifyStoreState, CheatModifyStoreState.Builder> {
    private CheatModifyStoreState() { }
    private static readonly CheatModifyStoreState defaultInstance = new CheatModifyStoreState().MakeReadOnly();
    private static readonly string[] _cheatModifyStoreStateFieldNames = new string[] { "enable" };
    private static readonly uint[] _cheatModifyStoreStateFieldTags = new uint[] { 8 };
    public static CheatModifyStoreState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CheatModifyStoreState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CheatModifyStoreState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CheatModifyStoreState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CheatModifyStoreState, CheatModifyStoreState.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_CheatModifyStoreState__FieldAccessorTable; }
    }
    
    public const int EnableFieldNumber = 1;
    private bool hasEnable;
    private bool enable_;
    public bool HasEnable {
      get { return hasEnable; }
    }
    public bool Enable {
      get { return enable_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cheatModifyStoreStateFieldNames;
      if (hasEnable) {
        output.WriteBool(1, field_names[0], Enable);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEnable) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, Enable);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CheatModifyStoreState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CheatModifyStoreState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CheatModifyStoreState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CheatModifyStoreState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CheatModifyStoreState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CheatModifyStoreState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CheatModifyStoreState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CheatModifyStoreState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CheatModifyStoreState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CheatModifyStoreState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CheatModifyStoreState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CheatModifyStoreState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CheatModifyStoreState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CheatModifyStoreState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CheatModifyStoreState result;
      
      private CheatModifyStoreState PrepareBuilder() {
        if (resultIsReadOnly) {
          CheatModifyStoreState original = result;
          result = new CheatModifyStoreState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CheatModifyStoreState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.CheatModifyStoreState.Descriptor; }
      }
      
      public override CheatModifyStoreState DefaultInstanceForType {
        get { return global::D3.GameMessage.CheatModifyStoreState.DefaultInstance; }
      }
      
      public override CheatModifyStoreState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CheatModifyStoreState) {
          return MergeFrom((CheatModifyStoreState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CheatModifyStoreState other) {
        if (other == global::D3.GameMessage.CheatModifyStoreState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEnable) {
          Enable = other.Enable;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cheatModifyStoreStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cheatModifyStoreStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEnable = input.ReadBool(ref result.enable_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEnable {
        get { return result.hasEnable; }
      }
      public bool Enable {
        get { return result.Enable; }
        set { SetEnable(value); }
      }
      public Builder SetEnable(bool value) {
        PrepareBuilder();
        result.hasEnable = true;
        result.enable_ = value;
        return this;
      }
      public Builder ClearEnable() {
        PrepareBuilder();
        result.hasEnable = false;
        result.enable_ = false;
        return this;
      }
    }
    static CheatModifyStoreState() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RiftEndScreenAddParticipants : pb::GeneratedMessage<RiftEndScreenAddParticipants, RiftEndScreenAddParticipants.Builder> {
    private RiftEndScreenAddParticipants() { }
    private static readonly RiftEndScreenAddParticipants defaultInstance = new RiftEndScreenAddParticipants().MakeReadOnly();
    private static readonly string[] _riftEndScreenAddParticipantsFieldNames = new string[] { "participant_game_accounts" };
    private static readonly uint[] _riftEndScreenAddParticipantsFieldTags = new uint[] { 10 };
    public static RiftEndScreenAddParticipants DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RiftEndScreenAddParticipants DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RiftEndScreenAddParticipants ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_RiftEndScreenAddParticipants__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RiftEndScreenAddParticipants, RiftEndScreenAddParticipants.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_RiftEndScreenAddParticipants__FieldAccessorTable; }
    }
    
    public const int ParticipantGameAccountsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.OnlineService.GameAccountHandle> participantGameAccounts_ = new pbc::PopsicleList<global::D3.OnlineService.GameAccountHandle>();
    public scg::IList<global::D3.OnlineService.GameAccountHandle> ParticipantGameAccountsList {
      get { return participantGameAccounts_; }
    }
    public int ParticipantGameAccountsCount {
      get { return participantGameAccounts_.Count; }
    }
    public global::D3.OnlineService.GameAccountHandle GetParticipantGameAccounts(int index) {
      return participantGameAccounts_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.OnlineService.GameAccountHandle element in ParticipantGameAccountsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _riftEndScreenAddParticipantsFieldNames;
      if (participantGameAccounts_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], participantGameAccounts_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.OnlineService.GameAccountHandle element in ParticipantGameAccountsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RiftEndScreenAddParticipants ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RiftEndScreenAddParticipants ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RiftEndScreenAddParticipants ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RiftEndScreenAddParticipants ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RiftEndScreenAddParticipants ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RiftEndScreenAddParticipants ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RiftEndScreenAddParticipants ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RiftEndScreenAddParticipants ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RiftEndScreenAddParticipants ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RiftEndScreenAddParticipants ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RiftEndScreenAddParticipants MakeReadOnly() {
      participantGameAccounts_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RiftEndScreenAddParticipants prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RiftEndScreenAddParticipants, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RiftEndScreenAddParticipants cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RiftEndScreenAddParticipants result;
      
      private RiftEndScreenAddParticipants PrepareBuilder() {
        if (resultIsReadOnly) {
          RiftEndScreenAddParticipants original = result;
          result = new RiftEndScreenAddParticipants();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RiftEndScreenAddParticipants MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.RiftEndScreenAddParticipants.Descriptor; }
      }
      
      public override RiftEndScreenAddParticipants DefaultInstanceForType {
        get { return global::D3.GameMessage.RiftEndScreenAddParticipants.DefaultInstance; }
      }
      
      public override RiftEndScreenAddParticipants BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RiftEndScreenAddParticipants) {
          return MergeFrom((RiftEndScreenAddParticipants) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RiftEndScreenAddParticipants other) {
        if (other == global::D3.GameMessage.RiftEndScreenAddParticipants.DefaultInstance) return this;
        PrepareBuilder();
        if (other.participantGameAccounts_.Count != 0) {
          result.participantGameAccounts_.Add(other.participantGameAccounts_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_riftEndScreenAddParticipantsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _riftEndScreenAddParticipantsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.participantGameAccounts_, global::D3.OnlineService.GameAccountHandle.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.OnlineService.GameAccountHandle> ParticipantGameAccountsList {
        get { return PrepareBuilder().participantGameAccounts_; }
      }
      public int ParticipantGameAccountsCount {
        get { return result.ParticipantGameAccountsCount; }
      }
      public global::D3.OnlineService.GameAccountHandle GetParticipantGameAccounts(int index) {
        return result.GetParticipantGameAccounts(index);
      }
      public Builder SetParticipantGameAccounts(int index, global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.participantGameAccounts_[index] = value;
        return this;
      }
      public Builder SetParticipantGameAccounts(int index, global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.participantGameAccounts_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddParticipantGameAccounts(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.participantGameAccounts_.Add(value);
        return this;
      }
      public Builder AddParticipantGameAccounts(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.participantGameAccounts_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeParticipantGameAccounts(scg::IEnumerable<global::D3.OnlineService.GameAccountHandle> values) {
        PrepareBuilder();
        result.participantGameAccounts_.Add(values);
        return this;
      }
      public Builder ClearParticipantGameAccounts() {
        PrepareBuilder();
        result.participantGameAccounts_.Clear();
        return this;
      }
    }
    static RiftEndScreenAddParticipants() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RiftEndScreenConsolePlayerInfo : pb::GeneratedMessage<RiftEndScreenConsolePlayerInfo, RiftEndScreenConsolePlayerInfo.Builder> {
    private RiftEndScreenConsolePlayerInfo() { }
    private static readonly RiftEndScreenConsolePlayerInfo defaultInstance = new RiftEndScreenConsolePlayerInfo().MakeReadOnly();
    private static readonly string[] _riftEndScreenConsolePlayerInfoFieldNames = new string[] { "alt_level", "hero_flags", "hero_gbid_class", "hero_level", "hero_visual_equipment", "player_name" };
    private static readonly uint[] _riftEndScreenConsolePlayerInfoFieldTags = new uint[] { 40, 24, 21, 32, 50, 10 };
    public static RiftEndScreenConsolePlayerInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RiftEndScreenConsolePlayerInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RiftEndScreenConsolePlayerInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_RiftEndScreenConsolePlayerInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RiftEndScreenConsolePlayerInfo, RiftEndScreenConsolePlayerInfo.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_RiftEndScreenConsolePlayerInfo__FieldAccessorTable; }
    }
    
    public const int PlayerNameFieldNumber = 1;
    private bool hasPlayerName;
    private string playerName_ = "";
    public bool HasPlayerName {
      get { return hasPlayerName; }
    }
    public string PlayerName {
      get { return playerName_; }
    }
    
    public const int HeroGbidClassFieldNumber = 2;
    private bool hasHeroGbidClass;
    private int heroGbidClass_;
    public bool HasHeroGbidClass {
      get { return hasHeroGbidClass; }
    }
    public int HeroGbidClass {
      get { return heroGbidClass_; }
    }
    
    public const int HeroFlagsFieldNumber = 3;
    private bool hasHeroFlags;
    private uint heroFlags_;
    public bool HasHeroFlags {
      get { return hasHeroFlags; }
    }
    public uint HeroFlags {
      get { return heroFlags_; }
    }
    
    public const int HeroLevelFieldNumber = 4;
    private bool hasHeroLevel;
    private uint heroLevel_;
    public bool HasHeroLevel {
      get { return hasHeroLevel; }
    }
    public uint HeroLevel {
      get { return heroLevel_; }
    }
    
    public const int AltLevelFieldNumber = 5;
    private bool hasAltLevel;
    private uint altLevel_;
    public bool HasAltLevel {
      get { return hasAltLevel; }
    }
    public uint AltLevel {
      get { return altLevel_; }
    }
    
    public const int HeroVisualEquipmentFieldNumber = 6;
    private bool hasHeroVisualEquipment;
    private global::D3.Hero.VisualEquipment heroVisualEquipment_;
    public bool HasHeroVisualEquipment {
      get { return hasHeroVisualEquipment; }
    }
    public global::D3.Hero.VisualEquipment HeroVisualEquipment {
      get { return heroVisualEquipment_ ?? global::D3.Hero.VisualEquipment.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _riftEndScreenConsolePlayerInfoFieldNames;
      if (hasPlayerName) {
        output.WriteString(1, field_names[5], PlayerName);
      }
      if (hasHeroGbidClass) {
        output.WriteSFixed32(2, field_names[2], HeroGbidClass);
      }
      if (hasHeroFlags) {
        output.WriteUInt32(3, field_names[1], HeroFlags);
      }
      if (hasHeroLevel) {
        output.WriteUInt32(4, field_names[3], HeroLevel);
      }
      if (hasAltLevel) {
        output.WriteUInt32(5, field_names[0], AltLevel);
      }
      if (hasHeroVisualEquipment) {
        output.WriteMessage(6, field_names[4], HeroVisualEquipment);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayerName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, PlayerName);
        }
        if (hasHeroGbidClass) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(2, HeroGbidClass);
        }
        if (hasHeroFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, HeroFlags);
        }
        if (hasHeroLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, HeroLevel);
        }
        if (hasAltLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, AltLevel);
        }
        if (hasHeroVisualEquipment) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, HeroVisualEquipment);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RiftEndScreenConsolePlayerInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RiftEndScreenConsolePlayerInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RiftEndScreenConsolePlayerInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RiftEndScreenConsolePlayerInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RiftEndScreenConsolePlayerInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RiftEndScreenConsolePlayerInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RiftEndScreenConsolePlayerInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RiftEndScreenConsolePlayerInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RiftEndScreenConsolePlayerInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RiftEndScreenConsolePlayerInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RiftEndScreenConsolePlayerInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RiftEndScreenConsolePlayerInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RiftEndScreenConsolePlayerInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RiftEndScreenConsolePlayerInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RiftEndScreenConsolePlayerInfo result;
      
      private RiftEndScreenConsolePlayerInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          RiftEndScreenConsolePlayerInfo original = result;
          result = new RiftEndScreenConsolePlayerInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RiftEndScreenConsolePlayerInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.RiftEndScreenConsolePlayerInfo.Descriptor; }
      }
      
      public override RiftEndScreenConsolePlayerInfo DefaultInstanceForType {
        get { return global::D3.GameMessage.RiftEndScreenConsolePlayerInfo.DefaultInstance; }
      }
      
      public override RiftEndScreenConsolePlayerInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RiftEndScreenConsolePlayerInfo) {
          return MergeFrom((RiftEndScreenConsolePlayerInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RiftEndScreenConsolePlayerInfo other) {
        if (other == global::D3.GameMessage.RiftEndScreenConsolePlayerInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerName) {
          PlayerName = other.PlayerName;
        }
        if (other.HasHeroGbidClass) {
          HeroGbidClass = other.HeroGbidClass;
        }
        if (other.HasHeroFlags) {
          HeroFlags = other.HeroFlags;
        }
        if (other.HasHeroLevel) {
          HeroLevel = other.HeroLevel;
        }
        if (other.HasAltLevel) {
          AltLevel = other.AltLevel;
        }
        if (other.HasHeroVisualEquipment) {
          MergeHeroVisualEquipment(other.HeroVisualEquipment);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_riftEndScreenConsolePlayerInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _riftEndScreenConsolePlayerInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayerName = input.ReadString(ref result.playerName_);
              break;
            }
            case 21: {
              result.hasHeroGbidClass = input.ReadSFixed32(ref result.heroGbidClass_);
              break;
            }
            case 24: {
              result.hasHeroFlags = input.ReadUInt32(ref result.heroFlags_);
              break;
            }
            case 32: {
              result.hasHeroLevel = input.ReadUInt32(ref result.heroLevel_);
              break;
            }
            case 40: {
              result.hasAltLevel = input.ReadUInt32(ref result.altLevel_);
              break;
            }
            case 50: {
              global::D3.Hero.VisualEquipment.Builder subBuilder = global::D3.Hero.VisualEquipment.CreateBuilder();
              if (result.hasHeroVisualEquipment) {
                subBuilder.MergeFrom(HeroVisualEquipment);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroVisualEquipment = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerName {
        get { return result.hasPlayerName; }
      }
      public string PlayerName {
        get { return result.PlayerName; }
        set { SetPlayerName(value); }
      }
      public Builder SetPlayerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayerName = true;
        result.playerName_ = value;
        return this;
      }
      public Builder ClearPlayerName() {
        PrepareBuilder();
        result.hasPlayerName = false;
        result.playerName_ = "";
        return this;
      }
      
      public bool HasHeroGbidClass {
        get { return result.hasHeroGbidClass; }
      }
      public int HeroGbidClass {
        get { return result.HeroGbidClass; }
        set { SetHeroGbidClass(value); }
      }
      public Builder SetHeroGbidClass(int value) {
        PrepareBuilder();
        result.hasHeroGbidClass = true;
        result.heroGbidClass_ = value;
        return this;
      }
      public Builder ClearHeroGbidClass() {
        PrepareBuilder();
        result.hasHeroGbidClass = false;
        result.heroGbidClass_ = 0;
        return this;
      }
      
      public bool HasHeroFlags {
        get { return result.hasHeroFlags; }
      }
      public uint HeroFlags {
        get { return result.HeroFlags; }
        set { SetHeroFlags(value); }
      }
      public Builder SetHeroFlags(uint value) {
        PrepareBuilder();
        result.hasHeroFlags = true;
        result.heroFlags_ = value;
        return this;
      }
      public Builder ClearHeroFlags() {
        PrepareBuilder();
        result.hasHeroFlags = false;
        result.heroFlags_ = 0;
        return this;
      }
      
      public bool HasHeroLevel {
        get { return result.hasHeroLevel; }
      }
      public uint HeroLevel {
        get { return result.HeroLevel; }
        set { SetHeroLevel(value); }
      }
      public Builder SetHeroLevel(uint value) {
        PrepareBuilder();
        result.hasHeroLevel = true;
        result.heroLevel_ = value;
        return this;
      }
      public Builder ClearHeroLevel() {
        PrepareBuilder();
        result.hasHeroLevel = false;
        result.heroLevel_ = 0;
        return this;
      }
      
      public bool HasAltLevel {
        get { return result.hasAltLevel; }
      }
      public uint AltLevel {
        get { return result.AltLevel; }
        set { SetAltLevel(value); }
      }
      public Builder SetAltLevel(uint value) {
        PrepareBuilder();
        result.hasAltLevel = true;
        result.altLevel_ = value;
        return this;
      }
      public Builder ClearAltLevel() {
        PrepareBuilder();
        result.hasAltLevel = false;
        result.altLevel_ = 0;
        return this;
      }
      
      public bool HasHeroVisualEquipment {
       get { return result.hasHeroVisualEquipment; }
      }
      public global::D3.Hero.VisualEquipment HeroVisualEquipment {
        get { return result.HeroVisualEquipment; }
        set { SetHeroVisualEquipment(value); }
      }
      public Builder SetHeroVisualEquipment(global::D3.Hero.VisualEquipment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroVisualEquipment = true;
        result.heroVisualEquipment_ = value;
        return this;
      }
      public Builder SetHeroVisualEquipment(global::D3.Hero.VisualEquipment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroVisualEquipment = true;
        result.heroVisualEquipment_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroVisualEquipment(global::D3.Hero.VisualEquipment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroVisualEquipment &&
            result.heroVisualEquipment_ != global::D3.Hero.VisualEquipment.DefaultInstance) {
            result.heroVisualEquipment_ = global::D3.Hero.VisualEquipment.CreateBuilder(result.heroVisualEquipment_).MergeFrom(value).BuildPartial();
        } else {
          result.heroVisualEquipment_ = value;
        }
        result.hasHeroVisualEquipment = true;
        return this;
      }
      public Builder ClearHeroVisualEquipment() {
        PrepareBuilder();
        result.hasHeroVisualEquipment = false;
        result.heroVisualEquipment_ = null;
        return this;
      }
    }
    static RiftEndScreenConsolePlayerInfo() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RiftEndScreenInfo : pb::GeneratedMessage<RiftEndScreenInfo, RiftEndScreenInfo.Builder> {
    private RiftEndScreenInfo() { }
    private static readonly RiftEndScreenInfo defaultInstance = new RiftEndScreenInfo().MakeReadOnly();
    private static readonly string[] _riftEndScreenInfoFieldNames = new string[] { "banner_configuration", "challenge_rift_number", "challenge_rift_reward_gbid", "challenge_rift_reward_state", "challenge_rift_time_to_beat_ms", "completion_time_ms", "console_num_participants", "console_player_info", "gold_reward", "is_from_cheat", "new_personal_best", "participant_game_accounts", "rift_tier", "success", "xp_reward" };
    private static readonly uint[] _riftEndScreenInfoFieldTags = new uint[] { 74, 112, 88, 104, 96, 24, 120, 82, 40, 56, 64, 50, 8, 16, 32 };
    public static RiftEndScreenInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RiftEndScreenInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RiftEndScreenInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_RiftEndScreenInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RiftEndScreenInfo, RiftEndScreenInfo.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_RiftEndScreenInfo__FieldAccessorTable; }
    }
    
    public const int RiftTierFieldNumber = 1;
    private bool hasRiftTier;
    private int riftTier_;
    public bool HasRiftTier {
      get { return hasRiftTier; }
    }
    public int RiftTier {
      get { return riftTier_; }
    }
    
    public const int SuccessFieldNumber = 2;
    private bool hasSuccess;
    private bool success_;
    public bool HasSuccess {
      get { return hasSuccess; }
    }
    public bool Success {
      get { return success_; }
    }
    
    public const int CompletionTimeMsFieldNumber = 3;
    private bool hasCompletionTimeMs;
    private int completionTimeMs_;
    public bool HasCompletionTimeMs {
      get { return hasCompletionTimeMs; }
    }
    public int CompletionTimeMs {
      get { return completionTimeMs_; }
    }
    
    public const int XpRewardFieldNumber = 4;
    private bool hasXpReward;
    private long xpReward_;
    public bool HasXpReward {
      get { return hasXpReward; }
    }
    public long XpReward {
      get { return xpReward_; }
    }
    
    public const int GoldRewardFieldNumber = 5;
    private bool hasGoldReward;
    private int goldReward_;
    public bool HasGoldReward {
      get { return hasGoldReward; }
    }
    public int GoldReward {
      get { return goldReward_; }
    }
    
    public const int ParticipantGameAccountsFieldNumber = 6;
    private pbc::PopsicleList<global::D3.OnlineService.GameAccountHandle> participantGameAccounts_ = new pbc::PopsicleList<global::D3.OnlineService.GameAccountHandle>();
    public scg::IList<global::D3.OnlineService.GameAccountHandle> ParticipantGameAccountsList {
      get { return participantGameAccounts_; }
    }
    public int ParticipantGameAccountsCount {
      get { return participantGameAccounts_.Count; }
    }
    public global::D3.OnlineService.GameAccountHandle GetParticipantGameAccounts(int index) {
      return participantGameAccounts_[index];
    }
    
    public const int IsFromCheatFieldNumber = 7;
    private bool hasIsFromCheat;
    private bool isFromCheat_;
    public bool HasIsFromCheat {
      get { return hasIsFromCheat; }
    }
    public bool IsFromCheat {
      get { return isFromCheat_; }
    }
    
    public const int NewPersonalBestFieldNumber = 8;
    private bool hasNewPersonalBest;
    private bool newPersonalBest_;
    public bool HasNewPersonalBest {
      get { return hasNewPersonalBest; }
    }
    public bool NewPersonalBest {
      get { return newPersonalBest_; }
    }
    
    public const int BannerConfigurationFieldNumber = 9;
    private bool hasBannerConfiguration;
    private global::D3.Account.BannerConfiguration bannerConfiguration_;
    public bool HasBannerConfiguration {
      get { return hasBannerConfiguration; }
    }
    public global::D3.Account.BannerConfiguration BannerConfiguration {
      get { return bannerConfiguration_ ?? global::D3.Account.BannerConfiguration.DefaultInstance; }
    }
    
    public const int ConsolePlayerInfoFieldNumber = 10;
    private pbc::PopsicleList<global::D3.GameMessage.RiftEndScreenConsolePlayerInfo> consolePlayerInfo_ = new pbc::PopsicleList<global::D3.GameMessage.RiftEndScreenConsolePlayerInfo>();
    public scg::IList<global::D3.GameMessage.RiftEndScreenConsolePlayerInfo> ConsolePlayerInfoList {
      get { return consolePlayerInfo_; }
    }
    public int ConsolePlayerInfoCount {
      get { return consolePlayerInfo_.Count; }
    }
    public global::D3.GameMessage.RiftEndScreenConsolePlayerInfo GetConsolePlayerInfo(int index) {
      return consolePlayerInfo_[index];
    }
    
    public const int ConsoleNumParticipantsFieldNumber = 15;
    private bool hasConsoleNumParticipants;
    private uint consoleNumParticipants_;
    public bool HasConsoleNumParticipants {
      get { return hasConsoleNumParticipants; }
    }
    public uint ConsoleNumParticipants {
      get { return consoleNumParticipants_; }
    }
    
    public const int ChallengeRiftRewardGbidFieldNumber = 11;
    private bool hasChallengeRiftRewardGbid;
    private int challengeRiftRewardGbid_;
    public bool HasChallengeRiftRewardGbid {
      get { return hasChallengeRiftRewardGbid; }
    }
    public int ChallengeRiftRewardGbid {
      get { return challengeRiftRewardGbid_; }
    }
    
    public const int ChallengeRiftTimeToBeatMsFieldNumber = 12;
    private bool hasChallengeRiftTimeToBeatMs;
    private int challengeRiftTimeToBeatMs_;
    public bool HasChallengeRiftTimeToBeatMs {
      get { return hasChallengeRiftTimeToBeatMs; }
    }
    public int ChallengeRiftTimeToBeatMs {
      get { return challengeRiftTimeToBeatMs_; }
    }
    
    public const int ChallengeRiftRewardStateFieldNumber = 13;
    private bool hasChallengeRiftRewardState;
    private int challengeRiftRewardState_;
    public bool HasChallengeRiftRewardState {
      get { return hasChallengeRiftRewardState; }
    }
    public int ChallengeRiftRewardState {
      get { return challengeRiftRewardState_; }
    }
    
    public const int ChallengeRiftNumberFieldNumber = 14;
    private bool hasChallengeRiftNumber;
    private uint challengeRiftNumber_;
    public bool HasChallengeRiftNumber {
      get { return hasChallengeRiftNumber; }
    }
    public uint ChallengeRiftNumber {
      get { return challengeRiftNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRiftTier) return false;
        if (!hasSuccess) return false;
        if (!hasCompletionTimeMs) return false;
        if (!hasXpReward) return false;
        if (!hasGoldReward) return false;
        if (!hasIsFromCheat) return false;
        if (!hasNewPersonalBest) return false;
        if (!hasBannerConfiguration) return false;
        foreach (global::D3.OnlineService.GameAccountHandle element in ParticipantGameAccountsList) {
          if (!element.IsInitialized) return false;
        }
        if (!BannerConfiguration.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _riftEndScreenInfoFieldNames;
      if (hasRiftTier) {
        output.WriteInt32(1, field_names[12], RiftTier);
      }
      if (hasSuccess) {
        output.WriteBool(2, field_names[13], Success);
      }
      if (hasCompletionTimeMs) {
        output.WriteInt32(3, field_names[5], CompletionTimeMs);
      }
      if (hasXpReward) {
        output.WriteSInt64(4, field_names[14], XpReward);
      }
      if (hasGoldReward) {
        output.WriteInt32(5, field_names[8], GoldReward);
      }
      if (participantGameAccounts_.Count > 0) {
        output.WriteMessageArray(6, field_names[11], participantGameAccounts_);
      }
      if (hasIsFromCheat) {
        output.WriteBool(7, field_names[9], IsFromCheat);
      }
      if (hasNewPersonalBest) {
        output.WriteBool(8, field_names[10], NewPersonalBest);
      }
      if (hasBannerConfiguration) {
        output.WriteMessage(9, field_names[0], BannerConfiguration);
      }
      if (consolePlayerInfo_.Count > 0) {
        output.WriteMessageArray(10, field_names[7], consolePlayerInfo_);
      }
      if (hasChallengeRiftRewardGbid) {
        output.WriteInt32(11, field_names[2], ChallengeRiftRewardGbid);
      }
      if (hasChallengeRiftTimeToBeatMs) {
        output.WriteInt32(12, field_names[4], ChallengeRiftTimeToBeatMs);
      }
      if (hasChallengeRiftRewardState) {
        output.WriteInt32(13, field_names[3], ChallengeRiftRewardState);
      }
      if (hasChallengeRiftNumber) {
        output.WriteUInt32(14, field_names[1], ChallengeRiftNumber);
      }
      if (hasConsoleNumParticipants) {
        output.WriteUInt32(15, field_names[6], ConsoleNumParticipants);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRiftTier) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, RiftTier);
        }
        if (hasSuccess) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, Success);
        }
        if (hasCompletionTimeMs) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, CompletionTimeMs);
        }
        if (hasXpReward) {
          size += pb::CodedOutputStream.ComputeSInt64Size(4, XpReward);
        }
        if (hasGoldReward) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, GoldReward);
        }
        foreach (global::D3.OnlineService.GameAccountHandle element in ParticipantGameAccountsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        if (hasIsFromCheat) {
          size += pb::CodedOutputStream.ComputeBoolSize(7, IsFromCheat);
        }
        if (hasNewPersonalBest) {
          size += pb::CodedOutputStream.ComputeBoolSize(8, NewPersonalBest);
        }
        if (hasBannerConfiguration) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, BannerConfiguration);
        }
        foreach (global::D3.GameMessage.RiftEndScreenConsolePlayerInfo element in ConsolePlayerInfoList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        if (hasConsoleNumParticipants) {
          size += pb::CodedOutputStream.ComputeUInt32Size(15, ConsoleNumParticipants);
        }
        if (hasChallengeRiftRewardGbid) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, ChallengeRiftRewardGbid);
        }
        if (hasChallengeRiftTimeToBeatMs) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, ChallengeRiftTimeToBeatMs);
        }
        if (hasChallengeRiftRewardState) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, ChallengeRiftRewardState);
        }
        if (hasChallengeRiftNumber) {
          size += pb::CodedOutputStream.ComputeUInt32Size(14, ChallengeRiftNumber);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RiftEndScreenInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RiftEndScreenInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RiftEndScreenInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RiftEndScreenInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RiftEndScreenInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RiftEndScreenInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RiftEndScreenInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RiftEndScreenInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RiftEndScreenInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RiftEndScreenInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RiftEndScreenInfo MakeReadOnly() {
      participantGameAccounts_.MakeReadOnly();
      consolePlayerInfo_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RiftEndScreenInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RiftEndScreenInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RiftEndScreenInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RiftEndScreenInfo result;
      
      private RiftEndScreenInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          RiftEndScreenInfo original = result;
          result = new RiftEndScreenInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RiftEndScreenInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.RiftEndScreenInfo.Descriptor; }
      }
      
      public override RiftEndScreenInfo DefaultInstanceForType {
        get { return global::D3.GameMessage.RiftEndScreenInfo.DefaultInstance; }
      }
      
      public override RiftEndScreenInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RiftEndScreenInfo) {
          return MergeFrom((RiftEndScreenInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RiftEndScreenInfo other) {
        if (other == global::D3.GameMessage.RiftEndScreenInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRiftTier) {
          RiftTier = other.RiftTier;
        }
        if (other.HasSuccess) {
          Success = other.Success;
        }
        if (other.HasCompletionTimeMs) {
          CompletionTimeMs = other.CompletionTimeMs;
        }
        if (other.HasXpReward) {
          XpReward = other.XpReward;
        }
        if (other.HasGoldReward) {
          GoldReward = other.GoldReward;
        }
        if (other.participantGameAccounts_.Count != 0) {
          result.participantGameAccounts_.Add(other.participantGameAccounts_);
        }
        if (other.HasIsFromCheat) {
          IsFromCheat = other.IsFromCheat;
        }
        if (other.HasNewPersonalBest) {
          NewPersonalBest = other.NewPersonalBest;
        }
        if (other.HasBannerConfiguration) {
          MergeBannerConfiguration(other.BannerConfiguration);
        }
        if (other.consolePlayerInfo_.Count != 0) {
          result.consolePlayerInfo_.Add(other.consolePlayerInfo_);
        }
        if (other.HasConsoleNumParticipants) {
          ConsoleNumParticipants = other.ConsoleNumParticipants;
        }
        if (other.HasChallengeRiftRewardGbid) {
          ChallengeRiftRewardGbid = other.ChallengeRiftRewardGbid;
        }
        if (other.HasChallengeRiftTimeToBeatMs) {
          ChallengeRiftTimeToBeatMs = other.ChallengeRiftTimeToBeatMs;
        }
        if (other.HasChallengeRiftRewardState) {
          ChallengeRiftRewardState = other.ChallengeRiftRewardState;
        }
        if (other.HasChallengeRiftNumber) {
          ChallengeRiftNumber = other.ChallengeRiftNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_riftEndScreenInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _riftEndScreenInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRiftTier = input.ReadInt32(ref result.riftTier_);
              break;
            }
            case 16: {
              result.hasSuccess = input.ReadBool(ref result.success_);
              break;
            }
            case 24: {
              result.hasCompletionTimeMs = input.ReadInt32(ref result.completionTimeMs_);
              break;
            }
            case 32: {
              result.hasXpReward = input.ReadSInt64(ref result.xpReward_);
              break;
            }
            case 40: {
              result.hasGoldReward = input.ReadInt32(ref result.goldReward_);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.participantGameAccounts_, global::D3.OnlineService.GameAccountHandle.DefaultInstance, extensionRegistry);
              break;
            }
            case 56: {
              result.hasIsFromCheat = input.ReadBool(ref result.isFromCheat_);
              break;
            }
            case 64: {
              result.hasNewPersonalBest = input.ReadBool(ref result.newPersonalBest_);
              break;
            }
            case 74: {
              global::D3.Account.BannerConfiguration.Builder subBuilder = global::D3.Account.BannerConfiguration.CreateBuilder();
              if (result.hasBannerConfiguration) {
                subBuilder.MergeFrom(BannerConfiguration);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BannerConfiguration = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.consolePlayerInfo_, global::D3.GameMessage.RiftEndScreenConsolePlayerInfo.DefaultInstance, extensionRegistry);
              break;
            }
            case 88: {
              result.hasChallengeRiftRewardGbid = input.ReadInt32(ref result.challengeRiftRewardGbid_);
              break;
            }
            case 96: {
              result.hasChallengeRiftTimeToBeatMs = input.ReadInt32(ref result.challengeRiftTimeToBeatMs_);
              break;
            }
            case 104: {
              result.hasChallengeRiftRewardState = input.ReadInt32(ref result.challengeRiftRewardState_);
              break;
            }
            case 112: {
              result.hasChallengeRiftNumber = input.ReadUInt32(ref result.challengeRiftNumber_);
              break;
            }
            case 120: {
              result.hasConsoleNumParticipants = input.ReadUInt32(ref result.consoleNumParticipants_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRiftTier {
        get { return result.hasRiftTier; }
      }
      public int RiftTier {
        get { return result.RiftTier; }
        set { SetRiftTier(value); }
      }
      public Builder SetRiftTier(int value) {
        PrepareBuilder();
        result.hasRiftTier = true;
        result.riftTier_ = value;
        return this;
      }
      public Builder ClearRiftTier() {
        PrepareBuilder();
        result.hasRiftTier = false;
        result.riftTier_ = 0;
        return this;
      }
      
      public bool HasSuccess {
        get { return result.hasSuccess; }
      }
      public bool Success {
        get { return result.Success; }
        set { SetSuccess(value); }
      }
      public Builder SetSuccess(bool value) {
        PrepareBuilder();
        result.hasSuccess = true;
        result.success_ = value;
        return this;
      }
      public Builder ClearSuccess() {
        PrepareBuilder();
        result.hasSuccess = false;
        result.success_ = false;
        return this;
      }
      
      public bool HasCompletionTimeMs {
        get { return result.hasCompletionTimeMs; }
      }
      public int CompletionTimeMs {
        get { return result.CompletionTimeMs; }
        set { SetCompletionTimeMs(value); }
      }
      public Builder SetCompletionTimeMs(int value) {
        PrepareBuilder();
        result.hasCompletionTimeMs = true;
        result.completionTimeMs_ = value;
        return this;
      }
      public Builder ClearCompletionTimeMs() {
        PrepareBuilder();
        result.hasCompletionTimeMs = false;
        result.completionTimeMs_ = 0;
        return this;
      }
      
      public bool HasXpReward {
        get { return result.hasXpReward; }
      }
      public long XpReward {
        get { return result.XpReward; }
        set { SetXpReward(value); }
      }
      public Builder SetXpReward(long value) {
        PrepareBuilder();
        result.hasXpReward = true;
        result.xpReward_ = value;
        return this;
      }
      public Builder ClearXpReward() {
        PrepareBuilder();
        result.hasXpReward = false;
        result.xpReward_ = 0;
        return this;
      }
      
      public bool HasGoldReward {
        get { return result.hasGoldReward; }
      }
      public int GoldReward {
        get { return result.GoldReward; }
        set { SetGoldReward(value); }
      }
      public Builder SetGoldReward(int value) {
        PrepareBuilder();
        result.hasGoldReward = true;
        result.goldReward_ = value;
        return this;
      }
      public Builder ClearGoldReward() {
        PrepareBuilder();
        result.hasGoldReward = false;
        result.goldReward_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.OnlineService.GameAccountHandle> ParticipantGameAccountsList {
        get { return PrepareBuilder().participantGameAccounts_; }
      }
      public int ParticipantGameAccountsCount {
        get { return result.ParticipantGameAccountsCount; }
      }
      public global::D3.OnlineService.GameAccountHandle GetParticipantGameAccounts(int index) {
        return result.GetParticipantGameAccounts(index);
      }
      public Builder SetParticipantGameAccounts(int index, global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.participantGameAccounts_[index] = value;
        return this;
      }
      public Builder SetParticipantGameAccounts(int index, global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.participantGameAccounts_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddParticipantGameAccounts(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.participantGameAccounts_.Add(value);
        return this;
      }
      public Builder AddParticipantGameAccounts(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.participantGameAccounts_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeParticipantGameAccounts(scg::IEnumerable<global::D3.OnlineService.GameAccountHandle> values) {
        PrepareBuilder();
        result.participantGameAccounts_.Add(values);
        return this;
      }
      public Builder ClearParticipantGameAccounts() {
        PrepareBuilder();
        result.participantGameAccounts_.Clear();
        return this;
      }
      
      public bool HasIsFromCheat {
        get { return result.hasIsFromCheat; }
      }
      public bool IsFromCheat {
        get { return result.IsFromCheat; }
        set { SetIsFromCheat(value); }
      }
      public Builder SetIsFromCheat(bool value) {
        PrepareBuilder();
        result.hasIsFromCheat = true;
        result.isFromCheat_ = value;
        return this;
      }
      public Builder ClearIsFromCheat() {
        PrepareBuilder();
        result.hasIsFromCheat = false;
        result.isFromCheat_ = false;
        return this;
      }
      
      public bool HasNewPersonalBest {
        get { return result.hasNewPersonalBest; }
      }
      public bool NewPersonalBest {
        get { return result.NewPersonalBest; }
        set { SetNewPersonalBest(value); }
      }
      public Builder SetNewPersonalBest(bool value) {
        PrepareBuilder();
        result.hasNewPersonalBest = true;
        result.newPersonalBest_ = value;
        return this;
      }
      public Builder ClearNewPersonalBest() {
        PrepareBuilder();
        result.hasNewPersonalBest = false;
        result.newPersonalBest_ = false;
        return this;
      }
      
      public bool HasBannerConfiguration {
       get { return result.hasBannerConfiguration; }
      }
      public global::D3.Account.BannerConfiguration BannerConfiguration {
        get { return result.BannerConfiguration; }
        set { SetBannerConfiguration(value); }
      }
      public Builder SetBannerConfiguration(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBannerConfiguration = true;
        result.bannerConfiguration_ = value;
        return this;
      }
      public Builder SetBannerConfiguration(global::D3.Account.BannerConfiguration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBannerConfiguration = true;
        result.bannerConfiguration_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBannerConfiguration(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBannerConfiguration &&
            result.bannerConfiguration_ != global::D3.Account.BannerConfiguration.DefaultInstance) {
            result.bannerConfiguration_ = global::D3.Account.BannerConfiguration.CreateBuilder(result.bannerConfiguration_).MergeFrom(value).BuildPartial();
        } else {
          result.bannerConfiguration_ = value;
        }
        result.hasBannerConfiguration = true;
        return this;
      }
      public Builder ClearBannerConfiguration() {
        PrepareBuilder();
        result.hasBannerConfiguration = false;
        result.bannerConfiguration_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.GameMessage.RiftEndScreenConsolePlayerInfo> ConsolePlayerInfoList {
        get { return PrepareBuilder().consolePlayerInfo_; }
      }
      public int ConsolePlayerInfoCount {
        get { return result.ConsolePlayerInfoCount; }
      }
      public global::D3.GameMessage.RiftEndScreenConsolePlayerInfo GetConsolePlayerInfo(int index) {
        return result.GetConsolePlayerInfo(index);
      }
      public Builder SetConsolePlayerInfo(int index, global::D3.GameMessage.RiftEndScreenConsolePlayerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.consolePlayerInfo_[index] = value;
        return this;
      }
      public Builder SetConsolePlayerInfo(int index, global::D3.GameMessage.RiftEndScreenConsolePlayerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.consolePlayerInfo_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddConsolePlayerInfo(global::D3.GameMessage.RiftEndScreenConsolePlayerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.consolePlayerInfo_.Add(value);
        return this;
      }
      public Builder AddConsolePlayerInfo(global::D3.GameMessage.RiftEndScreenConsolePlayerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.consolePlayerInfo_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeConsolePlayerInfo(scg::IEnumerable<global::D3.GameMessage.RiftEndScreenConsolePlayerInfo> values) {
        PrepareBuilder();
        result.consolePlayerInfo_.Add(values);
        return this;
      }
      public Builder ClearConsolePlayerInfo() {
        PrepareBuilder();
        result.consolePlayerInfo_.Clear();
        return this;
      }
      
      public bool HasConsoleNumParticipants {
        get { return result.hasConsoleNumParticipants; }
      }
      public uint ConsoleNumParticipants {
        get { return result.ConsoleNumParticipants; }
        set { SetConsoleNumParticipants(value); }
      }
      public Builder SetConsoleNumParticipants(uint value) {
        PrepareBuilder();
        result.hasConsoleNumParticipants = true;
        result.consoleNumParticipants_ = value;
        return this;
      }
      public Builder ClearConsoleNumParticipants() {
        PrepareBuilder();
        result.hasConsoleNumParticipants = false;
        result.consoleNumParticipants_ = 0;
        return this;
      }
      
      public bool HasChallengeRiftRewardGbid {
        get { return result.hasChallengeRiftRewardGbid; }
      }
      public int ChallengeRiftRewardGbid {
        get { return result.ChallengeRiftRewardGbid; }
        set { SetChallengeRiftRewardGbid(value); }
      }
      public Builder SetChallengeRiftRewardGbid(int value) {
        PrepareBuilder();
        result.hasChallengeRiftRewardGbid = true;
        result.challengeRiftRewardGbid_ = value;
        return this;
      }
      public Builder ClearChallengeRiftRewardGbid() {
        PrepareBuilder();
        result.hasChallengeRiftRewardGbid = false;
        result.challengeRiftRewardGbid_ = 0;
        return this;
      }
      
      public bool HasChallengeRiftTimeToBeatMs {
        get { return result.hasChallengeRiftTimeToBeatMs; }
      }
      public int ChallengeRiftTimeToBeatMs {
        get { return result.ChallengeRiftTimeToBeatMs; }
        set { SetChallengeRiftTimeToBeatMs(value); }
      }
      public Builder SetChallengeRiftTimeToBeatMs(int value) {
        PrepareBuilder();
        result.hasChallengeRiftTimeToBeatMs = true;
        result.challengeRiftTimeToBeatMs_ = value;
        return this;
      }
      public Builder ClearChallengeRiftTimeToBeatMs() {
        PrepareBuilder();
        result.hasChallengeRiftTimeToBeatMs = false;
        result.challengeRiftTimeToBeatMs_ = 0;
        return this;
      }
      
      public bool HasChallengeRiftRewardState {
        get { return result.hasChallengeRiftRewardState; }
      }
      public int ChallengeRiftRewardState {
        get { return result.ChallengeRiftRewardState; }
        set { SetChallengeRiftRewardState(value); }
      }
      public Builder SetChallengeRiftRewardState(int value) {
        PrepareBuilder();
        result.hasChallengeRiftRewardState = true;
        result.challengeRiftRewardState_ = value;
        return this;
      }
      public Builder ClearChallengeRiftRewardState() {
        PrepareBuilder();
        result.hasChallengeRiftRewardState = false;
        result.challengeRiftRewardState_ = 0;
        return this;
      }
      
      public bool HasChallengeRiftNumber {
        get { return result.hasChallengeRiftNumber; }
      }
      public uint ChallengeRiftNumber {
        get { return result.ChallengeRiftNumber; }
        set { SetChallengeRiftNumber(value); }
      }
      public Builder SetChallengeRiftNumber(uint value) {
        PrepareBuilder();
        result.hasChallengeRiftNumber = true;
        result.challengeRiftNumber_ = value;
        return this;
      }
      public Builder ClearChallengeRiftNumber() {
        PrepareBuilder();
        result.hasChallengeRiftNumber = false;
        result.challengeRiftNumber_ = 0;
        return this;
      }
    }
    static RiftEndScreenInfo() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RiftStartPreloadingLeaderBoardData : pb::GeneratedMessage<RiftStartPreloadingLeaderBoardData, RiftStartPreloadingLeaderBoardData.Builder> {
    private RiftStartPreloadingLeaderBoardData() { }
    private static readonly RiftStartPreloadingLeaderBoardData defaultInstance = new RiftStartPreloadingLeaderBoardData().MakeReadOnly();
    private static readonly string[] _riftStartPreloadingLeaderBoardDataFieldNames = new string[] { "completion_time_ms", "num_participants", "rift_tier" };
    private static readonly uint[] _riftStartPreloadingLeaderBoardDataFieldTags = new uint[] { 24, 16, 8 };
    public static RiftStartPreloadingLeaderBoardData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RiftStartPreloadingLeaderBoardData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RiftStartPreloadingLeaderBoardData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_RiftStartPreloadingLeaderBoardData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RiftStartPreloadingLeaderBoardData, RiftStartPreloadingLeaderBoardData.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_RiftStartPreloadingLeaderBoardData__FieldAccessorTable; }
    }
    
    public const int RiftTierFieldNumber = 1;
    private bool hasRiftTier;
    private int riftTier_;
    public bool HasRiftTier {
      get { return hasRiftTier; }
    }
    public int RiftTier {
      get { return riftTier_; }
    }
    
    public const int NumParticipantsFieldNumber = 2;
    private bool hasNumParticipants;
    private int numParticipants_;
    public bool HasNumParticipants {
      get { return hasNumParticipants; }
    }
    public int NumParticipants {
      get { return numParticipants_; }
    }
    
    public const int CompletionTimeMsFieldNumber = 3;
    private bool hasCompletionTimeMs;
    private int completionTimeMs_;
    public bool HasCompletionTimeMs {
      get { return hasCompletionTimeMs; }
    }
    public int CompletionTimeMs {
      get { return completionTimeMs_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRiftTier) return false;
        if (!hasNumParticipants) return false;
        if (!hasCompletionTimeMs) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _riftStartPreloadingLeaderBoardDataFieldNames;
      if (hasRiftTier) {
        output.WriteInt32(1, field_names[2], RiftTier);
      }
      if (hasNumParticipants) {
        output.WriteInt32(2, field_names[1], NumParticipants);
      }
      if (hasCompletionTimeMs) {
        output.WriteInt32(3, field_names[0], CompletionTimeMs);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRiftTier) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, RiftTier);
        }
        if (hasNumParticipants) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, NumParticipants);
        }
        if (hasCompletionTimeMs) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, CompletionTimeMs);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RiftStartPreloadingLeaderBoardData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RiftStartPreloadingLeaderBoardData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RiftStartPreloadingLeaderBoardData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RiftStartPreloadingLeaderBoardData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RiftStartPreloadingLeaderBoardData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RiftStartPreloadingLeaderBoardData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RiftStartPreloadingLeaderBoardData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RiftStartPreloadingLeaderBoardData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RiftStartPreloadingLeaderBoardData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RiftStartPreloadingLeaderBoardData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RiftStartPreloadingLeaderBoardData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RiftStartPreloadingLeaderBoardData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RiftStartPreloadingLeaderBoardData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RiftStartPreloadingLeaderBoardData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RiftStartPreloadingLeaderBoardData result;
      
      private RiftStartPreloadingLeaderBoardData PrepareBuilder() {
        if (resultIsReadOnly) {
          RiftStartPreloadingLeaderBoardData original = result;
          result = new RiftStartPreloadingLeaderBoardData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RiftStartPreloadingLeaderBoardData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.RiftStartPreloadingLeaderBoardData.Descriptor; }
      }
      
      public override RiftStartPreloadingLeaderBoardData DefaultInstanceForType {
        get { return global::D3.GameMessage.RiftStartPreloadingLeaderBoardData.DefaultInstance; }
      }
      
      public override RiftStartPreloadingLeaderBoardData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RiftStartPreloadingLeaderBoardData) {
          return MergeFrom((RiftStartPreloadingLeaderBoardData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RiftStartPreloadingLeaderBoardData other) {
        if (other == global::D3.GameMessage.RiftStartPreloadingLeaderBoardData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRiftTier) {
          RiftTier = other.RiftTier;
        }
        if (other.HasNumParticipants) {
          NumParticipants = other.NumParticipants;
        }
        if (other.HasCompletionTimeMs) {
          CompletionTimeMs = other.CompletionTimeMs;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_riftStartPreloadingLeaderBoardDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _riftStartPreloadingLeaderBoardDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRiftTier = input.ReadInt32(ref result.riftTier_);
              break;
            }
            case 16: {
              result.hasNumParticipants = input.ReadInt32(ref result.numParticipants_);
              break;
            }
            case 24: {
              result.hasCompletionTimeMs = input.ReadInt32(ref result.completionTimeMs_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRiftTier {
        get { return result.hasRiftTier; }
      }
      public int RiftTier {
        get { return result.RiftTier; }
        set { SetRiftTier(value); }
      }
      public Builder SetRiftTier(int value) {
        PrepareBuilder();
        result.hasRiftTier = true;
        result.riftTier_ = value;
        return this;
      }
      public Builder ClearRiftTier() {
        PrepareBuilder();
        result.hasRiftTier = false;
        result.riftTier_ = 0;
        return this;
      }
      
      public bool HasNumParticipants {
        get { return result.hasNumParticipants; }
      }
      public int NumParticipants {
        get { return result.NumParticipants; }
        set { SetNumParticipants(value); }
      }
      public Builder SetNumParticipants(int value) {
        PrepareBuilder();
        result.hasNumParticipants = true;
        result.numParticipants_ = value;
        return this;
      }
      public Builder ClearNumParticipants() {
        PrepareBuilder();
        result.hasNumParticipants = false;
        result.numParticipants_ = 0;
        return this;
      }
      
      public bool HasCompletionTimeMs {
        get { return result.hasCompletionTimeMs; }
      }
      public int CompletionTimeMs {
        get { return result.CompletionTimeMs; }
        set { SetCompletionTimeMs(value); }
      }
      public Builder SetCompletionTimeMs(int value) {
        PrepareBuilder();
        result.hasCompletionTimeMs = true;
        result.completionTimeMs_ = value;
        return this;
      }
      public Builder ClearCompletionTimeMs() {
        PrepareBuilder();
        result.hasCompletionTimeMs = false;
        result.completionTimeMs_ = 0;
        return this;
      }
    }
    static RiftStartPreloadingLeaderBoardData() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AchievementsGetSnapshot : pb::GeneratedMessage<AchievementsGetSnapshot, AchievementsGetSnapshot.Builder> {
    private AchievementsGetSnapshot() { }
    private static readonly AchievementsGetSnapshot defaultInstance = new AchievementsGetSnapshot().MakeReadOnly();
    private static readonly string[] _achievementsGetSnapshotFieldNames = new string[] { "game_account_id" };
    private static readonly uint[] _achievementsGetSnapshotFieldTags = new uint[] { 10 };
    public static AchievementsGetSnapshot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AchievementsGetSnapshot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AchievementsGetSnapshot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_AchievementsGetSnapshot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AchievementsGetSnapshot, AchievementsGetSnapshot.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_AchievementsGetSnapshot__FieldAccessorTable; }
    }
    
    public const int GameAccountIdFieldNumber = 1;
    private bool hasGameAccountId;
    private global::D3.OnlineService.GameAccountHandle gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle GameAccountId {
      get { return gameAccountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameAccountId) return false;
        if (!GameAccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _achievementsGetSnapshotFieldNames;
      if (hasGameAccountId) {
        output.WriteMessage(1, field_names[0], GameAccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, GameAccountId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AchievementsGetSnapshot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementsGetSnapshot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementsGetSnapshot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementsGetSnapshot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementsGetSnapshot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementsGetSnapshot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AchievementsGetSnapshot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AchievementsGetSnapshot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AchievementsGetSnapshot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementsGetSnapshot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AchievementsGetSnapshot MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AchievementsGetSnapshot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AchievementsGetSnapshot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AchievementsGetSnapshot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AchievementsGetSnapshot result;
      
      private AchievementsGetSnapshot PrepareBuilder() {
        if (resultIsReadOnly) {
          AchievementsGetSnapshot original = result;
          result = new AchievementsGetSnapshot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AchievementsGetSnapshot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.AchievementsGetSnapshot.Descriptor; }
      }
      
      public override AchievementsGetSnapshot DefaultInstanceForType {
        get { return global::D3.GameMessage.AchievementsGetSnapshot.DefaultInstance; }
      }
      
      public override AchievementsGetSnapshot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AchievementsGetSnapshot) {
          return MergeFrom((AchievementsGetSnapshot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AchievementsGetSnapshot other) {
        if (other == global::D3.GameMessage.AchievementsGetSnapshot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_achievementsGetSnapshotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _achievementsGetSnapshotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameAccountId {
       get { return result.hasGameAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccountId &&
            result.gameAccountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.gameAccountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = null;
        return this;
      }
    }
    static AchievementsGetSnapshot() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AchievementsResetAchievements : pb::GeneratedMessage<AchievementsResetAchievements, AchievementsResetAchievements.Builder> {
    private AchievementsResetAchievements() { }
    private static readonly AchievementsResetAchievements defaultInstance = new AchievementsResetAchievements().MakeReadOnly();
    private static readonly string[] _achievementsResetAchievementsFieldNames = new string[] { "game_account_id" };
    private static readonly uint[] _achievementsResetAchievementsFieldTags = new uint[] { 10 };
    public static AchievementsResetAchievements DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AchievementsResetAchievements DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AchievementsResetAchievements ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_AchievementsResetAchievements__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AchievementsResetAchievements, AchievementsResetAchievements.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_AchievementsResetAchievements__FieldAccessorTable; }
    }
    
    public const int GameAccountIdFieldNumber = 1;
    private bool hasGameAccountId;
    private global::D3.OnlineService.GameAccountHandle gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle GameAccountId {
      get { return gameAccountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameAccountId) return false;
        if (!GameAccountId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _achievementsResetAchievementsFieldNames;
      if (hasGameAccountId) {
        output.WriteMessage(1, field_names[0], GameAccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, GameAccountId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AchievementsResetAchievements ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementsResetAchievements ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementsResetAchievements ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementsResetAchievements ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementsResetAchievements ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementsResetAchievements ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AchievementsResetAchievements ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AchievementsResetAchievements ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AchievementsResetAchievements ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementsResetAchievements ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AchievementsResetAchievements MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AchievementsResetAchievements prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AchievementsResetAchievements, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AchievementsResetAchievements cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AchievementsResetAchievements result;
      
      private AchievementsResetAchievements PrepareBuilder() {
        if (resultIsReadOnly) {
          AchievementsResetAchievements original = result;
          result = new AchievementsResetAchievements();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AchievementsResetAchievements MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.AchievementsResetAchievements.Descriptor; }
      }
      
      public override AchievementsResetAchievements DefaultInstanceForType {
        get { return global::D3.GameMessage.AchievementsResetAchievements.DefaultInstance; }
      }
      
      public override AchievementsResetAchievements BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AchievementsResetAchievements) {
          return MergeFrom((AchievementsResetAchievements) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AchievementsResetAchievements other) {
        if (other == global::D3.GameMessage.AchievementsResetAchievements.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_achievementsResetAchievementsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _achievementsResetAchievementsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameAccountId {
       get { return result.hasGameAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccountId &&
            result.gameAccountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.gameAccountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = null;
        return this;
      }
    }
    static AchievementsResetAchievements() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AchievementsCriteriaUpdateConsole : pb::GeneratedMessage<AchievementsCriteriaUpdateConsole, AchievementsCriteriaUpdateConsole.Builder> {
    private AchievementsCriteriaUpdateConsole() { }
    private static readonly AchievementsCriteriaUpdateConsole defaultInstance = new AchievementsCriteriaUpdateConsole().MakeReadOnly();
    private static readonly string[] _achievementsCriteriaUpdateConsoleFieldNames = new string[] { "criteria" };
    private static readonly uint[] _achievementsCriteriaUpdateConsoleFieldTags = new uint[] { 10 };
    public static AchievementsCriteriaUpdateConsole DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AchievementsCriteriaUpdateConsole DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AchievementsCriteriaUpdateConsole ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_AchievementsCriteriaUpdateConsole__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AchievementsCriteriaUpdateConsole, AchievementsCriteriaUpdateConsole.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_AchievementsCriteriaUpdateConsole__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Criteria : pb::GeneratedMessage<Criteria, Criteria.Builder> {
        private Criteria() { }
        private static readonly Criteria defaultInstance = new Criteria().MakeReadOnly();
        private static readonly string[] _criteriaFieldNames = new string[] { "deleted", "id", "quantity" };
        private static readonly uint[] _criteriaFieldTags = new uint[] { 16, 8, 24 };
        public static Criteria DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Criteria DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Criteria ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_AchievementsCriteriaUpdateConsole_Criteria__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Criteria, Criteria.Builder> InternalFieldAccessors {
          get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_AchievementsCriteriaUpdateConsole_Criteria__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private uint id_;
        public bool HasId {
          get { return hasId; }
        }
        public uint Id {
          get { return id_; }
        }
        
        public const int DeletedFieldNumber = 2;
        private bool hasDeleted;
        private bool deleted_;
        public bool HasDeleted {
          get { return hasDeleted; }
        }
        public bool Deleted {
          get { return deleted_; }
        }
        
        public const int QuantityFieldNumber = 3;
        private bool hasQuantity;
        private uint quantity_;
        public bool HasQuantity {
          get { return hasQuantity; }
        }
        public uint Quantity {
          get { return quantity_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasId) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _criteriaFieldNames;
          if (hasId) {
            output.WriteUInt32(1, field_names[1], Id);
          }
          if (hasDeleted) {
            output.WriteBool(2, field_names[0], Deleted);
          }
          if (hasQuantity) {
            output.WriteUInt32(3, field_names[2], Quantity);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
            }
            if (hasDeleted) {
              size += pb::CodedOutputStream.ComputeBoolSize(2, Deleted);
            }
            if (hasQuantity) {
              size += pb::CodedOutputStream.ComputeUInt32Size(3, Quantity);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Criteria ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Criteria ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Criteria ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Criteria ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Criteria ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Criteria ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Criteria ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Criteria ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Criteria ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Criteria ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Criteria MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Criteria prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Criteria, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Criteria cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Criteria result;
          
          private Criteria PrepareBuilder() {
            if (resultIsReadOnly) {
              Criteria original = result;
              result = new Criteria();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Criteria MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria.Descriptor; }
          }
          
          public override Criteria DefaultInstanceForType {
            get { return global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria.DefaultInstance; }
          }
          
          public override Criteria BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Criteria) {
              return MergeFrom((Criteria) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Criteria other) {
            if (other == global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasDeleted) {
              Deleted = other.Deleted;
            }
            if (other.HasQuantity) {
              Quantity = other.Quantity;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_criteriaFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _criteriaFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadUInt32(ref result.id_);
                  break;
                }
                case 16: {
                  result.hasDeleted = input.ReadBool(ref result.deleted_);
                  break;
                }
                case 24: {
                  result.hasQuantity = input.ReadUInt32(ref result.quantity_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public uint Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(uint value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0;
            return this;
          }
          
          public bool HasDeleted {
            get { return result.hasDeleted; }
          }
          public bool Deleted {
            get { return result.Deleted; }
            set { SetDeleted(value); }
          }
          public Builder SetDeleted(bool value) {
            PrepareBuilder();
            result.hasDeleted = true;
            result.deleted_ = value;
            return this;
          }
          public Builder ClearDeleted() {
            PrepareBuilder();
            result.hasDeleted = false;
            result.deleted_ = false;
            return this;
          }
          
          public bool HasQuantity {
            get { return result.hasQuantity; }
          }
          public uint Quantity {
            get { return result.Quantity; }
            set { SetQuantity(value); }
          }
          public Builder SetQuantity(uint value) {
            PrepareBuilder();
            result.hasQuantity = true;
            result.quantity_ = value;
            return this;
          }
          public Builder ClearQuantity() {
            PrepareBuilder();
            result.hasQuantity = false;
            result.quantity_ = 0;
            return this;
          }
        }
        static Criteria() {
          object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int CriteriaFieldNumber = 1;
    private pbc::PopsicleList<global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria> criteria_ = new pbc::PopsicleList<global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria>();
    public scg::IList<global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria> CriteriaList {
      get { return criteria_; }
    }
    public int CriteriaCount {
      get { return criteria_.Count; }
    }
    public global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria GetCriteria(int index) {
      return criteria_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria element in CriteriaList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _achievementsCriteriaUpdateConsoleFieldNames;
      if (criteria_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], criteria_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria element in CriteriaList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AchievementsCriteriaUpdateConsole ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementsCriteriaUpdateConsole ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementsCriteriaUpdateConsole ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementsCriteriaUpdateConsole ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementsCriteriaUpdateConsole ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementsCriteriaUpdateConsole ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AchievementsCriteriaUpdateConsole ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AchievementsCriteriaUpdateConsole ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AchievementsCriteriaUpdateConsole ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementsCriteriaUpdateConsole ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AchievementsCriteriaUpdateConsole MakeReadOnly() {
      criteria_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AchievementsCriteriaUpdateConsole prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AchievementsCriteriaUpdateConsole, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AchievementsCriteriaUpdateConsole cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AchievementsCriteriaUpdateConsole result;
      
      private AchievementsCriteriaUpdateConsole PrepareBuilder() {
        if (resultIsReadOnly) {
          AchievementsCriteriaUpdateConsole original = result;
          result = new AchievementsCriteriaUpdateConsole();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AchievementsCriteriaUpdateConsole MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Descriptor; }
      }
      
      public override AchievementsCriteriaUpdateConsole DefaultInstanceForType {
        get { return global::D3.GameMessage.AchievementsCriteriaUpdateConsole.DefaultInstance; }
      }
      
      public override AchievementsCriteriaUpdateConsole BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AchievementsCriteriaUpdateConsole) {
          return MergeFrom((AchievementsCriteriaUpdateConsole) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AchievementsCriteriaUpdateConsole other) {
        if (other == global::D3.GameMessage.AchievementsCriteriaUpdateConsole.DefaultInstance) return this;
        PrepareBuilder();
        if (other.criteria_.Count != 0) {
          result.criteria_.Add(other.criteria_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_achievementsCriteriaUpdateConsoleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _achievementsCriteriaUpdateConsoleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.criteria_, global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria> CriteriaList {
        get { return PrepareBuilder().criteria_; }
      }
      public int CriteriaCount {
        get { return result.CriteriaCount; }
      }
      public global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria GetCriteria(int index) {
        return result.GetCriteria(index);
      }
      public Builder SetCriteria(int index, global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.criteria_[index] = value;
        return this;
      }
      public Builder SetCriteria(int index, global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.criteria_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCriteria(global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.criteria_.Add(value);
        return this;
      }
      public Builder AddCriteria(global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.criteria_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCriteria(scg::IEnumerable<global::D3.GameMessage.AchievementsCriteriaUpdateConsole.Types.Criteria> values) {
        PrepareBuilder();
        result.criteria_.Add(values);
        return this;
      }
      public Builder ClearCriteria() {
        PrepareBuilder();
        result.criteria_.Clear();
        return this;
      }
    }
    static AchievementsCriteriaUpdateConsole() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AchievementsAwardedConsole : pb::GeneratedMessage<AchievementsAwardedConsole, AchievementsAwardedConsole.Builder> {
    private AchievementsAwardedConsole() { }
    private static readonly AchievementsAwardedConsole defaultInstance = new AchievementsAwardedConsole().MakeReadOnly();
    private static readonly string[] _achievementsAwardedConsoleFieldNames = new string[] { "achievements", "player_index" };
    private static readonly uint[] _achievementsAwardedConsoleFieldTags = new uint[] { 16, 8 };
    public static AchievementsAwardedConsole DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AchievementsAwardedConsole DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AchievementsAwardedConsole ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_AchievementsAwardedConsole__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AchievementsAwardedConsole, AchievementsAwardedConsole.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_AchievementsAwardedConsole__FieldAccessorTable; }
    }
    
    public const int PlayerIndexFieldNumber = 1;
    private bool hasPlayerIndex;
    private uint playerIndex_;
    public bool HasPlayerIndex {
      get { return hasPlayerIndex; }
    }
    public uint PlayerIndex {
      get { return playerIndex_; }
    }
    
    public const int AchievementsFieldNumber = 2;
    private pbc::PopsicleList<ulong> achievements_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> AchievementsList {
      get { return pbc::Lists.AsReadOnly(achievements_); }
    }
    public int AchievementsCount {
      get { return achievements_.Count; }
    }
    public ulong GetAchievements(int index) {
      return achievements_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayerIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _achievementsAwardedConsoleFieldNames;
      if (hasPlayerIndex) {
        output.WriteUInt32(1, field_names[1], PlayerIndex);
      }
      if (achievements_.Count > 0) {
        output.WriteUInt64Array(2, field_names[0], achievements_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayerIndex) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, PlayerIndex);
        }
        {
          int dataSize = 0;
          foreach (ulong element in AchievementsList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * achievements_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AchievementsAwardedConsole ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementsAwardedConsole ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementsAwardedConsole ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementsAwardedConsole ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementsAwardedConsole ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementsAwardedConsole ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AchievementsAwardedConsole ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AchievementsAwardedConsole ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AchievementsAwardedConsole ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementsAwardedConsole ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AchievementsAwardedConsole MakeReadOnly() {
      achievements_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AchievementsAwardedConsole prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AchievementsAwardedConsole, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AchievementsAwardedConsole cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AchievementsAwardedConsole result;
      
      private AchievementsAwardedConsole PrepareBuilder() {
        if (resultIsReadOnly) {
          AchievementsAwardedConsole original = result;
          result = new AchievementsAwardedConsole();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AchievementsAwardedConsole MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.AchievementsAwardedConsole.Descriptor; }
      }
      
      public override AchievementsAwardedConsole DefaultInstanceForType {
        get { return global::D3.GameMessage.AchievementsAwardedConsole.DefaultInstance; }
      }
      
      public override AchievementsAwardedConsole BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AchievementsAwardedConsole) {
          return MergeFrom((AchievementsAwardedConsole) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AchievementsAwardedConsole other) {
        if (other == global::D3.GameMessage.AchievementsAwardedConsole.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerIndex) {
          PlayerIndex = other.PlayerIndex;
        }
        if (other.achievements_.Count != 0) {
          result.achievements_.Add(other.achievements_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_achievementsAwardedConsoleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _achievementsAwardedConsoleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerIndex = input.ReadUInt32(ref result.playerIndex_);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt64Array(tag, field_name, result.achievements_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerIndex {
        get { return result.hasPlayerIndex; }
      }
      public uint PlayerIndex {
        get { return result.PlayerIndex; }
        set { SetPlayerIndex(value); }
      }
      public Builder SetPlayerIndex(uint value) {
        PrepareBuilder();
        result.hasPlayerIndex = true;
        result.playerIndex_ = value;
        return this;
      }
      public Builder ClearPlayerIndex() {
        PrepareBuilder();
        result.hasPlayerIndex = false;
        result.playerIndex_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> AchievementsList {
        get { return PrepareBuilder().achievements_; }
      }
      public int AchievementsCount {
        get { return result.AchievementsCount; }
      }
      public ulong GetAchievements(int index) {
        return result.GetAchievements(index);
      }
      public Builder SetAchievements(int index, ulong value) {
        PrepareBuilder();
        result.achievements_[index] = value;
        return this;
      }
      public Builder AddAchievements(ulong value) {
        PrepareBuilder();
        result.achievements_.Add(value);
        return this;
      }
      public Builder AddRangeAchievements(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.achievements_.Add(values);
        return this;
      }
      public Builder ClearAchievements() {
        PrepareBuilder();
        result.achievements_.Clear();
        return this;
      }
    }
    static AchievementsAwardedConsole() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AchievementsSnapshot : pb::GeneratedMessage<AchievementsSnapshot, AchievementsSnapshot.Builder> {
    private AchievementsSnapshot() { }
    private static readonly AchievementsSnapshot defaultInstance = new AchievementsSnapshot().MakeReadOnly();
    private static readonly string[] _achievementsSnapshotFieldNames = new string[] { "error_code", "game_account_id", "snapshot" };
    private static readonly uint[] _achievementsSnapshotFieldTags = new uint[] { 24, 10, 18 };
    public static AchievementsSnapshot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AchievementsSnapshot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AchievementsSnapshot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_AchievementsSnapshot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AchievementsSnapshot, AchievementsSnapshot.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_AchievementsSnapshot__FieldAccessorTable; }
    }
    
    public const int GameAccountIdFieldNumber = 1;
    private bool hasGameAccountId;
    private global::D3.OnlineService.GameAccountHandle gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle GameAccountId {
      get { return gameAccountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public const int SnapshotFieldNumber = 2;
    private bool hasSnapshot;
    private global::D3.Achievements.Snapshot snapshot_;
    public bool HasSnapshot {
      get { return hasSnapshot; }
    }
    public global::D3.Achievements.Snapshot Snapshot {
      get { return snapshot_ ?? global::D3.Achievements.Snapshot.DefaultInstance; }
    }
    
    public const int ErrorCodeFieldNumber = 3;
    private bool hasErrorCode;
    private uint errorCode_;
    public bool HasErrorCode {
      get { return hasErrorCode; }
    }
    public uint ErrorCode {
      get { return errorCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameAccountId) return false;
        if (!GameAccountId.IsInitialized) return false;
        if (HasSnapshot) {
          if (!Snapshot.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _achievementsSnapshotFieldNames;
      if (hasGameAccountId) {
        output.WriteMessage(1, field_names[1], GameAccountId);
      }
      if (hasSnapshot) {
        output.WriteMessage(2, field_names[2], Snapshot);
      }
      if (hasErrorCode) {
        output.WriteUInt32(3, field_names[0], ErrorCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, GameAccountId);
        }
        if (hasSnapshot) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Snapshot);
        }
        if (hasErrorCode) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, ErrorCode);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AchievementsSnapshot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementsSnapshot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementsSnapshot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementsSnapshot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementsSnapshot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementsSnapshot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AchievementsSnapshot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AchievementsSnapshot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AchievementsSnapshot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementsSnapshot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AchievementsSnapshot MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AchievementsSnapshot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AchievementsSnapshot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AchievementsSnapshot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AchievementsSnapshot result;
      
      private AchievementsSnapshot PrepareBuilder() {
        if (resultIsReadOnly) {
          AchievementsSnapshot original = result;
          result = new AchievementsSnapshot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AchievementsSnapshot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.AchievementsSnapshot.Descriptor; }
      }
      
      public override AchievementsSnapshot DefaultInstanceForType {
        get { return global::D3.GameMessage.AchievementsSnapshot.DefaultInstance; }
      }
      
      public override AchievementsSnapshot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AchievementsSnapshot) {
          return MergeFrom((AchievementsSnapshot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AchievementsSnapshot other) {
        if (other == global::D3.GameMessage.AchievementsSnapshot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        if (other.HasSnapshot) {
          MergeSnapshot(other.Snapshot);
        }
        if (other.HasErrorCode) {
          ErrorCode = other.ErrorCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_achievementsSnapshotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _achievementsSnapshotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.Achievements.Snapshot.Builder subBuilder = global::D3.Achievements.Snapshot.CreateBuilder();
              if (result.hasSnapshot) {
                subBuilder.MergeFrom(Snapshot);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Snapshot = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasErrorCode = input.ReadUInt32(ref result.errorCode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameAccountId {
       get { return result.hasGameAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccountId &&
            result.gameAccountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.gameAccountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = null;
        return this;
      }
      
      public bool HasSnapshot {
       get { return result.hasSnapshot; }
      }
      public global::D3.Achievements.Snapshot Snapshot {
        get { return result.Snapshot; }
        set { SetSnapshot(value); }
      }
      public Builder SetSnapshot(global::D3.Achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSnapshot = true;
        result.snapshot_ = value;
        return this;
      }
      public Builder SetSnapshot(global::D3.Achievements.Snapshot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSnapshot = true;
        result.snapshot_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSnapshot(global::D3.Achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSnapshot &&
            result.snapshot_ != global::D3.Achievements.Snapshot.DefaultInstance) {
            result.snapshot_ = global::D3.Achievements.Snapshot.CreateBuilder(result.snapshot_).MergeFrom(value).BuildPartial();
        } else {
          result.snapshot_ = value;
        }
        result.hasSnapshot = true;
        return this;
      }
      public Builder ClearSnapshot() {
        PrepareBuilder();
        result.hasSnapshot = false;
        result.snapshot_ = null;
        return this;
      }
      
      public bool HasErrorCode {
        get { return result.hasErrorCode; }
      }
      public uint ErrorCode {
        get { return result.ErrorCode; }
        set { SetErrorCode(value); }
      }
      public Builder SetErrorCode(uint value) {
        PrepareBuilder();
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder ClearErrorCode() {
        PrepareBuilder();
        result.hasErrorCode = false;
        result.errorCode_ = 0;
        return this;
      }
    }
    static AchievementsSnapshot() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MatchmakingGetStats : pb::GeneratedMessage<MatchmakingGetStats, MatchmakingGetStats.Builder> {
    private MatchmakingGetStats() { }
    private static readonly MatchmakingGetStats defaultInstance = new MatchmakingGetStats().MakeReadOnly();
    private static readonly string[] _matchmakingGetStatsFieldNames = new string[] { "game_act", "game_content_act_license", "game_quest", "game_tag", "handicap_level", "monster_level", "partition", "server_pool", "version" };
    private static readonly uint[] _matchmakingGetStatsFieldTags = new uint[] { 32, 72, 45, 58, 48, 64, 16, 26, 10 };
    public static MatchmakingGetStats DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MatchmakingGetStats DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MatchmakingGetStats ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_MatchmakingGetStats__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MatchmakingGetStats, MatchmakingGetStats.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_MatchmakingGetStats__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private string version_ = "";
    public bool HasVersion {
      get { return hasVersion; }
    }
    public string Version {
      get { return version_; }
    }
    
    public const int PartitionFieldNumber = 2;
    private bool hasPartition;
    private int partition_ = -1;
    public bool HasPartition {
      get { return hasPartition; }
    }
    public int Partition {
      get { return partition_; }
    }
    
    public const int ServerPoolFieldNumber = 3;
    private bool hasServerPool;
    private string serverPool_ = "";
    public bool HasServerPool {
      get { return hasServerPool; }
    }
    public string ServerPool {
      get { return serverPool_; }
    }
    
    public const int GameActFieldNumber = 4;
    private bool hasGameAct;
    private int gameAct_;
    public bool HasGameAct {
      get { return hasGameAct; }
    }
    public int GameAct {
      get { return gameAct_; }
    }
    
    public const int GameQuestFieldNumber = 5;
    private bool hasGameQuest;
    private uint gameQuest_;
    public bool HasGameQuest {
      get { return hasGameQuest; }
    }
    public uint GameQuest {
      get { return gameQuest_; }
    }
    
    public const int HandicapLevelFieldNumber = 6;
    private bool hasHandicapLevel;
    private int handicapLevel_;
    public bool HasHandicapLevel {
      get { return hasHandicapLevel; }
    }
    public int HandicapLevel {
      get { return handicapLevel_; }
    }
    
    public const int GameTagFieldNumber = 7;
    private bool hasGameTag;
    private string gameTag_ = "";
    public bool HasGameTag {
      get { return hasGameTag; }
    }
    public string GameTag {
      get { return gameTag_; }
    }
    
    public const int MonsterLevelFieldNumber = 8;
    private bool hasMonsterLevel;
    private int monsterLevel_;
    public bool HasMonsterLevel {
      get { return hasMonsterLevel; }
    }
    public int MonsterLevel {
      get { return monsterLevel_; }
    }
    
    public const int GameContentActLicenseFieldNumber = 9;
    private bool hasGameContentActLicense;
    private int gameContentActLicense_;
    public bool HasGameContentActLicense {
      get { return hasGameContentActLicense; }
    }
    public int GameContentActLicense {
      get { return gameContentActLicense_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _matchmakingGetStatsFieldNames;
      if (hasVersion) {
        output.WriteString(1, field_names[8], Version);
      }
      if (hasPartition) {
        output.WriteInt32(2, field_names[6], Partition);
      }
      if (hasServerPool) {
        output.WriteString(3, field_names[7], ServerPool);
      }
      if (hasGameAct) {
        output.WriteInt32(4, field_names[0], GameAct);
      }
      if (hasGameQuest) {
        output.WriteFixed32(5, field_names[2], GameQuest);
      }
      if (hasHandicapLevel) {
        output.WriteInt32(6, field_names[4], HandicapLevel);
      }
      if (hasGameTag) {
        output.WriteString(7, field_names[3], GameTag);
      }
      if (hasMonsterLevel) {
        output.WriteInt32(8, field_names[5], MonsterLevel);
      }
      if (hasGameContentActLicense) {
        output.WriteInt32(9, field_names[1], GameContentActLicense);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Version);
        }
        if (hasPartition) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Partition);
        }
        if (hasServerPool) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ServerPool);
        }
        if (hasGameAct) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, GameAct);
        }
        if (hasGameQuest) {
          size += pb::CodedOutputStream.ComputeFixed32Size(5, GameQuest);
        }
        if (hasHandicapLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, HandicapLevel);
        }
        if (hasGameTag) {
          size += pb::CodedOutputStream.ComputeStringSize(7, GameTag);
        }
        if (hasMonsterLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, MonsterLevel);
        }
        if (hasGameContentActLicense) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, GameContentActLicense);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MatchmakingGetStats ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchmakingGetStats ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchmakingGetStats ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchmakingGetStats ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchmakingGetStats ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchmakingGetStats ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MatchmakingGetStats ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MatchmakingGetStats ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MatchmakingGetStats ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchmakingGetStats ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MatchmakingGetStats MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MatchmakingGetStats prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MatchmakingGetStats, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MatchmakingGetStats cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MatchmakingGetStats result;
      
      private MatchmakingGetStats PrepareBuilder() {
        if (resultIsReadOnly) {
          MatchmakingGetStats original = result;
          result = new MatchmakingGetStats();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MatchmakingGetStats MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.MatchmakingGetStats.Descriptor; }
      }
      
      public override MatchmakingGetStats DefaultInstanceForType {
        get { return global::D3.GameMessage.MatchmakingGetStats.DefaultInstance; }
      }
      
      public override MatchmakingGetStats BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MatchmakingGetStats) {
          return MergeFrom((MatchmakingGetStats) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MatchmakingGetStats other) {
        if (other == global::D3.GameMessage.MatchmakingGetStats.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasPartition) {
          Partition = other.Partition;
        }
        if (other.HasServerPool) {
          ServerPool = other.ServerPool;
        }
        if (other.HasGameAct) {
          GameAct = other.GameAct;
        }
        if (other.HasGameQuest) {
          GameQuest = other.GameQuest;
        }
        if (other.HasHandicapLevel) {
          HandicapLevel = other.HandicapLevel;
        }
        if (other.HasGameTag) {
          GameTag = other.GameTag;
        }
        if (other.HasMonsterLevel) {
          MonsterLevel = other.MonsterLevel;
        }
        if (other.HasGameContentActLicense) {
          GameContentActLicense = other.GameContentActLicense;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_matchmakingGetStatsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _matchmakingGetStatsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasVersion = input.ReadString(ref result.version_);
              break;
            }
            case 16: {
              result.hasPartition = input.ReadInt32(ref result.partition_);
              break;
            }
            case 26: {
              result.hasServerPool = input.ReadString(ref result.serverPool_);
              break;
            }
            case 32: {
              result.hasGameAct = input.ReadInt32(ref result.gameAct_);
              break;
            }
            case 45: {
              result.hasGameQuest = input.ReadFixed32(ref result.gameQuest_);
              break;
            }
            case 48: {
              result.hasHandicapLevel = input.ReadInt32(ref result.handicapLevel_);
              break;
            }
            case 58: {
              result.hasGameTag = input.ReadString(ref result.gameTag_);
              break;
            }
            case 64: {
              result.hasMonsterLevel = input.ReadInt32(ref result.monsterLevel_);
              break;
            }
            case 72: {
              result.hasGameContentActLicense = input.ReadInt32(ref result.gameContentActLicense_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public string Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = "";
        return this;
      }
      
      public bool HasPartition {
        get { return result.hasPartition; }
      }
      public int Partition {
        get { return result.Partition; }
        set { SetPartition(value); }
      }
      public Builder SetPartition(int value) {
        PrepareBuilder();
        result.hasPartition = true;
        result.partition_ = value;
        return this;
      }
      public Builder ClearPartition() {
        PrepareBuilder();
        result.hasPartition = false;
        result.partition_ = -1;
        return this;
      }
      
      public bool HasServerPool {
        get { return result.hasServerPool; }
      }
      public string ServerPool {
        get { return result.ServerPool; }
        set { SetServerPool(value); }
      }
      public Builder SetServerPool(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServerPool = true;
        result.serverPool_ = value;
        return this;
      }
      public Builder ClearServerPool() {
        PrepareBuilder();
        result.hasServerPool = false;
        result.serverPool_ = "";
        return this;
      }
      
      public bool HasGameAct {
        get { return result.hasGameAct; }
      }
      public int GameAct {
        get { return result.GameAct; }
        set { SetGameAct(value); }
      }
      public Builder SetGameAct(int value) {
        PrepareBuilder();
        result.hasGameAct = true;
        result.gameAct_ = value;
        return this;
      }
      public Builder ClearGameAct() {
        PrepareBuilder();
        result.hasGameAct = false;
        result.gameAct_ = 0;
        return this;
      }
      
      public bool HasGameQuest {
        get { return result.hasGameQuest; }
      }
      public uint GameQuest {
        get { return result.GameQuest; }
        set { SetGameQuest(value); }
      }
      public Builder SetGameQuest(uint value) {
        PrepareBuilder();
        result.hasGameQuest = true;
        result.gameQuest_ = value;
        return this;
      }
      public Builder ClearGameQuest() {
        PrepareBuilder();
        result.hasGameQuest = false;
        result.gameQuest_ = 0;
        return this;
      }
      
      public bool HasHandicapLevel {
        get { return result.hasHandicapLevel; }
      }
      public int HandicapLevel {
        get { return result.HandicapLevel; }
        set { SetHandicapLevel(value); }
      }
      public Builder SetHandicapLevel(int value) {
        PrepareBuilder();
        result.hasHandicapLevel = true;
        result.handicapLevel_ = value;
        return this;
      }
      public Builder ClearHandicapLevel() {
        PrepareBuilder();
        result.hasHandicapLevel = false;
        result.handicapLevel_ = 0;
        return this;
      }
      
      public bool HasGameTag {
        get { return result.hasGameTag; }
      }
      public string GameTag {
        get { return result.GameTag; }
        set { SetGameTag(value); }
      }
      public Builder SetGameTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameTag = true;
        result.gameTag_ = value;
        return this;
      }
      public Builder ClearGameTag() {
        PrepareBuilder();
        result.hasGameTag = false;
        result.gameTag_ = "";
        return this;
      }
      
      public bool HasMonsterLevel {
        get { return result.hasMonsterLevel; }
      }
      public int MonsterLevel {
        get { return result.MonsterLevel; }
        set { SetMonsterLevel(value); }
      }
      public Builder SetMonsterLevel(int value) {
        PrepareBuilder();
        result.hasMonsterLevel = true;
        result.monsterLevel_ = value;
        return this;
      }
      public Builder ClearMonsterLevel() {
        PrepareBuilder();
        result.hasMonsterLevel = false;
        result.monsterLevel_ = 0;
        return this;
      }
      
      public bool HasGameContentActLicense {
        get { return result.hasGameContentActLicense; }
      }
      public int GameContentActLicense {
        get { return result.GameContentActLicense; }
        set { SetGameContentActLicense(value); }
      }
      public Builder SetGameContentActLicense(int value) {
        PrepareBuilder();
        result.hasGameContentActLicense = true;
        result.gameContentActLicense_ = value;
        return this;
      }
      public Builder ClearGameContentActLicense() {
        PrepareBuilder();
        result.hasGameContentActLicense = false;
        result.gameContentActLicense_ = 0;
        return this;
      }
    }
    static MatchmakingGetStats() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MatchmakingStatsBucket : pb::GeneratedMessage<MatchmakingStatsBucket, MatchmakingStatsBucket.Builder> {
    private MatchmakingStatsBucket() { }
    private static readonly MatchmakingStatsBucket defaultInstance = new MatchmakingStatsBucket().MakeReadOnly();
    private static readonly string[] _matchmakingStatsBucketFieldNames = new string[] { "forming_games", "open_games_total", "players_in_open_games_total", "waiting_players" };
    private static readonly uint[] _matchmakingStatsBucketFieldTags = new uint[] { 8, 24, 32, 16 };
    public static MatchmakingStatsBucket DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MatchmakingStatsBucket DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MatchmakingStatsBucket ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_MatchmakingStatsBucket__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MatchmakingStatsBucket, MatchmakingStatsBucket.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_MatchmakingStatsBucket__FieldAccessorTable; }
    }
    
    public const int FormingGamesFieldNumber = 1;
    private bool hasFormingGames;
    private uint formingGames_;
    public bool HasFormingGames {
      get { return hasFormingGames; }
    }
    public uint FormingGames {
      get { return formingGames_; }
    }
    
    public const int WaitingPlayersFieldNumber = 2;
    private bool hasWaitingPlayers;
    private uint waitingPlayers_;
    public bool HasWaitingPlayers {
      get { return hasWaitingPlayers; }
    }
    public uint WaitingPlayers {
      get { return waitingPlayers_; }
    }
    
    public const int OpenGamesTotalFieldNumber = 3;
    private bool hasOpenGamesTotal;
    private uint openGamesTotal_;
    public bool HasOpenGamesTotal {
      get { return hasOpenGamesTotal; }
    }
    public uint OpenGamesTotal {
      get { return openGamesTotal_; }
    }
    
    public const int PlayersInOpenGamesTotalFieldNumber = 4;
    private bool hasPlayersInOpenGamesTotal;
    private uint playersInOpenGamesTotal_;
    public bool HasPlayersInOpenGamesTotal {
      get { return hasPlayersInOpenGamesTotal; }
    }
    public uint PlayersInOpenGamesTotal {
      get { return playersInOpenGamesTotal_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _matchmakingStatsBucketFieldNames;
      if (hasFormingGames) {
        output.WriteUInt32(1, field_names[0], FormingGames);
      }
      if (hasWaitingPlayers) {
        output.WriteUInt32(2, field_names[3], WaitingPlayers);
      }
      if (hasOpenGamesTotal) {
        output.WriteUInt32(3, field_names[1], OpenGamesTotal);
      }
      if (hasPlayersInOpenGamesTotal) {
        output.WriteUInt32(4, field_names[2], PlayersInOpenGamesTotal);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFormingGames) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, FormingGames);
        }
        if (hasWaitingPlayers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, WaitingPlayers);
        }
        if (hasOpenGamesTotal) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, OpenGamesTotal);
        }
        if (hasPlayersInOpenGamesTotal) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, PlayersInOpenGamesTotal);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MatchmakingStatsBucket ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchmakingStatsBucket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchmakingStatsBucket ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchmakingStatsBucket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchmakingStatsBucket ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchmakingStatsBucket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MatchmakingStatsBucket ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MatchmakingStatsBucket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MatchmakingStatsBucket ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchmakingStatsBucket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MatchmakingStatsBucket MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MatchmakingStatsBucket prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MatchmakingStatsBucket, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MatchmakingStatsBucket cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MatchmakingStatsBucket result;
      
      private MatchmakingStatsBucket PrepareBuilder() {
        if (resultIsReadOnly) {
          MatchmakingStatsBucket original = result;
          result = new MatchmakingStatsBucket();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MatchmakingStatsBucket MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.MatchmakingStatsBucket.Descriptor; }
      }
      
      public override MatchmakingStatsBucket DefaultInstanceForType {
        get { return global::D3.GameMessage.MatchmakingStatsBucket.DefaultInstance; }
      }
      
      public override MatchmakingStatsBucket BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MatchmakingStatsBucket) {
          return MergeFrom((MatchmakingStatsBucket) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MatchmakingStatsBucket other) {
        if (other == global::D3.GameMessage.MatchmakingStatsBucket.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFormingGames) {
          FormingGames = other.FormingGames;
        }
        if (other.HasWaitingPlayers) {
          WaitingPlayers = other.WaitingPlayers;
        }
        if (other.HasOpenGamesTotal) {
          OpenGamesTotal = other.OpenGamesTotal;
        }
        if (other.HasPlayersInOpenGamesTotal) {
          PlayersInOpenGamesTotal = other.PlayersInOpenGamesTotal;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_matchmakingStatsBucketFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _matchmakingStatsBucketFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasFormingGames = input.ReadUInt32(ref result.formingGames_);
              break;
            }
            case 16: {
              result.hasWaitingPlayers = input.ReadUInt32(ref result.waitingPlayers_);
              break;
            }
            case 24: {
              result.hasOpenGamesTotal = input.ReadUInt32(ref result.openGamesTotal_);
              break;
            }
            case 32: {
              result.hasPlayersInOpenGamesTotal = input.ReadUInt32(ref result.playersInOpenGamesTotal_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFormingGames {
        get { return result.hasFormingGames; }
      }
      public uint FormingGames {
        get { return result.FormingGames; }
        set { SetFormingGames(value); }
      }
      public Builder SetFormingGames(uint value) {
        PrepareBuilder();
        result.hasFormingGames = true;
        result.formingGames_ = value;
        return this;
      }
      public Builder ClearFormingGames() {
        PrepareBuilder();
        result.hasFormingGames = false;
        result.formingGames_ = 0;
        return this;
      }
      
      public bool HasWaitingPlayers {
        get { return result.hasWaitingPlayers; }
      }
      public uint WaitingPlayers {
        get { return result.WaitingPlayers; }
        set { SetWaitingPlayers(value); }
      }
      public Builder SetWaitingPlayers(uint value) {
        PrepareBuilder();
        result.hasWaitingPlayers = true;
        result.waitingPlayers_ = value;
        return this;
      }
      public Builder ClearWaitingPlayers() {
        PrepareBuilder();
        result.hasWaitingPlayers = false;
        result.waitingPlayers_ = 0;
        return this;
      }
      
      public bool HasOpenGamesTotal {
        get { return result.hasOpenGamesTotal; }
      }
      public uint OpenGamesTotal {
        get { return result.OpenGamesTotal; }
        set { SetOpenGamesTotal(value); }
      }
      public Builder SetOpenGamesTotal(uint value) {
        PrepareBuilder();
        result.hasOpenGamesTotal = true;
        result.openGamesTotal_ = value;
        return this;
      }
      public Builder ClearOpenGamesTotal() {
        PrepareBuilder();
        result.hasOpenGamesTotal = false;
        result.openGamesTotal_ = 0;
        return this;
      }
      
      public bool HasPlayersInOpenGamesTotal {
        get { return result.hasPlayersInOpenGamesTotal; }
      }
      public uint PlayersInOpenGamesTotal {
        get { return result.PlayersInOpenGamesTotal; }
        set { SetPlayersInOpenGamesTotal(value); }
      }
      public Builder SetPlayersInOpenGamesTotal(uint value) {
        PrepareBuilder();
        result.hasPlayersInOpenGamesTotal = true;
        result.playersInOpenGamesTotal_ = value;
        return this;
      }
      public Builder ClearPlayersInOpenGamesTotal() {
        PrepareBuilder();
        result.hasPlayersInOpenGamesTotal = false;
        result.playersInOpenGamesTotal_ = 0;
        return this;
      }
    }
    static MatchmakingStatsBucket() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MatchmakingGetStatsResponse : pb::GeneratedMessage<MatchmakingGetStatsResponse, MatchmakingGetStatsResponse.Builder> {
    private MatchmakingGetStatsResponse() { }
    private static readonly MatchmakingGetStatsResponse defaultInstance = new MatchmakingGetStatsResponse().MakeReadOnly();
    private static readonly string[] _matchmakingGetStatsResponseFieldNames = new string[] { "stats_bucket" };
    private static readonly uint[] _matchmakingGetStatsResponseFieldTags = new uint[] { 10 };
    public static MatchmakingGetStatsResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MatchmakingGetStatsResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MatchmakingGetStatsResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_MatchmakingGetStatsResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MatchmakingGetStatsResponse, MatchmakingGetStatsResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_MatchmakingGetStatsResponse__FieldAccessorTable; }
    }
    
    public const int StatsBucketFieldNumber = 1;
    private pbc::PopsicleList<global::D3.GameMessage.MatchmakingStatsBucket> statsBucket_ = new pbc::PopsicleList<global::D3.GameMessage.MatchmakingStatsBucket>();
    public scg::IList<global::D3.GameMessage.MatchmakingStatsBucket> StatsBucketList {
      get { return statsBucket_; }
    }
    public int StatsBucketCount {
      get { return statsBucket_.Count; }
    }
    public global::D3.GameMessage.MatchmakingStatsBucket GetStatsBucket(int index) {
      return statsBucket_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _matchmakingGetStatsResponseFieldNames;
      if (statsBucket_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], statsBucket_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.GameMessage.MatchmakingStatsBucket element in StatsBucketList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MatchmakingGetStatsResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchmakingGetStatsResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchmakingGetStatsResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MatchmakingGetStatsResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MatchmakingGetStatsResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchmakingGetStatsResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MatchmakingGetStatsResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MatchmakingGetStatsResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MatchmakingGetStatsResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MatchmakingGetStatsResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MatchmakingGetStatsResponse MakeReadOnly() {
      statsBucket_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MatchmakingGetStatsResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MatchmakingGetStatsResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MatchmakingGetStatsResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MatchmakingGetStatsResponse result;
      
      private MatchmakingGetStatsResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          MatchmakingGetStatsResponse original = result;
          result = new MatchmakingGetStatsResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MatchmakingGetStatsResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.MatchmakingGetStatsResponse.Descriptor; }
      }
      
      public override MatchmakingGetStatsResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.MatchmakingGetStatsResponse.DefaultInstance; }
      }
      
      public override MatchmakingGetStatsResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MatchmakingGetStatsResponse) {
          return MergeFrom((MatchmakingGetStatsResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MatchmakingGetStatsResponse other) {
        if (other == global::D3.GameMessage.MatchmakingGetStatsResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.statsBucket_.Count != 0) {
          result.statsBucket_.Add(other.statsBucket_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_matchmakingGetStatsResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _matchmakingGetStatsResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.statsBucket_, global::D3.GameMessage.MatchmakingStatsBucket.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.GameMessage.MatchmakingStatsBucket> StatsBucketList {
        get { return PrepareBuilder().statsBucket_; }
      }
      public int StatsBucketCount {
        get { return result.StatsBucketCount; }
      }
      public global::D3.GameMessage.MatchmakingStatsBucket GetStatsBucket(int index) {
        return result.GetStatsBucket(index);
      }
      public Builder SetStatsBucket(int index, global::D3.GameMessage.MatchmakingStatsBucket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.statsBucket_[index] = value;
        return this;
      }
      public Builder SetStatsBucket(int index, global::D3.GameMessage.MatchmakingStatsBucket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.statsBucket_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStatsBucket(global::D3.GameMessage.MatchmakingStatsBucket value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.statsBucket_.Add(value);
        return this;
      }
      public Builder AddStatsBucket(global::D3.GameMessage.MatchmakingStatsBucket.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.statsBucket_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStatsBucket(scg::IEnumerable<global::D3.GameMessage.MatchmakingStatsBucket> values) {
        PrepareBuilder();
        result.statsBucket_.Add(values);
        return this;
      }
      public Builder ClearStatsBucket() {
        PrepareBuilder();
        result.statsBucket_.Clear();
        return this;
      }
    }
    static MatchmakingGetStatsResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TriggerNewClientAvailable : pb::GeneratedMessage<TriggerNewClientAvailable, TriggerNewClientAvailable.Builder> {
    private TriggerNewClientAvailable() { }
    private static readonly TriggerNewClientAvailable defaultInstance = new TriggerNewClientAvailable().MakeReadOnly();
    private static readonly string[] _triggerNewClientAvailableFieldNames = new string[] { "client_build_number" };
    private static readonly uint[] _triggerNewClientAvailableFieldTags = new uint[] { 8 };
    public static TriggerNewClientAvailable DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TriggerNewClientAvailable DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TriggerNewClientAvailable ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TriggerNewClientAvailable__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TriggerNewClientAvailable, TriggerNewClientAvailable.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_TriggerNewClientAvailable__FieldAccessorTable; }
    }
    
    public const int ClientBuildNumberFieldNumber = 1;
    private bool hasClientBuildNumber;
    private uint clientBuildNumber_;
    public bool HasClientBuildNumber {
      get { return hasClientBuildNumber; }
    }
    public uint ClientBuildNumber {
      get { return clientBuildNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClientBuildNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _triggerNewClientAvailableFieldNames;
      if (hasClientBuildNumber) {
        output.WriteUInt32(1, field_names[0], ClientBuildNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasClientBuildNumber) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ClientBuildNumber);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TriggerNewClientAvailable ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TriggerNewClientAvailable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TriggerNewClientAvailable ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TriggerNewClientAvailable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TriggerNewClientAvailable ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TriggerNewClientAvailable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TriggerNewClientAvailable ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TriggerNewClientAvailable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TriggerNewClientAvailable ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TriggerNewClientAvailable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TriggerNewClientAvailable MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TriggerNewClientAvailable prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TriggerNewClientAvailable, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TriggerNewClientAvailable cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TriggerNewClientAvailable result;
      
      private TriggerNewClientAvailable PrepareBuilder() {
        if (resultIsReadOnly) {
          TriggerNewClientAvailable original = result;
          result = new TriggerNewClientAvailable();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TriggerNewClientAvailable MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.TriggerNewClientAvailable.Descriptor; }
      }
      
      public override TriggerNewClientAvailable DefaultInstanceForType {
        get { return global::D3.GameMessage.TriggerNewClientAvailable.DefaultInstance; }
      }
      
      public override TriggerNewClientAvailable BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TriggerNewClientAvailable) {
          return MergeFrom((TriggerNewClientAvailable) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TriggerNewClientAvailable other) {
        if (other == global::D3.GameMessage.TriggerNewClientAvailable.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClientBuildNumber) {
          ClientBuildNumber = other.ClientBuildNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_triggerNewClientAvailableFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _triggerNewClientAvailableFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasClientBuildNumber = input.ReadUInt32(ref result.clientBuildNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClientBuildNumber {
        get { return result.hasClientBuildNumber; }
      }
      public uint ClientBuildNumber {
        get { return result.ClientBuildNumber; }
        set { SetClientBuildNumber(value); }
      }
      public Builder SetClientBuildNumber(uint value) {
        PrepareBuilder();
        result.hasClientBuildNumber = true;
        result.clientBuildNumber_ = value;
        return this;
      }
      public Builder ClearClientBuildNumber() {
        PrepareBuilder();
        result.hasClientBuildNumber = false;
        result.clientBuildNumber_ = 0;
        return this;
      }
    }
    static TriggerNewClientAvailable() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class UnlockedDyesRequest : pb::GeneratedMessage<UnlockedDyesRequest, UnlockedDyesRequest.Builder> {
    private UnlockedDyesRequest() { }
    private static readonly UnlockedDyesRequest defaultInstance = new UnlockedDyesRequest().MakeReadOnly();
    private static readonly string[] _unlockedDyesRequestFieldNames = new string[] {  };
    private static readonly uint[] _unlockedDyesRequestFieldTags = new uint[] {  };
    public static UnlockedDyesRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UnlockedDyesRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UnlockedDyesRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_UnlockedDyesRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UnlockedDyesRequest, UnlockedDyesRequest.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_UnlockedDyesRequest__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _unlockedDyesRequestFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UnlockedDyesRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UnlockedDyesRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UnlockedDyesRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UnlockedDyesRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UnlockedDyesRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UnlockedDyesRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UnlockedDyesRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UnlockedDyesRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UnlockedDyesRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UnlockedDyesRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UnlockedDyesRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UnlockedDyesRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<UnlockedDyesRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UnlockedDyesRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UnlockedDyesRequest result;
      
      private UnlockedDyesRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          UnlockedDyesRequest original = result;
          result = new UnlockedDyesRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UnlockedDyesRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.UnlockedDyesRequest.Descriptor; }
      }
      
      public override UnlockedDyesRequest DefaultInstanceForType {
        get { return global::D3.GameMessage.UnlockedDyesRequest.DefaultInstance; }
      }
      
      public override UnlockedDyesRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UnlockedDyesRequest) {
          return MergeFrom((UnlockedDyesRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UnlockedDyesRequest other) {
        if (other == global::D3.GameMessage.UnlockedDyesRequest.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_unlockedDyesRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _unlockedDyesRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static UnlockedDyesRequest() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class UnlockedDyesData : pb::GeneratedMessage<UnlockedDyesData, UnlockedDyesData.Builder> {
    private UnlockedDyesData() { }
    private static readonly UnlockedDyesData defaultInstance = new UnlockedDyesData().MakeReadOnly();
    private static readonly string[] _unlockedDyesDataFieldNames = new string[] { "dye_gbids" };
    private static readonly uint[] _unlockedDyesDataFieldTags = new uint[] { 13 };
    public static UnlockedDyesData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UnlockedDyesData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UnlockedDyesData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_UnlockedDyesData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UnlockedDyesData, UnlockedDyesData.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_UnlockedDyesData__FieldAccessorTable; }
    }
    
    public const int DyeGbidsFieldNumber = 1;
    private pbc::PopsicleList<int> dyeGbids_ = new pbc::PopsicleList<int>();
    public scg::IList<int> DyeGbidsList {
      get { return pbc::Lists.AsReadOnly(dyeGbids_); }
    }
    public int DyeGbidsCount {
      get { return dyeGbids_.Count; }
    }
    public int GetDyeGbids(int index) {
      return dyeGbids_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _unlockedDyesDataFieldNames;
      if (dyeGbids_.Count > 0) {
        output.WriteSFixed32Array(1, field_names[0], dyeGbids_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          dataSize = 4 * dyeGbids_.Count;
          size += dataSize;
          size += 1 * dyeGbids_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UnlockedDyesData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UnlockedDyesData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UnlockedDyesData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UnlockedDyesData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UnlockedDyesData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UnlockedDyesData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UnlockedDyesData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UnlockedDyesData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UnlockedDyesData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UnlockedDyesData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UnlockedDyesData MakeReadOnly() {
      dyeGbids_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UnlockedDyesData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<UnlockedDyesData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UnlockedDyesData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UnlockedDyesData result;
      
      private UnlockedDyesData PrepareBuilder() {
        if (resultIsReadOnly) {
          UnlockedDyesData original = result;
          result = new UnlockedDyesData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UnlockedDyesData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.UnlockedDyesData.Descriptor; }
      }
      
      public override UnlockedDyesData DefaultInstanceForType {
        get { return global::D3.GameMessage.UnlockedDyesData.DefaultInstance; }
      }
      
      public override UnlockedDyesData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UnlockedDyesData) {
          return MergeFrom((UnlockedDyesData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UnlockedDyesData other) {
        if (other == global::D3.GameMessage.UnlockedDyesData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.dyeGbids_.Count != 0) {
          result.dyeGbids_.Add(other.dyeGbids_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_unlockedDyesDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _unlockedDyesDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 13: {
              input.ReadSFixed32Array(tag, field_name, result.dyeGbids_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<int> DyeGbidsList {
        get { return PrepareBuilder().dyeGbids_; }
      }
      public int DyeGbidsCount {
        get { return result.DyeGbidsCount; }
      }
      public int GetDyeGbids(int index) {
        return result.GetDyeGbids(index);
      }
      public Builder SetDyeGbids(int index, int value) {
        PrepareBuilder();
        result.dyeGbids_[index] = value;
        return this;
      }
      public Builder AddDyeGbids(int value) {
        PrepareBuilder();
        result.dyeGbids_.Add(value);
        return this;
      }
      public Builder AddRangeDyeGbids(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.dyeGbids_.Add(values);
        return this;
      }
      public Builder ClearDyeGbids() {
        PrepareBuilder();
        result.dyeGbids_.Clear();
        return this;
      }
    }
    static UnlockedDyesData() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChallengeRiftFetchHeroData : pb::GeneratedMessage<ChallengeRiftFetchHeroData, ChallengeRiftFetchHeroData.Builder> {
    private ChallengeRiftFetchHeroData() { }
    private static readonly ChallengeRiftFetchHeroData defaultInstance = new ChallengeRiftFetchHeroData().MakeReadOnly();
    private static readonly string[] _challengeRiftFetchHeroDataFieldNames = new string[] { "challenge_number" };
    private static readonly uint[] _challengeRiftFetchHeroDataFieldTags = new uint[] { 8 };
    public static ChallengeRiftFetchHeroData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChallengeRiftFetchHeroData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChallengeRiftFetchHeroData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ChallengeRiftFetchHeroData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChallengeRiftFetchHeroData, ChallengeRiftFetchHeroData.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ChallengeRiftFetchHeroData__FieldAccessorTable; }
    }
    
    public const int ChallengeNumberFieldNumber = 1;
    private bool hasChallengeNumber;
    private uint challengeNumber_;
    public bool HasChallengeNumber {
      get { return hasChallengeNumber; }
    }
    public uint ChallengeNumber {
      get { return challengeNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChallengeNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _challengeRiftFetchHeroDataFieldNames;
      if (hasChallengeNumber) {
        output.WriteUInt32(1, field_names[0], ChallengeNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasChallengeNumber) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ChallengeNumber);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChallengeRiftFetchHeroData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeRiftFetchHeroData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeRiftFetchHeroData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeRiftFetchHeroData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeRiftFetchHeroData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeRiftFetchHeroData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChallengeRiftFetchHeroData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChallengeRiftFetchHeroData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChallengeRiftFetchHeroData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeRiftFetchHeroData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChallengeRiftFetchHeroData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChallengeRiftFetchHeroData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChallengeRiftFetchHeroData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChallengeRiftFetchHeroData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChallengeRiftFetchHeroData result;
      
      private ChallengeRiftFetchHeroData PrepareBuilder() {
        if (resultIsReadOnly) {
          ChallengeRiftFetchHeroData original = result;
          result = new ChallengeRiftFetchHeroData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChallengeRiftFetchHeroData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ChallengeRiftFetchHeroData.Descriptor; }
      }
      
      public override ChallengeRiftFetchHeroData DefaultInstanceForType {
        get { return global::D3.GameMessage.ChallengeRiftFetchHeroData.DefaultInstance; }
      }
      
      public override ChallengeRiftFetchHeroData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChallengeRiftFetchHeroData) {
          return MergeFrom((ChallengeRiftFetchHeroData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChallengeRiftFetchHeroData other) {
        if (other == global::D3.GameMessage.ChallengeRiftFetchHeroData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChallengeNumber) {
          ChallengeNumber = other.ChallengeNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_challengeRiftFetchHeroDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _challengeRiftFetchHeroDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasChallengeNumber = input.ReadUInt32(ref result.challengeNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChallengeNumber {
        get { return result.hasChallengeNumber; }
      }
      public uint ChallengeNumber {
        get { return result.ChallengeNumber; }
        set { SetChallengeNumber(value); }
      }
      public Builder SetChallengeNumber(uint value) {
        PrepareBuilder();
        result.hasChallengeNumber = true;
        result.challengeNumber_ = value;
        return this;
      }
      public Builder ClearChallengeNumber() {
        PrepareBuilder();
        result.hasChallengeNumber = false;
        result.challengeNumber_ = 0;
        return this;
      }
    }
    static ChallengeRiftFetchHeroData() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChallengeRiftFetchHeroDataResponse : pb::GeneratedMessage<ChallengeRiftFetchHeroDataResponse, ChallengeRiftFetchHeroDataResponse.Builder> {
    private ChallengeRiftFetchHeroDataResponse() { }
    private static readonly ChallengeRiftFetchHeroDataResponse defaultInstance = new ChallengeRiftFetchHeroDataResponse().MakeReadOnly();
    private static readonly string[] _challengeRiftFetchHeroDataResponseFieldNames = new string[] { "alt_level", "battle_tag", "challenge_end_time_unix_seconds", "hero_digest", "hero_profile", "reward_gbid", "target_millisecond" };
    private static readonly uint[] _challengeRiftFetchHeroDataResponseFieldTags = new uint[] { 8, 50, 56, 18, 26, 37, 40 };
    public static ChallengeRiftFetchHeroDataResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChallengeRiftFetchHeroDataResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChallengeRiftFetchHeroDataResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ChallengeRiftFetchHeroDataResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChallengeRiftFetchHeroDataResponse, ChallengeRiftFetchHeroDataResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ChallengeRiftFetchHeroDataResponse__FieldAccessorTable; }
    }
    
    public const int AltLevelFieldNumber = 1;
    private bool hasAltLevel;
    private uint altLevel_;
    public bool HasAltLevel {
      get { return hasAltLevel; }
    }
    public uint AltLevel {
      get { return altLevel_; }
    }
    
    public const int HeroDigestFieldNumber = 2;
    private bool hasHeroDigest;
    private global::D3.Hero.Digest heroDigest_;
    public bool HasHeroDigest {
      get { return hasHeroDigest; }
    }
    public global::D3.Hero.Digest HeroDigest {
      get { return heroDigest_ ?? global::D3.Hero.Digest.DefaultInstance; }
    }
    
    public const int HeroProfileFieldNumber = 3;
    private bool hasHeroProfile;
    private global::D3.Profile.HeroProfile heroProfile_;
    public bool HasHeroProfile {
      get { return hasHeroProfile; }
    }
    public global::D3.Profile.HeroProfile HeroProfile {
      get { return heroProfile_ ?? global::D3.Profile.HeroProfile.DefaultInstance; }
    }
    
    public const int RewardGbidFieldNumber = 4;
    private bool hasRewardGbid;
    private int rewardGbid_;
    public bool HasRewardGbid {
      get { return hasRewardGbid; }
    }
    public int RewardGbid {
      get { return rewardGbid_; }
    }
    
    public const int TargetMillisecondFieldNumber = 5;
    private bool hasTargetMillisecond;
    private uint targetMillisecond_;
    public bool HasTargetMillisecond {
      get { return hasTargetMillisecond; }
    }
    public uint TargetMillisecond {
      get { return targetMillisecond_; }
    }
    
    public const int BattleTagFieldNumber = 6;
    private bool hasBattleTag;
    private string battleTag_ = "";
    public bool HasBattleTag {
      get { return hasBattleTag; }
    }
    public string BattleTag {
      get { return battleTag_; }
    }
    
    public const int ChallengeEndTimeUnixSecondsFieldNumber = 7;
    private bool hasChallengeEndTimeUnixSeconds;
    private ulong challengeEndTimeUnixSeconds_;
    public bool HasChallengeEndTimeUnixSeconds {
      get { return hasChallengeEndTimeUnixSeconds; }
    }
    public ulong ChallengeEndTimeUnixSeconds {
      get { return challengeEndTimeUnixSeconds_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAltLevel) return false;
        if (!hasHeroDigest) return false;
        if (!hasHeroProfile) return false;
        if (!hasTargetMillisecond) return false;
        if (!HeroDigest.IsInitialized) return false;
        if (!HeroProfile.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _challengeRiftFetchHeroDataResponseFieldNames;
      if (hasAltLevel) {
        output.WriteUInt32(1, field_names[0], AltLevel);
      }
      if (hasHeroDigest) {
        output.WriteMessage(2, field_names[3], HeroDigest);
      }
      if (hasHeroProfile) {
        output.WriteMessage(3, field_names[4], HeroProfile);
      }
      if (hasRewardGbid) {
        output.WriteSFixed32(4, field_names[5], RewardGbid);
      }
      if (hasTargetMillisecond) {
        output.WriteUInt32(5, field_names[6], TargetMillisecond);
      }
      if (hasBattleTag) {
        output.WriteString(6, field_names[1], BattleTag);
      }
      if (hasChallengeEndTimeUnixSeconds) {
        output.WriteUInt64(7, field_names[2], ChallengeEndTimeUnixSeconds);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAltLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, AltLevel);
        }
        if (hasHeroDigest) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, HeroDigest);
        }
        if (hasHeroProfile) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, HeroProfile);
        }
        if (hasRewardGbid) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(4, RewardGbid);
        }
        if (hasTargetMillisecond) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, TargetMillisecond);
        }
        if (hasBattleTag) {
          size += pb::CodedOutputStream.ComputeStringSize(6, BattleTag);
        }
        if (hasChallengeEndTimeUnixSeconds) {
          size += pb::CodedOutputStream.ComputeUInt64Size(7, ChallengeEndTimeUnixSeconds);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChallengeRiftFetchHeroDataResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeRiftFetchHeroDataResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeRiftFetchHeroDataResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeRiftFetchHeroDataResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeRiftFetchHeroDataResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeRiftFetchHeroDataResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChallengeRiftFetchHeroDataResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChallengeRiftFetchHeroDataResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChallengeRiftFetchHeroDataResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeRiftFetchHeroDataResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChallengeRiftFetchHeroDataResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChallengeRiftFetchHeroDataResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChallengeRiftFetchHeroDataResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChallengeRiftFetchHeroDataResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChallengeRiftFetchHeroDataResponse result;
      
      private ChallengeRiftFetchHeroDataResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ChallengeRiftFetchHeroDataResponse original = result;
          result = new ChallengeRiftFetchHeroDataResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChallengeRiftFetchHeroDataResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ChallengeRiftFetchHeroDataResponse.Descriptor; }
      }
      
      public override ChallengeRiftFetchHeroDataResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.ChallengeRiftFetchHeroDataResponse.DefaultInstance; }
      }
      
      public override ChallengeRiftFetchHeroDataResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChallengeRiftFetchHeroDataResponse) {
          return MergeFrom((ChallengeRiftFetchHeroDataResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChallengeRiftFetchHeroDataResponse other) {
        if (other == global::D3.GameMessage.ChallengeRiftFetchHeroDataResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAltLevel) {
          AltLevel = other.AltLevel;
        }
        if (other.HasHeroDigest) {
          MergeHeroDigest(other.HeroDigest);
        }
        if (other.HasHeroProfile) {
          MergeHeroProfile(other.HeroProfile);
        }
        if (other.HasRewardGbid) {
          RewardGbid = other.RewardGbid;
        }
        if (other.HasTargetMillisecond) {
          TargetMillisecond = other.TargetMillisecond;
        }
        if (other.HasBattleTag) {
          BattleTag = other.BattleTag;
        }
        if (other.HasChallengeEndTimeUnixSeconds) {
          ChallengeEndTimeUnixSeconds = other.ChallengeEndTimeUnixSeconds;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_challengeRiftFetchHeroDataResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _challengeRiftFetchHeroDataResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAltLevel = input.ReadUInt32(ref result.altLevel_);
              break;
            }
            case 18: {
              global::D3.Hero.Digest.Builder subBuilder = global::D3.Hero.Digest.CreateBuilder();
              if (result.hasHeroDigest) {
                subBuilder.MergeFrom(HeroDigest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroDigest = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.Profile.HeroProfile.Builder subBuilder = global::D3.Profile.HeroProfile.CreateBuilder();
              if (result.hasHeroProfile) {
                subBuilder.MergeFrom(HeroProfile);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroProfile = subBuilder.BuildPartial();
              break;
            }
            case 37: {
              result.hasRewardGbid = input.ReadSFixed32(ref result.rewardGbid_);
              break;
            }
            case 40: {
              result.hasTargetMillisecond = input.ReadUInt32(ref result.targetMillisecond_);
              break;
            }
            case 50: {
              result.hasBattleTag = input.ReadString(ref result.battleTag_);
              break;
            }
            case 56: {
              result.hasChallengeEndTimeUnixSeconds = input.ReadUInt64(ref result.challengeEndTimeUnixSeconds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAltLevel {
        get { return result.hasAltLevel; }
      }
      public uint AltLevel {
        get { return result.AltLevel; }
        set { SetAltLevel(value); }
      }
      public Builder SetAltLevel(uint value) {
        PrepareBuilder();
        result.hasAltLevel = true;
        result.altLevel_ = value;
        return this;
      }
      public Builder ClearAltLevel() {
        PrepareBuilder();
        result.hasAltLevel = false;
        result.altLevel_ = 0;
        return this;
      }
      
      public bool HasHeroDigest {
       get { return result.hasHeroDigest; }
      }
      public global::D3.Hero.Digest HeroDigest {
        get { return result.HeroDigest; }
        set { SetHeroDigest(value); }
      }
      public Builder SetHeroDigest(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroDigest = true;
        result.heroDigest_ = value;
        return this;
      }
      public Builder SetHeroDigest(global::D3.Hero.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroDigest = true;
        result.heroDigest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroDigest(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroDigest &&
            result.heroDigest_ != global::D3.Hero.Digest.DefaultInstance) {
            result.heroDigest_ = global::D3.Hero.Digest.CreateBuilder(result.heroDigest_).MergeFrom(value).BuildPartial();
        } else {
          result.heroDigest_ = value;
        }
        result.hasHeroDigest = true;
        return this;
      }
      public Builder ClearHeroDigest() {
        PrepareBuilder();
        result.hasHeroDigest = false;
        result.heroDigest_ = null;
        return this;
      }
      
      public bool HasHeroProfile {
       get { return result.hasHeroProfile; }
      }
      public global::D3.Profile.HeroProfile HeroProfile {
        get { return result.HeroProfile; }
        set { SetHeroProfile(value); }
      }
      public Builder SetHeroProfile(global::D3.Profile.HeroProfile value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroProfile = true;
        result.heroProfile_ = value;
        return this;
      }
      public Builder SetHeroProfile(global::D3.Profile.HeroProfile.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroProfile = true;
        result.heroProfile_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroProfile(global::D3.Profile.HeroProfile value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroProfile &&
            result.heroProfile_ != global::D3.Profile.HeroProfile.DefaultInstance) {
            result.heroProfile_ = global::D3.Profile.HeroProfile.CreateBuilder(result.heroProfile_).MergeFrom(value).BuildPartial();
        } else {
          result.heroProfile_ = value;
        }
        result.hasHeroProfile = true;
        return this;
      }
      public Builder ClearHeroProfile() {
        PrepareBuilder();
        result.hasHeroProfile = false;
        result.heroProfile_ = null;
        return this;
      }
      
      public bool HasRewardGbid {
        get { return result.hasRewardGbid; }
      }
      public int RewardGbid {
        get { return result.RewardGbid; }
        set { SetRewardGbid(value); }
      }
      public Builder SetRewardGbid(int value) {
        PrepareBuilder();
        result.hasRewardGbid = true;
        result.rewardGbid_ = value;
        return this;
      }
      public Builder ClearRewardGbid() {
        PrepareBuilder();
        result.hasRewardGbid = false;
        result.rewardGbid_ = 0;
        return this;
      }
      
      public bool HasTargetMillisecond {
        get { return result.hasTargetMillisecond; }
      }
      public uint TargetMillisecond {
        get { return result.TargetMillisecond; }
        set { SetTargetMillisecond(value); }
      }
      public Builder SetTargetMillisecond(uint value) {
        PrepareBuilder();
        result.hasTargetMillisecond = true;
        result.targetMillisecond_ = value;
        return this;
      }
      public Builder ClearTargetMillisecond() {
        PrepareBuilder();
        result.hasTargetMillisecond = false;
        result.targetMillisecond_ = 0;
        return this;
      }
      
      public bool HasBattleTag {
        get { return result.hasBattleTag; }
      }
      public string BattleTag {
        get { return result.BattleTag; }
        set { SetBattleTag(value); }
      }
      public Builder SetBattleTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBattleTag = true;
        result.battleTag_ = value;
        return this;
      }
      public Builder ClearBattleTag() {
        PrepareBuilder();
        result.hasBattleTag = false;
        result.battleTag_ = "";
        return this;
      }
      
      public bool HasChallengeEndTimeUnixSeconds {
        get { return result.hasChallengeEndTimeUnixSeconds; }
      }
      public ulong ChallengeEndTimeUnixSeconds {
        get { return result.ChallengeEndTimeUnixSeconds; }
        set { SetChallengeEndTimeUnixSeconds(value); }
      }
      public Builder SetChallengeEndTimeUnixSeconds(ulong value) {
        PrepareBuilder();
        result.hasChallengeEndTimeUnixSeconds = true;
        result.challengeEndTimeUnixSeconds_ = value;
        return this;
      }
      public Builder ClearChallengeEndTimeUnixSeconds() {
        PrepareBuilder();
        result.hasChallengeEndTimeUnixSeconds = false;
        result.challengeEndTimeUnixSeconds_ = 0UL;
        return this;
      }
    }
    static ChallengeRiftFetchHeroDataResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChallengeRiftClearRewardRecord : pb::GeneratedMessage<ChallengeRiftClearRewardRecord, ChallengeRiftClearRewardRecord.Builder> {
    private ChallengeRiftClearRewardRecord() { }
    private static readonly ChallengeRiftClearRewardRecord defaultInstance = new ChallengeRiftClearRewardRecord().MakeReadOnly();
    private static readonly string[] _challengeRiftClearRewardRecordFieldNames = new string[] { "last_challenge_reward_earned" };
    private static readonly uint[] _challengeRiftClearRewardRecordFieldTags = new uint[] { 8 };
    public static ChallengeRiftClearRewardRecord DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChallengeRiftClearRewardRecord DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChallengeRiftClearRewardRecord ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ChallengeRiftClearRewardRecord__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChallengeRiftClearRewardRecord, ChallengeRiftClearRewardRecord.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ChallengeRiftClearRewardRecord__FieldAccessorTable; }
    }
    
    public const int LastChallengeRewardEarnedFieldNumber = 1;
    private bool hasLastChallengeRewardEarned;
    private uint lastChallengeRewardEarned_;
    public bool HasLastChallengeRewardEarned {
      get { return hasLastChallengeRewardEarned; }
    }
    public uint LastChallengeRewardEarned {
      get { return lastChallengeRewardEarned_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLastChallengeRewardEarned) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _challengeRiftClearRewardRecordFieldNames;
      if (hasLastChallengeRewardEarned) {
        output.WriteUInt32(1, field_names[0], LastChallengeRewardEarned);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLastChallengeRewardEarned) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, LastChallengeRewardEarned);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChallengeRiftClearRewardRecord ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeRiftClearRewardRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeRiftClearRewardRecord ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeRiftClearRewardRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeRiftClearRewardRecord ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeRiftClearRewardRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChallengeRiftClearRewardRecord ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChallengeRiftClearRewardRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChallengeRiftClearRewardRecord ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeRiftClearRewardRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChallengeRiftClearRewardRecord MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChallengeRiftClearRewardRecord prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChallengeRiftClearRewardRecord, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChallengeRiftClearRewardRecord cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChallengeRiftClearRewardRecord result;
      
      private ChallengeRiftClearRewardRecord PrepareBuilder() {
        if (resultIsReadOnly) {
          ChallengeRiftClearRewardRecord original = result;
          result = new ChallengeRiftClearRewardRecord();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChallengeRiftClearRewardRecord MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ChallengeRiftClearRewardRecord.Descriptor; }
      }
      
      public override ChallengeRiftClearRewardRecord DefaultInstanceForType {
        get { return global::D3.GameMessage.ChallengeRiftClearRewardRecord.DefaultInstance; }
      }
      
      public override ChallengeRiftClearRewardRecord BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChallengeRiftClearRewardRecord) {
          return MergeFrom((ChallengeRiftClearRewardRecord) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChallengeRiftClearRewardRecord other) {
        if (other == global::D3.GameMessage.ChallengeRiftClearRewardRecord.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLastChallengeRewardEarned) {
          LastChallengeRewardEarned = other.LastChallengeRewardEarned;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_challengeRiftClearRewardRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _challengeRiftClearRewardRecordFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLastChallengeRewardEarned = input.ReadUInt32(ref result.lastChallengeRewardEarned_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLastChallengeRewardEarned {
        get { return result.hasLastChallengeRewardEarned; }
      }
      public uint LastChallengeRewardEarned {
        get { return result.LastChallengeRewardEarned; }
        set { SetLastChallengeRewardEarned(value); }
      }
      public Builder SetLastChallengeRewardEarned(uint value) {
        PrepareBuilder();
        result.hasLastChallengeRewardEarned = true;
        result.lastChallengeRewardEarned_ = value;
        return this;
      }
      public Builder ClearLastChallengeRewardEarned() {
        PrepareBuilder();
        result.hasLastChallengeRewardEarned = false;
        result.lastChallengeRewardEarned_ = 0;
        return this;
      }
    }
    static ChallengeRiftClearRewardRecord() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServiceInitRequest : pb::GeneratedMessage<ServiceInitRequest, ServiceInitRequest.Builder> {
    private ServiceInitRequest() { }
    private static readonly ServiceInitRequest defaultInstance = new ServiceInitRequest().MakeReadOnly();
    private static readonly string[] _serviceInitRequestFieldNames = new string[] { "platform" };
    private static readonly uint[] _serviceInitRequestFieldTags = new uint[] { 8 };
    public static ServiceInitRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServiceInitRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServiceInitRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServiceInitRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServiceInitRequest, ServiceInitRequest.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServiceInitRequest__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Platform {
        PLATFORM_WIN = 0,
        PLATFORM_WIN64 = 1,
        PLATFORM_MAC = 2,
      }
      
    }
    #endregion
    
    public const int PlatformFieldNumber = 1;
    private bool hasPlatform;
    private global::D3.GameMessage.ServiceInitRequest.Types.Platform platform_ = global::D3.GameMessage.ServiceInitRequest.Types.Platform.PLATFORM_WIN;
    public bool HasPlatform {
      get { return hasPlatform; }
    }
    public global::D3.GameMessage.ServiceInitRequest.Types.Platform Platform {
      get { return platform_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlatform) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serviceInitRequestFieldNames;
      if (hasPlatform) {
        output.WriteEnum(1, field_names[0], (int) Platform, Platform);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlatform) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Platform);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServiceInitRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServiceInitRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServiceInitRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServiceInitRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServiceInitRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServiceInitRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServiceInitRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServiceInitRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServiceInitRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServiceInitRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServiceInitRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServiceInitRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServiceInitRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServiceInitRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServiceInitRequest result;
      
      private ServiceInitRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ServiceInitRequest original = result;
          result = new ServiceInitRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServiceInitRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServiceInitRequest.Descriptor; }
      }
      
      public override ServiceInitRequest DefaultInstanceForType {
        get { return global::D3.GameMessage.ServiceInitRequest.DefaultInstance; }
      }
      
      public override ServiceInitRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServiceInitRequest) {
          return MergeFrom((ServiceInitRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServiceInitRequest other) {
        if (other == global::D3.GameMessage.ServiceInitRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlatform) {
          Platform = other.Platform;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceInitRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceInitRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.platform_, out unknown)) {
                result.hasPlatform = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlatform {
       get { return result.hasPlatform; }
      }
      public global::D3.GameMessage.ServiceInitRequest.Types.Platform Platform {
        get { return result.Platform; }
        set { SetPlatform(value); }
      }
      public Builder SetPlatform(global::D3.GameMessage.ServiceInitRequest.Types.Platform value) {
        PrepareBuilder();
        result.hasPlatform = true;
        result.platform_ = value;
        return this;
      }
      public Builder ClearPlatform() {
        PrepareBuilder();
        result.hasPlatform = false;
        result.platform_ = global::D3.GameMessage.ServiceInitRequest.Types.Platform.PLATFORM_WIN;
        return this;
      }
    }
    static ServiceInitRequest() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServiceInitResponse : pb::GeneratedMessage<ServiceInitResponse, ServiceInitResponse.Builder> {
    private ServiceInitResponse() { }
    private static readonly ServiceInitResponse defaultInstance = new ServiceInitResponse().MakeReadOnly();
    private static readonly string[] _serviceInitResponseFieldNames = new string[] { "service_id" };
    private static readonly uint[] _serviceInitResponseFieldTags = new uint[] { 8 };
    public static ServiceInitResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServiceInitResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServiceInitResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServiceInitResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServiceInitResponse, ServiceInitResponse.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServiceInitResponse__FieldAccessorTable; }
    }
    
    public const int ServiceIdFieldNumber = 1;
    private bool hasServiceId;
    private uint serviceId_;
    public bool HasServiceId {
      get { return hasServiceId; }
    }
    public uint ServiceId {
      get { return serviceId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasServiceId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serviceInitResponseFieldNames;
      if (hasServiceId) {
        output.WriteUInt32(1, field_names[0], ServiceId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasServiceId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ServiceId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServiceInitResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServiceInitResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServiceInitResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServiceInitResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServiceInitResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServiceInitResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServiceInitResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServiceInitResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServiceInitResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServiceInitResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServiceInitResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServiceInitResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServiceInitResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServiceInitResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServiceInitResponse result;
      
      private ServiceInitResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ServiceInitResponse original = result;
          result = new ServiceInitResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServiceInitResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServiceInitResponse.Descriptor; }
      }
      
      public override ServiceInitResponse DefaultInstanceForType {
        get { return global::D3.GameMessage.ServiceInitResponse.DefaultInstance; }
      }
      
      public override ServiceInitResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServiceInitResponse) {
          return MergeFrom((ServiceInitResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServiceInitResponse other) {
        if (other == global::D3.GameMessage.ServiceInitResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServiceId) {
          ServiceId = other.ServiceId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceInitResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceInitResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasServiceId = input.ReadUInt32(ref result.serviceId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServiceId {
        get { return result.hasServiceId; }
      }
      public uint ServiceId {
        get { return result.ServiceId; }
        set { SetServiceId(value); }
      }
      public Builder SetServiceId(uint value) {
        PrepareBuilder();
        result.hasServiceId = true;
        result.serviceId_ = value;
        return this;
      }
      public Builder ClearServiceId() {
        PrepareBuilder();
        result.hasServiceId = false;
        result.serviceId_ = 0;
        return this;
      }
    }
    static ServiceInitResponse() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ServiceSendDataRequest : pb::GeneratedMessage<ServiceSendDataRequest, ServiceSendDataRequest.Builder> {
    private ServiceSendDataRequest() { }
    private static readonly ServiceSendDataRequest defaultInstance = new ServiceSendDataRequest().MakeReadOnly();
    private static readonly string[] _serviceSendDataRequestFieldNames = new string[] { "data" };
    private static readonly uint[] _serviceSendDataRequestFieldTags = new uint[] { 10 };
    public static ServiceSendDataRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServiceSendDataRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServiceSendDataRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServiceSendDataRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServiceSendDataRequest, ServiceSendDataRequest.Builder> InternalFieldAccessors {
      get { return global::D3.GameMessage.GameMessage.internal__static_D3_GameMessage_ServiceSendDataRequest__FieldAccessorTable; }
    }
    
    public const int DataFieldNumber = 1;
    private pbc::PopsicleList<pb::ByteString> data_ = new pbc::PopsicleList<pb::ByteString>();
    public scg::IList<pb::ByteString> DataList {
      get { return pbc::Lists.AsReadOnly(data_); }
    }
    public int DataCount {
      get { return data_.Count; }
    }
    public pb::ByteString GetData(int index) {
      return data_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serviceSendDataRequestFieldNames;
      if (data_.Count > 0) {
        output.WriteBytesArray(1, field_names[0], data_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (pb::ByteString element in DataList) {
            dataSize += pb::CodedOutputStream.ComputeBytesSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * data_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServiceSendDataRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServiceSendDataRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServiceSendDataRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServiceSendDataRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServiceSendDataRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServiceSendDataRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServiceSendDataRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServiceSendDataRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServiceSendDataRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServiceSendDataRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServiceSendDataRequest MakeReadOnly() {
      data_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServiceSendDataRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ServiceSendDataRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServiceSendDataRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServiceSendDataRequest result;
      
      private ServiceSendDataRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ServiceSendDataRequest original = result;
          result = new ServiceSendDataRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServiceSendDataRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.GameMessage.ServiceSendDataRequest.Descriptor; }
      }
      
      public override ServiceSendDataRequest DefaultInstanceForType {
        get { return global::D3.GameMessage.ServiceSendDataRequest.DefaultInstance; }
      }
      
      public override ServiceSendDataRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServiceSendDataRequest) {
          return MergeFrom((ServiceSendDataRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServiceSendDataRequest other) {
        if (other == global::D3.GameMessage.ServiceSendDataRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.data_.Count != 0) {
          result.data_.Add(other.data_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceSendDataRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceSendDataRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadBytesArray(tag, field_name, result.data_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<pb::ByteString> DataList {
        get { return PrepareBuilder().data_; }
      }
      public int DataCount {
        get { return result.DataCount; }
      }
      public pb::ByteString GetData(int index) {
        return result.GetData(index);
      }
      public Builder SetData(int index, pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_[index] = value;
        return this;
      }
      public Builder AddData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_.Add(value);
        return this;
      }
      public Builder AddRangeData(scg::IEnumerable<pb::ByteString> values) {
        PrepareBuilder();
        result.data_.Add(values);
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.data_.Clear();
        return this;
      }
    }
    static ServiceSendDataRequest() {
      object.ReferenceEquals(global::D3.GameMessage.GameMessage.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
