// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Hireling {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Hireling {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Hireling_Info__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hireling.Info, global::D3.Hireling.Info.Builder> internal__static_D3_Hireling_Info__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hireling_SavedData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hireling.SavedData, global::D3.Hireling.SavedData.Builder> internal__static_D3_Hireling_SavedData__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Hireling() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg5IaXJlbGluZy5wcm90bxILRDMuSGlyZWxpbmciiwIKBEluZm8SKAoOaGly" + 
          "ZWxpbmdfY2xhc3MYASACKBE6ATBSDWhpcmVsaW5nQ2xhc3MSHwoJZ2JpZF9u" + 
          "YW1lGAIgAigPOgItMVIIZ2JpZE5hbWUSKQoQbGV2ZWxfZGVwcmVjYXRlZBgD" + 
          "IAEoEVIPbGV2ZWxEZXByZWNhdGVkEk8KJGF0dHJpYnV0ZV9leHBlcmllbmNl" + 
          "X25leHRfZGVwcmVjYXRlZBgEIAEoDVIhYXR0cmlidXRlRXhwZXJpZW5jZU5l" + 
          "eHREZXByZWNhdGVkEigKEHBvd2VyX2tleV9wYXJhbXMYBSADKBFSDnBvd2Vy" + 
          "S2V5UGFyYW1zEhIKBGRlYWQYBiACKAhSBGRlYWQirQEKCVNhdmVkRGF0YRIv" + 
          "CgloaXJlbGluZ3MYASADKAsyES5EMy5IaXJlbGluZy5JbmZvUgloaXJlbGlu" + 
          "Z3MSKgoPYWN0aXZlX2hpcmVsaW5nGAIgAigNOgEwUg5hY3RpdmVIaXJlbGlu" + 
          "ZxJDChxhdmFpbGFibGVfaGlyZWxpbmdzX2JpdGZpZWxkGAMgAigNOgEwUhph" + 
          "dmFpbGFibGVIaXJlbGluZ3NCaXRmaWVsZA==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Hireling_Info__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Hireling_Info__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hireling.Info, global::D3.Hireling.Info.Builder>(internal__static_D3_Hireling_Info__Descriptor,
                new string[] { "HirelingClass", "GbidName", "LevelDeprecated", "AttributeExperienceNextDeprecated", "PowerKeyParams", "Dead", });
        internal__static_D3_Hireling_SavedData__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Hireling_SavedData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hireling.SavedData, global::D3.Hireling.SavedData.Builder>(internal__static_D3_Hireling_SavedData__Descriptor,
                new string[] { "Hirelings", "ActiveHireling", "AvailableHirelingsBitfield", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Info : pb::GeneratedMessage<Info, Info.Builder> {
    private Info() { }
    private static readonly Info defaultInstance = new Info().MakeReadOnly();
    private static readonly string[] _infoFieldNames = new string[] { "attribute_experience_next_deprecated", "dead", "gbid_name", "hireling_class", "level_deprecated", "power_key_params" };
    private static readonly uint[] _infoFieldTags = new uint[] { 32, 48, 21, 8, 24, 40 };
    public static Info DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Info DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Info ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hireling.Hireling.internal__static_D3_Hireling_Info__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Info, Info.Builder> InternalFieldAccessors {
      get { return global::D3.Hireling.Hireling.internal__static_D3_Hireling_Info__FieldAccessorTable; }
    }
    
    public const int HirelingClassFieldNumber = 1;
    private bool hasHirelingClass;
    private int hirelingClass_;
    public bool HasHirelingClass {
      get { return hasHirelingClass; }
    }
    public int HirelingClass {
      get { return hirelingClass_; }
    }
    
    public const int GbidNameFieldNumber = 2;
    private bool hasGbidName;
    private int gbidName_ = -1;
    public bool HasGbidName {
      get { return hasGbidName; }
    }
    public int GbidName {
      get { return gbidName_; }
    }
    
    public const int LevelDeprecatedFieldNumber = 3;
    private bool hasLevelDeprecated;
    private int levelDeprecated_;
    public bool HasLevelDeprecated {
      get { return hasLevelDeprecated; }
    }
    public int LevelDeprecated {
      get { return levelDeprecated_; }
    }
    
    public const int AttributeExperienceNextDeprecatedFieldNumber = 4;
    private bool hasAttributeExperienceNextDeprecated;
    private uint attributeExperienceNextDeprecated_;
    public bool HasAttributeExperienceNextDeprecated {
      get { return hasAttributeExperienceNextDeprecated; }
    }
    public uint AttributeExperienceNextDeprecated {
      get { return attributeExperienceNextDeprecated_; }
    }
    
    public const int PowerKeyParamsFieldNumber = 5;
    private pbc::PopsicleList<int> powerKeyParams_ = new pbc::PopsicleList<int>();
    public scg::IList<int> PowerKeyParamsList {
      get { return pbc::Lists.AsReadOnly(powerKeyParams_); }
    }
    public int PowerKeyParamsCount {
      get { return powerKeyParams_.Count; }
    }
    public int GetPowerKeyParams(int index) {
      return powerKeyParams_[index];
    }
    
    public const int DeadFieldNumber = 6;
    private bool hasDead;
    private bool dead_;
    public bool HasDead {
      get { return hasDead; }
    }
    public bool Dead {
      get { return dead_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHirelingClass) return false;
        if (!hasGbidName) return false;
        if (!hasDead) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _infoFieldNames;
      if (hasHirelingClass) {
        output.WriteSInt32(1, field_names[3], HirelingClass);
      }
      if (hasGbidName) {
        output.WriteSFixed32(2, field_names[2], GbidName);
      }
      if (hasLevelDeprecated) {
        output.WriteSInt32(3, field_names[4], LevelDeprecated);
      }
      if (hasAttributeExperienceNextDeprecated) {
        output.WriteUInt32(4, field_names[0], AttributeExperienceNextDeprecated);
      }
      if (powerKeyParams_.Count > 0) {
        output.WriteSInt32Array(5, field_names[5], powerKeyParams_);
      }
      if (hasDead) {
        output.WriteBool(6, field_names[1], Dead);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHirelingClass) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, HirelingClass);
        }
        if (hasGbidName) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(2, GbidName);
        }
        if (hasLevelDeprecated) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, LevelDeprecated);
        }
        if (hasAttributeExperienceNextDeprecated) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, AttributeExperienceNextDeprecated);
        }
        {
          int dataSize = 0;
          foreach (int element in PowerKeyParamsList) {
            dataSize += pb::CodedOutputStream.ComputeSInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * powerKeyParams_.Count;
        }
        if (hasDead) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, Dead);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Info ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Info ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Info ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Info ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Info ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Info ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Info ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Info ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Info ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Info ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Info MakeReadOnly() {
      powerKeyParams_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Info prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Info, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Info cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Info result;
      
      private Info PrepareBuilder() {
        if (resultIsReadOnly) {
          Info original = result;
          result = new Info();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Info MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hireling.Info.Descriptor; }
      }
      
      public override Info DefaultInstanceForType {
        get { return global::D3.Hireling.Info.DefaultInstance; }
      }
      
      public override Info BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Info) {
          return MergeFrom((Info) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Info other) {
        if (other == global::D3.Hireling.Info.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHirelingClass) {
          HirelingClass = other.HirelingClass;
        }
        if (other.HasGbidName) {
          GbidName = other.GbidName;
        }
        if (other.HasLevelDeprecated) {
          LevelDeprecated = other.LevelDeprecated;
        }
        if (other.HasAttributeExperienceNextDeprecated) {
          AttributeExperienceNextDeprecated = other.AttributeExperienceNextDeprecated;
        }
        if (other.powerKeyParams_.Count != 0) {
          result.powerKeyParams_.Add(other.powerKeyParams_);
        }
        if (other.HasDead) {
          Dead = other.Dead;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_infoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _infoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHirelingClass = input.ReadSInt32(ref result.hirelingClass_);
              break;
            }
            case 21: {
              result.hasGbidName = input.ReadSFixed32(ref result.gbidName_);
              break;
            }
            case 24: {
              result.hasLevelDeprecated = input.ReadSInt32(ref result.levelDeprecated_);
              break;
            }
            case 32: {
              result.hasAttributeExperienceNextDeprecated = input.ReadUInt32(ref result.attributeExperienceNextDeprecated_);
              break;
            }
            case 42:
            case 40: {
              input.ReadSInt32Array(tag, field_name, result.powerKeyParams_);
              break;
            }
            case 48: {
              result.hasDead = input.ReadBool(ref result.dead_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHirelingClass {
        get { return result.hasHirelingClass; }
      }
      public int HirelingClass {
        get { return result.HirelingClass; }
        set { SetHirelingClass(value); }
      }
      public Builder SetHirelingClass(int value) {
        PrepareBuilder();
        result.hasHirelingClass = true;
        result.hirelingClass_ = value;
        return this;
      }
      public Builder ClearHirelingClass() {
        PrepareBuilder();
        result.hasHirelingClass = false;
        result.hirelingClass_ = 0;
        return this;
      }
      
      public bool HasGbidName {
        get { return result.hasGbidName; }
      }
      public int GbidName {
        get { return result.GbidName; }
        set { SetGbidName(value); }
      }
      public Builder SetGbidName(int value) {
        PrepareBuilder();
        result.hasGbidName = true;
        result.gbidName_ = value;
        return this;
      }
      public Builder ClearGbidName() {
        PrepareBuilder();
        result.hasGbidName = false;
        result.gbidName_ = -1;
        return this;
      }
      
      public bool HasLevelDeprecated {
        get { return result.hasLevelDeprecated; }
      }
      public int LevelDeprecated {
        get { return result.LevelDeprecated; }
        set { SetLevelDeprecated(value); }
      }
      public Builder SetLevelDeprecated(int value) {
        PrepareBuilder();
        result.hasLevelDeprecated = true;
        result.levelDeprecated_ = value;
        return this;
      }
      public Builder ClearLevelDeprecated() {
        PrepareBuilder();
        result.hasLevelDeprecated = false;
        result.levelDeprecated_ = 0;
        return this;
      }
      
      public bool HasAttributeExperienceNextDeprecated {
        get { return result.hasAttributeExperienceNextDeprecated; }
      }
      public uint AttributeExperienceNextDeprecated {
        get { return result.AttributeExperienceNextDeprecated; }
        set { SetAttributeExperienceNextDeprecated(value); }
      }
      public Builder SetAttributeExperienceNextDeprecated(uint value) {
        PrepareBuilder();
        result.hasAttributeExperienceNextDeprecated = true;
        result.attributeExperienceNextDeprecated_ = value;
        return this;
      }
      public Builder ClearAttributeExperienceNextDeprecated() {
        PrepareBuilder();
        result.hasAttributeExperienceNextDeprecated = false;
        result.attributeExperienceNextDeprecated_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> PowerKeyParamsList {
        get { return PrepareBuilder().powerKeyParams_; }
      }
      public int PowerKeyParamsCount {
        get { return result.PowerKeyParamsCount; }
      }
      public int GetPowerKeyParams(int index) {
        return result.GetPowerKeyParams(index);
      }
      public Builder SetPowerKeyParams(int index, int value) {
        PrepareBuilder();
        result.powerKeyParams_[index] = value;
        return this;
      }
      public Builder AddPowerKeyParams(int value) {
        PrepareBuilder();
        result.powerKeyParams_.Add(value);
        return this;
      }
      public Builder AddRangePowerKeyParams(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.powerKeyParams_.Add(values);
        return this;
      }
      public Builder ClearPowerKeyParams() {
        PrepareBuilder();
        result.powerKeyParams_.Clear();
        return this;
      }
      
      public bool HasDead {
        get { return result.hasDead; }
      }
      public bool Dead {
        get { return result.Dead; }
        set { SetDead(value); }
      }
      public Builder SetDead(bool value) {
        PrepareBuilder();
        result.hasDead = true;
        result.dead_ = value;
        return this;
      }
      public Builder ClearDead() {
        PrepareBuilder();
        result.hasDead = false;
        result.dead_ = false;
        return this;
      }
    }
    static Info() {
      object.ReferenceEquals(global::D3.Hireling.Hireling.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavedData : pb::GeneratedMessage<SavedData, SavedData.Builder> {
    private SavedData() { }
    private static readonly SavedData defaultInstance = new SavedData().MakeReadOnly();
    private static readonly string[] _savedDataFieldNames = new string[] { "active_hireling", "available_hirelings_bitfield", "hirelings" };
    private static readonly uint[] _savedDataFieldTags = new uint[] { 16, 24, 10 };
    public static SavedData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavedData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hireling.Hireling.internal__static_D3_Hireling_SavedData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedData, SavedData.Builder> InternalFieldAccessors {
      get { return global::D3.Hireling.Hireling.internal__static_D3_Hireling_SavedData__FieldAccessorTable; }
    }
    
    public const int HirelingsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Hireling.Info> hirelings_ = new pbc::PopsicleList<global::D3.Hireling.Info>();
    public scg::IList<global::D3.Hireling.Info> HirelingsList {
      get { return hirelings_; }
    }
    public int HirelingsCount {
      get { return hirelings_.Count; }
    }
    public global::D3.Hireling.Info GetHirelings(int index) {
      return hirelings_[index];
    }
    
    public const int ActiveHirelingFieldNumber = 2;
    private bool hasActiveHireling;
    private uint activeHireling_;
    public bool HasActiveHireling {
      get { return hasActiveHireling; }
    }
    public uint ActiveHireling {
      get { return activeHireling_; }
    }
    
    public const int AvailableHirelingsBitfieldFieldNumber = 3;
    private bool hasAvailableHirelingsBitfield;
    private uint availableHirelingsBitfield_;
    public bool HasAvailableHirelingsBitfield {
      get { return hasAvailableHirelingsBitfield; }
    }
    public uint AvailableHirelingsBitfield {
      get { return availableHirelingsBitfield_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasActiveHireling) return false;
        if (!hasAvailableHirelingsBitfield) return false;
        foreach (global::D3.Hireling.Info element in HirelingsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savedDataFieldNames;
      if (hirelings_.Count > 0) {
        output.WriteMessageArray(1, field_names[2], hirelings_);
      }
      if (hasActiveHireling) {
        output.WriteUInt32(2, field_names[0], ActiveHireling);
      }
      if (hasAvailableHirelingsBitfield) {
        output.WriteUInt32(3, field_names[1], AvailableHirelingsBitfield);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Hireling.Info element in HirelingsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasActiveHireling) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, ActiveHireling);
        }
        if (hasAvailableHirelingsBitfield) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, AvailableHirelingsBitfield);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavedData MakeReadOnly() {
      hirelings_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavedData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavedData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavedData result;
      
      private SavedData PrepareBuilder() {
        if (resultIsReadOnly) {
          SavedData original = result;
          result = new SavedData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavedData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hireling.SavedData.Descriptor; }
      }
      
      public override SavedData DefaultInstanceForType {
        get { return global::D3.Hireling.SavedData.DefaultInstance; }
      }
      
      public override SavedData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedData) {
          return MergeFrom((SavedData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedData other) {
        if (other == global::D3.Hireling.SavedData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.hirelings_.Count != 0) {
          result.hirelings_.Add(other.hirelings_);
        }
        if (other.HasActiveHireling) {
          ActiveHireling = other.ActiveHireling;
        }
        if (other.HasAvailableHirelingsBitfield) {
          AvailableHirelingsBitfield = other.AvailableHirelingsBitfield;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savedDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savedDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.hirelings_, global::D3.Hireling.Info.DefaultInstance, extensionRegistry);
              break;
            }
            case 16: {
              result.hasActiveHireling = input.ReadUInt32(ref result.activeHireling_);
              break;
            }
            case 24: {
              result.hasAvailableHirelingsBitfield = input.ReadUInt32(ref result.availableHirelingsBitfield_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Hireling.Info> HirelingsList {
        get { return PrepareBuilder().hirelings_; }
      }
      public int HirelingsCount {
        get { return result.HirelingsCount; }
      }
      public global::D3.Hireling.Info GetHirelings(int index) {
        return result.GetHirelings(index);
      }
      public Builder SetHirelings(int index, global::D3.Hireling.Info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hirelings_[index] = value;
        return this;
      }
      public Builder SetHirelings(int index, global::D3.Hireling.Info.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hirelings_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddHirelings(global::D3.Hireling.Info value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hirelings_.Add(value);
        return this;
      }
      public Builder AddHirelings(global::D3.Hireling.Info.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hirelings_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeHirelings(scg::IEnumerable<global::D3.Hireling.Info> values) {
        PrepareBuilder();
        result.hirelings_.Add(values);
        return this;
      }
      public Builder ClearHirelings() {
        PrepareBuilder();
        result.hirelings_.Clear();
        return this;
      }
      
      public bool HasActiveHireling {
        get { return result.hasActiveHireling; }
      }
      public uint ActiveHireling {
        get { return result.ActiveHireling; }
        set { SetActiveHireling(value); }
      }
      public Builder SetActiveHireling(uint value) {
        PrepareBuilder();
        result.hasActiveHireling = true;
        result.activeHireling_ = value;
        return this;
      }
      public Builder ClearActiveHireling() {
        PrepareBuilder();
        result.hasActiveHireling = false;
        result.activeHireling_ = 0;
        return this;
      }
      
      public bool HasAvailableHirelingsBitfield {
        get { return result.hasAvailableHirelingsBitfield; }
      }
      public uint AvailableHirelingsBitfield {
        get { return result.AvailableHirelingsBitfield; }
        set { SetAvailableHirelingsBitfield(value); }
      }
      public Builder SetAvailableHirelingsBitfield(uint value) {
        PrepareBuilder();
        result.hasAvailableHirelingsBitfield = true;
        result.availableHirelingsBitfield_ = value;
        return this;
      }
      public Builder ClearAvailableHirelingsBitfield() {
        PrepareBuilder();
        result.hasAvailableHirelingsBitfield = false;
        result.availableHirelingsBitfield_ = 0;
        return this;
      }
    }
    static SavedData() {
      object.ReferenceEquals(global::D3.Hireling.Hireling.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
