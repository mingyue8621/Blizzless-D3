// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Leaderboard {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Leaderboard {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_HeroEquippedItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.HeroEquippedItem, global::D3.Leaderboard.HeroEquippedItem.Builder> internal__static_D3_Leaderboard_HeroEquippedItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_HeroCosmeticItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.HeroCosmeticItem, global::D3.Leaderboard.HeroCosmeticItem.Builder> internal__static_D3_Leaderboard_HeroCosmeticItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_HeroSnapshot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.HeroSnapshot, global::D3.Leaderboard.HeroSnapshot.Builder> internal__static_D3_Leaderboard_HeroSnapshot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_Member__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.Member, global::D3.Leaderboard.Member.Builder> internal__static_D3_Leaderboard_Member__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_Metadata__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.Metadata, global::D3.Leaderboard.Metadata.Builder> internal__static_D3_Leaderboard_Metadata__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_CompressedMetadata__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.CompressedMetadata, global::D3.Leaderboard.CompressedMetadata.Builder> internal__static_D3_Leaderboard_CompressedMetadata__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_Slot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.Slot, global::D3.Leaderboard.Slot.Builder> internal__static_D3_Leaderboard_Slot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_Score__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.Score, global::D3.Leaderboard.Score.Builder> internal__static_D3_Leaderboard_Score__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_PostScore__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.PostScore, global::D3.Leaderboard.PostScore.Builder> internal__static_D3_Leaderboard_PostScore__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_CompressedPostScore__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.CompressedPostScore, global::D3.Leaderboard.CompressedPostScore.Builder> internal__static_D3_Leaderboard_CompressedPostScore__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_LeaderboardScores__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.LeaderboardScores, global::D3.Leaderboard.LeaderboardScores.Builder> internal__static_D3_Leaderboard_LeaderboardScores__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_RemoveAccount__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.RemoveAccount, global::D3.Leaderboard.RemoveAccount.Builder> internal__static_D3_Leaderboard_RemoveAccount__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_ReloadScoreBands__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.ReloadScoreBands, global::D3.Leaderboard.ReloadScoreBands.Builder> internal__static_D3_Leaderboard_ReloadScoreBands__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_Snapshot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.Snapshot, global::D3.Leaderboard.Snapshot.Builder> internal__static_D3_Leaderboard_Snapshot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_InvalidateCache__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.InvalidateCache, global::D3.Leaderboard.InvalidateCache.Builder> internal__static_D3_Leaderboard_InvalidateCache__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_RiftFloor__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.RiftFloor, global::D3.Leaderboard.RiftFloor.Builder> internal__static_D3_Leaderboard_RiftFloor__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_RiftPylon__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.RiftPylon, global::D3.Leaderboard.RiftPylon.Builder> internal__static_D3_Leaderboard_RiftPylon__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_RiftSnapshot__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.RiftSnapshot, global::D3.Leaderboard.RiftSnapshot.Builder> internal__static_D3_Leaderboard_RiftSnapshot__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Leaderboard_WeeklyChallengeData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.WeeklyChallengeData, global::D3.Leaderboard.WeeklyChallengeData.Builder> internal__static_D3_Leaderboard_WeeklyChallengeData__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Leaderboard() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChFMZWFkZXJib2FyZC5wcm90bxIORDMuTGVhZGVyYm9hcmQaDUFjY291bnQu" + 
          "cHJvdG8aCkhlcm8ucHJvdG8aEEhlcm9Db21tb24ucHJvdG8aE09ubGluZVNl" + 
          "cnZpY2UucHJvdG8aC0l0ZW1zLnByb3RvGg1Qcm9maWxlLnByb3RvIr0CChBI" + 
          "ZXJvRXF1aXBwZWRJdGVtEjEKCWdlbmVyYXRvchgBIAEoCzITLkQzLkl0ZW1z" + 
          "LkdlbmVyYXRvclIJZ2VuZXJhdG9yEjIKFXZpc3VhbF9pbnZlbnRvcnlfc2xv" + 
          "dBgCIAEoBVITdmlzdWFsSW52ZW50b3J5U2xvdBIsChBpdGVtX3Zpc3VhbF9n" + 
          "YmlkGAMgASgPOgItMVIOaXRlbVZpc3VhbEdiaWQSKwoQaXRlbV9lZmZlY3Rf" + 
          "dHlwZRgEIAEoEToBMFIOaXRlbUVmZmVjdFR5cGUSJQoMZWZmZWN0X2xldmVs" + 
          "GAUgASgROgItMVILZWZmZWN0TGV2ZWwSIgoJaXNfcG90aW9uGAYgASgIOgVm" + 
          "YWxzZVIIaXNQb3Rpb24SHAoIZHllX3R5cGUYByABKBE6ATBSB2R5ZVR5cGUi" + 
          "awoQSGVyb0Nvc21ldGljSXRlbRJDCh5jb3NtZXRpY192aXN1YWxfaW52ZW50" + 
          "b3J5X3Nsb3QYASABKAVSG2Nvc21ldGljVmlzdWFsSW52ZW50b3J5U2xvdBIS" + 
          "CgRnYmlkGAIgASgPUgRnYmlkIt8DCgxIZXJvU25hcHNob3QSQAoNYWN0aXZl" + 
          "X3NraWxscxgBIAEoCzIbLkQzLlByb2ZpbGUuU2tpbGxzV2l0aFJ1bmVzUgxh" + 
          "Y3RpdmVTa2lsbHMSRwoOZXF1aXBwZWRfaXRlbXMYAiADKAsyIC5EMy5MZWFk" + 
          "ZXJib2FyZC5IZXJvRXF1aXBwZWRJdGVtUg1lcXVpcHBlZEl0ZW1zEj4KDWFj" + 
          "dGl2ZV90cmFpdHMYAyABKAsyGS5EMy5Qcm9maWxlLlBhc3NpdmVTa2lsbHNS" + 
          "DGFjdGl2ZVRyYWl0cxJSChJwYXJhZ29uX2FsbG9jYXRpb24YBCABKAsyIy5E" + 
          "My5Qcm9maWxlLlBhcmFnb25Qb2ludEFsbG9jYXRpb25zUhFwYXJhZ29uQWxs" + 
          "b2NhdGlvbhIzCgdoZXJvX2lkGAUgASgLMhouRDMuT25saW5lU2VydmljZS5F" + 
          "bnRpdHlJZFIGaGVyb0lkEkcKDmNvc21ldGljX2l0ZW1zGAYgAygLMiAuRDMu" + 
          "TGVhZGVyYm9hcmQuSGVyb0Nvc21ldGljSXRlbVINY29zbWV0aWNJdGVtcxIy" + 
          "ChVnYmlkX2xlZ2VuZGFyeV9wb3dlcnMYByADKA9SE2diaWRMZWdlbmRhcnlQ" + 
          "b3dlcnMitwUKBk1lbWJlchIdCgphY2NvdW50X2lkGAEgASgEUglhY2NvdW50" + 
          "SWQSGwoJaGVyb19uYW1lGAIgASgJUghoZXJvTmFtZRImCg9oZXJvX2diaWRf" + 
          "Y2xhc3MYAyABKAdSDWhlcm9HYmlkQ2xhc3MSHQoKaGVyb19mbGFncxgEIAEo" + 
          "DVIJaGVyb0ZsYWdzEi4KE2hlcm9fc2Vhc29uX2NyZWF0ZWQYCyABKA1SEWhl" + 
          "cm9TZWFzb25DcmVhdGVkEh0KCmhlcm9fbGV2ZWwYDCABKA1SCWhlcm9MZXZl" + 
          "bBIkCg5oZXJvX2FsdF9sZXZlbBgNIAEoDVIMaGVyb0FsdExldmVsEhcKB2Ns" + 
          "YW5faWQYBSABKARSBmNsYW5JZBIbCgljbGFuX25hbWUYBiABKAlSCGNsYW5O" + 
          "YW1lEhkKCGNsYW5fdGFnGAcgASgJUgdjbGFuVGFnEkUKH2RlcHJlY2F0ZWRf" + 
          "Y2xhbl9yZXF1aXJlc19pbnZpdGUYCCABKAhSHGRlcHJlY2F0ZWRDbGFuUmVx" + 
          "dWlyZXNJbnZpdGUSTAoVaGVyb192aXN1YWxfZXF1aXBtZW50GAkgASgLMhgu" + 
          "RDMuSGVyby5WaXN1YWxFcXVpcG1lbnRSE2hlcm9WaXN1YWxFcXVpcG1lbnQS" + 
          "HQoKYmF0dGxlX3RhZxgKIAEoCVIJYmF0dGxlVGFnEi4KE2JhdHRsZV90YWdf" + 
          "b3ZlcnJpZGUYDiABKAlSEWJhdHRsZVRhZ092ZXJyaWRlEkEKDWhlcm9fc25h" + 
          "cHNob3QYDyABKAsyHC5EMy5MZWFkZXJib2FyZC5IZXJvU25hcHNob3RSDGhl" + 
          "cm9TbmFwc2hvdBI9ChdoZXJvX3NuYXBzaG90X2F2YWlsYWJsZRgQIAEoCDoF" + 
          "ZmFsc2VSFWhlcm9TbmFwc2hvdEF2YWlsYWJsZSK8AwoITWV0YWRhdGESGAoH" + 
          "Y2hlYXRlZBgBIAEoCFIHY2hlYXRlZBI3Cgt0ZWFtX21lbWJlchgKIAMoCzIW" + 
          "LkQzLkxlYWRlcmJvYXJkLk1lbWJlclIKdGVhbU1lbWJlchJDCh5ERVBSRUNB" + 
          "VEVEX2V4cGlyZV9hdF90aW1lc3RhbXAYCyABKANSG0RFUFJFQ0FURURFeHBp" + 
          "cmVBdFRpbWVzdGFtcBIhCg1hY3RfMV90aW1lX21zGBQgASgNUgphY3QxVGlt" + 
          "ZU1zEiEKDWFjdF8yX3RpbWVfbXMYFSABKA1SCmFjdDJUaW1lTXMSIQoNYWN0" + 
          "XzNfdGltZV9tcxgWIAEoDVIKYWN0M1RpbWVNcxIhCg1hY3RfNF90aW1lX21z" + 
          "GBcgASgNUgphY3Q0VGltZU1zEiEKDWFjdF81X3RpbWVfbXMYGCABKA1SCmFj" + 
          "dDVUaW1lTXMSHQoKbGV2ZWxfc2VlZBgeIAEoB1IJbGV2ZWxTZWVkEkoKDmNo" + 
          "YWxsZW5nZV9kYXRhGCggASgLMiMuRDMuTGVhZGVyYm9hcmQuV2Vla2x5Q2hh" + 
          "bGxlbmdlRGF0YVINY2hhbGxlbmdlRGF0YSJqChJDb21wcmVzc2VkTWV0YWRh" + 
          "dGESKwoRdW5jb21wcmVzc2VkX3NpemUYASABKAVSEHVuY29tcHJlc3NlZFNp" + 
          "emUSJwoPY29tcHJlc3NlZF9kYXRhGAIgASgMUg5jb21wcmVzc2VkRGF0YSKY" + 
          "AQoEU2xvdBImCg9nYW1lX2FjY291bnRfaWQYASACKARSDWdhbWVBY2NvdW50" + 
          "SWQSFAoFc2NvcmUYAiACKAZSBXNjb3JlEhwKCXRpbWVzdGFtcBgDIAIoBlIJ" + 
          "dGltZXN0YW1wEjQKCG1ldGFkYXRhGAQgASgLMhguRDMuTGVhZGVyYm9hcmQu" + 
          "TWV0YWRhdGFSCG1ldGFkYXRhIqgCCgVTY29yZRIlCg5sZWFkZXJib2FyZF9p" + 
          "ZBgBIAIoBFINbGVhZGVyYm9hcmRJZBIZCghzY29wZV9pZBgCIAIoDVIHc2Nv" + 
          "cGVJZBIUCgVzY29yZRgDIAIoBlIFc2NvcmUSHAoJdGltZXN0YW1wGAQgAigG" + 
          "Ugl0aW1lc3RhbXASNAoIbWV0YWRhdGEYBSABKAsyGC5EMy5MZWFkZXJib2Fy" + 
          "ZC5NZXRhZGF0YVIIbWV0YWRhdGESJgoPZ2FtZV9hY2NvdW50X2lkGAYgASgE" + 
          "Ug1nYW1lQWNjb3VudElkEh0KCnNjb3JlX2JhbmQYByABKA1SCXNjb3JlQmFu" + 
          "ZBIsChJzY29yZV9wbGF5ZXJfY291bnQYCCABKA1SEHNjb3JlUGxheWVyQ291" + 
          "bnQi/AIKCVBvc3RTY29yZRIfCgtjYXRlZ29yeV9pZBgBIAEoBFIKY2F0ZWdv" + 
          "cnlJZBIZCghzY29wZV9pZBgCIAEoDVIHc2NvcGVJZBImCg9nYW1lX2FjY291" + 
          "bnRfaWQYAyABKARSDWdhbWVBY2NvdW50SWQSFAoFc2NvcmUYBCABKAZSBXNj" + 
          "b3JlEhwKCXRpbWVzdGFtcBgFIAEoBlIJdGltZXN0YW1wEjQKCG1ldGFkYXRh" + 
          "GAYgASgLMhguRDMuTGVhZGVyYm9hcmQuTWV0YWRhdGFSCG1ldGFkYXRhEiEK" + 
          "DHBhcnRpdGlvbl9pZBgIIAEoDVILcGFydGl0aW9uSWQSIQoMc2VydmljZV9o" + 
          "YXNoGAkgASgHUgtzZXJ2aWNlSGFzaBItChJnZW5lcmF0aW5nX3NlcnZpY2UY" + 
          "CiABKAlSEWdlbmVyYXRpbmdTZXJ2aWNlEiwKEmdlbmVyYXRpbmdfZ2FtZV9p" + 
          "ZBgLIAEoBVIQZ2VuZXJhdGluZ0dhbWVJZCIpChNDb21wcmVzc2VkUG9zdFNj" + 
          "b3JlEhIKBGRhdGEYASABKAxSBGRhdGEiQgoRTGVhZGVyYm9hcmRTY29yZXMS" + 
          "LQoGc2NvcmVzGAEgAygLMhUuRDMuTGVhZGVyYm9hcmQuU2NvcmVSBnNjb3Jl" + 
          "cyJ5Cg1SZW1vdmVBY2NvdW50EiYKD2dhbWVfYWNjb3VudF9pZBgBIAEoBFIN" + 
          "Z2FtZUFjY291bnRJZBJAChxpZ25vcmVfY29ucXVlc3RfbGVhZGVyYm9hcmRz" + 
          "GAIgASgIUhppZ25vcmVDb25xdWVzdExlYWRlcmJvYXJkcyJgChBSZWxvYWRT" + 
          "Y29yZUJhbmRzEikKEGxlYWRlcmJvYXJkX3R5cGUYASABKA1SD2xlYWRlcmJv" + 
          "YXJkVHlwZRIhCgxwYXJ0aXRpb25faWQYAiABKA1SC3BhcnRpdGlvbklkIjoK" + 
          "CFNuYXBzaG90Ei4KB2VudHJpZXMYAyADKAsyFC5EMy5MZWFkZXJib2FyZC5T" + 
          "bG90UgdlbnRyaWVzIl8KD0ludmFsaWRhdGVDYWNoZRIpChBsZWFkZXJib2Fy" + 
          "ZF90eXBlGAEgASgNUg9sZWFkZXJib2FyZFR5cGUSIQoMcGFydGl0aW9uX2lk" + 
          "GAIgASgNUgtwYXJ0aXRpb25JZCJRCglSaWZ0Rmxvb3ISGwoJc25vX3dvcmxk" + 
          "GAEgAigPUghzbm9Xb3JsZBInCg9wb3B1bGF0aW9uX2hhc2gYAiACKA9SDnBv" + 
          "cHVsYXRpb25IYXNoIoUBCglSaWZ0UHlsb24SGwoJc25vX3B5bG9uGAEgAigP" + 
          "Ughzbm9QeWxvbhIdCgpyaWZ0X2Zsb29yGAIgAigNUglyaWZ0Rmxvb3ISHQoK" + 
          "cG9zaXRpb25feBgDIAIoAlIJcG9zaXRpb25YEh0KCnBvc2l0aW9uX3kYBCAC" + 
          "KAJSCXBvc2l0aW9uWSKWAwoMUmlmdFNuYXBzaG90EhsKCXJpZnRfdGllchgB" + 
          "IAIoDVIIcmlmdFRpZXISGwoJcmlmdF9zZWVkGAIgAigPUghyaWZ0U2VlZBIZ" + 
          "Cghzbm9fYm9zcxgDIAIoD1IHc25vQm9zcxIsChJzbm9fZHVuZ2Vvbl9maW5k" + 
          "ZXIYBCACKA9SEHNub0R1bmdlb25GaW5kZXISMQoGZmxvb3JzGAUgAygLMhku" + 
          "RDMuTGVhZGVyYm9hcmQuUmlmdEZsb29yUgZmbG9vcnMSMQoGcHlsb25zGAYg" + 
          "AygLMhkuRDMuTGVhZGVyYm9hcmQuUmlmdFB5bG9uUgZweWxvbnMSQgodZGVw" + 
          "cmVjYXRlZF9jb21wbGV0aW9uX3NlY29uZHMYByACKA1SG2RlcHJlY2F0ZWRD" + 
          "b21wbGV0aW9uU2Vjb25kcxIdCgpudW1fZGVhdGhzGAggAigNUgludW1EZWF0" + 
          "aHMSOgoXY29tcGxldGlvbl9taWxsaXNlY29uZHMYCSABKA06ATBSFmNvbXBs" + 
          "ZXRpb25NaWxsaXNlY29uZHMi1AIKE1dlZWtseUNoYWxsZW5nZURhdGESQQoN" + 
          "cmlmdF9zbmFwc2hvdBgBIAIoCzIcLkQzLkxlYWRlcmJvYXJkLlJpZnRTbmFw" + 
          "c2hvdFIMcmlmdFNuYXBzaG90Ej0KDWhlcm9fc25hcHNob3QYAiACKAsyGC5E" + 
          "My5IZXJvLlNhdmVkRGVmaW5pdGlvblIMaGVyb1NuYXBzaG90EkYKEGFjY291" + 
          "bnRfc25hcHNob3QYAyACKAsyGy5EMy5BY2NvdW50LlNhdmVkRGVmaW5pdGlv" + 
          "blIPYWNjb3VudFNuYXBzaG90EiYKD2JuZXRfYWNjb3VudF9pZBgEIAEoDVIN" + 
          "Ym5ldEFjY291bnRJZBJLCg9nYW1lX2FjY291bnRfaWQYBSABKAsyIy5EMy5P" + 
          "bmxpbmVTZXJ2aWNlLkdhbWVBY2NvdW50SGFuZGxlUg1nYW1lQWNjb3VudElk" + 
          "KkQKDVBhcnRpdGlvblR5cGUSDwoLVU5TUEVDSUZJRUQQABIKCgZTRUFTT04Q" + 
          "ARIHCgNFUkEQAhINCglDSEFMTEVOR0UQAw==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Leaderboard_HeroEquippedItem__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Leaderboard_HeroEquippedItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.HeroEquippedItem, global::D3.Leaderboard.HeroEquippedItem.Builder>(internal__static_D3_Leaderboard_HeroEquippedItem__Descriptor,
                new string[] { "Generator", "VisualInventorySlot", "ItemVisualGbid", "ItemEffectType", "EffectLevel", "IsPotion", "DyeType", });
        internal__static_D3_Leaderboard_HeroCosmeticItem__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Leaderboard_HeroCosmeticItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.HeroCosmeticItem, global::D3.Leaderboard.HeroCosmeticItem.Builder>(internal__static_D3_Leaderboard_HeroCosmeticItem__Descriptor,
                new string[] { "CosmeticVisualInventorySlot", "Gbid", });
        internal__static_D3_Leaderboard_HeroSnapshot__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_Leaderboard_HeroSnapshot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.HeroSnapshot, global::D3.Leaderboard.HeroSnapshot.Builder>(internal__static_D3_Leaderboard_HeroSnapshot__Descriptor,
                new string[] { "ActiveSkills", "EquippedItems", "ActiveTraits", "ParagonAllocation", "HeroId", "CosmeticItems", "GbidLegendaryPowers", });
        internal__static_D3_Leaderboard_Member__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_Leaderboard_Member__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.Member, global::D3.Leaderboard.Member.Builder>(internal__static_D3_Leaderboard_Member__Descriptor,
                new string[] { "AccountId", "HeroName", "HeroGbidClass", "HeroFlags", "HeroSeasonCreated", "HeroLevel", "HeroAltLevel", "ClanId", "ClanName", "ClanTag", "DeprecatedClanRequiresInvite", "HeroVisualEquipment", "BattleTag", "BattleTagOverride", "HeroSnapshot", "HeroSnapshotAvailable", });
        internal__static_D3_Leaderboard_Metadata__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_Leaderboard_Metadata__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.Metadata, global::D3.Leaderboard.Metadata.Builder>(internal__static_D3_Leaderboard_Metadata__Descriptor,
                new string[] { "Cheated", "TeamMember", "DEPRECATEDExpireAtTimestamp", "Act1TimeMs", "Act2TimeMs", "Act3TimeMs", "Act4TimeMs", "Act5TimeMs", "LevelSeed", "ChallengeData", });
        internal__static_D3_Leaderboard_CompressedMetadata__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_Leaderboard_CompressedMetadata__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.CompressedMetadata, global::D3.Leaderboard.CompressedMetadata.Builder>(internal__static_D3_Leaderboard_CompressedMetadata__Descriptor,
                new string[] { "UncompressedSize", "CompressedData", });
        internal__static_D3_Leaderboard_Slot__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_Leaderboard_Slot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.Slot, global::D3.Leaderboard.Slot.Builder>(internal__static_D3_Leaderboard_Slot__Descriptor,
                new string[] { "GameAccountId", "Score", "Timestamp", "Metadata", });
        internal__static_D3_Leaderboard_Score__Descriptor = Descriptor.MessageTypes[7];
        internal__static_D3_Leaderboard_Score__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.Score, global::D3.Leaderboard.Score.Builder>(internal__static_D3_Leaderboard_Score__Descriptor,
                new string[] { "LeaderboardId", "ScopeId", "Score_", "Timestamp", "Metadata", "GameAccountId", "ScoreBand", "ScorePlayerCount", });
        internal__static_D3_Leaderboard_PostScore__Descriptor = Descriptor.MessageTypes[8];
        internal__static_D3_Leaderboard_PostScore__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.PostScore, global::D3.Leaderboard.PostScore.Builder>(internal__static_D3_Leaderboard_PostScore__Descriptor,
                new string[] { "CategoryId", "ScopeId", "GameAccountId", "Score", "Timestamp", "Metadata", "PartitionId", "ServiceHash", "GeneratingService", "GeneratingGameId", });
        internal__static_D3_Leaderboard_CompressedPostScore__Descriptor = Descriptor.MessageTypes[9];
        internal__static_D3_Leaderboard_CompressedPostScore__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.CompressedPostScore, global::D3.Leaderboard.CompressedPostScore.Builder>(internal__static_D3_Leaderboard_CompressedPostScore__Descriptor,
                new string[] { "Data", });
        internal__static_D3_Leaderboard_LeaderboardScores__Descriptor = Descriptor.MessageTypes[10];
        internal__static_D3_Leaderboard_LeaderboardScores__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.LeaderboardScores, global::D3.Leaderboard.LeaderboardScores.Builder>(internal__static_D3_Leaderboard_LeaderboardScores__Descriptor,
                new string[] { "Scores", });
        internal__static_D3_Leaderboard_RemoveAccount__Descriptor = Descriptor.MessageTypes[11];
        internal__static_D3_Leaderboard_RemoveAccount__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.RemoveAccount, global::D3.Leaderboard.RemoveAccount.Builder>(internal__static_D3_Leaderboard_RemoveAccount__Descriptor,
                new string[] { "GameAccountId", "IgnoreConquestLeaderboards", });
        internal__static_D3_Leaderboard_ReloadScoreBands__Descriptor = Descriptor.MessageTypes[12];
        internal__static_D3_Leaderboard_ReloadScoreBands__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.ReloadScoreBands, global::D3.Leaderboard.ReloadScoreBands.Builder>(internal__static_D3_Leaderboard_ReloadScoreBands__Descriptor,
                new string[] { "LeaderboardType", "PartitionId", });
        internal__static_D3_Leaderboard_Snapshot__Descriptor = Descriptor.MessageTypes[13];
        internal__static_D3_Leaderboard_Snapshot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.Snapshot, global::D3.Leaderboard.Snapshot.Builder>(internal__static_D3_Leaderboard_Snapshot__Descriptor,
                new string[] { "Entries", });
        internal__static_D3_Leaderboard_InvalidateCache__Descriptor = Descriptor.MessageTypes[14];
        internal__static_D3_Leaderboard_InvalidateCache__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.InvalidateCache, global::D3.Leaderboard.InvalidateCache.Builder>(internal__static_D3_Leaderboard_InvalidateCache__Descriptor,
                new string[] { "LeaderboardType", "PartitionId", });
        internal__static_D3_Leaderboard_RiftFloor__Descriptor = Descriptor.MessageTypes[15];
        internal__static_D3_Leaderboard_RiftFloor__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.RiftFloor, global::D3.Leaderboard.RiftFloor.Builder>(internal__static_D3_Leaderboard_RiftFloor__Descriptor,
                new string[] { "SnoWorld", "PopulationHash", });
        internal__static_D3_Leaderboard_RiftPylon__Descriptor = Descriptor.MessageTypes[16];
        internal__static_D3_Leaderboard_RiftPylon__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.RiftPylon, global::D3.Leaderboard.RiftPylon.Builder>(internal__static_D3_Leaderboard_RiftPylon__Descriptor,
                new string[] { "SnoPylon", "RiftFloor", "PositionX", "PositionY", });
        internal__static_D3_Leaderboard_RiftSnapshot__Descriptor = Descriptor.MessageTypes[17];
        internal__static_D3_Leaderboard_RiftSnapshot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.RiftSnapshot, global::D3.Leaderboard.RiftSnapshot.Builder>(internal__static_D3_Leaderboard_RiftSnapshot__Descriptor,
                new string[] { "RiftTier", "RiftSeed", "SnoBoss", "SnoDungeonFinder", "Floors", "Pylons", "DeprecatedCompletionSeconds", "NumDeaths", "CompletionMilliseconds", });
        internal__static_D3_Leaderboard_WeeklyChallengeData__Descriptor = Descriptor.MessageTypes[18];
        internal__static_D3_Leaderboard_WeeklyChallengeData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Leaderboard.WeeklyChallengeData, global::D3.Leaderboard.WeeklyChallengeData.Builder>(internal__static_D3_Leaderboard_WeeklyChallengeData__Descriptor,
                new string[] { "RiftSnapshot", "HeroSnapshot", "AccountSnapshot", "BnetAccountId", "GameAccountId", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::D3.Account.Account.RegisterAllExtensions(registry);
        global::D3.Hero.Hero.RegisterAllExtensions(registry);
        global::D3.Hero.HeroCommon.RegisterAllExtensions(registry);
        global::D3.OnlineService.OnlineService.RegisterAllExtensions(registry);
        global::D3.Items.Items.RegisterAllExtensions(registry);
        global::D3.Profile.Profile.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.Account.Account.Descriptor, 
          global::D3.Hero.Hero.Descriptor, 
          global::D3.Hero.HeroCommon.Descriptor, 
          global::D3.OnlineService.OnlineService.Descriptor, 
          global::D3.Items.Items.Descriptor, 
          global::D3.Profile.Profile.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public enum PartitionType {
    UNSPECIFIED = 0,
    SEASON = 1,
    ERA = 2,
    CHALLENGE = 3,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeroEquippedItem : pb::GeneratedMessage<HeroEquippedItem, HeroEquippedItem.Builder> {
    private HeroEquippedItem() { }
    private static readonly HeroEquippedItem defaultInstance = new HeroEquippedItem().MakeReadOnly();
    private static readonly string[] _heroEquippedItemFieldNames = new string[] { "dye_type", "effect_level", "generator", "is_potion", "item_effect_type", "item_visual_gbid", "visual_inventory_slot" };
    private static readonly uint[] _heroEquippedItemFieldTags = new uint[] { 56, 40, 10, 48, 32, 29, 16 };
    public static HeroEquippedItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroEquippedItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeroEquippedItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_HeroEquippedItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroEquippedItem, HeroEquippedItem.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_HeroEquippedItem__FieldAccessorTable; }
    }
    
    public const int GeneratorFieldNumber = 1;
    private bool hasGenerator;
    private global::D3.Items.Generator generator_;
    public bool HasGenerator {
      get { return hasGenerator; }
    }
    public global::D3.Items.Generator Generator {
      get { return generator_ ?? global::D3.Items.Generator.DefaultInstance; }
    }
    
    public const int VisualInventorySlotFieldNumber = 2;
    private bool hasVisualInventorySlot;
    private int visualInventorySlot_;
    public bool HasVisualInventorySlot {
      get { return hasVisualInventorySlot; }
    }
    public int VisualInventorySlot {
      get { return visualInventorySlot_; }
    }
    
    public const int ItemVisualGbidFieldNumber = 3;
    private bool hasItemVisualGbid;
    private int itemVisualGbid_ = -1;
    public bool HasItemVisualGbid {
      get { return hasItemVisualGbid; }
    }
    public int ItemVisualGbid {
      get { return itemVisualGbid_; }
    }
    
    public const int ItemEffectTypeFieldNumber = 4;
    private bool hasItemEffectType;
    private int itemEffectType_;
    public bool HasItemEffectType {
      get { return hasItemEffectType; }
    }
    public int ItemEffectType {
      get { return itemEffectType_; }
    }
    
    public const int EffectLevelFieldNumber = 5;
    private bool hasEffectLevel;
    private int effectLevel_ = -1;
    public bool HasEffectLevel {
      get { return hasEffectLevel; }
    }
    public int EffectLevel {
      get { return effectLevel_; }
    }
    
    public const int IsPotionFieldNumber = 6;
    private bool hasIsPotion;
    private bool isPotion_;
    public bool HasIsPotion {
      get { return hasIsPotion; }
    }
    public bool IsPotion {
      get { return isPotion_; }
    }
    
    public const int DyeTypeFieldNumber = 7;
    private bool hasDyeType;
    private int dyeType_;
    public bool HasDyeType {
      get { return hasDyeType; }
    }
    public int DyeType {
      get { return dyeType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasGenerator) {
          if (!Generator.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _heroEquippedItemFieldNames;
      if (hasGenerator) {
        output.WriteMessage(1, field_names[2], Generator);
      }
      if (hasVisualInventorySlot) {
        output.WriteInt32(2, field_names[6], VisualInventorySlot);
      }
      if (hasItemVisualGbid) {
        output.WriteSFixed32(3, field_names[5], ItemVisualGbid);
      }
      if (hasItemEffectType) {
        output.WriteSInt32(4, field_names[4], ItemEffectType);
      }
      if (hasEffectLevel) {
        output.WriteSInt32(5, field_names[1], EffectLevel);
      }
      if (hasIsPotion) {
        output.WriteBool(6, field_names[3], IsPotion);
      }
      if (hasDyeType) {
        output.WriteSInt32(7, field_names[0], DyeType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGenerator) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Generator);
        }
        if (hasVisualInventorySlot) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, VisualInventorySlot);
        }
        if (hasItemVisualGbid) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(3, ItemVisualGbid);
        }
        if (hasItemEffectType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(4, ItemEffectType);
        }
        if (hasEffectLevel) {
          size += pb::CodedOutputStream.ComputeSInt32Size(5, EffectLevel);
        }
        if (hasIsPotion) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, IsPotion);
        }
        if (hasDyeType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(7, DyeType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroEquippedItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroEquippedItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroEquippedItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroEquippedItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroEquippedItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroEquippedItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroEquippedItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroEquippedItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroEquippedItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroEquippedItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeroEquippedItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroEquippedItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HeroEquippedItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeroEquippedItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeroEquippedItem result;
      
      private HeroEquippedItem PrepareBuilder() {
        if (resultIsReadOnly) {
          HeroEquippedItem original = result;
          result = new HeroEquippedItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeroEquippedItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.HeroEquippedItem.Descriptor; }
      }
      
      public override HeroEquippedItem DefaultInstanceForType {
        get { return global::D3.Leaderboard.HeroEquippedItem.DefaultInstance; }
      }
      
      public override HeroEquippedItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroEquippedItem) {
          return MergeFrom((HeroEquippedItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroEquippedItem other) {
        if (other == global::D3.Leaderboard.HeroEquippedItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGenerator) {
          MergeGenerator(other.Generator);
        }
        if (other.HasVisualInventorySlot) {
          VisualInventorySlot = other.VisualInventorySlot;
        }
        if (other.HasItemVisualGbid) {
          ItemVisualGbid = other.ItemVisualGbid;
        }
        if (other.HasItemEffectType) {
          ItemEffectType = other.ItemEffectType;
        }
        if (other.HasEffectLevel) {
          EffectLevel = other.EffectLevel;
        }
        if (other.HasIsPotion) {
          IsPotion = other.IsPotion;
        }
        if (other.HasDyeType) {
          DyeType = other.DyeType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heroEquippedItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heroEquippedItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.Items.Generator.Builder subBuilder = global::D3.Items.Generator.CreateBuilder();
              if (result.hasGenerator) {
                subBuilder.MergeFrom(Generator);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Generator = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasVisualInventorySlot = input.ReadInt32(ref result.visualInventorySlot_);
              break;
            }
            case 29: {
              result.hasItemVisualGbid = input.ReadSFixed32(ref result.itemVisualGbid_);
              break;
            }
            case 32: {
              result.hasItemEffectType = input.ReadSInt32(ref result.itemEffectType_);
              break;
            }
            case 40: {
              result.hasEffectLevel = input.ReadSInt32(ref result.effectLevel_);
              break;
            }
            case 48: {
              result.hasIsPotion = input.ReadBool(ref result.isPotion_);
              break;
            }
            case 56: {
              result.hasDyeType = input.ReadSInt32(ref result.dyeType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGenerator {
       get { return result.hasGenerator; }
      }
      public global::D3.Items.Generator Generator {
        get { return result.Generator; }
        set { SetGenerator(value); }
      }
      public Builder SetGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGenerator = true;
        result.generator_ = value;
        return this;
      }
      public Builder SetGenerator(global::D3.Items.Generator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGenerator = true;
        result.generator_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGenerator &&
            result.generator_ != global::D3.Items.Generator.DefaultInstance) {
            result.generator_ = global::D3.Items.Generator.CreateBuilder(result.generator_).MergeFrom(value).BuildPartial();
        } else {
          result.generator_ = value;
        }
        result.hasGenerator = true;
        return this;
      }
      public Builder ClearGenerator() {
        PrepareBuilder();
        result.hasGenerator = false;
        result.generator_ = null;
        return this;
      }
      
      public bool HasVisualInventorySlot {
        get { return result.hasVisualInventorySlot; }
      }
      public int VisualInventorySlot {
        get { return result.VisualInventorySlot; }
        set { SetVisualInventorySlot(value); }
      }
      public Builder SetVisualInventorySlot(int value) {
        PrepareBuilder();
        result.hasVisualInventorySlot = true;
        result.visualInventorySlot_ = value;
        return this;
      }
      public Builder ClearVisualInventorySlot() {
        PrepareBuilder();
        result.hasVisualInventorySlot = false;
        result.visualInventorySlot_ = 0;
        return this;
      }
      
      public bool HasItemVisualGbid {
        get { return result.hasItemVisualGbid; }
      }
      public int ItemVisualGbid {
        get { return result.ItemVisualGbid; }
        set { SetItemVisualGbid(value); }
      }
      public Builder SetItemVisualGbid(int value) {
        PrepareBuilder();
        result.hasItemVisualGbid = true;
        result.itemVisualGbid_ = value;
        return this;
      }
      public Builder ClearItemVisualGbid() {
        PrepareBuilder();
        result.hasItemVisualGbid = false;
        result.itemVisualGbid_ = -1;
        return this;
      }
      
      public bool HasItemEffectType {
        get { return result.hasItemEffectType; }
      }
      public int ItemEffectType {
        get { return result.ItemEffectType; }
        set { SetItemEffectType(value); }
      }
      public Builder SetItemEffectType(int value) {
        PrepareBuilder();
        result.hasItemEffectType = true;
        result.itemEffectType_ = value;
        return this;
      }
      public Builder ClearItemEffectType() {
        PrepareBuilder();
        result.hasItemEffectType = false;
        result.itemEffectType_ = 0;
        return this;
      }
      
      public bool HasEffectLevel {
        get { return result.hasEffectLevel; }
      }
      public int EffectLevel {
        get { return result.EffectLevel; }
        set { SetEffectLevel(value); }
      }
      public Builder SetEffectLevel(int value) {
        PrepareBuilder();
        result.hasEffectLevel = true;
        result.effectLevel_ = value;
        return this;
      }
      public Builder ClearEffectLevel() {
        PrepareBuilder();
        result.hasEffectLevel = false;
        result.effectLevel_ = -1;
        return this;
      }
      
      public bool HasIsPotion {
        get { return result.hasIsPotion; }
      }
      public bool IsPotion {
        get { return result.IsPotion; }
        set { SetIsPotion(value); }
      }
      public Builder SetIsPotion(bool value) {
        PrepareBuilder();
        result.hasIsPotion = true;
        result.isPotion_ = value;
        return this;
      }
      public Builder ClearIsPotion() {
        PrepareBuilder();
        result.hasIsPotion = false;
        result.isPotion_ = false;
        return this;
      }
      
      public bool HasDyeType {
        get { return result.hasDyeType; }
      }
      public int DyeType {
        get { return result.DyeType; }
        set { SetDyeType(value); }
      }
      public Builder SetDyeType(int value) {
        PrepareBuilder();
        result.hasDyeType = true;
        result.dyeType_ = value;
        return this;
      }
      public Builder ClearDyeType() {
        PrepareBuilder();
        result.hasDyeType = false;
        result.dyeType_ = 0;
        return this;
      }
    }
    static HeroEquippedItem() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeroCosmeticItem : pb::GeneratedMessage<HeroCosmeticItem, HeroCosmeticItem.Builder> {
    private HeroCosmeticItem() { }
    private static readonly HeroCosmeticItem defaultInstance = new HeroCosmeticItem().MakeReadOnly();
    private static readonly string[] _heroCosmeticItemFieldNames = new string[] { "cosmetic_visual_inventory_slot", "gbid" };
    private static readonly uint[] _heroCosmeticItemFieldTags = new uint[] { 8, 21 };
    public static HeroCosmeticItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroCosmeticItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeroCosmeticItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_HeroCosmeticItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroCosmeticItem, HeroCosmeticItem.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_HeroCosmeticItem__FieldAccessorTable; }
    }
    
    public const int CosmeticVisualInventorySlotFieldNumber = 1;
    private bool hasCosmeticVisualInventorySlot;
    private int cosmeticVisualInventorySlot_;
    public bool HasCosmeticVisualInventorySlot {
      get { return hasCosmeticVisualInventorySlot; }
    }
    public int CosmeticVisualInventorySlot {
      get { return cosmeticVisualInventorySlot_; }
    }
    
    public const int GbidFieldNumber = 2;
    private bool hasGbid;
    private int gbid_;
    public bool HasGbid {
      get { return hasGbid; }
    }
    public int Gbid {
      get { return gbid_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _heroCosmeticItemFieldNames;
      if (hasCosmeticVisualInventorySlot) {
        output.WriteInt32(1, field_names[0], CosmeticVisualInventorySlot);
      }
      if (hasGbid) {
        output.WriteSFixed32(2, field_names[1], Gbid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCosmeticVisualInventorySlot) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, CosmeticVisualInventorySlot);
        }
        if (hasGbid) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(2, Gbid);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroCosmeticItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroCosmeticItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroCosmeticItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroCosmeticItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroCosmeticItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroCosmeticItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroCosmeticItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroCosmeticItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroCosmeticItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroCosmeticItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeroCosmeticItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroCosmeticItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HeroCosmeticItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeroCosmeticItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeroCosmeticItem result;
      
      private HeroCosmeticItem PrepareBuilder() {
        if (resultIsReadOnly) {
          HeroCosmeticItem original = result;
          result = new HeroCosmeticItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeroCosmeticItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.HeroCosmeticItem.Descriptor; }
      }
      
      public override HeroCosmeticItem DefaultInstanceForType {
        get { return global::D3.Leaderboard.HeroCosmeticItem.DefaultInstance; }
      }
      
      public override HeroCosmeticItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroCosmeticItem) {
          return MergeFrom((HeroCosmeticItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroCosmeticItem other) {
        if (other == global::D3.Leaderboard.HeroCosmeticItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCosmeticVisualInventorySlot) {
          CosmeticVisualInventorySlot = other.CosmeticVisualInventorySlot;
        }
        if (other.HasGbid) {
          Gbid = other.Gbid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heroCosmeticItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heroCosmeticItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCosmeticVisualInventorySlot = input.ReadInt32(ref result.cosmeticVisualInventorySlot_);
              break;
            }
            case 21: {
              result.hasGbid = input.ReadSFixed32(ref result.gbid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCosmeticVisualInventorySlot {
        get { return result.hasCosmeticVisualInventorySlot; }
      }
      public int CosmeticVisualInventorySlot {
        get { return result.CosmeticVisualInventorySlot; }
        set { SetCosmeticVisualInventorySlot(value); }
      }
      public Builder SetCosmeticVisualInventorySlot(int value) {
        PrepareBuilder();
        result.hasCosmeticVisualInventorySlot = true;
        result.cosmeticVisualInventorySlot_ = value;
        return this;
      }
      public Builder ClearCosmeticVisualInventorySlot() {
        PrepareBuilder();
        result.hasCosmeticVisualInventorySlot = false;
        result.cosmeticVisualInventorySlot_ = 0;
        return this;
      }
      
      public bool HasGbid {
        get { return result.hasGbid; }
      }
      public int Gbid {
        get { return result.Gbid; }
        set { SetGbid(value); }
      }
      public Builder SetGbid(int value) {
        PrepareBuilder();
        result.hasGbid = true;
        result.gbid_ = value;
        return this;
      }
      public Builder ClearGbid() {
        PrepareBuilder();
        result.hasGbid = false;
        result.gbid_ = 0;
        return this;
      }
    }
    static HeroCosmeticItem() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeroSnapshot : pb::GeneratedMessage<HeroSnapshot, HeroSnapshot.Builder> {
    private HeroSnapshot() { }
    private static readonly HeroSnapshot defaultInstance = new HeroSnapshot().MakeReadOnly();
    private static readonly string[] _heroSnapshotFieldNames = new string[] { "active_skills", "active_traits", "cosmetic_items", "equipped_items", "gbid_legendary_powers", "hero_id", "paragon_allocation" };
    private static readonly uint[] _heroSnapshotFieldTags = new uint[] { 10, 26, 50, 18, 61, 42, 34 };
    public static HeroSnapshot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroSnapshot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeroSnapshot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_HeroSnapshot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroSnapshot, HeroSnapshot.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_HeroSnapshot__FieldAccessorTable; }
    }
    
    public const int ActiveSkillsFieldNumber = 1;
    private bool hasActiveSkills;
    private global::D3.Profile.SkillsWithRunes activeSkills_;
    public bool HasActiveSkills {
      get { return hasActiveSkills; }
    }
    public global::D3.Profile.SkillsWithRunes ActiveSkills {
      get { return activeSkills_ ?? global::D3.Profile.SkillsWithRunes.DefaultInstance; }
    }
    
    public const int EquippedItemsFieldNumber = 2;
    private pbc::PopsicleList<global::D3.Leaderboard.HeroEquippedItem> equippedItems_ = new pbc::PopsicleList<global::D3.Leaderboard.HeroEquippedItem>();
    public scg::IList<global::D3.Leaderboard.HeroEquippedItem> EquippedItemsList {
      get { return equippedItems_; }
    }
    public int EquippedItemsCount {
      get { return equippedItems_.Count; }
    }
    public global::D3.Leaderboard.HeroEquippedItem GetEquippedItems(int index) {
      return equippedItems_[index];
    }
    
    public const int ActiveTraitsFieldNumber = 3;
    private bool hasActiveTraits;
    private global::D3.Profile.PassiveSkills activeTraits_;
    public bool HasActiveTraits {
      get { return hasActiveTraits; }
    }
    public global::D3.Profile.PassiveSkills ActiveTraits {
      get { return activeTraits_ ?? global::D3.Profile.PassiveSkills.DefaultInstance; }
    }
    
    public const int ParagonAllocationFieldNumber = 4;
    private bool hasParagonAllocation;
    private global::D3.Profile.ParagonPointAllocations paragonAllocation_;
    public bool HasParagonAllocation {
      get { return hasParagonAllocation; }
    }
    public global::D3.Profile.ParagonPointAllocations ParagonAllocation {
      get { return paragonAllocation_ ?? global::D3.Profile.ParagonPointAllocations.DefaultInstance; }
    }
    
    public const int HeroIdFieldNumber = 5;
    private bool hasHeroId;
    private global::D3.OnlineService.EntityId heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public global::D3.OnlineService.EntityId HeroId {
      get { return heroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int CosmeticItemsFieldNumber = 6;
    private pbc::PopsicleList<global::D3.Leaderboard.HeroCosmeticItem> cosmeticItems_ = new pbc::PopsicleList<global::D3.Leaderboard.HeroCosmeticItem>();
    public scg::IList<global::D3.Leaderboard.HeroCosmeticItem> CosmeticItemsList {
      get { return cosmeticItems_; }
    }
    public int CosmeticItemsCount {
      get { return cosmeticItems_.Count; }
    }
    public global::D3.Leaderboard.HeroCosmeticItem GetCosmeticItems(int index) {
      return cosmeticItems_[index];
    }
    
    public const int GbidLegendaryPowersFieldNumber = 7;
    private pbc::PopsicleList<int> gbidLegendaryPowers_ = new pbc::PopsicleList<int>();
    public scg::IList<int> GbidLegendaryPowersList {
      get { return pbc::Lists.AsReadOnly(gbidLegendaryPowers_); }
    }
    public int GbidLegendaryPowersCount {
      get { return gbidLegendaryPowers_.Count; }
    }
    public int GetGbidLegendaryPowers(int index) {
      return gbidLegendaryPowers_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasActiveSkills) {
          if (!ActiveSkills.IsInitialized) return false;
        }
        foreach (global::D3.Leaderboard.HeroEquippedItem element in EquippedItemsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasHeroId) {
          if (!HeroId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _heroSnapshotFieldNames;
      if (hasActiveSkills) {
        output.WriteMessage(1, field_names[0], ActiveSkills);
      }
      if (equippedItems_.Count > 0) {
        output.WriteMessageArray(2, field_names[3], equippedItems_);
      }
      if (hasActiveTraits) {
        output.WriteMessage(3, field_names[1], ActiveTraits);
      }
      if (hasParagonAllocation) {
        output.WriteMessage(4, field_names[6], ParagonAllocation);
      }
      if (hasHeroId) {
        output.WriteMessage(5, field_names[5], HeroId);
      }
      if (cosmeticItems_.Count > 0) {
        output.WriteMessageArray(6, field_names[2], cosmeticItems_);
      }
      if (gbidLegendaryPowers_.Count > 0) {
        output.WriteSFixed32Array(7, field_names[4], gbidLegendaryPowers_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasActiveSkills) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ActiveSkills);
        }
        foreach (global::D3.Leaderboard.HeroEquippedItem element in EquippedItemsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasActiveTraits) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ActiveTraits);
        }
        if (hasParagonAllocation) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, ParagonAllocation);
        }
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, HeroId);
        }
        foreach (global::D3.Leaderboard.HeroCosmeticItem element in CosmeticItemsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        {
          int dataSize = 0;
          dataSize = 4 * gbidLegendaryPowers_.Count;
          size += dataSize;
          size += 1 * gbidLegendaryPowers_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroSnapshot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroSnapshot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroSnapshot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroSnapshot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroSnapshot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroSnapshot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroSnapshot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroSnapshot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroSnapshot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroSnapshot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeroSnapshot MakeReadOnly() {
      equippedItems_.MakeReadOnly();
      cosmeticItems_.MakeReadOnly();
      gbidLegendaryPowers_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroSnapshot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HeroSnapshot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeroSnapshot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeroSnapshot result;
      
      private HeroSnapshot PrepareBuilder() {
        if (resultIsReadOnly) {
          HeroSnapshot original = result;
          result = new HeroSnapshot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeroSnapshot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.HeroSnapshot.Descriptor; }
      }
      
      public override HeroSnapshot DefaultInstanceForType {
        get { return global::D3.Leaderboard.HeroSnapshot.DefaultInstance; }
      }
      
      public override HeroSnapshot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroSnapshot) {
          return MergeFrom((HeroSnapshot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroSnapshot other) {
        if (other == global::D3.Leaderboard.HeroSnapshot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasActiveSkills) {
          MergeActiveSkills(other.ActiveSkills);
        }
        if (other.equippedItems_.Count != 0) {
          result.equippedItems_.Add(other.equippedItems_);
        }
        if (other.HasActiveTraits) {
          MergeActiveTraits(other.ActiveTraits);
        }
        if (other.HasParagonAllocation) {
          MergeParagonAllocation(other.ParagonAllocation);
        }
        if (other.HasHeroId) {
          MergeHeroId(other.HeroId);
        }
        if (other.cosmeticItems_.Count != 0) {
          result.cosmeticItems_.Add(other.cosmeticItems_);
        }
        if (other.gbidLegendaryPowers_.Count != 0) {
          result.gbidLegendaryPowers_.Add(other.gbidLegendaryPowers_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heroSnapshotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heroSnapshotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.Profile.SkillsWithRunes.Builder subBuilder = global::D3.Profile.SkillsWithRunes.CreateBuilder();
              if (result.hasActiveSkills) {
                subBuilder.MergeFrom(ActiveSkills);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActiveSkills = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.equippedItems_, global::D3.Leaderboard.HeroEquippedItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              global::D3.Profile.PassiveSkills.Builder subBuilder = global::D3.Profile.PassiveSkills.CreateBuilder();
              if (result.hasActiveTraits) {
                subBuilder.MergeFrom(ActiveTraits);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActiveTraits = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::D3.Profile.ParagonPointAllocations.Builder subBuilder = global::D3.Profile.ParagonPointAllocations.CreateBuilder();
              if (result.hasParagonAllocation) {
                subBuilder.MergeFrom(ParagonAllocation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ParagonAllocation = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasHeroId) {
                subBuilder.MergeFrom(HeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroId = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.cosmeticItems_, global::D3.Leaderboard.HeroCosmeticItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 58:
            case 61: {
              input.ReadSFixed32Array(tag, field_name, result.gbidLegendaryPowers_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasActiveSkills {
       get { return result.hasActiveSkills; }
      }
      public global::D3.Profile.SkillsWithRunes ActiveSkills {
        get { return result.ActiveSkills; }
        set { SetActiveSkills(value); }
      }
      public Builder SetActiveSkills(global::D3.Profile.SkillsWithRunes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActiveSkills = true;
        result.activeSkills_ = value;
        return this;
      }
      public Builder SetActiveSkills(global::D3.Profile.SkillsWithRunes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActiveSkills = true;
        result.activeSkills_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActiveSkills(global::D3.Profile.SkillsWithRunes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActiveSkills &&
            result.activeSkills_ != global::D3.Profile.SkillsWithRunes.DefaultInstance) {
            result.activeSkills_ = global::D3.Profile.SkillsWithRunes.CreateBuilder(result.activeSkills_).MergeFrom(value).BuildPartial();
        } else {
          result.activeSkills_ = value;
        }
        result.hasActiveSkills = true;
        return this;
      }
      public Builder ClearActiveSkills() {
        PrepareBuilder();
        result.hasActiveSkills = false;
        result.activeSkills_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Leaderboard.HeroEquippedItem> EquippedItemsList {
        get { return PrepareBuilder().equippedItems_; }
      }
      public int EquippedItemsCount {
        get { return result.EquippedItemsCount; }
      }
      public global::D3.Leaderboard.HeroEquippedItem GetEquippedItems(int index) {
        return result.GetEquippedItems(index);
      }
      public Builder SetEquippedItems(int index, global::D3.Leaderboard.HeroEquippedItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.equippedItems_[index] = value;
        return this;
      }
      public Builder SetEquippedItems(int index, global::D3.Leaderboard.HeroEquippedItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.equippedItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEquippedItems(global::D3.Leaderboard.HeroEquippedItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.equippedItems_.Add(value);
        return this;
      }
      public Builder AddEquippedItems(global::D3.Leaderboard.HeroEquippedItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.equippedItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEquippedItems(scg::IEnumerable<global::D3.Leaderboard.HeroEquippedItem> values) {
        PrepareBuilder();
        result.equippedItems_.Add(values);
        return this;
      }
      public Builder ClearEquippedItems() {
        PrepareBuilder();
        result.equippedItems_.Clear();
        return this;
      }
      
      public bool HasActiveTraits {
       get { return result.hasActiveTraits; }
      }
      public global::D3.Profile.PassiveSkills ActiveTraits {
        get { return result.ActiveTraits; }
        set { SetActiveTraits(value); }
      }
      public Builder SetActiveTraits(global::D3.Profile.PassiveSkills value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActiveTraits = true;
        result.activeTraits_ = value;
        return this;
      }
      public Builder SetActiveTraits(global::D3.Profile.PassiveSkills.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActiveTraits = true;
        result.activeTraits_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActiveTraits(global::D3.Profile.PassiveSkills value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActiveTraits &&
            result.activeTraits_ != global::D3.Profile.PassiveSkills.DefaultInstance) {
            result.activeTraits_ = global::D3.Profile.PassiveSkills.CreateBuilder(result.activeTraits_).MergeFrom(value).BuildPartial();
        } else {
          result.activeTraits_ = value;
        }
        result.hasActiveTraits = true;
        return this;
      }
      public Builder ClearActiveTraits() {
        PrepareBuilder();
        result.hasActiveTraits = false;
        result.activeTraits_ = null;
        return this;
      }
      
      public bool HasParagonAllocation {
       get { return result.hasParagonAllocation; }
      }
      public global::D3.Profile.ParagonPointAllocations ParagonAllocation {
        get { return result.ParagonAllocation; }
        set { SetParagonAllocation(value); }
      }
      public Builder SetParagonAllocation(global::D3.Profile.ParagonPointAllocations value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasParagonAllocation = true;
        result.paragonAllocation_ = value;
        return this;
      }
      public Builder SetParagonAllocation(global::D3.Profile.ParagonPointAllocations.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasParagonAllocation = true;
        result.paragonAllocation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeParagonAllocation(global::D3.Profile.ParagonPointAllocations value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasParagonAllocation &&
            result.paragonAllocation_ != global::D3.Profile.ParagonPointAllocations.DefaultInstance) {
            result.paragonAllocation_ = global::D3.Profile.ParagonPointAllocations.CreateBuilder(result.paragonAllocation_).MergeFrom(value).BuildPartial();
        } else {
          result.paragonAllocation_ = value;
        }
        result.hasParagonAllocation = true;
        return this;
      }
      public Builder ClearParagonAllocation() {
        PrepareBuilder();
        result.hasParagonAllocation = false;
        result.paragonAllocation_ = null;
        return this;
      }
      
      public bool HasHeroId {
       get { return result.hasHeroId; }
      }
      public global::D3.OnlineService.EntityId HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroId &&
            result.heroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.heroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.heroId_).MergeFrom(value).BuildPartial();
        } else {
          result.heroId_ = value;
        }
        result.hasHeroId = true;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Leaderboard.HeroCosmeticItem> CosmeticItemsList {
        get { return PrepareBuilder().cosmeticItems_; }
      }
      public int CosmeticItemsCount {
        get { return result.CosmeticItemsCount; }
      }
      public global::D3.Leaderboard.HeroCosmeticItem GetCosmeticItems(int index) {
        return result.GetCosmeticItems(index);
      }
      public Builder SetCosmeticItems(int index, global::D3.Leaderboard.HeroCosmeticItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cosmeticItems_[index] = value;
        return this;
      }
      public Builder SetCosmeticItems(int index, global::D3.Leaderboard.HeroCosmeticItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cosmeticItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCosmeticItems(global::D3.Leaderboard.HeroCosmeticItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cosmeticItems_.Add(value);
        return this;
      }
      public Builder AddCosmeticItems(global::D3.Leaderboard.HeroCosmeticItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cosmeticItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCosmeticItems(scg::IEnumerable<global::D3.Leaderboard.HeroCosmeticItem> values) {
        PrepareBuilder();
        result.cosmeticItems_.Add(values);
        return this;
      }
      public Builder ClearCosmeticItems() {
        PrepareBuilder();
        result.cosmeticItems_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> GbidLegendaryPowersList {
        get { return PrepareBuilder().gbidLegendaryPowers_; }
      }
      public int GbidLegendaryPowersCount {
        get { return result.GbidLegendaryPowersCount; }
      }
      public int GetGbidLegendaryPowers(int index) {
        return result.GetGbidLegendaryPowers(index);
      }
      public Builder SetGbidLegendaryPowers(int index, int value) {
        PrepareBuilder();
        result.gbidLegendaryPowers_[index] = value;
        return this;
      }
      public Builder AddGbidLegendaryPowers(int value) {
        PrepareBuilder();
        result.gbidLegendaryPowers_.Add(value);
        return this;
      }
      public Builder AddRangeGbidLegendaryPowers(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.gbidLegendaryPowers_.Add(values);
        return this;
      }
      public Builder ClearGbidLegendaryPowers() {
        PrepareBuilder();
        result.gbidLegendaryPowers_.Clear();
        return this;
      }
    }
    static HeroSnapshot() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Member : pb::GeneratedMessage<Member, Member.Builder> {
    private Member() { }
    private static readonly Member defaultInstance = new Member().MakeReadOnly();
    private static readonly string[] _memberFieldNames = new string[] { "account_id", "battle_tag", "battle_tag_override", "clan_id", "clan_name", "clan_tag", "deprecated_clan_requires_invite", "hero_alt_level", "hero_flags", "hero_gbid_class", "hero_level", "hero_name", "hero_season_created", "hero_snapshot", "hero_snapshot_available", "hero_visual_equipment" };
    private static readonly uint[] _memberFieldTags = new uint[] { 8, 82, 114, 40, 50, 58, 64, 104, 32, 29, 96, 18, 88, 122, 128, 74 };
    public static Member DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Member DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Member ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_Member__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Member, Member.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_Member__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private ulong accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public ulong AccountId {
      get { return accountId_; }
    }
    
    public const int HeroNameFieldNumber = 2;
    private bool hasHeroName;
    private string heroName_ = "";
    public bool HasHeroName {
      get { return hasHeroName; }
    }
    public string HeroName {
      get { return heroName_; }
    }
    
    public const int HeroGbidClassFieldNumber = 3;
    private bool hasHeroGbidClass;
    private uint heroGbidClass_;
    public bool HasHeroGbidClass {
      get { return hasHeroGbidClass; }
    }
    public uint HeroGbidClass {
      get { return heroGbidClass_; }
    }
    
    public const int HeroFlagsFieldNumber = 4;
    private bool hasHeroFlags;
    private uint heroFlags_;
    public bool HasHeroFlags {
      get { return hasHeroFlags; }
    }
    public uint HeroFlags {
      get { return heroFlags_; }
    }
    
    public const int HeroSeasonCreatedFieldNumber = 11;
    private bool hasHeroSeasonCreated;
    private uint heroSeasonCreated_;
    public bool HasHeroSeasonCreated {
      get { return hasHeroSeasonCreated; }
    }
    public uint HeroSeasonCreated {
      get { return heroSeasonCreated_; }
    }
    
    public const int HeroLevelFieldNumber = 12;
    private bool hasHeroLevel;
    private uint heroLevel_;
    public bool HasHeroLevel {
      get { return hasHeroLevel; }
    }
    public uint HeroLevel {
      get { return heroLevel_; }
    }
    
    public const int HeroAltLevelFieldNumber = 13;
    private bool hasHeroAltLevel;
    private uint heroAltLevel_;
    public bool HasHeroAltLevel {
      get { return hasHeroAltLevel; }
    }
    public uint HeroAltLevel {
      get { return heroAltLevel_; }
    }
    
    public const int ClanIdFieldNumber = 5;
    private bool hasClanId;
    private ulong clanId_;
    public bool HasClanId {
      get { return hasClanId; }
    }
    public ulong ClanId {
      get { return clanId_; }
    }
    
    public const int ClanNameFieldNumber = 6;
    private bool hasClanName;
    private string clanName_ = "";
    public bool HasClanName {
      get { return hasClanName; }
    }
    public string ClanName {
      get { return clanName_; }
    }
    
    public const int ClanTagFieldNumber = 7;
    private bool hasClanTag;
    private string clanTag_ = "";
    public bool HasClanTag {
      get { return hasClanTag; }
    }
    public string ClanTag {
      get { return clanTag_; }
    }
    
    public const int DeprecatedClanRequiresInviteFieldNumber = 8;
    private bool hasDeprecatedClanRequiresInvite;
    private bool deprecatedClanRequiresInvite_;
    public bool HasDeprecatedClanRequiresInvite {
      get { return hasDeprecatedClanRequiresInvite; }
    }
    public bool DeprecatedClanRequiresInvite {
      get { return deprecatedClanRequiresInvite_; }
    }
    
    public const int HeroVisualEquipmentFieldNumber = 9;
    private bool hasHeroVisualEquipment;
    private global::D3.Hero.VisualEquipment heroVisualEquipment_;
    public bool HasHeroVisualEquipment {
      get { return hasHeroVisualEquipment; }
    }
    public global::D3.Hero.VisualEquipment HeroVisualEquipment {
      get { return heroVisualEquipment_ ?? global::D3.Hero.VisualEquipment.DefaultInstance; }
    }
    
    public const int BattleTagFieldNumber = 10;
    private bool hasBattleTag;
    private string battleTag_ = "";
    public bool HasBattleTag {
      get { return hasBattleTag; }
    }
    public string BattleTag {
      get { return battleTag_; }
    }
    
    public const int BattleTagOverrideFieldNumber = 14;
    private bool hasBattleTagOverride;
    private string battleTagOverride_ = "";
    public bool HasBattleTagOverride {
      get { return hasBattleTagOverride; }
    }
    public string BattleTagOverride {
      get { return battleTagOverride_; }
    }
    
    public const int HeroSnapshotFieldNumber = 15;
    private bool hasHeroSnapshot;
    private global::D3.Leaderboard.HeroSnapshot heroSnapshot_;
    public bool HasHeroSnapshot {
      get { return hasHeroSnapshot; }
    }
    public global::D3.Leaderboard.HeroSnapshot HeroSnapshot {
      get { return heroSnapshot_ ?? global::D3.Leaderboard.HeroSnapshot.DefaultInstance; }
    }
    
    public const int HeroSnapshotAvailableFieldNumber = 16;
    private bool hasHeroSnapshotAvailable;
    private bool heroSnapshotAvailable_;
    public bool HasHeroSnapshotAvailable {
      get { return hasHeroSnapshotAvailable; }
    }
    public bool HeroSnapshotAvailable {
      get { return heroSnapshotAvailable_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasHeroSnapshot) {
          if (!HeroSnapshot.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _memberFieldNames;
      if (hasAccountId) {
        output.WriteUInt64(1, field_names[0], AccountId);
      }
      if (hasHeroName) {
        output.WriteString(2, field_names[11], HeroName);
      }
      if (hasHeroGbidClass) {
        output.WriteFixed32(3, field_names[9], HeroGbidClass);
      }
      if (hasHeroFlags) {
        output.WriteUInt32(4, field_names[8], HeroFlags);
      }
      if (hasClanId) {
        output.WriteUInt64(5, field_names[3], ClanId);
      }
      if (hasClanName) {
        output.WriteString(6, field_names[4], ClanName);
      }
      if (hasClanTag) {
        output.WriteString(7, field_names[5], ClanTag);
      }
      if (hasDeprecatedClanRequiresInvite) {
        output.WriteBool(8, field_names[6], DeprecatedClanRequiresInvite);
      }
      if (hasHeroVisualEquipment) {
        output.WriteMessage(9, field_names[15], HeroVisualEquipment);
      }
      if (hasBattleTag) {
        output.WriteString(10, field_names[1], BattleTag);
      }
      if (hasHeroSeasonCreated) {
        output.WriteUInt32(11, field_names[12], HeroSeasonCreated);
      }
      if (hasHeroLevel) {
        output.WriteUInt32(12, field_names[10], HeroLevel);
      }
      if (hasHeroAltLevel) {
        output.WriteUInt32(13, field_names[7], HeroAltLevel);
      }
      if (hasBattleTagOverride) {
        output.WriteString(14, field_names[2], BattleTagOverride);
      }
      if (hasHeroSnapshot) {
        output.WriteMessage(15, field_names[13], HeroSnapshot);
      }
      if (hasHeroSnapshotAvailable) {
        output.WriteBool(16, field_names[14], HeroSnapshotAvailable);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, AccountId);
        }
        if (hasHeroName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, HeroName);
        }
        if (hasHeroGbidClass) {
          size += pb::CodedOutputStream.ComputeFixed32Size(3, HeroGbidClass);
        }
        if (hasHeroFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, HeroFlags);
        }
        if (hasHeroSeasonCreated) {
          size += pb::CodedOutputStream.ComputeUInt32Size(11, HeroSeasonCreated);
        }
        if (hasHeroLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(12, HeroLevel);
        }
        if (hasHeroAltLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(13, HeroAltLevel);
        }
        if (hasClanId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(5, ClanId);
        }
        if (hasClanName) {
          size += pb::CodedOutputStream.ComputeStringSize(6, ClanName);
        }
        if (hasClanTag) {
          size += pb::CodedOutputStream.ComputeStringSize(7, ClanTag);
        }
        if (hasDeprecatedClanRequiresInvite) {
          size += pb::CodedOutputStream.ComputeBoolSize(8, DeprecatedClanRequiresInvite);
        }
        if (hasHeroVisualEquipment) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, HeroVisualEquipment);
        }
        if (hasBattleTag) {
          size += pb::CodedOutputStream.ComputeStringSize(10, BattleTag);
        }
        if (hasBattleTagOverride) {
          size += pb::CodedOutputStream.ComputeStringSize(14, BattleTagOverride);
        }
        if (hasHeroSnapshot) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, HeroSnapshot);
        }
        if (hasHeroSnapshotAvailable) {
          size += pb::CodedOutputStream.ComputeBoolSize(16, HeroSnapshotAvailable);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Member ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Member ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Member ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Member ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Member ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Member ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Member ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Member ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Member ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Member ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Member MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Member prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Member, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Member cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Member result;
      
      private Member PrepareBuilder() {
        if (resultIsReadOnly) {
          Member original = result;
          result = new Member();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Member MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.Member.Descriptor; }
      }
      
      public override Member DefaultInstanceForType {
        get { return global::D3.Leaderboard.Member.DefaultInstance; }
      }
      
      public override Member BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Member) {
          return MergeFrom((Member) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Member other) {
        if (other == global::D3.Leaderboard.Member.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        if (other.HasHeroName) {
          HeroName = other.HeroName;
        }
        if (other.HasHeroGbidClass) {
          HeroGbidClass = other.HeroGbidClass;
        }
        if (other.HasHeroFlags) {
          HeroFlags = other.HeroFlags;
        }
        if (other.HasHeroSeasonCreated) {
          HeroSeasonCreated = other.HeroSeasonCreated;
        }
        if (other.HasHeroLevel) {
          HeroLevel = other.HeroLevel;
        }
        if (other.HasHeroAltLevel) {
          HeroAltLevel = other.HeroAltLevel;
        }
        if (other.HasClanId) {
          ClanId = other.ClanId;
        }
        if (other.HasClanName) {
          ClanName = other.ClanName;
        }
        if (other.HasClanTag) {
          ClanTag = other.ClanTag;
        }
        if (other.HasDeprecatedClanRequiresInvite) {
          DeprecatedClanRequiresInvite = other.DeprecatedClanRequiresInvite;
        }
        if (other.HasHeroVisualEquipment) {
          MergeHeroVisualEquipment(other.HeroVisualEquipment);
        }
        if (other.HasBattleTag) {
          BattleTag = other.BattleTag;
        }
        if (other.HasBattleTagOverride) {
          BattleTagOverride = other.BattleTagOverride;
        }
        if (other.HasHeroSnapshot) {
          MergeHeroSnapshot(other.HeroSnapshot);
        }
        if (other.HasHeroSnapshotAvailable) {
          HeroSnapshotAvailable = other.HeroSnapshotAvailable;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_memberFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _memberFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAccountId = input.ReadUInt64(ref result.accountId_);
              break;
            }
            case 18: {
              result.hasHeroName = input.ReadString(ref result.heroName_);
              break;
            }
            case 29: {
              result.hasHeroGbidClass = input.ReadFixed32(ref result.heroGbidClass_);
              break;
            }
            case 32: {
              result.hasHeroFlags = input.ReadUInt32(ref result.heroFlags_);
              break;
            }
            case 40: {
              result.hasClanId = input.ReadUInt64(ref result.clanId_);
              break;
            }
            case 50: {
              result.hasClanName = input.ReadString(ref result.clanName_);
              break;
            }
            case 58: {
              result.hasClanTag = input.ReadString(ref result.clanTag_);
              break;
            }
            case 64: {
              result.hasDeprecatedClanRequiresInvite = input.ReadBool(ref result.deprecatedClanRequiresInvite_);
              break;
            }
            case 74: {
              global::D3.Hero.VisualEquipment.Builder subBuilder = global::D3.Hero.VisualEquipment.CreateBuilder();
              if (result.hasHeroVisualEquipment) {
                subBuilder.MergeFrom(HeroVisualEquipment);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroVisualEquipment = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              result.hasBattleTag = input.ReadString(ref result.battleTag_);
              break;
            }
            case 88: {
              result.hasHeroSeasonCreated = input.ReadUInt32(ref result.heroSeasonCreated_);
              break;
            }
            case 96: {
              result.hasHeroLevel = input.ReadUInt32(ref result.heroLevel_);
              break;
            }
            case 104: {
              result.hasHeroAltLevel = input.ReadUInt32(ref result.heroAltLevel_);
              break;
            }
            case 114: {
              result.hasBattleTagOverride = input.ReadString(ref result.battleTagOverride_);
              break;
            }
            case 122: {
              global::D3.Leaderboard.HeroSnapshot.Builder subBuilder = global::D3.Leaderboard.HeroSnapshot.CreateBuilder();
              if (result.hasHeroSnapshot) {
                subBuilder.MergeFrom(HeroSnapshot);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroSnapshot = subBuilder.BuildPartial();
              break;
            }
            case 128: {
              result.hasHeroSnapshotAvailable = input.ReadBool(ref result.heroSnapshotAvailable_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
        get { return result.hasAccountId; }
      }
      public ulong AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(ulong value) {
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = 0UL;
        return this;
      }
      
      public bool HasHeroName {
        get { return result.hasHeroName; }
      }
      public string HeroName {
        get { return result.HeroName; }
        set { SetHeroName(value); }
      }
      public Builder SetHeroName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroName = true;
        result.heroName_ = value;
        return this;
      }
      public Builder ClearHeroName() {
        PrepareBuilder();
        result.hasHeroName = false;
        result.heroName_ = "";
        return this;
      }
      
      public bool HasHeroGbidClass {
        get { return result.hasHeroGbidClass; }
      }
      public uint HeroGbidClass {
        get { return result.HeroGbidClass; }
        set { SetHeroGbidClass(value); }
      }
      public Builder SetHeroGbidClass(uint value) {
        PrepareBuilder();
        result.hasHeroGbidClass = true;
        result.heroGbidClass_ = value;
        return this;
      }
      public Builder ClearHeroGbidClass() {
        PrepareBuilder();
        result.hasHeroGbidClass = false;
        result.heroGbidClass_ = 0;
        return this;
      }
      
      public bool HasHeroFlags {
        get { return result.hasHeroFlags; }
      }
      public uint HeroFlags {
        get { return result.HeroFlags; }
        set { SetHeroFlags(value); }
      }
      public Builder SetHeroFlags(uint value) {
        PrepareBuilder();
        result.hasHeroFlags = true;
        result.heroFlags_ = value;
        return this;
      }
      public Builder ClearHeroFlags() {
        PrepareBuilder();
        result.hasHeroFlags = false;
        result.heroFlags_ = 0;
        return this;
      }
      
      public bool HasHeroSeasonCreated {
        get { return result.hasHeroSeasonCreated; }
      }
      public uint HeroSeasonCreated {
        get { return result.HeroSeasonCreated; }
        set { SetHeroSeasonCreated(value); }
      }
      public Builder SetHeroSeasonCreated(uint value) {
        PrepareBuilder();
        result.hasHeroSeasonCreated = true;
        result.heroSeasonCreated_ = value;
        return this;
      }
      public Builder ClearHeroSeasonCreated() {
        PrepareBuilder();
        result.hasHeroSeasonCreated = false;
        result.heroSeasonCreated_ = 0;
        return this;
      }
      
      public bool HasHeroLevel {
        get { return result.hasHeroLevel; }
      }
      public uint HeroLevel {
        get { return result.HeroLevel; }
        set { SetHeroLevel(value); }
      }
      public Builder SetHeroLevel(uint value) {
        PrepareBuilder();
        result.hasHeroLevel = true;
        result.heroLevel_ = value;
        return this;
      }
      public Builder ClearHeroLevel() {
        PrepareBuilder();
        result.hasHeroLevel = false;
        result.heroLevel_ = 0;
        return this;
      }
      
      public bool HasHeroAltLevel {
        get { return result.hasHeroAltLevel; }
      }
      public uint HeroAltLevel {
        get { return result.HeroAltLevel; }
        set { SetHeroAltLevel(value); }
      }
      public Builder SetHeroAltLevel(uint value) {
        PrepareBuilder();
        result.hasHeroAltLevel = true;
        result.heroAltLevel_ = value;
        return this;
      }
      public Builder ClearHeroAltLevel() {
        PrepareBuilder();
        result.hasHeroAltLevel = false;
        result.heroAltLevel_ = 0;
        return this;
      }
      
      public bool HasClanId {
        get { return result.hasClanId; }
      }
      public ulong ClanId {
        get { return result.ClanId; }
        set { SetClanId(value); }
      }
      public Builder SetClanId(ulong value) {
        PrepareBuilder();
        result.hasClanId = true;
        result.clanId_ = value;
        return this;
      }
      public Builder ClearClanId() {
        PrepareBuilder();
        result.hasClanId = false;
        result.clanId_ = 0UL;
        return this;
      }
      
      public bool HasClanName {
        get { return result.hasClanName; }
      }
      public string ClanName {
        get { return result.ClanName; }
        set { SetClanName(value); }
      }
      public Builder SetClanName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClanName = true;
        result.clanName_ = value;
        return this;
      }
      public Builder ClearClanName() {
        PrepareBuilder();
        result.hasClanName = false;
        result.clanName_ = "";
        return this;
      }
      
      public bool HasClanTag {
        get { return result.hasClanTag; }
      }
      public string ClanTag {
        get { return result.ClanTag; }
        set { SetClanTag(value); }
      }
      public Builder SetClanTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClanTag = true;
        result.clanTag_ = value;
        return this;
      }
      public Builder ClearClanTag() {
        PrepareBuilder();
        result.hasClanTag = false;
        result.clanTag_ = "";
        return this;
      }
      
      public bool HasDeprecatedClanRequiresInvite {
        get { return result.hasDeprecatedClanRequiresInvite; }
      }
      public bool DeprecatedClanRequiresInvite {
        get { return result.DeprecatedClanRequiresInvite; }
        set { SetDeprecatedClanRequiresInvite(value); }
      }
      public Builder SetDeprecatedClanRequiresInvite(bool value) {
        PrepareBuilder();
        result.hasDeprecatedClanRequiresInvite = true;
        result.deprecatedClanRequiresInvite_ = value;
        return this;
      }
      public Builder ClearDeprecatedClanRequiresInvite() {
        PrepareBuilder();
        result.hasDeprecatedClanRequiresInvite = false;
        result.deprecatedClanRequiresInvite_ = false;
        return this;
      }
      
      public bool HasHeroVisualEquipment {
       get { return result.hasHeroVisualEquipment; }
      }
      public global::D3.Hero.VisualEquipment HeroVisualEquipment {
        get { return result.HeroVisualEquipment; }
        set { SetHeroVisualEquipment(value); }
      }
      public Builder SetHeroVisualEquipment(global::D3.Hero.VisualEquipment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroVisualEquipment = true;
        result.heroVisualEquipment_ = value;
        return this;
      }
      public Builder SetHeroVisualEquipment(global::D3.Hero.VisualEquipment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroVisualEquipment = true;
        result.heroVisualEquipment_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroVisualEquipment(global::D3.Hero.VisualEquipment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroVisualEquipment &&
            result.heroVisualEquipment_ != global::D3.Hero.VisualEquipment.DefaultInstance) {
            result.heroVisualEquipment_ = global::D3.Hero.VisualEquipment.CreateBuilder(result.heroVisualEquipment_).MergeFrom(value).BuildPartial();
        } else {
          result.heroVisualEquipment_ = value;
        }
        result.hasHeroVisualEquipment = true;
        return this;
      }
      public Builder ClearHeroVisualEquipment() {
        PrepareBuilder();
        result.hasHeroVisualEquipment = false;
        result.heroVisualEquipment_ = null;
        return this;
      }
      
      public bool HasBattleTag {
        get { return result.hasBattleTag; }
      }
      public string BattleTag {
        get { return result.BattleTag; }
        set { SetBattleTag(value); }
      }
      public Builder SetBattleTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBattleTag = true;
        result.battleTag_ = value;
        return this;
      }
      public Builder ClearBattleTag() {
        PrepareBuilder();
        result.hasBattleTag = false;
        result.battleTag_ = "";
        return this;
      }
      
      public bool HasBattleTagOverride {
        get { return result.hasBattleTagOverride; }
      }
      public string BattleTagOverride {
        get { return result.BattleTagOverride; }
        set { SetBattleTagOverride(value); }
      }
      public Builder SetBattleTagOverride(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBattleTagOverride = true;
        result.battleTagOverride_ = value;
        return this;
      }
      public Builder ClearBattleTagOverride() {
        PrepareBuilder();
        result.hasBattleTagOverride = false;
        result.battleTagOverride_ = "";
        return this;
      }
      
      public bool HasHeroSnapshot {
       get { return result.hasHeroSnapshot; }
      }
      public global::D3.Leaderboard.HeroSnapshot HeroSnapshot {
        get { return result.HeroSnapshot; }
        set { SetHeroSnapshot(value); }
      }
      public Builder SetHeroSnapshot(global::D3.Leaderboard.HeroSnapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroSnapshot = true;
        result.heroSnapshot_ = value;
        return this;
      }
      public Builder SetHeroSnapshot(global::D3.Leaderboard.HeroSnapshot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroSnapshot = true;
        result.heroSnapshot_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroSnapshot(global::D3.Leaderboard.HeroSnapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroSnapshot &&
            result.heroSnapshot_ != global::D3.Leaderboard.HeroSnapshot.DefaultInstance) {
            result.heroSnapshot_ = global::D3.Leaderboard.HeroSnapshot.CreateBuilder(result.heroSnapshot_).MergeFrom(value).BuildPartial();
        } else {
          result.heroSnapshot_ = value;
        }
        result.hasHeroSnapshot = true;
        return this;
      }
      public Builder ClearHeroSnapshot() {
        PrepareBuilder();
        result.hasHeroSnapshot = false;
        result.heroSnapshot_ = null;
        return this;
      }
      
      public bool HasHeroSnapshotAvailable {
        get { return result.hasHeroSnapshotAvailable; }
      }
      public bool HeroSnapshotAvailable {
        get { return result.HeroSnapshotAvailable; }
        set { SetHeroSnapshotAvailable(value); }
      }
      public Builder SetHeroSnapshotAvailable(bool value) {
        PrepareBuilder();
        result.hasHeroSnapshotAvailable = true;
        result.heroSnapshotAvailable_ = value;
        return this;
      }
      public Builder ClearHeroSnapshotAvailable() {
        PrepareBuilder();
        result.hasHeroSnapshotAvailable = false;
        result.heroSnapshotAvailable_ = false;
        return this;
      }
    }
    static Member() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Metadata : pb::GeneratedMessage<Metadata, Metadata.Builder> {
    private Metadata() { }
    private static readonly Metadata defaultInstance = new Metadata().MakeReadOnly();
    private static readonly string[] _metadataFieldNames = new string[] { "DEPRECATED_expire_at_timestamp", "act_1_time_ms", "act_2_time_ms", "act_3_time_ms", "act_4_time_ms", "act_5_time_ms", "challenge_data", "cheated", "level_seed", "team_member" };
    private static readonly uint[] _metadataFieldTags = new uint[] { 88, 160, 168, 176, 184, 192, 322, 8, 245, 82 };
    public static Metadata DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Metadata DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Metadata ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_Metadata__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Metadata, Metadata.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_Metadata__FieldAccessorTable; }
    }
    
    public const int CheatedFieldNumber = 1;
    private bool hasCheated;
    private bool cheated_;
    public bool HasCheated {
      get { return hasCheated; }
    }
    public bool Cheated {
      get { return cheated_; }
    }
    
    public const int TeamMemberFieldNumber = 10;
    private pbc::PopsicleList<global::D3.Leaderboard.Member> teamMember_ = new pbc::PopsicleList<global::D3.Leaderboard.Member>();
    public scg::IList<global::D3.Leaderboard.Member> TeamMemberList {
      get { return teamMember_; }
    }
    public int TeamMemberCount {
      get { return teamMember_.Count; }
    }
    public global::D3.Leaderboard.Member GetTeamMember(int index) {
      return teamMember_[index];
    }
    
    public const int DEPRECATEDExpireAtTimestampFieldNumber = 11;
    private bool hasDEPRECATEDExpireAtTimestamp;
    private long dEPRECATEDExpireAtTimestamp_;
    public bool HasDEPRECATEDExpireAtTimestamp {
      get { return hasDEPRECATEDExpireAtTimestamp; }
    }
    public long DEPRECATEDExpireAtTimestamp {
      get { return dEPRECATEDExpireAtTimestamp_; }
    }
    
    public const int Act1TimeMsFieldNumber = 20;
    private bool hasAct1TimeMs;
    private uint act1TimeMs_;
    public bool HasAct1TimeMs {
      get { return hasAct1TimeMs; }
    }
    public uint Act1TimeMs {
      get { return act1TimeMs_; }
    }
    
    public const int Act2TimeMsFieldNumber = 21;
    private bool hasAct2TimeMs;
    private uint act2TimeMs_;
    public bool HasAct2TimeMs {
      get { return hasAct2TimeMs; }
    }
    public uint Act2TimeMs {
      get { return act2TimeMs_; }
    }
    
    public const int Act3TimeMsFieldNumber = 22;
    private bool hasAct3TimeMs;
    private uint act3TimeMs_;
    public bool HasAct3TimeMs {
      get { return hasAct3TimeMs; }
    }
    public uint Act3TimeMs {
      get { return act3TimeMs_; }
    }
    
    public const int Act4TimeMsFieldNumber = 23;
    private bool hasAct4TimeMs;
    private uint act4TimeMs_;
    public bool HasAct4TimeMs {
      get { return hasAct4TimeMs; }
    }
    public uint Act4TimeMs {
      get { return act4TimeMs_; }
    }
    
    public const int Act5TimeMsFieldNumber = 24;
    private bool hasAct5TimeMs;
    private uint act5TimeMs_;
    public bool HasAct5TimeMs {
      get { return hasAct5TimeMs; }
    }
    public uint Act5TimeMs {
      get { return act5TimeMs_; }
    }
    
    public const int LevelSeedFieldNumber = 30;
    private bool hasLevelSeed;
    private uint levelSeed_;
    public bool HasLevelSeed {
      get { return hasLevelSeed; }
    }
    public uint LevelSeed {
      get { return levelSeed_; }
    }
    
    public const int ChallengeDataFieldNumber = 40;
    private bool hasChallengeData;
    private global::D3.Leaderboard.WeeklyChallengeData challengeData_;
    public bool HasChallengeData {
      get { return hasChallengeData; }
    }
    public global::D3.Leaderboard.WeeklyChallengeData ChallengeData {
      get { return challengeData_ ?? global::D3.Leaderboard.WeeklyChallengeData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Leaderboard.Member element in TeamMemberList) {
          if (!element.IsInitialized) return false;
        }
        if (HasChallengeData) {
          if (!ChallengeData.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _metadataFieldNames;
      if (hasCheated) {
        output.WriteBool(1, field_names[7], Cheated);
      }
      if (teamMember_.Count > 0) {
        output.WriteMessageArray(10, field_names[9], teamMember_);
      }
      if (hasDEPRECATEDExpireAtTimestamp) {
        output.WriteInt64(11, field_names[0], DEPRECATEDExpireAtTimestamp);
      }
      if (hasAct1TimeMs) {
        output.WriteUInt32(20, field_names[1], Act1TimeMs);
      }
      if (hasAct2TimeMs) {
        output.WriteUInt32(21, field_names[2], Act2TimeMs);
      }
      if (hasAct3TimeMs) {
        output.WriteUInt32(22, field_names[3], Act3TimeMs);
      }
      if (hasAct4TimeMs) {
        output.WriteUInt32(23, field_names[4], Act4TimeMs);
      }
      if (hasAct5TimeMs) {
        output.WriteUInt32(24, field_names[5], Act5TimeMs);
      }
      if (hasLevelSeed) {
        output.WriteFixed32(30, field_names[8], LevelSeed);
      }
      if (hasChallengeData) {
        output.WriteMessage(40, field_names[6], ChallengeData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCheated) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, Cheated);
        }
        foreach (global::D3.Leaderboard.Member element in TeamMemberList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        if (hasDEPRECATEDExpireAtTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(11, DEPRECATEDExpireAtTimestamp);
        }
        if (hasAct1TimeMs) {
          size += pb::CodedOutputStream.ComputeUInt32Size(20, Act1TimeMs);
        }
        if (hasAct2TimeMs) {
          size += pb::CodedOutputStream.ComputeUInt32Size(21, Act2TimeMs);
        }
        if (hasAct3TimeMs) {
          size += pb::CodedOutputStream.ComputeUInt32Size(22, Act3TimeMs);
        }
        if (hasAct4TimeMs) {
          size += pb::CodedOutputStream.ComputeUInt32Size(23, Act4TimeMs);
        }
        if (hasAct5TimeMs) {
          size += pb::CodedOutputStream.ComputeUInt32Size(24, Act5TimeMs);
        }
        if (hasLevelSeed) {
          size += pb::CodedOutputStream.ComputeFixed32Size(30, LevelSeed);
        }
        if (hasChallengeData) {
          size += pb::CodedOutputStream.ComputeMessageSize(40, ChallengeData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Metadata ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Metadata ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Metadata ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Metadata ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Metadata ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Metadata ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Metadata ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Metadata ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Metadata ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Metadata ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Metadata MakeReadOnly() {
      teamMember_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Metadata prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Metadata, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Metadata cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Metadata result;
      
      private Metadata PrepareBuilder() {
        if (resultIsReadOnly) {
          Metadata original = result;
          result = new Metadata();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Metadata MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.Metadata.Descriptor; }
      }
      
      public override Metadata DefaultInstanceForType {
        get { return global::D3.Leaderboard.Metadata.DefaultInstance; }
      }
      
      public override Metadata BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Metadata) {
          return MergeFrom((Metadata) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Metadata other) {
        if (other == global::D3.Leaderboard.Metadata.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCheated) {
          Cheated = other.Cheated;
        }
        if (other.teamMember_.Count != 0) {
          result.teamMember_.Add(other.teamMember_);
        }
        if (other.HasDEPRECATEDExpireAtTimestamp) {
          DEPRECATEDExpireAtTimestamp = other.DEPRECATEDExpireAtTimestamp;
        }
        if (other.HasAct1TimeMs) {
          Act1TimeMs = other.Act1TimeMs;
        }
        if (other.HasAct2TimeMs) {
          Act2TimeMs = other.Act2TimeMs;
        }
        if (other.HasAct3TimeMs) {
          Act3TimeMs = other.Act3TimeMs;
        }
        if (other.HasAct4TimeMs) {
          Act4TimeMs = other.Act4TimeMs;
        }
        if (other.HasAct5TimeMs) {
          Act5TimeMs = other.Act5TimeMs;
        }
        if (other.HasLevelSeed) {
          LevelSeed = other.LevelSeed;
        }
        if (other.HasChallengeData) {
          MergeChallengeData(other.ChallengeData);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_metadataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _metadataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCheated = input.ReadBool(ref result.cheated_);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.teamMember_, global::D3.Leaderboard.Member.DefaultInstance, extensionRegistry);
              break;
            }
            case 88: {
              result.hasDEPRECATEDExpireAtTimestamp = input.ReadInt64(ref result.dEPRECATEDExpireAtTimestamp_);
              break;
            }
            case 160: {
              result.hasAct1TimeMs = input.ReadUInt32(ref result.act1TimeMs_);
              break;
            }
            case 168: {
              result.hasAct2TimeMs = input.ReadUInt32(ref result.act2TimeMs_);
              break;
            }
            case 176: {
              result.hasAct3TimeMs = input.ReadUInt32(ref result.act3TimeMs_);
              break;
            }
            case 184: {
              result.hasAct4TimeMs = input.ReadUInt32(ref result.act4TimeMs_);
              break;
            }
            case 192: {
              result.hasAct5TimeMs = input.ReadUInt32(ref result.act5TimeMs_);
              break;
            }
            case 245: {
              result.hasLevelSeed = input.ReadFixed32(ref result.levelSeed_);
              break;
            }
            case 322: {
              global::D3.Leaderboard.WeeklyChallengeData.Builder subBuilder = global::D3.Leaderboard.WeeklyChallengeData.CreateBuilder();
              if (result.hasChallengeData) {
                subBuilder.MergeFrom(ChallengeData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChallengeData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCheated {
        get { return result.hasCheated; }
      }
      public bool Cheated {
        get { return result.Cheated; }
        set { SetCheated(value); }
      }
      public Builder SetCheated(bool value) {
        PrepareBuilder();
        result.hasCheated = true;
        result.cheated_ = value;
        return this;
      }
      public Builder ClearCheated() {
        PrepareBuilder();
        result.hasCheated = false;
        result.cheated_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Leaderboard.Member> TeamMemberList {
        get { return PrepareBuilder().teamMember_; }
      }
      public int TeamMemberCount {
        get { return result.TeamMemberCount; }
      }
      public global::D3.Leaderboard.Member GetTeamMember(int index) {
        return result.GetTeamMember(index);
      }
      public Builder SetTeamMember(int index, global::D3.Leaderboard.Member value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.teamMember_[index] = value;
        return this;
      }
      public Builder SetTeamMember(int index, global::D3.Leaderboard.Member.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.teamMember_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTeamMember(global::D3.Leaderboard.Member value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.teamMember_.Add(value);
        return this;
      }
      public Builder AddTeamMember(global::D3.Leaderboard.Member.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.teamMember_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTeamMember(scg::IEnumerable<global::D3.Leaderboard.Member> values) {
        PrepareBuilder();
        result.teamMember_.Add(values);
        return this;
      }
      public Builder ClearTeamMember() {
        PrepareBuilder();
        result.teamMember_.Clear();
        return this;
      }
      
      public bool HasDEPRECATEDExpireAtTimestamp {
        get { return result.hasDEPRECATEDExpireAtTimestamp; }
      }
      public long DEPRECATEDExpireAtTimestamp {
        get { return result.DEPRECATEDExpireAtTimestamp; }
        set { SetDEPRECATEDExpireAtTimestamp(value); }
      }
      public Builder SetDEPRECATEDExpireAtTimestamp(long value) {
        PrepareBuilder();
        result.hasDEPRECATEDExpireAtTimestamp = true;
        result.dEPRECATEDExpireAtTimestamp_ = value;
        return this;
      }
      public Builder ClearDEPRECATEDExpireAtTimestamp() {
        PrepareBuilder();
        result.hasDEPRECATEDExpireAtTimestamp = false;
        result.dEPRECATEDExpireAtTimestamp_ = 0L;
        return this;
      }
      
      public bool HasAct1TimeMs {
        get { return result.hasAct1TimeMs; }
      }
      public uint Act1TimeMs {
        get { return result.Act1TimeMs; }
        set { SetAct1TimeMs(value); }
      }
      public Builder SetAct1TimeMs(uint value) {
        PrepareBuilder();
        result.hasAct1TimeMs = true;
        result.act1TimeMs_ = value;
        return this;
      }
      public Builder ClearAct1TimeMs() {
        PrepareBuilder();
        result.hasAct1TimeMs = false;
        result.act1TimeMs_ = 0;
        return this;
      }
      
      public bool HasAct2TimeMs {
        get { return result.hasAct2TimeMs; }
      }
      public uint Act2TimeMs {
        get { return result.Act2TimeMs; }
        set { SetAct2TimeMs(value); }
      }
      public Builder SetAct2TimeMs(uint value) {
        PrepareBuilder();
        result.hasAct2TimeMs = true;
        result.act2TimeMs_ = value;
        return this;
      }
      public Builder ClearAct2TimeMs() {
        PrepareBuilder();
        result.hasAct2TimeMs = false;
        result.act2TimeMs_ = 0;
        return this;
      }
      
      public bool HasAct3TimeMs {
        get { return result.hasAct3TimeMs; }
      }
      public uint Act3TimeMs {
        get { return result.Act3TimeMs; }
        set { SetAct3TimeMs(value); }
      }
      public Builder SetAct3TimeMs(uint value) {
        PrepareBuilder();
        result.hasAct3TimeMs = true;
        result.act3TimeMs_ = value;
        return this;
      }
      public Builder ClearAct3TimeMs() {
        PrepareBuilder();
        result.hasAct3TimeMs = false;
        result.act3TimeMs_ = 0;
        return this;
      }
      
      public bool HasAct4TimeMs {
        get { return result.hasAct4TimeMs; }
      }
      public uint Act4TimeMs {
        get { return result.Act4TimeMs; }
        set { SetAct4TimeMs(value); }
      }
      public Builder SetAct4TimeMs(uint value) {
        PrepareBuilder();
        result.hasAct4TimeMs = true;
        result.act4TimeMs_ = value;
        return this;
      }
      public Builder ClearAct4TimeMs() {
        PrepareBuilder();
        result.hasAct4TimeMs = false;
        result.act4TimeMs_ = 0;
        return this;
      }
      
      public bool HasAct5TimeMs {
        get { return result.hasAct5TimeMs; }
      }
      public uint Act5TimeMs {
        get { return result.Act5TimeMs; }
        set { SetAct5TimeMs(value); }
      }
      public Builder SetAct5TimeMs(uint value) {
        PrepareBuilder();
        result.hasAct5TimeMs = true;
        result.act5TimeMs_ = value;
        return this;
      }
      public Builder ClearAct5TimeMs() {
        PrepareBuilder();
        result.hasAct5TimeMs = false;
        result.act5TimeMs_ = 0;
        return this;
      }
      
      public bool HasLevelSeed {
        get { return result.hasLevelSeed; }
      }
      public uint LevelSeed {
        get { return result.LevelSeed; }
        set { SetLevelSeed(value); }
      }
      public Builder SetLevelSeed(uint value) {
        PrepareBuilder();
        result.hasLevelSeed = true;
        result.levelSeed_ = value;
        return this;
      }
      public Builder ClearLevelSeed() {
        PrepareBuilder();
        result.hasLevelSeed = false;
        result.levelSeed_ = 0;
        return this;
      }
      
      public bool HasChallengeData {
       get { return result.hasChallengeData; }
      }
      public global::D3.Leaderboard.WeeklyChallengeData ChallengeData {
        get { return result.ChallengeData; }
        set { SetChallengeData(value); }
      }
      public Builder SetChallengeData(global::D3.Leaderboard.WeeklyChallengeData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChallengeData = true;
        result.challengeData_ = value;
        return this;
      }
      public Builder SetChallengeData(global::D3.Leaderboard.WeeklyChallengeData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChallengeData = true;
        result.challengeData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChallengeData(global::D3.Leaderboard.WeeklyChallengeData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChallengeData &&
            result.challengeData_ != global::D3.Leaderboard.WeeklyChallengeData.DefaultInstance) {
            result.challengeData_ = global::D3.Leaderboard.WeeklyChallengeData.CreateBuilder(result.challengeData_).MergeFrom(value).BuildPartial();
        } else {
          result.challengeData_ = value;
        }
        result.hasChallengeData = true;
        return this;
      }
      public Builder ClearChallengeData() {
        PrepareBuilder();
        result.hasChallengeData = false;
        result.challengeData_ = null;
        return this;
      }
    }
    static Metadata() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CompressedMetadata : pb::GeneratedMessage<CompressedMetadata, CompressedMetadata.Builder> {
    private CompressedMetadata() { }
    private static readonly CompressedMetadata defaultInstance = new CompressedMetadata().MakeReadOnly();
    private static readonly string[] _compressedMetadataFieldNames = new string[] { "compressed_data", "uncompressed_size" };
    private static readonly uint[] _compressedMetadataFieldTags = new uint[] { 18, 8 };
    public static CompressedMetadata DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CompressedMetadata DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CompressedMetadata ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_CompressedMetadata__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CompressedMetadata, CompressedMetadata.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_CompressedMetadata__FieldAccessorTable; }
    }
    
    public const int UncompressedSizeFieldNumber = 1;
    private bool hasUncompressedSize;
    private int uncompressedSize_;
    public bool HasUncompressedSize {
      get { return hasUncompressedSize; }
    }
    public int UncompressedSize {
      get { return uncompressedSize_; }
    }
    
    public const int CompressedDataFieldNumber = 2;
    private bool hasCompressedData;
    private pb::ByteString compressedData_ = pb::ByteString.Empty;
    public bool HasCompressedData {
      get { return hasCompressedData; }
    }
    public pb::ByteString CompressedData {
      get { return compressedData_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _compressedMetadataFieldNames;
      if (hasUncompressedSize) {
        output.WriteInt32(1, field_names[1], UncompressedSize);
      }
      if (hasCompressedData) {
        output.WriteBytes(2, field_names[0], CompressedData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUncompressedSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, UncompressedSize);
        }
        if (hasCompressedData) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, CompressedData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CompressedMetadata ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CompressedMetadata ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CompressedMetadata ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CompressedMetadata ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CompressedMetadata ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CompressedMetadata ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CompressedMetadata ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CompressedMetadata ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CompressedMetadata ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CompressedMetadata ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CompressedMetadata MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CompressedMetadata prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CompressedMetadata, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CompressedMetadata cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CompressedMetadata result;
      
      private CompressedMetadata PrepareBuilder() {
        if (resultIsReadOnly) {
          CompressedMetadata original = result;
          result = new CompressedMetadata();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CompressedMetadata MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.CompressedMetadata.Descriptor; }
      }
      
      public override CompressedMetadata DefaultInstanceForType {
        get { return global::D3.Leaderboard.CompressedMetadata.DefaultInstance; }
      }
      
      public override CompressedMetadata BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CompressedMetadata) {
          return MergeFrom((CompressedMetadata) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CompressedMetadata other) {
        if (other == global::D3.Leaderboard.CompressedMetadata.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUncompressedSize) {
          UncompressedSize = other.UncompressedSize;
        }
        if (other.HasCompressedData) {
          CompressedData = other.CompressedData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_compressedMetadataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _compressedMetadataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUncompressedSize = input.ReadInt32(ref result.uncompressedSize_);
              break;
            }
            case 18: {
              result.hasCompressedData = input.ReadBytes(ref result.compressedData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUncompressedSize {
        get { return result.hasUncompressedSize; }
      }
      public int UncompressedSize {
        get { return result.UncompressedSize; }
        set { SetUncompressedSize(value); }
      }
      public Builder SetUncompressedSize(int value) {
        PrepareBuilder();
        result.hasUncompressedSize = true;
        result.uncompressedSize_ = value;
        return this;
      }
      public Builder ClearUncompressedSize() {
        PrepareBuilder();
        result.hasUncompressedSize = false;
        result.uncompressedSize_ = 0;
        return this;
      }
      
      public bool HasCompressedData {
        get { return result.hasCompressedData; }
      }
      public pb::ByteString CompressedData {
        get { return result.CompressedData; }
        set { SetCompressedData(value); }
      }
      public Builder SetCompressedData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCompressedData = true;
        result.compressedData_ = value;
        return this;
      }
      public Builder ClearCompressedData() {
        PrepareBuilder();
        result.hasCompressedData = false;
        result.compressedData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static CompressedMetadata() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Slot : pb::GeneratedMessage<Slot, Slot.Builder> {
    private Slot() { }
    private static readonly Slot defaultInstance = new Slot().MakeReadOnly();
    private static readonly string[] _slotFieldNames = new string[] { "game_account_id", "metadata", "score", "timestamp" };
    private static readonly uint[] _slotFieldTags = new uint[] { 8, 34, 17, 25 };
    public static Slot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Slot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Slot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_Slot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Slot, Slot.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_Slot__FieldAccessorTable; }
    }
    
    public const int GameAccountIdFieldNumber = 1;
    private bool hasGameAccountId;
    private ulong gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public ulong GameAccountId {
      get { return gameAccountId_; }
    }
    
    public const int ScoreFieldNumber = 2;
    private bool hasScore;
    private ulong score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public ulong Score {
      get { return score_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private ulong timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public ulong Timestamp {
      get { return timestamp_; }
    }
    
    public const int MetadataFieldNumber = 4;
    private bool hasMetadata;
    private global::D3.Leaderboard.Metadata metadata_;
    public bool HasMetadata {
      get { return hasMetadata; }
    }
    public global::D3.Leaderboard.Metadata Metadata {
      get { return metadata_ ?? global::D3.Leaderboard.Metadata.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameAccountId) return false;
        if (!hasScore) return false;
        if (!hasTimestamp) return false;
        if (HasMetadata) {
          if (!Metadata.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _slotFieldNames;
      if (hasGameAccountId) {
        output.WriteUInt64(1, field_names[0], GameAccountId);
      }
      if (hasScore) {
        output.WriteFixed64(2, field_names[2], Score);
      }
      if (hasTimestamp) {
        output.WriteFixed64(3, field_names[3], Timestamp);
      }
      if (hasMetadata) {
        output.WriteMessage(4, field_names[1], Metadata);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GameAccountId);
        }
        if (hasScore) {
          size += pb::CodedOutputStream.ComputeFixed64Size(2, Score);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeFixed64Size(3, Timestamp);
        }
        if (hasMetadata) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Metadata);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Slot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Slot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Slot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Slot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Slot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Slot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Slot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Slot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Slot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Slot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Slot MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Slot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Slot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Slot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Slot result;
      
      private Slot PrepareBuilder() {
        if (resultIsReadOnly) {
          Slot original = result;
          result = new Slot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Slot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.Slot.Descriptor; }
      }
      
      public override Slot DefaultInstanceForType {
        get { return global::D3.Leaderboard.Slot.DefaultInstance; }
      }
      
      public override Slot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Slot) {
          return MergeFrom((Slot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Slot other) {
        if (other == global::D3.Leaderboard.Slot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameAccountId) {
          GameAccountId = other.GameAccountId;
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasMetadata) {
          MergeMetadata(other.Metadata);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_slotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _slotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGameAccountId = input.ReadUInt64(ref result.gameAccountId_);
              break;
            }
            case 17: {
              result.hasScore = input.ReadFixed64(ref result.score_);
              break;
            }
            case 25: {
              result.hasTimestamp = input.ReadFixed64(ref result.timestamp_);
              break;
            }
            case 34: {
              global::D3.Leaderboard.Metadata.Builder subBuilder = global::D3.Leaderboard.Metadata.CreateBuilder();
              if (result.hasMetadata) {
                subBuilder.MergeFrom(Metadata);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Metadata = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameAccountId {
        get { return result.hasGameAccountId; }
      }
      public ulong GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(ulong value) {
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = 0UL;
        return this;
      }
      
      public bool HasScore {
        get { return result.hasScore; }
      }
      public ulong Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(ulong value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public ulong Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(ulong value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0;
        return this;
      }
      
      public bool HasMetadata {
       get { return result.hasMetadata; }
      }
      public global::D3.Leaderboard.Metadata Metadata {
        get { return result.Metadata; }
        set { SetMetadata(value); }
      }
      public Builder SetMetadata(global::D3.Leaderboard.Metadata value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMetadata = true;
        result.metadata_ = value;
        return this;
      }
      public Builder SetMetadata(global::D3.Leaderboard.Metadata.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMetadata = true;
        result.metadata_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMetadata(global::D3.Leaderboard.Metadata value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMetadata &&
            result.metadata_ != global::D3.Leaderboard.Metadata.DefaultInstance) {
            result.metadata_ = global::D3.Leaderboard.Metadata.CreateBuilder(result.metadata_).MergeFrom(value).BuildPartial();
        } else {
          result.metadata_ = value;
        }
        result.hasMetadata = true;
        return this;
      }
      public Builder ClearMetadata() {
        PrepareBuilder();
        result.hasMetadata = false;
        result.metadata_ = null;
        return this;
      }
    }
    static Slot() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Score : pb::GeneratedMessage<Score, Score.Builder> {
    private Score() { }
    private static readonly Score defaultInstance = new Score().MakeReadOnly();
    private static readonly string[] _scoreFieldNames = new string[] { "game_account_id", "leaderboard_id", "metadata", "scope_id", "score", "score_band", "score_player_count", "timestamp" };
    private static readonly uint[] _scoreFieldTags = new uint[] { 48, 8, 42, 16, 25, 56, 64, 33 };
    public static Score DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Score DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Score ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_Score__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Score, Score.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_Score__FieldAccessorTable; }
    }
    
    public const int LeaderboardIdFieldNumber = 1;
    private bool hasLeaderboardId;
    private ulong leaderboardId_;
    public bool HasLeaderboardId {
      get { return hasLeaderboardId; }
    }
    public ulong LeaderboardId {
      get { return leaderboardId_; }
    }
    
    public const int ScopeIdFieldNumber = 2;
    private bool hasScopeId;
    private uint scopeId_;
    public bool HasScopeId {
      get { return hasScopeId; }
    }
    public uint ScopeId {
      get { return scopeId_; }
    }
    
    public const int Score_FieldNumber = 3;
    private bool hasScore_;
    private ulong score_;
    public bool HasScore_ {
      get { return hasScore_; }
    }
    public ulong Score_ {
      get { return score_; }
    }
    
    public const int TimestampFieldNumber = 4;
    private bool hasTimestamp;
    private ulong timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public ulong Timestamp {
      get { return timestamp_; }
    }
    
    public const int MetadataFieldNumber = 5;
    private bool hasMetadata;
    private global::D3.Leaderboard.Metadata metadata_;
    public bool HasMetadata {
      get { return hasMetadata; }
    }
    public global::D3.Leaderboard.Metadata Metadata {
      get { return metadata_ ?? global::D3.Leaderboard.Metadata.DefaultInstance; }
    }
    
    public const int GameAccountIdFieldNumber = 6;
    private bool hasGameAccountId;
    private ulong gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public ulong GameAccountId {
      get { return gameAccountId_; }
    }
    
    public const int ScoreBandFieldNumber = 7;
    private bool hasScoreBand;
    private uint scoreBand_;
    public bool HasScoreBand {
      get { return hasScoreBand; }
    }
    public uint ScoreBand {
      get { return scoreBand_; }
    }
    
    public const int ScorePlayerCountFieldNumber = 8;
    private bool hasScorePlayerCount;
    private uint scorePlayerCount_;
    public bool HasScorePlayerCount {
      get { return hasScorePlayerCount; }
    }
    public uint ScorePlayerCount {
      get { return scorePlayerCount_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLeaderboardId) return false;
        if (!hasScopeId) return false;
        if (!hasScore_) return false;
        if (!hasTimestamp) return false;
        if (HasMetadata) {
          if (!Metadata.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _scoreFieldNames;
      if (hasLeaderboardId) {
        output.WriteUInt64(1, field_names[1], LeaderboardId);
      }
      if (hasScopeId) {
        output.WriteUInt32(2, field_names[3], ScopeId);
      }
      if (hasScore_) {
        output.WriteFixed64(3, field_names[4], Score_);
      }
      if (hasTimestamp) {
        output.WriteFixed64(4, field_names[7], Timestamp);
      }
      if (hasMetadata) {
        output.WriteMessage(5, field_names[2], Metadata);
      }
      if (hasGameAccountId) {
        output.WriteUInt64(6, field_names[0], GameAccountId);
      }
      if (hasScoreBand) {
        output.WriteUInt32(7, field_names[5], ScoreBand);
      }
      if (hasScorePlayerCount) {
        output.WriteUInt32(8, field_names[6], ScorePlayerCount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLeaderboardId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, LeaderboardId);
        }
        if (hasScopeId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, ScopeId);
        }
        if (hasScore_) {
          size += pb::CodedOutputStream.ComputeFixed64Size(3, Score_);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeFixed64Size(4, Timestamp);
        }
        if (hasMetadata) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Metadata);
        }
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(6, GameAccountId);
        }
        if (hasScoreBand) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, ScoreBand);
        }
        if (hasScorePlayerCount) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, ScorePlayerCount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Score ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Score ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Score ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Score ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Score ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Score ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Score ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Score ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Score ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Score ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Score MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Score prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Score, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Score cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Score result;
      
      private Score PrepareBuilder() {
        if (resultIsReadOnly) {
          Score original = result;
          result = new Score();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Score MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.Score.Descriptor; }
      }
      
      public override Score DefaultInstanceForType {
        get { return global::D3.Leaderboard.Score.DefaultInstance; }
      }
      
      public override Score BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Score) {
          return MergeFrom((Score) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Score other) {
        if (other == global::D3.Leaderboard.Score.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLeaderboardId) {
          LeaderboardId = other.LeaderboardId;
        }
        if (other.HasScopeId) {
          ScopeId = other.ScopeId;
        }
        if (other.HasScore_) {
          Score_ = other.Score_;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasMetadata) {
          MergeMetadata(other.Metadata);
        }
        if (other.HasGameAccountId) {
          GameAccountId = other.GameAccountId;
        }
        if (other.HasScoreBand) {
          ScoreBand = other.ScoreBand;
        }
        if (other.HasScorePlayerCount) {
          ScorePlayerCount = other.ScorePlayerCount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_scoreFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _scoreFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLeaderboardId = input.ReadUInt64(ref result.leaderboardId_);
              break;
            }
            case 16: {
              result.hasScopeId = input.ReadUInt32(ref result.scopeId_);
              break;
            }
            case 25: {
              result.hasScore_ = input.ReadFixed64(ref result.score_);
              break;
            }
            case 33: {
              result.hasTimestamp = input.ReadFixed64(ref result.timestamp_);
              break;
            }
            case 42: {
              global::D3.Leaderboard.Metadata.Builder subBuilder = global::D3.Leaderboard.Metadata.CreateBuilder();
              if (result.hasMetadata) {
                subBuilder.MergeFrom(Metadata);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Metadata = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              result.hasGameAccountId = input.ReadUInt64(ref result.gameAccountId_);
              break;
            }
            case 56: {
              result.hasScoreBand = input.ReadUInt32(ref result.scoreBand_);
              break;
            }
            case 64: {
              result.hasScorePlayerCount = input.ReadUInt32(ref result.scorePlayerCount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLeaderboardId {
        get { return result.hasLeaderboardId; }
      }
      public ulong LeaderboardId {
        get { return result.LeaderboardId; }
        set { SetLeaderboardId(value); }
      }
      public Builder SetLeaderboardId(ulong value) {
        PrepareBuilder();
        result.hasLeaderboardId = true;
        result.leaderboardId_ = value;
        return this;
      }
      public Builder ClearLeaderboardId() {
        PrepareBuilder();
        result.hasLeaderboardId = false;
        result.leaderboardId_ = 0UL;
        return this;
      }
      
      public bool HasScopeId {
        get { return result.hasScopeId; }
      }
      public uint ScopeId {
        get { return result.ScopeId; }
        set { SetScopeId(value); }
      }
      public Builder SetScopeId(uint value) {
        PrepareBuilder();
        result.hasScopeId = true;
        result.scopeId_ = value;
        return this;
      }
      public Builder ClearScopeId() {
        PrepareBuilder();
        result.hasScopeId = false;
        result.scopeId_ = 0;
        return this;
      }
      
      public bool HasScore_ {
        get { return result.hasScore_; }
      }
      public ulong Score_ {
        get { return result.Score_; }
        set { SetScore_(value); }
      }
      public Builder SetScore_(ulong value) {
        PrepareBuilder();
        result.hasScore_ = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore_() {
        PrepareBuilder();
        result.hasScore_ = false;
        result.score_ = 0;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public ulong Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(ulong value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0;
        return this;
      }
      
      public bool HasMetadata {
       get { return result.hasMetadata; }
      }
      public global::D3.Leaderboard.Metadata Metadata {
        get { return result.Metadata; }
        set { SetMetadata(value); }
      }
      public Builder SetMetadata(global::D3.Leaderboard.Metadata value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMetadata = true;
        result.metadata_ = value;
        return this;
      }
      public Builder SetMetadata(global::D3.Leaderboard.Metadata.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMetadata = true;
        result.metadata_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMetadata(global::D3.Leaderboard.Metadata value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMetadata &&
            result.metadata_ != global::D3.Leaderboard.Metadata.DefaultInstance) {
            result.metadata_ = global::D3.Leaderboard.Metadata.CreateBuilder(result.metadata_).MergeFrom(value).BuildPartial();
        } else {
          result.metadata_ = value;
        }
        result.hasMetadata = true;
        return this;
      }
      public Builder ClearMetadata() {
        PrepareBuilder();
        result.hasMetadata = false;
        result.metadata_ = null;
        return this;
      }
      
      public bool HasGameAccountId {
        get { return result.hasGameAccountId; }
      }
      public ulong GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(ulong value) {
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = 0UL;
        return this;
      }
      
      public bool HasScoreBand {
        get { return result.hasScoreBand; }
      }
      public uint ScoreBand {
        get { return result.ScoreBand; }
        set { SetScoreBand(value); }
      }
      public Builder SetScoreBand(uint value) {
        PrepareBuilder();
        result.hasScoreBand = true;
        result.scoreBand_ = value;
        return this;
      }
      public Builder ClearScoreBand() {
        PrepareBuilder();
        result.hasScoreBand = false;
        result.scoreBand_ = 0;
        return this;
      }
      
      public bool HasScorePlayerCount {
        get { return result.hasScorePlayerCount; }
      }
      public uint ScorePlayerCount {
        get { return result.ScorePlayerCount; }
        set { SetScorePlayerCount(value); }
      }
      public Builder SetScorePlayerCount(uint value) {
        PrepareBuilder();
        result.hasScorePlayerCount = true;
        result.scorePlayerCount_ = value;
        return this;
      }
      public Builder ClearScorePlayerCount() {
        PrepareBuilder();
        result.hasScorePlayerCount = false;
        result.scorePlayerCount_ = 0;
        return this;
      }
    }
    static Score() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PostScore : pb::GeneratedMessage<PostScore, PostScore.Builder> {
    private PostScore() { }
    private static readonly PostScore defaultInstance = new PostScore().MakeReadOnly();
    private static readonly string[] _postScoreFieldNames = new string[] { "category_id", "game_account_id", "generating_game_id", "generating_service", "metadata", "partition_id", "scope_id", "score", "service_hash", "timestamp" };
    private static readonly uint[] _postScoreFieldTags = new uint[] { 8, 24, 88, 82, 50, 64, 16, 33, 77, 41 };
    public static PostScore DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PostScore DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PostScore ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_PostScore__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PostScore, PostScore.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_PostScore__FieldAccessorTable; }
    }
    
    public const int CategoryIdFieldNumber = 1;
    private bool hasCategoryId;
    private ulong categoryId_;
    public bool HasCategoryId {
      get { return hasCategoryId; }
    }
    public ulong CategoryId {
      get { return categoryId_; }
    }
    
    public const int ScopeIdFieldNumber = 2;
    private bool hasScopeId;
    private uint scopeId_;
    public bool HasScopeId {
      get { return hasScopeId; }
    }
    public uint ScopeId {
      get { return scopeId_; }
    }
    
    public const int GameAccountIdFieldNumber = 3;
    private bool hasGameAccountId;
    private ulong gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public ulong GameAccountId {
      get { return gameAccountId_; }
    }
    
    public const int ScoreFieldNumber = 4;
    private bool hasScore;
    private ulong score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public ulong Score {
      get { return score_; }
    }
    
    public const int TimestampFieldNumber = 5;
    private bool hasTimestamp;
    private ulong timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public ulong Timestamp {
      get { return timestamp_; }
    }
    
    public const int MetadataFieldNumber = 6;
    private bool hasMetadata;
    private global::D3.Leaderboard.Metadata metadata_;
    public bool HasMetadata {
      get { return hasMetadata; }
    }
    public global::D3.Leaderboard.Metadata Metadata {
      get { return metadata_ ?? global::D3.Leaderboard.Metadata.DefaultInstance; }
    }
    
    public const int PartitionIdFieldNumber = 8;
    private bool hasPartitionId;
    private uint partitionId_;
    public bool HasPartitionId {
      get { return hasPartitionId; }
    }
    public uint PartitionId {
      get { return partitionId_; }
    }
    
    public const int ServiceHashFieldNumber = 9;
    private bool hasServiceHash;
    private uint serviceHash_;
    public bool HasServiceHash {
      get { return hasServiceHash; }
    }
    public uint ServiceHash {
      get { return serviceHash_; }
    }
    
    public const int GeneratingServiceFieldNumber = 10;
    private bool hasGeneratingService;
    private string generatingService_ = "";
    public bool HasGeneratingService {
      get { return hasGeneratingService; }
    }
    public string GeneratingService {
      get { return generatingService_; }
    }
    
    public const int GeneratingGameIdFieldNumber = 11;
    private bool hasGeneratingGameId;
    private int generatingGameId_;
    public bool HasGeneratingGameId {
      get { return hasGeneratingGameId; }
    }
    public int GeneratingGameId {
      get { return generatingGameId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasMetadata) {
          if (!Metadata.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _postScoreFieldNames;
      if (hasCategoryId) {
        output.WriteUInt64(1, field_names[0], CategoryId);
      }
      if (hasScopeId) {
        output.WriteUInt32(2, field_names[6], ScopeId);
      }
      if (hasGameAccountId) {
        output.WriteUInt64(3, field_names[1], GameAccountId);
      }
      if (hasScore) {
        output.WriteFixed64(4, field_names[7], Score);
      }
      if (hasTimestamp) {
        output.WriteFixed64(5, field_names[9], Timestamp);
      }
      if (hasMetadata) {
        output.WriteMessage(6, field_names[4], Metadata);
      }
      if (hasPartitionId) {
        output.WriteUInt32(8, field_names[5], PartitionId);
      }
      if (hasServiceHash) {
        output.WriteFixed32(9, field_names[8], ServiceHash);
      }
      if (hasGeneratingService) {
        output.WriteString(10, field_names[3], GeneratingService);
      }
      if (hasGeneratingGameId) {
        output.WriteInt32(11, field_names[2], GeneratingGameId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCategoryId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, CategoryId);
        }
        if (hasScopeId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, ScopeId);
        }
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, GameAccountId);
        }
        if (hasScore) {
          size += pb::CodedOutputStream.ComputeFixed64Size(4, Score);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeFixed64Size(5, Timestamp);
        }
        if (hasMetadata) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Metadata);
        }
        if (hasPartitionId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, PartitionId);
        }
        if (hasServiceHash) {
          size += pb::CodedOutputStream.ComputeFixed32Size(9, ServiceHash);
        }
        if (hasGeneratingService) {
          size += pb::CodedOutputStream.ComputeStringSize(10, GeneratingService);
        }
        if (hasGeneratingGameId) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, GeneratingGameId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PostScore ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PostScore ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PostScore ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PostScore ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PostScore ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PostScore ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PostScore ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PostScore ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PostScore ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PostScore ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PostScore MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PostScore prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PostScore, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PostScore cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PostScore result;
      
      private PostScore PrepareBuilder() {
        if (resultIsReadOnly) {
          PostScore original = result;
          result = new PostScore();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PostScore MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.PostScore.Descriptor; }
      }
      
      public override PostScore DefaultInstanceForType {
        get { return global::D3.Leaderboard.PostScore.DefaultInstance; }
      }
      
      public override PostScore BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PostScore) {
          return MergeFrom((PostScore) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PostScore other) {
        if (other == global::D3.Leaderboard.PostScore.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCategoryId) {
          CategoryId = other.CategoryId;
        }
        if (other.HasScopeId) {
          ScopeId = other.ScopeId;
        }
        if (other.HasGameAccountId) {
          GameAccountId = other.GameAccountId;
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasMetadata) {
          MergeMetadata(other.Metadata);
        }
        if (other.HasPartitionId) {
          PartitionId = other.PartitionId;
        }
        if (other.HasServiceHash) {
          ServiceHash = other.ServiceHash;
        }
        if (other.HasGeneratingService) {
          GeneratingService = other.GeneratingService;
        }
        if (other.HasGeneratingGameId) {
          GeneratingGameId = other.GeneratingGameId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_postScoreFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _postScoreFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCategoryId = input.ReadUInt64(ref result.categoryId_);
              break;
            }
            case 16: {
              result.hasScopeId = input.ReadUInt32(ref result.scopeId_);
              break;
            }
            case 24: {
              result.hasGameAccountId = input.ReadUInt64(ref result.gameAccountId_);
              break;
            }
            case 33: {
              result.hasScore = input.ReadFixed64(ref result.score_);
              break;
            }
            case 41: {
              result.hasTimestamp = input.ReadFixed64(ref result.timestamp_);
              break;
            }
            case 50: {
              global::D3.Leaderboard.Metadata.Builder subBuilder = global::D3.Leaderboard.Metadata.CreateBuilder();
              if (result.hasMetadata) {
                subBuilder.MergeFrom(Metadata);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Metadata = subBuilder.BuildPartial();
              break;
            }
            case 64: {
              result.hasPartitionId = input.ReadUInt32(ref result.partitionId_);
              break;
            }
            case 77: {
              result.hasServiceHash = input.ReadFixed32(ref result.serviceHash_);
              break;
            }
            case 82: {
              result.hasGeneratingService = input.ReadString(ref result.generatingService_);
              break;
            }
            case 88: {
              result.hasGeneratingGameId = input.ReadInt32(ref result.generatingGameId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCategoryId {
        get { return result.hasCategoryId; }
      }
      public ulong CategoryId {
        get { return result.CategoryId; }
        set { SetCategoryId(value); }
      }
      public Builder SetCategoryId(ulong value) {
        PrepareBuilder();
        result.hasCategoryId = true;
        result.categoryId_ = value;
        return this;
      }
      public Builder ClearCategoryId() {
        PrepareBuilder();
        result.hasCategoryId = false;
        result.categoryId_ = 0UL;
        return this;
      }
      
      public bool HasScopeId {
        get { return result.hasScopeId; }
      }
      public uint ScopeId {
        get { return result.ScopeId; }
        set { SetScopeId(value); }
      }
      public Builder SetScopeId(uint value) {
        PrepareBuilder();
        result.hasScopeId = true;
        result.scopeId_ = value;
        return this;
      }
      public Builder ClearScopeId() {
        PrepareBuilder();
        result.hasScopeId = false;
        result.scopeId_ = 0;
        return this;
      }
      
      public bool HasGameAccountId {
        get { return result.hasGameAccountId; }
      }
      public ulong GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(ulong value) {
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = 0UL;
        return this;
      }
      
      public bool HasScore {
        get { return result.hasScore; }
      }
      public ulong Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(ulong value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public ulong Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(ulong value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0;
        return this;
      }
      
      public bool HasMetadata {
       get { return result.hasMetadata; }
      }
      public global::D3.Leaderboard.Metadata Metadata {
        get { return result.Metadata; }
        set { SetMetadata(value); }
      }
      public Builder SetMetadata(global::D3.Leaderboard.Metadata value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMetadata = true;
        result.metadata_ = value;
        return this;
      }
      public Builder SetMetadata(global::D3.Leaderboard.Metadata.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMetadata = true;
        result.metadata_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMetadata(global::D3.Leaderboard.Metadata value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMetadata &&
            result.metadata_ != global::D3.Leaderboard.Metadata.DefaultInstance) {
            result.metadata_ = global::D3.Leaderboard.Metadata.CreateBuilder(result.metadata_).MergeFrom(value).BuildPartial();
        } else {
          result.metadata_ = value;
        }
        result.hasMetadata = true;
        return this;
      }
      public Builder ClearMetadata() {
        PrepareBuilder();
        result.hasMetadata = false;
        result.metadata_ = null;
        return this;
      }
      
      public bool HasPartitionId {
        get { return result.hasPartitionId; }
      }
      public uint PartitionId {
        get { return result.PartitionId; }
        set { SetPartitionId(value); }
      }
      public Builder SetPartitionId(uint value) {
        PrepareBuilder();
        result.hasPartitionId = true;
        result.partitionId_ = value;
        return this;
      }
      public Builder ClearPartitionId() {
        PrepareBuilder();
        result.hasPartitionId = false;
        result.partitionId_ = 0;
        return this;
      }
      
      public bool HasServiceHash {
        get { return result.hasServiceHash; }
      }
      public uint ServiceHash {
        get { return result.ServiceHash; }
        set { SetServiceHash(value); }
      }
      public Builder SetServiceHash(uint value) {
        PrepareBuilder();
        result.hasServiceHash = true;
        result.serviceHash_ = value;
        return this;
      }
      public Builder ClearServiceHash() {
        PrepareBuilder();
        result.hasServiceHash = false;
        result.serviceHash_ = 0;
        return this;
      }
      
      public bool HasGeneratingService {
        get { return result.hasGeneratingService; }
      }
      public string GeneratingService {
        get { return result.GeneratingService; }
        set { SetGeneratingService(value); }
      }
      public Builder SetGeneratingService(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGeneratingService = true;
        result.generatingService_ = value;
        return this;
      }
      public Builder ClearGeneratingService() {
        PrepareBuilder();
        result.hasGeneratingService = false;
        result.generatingService_ = "";
        return this;
      }
      
      public bool HasGeneratingGameId {
        get { return result.hasGeneratingGameId; }
      }
      public int GeneratingGameId {
        get { return result.GeneratingGameId; }
        set { SetGeneratingGameId(value); }
      }
      public Builder SetGeneratingGameId(int value) {
        PrepareBuilder();
        result.hasGeneratingGameId = true;
        result.generatingGameId_ = value;
        return this;
      }
      public Builder ClearGeneratingGameId() {
        PrepareBuilder();
        result.hasGeneratingGameId = false;
        result.generatingGameId_ = 0;
        return this;
      }
    }
    static PostScore() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CompressedPostScore : pb::GeneratedMessage<CompressedPostScore, CompressedPostScore.Builder> {
    private CompressedPostScore() { }
    private static readonly CompressedPostScore defaultInstance = new CompressedPostScore().MakeReadOnly();
    private static readonly string[] _compressedPostScoreFieldNames = new string[] { "data" };
    private static readonly uint[] _compressedPostScoreFieldTags = new uint[] { 10 };
    public static CompressedPostScore DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CompressedPostScore DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CompressedPostScore ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_CompressedPostScore__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CompressedPostScore, CompressedPostScore.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_CompressedPostScore__FieldAccessorTable; }
    }
    
    public const int DataFieldNumber = 1;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _compressedPostScoreFieldNames;
      if (hasData) {
        output.WriteBytes(1, field_names[0], Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Data);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CompressedPostScore ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CompressedPostScore ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CompressedPostScore ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CompressedPostScore ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CompressedPostScore ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CompressedPostScore ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CompressedPostScore ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CompressedPostScore ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CompressedPostScore ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CompressedPostScore ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CompressedPostScore MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CompressedPostScore prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CompressedPostScore, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CompressedPostScore cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CompressedPostScore result;
      
      private CompressedPostScore PrepareBuilder() {
        if (resultIsReadOnly) {
          CompressedPostScore original = result;
          result = new CompressedPostScore();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CompressedPostScore MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.CompressedPostScore.Descriptor; }
      }
      
      public override CompressedPostScore DefaultInstanceForType {
        get { return global::D3.Leaderboard.CompressedPostScore.DefaultInstance; }
      }
      
      public override CompressedPostScore BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CompressedPostScore) {
          return MergeFrom((CompressedPostScore) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CompressedPostScore other) {
        if (other == global::D3.Leaderboard.CompressedPostScore.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasData) {
          Data = other.Data;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_compressedPostScoreFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _compressedPostScoreFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasData = input.ReadBytes(ref result.data_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasData {
        get { return result.hasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
    }
    static CompressedPostScore() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LeaderboardScores : pb::GeneratedMessage<LeaderboardScores, LeaderboardScores.Builder> {
    private LeaderboardScores() { }
    private static readonly LeaderboardScores defaultInstance = new LeaderboardScores().MakeReadOnly();
    private static readonly string[] _leaderboardScoresFieldNames = new string[] { "scores" };
    private static readonly uint[] _leaderboardScoresFieldTags = new uint[] { 10 };
    public static LeaderboardScores DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LeaderboardScores DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LeaderboardScores ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_LeaderboardScores__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LeaderboardScores, LeaderboardScores.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_LeaderboardScores__FieldAccessorTable; }
    }
    
    public const int ScoresFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Leaderboard.Score> scores_ = new pbc::PopsicleList<global::D3.Leaderboard.Score>();
    public scg::IList<global::D3.Leaderboard.Score> ScoresList {
      get { return scores_; }
    }
    public int ScoresCount {
      get { return scores_.Count; }
    }
    public global::D3.Leaderboard.Score GetScores(int index) {
      return scores_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Leaderboard.Score element in ScoresList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _leaderboardScoresFieldNames;
      if (scores_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], scores_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Leaderboard.Score element in ScoresList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LeaderboardScores ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardScores ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardScores ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LeaderboardScores ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardScores ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardScores ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LeaderboardScores ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LeaderboardScores ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LeaderboardScores ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LeaderboardScores ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LeaderboardScores MakeReadOnly() {
      scores_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LeaderboardScores prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LeaderboardScores, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LeaderboardScores cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LeaderboardScores result;
      
      private LeaderboardScores PrepareBuilder() {
        if (resultIsReadOnly) {
          LeaderboardScores original = result;
          result = new LeaderboardScores();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LeaderboardScores MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.LeaderboardScores.Descriptor; }
      }
      
      public override LeaderboardScores DefaultInstanceForType {
        get { return global::D3.Leaderboard.LeaderboardScores.DefaultInstance; }
      }
      
      public override LeaderboardScores BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LeaderboardScores) {
          return MergeFrom((LeaderboardScores) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LeaderboardScores other) {
        if (other == global::D3.Leaderboard.LeaderboardScores.DefaultInstance) return this;
        PrepareBuilder();
        if (other.scores_.Count != 0) {
          result.scores_.Add(other.scores_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_leaderboardScoresFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _leaderboardScoresFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.scores_, global::D3.Leaderboard.Score.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Leaderboard.Score> ScoresList {
        get { return PrepareBuilder().scores_; }
      }
      public int ScoresCount {
        get { return result.ScoresCount; }
      }
      public global::D3.Leaderboard.Score GetScores(int index) {
        return result.GetScores(index);
      }
      public Builder SetScores(int index, global::D3.Leaderboard.Score value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.scores_[index] = value;
        return this;
      }
      public Builder SetScores(int index, global::D3.Leaderboard.Score.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.scores_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddScores(global::D3.Leaderboard.Score value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.scores_.Add(value);
        return this;
      }
      public Builder AddScores(global::D3.Leaderboard.Score.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.scores_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeScores(scg::IEnumerable<global::D3.Leaderboard.Score> values) {
        PrepareBuilder();
        result.scores_.Add(values);
        return this;
      }
      public Builder ClearScores() {
        PrepareBuilder();
        result.scores_.Clear();
        return this;
      }
    }
    static LeaderboardScores() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RemoveAccount : pb::GeneratedMessage<RemoveAccount, RemoveAccount.Builder> {
    private RemoveAccount() { }
    private static readonly RemoveAccount defaultInstance = new RemoveAccount().MakeReadOnly();
    private static readonly string[] _removeAccountFieldNames = new string[] { "game_account_id", "ignore_conquest_leaderboards" };
    private static readonly uint[] _removeAccountFieldTags = new uint[] { 8, 16 };
    public static RemoveAccount DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RemoveAccount DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RemoveAccount ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_RemoveAccount__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RemoveAccount, RemoveAccount.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_RemoveAccount__FieldAccessorTable; }
    }
    
    public const int GameAccountIdFieldNumber = 1;
    private bool hasGameAccountId;
    private ulong gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public ulong GameAccountId {
      get { return gameAccountId_; }
    }
    
    public const int IgnoreConquestLeaderboardsFieldNumber = 2;
    private bool hasIgnoreConquestLeaderboards;
    private bool ignoreConquestLeaderboards_;
    public bool HasIgnoreConquestLeaderboards {
      get { return hasIgnoreConquestLeaderboards; }
    }
    public bool IgnoreConquestLeaderboards {
      get { return ignoreConquestLeaderboards_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _removeAccountFieldNames;
      if (hasGameAccountId) {
        output.WriteUInt64(1, field_names[0], GameAccountId);
      }
      if (hasIgnoreConquestLeaderboards) {
        output.WriteBool(2, field_names[1], IgnoreConquestLeaderboards);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GameAccountId);
        }
        if (hasIgnoreConquestLeaderboards) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IgnoreConquestLeaderboards);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RemoveAccount ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RemoveAccount ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RemoveAccount ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RemoveAccount ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RemoveAccount ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RemoveAccount ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RemoveAccount ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RemoveAccount ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RemoveAccount ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RemoveAccount ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RemoveAccount MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RemoveAccount prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RemoveAccount, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RemoveAccount cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RemoveAccount result;
      
      private RemoveAccount PrepareBuilder() {
        if (resultIsReadOnly) {
          RemoveAccount original = result;
          result = new RemoveAccount();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RemoveAccount MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.RemoveAccount.Descriptor; }
      }
      
      public override RemoveAccount DefaultInstanceForType {
        get { return global::D3.Leaderboard.RemoveAccount.DefaultInstance; }
      }
      
      public override RemoveAccount BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RemoveAccount) {
          return MergeFrom((RemoveAccount) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RemoveAccount other) {
        if (other == global::D3.Leaderboard.RemoveAccount.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameAccountId) {
          GameAccountId = other.GameAccountId;
        }
        if (other.HasIgnoreConquestLeaderboards) {
          IgnoreConquestLeaderboards = other.IgnoreConquestLeaderboards;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_removeAccountFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _removeAccountFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGameAccountId = input.ReadUInt64(ref result.gameAccountId_);
              break;
            }
            case 16: {
              result.hasIgnoreConquestLeaderboards = input.ReadBool(ref result.ignoreConquestLeaderboards_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameAccountId {
        get { return result.hasGameAccountId; }
      }
      public ulong GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(ulong value) {
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = 0UL;
        return this;
      }
      
      public bool HasIgnoreConquestLeaderboards {
        get { return result.hasIgnoreConquestLeaderboards; }
      }
      public bool IgnoreConquestLeaderboards {
        get { return result.IgnoreConquestLeaderboards; }
        set { SetIgnoreConquestLeaderboards(value); }
      }
      public Builder SetIgnoreConquestLeaderboards(bool value) {
        PrepareBuilder();
        result.hasIgnoreConquestLeaderboards = true;
        result.ignoreConquestLeaderboards_ = value;
        return this;
      }
      public Builder ClearIgnoreConquestLeaderboards() {
        PrepareBuilder();
        result.hasIgnoreConquestLeaderboards = false;
        result.ignoreConquestLeaderboards_ = false;
        return this;
      }
    }
    static RemoveAccount() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ReloadScoreBands : pb::GeneratedMessage<ReloadScoreBands, ReloadScoreBands.Builder> {
    private ReloadScoreBands() { }
    private static readonly ReloadScoreBands defaultInstance = new ReloadScoreBands().MakeReadOnly();
    private static readonly string[] _reloadScoreBandsFieldNames = new string[] { "leaderboard_type", "partition_id" };
    private static readonly uint[] _reloadScoreBandsFieldTags = new uint[] { 8, 16 };
    public static ReloadScoreBands DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ReloadScoreBands DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ReloadScoreBands ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_ReloadScoreBands__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ReloadScoreBands, ReloadScoreBands.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_ReloadScoreBands__FieldAccessorTable; }
    }
    
    public const int LeaderboardTypeFieldNumber = 1;
    private bool hasLeaderboardType;
    private uint leaderboardType_;
    public bool HasLeaderboardType {
      get { return hasLeaderboardType; }
    }
    public uint LeaderboardType {
      get { return leaderboardType_; }
    }
    
    public const int PartitionIdFieldNumber = 2;
    private bool hasPartitionId;
    private uint partitionId_;
    public bool HasPartitionId {
      get { return hasPartitionId; }
    }
    public uint PartitionId {
      get { return partitionId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _reloadScoreBandsFieldNames;
      if (hasLeaderboardType) {
        output.WriteUInt32(1, field_names[0], LeaderboardType);
      }
      if (hasPartitionId) {
        output.WriteUInt32(2, field_names[1], PartitionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLeaderboardType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, LeaderboardType);
        }
        if (hasPartitionId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, PartitionId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ReloadScoreBands ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReloadScoreBands ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReloadScoreBands ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReloadScoreBands ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReloadScoreBands ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReloadScoreBands ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ReloadScoreBands ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ReloadScoreBands ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ReloadScoreBands ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReloadScoreBands ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ReloadScoreBands MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ReloadScoreBands prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ReloadScoreBands, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ReloadScoreBands cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ReloadScoreBands result;
      
      private ReloadScoreBands PrepareBuilder() {
        if (resultIsReadOnly) {
          ReloadScoreBands original = result;
          result = new ReloadScoreBands();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ReloadScoreBands MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.ReloadScoreBands.Descriptor; }
      }
      
      public override ReloadScoreBands DefaultInstanceForType {
        get { return global::D3.Leaderboard.ReloadScoreBands.DefaultInstance; }
      }
      
      public override ReloadScoreBands BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ReloadScoreBands) {
          return MergeFrom((ReloadScoreBands) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ReloadScoreBands other) {
        if (other == global::D3.Leaderboard.ReloadScoreBands.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLeaderboardType) {
          LeaderboardType = other.LeaderboardType;
        }
        if (other.HasPartitionId) {
          PartitionId = other.PartitionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_reloadScoreBandsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _reloadScoreBandsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLeaderboardType = input.ReadUInt32(ref result.leaderboardType_);
              break;
            }
            case 16: {
              result.hasPartitionId = input.ReadUInt32(ref result.partitionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLeaderboardType {
        get { return result.hasLeaderboardType; }
      }
      public uint LeaderboardType {
        get { return result.LeaderboardType; }
        set { SetLeaderboardType(value); }
      }
      public Builder SetLeaderboardType(uint value) {
        PrepareBuilder();
        result.hasLeaderboardType = true;
        result.leaderboardType_ = value;
        return this;
      }
      public Builder ClearLeaderboardType() {
        PrepareBuilder();
        result.hasLeaderboardType = false;
        result.leaderboardType_ = 0;
        return this;
      }
      
      public bool HasPartitionId {
        get { return result.hasPartitionId; }
      }
      public uint PartitionId {
        get { return result.PartitionId; }
        set { SetPartitionId(value); }
      }
      public Builder SetPartitionId(uint value) {
        PrepareBuilder();
        result.hasPartitionId = true;
        result.partitionId_ = value;
        return this;
      }
      public Builder ClearPartitionId() {
        PrepareBuilder();
        result.hasPartitionId = false;
        result.partitionId_ = 0;
        return this;
      }
    }
    static ReloadScoreBands() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Snapshot : pb::GeneratedMessage<Snapshot, Snapshot.Builder> {
    private Snapshot() { }
    private static readonly Snapshot defaultInstance = new Snapshot().MakeReadOnly();
    private static readonly string[] _snapshotFieldNames = new string[] { "entries" };
    private static readonly uint[] _snapshotFieldTags = new uint[] { 26 };
    public static Snapshot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Snapshot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Snapshot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_Snapshot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Snapshot, Snapshot.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_Snapshot__FieldAccessorTable; }
    }
    
    public const int EntriesFieldNumber = 3;
    private pbc::PopsicleList<global::D3.Leaderboard.Slot> entries_ = new pbc::PopsicleList<global::D3.Leaderboard.Slot>();
    public scg::IList<global::D3.Leaderboard.Slot> EntriesList {
      get { return entries_; }
    }
    public int EntriesCount {
      get { return entries_.Count; }
    }
    public global::D3.Leaderboard.Slot GetEntries(int index) {
      return entries_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Leaderboard.Slot element in EntriesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _snapshotFieldNames;
      if (entries_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], entries_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Leaderboard.Slot element in EntriesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Snapshot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Snapshot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Snapshot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Snapshot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Snapshot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Snapshot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Snapshot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Snapshot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Snapshot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Snapshot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Snapshot MakeReadOnly() {
      entries_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Snapshot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Snapshot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Snapshot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Snapshot result;
      
      private Snapshot PrepareBuilder() {
        if (resultIsReadOnly) {
          Snapshot original = result;
          result = new Snapshot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Snapshot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.Snapshot.Descriptor; }
      }
      
      public override Snapshot DefaultInstanceForType {
        get { return global::D3.Leaderboard.Snapshot.DefaultInstance; }
      }
      
      public override Snapshot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Snapshot) {
          return MergeFrom((Snapshot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Snapshot other) {
        if (other == global::D3.Leaderboard.Snapshot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.entries_.Count != 0) {
          result.entries_.Add(other.entries_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_snapshotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _snapshotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.entries_, global::D3.Leaderboard.Slot.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Leaderboard.Slot> EntriesList {
        get { return PrepareBuilder().entries_; }
      }
      public int EntriesCount {
        get { return result.EntriesCount; }
      }
      public global::D3.Leaderboard.Slot GetEntries(int index) {
        return result.GetEntries(index);
      }
      public Builder SetEntries(int index, global::D3.Leaderboard.Slot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entries_[index] = value;
        return this;
      }
      public Builder SetEntries(int index, global::D3.Leaderboard.Slot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entries_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntries(global::D3.Leaderboard.Slot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entries_.Add(value);
        return this;
      }
      public Builder AddEntries(global::D3.Leaderboard.Slot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entries_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntries(scg::IEnumerable<global::D3.Leaderboard.Slot> values) {
        PrepareBuilder();
        result.entries_.Add(values);
        return this;
      }
      public Builder ClearEntries() {
        PrepareBuilder();
        result.entries_.Clear();
        return this;
      }
    }
    static Snapshot() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class InvalidateCache : pb::GeneratedMessage<InvalidateCache, InvalidateCache.Builder> {
    private InvalidateCache() { }
    private static readonly InvalidateCache defaultInstance = new InvalidateCache().MakeReadOnly();
    private static readonly string[] _invalidateCacheFieldNames = new string[] { "leaderboard_type", "partition_id" };
    private static readonly uint[] _invalidateCacheFieldTags = new uint[] { 8, 16 };
    public static InvalidateCache DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InvalidateCache DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override InvalidateCache ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_InvalidateCache__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InvalidateCache, InvalidateCache.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_InvalidateCache__FieldAccessorTable; }
    }
    
    public const int LeaderboardTypeFieldNumber = 1;
    private bool hasLeaderboardType;
    private uint leaderboardType_;
    public bool HasLeaderboardType {
      get { return hasLeaderboardType; }
    }
    public uint LeaderboardType {
      get { return leaderboardType_; }
    }
    
    public const int PartitionIdFieldNumber = 2;
    private bool hasPartitionId;
    private uint partitionId_;
    public bool HasPartitionId {
      get { return hasPartitionId; }
    }
    public uint PartitionId {
      get { return partitionId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _invalidateCacheFieldNames;
      if (hasLeaderboardType) {
        output.WriteUInt32(1, field_names[0], LeaderboardType);
      }
      if (hasPartitionId) {
        output.WriteUInt32(2, field_names[1], PartitionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLeaderboardType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, LeaderboardType);
        }
        if (hasPartitionId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, PartitionId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InvalidateCache ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvalidateCache ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvalidateCache ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InvalidateCache ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InvalidateCache ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvalidateCache ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InvalidateCache ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InvalidateCache ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InvalidateCache ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InvalidateCache ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private InvalidateCache MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InvalidateCache prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<InvalidateCache, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(InvalidateCache cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private InvalidateCache result;
      
      private InvalidateCache PrepareBuilder() {
        if (resultIsReadOnly) {
          InvalidateCache original = result;
          result = new InvalidateCache();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override InvalidateCache MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.InvalidateCache.Descriptor; }
      }
      
      public override InvalidateCache DefaultInstanceForType {
        get { return global::D3.Leaderboard.InvalidateCache.DefaultInstance; }
      }
      
      public override InvalidateCache BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InvalidateCache) {
          return MergeFrom((InvalidateCache) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InvalidateCache other) {
        if (other == global::D3.Leaderboard.InvalidateCache.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLeaderboardType) {
          LeaderboardType = other.LeaderboardType;
        }
        if (other.HasPartitionId) {
          PartitionId = other.PartitionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_invalidateCacheFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _invalidateCacheFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLeaderboardType = input.ReadUInt32(ref result.leaderboardType_);
              break;
            }
            case 16: {
              result.hasPartitionId = input.ReadUInt32(ref result.partitionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLeaderboardType {
        get { return result.hasLeaderboardType; }
      }
      public uint LeaderboardType {
        get { return result.LeaderboardType; }
        set { SetLeaderboardType(value); }
      }
      public Builder SetLeaderboardType(uint value) {
        PrepareBuilder();
        result.hasLeaderboardType = true;
        result.leaderboardType_ = value;
        return this;
      }
      public Builder ClearLeaderboardType() {
        PrepareBuilder();
        result.hasLeaderboardType = false;
        result.leaderboardType_ = 0;
        return this;
      }
      
      public bool HasPartitionId {
        get { return result.hasPartitionId; }
      }
      public uint PartitionId {
        get { return result.PartitionId; }
        set { SetPartitionId(value); }
      }
      public Builder SetPartitionId(uint value) {
        PrepareBuilder();
        result.hasPartitionId = true;
        result.partitionId_ = value;
        return this;
      }
      public Builder ClearPartitionId() {
        PrepareBuilder();
        result.hasPartitionId = false;
        result.partitionId_ = 0;
        return this;
      }
    }
    static InvalidateCache() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RiftFloor : pb::GeneratedMessage<RiftFloor, RiftFloor.Builder> {
    private RiftFloor() { }
    private static readonly RiftFloor defaultInstance = new RiftFloor().MakeReadOnly();
    private static readonly string[] _riftFloorFieldNames = new string[] { "population_hash", "sno_world" };
    private static readonly uint[] _riftFloorFieldTags = new uint[] { 21, 13 };
    public static RiftFloor DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RiftFloor DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RiftFloor ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_RiftFloor__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RiftFloor, RiftFloor.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_RiftFloor__FieldAccessorTable; }
    }
    
    public const int SnoWorldFieldNumber = 1;
    private bool hasSnoWorld;
    private int snoWorld_;
    public bool HasSnoWorld {
      get { return hasSnoWorld; }
    }
    public int SnoWorld {
      get { return snoWorld_; }
    }
    
    public const int PopulationHashFieldNumber = 2;
    private bool hasPopulationHash;
    private int populationHash_;
    public bool HasPopulationHash {
      get { return hasPopulationHash; }
    }
    public int PopulationHash {
      get { return populationHash_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoWorld) return false;
        if (!hasPopulationHash) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _riftFloorFieldNames;
      if (hasSnoWorld) {
        output.WriteSFixed32(1, field_names[1], SnoWorld);
      }
      if (hasPopulationHash) {
        output.WriteSFixed32(2, field_names[0], PopulationHash);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnoWorld) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoWorld);
        }
        if (hasPopulationHash) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(2, PopulationHash);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RiftFloor ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RiftFloor ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RiftFloor ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RiftFloor ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RiftFloor ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RiftFloor ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RiftFloor ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RiftFloor ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RiftFloor ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RiftFloor ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RiftFloor MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RiftFloor prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RiftFloor, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RiftFloor cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RiftFloor result;
      
      private RiftFloor PrepareBuilder() {
        if (resultIsReadOnly) {
          RiftFloor original = result;
          result = new RiftFloor();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RiftFloor MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.RiftFloor.Descriptor; }
      }
      
      public override RiftFloor DefaultInstanceForType {
        get { return global::D3.Leaderboard.RiftFloor.DefaultInstance; }
      }
      
      public override RiftFloor BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RiftFloor) {
          return MergeFrom((RiftFloor) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RiftFloor other) {
        if (other == global::D3.Leaderboard.RiftFloor.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnoWorld) {
          SnoWorld = other.SnoWorld;
        }
        if (other.HasPopulationHash) {
          PopulationHash = other.PopulationHash;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_riftFloorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _riftFloorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSnoWorld = input.ReadSFixed32(ref result.snoWorld_);
              break;
            }
            case 21: {
              result.hasPopulationHash = input.ReadSFixed32(ref result.populationHash_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnoWorld {
        get { return result.hasSnoWorld; }
      }
      public int SnoWorld {
        get { return result.SnoWorld; }
        set { SetSnoWorld(value); }
      }
      public Builder SetSnoWorld(int value) {
        PrepareBuilder();
        result.hasSnoWorld = true;
        result.snoWorld_ = value;
        return this;
      }
      public Builder ClearSnoWorld() {
        PrepareBuilder();
        result.hasSnoWorld = false;
        result.snoWorld_ = 0;
        return this;
      }
      
      public bool HasPopulationHash {
        get { return result.hasPopulationHash; }
      }
      public int PopulationHash {
        get { return result.PopulationHash; }
        set { SetPopulationHash(value); }
      }
      public Builder SetPopulationHash(int value) {
        PrepareBuilder();
        result.hasPopulationHash = true;
        result.populationHash_ = value;
        return this;
      }
      public Builder ClearPopulationHash() {
        PrepareBuilder();
        result.hasPopulationHash = false;
        result.populationHash_ = 0;
        return this;
      }
    }
    static RiftFloor() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RiftPylon : pb::GeneratedMessage<RiftPylon, RiftPylon.Builder> {
    private RiftPylon() { }
    private static readonly RiftPylon defaultInstance = new RiftPylon().MakeReadOnly();
    private static readonly string[] _riftPylonFieldNames = new string[] { "position_x", "position_y", "rift_floor", "sno_pylon" };
    private static readonly uint[] _riftPylonFieldTags = new uint[] { 29, 37, 16, 13 };
    public static RiftPylon DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RiftPylon DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RiftPylon ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_RiftPylon__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RiftPylon, RiftPylon.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_RiftPylon__FieldAccessorTable; }
    }
    
    public const int SnoPylonFieldNumber = 1;
    private bool hasSnoPylon;
    private int snoPylon_;
    public bool HasSnoPylon {
      get { return hasSnoPylon; }
    }
    public int SnoPylon {
      get { return snoPylon_; }
    }
    
    public const int RiftFloorFieldNumber = 2;
    private bool hasRiftFloor;
    private uint riftFloor_;
    public bool HasRiftFloor {
      get { return hasRiftFloor; }
    }
    public uint RiftFloor {
      get { return riftFloor_; }
    }
    
    public const int PositionXFieldNumber = 3;
    private bool hasPositionX;
    private float positionX_;
    public bool HasPositionX {
      get { return hasPositionX; }
    }
    public float PositionX {
      get { return positionX_; }
    }
    
    public const int PositionYFieldNumber = 4;
    private bool hasPositionY;
    private float positionY_;
    public bool HasPositionY {
      get { return hasPositionY; }
    }
    public float PositionY {
      get { return positionY_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoPylon) return false;
        if (!hasRiftFloor) return false;
        if (!hasPositionX) return false;
        if (!hasPositionY) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _riftPylonFieldNames;
      if (hasSnoPylon) {
        output.WriteSFixed32(1, field_names[3], SnoPylon);
      }
      if (hasRiftFloor) {
        output.WriteUInt32(2, field_names[2], RiftFloor);
      }
      if (hasPositionX) {
        output.WriteFloat(3, field_names[0], PositionX);
      }
      if (hasPositionY) {
        output.WriteFloat(4, field_names[1], PositionY);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnoPylon) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoPylon);
        }
        if (hasRiftFloor) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, RiftFloor);
        }
        if (hasPositionX) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, PositionX);
        }
        if (hasPositionY) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, PositionY);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RiftPylon ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RiftPylon ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RiftPylon ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RiftPylon ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RiftPylon ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RiftPylon ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RiftPylon ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RiftPylon ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RiftPylon ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RiftPylon ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RiftPylon MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RiftPylon prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RiftPylon, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RiftPylon cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RiftPylon result;
      
      private RiftPylon PrepareBuilder() {
        if (resultIsReadOnly) {
          RiftPylon original = result;
          result = new RiftPylon();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RiftPylon MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.RiftPylon.Descriptor; }
      }
      
      public override RiftPylon DefaultInstanceForType {
        get { return global::D3.Leaderboard.RiftPylon.DefaultInstance; }
      }
      
      public override RiftPylon BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RiftPylon) {
          return MergeFrom((RiftPylon) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RiftPylon other) {
        if (other == global::D3.Leaderboard.RiftPylon.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnoPylon) {
          SnoPylon = other.SnoPylon;
        }
        if (other.HasRiftFloor) {
          RiftFloor = other.RiftFloor;
        }
        if (other.HasPositionX) {
          PositionX = other.PositionX;
        }
        if (other.HasPositionY) {
          PositionY = other.PositionY;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_riftPylonFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _riftPylonFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSnoPylon = input.ReadSFixed32(ref result.snoPylon_);
              break;
            }
            case 16: {
              result.hasRiftFloor = input.ReadUInt32(ref result.riftFloor_);
              break;
            }
            case 29: {
              result.hasPositionX = input.ReadFloat(ref result.positionX_);
              break;
            }
            case 37: {
              result.hasPositionY = input.ReadFloat(ref result.positionY_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnoPylon {
        get { return result.hasSnoPylon; }
      }
      public int SnoPylon {
        get { return result.SnoPylon; }
        set { SetSnoPylon(value); }
      }
      public Builder SetSnoPylon(int value) {
        PrepareBuilder();
        result.hasSnoPylon = true;
        result.snoPylon_ = value;
        return this;
      }
      public Builder ClearSnoPylon() {
        PrepareBuilder();
        result.hasSnoPylon = false;
        result.snoPylon_ = 0;
        return this;
      }
      
      public bool HasRiftFloor {
        get { return result.hasRiftFloor; }
      }
      public uint RiftFloor {
        get { return result.RiftFloor; }
        set { SetRiftFloor(value); }
      }
      public Builder SetRiftFloor(uint value) {
        PrepareBuilder();
        result.hasRiftFloor = true;
        result.riftFloor_ = value;
        return this;
      }
      public Builder ClearRiftFloor() {
        PrepareBuilder();
        result.hasRiftFloor = false;
        result.riftFloor_ = 0;
        return this;
      }
      
      public bool HasPositionX {
        get { return result.hasPositionX; }
      }
      public float PositionX {
        get { return result.PositionX; }
        set { SetPositionX(value); }
      }
      public Builder SetPositionX(float value) {
        PrepareBuilder();
        result.hasPositionX = true;
        result.positionX_ = value;
        return this;
      }
      public Builder ClearPositionX() {
        PrepareBuilder();
        result.hasPositionX = false;
        result.positionX_ = 0F;
        return this;
      }
      
      public bool HasPositionY {
        get { return result.hasPositionY; }
      }
      public float PositionY {
        get { return result.PositionY; }
        set { SetPositionY(value); }
      }
      public Builder SetPositionY(float value) {
        PrepareBuilder();
        result.hasPositionY = true;
        result.positionY_ = value;
        return this;
      }
      public Builder ClearPositionY() {
        PrepareBuilder();
        result.hasPositionY = false;
        result.positionY_ = 0F;
        return this;
      }
    }
    static RiftPylon() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RiftSnapshot : pb::GeneratedMessage<RiftSnapshot, RiftSnapshot.Builder> {
    private RiftSnapshot() { }
    private static readonly RiftSnapshot defaultInstance = new RiftSnapshot().MakeReadOnly();
    private static readonly string[] _riftSnapshotFieldNames = new string[] { "completion_milliseconds", "deprecated_completion_seconds", "floors", "num_deaths", "pylons", "rift_seed", "rift_tier", "sno_boss", "sno_dungeon_finder" };
    private static readonly uint[] _riftSnapshotFieldTags = new uint[] { 72, 56, 42, 64, 50, 21, 8, 29, 37 };
    public static RiftSnapshot DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RiftSnapshot DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RiftSnapshot ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_RiftSnapshot__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RiftSnapshot, RiftSnapshot.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_RiftSnapshot__FieldAccessorTable; }
    }
    
    public const int RiftTierFieldNumber = 1;
    private bool hasRiftTier;
    private uint riftTier_;
    public bool HasRiftTier {
      get { return hasRiftTier; }
    }
    public uint RiftTier {
      get { return riftTier_; }
    }
    
    public const int RiftSeedFieldNumber = 2;
    private bool hasRiftSeed;
    private int riftSeed_;
    public bool HasRiftSeed {
      get { return hasRiftSeed; }
    }
    public int RiftSeed {
      get { return riftSeed_; }
    }
    
    public const int SnoBossFieldNumber = 3;
    private bool hasSnoBoss;
    private int snoBoss_;
    public bool HasSnoBoss {
      get { return hasSnoBoss; }
    }
    public int SnoBoss {
      get { return snoBoss_; }
    }
    
    public const int SnoDungeonFinderFieldNumber = 4;
    private bool hasSnoDungeonFinder;
    private int snoDungeonFinder_;
    public bool HasSnoDungeonFinder {
      get { return hasSnoDungeonFinder; }
    }
    public int SnoDungeonFinder {
      get { return snoDungeonFinder_; }
    }
    
    public const int FloorsFieldNumber = 5;
    private pbc::PopsicleList<global::D3.Leaderboard.RiftFloor> floors_ = new pbc::PopsicleList<global::D3.Leaderboard.RiftFloor>();
    public scg::IList<global::D3.Leaderboard.RiftFloor> FloorsList {
      get { return floors_; }
    }
    public int FloorsCount {
      get { return floors_.Count; }
    }
    public global::D3.Leaderboard.RiftFloor GetFloors(int index) {
      return floors_[index];
    }
    
    public const int PylonsFieldNumber = 6;
    private pbc::PopsicleList<global::D3.Leaderboard.RiftPylon> pylons_ = new pbc::PopsicleList<global::D3.Leaderboard.RiftPylon>();
    public scg::IList<global::D3.Leaderboard.RiftPylon> PylonsList {
      get { return pylons_; }
    }
    public int PylonsCount {
      get { return pylons_.Count; }
    }
    public global::D3.Leaderboard.RiftPylon GetPylons(int index) {
      return pylons_[index];
    }
    
    public const int DeprecatedCompletionSecondsFieldNumber = 7;
    private bool hasDeprecatedCompletionSeconds;
    private uint deprecatedCompletionSeconds_;
    public bool HasDeprecatedCompletionSeconds {
      get { return hasDeprecatedCompletionSeconds; }
    }
    public uint DeprecatedCompletionSeconds {
      get { return deprecatedCompletionSeconds_; }
    }
    
    public const int NumDeathsFieldNumber = 8;
    private bool hasNumDeaths;
    private uint numDeaths_;
    public bool HasNumDeaths {
      get { return hasNumDeaths; }
    }
    public uint NumDeaths {
      get { return numDeaths_; }
    }
    
    public const int CompletionMillisecondsFieldNumber = 9;
    private bool hasCompletionMilliseconds;
    private uint completionMilliseconds_;
    public bool HasCompletionMilliseconds {
      get { return hasCompletionMilliseconds; }
    }
    public uint CompletionMilliseconds {
      get { return completionMilliseconds_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRiftTier) return false;
        if (!hasRiftSeed) return false;
        if (!hasSnoBoss) return false;
        if (!hasSnoDungeonFinder) return false;
        if (!hasDeprecatedCompletionSeconds) return false;
        if (!hasNumDeaths) return false;
        foreach (global::D3.Leaderboard.RiftFloor element in FloorsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::D3.Leaderboard.RiftPylon element in PylonsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _riftSnapshotFieldNames;
      if (hasRiftTier) {
        output.WriteUInt32(1, field_names[6], RiftTier);
      }
      if (hasRiftSeed) {
        output.WriteSFixed32(2, field_names[5], RiftSeed);
      }
      if (hasSnoBoss) {
        output.WriteSFixed32(3, field_names[7], SnoBoss);
      }
      if (hasSnoDungeonFinder) {
        output.WriteSFixed32(4, field_names[8], SnoDungeonFinder);
      }
      if (floors_.Count > 0) {
        output.WriteMessageArray(5, field_names[2], floors_);
      }
      if (pylons_.Count > 0) {
        output.WriteMessageArray(6, field_names[4], pylons_);
      }
      if (hasDeprecatedCompletionSeconds) {
        output.WriteUInt32(7, field_names[1], DeprecatedCompletionSeconds);
      }
      if (hasNumDeaths) {
        output.WriteUInt32(8, field_names[3], NumDeaths);
      }
      if (hasCompletionMilliseconds) {
        output.WriteUInt32(9, field_names[0], CompletionMilliseconds);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRiftTier) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, RiftTier);
        }
        if (hasRiftSeed) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(2, RiftSeed);
        }
        if (hasSnoBoss) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(3, SnoBoss);
        }
        if (hasSnoDungeonFinder) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(4, SnoDungeonFinder);
        }
        foreach (global::D3.Leaderboard.RiftFloor element in FloorsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        foreach (global::D3.Leaderboard.RiftPylon element in PylonsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        if (hasDeprecatedCompletionSeconds) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, DeprecatedCompletionSeconds);
        }
        if (hasNumDeaths) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, NumDeaths);
        }
        if (hasCompletionMilliseconds) {
          size += pb::CodedOutputStream.ComputeUInt32Size(9, CompletionMilliseconds);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RiftSnapshot ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RiftSnapshot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RiftSnapshot ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RiftSnapshot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RiftSnapshot ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RiftSnapshot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RiftSnapshot ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RiftSnapshot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RiftSnapshot ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RiftSnapshot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RiftSnapshot MakeReadOnly() {
      floors_.MakeReadOnly();
      pylons_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RiftSnapshot prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RiftSnapshot, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RiftSnapshot cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RiftSnapshot result;
      
      private RiftSnapshot PrepareBuilder() {
        if (resultIsReadOnly) {
          RiftSnapshot original = result;
          result = new RiftSnapshot();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RiftSnapshot MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.RiftSnapshot.Descriptor; }
      }
      
      public override RiftSnapshot DefaultInstanceForType {
        get { return global::D3.Leaderboard.RiftSnapshot.DefaultInstance; }
      }
      
      public override RiftSnapshot BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RiftSnapshot) {
          return MergeFrom((RiftSnapshot) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RiftSnapshot other) {
        if (other == global::D3.Leaderboard.RiftSnapshot.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRiftTier) {
          RiftTier = other.RiftTier;
        }
        if (other.HasRiftSeed) {
          RiftSeed = other.RiftSeed;
        }
        if (other.HasSnoBoss) {
          SnoBoss = other.SnoBoss;
        }
        if (other.HasSnoDungeonFinder) {
          SnoDungeonFinder = other.SnoDungeonFinder;
        }
        if (other.floors_.Count != 0) {
          result.floors_.Add(other.floors_);
        }
        if (other.pylons_.Count != 0) {
          result.pylons_.Add(other.pylons_);
        }
        if (other.HasDeprecatedCompletionSeconds) {
          DeprecatedCompletionSeconds = other.DeprecatedCompletionSeconds;
        }
        if (other.HasNumDeaths) {
          NumDeaths = other.NumDeaths;
        }
        if (other.HasCompletionMilliseconds) {
          CompletionMilliseconds = other.CompletionMilliseconds;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_riftSnapshotFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _riftSnapshotFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRiftTier = input.ReadUInt32(ref result.riftTier_);
              break;
            }
            case 21: {
              result.hasRiftSeed = input.ReadSFixed32(ref result.riftSeed_);
              break;
            }
            case 29: {
              result.hasSnoBoss = input.ReadSFixed32(ref result.snoBoss_);
              break;
            }
            case 37: {
              result.hasSnoDungeonFinder = input.ReadSFixed32(ref result.snoDungeonFinder_);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.floors_, global::D3.Leaderboard.RiftFloor.DefaultInstance, extensionRegistry);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.pylons_, global::D3.Leaderboard.RiftPylon.DefaultInstance, extensionRegistry);
              break;
            }
            case 56: {
              result.hasDeprecatedCompletionSeconds = input.ReadUInt32(ref result.deprecatedCompletionSeconds_);
              break;
            }
            case 64: {
              result.hasNumDeaths = input.ReadUInt32(ref result.numDeaths_);
              break;
            }
            case 72: {
              result.hasCompletionMilliseconds = input.ReadUInt32(ref result.completionMilliseconds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRiftTier {
        get { return result.hasRiftTier; }
      }
      public uint RiftTier {
        get { return result.RiftTier; }
        set { SetRiftTier(value); }
      }
      public Builder SetRiftTier(uint value) {
        PrepareBuilder();
        result.hasRiftTier = true;
        result.riftTier_ = value;
        return this;
      }
      public Builder ClearRiftTier() {
        PrepareBuilder();
        result.hasRiftTier = false;
        result.riftTier_ = 0;
        return this;
      }
      
      public bool HasRiftSeed {
        get { return result.hasRiftSeed; }
      }
      public int RiftSeed {
        get { return result.RiftSeed; }
        set { SetRiftSeed(value); }
      }
      public Builder SetRiftSeed(int value) {
        PrepareBuilder();
        result.hasRiftSeed = true;
        result.riftSeed_ = value;
        return this;
      }
      public Builder ClearRiftSeed() {
        PrepareBuilder();
        result.hasRiftSeed = false;
        result.riftSeed_ = 0;
        return this;
      }
      
      public bool HasSnoBoss {
        get { return result.hasSnoBoss; }
      }
      public int SnoBoss {
        get { return result.SnoBoss; }
        set { SetSnoBoss(value); }
      }
      public Builder SetSnoBoss(int value) {
        PrepareBuilder();
        result.hasSnoBoss = true;
        result.snoBoss_ = value;
        return this;
      }
      public Builder ClearSnoBoss() {
        PrepareBuilder();
        result.hasSnoBoss = false;
        result.snoBoss_ = 0;
        return this;
      }
      
      public bool HasSnoDungeonFinder {
        get { return result.hasSnoDungeonFinder; }
      }
      public int SnoDungeonFinder {
        get { return result.SnoDungeonFinder; }
        set { SetSnoDungeonFinder(value); }
      }
      public Builder SetSnoDungeonFinder(int value) {
        PrepareBuilder();
        result.hasSnoDungeonFinder = true;
        result.snoDungeonFinder_ = value;
        return this;
      }
      public Builder ClearSnoDungeonFinder() {
        PrepareBuilder();
        result.hasSnoDungeonFinder = false;
        result.snoDungeonFinder_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Leaderboard.RiftFloor> FloorsList {
        get { return PrepareBuilder().floors_; }
      }
      public int FloorsCount {
        get { return result.FloorsCount; }
      }
      public global::D3.Leaderboard.RiftFloor GetFloors(int index) {
        return result.GetFloors(index);
      }
      public Builder SetFloors(int index, global::D3.Leaderboard.RiftFloor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.floors_[index] = value;
        return this;
      }
      public Builder SetFloors(int index, global::D3.Leaderboard.RiftFloor.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.floors_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFloors(global::D3.Leaderboard.RiftFloor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.floors_.Add(value);
        return this;
      }
      public Builder AddFloors(global::D3.Leaderboard.RiftFloor.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.floors_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFloors(scg::IEnumerable<global::D3.Leaderboard.RiftFloor> values) {
        PrepareBuilder();
        result.floors_.Add(values);
        return this;
      }
      public Builder ClearFloors() {
        PrepareBuilder();
        result.floors_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Leaderboard.RiftPylon> PylonsList {
        get { return PrepareBuilder().pylons_; }
      }
      public int PylonsCount {
        get { return result.PylonsCount; }
      }
      public global::D3.Leaderboard.RiftPylon GetPylons(int index) {
        return result.GetPylons(index);
      }
      public Builder SetPylons(int index, global::D3.Leaderboard.RiftPylon value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.pylons_[index] = value;
        return this;
      }
      public Builder SetPylons(int index, global::D3.Leaderboard.RiftPylon.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.pylons_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPylons(global::D3.Leaderboard.RiftPylon value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.pylons_.Add(value);
        return this;
      }
      public Builder AddPylons(global::D3.Leaderboard.RiftPylon.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.pylons_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePylons(scg::IEnumerable<global::D3.Leaderboard.RiftPylon> values) {
        PrepareBuilder();
        result.pylons_.Add(values);
        return this;
      }
      public Builder ClearPylons() {
        PrepareBuilder();
        result.pylons_.Clear();
        return this;
      }
      
      public bool HasDeprecatedCompletionSeconds {
        get { return result.hasDeprecatedCompletionSeconds; }
      }
      public uint DeprecatedCompletionSeconds {
        get { return result.DeprecatedCompletionSeconds; }
        set { SetDeprecatedCompletionSeconds(value); }
      }
      public Builder SetDeprecatedCompletionSeconds(uint value) {
        PrepareBuilder();
        result.hasDeprecatedCompletionSeconds = true;
        result.deprecatedCompletionSeconds_ = value;
        return this;
      }
      public Builder ClearDeprecatedCompletionSeconds() {
        PrepareBuilder();
        result.hasDeprecatedCompletionSeconds = false;
        result.deprecatedCompletionSeconds_ = 0;
        return this;
      }
      
      public bool HasNumDeaths {
        get { return result.hasNumDeaths; }
      }
      public uint NumDeaths {
        get { return result.NumDeaths; }
        set { SetNumDeaths(value); }
      }
      public Builder SetNumDeaths(uint value) {
        PrepareBuilder();
        result.hasNumDeaths = true;
        result.numDeaths_ = value;
        return this;
      }
      public Builder ClearNumDeaths() {
        PrepareBuilder();
        result.hasNumDeaths = false;
        result.numDeaths_ = 0;
        return this;
      }
      
      public bool HasCompletionMilliseconds {
        get { return result.hasCompletionMilliseconds; }
      }
      public uint CompletionMilliseconds {
        get { return result.CompletionMilliseconds; }
        set { SetCompletionMilliseconds(value); }
      }
      public Builder SetCompletionMilliseconds(uint value) {
        PrepareBuilder();
        result.hasCompletionMilliseconds = true;
        result.completionMilliseconds_ = value;
        return this;
      }
      public Builder ClearCompletionMilliseconds() {
        PrepareBuilder();
        result.hasCompletionMilliseconds = false;
        result.completionMilliseconds_ = 0;
        return this;
      }
    }
    static RiftSnapshot() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class WeeklyChallengeData : pb::GeneratedMessage<WeeklyChallengeData, WeeklyChallengeData.Builder> {
    private WeeklyChallengeData() { }
    private static readonly WeeklyChallengeData defaultInstance = new WeeklyChallengeData().MakeReadOnly();
    private static readonly string[] _weeklyChallengeDataFieldNames = new string[] { "account_snapshot", "bnet_account_id", "game_account_id", "hero_snapshot", "rift_snapshot" };
    private static readonly uint[] _weeklyChallengeDataFieldTags = new uint[] { 26, 32, 42, 18, 10 };
    public static WeeklyChallengeData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override WeeklyChallengeData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override WeeklyChallengeData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_WeeklyChallengeData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<WeeklyChallengeData, WeeklyChallengeData.Builder> InternalFieldAccessors {
      get { return global::D3.Leaderboard.Leaderboard.internal__static_D3_Leaderboard_WeeklyChallengeData__FieldAccessorTable; }
    }
    
    public const int RiftSnapshotFieldNumber = 1;
    private bool hasRiftSnapshot;
    private global::D3.Leaderboard.RiftSnapshot riftSnapshot_;
    public bool HasRiftSnapshot {
      get { return hasRiftSnapshot; }
    }
    public global::D3.Leaderboard.RiftSnapshot RiftSnapshot {
      get { return riftSnapshot_ ?? global::D3.Leaderboard.RiftSnapshot.DefaultInstance; }
    }
    
    public const int HeroSnapshotFieldNumber = 2;
    private bool hasHeroSnapshot;
    private global::D3.Hero.SavedDefinition heroSnapshot_;
    public bool HasHeroSnapshot {
      get { return hasHeroSnapshot; }
    }
    public global::D3.Hero.SavedDefinition HeroSnapshot {
      get { return heroSnapshot_ ?? global::D3.Hero.SavedDefinition.DefaultInstance; }
    }
    
    public const int AccountSnapshotFieldNumber = 3;
    private bool hasAccountSnapshot;
    private global::D3.Account.SavedDefinition accountSnapshot_;
    public bool HasAccountSnapshot {
      get { return hasAccountSnapshot; }
    }
    public global::D3.Account.SavedDefinition AccountSnapshot {
      get { return accountSnapshot_ ?? global::D3.Account.SavedDefinition.DefaultInstance; }
    }
    
    public const int BnetAccountIdFieldNumber = 4;
    private bool hasBnetAccountId;
    private uint bnetAccountId_;
    public bool HasBnetAccountId {
      get { return hasBnetAccountId; }
    }
    public uint BnetAccountId {
      get { return bnetAccountId_; }
    }
    
    public const int GameAccountIdFieldNumber = 5;
    private bool hasGameAccountId;
    private global::D3.OnlineService.GameAccountHandle gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::D3.OnlineService.GameAccountHandle GameAccountId {
      get { return gameAccountId_ ?? global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRiftSnapshot) return false;
        if (!hasHeroSnapshot) return false;
        if (!hasAccountSnapshot) return false;
        if (!RiftSnapshot.IsInitialized) return false;
        if (!HeroSnapshot.IsInitialized) return false;
        if (!AccountSnapshot.IsInitialized) return false;
        if (HasGameAccountId) {
          if (!GameAccountId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _weeklyChallengeDataFieldNames;
      if (hasRiftSnapshot) {
        output.WriteMessage(1, field_names[4], RiftSnapshot);
      }
      if (hasHeroSnapshot) {
        output.WriteMessage(2, field_names[3], HeroSnapshot);
      }
      if (hasAccountSnapshot) {
        output.WriteMessage(3, field_names[0], AccountSnapshot);
      }
      if (hasBnetAccountId) {
        output.WriteUInt32(4, field_names[1], BnetAccountId);
      }
      if (hasGameAccountId) {
        output.WriteMessage(5, field_names[2], GameAccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRiftSnapshot) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, RiftSnapshot);
        }
        if (hasHeroSnapshot) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, HeroSnapshot);
        }
        if (hasAccountSnapshot) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, AccountSnapshot);
        }
        if (hasBnetAccountId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, BnetAccountId);
        }
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, GameAccountId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static WeeklyChallengeData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WeeklyChallengeData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WeeklyChallengeData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WeeklyChallengeData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WeeklyChallengeData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WeeklyChallengeData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static WeeklyChallengeData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static WeeklyChallengeData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static WeeklyChallengeData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WeeklyChallengeData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private WeeklyChallengeData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(WeeklyChallengeData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<WeeklyChallengeData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(WeeklyChallengeData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private WeeklyChallengeData result;
      
      private WeeklyChallengeData PrepareBuilder() {
        if (resultIsReadOnly) {
          WeeklyChallengeData original = result;
          result = new WeeklyChallengeData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override WeeklyChallengeData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Leaderboard.WeeklyChallengeData.Descriptor; }
      }
      
      public override WeeklyChallengeData DefaultInstanceForType {
        get { return global::D3.Leaderboard.WeeklyChallengeData.DefaultInstance; }
      }
      
      public override WeeklyChallengeData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is WeeklyChallengeData) {
          return MergeFrom((WeeklyChallengeData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(WeeklyChallengeData other) {
        if (other == global::D3.Leaderboard.WeeklyChallengeData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRiftSnapshot) {
          MergeRiftSnapshot(other.RiftSnapshot);
        }
        if (other.HasHeroSnapshot) {
          MergeHeroSnapshot(other.HeroSnapshot);
        }
        if (other.HasAccountSnapshot) {
          MergeAccountSnapshot(other.AccountSnapshot);
        }
        if (other.HasBnetAccountId) {
          BnetAccountId = other.BnetAccountId;
        }
        if (other.HasGameAccountId) {
          MergeGameAccountId(other.GameAccountId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_weeklyChallengeDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _weeklyChallengeDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.Leaderboard.RiftSnapshot.Builder subBuilder = global::D3.Leaderboard.RiftSnapshot.CreateBuilder();
              if (result.hasRiftSnapshot) {
                subBuilder.MergeFrom(RiftSnapshot);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RiftSnapshot = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.Hero.SavedDefinition.Builder subBuilder = global::D3.Hero.SavedDefinition.CreateBuilder();
              if (result.hasHeroSnapshot) {
                subBuilder.MergeFrom(HeroSnapshot);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroSnapshot = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.Account.SavedDefinition.Builder subBuilder = global::D3.Account.SavedDefinition.CreateBuilder();
              if (result.hasAccountSnapshot) {
                subBuilder.MergeFrom(AccountSnapshot);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountSnapshot = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasBnetAccountId = input.ReadUInt32(ref result.bnetAccountId_);
              break;
            }
            case 42: {
              global::D3.OnlineService.GameAccountHandle.Builder subBuilder = global::D3.OnlineService.GameAccountHandle.CreateBuilder();
              if (result.hasGameAccountId) {
                subBuilder.MergeFrom(GameAccountId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRiftSnapshot {
       get { return result.hasRiftSnapshot; }
      }
      public global::D3.Leaderboard.RiftSnapshot RiftSnapshot {
        get { return result.RiftSnapshot; }
        set { SetRiftSnapshot(value); }
      }
      public Builder SetRiftSnapshot(global::D3.Leaderboard.RiftSnapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRiftSnapshot = true;
        result.riftSnapshot_ = value;
        return this;
      }
      public Builder SetRiftSnapshot(global::D3.Leaderboard.RiftSnapshot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRiftSnapshot = true;
        result.riftSnapshot_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRiftSnapshot(global::D3.Leaderboard.RiftSnapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRiftSnapshot &&
            result.riftSnapshot_ != global::D3.Leaderboard.RiftSnapshot.DefaultInstance) {
            result.riftSnapshot_ = global::D3.Leaderboard.RiftSnapshot.CreateBuilder(result.riftSnapshot_).MergeFrom(value).BuildPartial();
        } else {
          result.riftSnapshot_ = value;
        }
        result.hasRiftSnapshot = true;
        return this;
      }
      public Builder ClearRiftSnapshot() {
        PrepareBuilder();
        result.hasRiftSnapshot = false;
        result.riftSnapshot_ = null;
        return this;
      }
      
      public bool HasHeroSnapshot {
       get { return result.hasHeroSnapshot; }
      }
      public global::D3.Hero.SavedDefinition HeroSnapshot {
        get { return result.HeroSnapshot; }
        set { SetHeroSnapshot(value); }
      }
      public Builder SetHeroSnapshot(global::D3.Hero.SavedDefinition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroSnapshot = true;
        result.heroSnapshot_ = value;
        return this;
      }
      public Builder SetHeroSnapshot(global::D3.Hero.SavedDefinition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroSnapshot = true;
        result.heroSnapshot_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroSnapshot(global::D3.Hero.SavedDefinition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroSnapshot &&
            result.heroSnapshot_ != global::D3.Hero.SavedDefinition.DefaultInstance) {
            result.heroSnapshot_ = global::D3.Hero.SavedDefinition.CreateBuilder(result.heroSnapshot_).MergeFrom(value).BuildPartial();
        } else {
          result.heroSnapshot_ = value;
        }
        result.hasHeroSnapshot = true;
        return this;
      }
      public Builder ClearHeroSnapshot() {
        PrepareBuilder();
        result.hasHeroSnapshot = false;
        result.heroSnapshot_ = null;
        return this;
      }
      
      public bool HasAccountSnapshot {
       get { return result.hasAccountSnapshot; }
      }
      public global::D3.Account.SavedDefinition AccountSnapshot {
        get { return result.AccountSnapshot; }
        set { SetAccountSnapshot(value); }
      }
      public Builder SetAccountSnapshot(global::D3.Account.SavedDefinition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountSnapshot = true;
        result.accountSnapshot_ = value;
        return this;
      }
      public Builder SetAccountSnapshot(global::D3.Account.SavedDefinition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountSnapshot = true;
        result.accountSnapshot_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountSnapshot(global::D3.Account.SavedDefinition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountSnapshot &&
            result.accountSnapshot_ != global::D3.Account.SavedDefinition.DefaultInstance) {
            result.accountSnapshot_ = global::D3.Account.SavedDefinition.CreateBuilder(result.accountSnapshot_).MergeFrom(value).BuildPartial();
        } else {
          result.accountSnapshot_ = value;
        }
        result.hasAccountSnapshot = true;
        return this;
      }
      public Builder ClearAccountSnapshot() {
        PrepareBuilder();
        result.hasAccountSnapshot = false;
        result.accountSnapshot_ = null;
        return this;
      }
      
      public bool HasBnetAccountId {
        get { return result.hasBnetAccountId; }
      }
      public uint BnetAccountId {
        get { return result.BnetAccountId; }
        set { SetBnetAccountId(value); }
      }
      public Builder SetBnetAccountId(uint value) {
        PrepareBuilder();
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = value;
        return this;
      }
      public Builder ClearBnetAccountId() {
        PrepareBuilder();
        result.hasBnetAccountId = false;
        result.bnetAccountId_ = 0;
        return this;
      }
      
      public bool HasGameAccountId {
       get { return result.hasGameAccountId; }
      }
      public global::D3.OnlineService.GameAccountHandle GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::D3.OnlineService.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::D3.OnlineService.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccountId &&
            result.gameAccountId_ != global::D3.OnlineService.GameAccountHandle.DefaultInstance) {
            result.gameAccountId_ = global::D3.OnlineService.GameAccountHandle.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = null;
        return this;
      }
    }
    static WeeklyChallengeData() {
      object.ReferenceEquals(global::D3.Leaderboard.Leaderboard.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
