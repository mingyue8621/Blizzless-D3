// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Notification {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Notification {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Notification_GuildInvitesListUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Notification.GuildInvitesListUpdate, global::D3.Notification.GuildInvitesListUpdate.Builder> internal__static_D3_Notification_GuildInvitesListUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Notification_EraInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Notification.EraInfo, global::D3.Notification.EraInfo.Builder> internal__static_D3_Notification_EraInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Notification_InitialLoginData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Notification.InitialLoginData, global::D3.Notification.InitialLoginData.Builder> internal__static_D3_Notification_InitialLoginData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Notification_InitialLoginDataResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Notification.InitialLoginDataResponse, global::D3.Notification.InitialLoginDataResponse.Builder> internal__static_D3_Notification_InitialLoginDataResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Notification_InitialLoginDataHeartbeat__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Notification.InitialLoginDataHeartbeat, global::D3.Notification.InitialLoginDataHeartbeat.Builder> internal__static_D3_Notification_InitialLoginDataHeartbeat__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Notification_NewPersonalBest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Notification.NewPersonalBest, global::D3.Notification.NewPersonalBest.Builder> internal__static_D3_Notification_NewPersonalBest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Notification_AccountMigrationAltLevel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Notification.AccountMigrationAltLevel, global::D3.Notification.AccountMigrationAltLevel.Builder> internal__static_D3_Notification_AccountMigrationAltLevel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Notification_AccountMigrationCompleted__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Notification.AccountMigrationCompleted, global::D3.Notification.AccountMigrationCompleted.Builder> internal__static_D3_Notification_AccountMigrationCompleted__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Notification_ReceiveDataRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Notification.ReceiveDataRequest, global::D3.Notification.ReceiveDataRequest.Builder> internal__static_D3_Notification_ReceiveDataRequest__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Notification() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChJOb3RpZmljYXRpb24ucHJvdG8SD0QzLk5vdGlmaWNhdGlvbhoRR2FtZU1l" + 
          "c3NhZ2UucHJvdG8aDUFjY291bnQucHJvdG8aC0d1aWxkLnByb3RvGhFMZWFk" + 
          "ZXJib2FyZC5wcm90bxoOU2V0dGluZ3MucHJvdG8aC1N0b3JlLnByb3RvGhNP" + 
          "bmxpbmVTZXJ2aWNlLnByb3RvIoABChZHdWlsZEludml0ZXNMaXN0VXBkYXRl" + 
          "Eh0KCmlzX3JlbW92ZWQYASACKAhSCWlzUmVtb3ZlZBIZCghndWlsZF9pZBgC" + 
          "IAIoBFIHZ3VpbGRJZBIsCgZpbnZpdGUYAyABKAsyFC5EMy5HdWlsZC5JbnZp" + 
          "dGVJbmZvUgZpbnZpdGUiWAoHRXJhSW5mbxIOCgJpZBgBIAIoDVICaWQSJwoP" + 
          "bmFtZV9kZXByZWNhdGVkGAIgASgJUg5uYW1lRGVwcmVjYXRlZBIUCgVlcG9j" + 
          "aBgDIAEoBFIFZXBvY2gi2ggKEEluaXRpYWxMb2dpbkRhdGESUgoVZ2FtZV9h" + 
          "Y2NvdW50X3NldHRpbmdzGAEgAigLMh4uRDMuQ2xpZW50LkdhbWVBY2NvdW50" + 
          "U2V0dGluZ3NSE2dhbWVBY2NvdW50U2V0dGluZ3MSSQoMaGVyb19kaWdlc3Rz" + 
          "GAIgAigLMiYuRDMuR2FtZU1lc3NhZ2UuSGVyb0RpZ2VzdExpc3RSZXNwb25z" + 
          "ZVILaGVyb0RpZ2VzdHMSOQoOYWNjb3VudF9kaWdlc3QYAyACKAsyEi5EMy5B" + 
          "Y2NvdW50LkRpZ2VzdFINYWNjb3VudERpZ2VzdBIvCgZndWlsZHMYBCACKAsy" + 
          "Fy5EMy5HdWlsZC5HdWlsZEluZm9MaXN0UgZndWlsZHMSPQoNZ3VpbGRfaW52" + 
          "aXRlcxgFIAIoCzIYLkQzLkd1aWxkLkludml0ZUluZm9MaXN0UgxndWlsZElu" + 
          "dml0ZXMSJQoOc2Vlbl90dXRvcmlhbHMYBiACKAxSDXNlZW5UdXRvcmlhbHMS" + 
          "KQoQbWF0Y2htYWtpbmdfcG9vbBgHIAIoCVIPbWF0Y2htYWtpbmdQb29sEiwK" + 
          "BGVyYXMYCCADKAsyGC5EMy5Ob3RpZmljYXRpb24uRXJhSW5mb1IEZXJhcxId" + 
          "Cgpsb2dvbl90aW1lGAkgASgEUglsb2dvblRpbWUSTAoQY29udGVudF9saWNl" + 
          "bnNlcxgKIAEoCzIhLkQzLk9ubGluZVNlcnZpY2UuQ29udGVudExpY2Vuc2Vz" + 
          "Ug9jb250ZW50TGljZW5zZXMSIwoNc2Vzc2lvbl9mbGFncxgLIAEoDVIMc2Vz" + 
          "c2lvbkZsYWdzEjwKEW91dHN0YW5kaW5nX29yZGVyGAwgASgLMg8uRDMuU3Rv" + 
          "cmUuT3JkZXJSEG91dHN0YW5kaW5nT3JkZXISSgoVdW5hY2tub3dsZWRnZWRf" + 
          "b3JkZXJzGA0gAygLMhUuRDMuU3RvcmUuT3JkZXJTdGF0dXNSFHVuYWNrbm93" + 
          "bGVkZ2VkT3JkZXJzElAKFG1pc3NpbmdfZW50aXRsZW1lbnRzGA4gASgLMh0u" + 
          "RDMuU3RvcmUuTWlzc2luZ0VudGl0bGVtZW50c1ITbWlzc2luZ0VudGl0bGVt" + 
          "ZW50cxJfChthY2hpZXZlbWVudHNfY29udGVudF9oYW5kbGUYDyABKAsyHy5E" + 
          "My5PbmxpbmVTZXJ2aWNlLkNvbnRlbnRIYW5kbGVSGWFjaGlldmVtZW50c0Nv" + 
          "bnRlbnRIYW5kbGUSOgoZcHJvZ3JhbV9ibGFja2xpc3RfZm91cmNjcxgQIAMo" + 
          "DVIXcHJvZ3JhbUJsYWNrbGlzdEZvdXJjY3MSUAojY2hhdF9yZXN0cmljdGlv" + 
          "bl9jb250ZW50X2xpY2Vuc2VfaWQYESABKAU6Ai0xUh9jaGF0UmVzdHJpY3Rp" + 
          "b25Db250ZW50TGljZW5zZUlkEh8KC3N5bmNlZF92YXJzGBIgASgJUgpzeW5j" + 
          "ZWRWYXJzIpoBChhJbml0aWFsTG9naW5EYXRhUmVzcG9uc2USHQoKZXJyb3Jf" + 
          "Y29kZRgBIAIoDVIJZXJyb3JDb2RlEh0KCnNlcnZpY2VfaWQYAiACKA1SCXNl" + 
          "cnZpY2VJZBJACgpsb2dpbl9kYXRhGAMgASgLMiEuRDMuTm90aWZpY2F0aW9u" + 
          "LkluaXRpYWxMb2dpbkRhdGFSCWxvZ2luRGF0YSI6ChlJbml0aWFsTG9naW5E" + 
          "YXRhSGVhcnRiZWF0Eh0KCnNlcnZpY2VfaWQYASACKA1SCXNlcnZpY2VJZCJv" + 
          "Cg9OZXdQZXJzb25hbEJlc3QSKwoFc2NvcmUYASACKAsyFS5EMy5MZWFkZXJi" + 
          "b2FyZC5TY29yZVIFc2NvcmUSEgoEcmFuaxgCIAEoBVIEcmFuaxIbCglvbGRf" + 
          "c2NvcmUYAyABKARSCG9sZFNjb3JlIloKGEFjY291bnRNaWdyYXRpb25BbHRM" + 
          "ZXZlbBIhCgxwYXJ0aXRpb25faWQYASACKA1SC3BhcnRpdGlvbklkEhsKCWFs" + 
          "dF9sZXZlbBgCIAIoDVIIYWx0TGV2ZWwiZQoZQWNjb3VudE1pZ3JhdGlvbkNv" + 
          "bXBsZXRlZBJICgphbHRfbGV2ZWxzGAEgAygLMikuRDMuTm90aWZpY2F0aW9u" + 
          "LkFjY291bnRNaWdyYXRpb25BbHRMZXZlbFIJYWx0TGV2ZWxzIigKElJlY2Vp" + 
          "dmVEYXRhUmVxdWVzdBISCgRkYXRhGAEgAygMUgRkYXRh");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Notification_GuildInvitesListUpdate__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Notification_GuildInvitesListUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Notification.GuildInvitesListUpdate, global::D3.Notification.GuildInvitesListUpdate.Builder>(internal__static_D3_Notification_GuildInvitesListUpdate__Descriptor,
                new string[] { "IsRemoved", "GuildId", "Invite", });
        internal__static_D3_Notification_EraInfo__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Notification_EraInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Notification.EraInfo, global::D3.Notification.EraInfo.Builder>(internal__static_D3_Notification_EraInfo__Descriptor,
                new string[] { "Id", "NameDeprecated", "Epoch", });
        internal__static_D3_Notification_InitialLoginData__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_Notification_InitialLoginData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Notification.InitialLoginData, global::D3.Notification.InitialLoginData.Builder>(internal__static_D3_Notification_InitialLoginData__Descriptor,
                new string[] { "GameAccountSettings", "HeroDigests", "AccountDigest", "Guilds", "GuildInvites", "SeenTutorials", "MatchmakingPool", "Eras", "LogonTime", "ContentLicenses", "SessionFlags", "OutstandingOrder", "UnacknowledgedOrders", "MissingEntitlements", "AchievementsContentHandle", "ProgramBlacklistFourccs", "ChatRestrictionContentLicenseId", "SyncedVars", });
        internal__static_D3_Notification_InitialLoginDataResponse__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_Notification_InitialLoginDataResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Notification.InitialLoginDataResponse, global::D3.Notification.InitialLoginDataResponse.Builder>(internal__static_D3_Notification_InitialLoginDataResponse__Descriptor,
                new string[] { "ErrorCode", "ServiceId", "LoginData", });
        internal__static_D3_Notification_InitialLoginDataHeartbeat__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_Notification_InitialLoginDataHeartbeat__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Notification.InitialLoginDataHeartbeat, global::D3.Notification.InitialLoginDataHeartbeat.Builder>(internal__static_D3_Notification_InitialLoginDataHeartbeat__Descriptor,
                new string[] { "ServiceId", });
        internal__static_D3_Notification_NewPersonalBest__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_Notification_NewPersonalBest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Notification.NewPersonalBest, global::D3.Notification.NewPersonalBest.Builder>(internal__static_D3_Notification_NewPersonalBest__Descriptor,
                new string[] { "Score", "Rank", "OldScore", });
        internal__static_D3_Notification_AccountMigrationAltLevel__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_Notification_AccountMigrationAltLevel__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Notification.AccountMigrationAltLevel, global::D3.Notification.AccountMigrationAltLevel.Builder>(internal__static_D3_Notification_AccountMigrationAltLevel__Descriptor,
                new string[] { "PartitionId", "AltLevel", });
        internal__static_D3_Notification_AccountMigrationCompleted__Descriptor = Descriptor.MessageTypes[7];
        internal__static_D3_Notification_AccountMigrationCompleted__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Notification.AccountMigrationCompleted, global::D3.Notification.AccountMigrationCompleted.Builder>(internal__static_D3_Notification_AccountMigrationCompleted__Descriptor,
                new string[] { "AltLevels", });
        internal__static_D3_Notification_ReceiveDataRequest__Descriptor = Descriptor.MessageTypes[8];
        internal__static_D3_Notification_ReceiveDataRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Notification.ReceiveDataRequest, global::D3.Notification.ReceiveDataRequest.Builder>(internal__static_D3_Notification_ReceiveDataRequest__Descriptor,
                new string[] { "Data", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::D3.GameMessage.GameMessage.RegisterAllExtensions(registry);
        global::D3.Account.Account.RegisterAllExtensions(registry);
        global::D3.Guild.Proto.Guild.RegisterAllExtensions(registry);
        global::D3.Leaderboard.Leaderboard.RegisterAllExtensions(registry);
        global::D3.Client.Settings.RegisterAllExtensions(registry);
        global::D3.Store.Store.RegisterAllExtensions(registry);
        global::D3.OnlineService.OnlineService.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.GameMessage.GameMessage.Descriptor, 
          global::D3.Account.Account.Descriptor, 
          global::D3.Guild.Proto.Guild.Descriptor, 
          global::D3.Leaderboard.Leaderboard.Descriptor, 
          global::D3.Client.Settings.Descriptor, 
          global::D3.Store.Store.Descriptor, 
          global::D3.OnlineService.OnlineService.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildInvitesListUpdate : pb::GeneratedMessage<GuildInvitesListUpdate, GuildInvitesListUpdate.Builder> {
    private GuildInvitesListUpdate() { }
    private static readonly GuildInvitesListUpdate defaultInstance = new GuildInvitesListUpdate().MakeReadOnly();
    private static readonly string[] _guildInvitesListUpdateFieldNames = new string[] { "guild_id", "invite", "is_removed" };
    private static readonly uint[] _guildInvitesListUpdateFieldTags = new uint[] { 16, 26, 8 };
    public static GuildInvitesListUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildInvitesListUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildInvitesListUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_GuildInvitesListUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildInvitesListUpdate, GuildInvitesListUpdate.Builder> InternalFieldAccessors {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_GuildInvitesListUpdate__FieldAccessorTable; }
    }
    
    public const int IsRemovedFieldNumber = 1;
    private bool hasIsRemoved;
    private bool isRemoved_;
    public bool HasIsRemoved {
      get { return hasIsRemoved; }
    }
    public bool IsRemoved {
      get { return isRemoved_; }
    }
    
    public const int GuildIdFieldNumber = 2;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int InviteFieldNumber = 3;
    private bool hasInvite;
    private global::D3.Guild.InviteInfo invite_;
    public bool HasInvite {
      get { return hasInvite; }
    }
    public global::D3.Guild.InviteInfo Invite {
      get { return invite_ ?? global::D3.Guild.InviteInfo.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIsRemoved) return false;
        if (!hasGuildId) return false;
        if (HasInvite) {
          if (!Invite.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildInvitesListUpdateFieldNames;
      if (hasIsRemoved) {
        output.WriteBool(1, field_names[2], IsRemoved);
      }
      if (hasGuildId) {
        output.WriteUInt64(2, field_names[0], GuildId);
      }
      if (hasInvite) {
        output.WriteMessage(3, field_names[1], Invite);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIsRemoved) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, IsRemoved);
        }
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, GuildId);
        }
        if (hasInvite) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Invite);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildInvitesListUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInvitesListUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInvitesListUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInvitesListUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInvitesListUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInvitesListUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildInvitesListUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildInvitesListUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildInvitesListUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInvitesListUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildInvitesListUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildInvitesListUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildInvitesListUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildInvitesListUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildInvitesListUpdate result;
      
      private GuildInvitesListUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildInvitesListUpdate original = result;
          result = new GuildInvitesListUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildInvitesListUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Notification.GuildInvitesListUpdate.Descriptor; }
      }
      
      public override GuildInvitesListUpdate DefaultInstanceForType {
        get { return global::D3.Notification.GuildInvitesListUpdate.DefaultInstance; }
      }
      
      public override GuildInvitesListUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildInvitesListUpdate) {
          return MergeFrom((GuildInvitesListUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildInvitesListUpdate other) {
        if (other == global::D3.Notification.GuildInvitesListUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsRemoved) {
          IsRemoved = other.IsRemoved;
        }
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasInvite) {
          MergeInvite(other.Invite);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildInvitesListUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildInvitesListUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsRemoved = input.ReadBool(ref result.isRemoved_);
              break;
            }
            case 16: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 26: {
              global::D3.Guild.InviteInfo.Builder subBuilder = global::D3.Guild.InviteInfo.CreateBuilder();
              if (result.hasInvite) {
                subBuilder.MergeFrom(Invite);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Invite = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIsRemoved {
        get { return result.hasIsRemoved; }
      }
      public bool IsRemoved {
        get { return result.IsRemoved; }
        set { SetIsRemoved(value); }
      }
      public Builder SetIsRemoved(bool value) {
        PrepareBuilder();
        result.hasIsRemoved = true;
        result.isRemoved_ = value;
        return this;
      }
      public Builder ClearIsRemoved() {
        PrepareBuilder();
        result.hasIsRemoved = false;
        result.isRemoved_ = false;
        return this;
      }
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasInvite {
       get { return result.hasInvite; }
      }
      public global::D3.Guild.InviteInfo Invite {
        get { return result.Invite; }
        set { SetInvite(value); }
      }
      public Builder SetInvite(global::D3.Guild.InviteInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvite = true;
        result.invite_ = value;
        return this;
      }
      public Builder SetInvite(global::D3.Guild.InviteInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasInvite = true;
        result.invite_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInvite(global::D3.Guild.InviteInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasInvite &&
            result.invite_ != global::D3.Guild.InviteInfo.DefaultInstance) {
            result.invite_ = global::D3.Guild.InviteInfo.CreateBuilder(result.invite_).MergeFrom(value).BuildPartial();
        } else {
          result.invite_ = value;
        }
        result.hasInvite = true;
        return this;
      }
      public Builder ClearInvite() {
        PrepareBuilder();
        result.hasInvite = false;
        result.invite_ = null;
        return this;
      }
    }
    static GuildInvitesListUpdate() {
      object.ReferenceEquals(global::D3.Notification.Notification.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class EraInfo : pb::GeneratedMessage<EraInfo, EraInfo.Builder> {
    private EraInfo() { }
    private static readonly EraInfo defaultInstance = new EraInfo().MakeReadOnly();
    private static readonly string[] _eraInfoFieldNames = new string[] { "epoch", "id", "name_deprecated" };
    private static readonly uint[] _eraInfoFieldTags = new uint[] { 24, 8, 18 };
    public static EraInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EraInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EraInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_EraInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EraInfo, EraInfo.Builder> InternalFieldAccessors {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_EraInfo__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public const int NameDeprecatedFieldNumber = 2;
    private bool hasNameDeprecated;
    private string nameDeprecated_ = "";
    public bool HasNameDeprecated {
      get { return hasNameDeprecated; }
    }
    public string NameDeprecated {
      get { return nameDeprecated_; }
    }
    
    public const int EpochFieldNumber = 3;
    private bool hasEpoch;
    private ulong epoch_;
    public bool HasEpoch {
      get { return hasEpoch; }
    }
    public ulong Epoch {
      get { return epoch_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _eraInfoFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[1], Id);
      }
      if (hasNameDeprecated) {
        output.WriteString(2, field_names[2], NameDeprecated);
      }
      if (hasEpoch) {
        output.WriteUInt64(3, field_names[0], Epoch);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
        }
        if (hasNameDeprecated) {
          size += pb::CodedOutputStream.ComputeStringSize(2, NameDeprecated);
        }
        if (hasEpoch) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, Epoch);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EraInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EraInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EraInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EraInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EraInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EraInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EraInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EraInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EraInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EraInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EraInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EraInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<EraInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EraInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EraInfo result;
      
      private EraInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          EraInfo original = result;
          result = new EraInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EraInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Notification.EraInfo.Descriptor; }
      }
      
      public override EraInfo DefaultInstanceForType {
        get { return global::D3.Notification.EraInfo.DefaultInstance; }
      }
      
      public override EraInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EraInfo) {
          return MergeFrom((EraInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EraInfo other) {
        if (other == global::D3.Notification.EraInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasNameDeprecated) {
          NameDeprecated = other.NameDeprecated;
        }
        if (other.HasEpoch) {
          Epoch = other.Epoch;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_eraInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _eraInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasNameDeprecated = input.ReadString(ref result.nameDeprecated_);
              break;
            }
            case 24: {
              result.hasEpoch = input.ReadUInt64(ref result.epoch_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasNameDeprecated {
        get { return result.hasNameDeprecated; }
      }
      public string NameDeprecated {
        get { return result.NameDeprecated; }
        set { SetNameDeprecated(value); }
      }
      public Builder SetNameDeprecated(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNameDeprecated = true;
        result.nameDeprecated_ = value;
        return this;
      }
      public Builder ClearNameDeprecated() {
        PrepareBuilder();
        result.hasNameDeprecated = false;
        result.nameDeprecated_ = "";
        return this;
      }
      
      public bool HasEpoch {
        get { return result.hasEpoch; }
      }
      public ulong Epoch {
        get { return result.Epoch; }
        set { SetEpoch(value); }
      }
      public Builder SetEpoch(ulong value) {
        PrepareBuilder();
        result.hasEpoch = true;
        result.epoch_ = value;
        return this;
      }
      public Builder ClearEpoch() {
        PrepareBuilder();
        result.hasEpoch = false;
        result.epoch_ = 0UL;
        return this;
      }
    }
    static EraInfo() {
      object.ReferenceEquals(global::D3.Notification.Notification.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class InitialLoginData : pb::GeneratedMessage<InitialLoginData, InitialLoginData.Builder> {
    private InitialLoginData() { }
    private static readonly InitialLoginData defaultInstance = new InitialLoginData().MakeReadOnly();
    private static readonly string[] _initialLoginDataFieldNames = new string[] { "account_digest", "achievements_content_handle", "chat_restriction_content_license_id", "content_licenses", "eras", "game_account_settings", "guild_invites", "guilds", "hero_digests", "logon_time", "matchmaking_pool", "missing_entitlements", "outstanding_order", "program_blacklist_fourccs", "seen_tutorials", "session_flags", "synced_vars", "unacknowledged_orders" };
    private static readonly uint[] _initialLoginDataFieldTags = new uint[] { 26, 122, 136, 82, 66, 10, 42, 34, 18, 72, 58, 114, 98, 128, 50, 88, 146, 106 };
    public static InitialLoginData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InitialLoginData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override InitialLoginData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_InitialLoginData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InitialLoginData, InitialLoginData.Builder> InternalFieldAccessors {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_InitialLoginData__FieldAccessorTable; }
    }
    
    public const int GameAccountSettingsFieldNumber = 1;
    private bool hasGameAccountSettings;
    private global::D3.Client.GameAccountSettings gameAccountSettings_;
    public bool HasGameAccountSettings {
      get { return hasGameAccountSettings; }
    }
    public global::D3.Client.GameAccountSettings GameAccountSettings {
      get { return gameAccountSettings_ ?? global::D3.Client.GameAccountSettings.DefaultInstance; }
    }
    
    public const int HeroDigestsFieldNumber = 2;
    private bool hasHeroDigests;
    private global::D3.GameMessage.HeroDigestListResponse heroDigests_;
    public bool HasHeroDigests {
      get { return hasHeroDigests; }
    }
    public global::D3.GameMessage.HeroDigestListResponse HeroDigests {
      get { return heroDigests_ ?? global::D3.GameMessage.HeroDigestListResponse.DefaultInstance; }
    }
    
    public const int AccountDigestFieldNumber = 3;
    private bool hasAccountDigest;
    private global::D3.Account.Digest accountDigest_;
    public bool HasAccountDigest {
      get { return hasAccountDigest; }
    }
    public global::D3.Account.Digest AccountDigest {
      get { return accountDigest_ ?? global::D3.Account.Digest.DefaultInstance; }
    }
    
    public const int GuildsFieldNumber = 4;
    private bool hasGuilds;
    private global::D3.Guild.GuildInfoList guilds_;
    public bool HasGuilds {
      get { return hasGuilds; }
    }
    public global::D3.Guild.GuildInfoList Guilds {
      get { return guilds_ ?? global::D3.Guild.GuildInfoList.DefaultInstance; }
    }
    
    public const int GuildInvitesFieldNumber = 5;
    private bool hasGuildInvites;
    private global::D3.Guild.InviteInfoList guildInvites_;
    public bool HasGuildInvites {
      get { return hasGuildInvites; }
    }
    public global::D3.Guild.InviteInfoList GuildInvites {
      get { return guildInvites_ ?? global::D3.Guild.InviteInfoList.DefaultInstance; }
    }
    
    public const int SeenTutorialsFieldNumber = 6;
    private bool hasSeenTutorials;
    private pb::ByteString seenTutorials_ = pb::ByteString.Empty;
    public bool HasSeenTutorials {
      get { return hasSeenTutorials; }
    }
    public pb::ByteString SeenTutorials {
      get { return seenTutorials_; }
    }
    
    public const int MatchmakingPoolFieldNumber = 7;
    private bool hasMatchmakingPool;
    private string matchmakingPool_ = "";
    public bool HasMatchmakingPool {
      get { return hasMatchmakingPool; }
    }
    public string MatchmakingPool {
      get { return matchmakingPool_; }
    }
    
    public const int ErasFieldNumber = 8;
    private pbc::PopsicleList<global::D3.Notification.EraInfo> eras_ = new pbc::PopsicleList<global::D3.Notification.EraInfo>();
    public scg::IList<global::D3.Notification.EraInfo> ErasList {
      get { return eras_; }
    }
    public int ErasCount {
      get { return eras_.Count; }
    }
    public global::D3.Notification.EraInfo GetEras(int index) {
      return eras_[index];
    }
    
    public const int LogonTimeFieldNumber = 9;
    private bool hasLogonTime;
    private ulong logonTime_;
    public bool HasLogonTime {
      get { return hasLogonTime; }
    }
    public ulong LogonTime {
      get { return logonTime_; }
    }
    
    public const int ContentLicensesFieldNumber = 10;
    private bool hasContentLicenses;
    private global::D3.OnlineService.ContentLicenses contentLicenses_;
    public bool HasContentLicenses {
      get { return hasContentLicenses; }
    }
    public global::D3.OnlineService.ContentLicenses ContentLicenses {
      get { return contentLicenses_ ?? global::D3.OnlineService.ContentLicenses.DefaultInstance; }
    }
    
    public const int SessionFlagsFieldNumber = 11;
    private bool hasSessionFlags;
    private uint sessionFlags_;
    public bool HasSessionFlags {
      get { return hasSessionFlags; }
    }
    public uint SessionFlags {
      get { return sessionFlags_; }
    }
    
    public const int OutstandingOrderFieldNumber = 12;
    private bool hasOutstandingOrder;
    private global::D3.Store.Order outstandingOrder_;
    public bool HasOutstandingOrder {
      get { return hasOutstandingOrder; }
    }
    public global::D3.Store.Order OutstandingOrder {
      get { return outstandingOrder_ ?? global::D3.Store.Order.DefaultInstance; }
    }
    
    public const int UnacknowledgedOrdersFieldNumber = 13;
    private pbc::PopsicleList<global::D3.Store.OrderStatus> unacknowledgedOrders_ = new pbc::PopsicleList<global::D3.Store.OrderStatus>();
    public scg::IList<global::D3.Store.OrderStatus> UnacknowledgedOrdersList {
      get { return unacknowledgedOrders_; }
    }
    public int UnacknowledgedOrdersCount {
      get { return unacknowledgedOrders_.Count; }
    }
    public global::D3.Store.OrderStatus GetUnacknowledgedOrders(int index) {
      return unacknowledgedOrders_[index];
    }
    
    public const int MissingEntitlementsFieldNumber = 14;
    private bool hasMissingEntitlements;
    private global::D3.Store.MissingEntitlements missingEntitlements_;
    public bool HasMissingEntitlements {
      get { return hasMissingEntitlements; }
    }
    public global::D3.Store.MissingEntitlements MissingEntitlements {
      get { return missingEntitlements_ ?? global::D3.Store.MissingEntitlements.DefaultInstance; }
    }
    
    public const int AchievementsContentHandleFieldNumber = 15;
    private bool hasAchievementsContentHandle;
    private global::D3.OnlineService.ContentHandle achievementsContentHandle_;
    public bool HasAchievementsContentHandle {
      get { return hasAchievementsContentHandle; }
    }
    public global::D3.OnlineService.ContentHandle AchievementsContentHandle {
      get { return achievementsContentHandle_ ?? global::D3.OnlineService.ContentHandle.DefaultInstance; }
    }
    
    public const int ProgramBlacklistFourccsFieldNumber = 16;
    private pbc::PopsicleList<uint> programBlacklistFourccs_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> ProgramBlacklistFourccsList {
      get { return pbc::Lists.AsReadOnly(programBlacklistFourccs_); }
    }
    public int ProgramBlacklistFourccsCount {
      get { return programBlacklistFourccs_.Count; }
    }
    public uint GetProgramBlacklistFourccs(int index) {
      return programBlacklistFourccs_[index];
    }
    
    public const int ChatRestrictionContentLicenseIdFieldNumber = 17;
    private bool hasChatRestrictionContentLicenseId;
    private int chatRestrictionContentLicenseId_ = -1;
    public bool HasChatRestrictionContentLicenseId {
      get { return hasChatRestrictionContentLicenseId; }
    }
    public int ChatRestrictionContentLicenseId {
      get { return chatRestrictionContentLicenseId_; }
    }
    
    public const int SyncedVarsFieldNumber = 18;
    private bool hasSyncedVars;
    private string syncedVars_ = "";
    public bool HasSyncedVars {
      get { return hasSyncedVars; }
    }
    public string SyncedVars {
      get { return syncedVars_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameAccountSettings) return false;
        if (!hasHeroDigests) return false;
        if (!hasAccountDigest) return false;
        if (!hasGuilds) return false;
        if (!hasGuildInvites) return false;
        if (!hasSeenTutorials) return false;
        if (!hasMatchmakingPool) return false;
        if (!GameAccountSettings.IsInitialized) return false;
        if (!HeroDigests.IsInitialized) return false;
        if (!AccountDigest.IsInitialized) return false;
        if (!Guilds.IsInitialized) return false;
        if (!GuildInvites.IsInitialized) return false;
        foreach (global::D3.Notification.EraInfo element in ErasList) {
          if (!element.IsInitialized) return false;
        }
        if (HasContentLicenses) {
          if (!ContentLicenses.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _initialLoginDataFieldNames;
      if (hasGameAccountSettings) {
        output.WriteMessage(1, field_names[5], GameAccountSettings);
      }
      if (hasHeroDigests) {
        output.WriteMessage(2, field_names[8], HeroDigests);
      }
      if (hasAccountDigest) {
        output.WriteMessage(3, field_names[0], AccountDigest);
      }
      if (hasGuilds) {
        output.WriteMessage(4, field_names[7], Guilds);
      }
      if (hasGuildInvites) {
        output.WriteMessage(5, field_names[6], GuildInvites);
      }
      if (hasSeenTutorials) {
        output.WriteBytes(6, field_names[14], SeenTutorials);
      }
      if (hasMatchmakingPool) {
        output.WriteString(7, field_names[10], MatchmakingPool);
      }
      if (eras_.Count > 0) {
        output.WriteMessageArray(8, field_names[4], eras_);
      }
      if (hasLogonTime) {
        output.WriteUInt64(9, field_names[9], LogonTime);
      }
      if (hasContentLicenses) {
        output.WriteMessage(10, field_names[3], ContentLicenses);
      }
      if (hasSessionFlags) {
        output.WriteUInt32(11, field_names[15], SessionFlags);
      }
      if (hasOutstandingOrder) {
        output.WriteMessage(12, field_names[12], OutstandingOrder);
      }
      if (unacknowledgedOrders_.Count > 0) {
        output.WriteMessageArray(13, field_names[17], unacknowledgedOrders_);
      }
      if (hasMissingEntitlements) {
        output.WriteMessage(14, field_names[11], MissingEntitlements);
      }
      if (hasAchievementsContentHandle) {
        output.WriteMessage(15, field_names[1], AchievementsContentHandle);
      }
      if (programBlacklistFourccs_.Count > 0) {
        output.WriteUInt32Array(16, field_names[13], programBlacklistFourccs_);
      }
      if (hasChatRestrictionContentLicenseId) {
        output.WriteInt32(17, field_names[2], ChatRestrictionContentLicenseId);
      }
      if (hasSyncedVars) {
        output.WriteString(18, field_names[16], SyncedVars);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGameAccountSettings) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, GameAccountSettings);
        }
        if (hasHeroDigests) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, HeroDigests);
        }
        if (hasAccountDigest) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, AccountDigest);
        }
        if (hasGuilds) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Guilds);
        }
        if (hasGuildInvites) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, GuildInvites);
        }
        if (hasSeenTutorials) {
          size += pb::CodedOutputStream.ComputeBytesSize(6, SeenTutorials);
        }
        if (hasMatchmakingPool) {
          size += pb::CodedOutputStream.ComputeStringSize(7, MatchmakingPool);
        }
        foreach (global::D3.Notification.EraInfo element in ErasList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        if (hasLogonTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(9, LogonTime);
        }
        if (hasContentLicenses) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, ContentLicenses);
        }
        if (hasSessionFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(11, SessionFlags);
        }
        if (hasOutstandingOrder) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, OutstandingOrder);
        }
        foreach (global::D3.Store.OrderStatus element in UnacknowledgedOrdersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, element);
        }
        if (hasMissingEntitlements) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, MissingEntitlements);
        }
        if (hasAchievementsContentHandle) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, AchievementsContentHandle);
        }
        {
          int dataSize = 0;
          foreach (uint element in ProgramBlacklistFourccsList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 2 * programBlacklistFourccs_.Count;
        }
        if (hasChatRestrictionContentLicenseId) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, ChatRestrictionContentLicenseId);
        }
        if (hasSyncedVars) {
          size += pb::CodedOutputStream.ComputeStringSize(18, SyncedVars);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InitialLoginData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitialLoginData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitialLoginData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitialLoginData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitialLoginData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitialLoginData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InitialLoginData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InitialLoginData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InitialLoginData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitialLoginData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private InitialLoginData MakeReadOnly() {
      eras_.MakeReadOnly();
      unacknowledgedOrders_.MakeReadOnly();
      programBlacklistFourccs_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InitialLoginData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<InitialLoginData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(InitialLoginData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private InitialLoginData result;
      
      private InitialLoginData PrepareBuilder() {
        if (resultIsReadOnly) {
          InitialLoginData original = result;
          result = new InitialLoginData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override InitialLoginData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Notification.InitialLoginData.Descriptor; }
      }
      
      public override InitialLoginData DefaultInstanceForType {
        get { return global::D3.Notification.InitialLoginData.DefaultInstance; }
      }
      
      public override InitialLoginData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InitialLoginData) {
          return MergeFrom((InitialLoginData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InitialLoginData other) {
        if (other == global::D3.Notification.InitialLoginData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameAccountSettings) {
          MergeGameAccountSettings(other.GameAccountSettings);
        }
        if (other.HasHeroDigests) {
          MergeHeroDigests(other.HeroDigests);
        }
        if (other.HasAccountDigest) {
          MergeAccountDigest(other.AccountDigest);
        }
        if (other.HasGuilds) {
          MergeGuilds(other.Guilds);
        }
        if (other.HasGuildInvites) {
          MergeGuildInvites(other.GuildInvites);
        }
        if (other.HasSeenTutorials) {
          SeenTutorials = other.SeenTutorials;
        }
        if (other.HasMatchmakingPool) {
          MatchmakingPool = other.MatchmakingPool;
        }
        if (other.eras_.Count != 0) {
          result.eras_.Add(other.eras_);
        }
        if (other.HasLogonTime) {
          LogonTime = other.LogonTime;
        }
        if (other.HasContentLicenses) {
          MergeContentLicenses(other.ContentLicenses);
        }
        if (other.HasSessionFlags) {
          SessionFlags = other.SessionFlags;
        }
        if (other.HasOutstandingOrder) {
          MergeOutstandingOrder(other.OutstandingOrder);
        }
        if (other.unacknowledgedOrders_.Count != 0) {
          result.unacknowledgedOrders_.Add(other.unacknowledgedOrders_);
        }
        if (other.HasMissingEntitlements) {
          MergeMissingEntitlements(other.MissingEntitlements);
        }
        if (other.HasAchievementsContentHandle) {
          MergeAchievementsContentHandle(other.AchievementsContentHandle);
        }
        if (other.programBlacklistFourccs_.Count != 0) {
          result.programBlacklistFourccs_.Add(other.programBlacklistFourccs_);
        }
        if (other.HasChatRestrictionContentLicenseId) {
          ChatRestrictionContentLicenseId = other.ChatRestrictionContentLicenseId;
        }
        if (other.HasSyncedVars) {
          SyncedVars = other.SyncedVars;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_initialLoginDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _initialLoginDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.Client.GameAccountSettings.Builder subBuilder = global::D3.Client.GameAccountSettings.CreateBuilder();
              if (result.hasGameAccountSettings) {
                subBuilder.MergeFrom(GameAccountSettings);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccountSettings = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.GameMessage.HeroDigestListResponse.Builder subBuilder = global::D3.GameMessage.HeroDigestListResponse.CreateBuilder();
              if (result.hasHeroDigests) {
                subBuilder.MergeFrom(HeroDigests);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroDigests = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.Account.Digest.Builder subBuilder = global::D3.Account.Digest.CreateBuilder();
              if (result.hasAccountDigest) {
                subBuilder.MergeFrom(AccountDigest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountDigest = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::D3.Guild.GuildInfoList.Builder subBuilder = global::D3.Guild.GuildInfoList.CreateBuilder();
              if (result.hasGuilds) {
                subBuilder.MergeFrom(Guilds);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Guilds = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::D3.Guild.InviteInfoList.Builder subBuilder = global::D3.Guild.InviteInfoList.CreateBuilder();
              if (result.hasGuildInvites) {
                subBuilder.MergeFrom(GuildInvites);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildInvites = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              result.hasSeenTutorials = input.ReadBytes(ref result.seenTutorials_);
              break;
            }
            case 58: {
              result.hasMatchmakingPool = input.ReadString(ref result.matchmakingPool_);
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.eras_, global::D3.Notification.EraInfo.DefaultInstance, extensionRegistry);
              break;
            }
            case 72: {
              result.hasLogonTime = input.ReadUInt64(ref result.logonTime_);
              break;
            }
            case 82: {
              global::D3.OnlineService.ContentLicenses.Builder subBuilder = global::D3.OnlineService.ContentLicenses.CreateBuilder();
              if (result.hasContentLicenses) {
                subBuilder.MergeFrom(ContentLicenses);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ContentLicenses = subBuilder.BuildPartial();
              break;
            }
            case 88: {
              result.hasSessionFlags = input.ReadUInt32(ref result.sessionFlags_);
              break;
            }
            case 98: {
              global::D3.Store.Order.Builder subBuilder = global::D3.Store.Order.CreateBuilder();
              if (result.hasOutstandingOrder) {
                subBuilder.MergeFrom(OutstandingOrder);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OutstandingOrder = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              input.ReadMessageArray(tag, field_name, result.unacknowledgedOrders_, global::D3.Store.OrderStatus.DefaultInstance, extensionRegistry);
              break;
            }
            case 114: {
              global::D3.Store.MissingEntitlements.Builder subBuilder = global::D3.Store.MissingEntitlements.CreateBuilder();
              if (result.hasMissingEntitlements) {
                subBuilder.MergeFrom(MissingEntitlements);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MissingEntitlements = subBuilder.BuildPartial();
              break;
            }
            case 122: {
              global::D3.OnlineService.ContentHandle.Builder subBuilder = global::D3.OnlineService.ContentHandle.CreateBuilder();
              if (result.hasAchievementsContentHandle) {
                subBuilder.MergeFrom(AchievementsContentHandle);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AchievementsContentHandle = subBuilder.BuildPartial();
              break;
            }
            case 130:
            case 128: {
              input.ReadUInt32Array(tag, field_name, result.programBlacklistFourccs_);
              break;
            }
            case 136: {
              result.hasChatRestrictionContentLicenseId = input.ReadInt32(ref result.chatRestrictionContentLicenseId_);
              break;
            }
            case 146: {
              result.hasSyncedVars = input.ReadString(ref result.syncedVars_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameAccountSettings {
       get { return result.hasGameAccountSettings; }
      }
      public global::D3.Client.GameAccountSettings GameAccountSettings {
        get { return result.GameAccountSettings; }
        set { SetGameAccountSettings(value); }
      }
      public Builder SetGameAccountSettings(global::D3.Client.GameAccountSettings value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccountSettings = true;
        result.gameAccountSettings_ = value;
        return this;
      }
      public Builder SetGameAccountSettings(global::D3.Client.GameAccountSettings.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccountSettings = true;
        result.gameAccountSettings_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountSettings(global::D3.Client.GameAccountSettings value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccountSettings &&
            result.gameAccountSettings_ != global::D3.Client.GameAccountSettings.DefaultInstance) {
            result.gameAccountSettings_ = global::D3.Client.GameAccountSettings.CreateBuilder(result.gameAccountSettings_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountSettings_ = value;
        }
        result.hasGameAccountSettings = true;
        return this;
      }
      public Builder ClearGameAccountSettings() {
        PrepareBuilder();
        result.hasGameAccountSettings = false;
        result.gameAccountSettings_ = null;
        return this;
      }
      
      public bool HasHeroDigests {
       get { return result.hasHeroDigests; }
      }
      public global::D3.GameMessage.HeroDigestListResponse HeroDigests {
        get { return result.HeroDigests; }
        set { SetHeroDigests(value); }
      }
      public Builder SetHeroDigests(global::D3.GameMessage.HeroDigestListResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroDigests = true;
        result.heroDigests_ = value;
        return this;
      }
      public Builder SetHeroDigests(global::D3.GameMessage.HeroDigestListResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroDigests = true;
        result.heroDigests_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroDigests(global::D3.GameMessage.HeroDigestListResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroDigests &&
            result.heroDigests_ != global::D3.GameMessage.HeroDigestListResponse.DefaultInstance) {
            result.heroDigests_ = global::D3.GameMessage.HeroDigestListResponse.CreateBuilder(result.heroDigests_).MergeFrom(value).BuildPartial();
        } else {
          result.heroDigests_ = value;
        }
        result.hasHeroDigests = true;
        return this;
      }
      public Builder ClearHeroDigests() {
        PrepareBuilder();
        result.hasHeroDigests = false;
        result.heroDigests_ = null;
        return this;
      }
      
      public bool HasAccountDigest {
       get { return result.hasAccountDigest; }
      }
      public global::D3.Account.Digest AccountDigest {
        get { return result.AccountDigest; }
        set { SetAccountDigest(value); }
      }
      public Builder SetAccountDigest(global::D3.Account.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountDigest = true;
        result.accountDigest_ = value;
        return this;
      }
      public Builder SetAccountDigest(global::D3.Account.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountDigest = true;
        result.accountDigest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountDigest(global::D3.Account.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountDigest &&
            result.accountDigest_ != global::D3.Account.Digest.DefaultInstance) {
            result.accountDigest_ = global::D3.Account.Digest.CreateBuilder(result.accountDigest_).MergeFrom(value).BuildPartial();
        } else {
          result.accountDigest_ = value;
        }
        result.hasAccountDigest = true;
        return this;
      }
      public Builder ClearAccountDigest() {
        PrepareBuilder();
        result.hasAccountDigest = false;
        result.accountDigest_ = null;
        return this;
      }
      
      public bool HasGuilds {
       get { return result.hasGuilds; }
      }
      public global::D3.Guild.GuildInfoList Guilds {
        get { return result.Guilds; }
        set { SetGuilds(value); }
      }
      public Builder SetGuilds(global::D3.Guild.GuildInfoList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuilds = true;
        result.guilds_ = value;
        return this;
      }
      public Builder SetGuilds(global::D3.Guild.GuildInfoList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuilds = true;
        result.guilds_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuilds(global::D3.Guild.GuildInfoList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuilds &&
            result.guilds_ != global::D3.Guild.GuildInfoList.DefaultInstance) {
            result.guilds_ = global::D3.Guild.GuildInfoList.CreateBuilder(result.guilds_).MergeFrom(value).BuildPartial();
        } else {
          result.guilds_ = value;
        }
        result.hasGuilds = true;
        return this;
      }
      public Builder ClearGuilds() {
        PrepareBuilder();
        result.hasGuilds = false;
        result.guilds_ = null;
        return this;
      }
      
      public bool HasGuildInvites {
       get { return result.hasGuildInvites; }
      }
      public global::D3.Guild.InviteInfoList GuildInvites {
        get { return result.GuildInvites; }
        set { SetGuildInvites(value); }
      }
      public Builder SetGuildInvites(global::D3.Guild.InviteInfoList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildInvites = true;
        result.guildInvites_ = value;
        return this;
      }
      public Builder SetGuildInvites(global::D3.Guild.InviteInfoList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildInvites = true;
        result.guildInvites_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildInvites(global::D3.Guild.InviteInfoList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildInvites &&
            result.guildInvites_ != global::D3.Guild.InviteInfoList.DefaultInstance) {
            result.guildInvites_ = global::D3.Guild.InviteInfoList.CreateBuilder(result.guildInvites_).MergeFrom(value).BuildPartial();
        } else {
          result.guildInvites_ = value;
        }
        result.hasGuildInvites = true;
        return this;
      }
      public Builder ClearGuildInvites() {
        PrepareBuilder();
        result.hasGuildInvites = false;
        result.guildInvites_ = null;
        return this;
      }
      
      public bool HasSeenTutorials {
        get { return result.hasSeenTutorials; }
      }
      public pb::ByteString SeenTutorials {
        get { return result.SeenTutorials; }
        set { SetSeenTutorials(value); }
      }
      public Builder SetSeenTutorials(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeenTutorials = true;
        result.seenTutorials_ = value;
        return this;
      }
      public Builder ClearSeenTutorials() {
        PrepareBuilder();
        result.hasSeenTutorials = false;
        result.seenTutorials_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasMatchmakingPool {
        get { return result.hasMatchmakingPool; }
      }
      public string MatchmakingPool {
        get { return result.MatchmakingPool; }
        set { SetMatchmakingPool(value); }
      }
      public Builder SetMatchmakingPool(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMatchmakingPool = true;
        result.matchmakingPool_ = value;
        return this;
      }
      public Builder ClearMatchmakingPool() {
        PrepareBuilder();
        result.hasMatchmakingPool = false;
        result.matchmakingPool_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Notification.EraInfo> ErasList {
        get { return PrepareBuilder().eras_; }
      }
      public int ErasCount {
        get { return result.ErasCount; }
      }
      public global::D3.Notification.EraInfo GetEras(int index) {
        return result.GetEras(index);
      }
      public Builder SetEras(int index, global::D3.Notification.EraInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.eras_[index] = value;
        return this;
      }
      public Builder SetEras(int index, global::D3.Notification.EraInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.eras_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEras(global::D3.Notification.EraInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.eras_.Add(value);
        return this;
      }
      public Builder AddEras(global::D3.Notification.EraInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.eras_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEras(scg::IEnumerable<global::D3.Notification.EraInfo> values) {
        PrepareBuilder();
        result.eras_.Add(values);
        return this;
      }
      public Builder ClearEras() {
        PrepareBuilder();
        result.eras_.Clear();
        return this;
      }
      
      public bool HasLogonTime {
        get { return result.hasLogonTime; }
      }
      public ulong LogonTime {
        get { return result.LogonTime; }
        set { SetLogonTime(value); }
      }
      public Builder SetLogonTime(ulong value) {
        PrepareBuilder();
        result.hasLogonTime = true;
        result.logonTime_ = value;
        return this;
      }
      public Builder ClearLogonTime() {
        PrepareBuilder();
        result.hasLogonTime = false;
        result.logonTime_ = 0UL;
        return this;
      }
      
      public bool HasContentLicenses {
       get { return result.hasContentLicenses; }
      }
      public global::D3.OnlineService.ContentLicenses ContentLicenses {
        get { return result.ContentLicenses; }
        set { SetContentLicenses(value); }
      }
      public Builder SetContentLicenses(global::D3.OnlineService.ContentLicenses value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContentLicenses = true;
        result.contentLicenses_ = value;
        return this;
      }
      public Builder SetContentLicenses(global::D3.OnlineService.ContentLicenses.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasContentLicenses = true;
        result.contentLicenses_ = builderForValue.Build();
        return this;
      }
      public Builder MergeContentLicenses(global::D3.OnlineService.ContentLicenses value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasContentLicenses &&
            result.contentLicenses_ != global::D3.OnlineService.ContentLicenses.DefaultInstance) {
            result.contentLicenses_ = global::D3.OnlineService.ContentLicenses.CreateBuilder(result.contentLicenses_).MergeFrom(value).BuildPartial();
        } else {
          result.contentLicenses_ = value;
        }
        result.hasContentLicenses = true;
        return this;
      }
      public Builder ClearContentLicenses() {
        PrepareBuilder();
        result.hasContentLicenses = false;
        result.contentLicenses_ = null;
        return this;
      }
      
      public bool HasSessionFlags {
        get { return result.hasSessionFlags; }
      }
      public uint SessionFlags {
        get { return result.SessionFlags; }
        set { SetSessionFlags(value); }
      }
      public Builder SetSessionFlags(uint value) {
        PrepareBuilder();
        result.hasSessionFlags = true;
        result.sessionFlags_ = value;
        return this;
      }
      public Builder ClearSessionFlags() {
        PrepareBuilder();
        result.hasSessionFlags = false;
        result.sessionFlags_ = 0;
        return this;
      }
      
      public bool HasOutstandingOrder {
       get { return result.hasOutstandingOrder; }
      }
      public global::D3.Store.Order OutstandingOrder {
        get { return result.OutstandingOrder; }
        set { SetOutstandingOrder(value); }
      }
      public Builder SetOutstandingOrder(global::D3.Store.Order value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOutstandingOrder = true;
        result.outstandingOrder_ = value;
        return this;
      }
      public Builder SetOutstandingOrder(global::D3.Store.Order.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOutstandingOrder = true;
        result.outstandingOrder_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOutstandingOrder(global::D3.Store.Order value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOutstandingOrder &&
            result.outstandingOrder_ != global::D3.Store.Order.DefaultInstance) {
            result.outstandingOrder_ = global::D3.Store.Order.CreateBuilder(result.outstandingOrder_).MergeFrom(value).BuildPartial();
        } else {
          result.outstandingOrder_ = value;
        }
        result.hasOutstandingOrder = true;
        return this;
      }
      public Builder ClearOutstandingOrder() {
        PrepareBuilder();
        result.hasOutstandingOrder = false;
        result.outstandingOrder_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Store.OrderStatus> UnacknowledgedOrdersList {
        get { return PrepareBuilder().unacknowledgedOrders_; }
      }
      public int UnacknowledgedOrdersCount {
        get { return result.UnacknowledgedOrdersCount; }
      }
      public global::D3.Store.OrderStatus GetUnacknowledgedOrders(int index) {
        return result.GetUnacknowledgedOrders(index);
      }
      public Builder SetUnacknowledgedOrders(int index, global::D3.Store.OrderStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.unacknowledgedOrders_[index] = value;
        return this;
      }
      public Builder SetUnacknowledgedOrders(int index, global::D3.Store.OrderStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.unacknowledgedOrders_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUnacknowledgedOrders(global::D3.Store.OrderStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.unacknowledgedOrders_.Add(value);
        return this;
      }
      public Builder AddUnacknowledgedOrders(global::D3.Store.OrderStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.unacknowledgedOrders_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUnacknowledgedOrders(scg::IEnumerable<global::D3.Store.OrderStatus> values) {
        PrepareBuilder();
        result.unacknowledgedOrders_.Add(values);
        return this;
      }
      public Builder ClearUnacknowledgedOrders() {
        PrepareBuilder();
        result.unacknowledgedOrders_.Clear();
        return this;
      }
      
      public bool HasMissingEntitlements {
       get { return result.hasMissingEntitlements; }
      }
      public global::D3.Store.MissingEntitlements MissingEntitlements {
        get { return result.MissingEntitlements; }
        set { SetMissingEntitlements(value); }
      }
      public Builder SetMissingEntitlements(global::D3.Store.MissingEntitlements value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMissingEntitlements = true;
        result.missingEntitlements_ = value;
        return this;
      }
      public Builder SetMissingEntitlements(global::D3.Store.MissingEntitlements.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMissingEntitlements = true;
        result.missingEntitlements_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMissingEntitlements(global::D3.Store.MissingEntitlements value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMissingEntitlements &&
            result.missingEntitlements_ != global::D3.Store.MissingEntitlements.DefaultInstance) {
            result.missingEntitlements_ = global::D3.Store.MissingEntitlements.CreateBuilder(result.missingEntitlements_).MergeFrom(value).BuildPartial();
        } else {
          result.missingEntitlements_ = value;
        }
        result.hasMissingEntitlements = true;
        return this;
      }
      public Builder ClearMissingEntitlements() {
        PrepareBuilder();
        result.hasMissingEntitlements = false;
        result.missingEntitlements_ = null;
        return this;
      }
      
      public bool HasAchievementsContentHandle {
       get { return result.hasAchievementsContentHandle; }
      }
      public global::D3.OnlineService.ContentHandle AchievementsContentHandle {
        get { return result.AchievementsContentHandle; }
        set { SetAchievementsContentHandle(value); }
      }
      public Builder SetAchievementsContentHandle(global::D3.OnlineService.ContentHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAchievementsContentHandle = true;
        result.achievementsContentHandle_ = value;
        return this;
      }
      public Builder SetAchievementsContentHandle(global::D3.OnlineService.ContentHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAchievementsContentHandle = true;
        result.achievementsContentHandle_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAchievementsContentHandle(global::D3.OnlineService.ContentHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAchievementsContentHandle &&
            result.achievementsContentHandle_ != global::D3.OnlineService.ContentHandle.DefaultInstance) {
            result.achievementsContentHandle_ = global::D3.OnlineService.ContentHandle.CreateBuilder(result.achievementsContentHandle_).MergeFrom(value).BuildPartial();
        } else {
          result.achievementsContentHandle_ = value;
        }
        result.hasAchievementsContentHandle = true;
        return this;
      }
      public Builder ClearAchievementsContentHandle() {
        PrepareBuilder();
        result.hasAchievementsContentHandle = false;
        result.achievementsContentHandle_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<uint> ProgramBlacklistFourccsList {
        get { return PrepareBuilder().programBlacklistFourccs_; }
      }
      public int ProgramBlacklistFourccsCount {
        get { return result.ProgramBlacklistFourccsCount; }
      }
      public uint GetProgramBlacklistFourccs(int index) {
        return result.GetProgramBlacklistFourccs(index);
      }
      public Builder SetProgramBlacklistFourccs(int index, uint value) {
        PrepareBuilder();
        result.programBlacklistFourccs_[index] = value;
        return this;
      }
      public Builder AddProgramBlacklistFourccs(uint value) {
        PrepareBuilder();
        result.programBlacklistFourccs_.Add(value);
        return this;
      }
      public Builder AddRangeProgramBlacklistFourccs(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.programBlacklistFourccs_.Add(values);
        return this;
      }
      public Builder ClearProgramBlacklistFourccs() {
        PrepareBuilder();
        result.programBlacklistFourccs_.Clear();
        return this;
      }
      
      public bool HasChatRestrictionContentLicenseId {
        get { return result.hasChatRestrictionContentLicenseId; }
      }
      public int ChatRestrictionContentLicenseId {
        get { return result.ChatRestrictionContentLicenseId; }
        set { SetChatRestrictionContentLicenseId(value); }
      }
      public Builder SetChatRestrictionContentLicenseId(int value) {
        PrepareBuilder();
        result.hasChatRestrictionContentLicenseId = true;
        result.chatRestrictionContentLicenseId_ = value;
        return this;
      }
      public Builder ClearChatRestrictionContentLicenseId() {
        PrepareBuilder();
        result.hasChatRestrictionContentLicenseId = false;
        result.chatRestrictionContentLicenseId_ = -1;
        return this;
      }
      
      public bool HasSyncedVars {
        get { return result.hasSyncedVars; }
      }
      public string SyncedVars {
        get { return result.SyncedVars; }
        set { SetSyncedVars(value); }
      }
      public Builder SetSyncedVars(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSyncedVars = true;
        result.syncedVars_ = value;
        return this;
      }
      public Builder ClearSyncedVars() {
        PrepareBuilder();
        result.hasSyncedVars = false;
        result.syncedVars_ = "";
        return this;
      }
    }
    static InitialLoginData() {
      object.ReferenceEquals(global::D3.Notification.Notification.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class InitialLoginDataResponse : pb::GeneratedMessage<InitialLoginDataResponse, InitialLoginDataResponse.Builder> {
    private InitialLoginDataResponse() { }
    private static readonly InitialLoginDataResponse defaultInstance = new InitialLoginDataResponse().MakeReadOnly();
    private static readonly string[] _initialLoginDataResponseFieldNames = new string[] { "error_code", "login_data", "service_id" };
    private static readonly uint[] _initialLoginDataResponseFieldTags = new uint[] { 8, 26, 16 };
    public static InitialLoginDataResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InitialLoginDataResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override InitialLoginDataResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_InitialLoginDataResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InitialLoginDataResponse, InitialLoginDataResponse.Builder> InternalFieldAccessors {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_InitialLoginDataResponse__FieldAccessorTable; }
    }
    
    public const int ErrorCodeFieldNumber = 1;
    private bool hasErrorCode;
    private uint errorCode_;
    public bool HasErrorCode {
      get { return hasErrorCode; }
    }
    public uint ErrorCode {
      get { return errorCode_; }
    }
    
    public const int ServiceIdFieldNumber = 2;
    private bool hasServiceId;
    private uint serviceId_;
    public bool HasServiceId {
      get { return hasServiceId; }
    }
    public uint ServiceId {
      get { return serviceId_; }
    }
    
    public const int LoginDataFieldNumber = 3;
    private bool hasLoginData;
    private global::D3.Notification.InitialLoginData loginData_;
    public bool HasLoginData {
      get { return hasLoginData; }
    }
    public global::D3.Notification.InitialLoginData LoginData {
      get { return loginData_ ?? global::D3.Notification.InitialLoginData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasErrorCode) return false;
        if (!hasServiceId) return false;
        if (HasLoginData) {
          if (!LoginData.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _initialLoginDataResponseFieldNames;
      if (hasErrorCode) {
        output.WriteUInt32(1, field_names[0], ErrorCode);
      }
      if (hasServiceId) {
        output.WriteUInt32(2, field_names[2], ServiceId);
      }
      if (hasLoginData) {
        output.WriteMessage(3, field_names[1], LoginData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasErrorCode) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ErrorCode);
        }
        if (hasServiceId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, ServiceId);
        }
        if (hasLoginData) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, LoginData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InitialLoginDataResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitialLoginDataResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitialLoginDataResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitialLoginDataResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitialLoginDataResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitialLoginDataResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InitialLoginDataResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InitialLoginDataResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InitialLoginDataResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitialLoginDataResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private InitialLoginDataResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InitialLoginDataResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<InitialLoginDataResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(InitialLoginDataResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private InitialLoginDataResponse result;
      
      private InitialLoginDataResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          InitialLoginDataResponse original = result;
          result = new InitialLoginDataResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override InitialLoginDataResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Notification.InitialLoginDataResponse.Descriptor; }
      }
      
      public override InitialLoginDataResponse DefaultInstanceForType {
        get { return global::D3.Notification.InitialLoginDataResponse.DefaultInstance; }
      }
      
      public override InitialLoginDataResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InitialLoginDataResponse) {
          return MergeFrom((InitialLoginDataResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InitialLoginDataResponse other) {
        if (other == global::D3.Notification.InitialLoginDataResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasErrorCode) {
          ErrorCode = other.ErrorCode;
        }
        if (other.HasServiceId) {
          ServiceId = other.ServiceId;
        }
        if (other.HasLoginData) {
          MergeLoginData(other.LoginData);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_initialLoginDataResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _initialLoginDataResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasErrorCode = input.ReadUInt32(ref result.errorCode_);
              break;
            }
            case 16: {
              result.hasServiceId = input.ReadUInt32(ref result.serviceId_);
              break;
            }
            case 26: {
              global::D3.Notification.InitialLoginData.Builder subBuilder = global::D3.Notification.InitialLoginData.CreateBuilder();
              if (result.hasLoginData) {
                subBuilder.MergeFrom(LoginData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LoginData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasErrorCode {
        get { return result.hasErrorCode; }
      }
      public uint ErrorCode {
        get { return result.ErrorCode; }
        set { SetErrorCode(value); }
      }
      public Builder SetErrorCode(uint value) {
        PrepareBuilder();
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder ClearErrorCode() {
        PrepareBuilder();
        result.hasErrorCode = false;
        result.errorCode_ = 0;
        return this;
      }
      
      public bool HasServiceId {
        get { return result.hasServiceId; }
      }
      public uint ServiceId {
        get { return result.ServiceId; }
        set { SetServiceId(value); }
      }
      public Builder SetServiceId(uint value) {
        PrepareBuilder();
        result.hasServiceId = true;
        result.serviceId_ = value;
        return this;
      }
      public Builder ClearServiceId() {
        PrepareBuilder();
        result.hasServiceId = false;
        result.serviceId_ = 0;
        return this;
      }
      
      public bool HasLoginData {
       get { return result.hasLoginData; }
      }
      public global::D3.Notification.InitialLoginData LoginData {
        get { return result.LoginData; }
        set { SetLoginData(value); }
      }
      public Builder SetLoginData(global::D3.Notification.InitialLoginData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLoginData = true;
        result.loginData_ = value;
        return this;
      }
      public Builder SetLoginData(global::D3.Notification.InitialLoginData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLoginData = true;
        result.loginData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLoginData(global::D3.Notification.InitialLoginData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLoginData &&
            result.loginData_ != global::D3.Notification.InitialLoginData.DefaultInstance) {
            result.loginData_ = global::D3.Notification.InitialLoginData.CreateBuilder(result.loginData_).MergeFrom(value).BuildPartial();
        } else {
          result.loginData_ = value;
        }
        result.hasLoginData = true;
        return this;
      }
      public Builder ClearLoginData() {
        PrepareBuilder();
        result.hasLoginData = false;
        result.loginData_ = null;
        return this;
      }
    }
    static InitialLoginDataResponse() {
      object.ReferenceEquals(global::D3.Notification.Notification.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class InitialLoginDataHeartbeat : pb::GeneratedMessage<InitialLoginDataHeartbeat, InitialLoginDataHeartbeat.Builder> {
    private InitialLoginDataHeartbeat() { }
    private static readonly InitialLoginDataHeartbeat defaultInstance = new InitialLoginDataHeartbeat().MakeReadOnly();
    private static readonly string[] _initialLoginDataHeartbeatFieldNames = new string[] { "service_id" };
    private static readonly uint[] _initialLoginDataHeartbeatFieldTags = new uint[] { 8 };
    public static InitialLoginDataHeartbeat DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InitialLoginDataHeartbeat DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override InitialLoginDataHeartbeat ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_InitialLoginDataHeartbeat__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InitialLoginDataHeartbeat, InitialLoginDataHeartbeat.Builder> InternalFieldAccessors {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_InitialLoginDataHeartbeat__FieldAccessorTable; }
    }
    
    public const int ServiceIdFieldNumber = 1;
    private bool hasServiceId;
    private uint serviceId_;
    public bool HasServiceId {
      get { return hasServiceId; }
    }
    public uint ServiceId {
      get { return serviceId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasServiceId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _initialLoginDataHeartbeatFieldNames;
      if (hasServiceId) {
        output.WriteUInt32(1, field_names[0], ServiceId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasServiceId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ServiceId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InitialLoginDataHeartbeat ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitialLoginDataHeartbeat ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitialLoginDataHeartbeat ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InitialLoginDataHeartbeat ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InitialLoginDataHeartbeat ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitialLoginDataHeartbeat ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InitialLoginDataHeartbeat ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InitialLoginDataHeartbeat ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InitialLoginDataHeartbeat ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InitialLoginDataHeartbeat ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private InitialLoginDataHeartbeat MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InitialLoginDataHeartbeat prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<InitialLoginDataHeartbeat, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(InitialLoginDataHeartbeat cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private InitialLoginDataHeartbeat result;
      
      private InitialLoginDataHeartbeat PrepareBuilder() {
        if (resultIsReadOnly) {
          InitialLoginDataHeartbeat original = result;
          result = new InitialLoginDataHeartbeat();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override InitialLoginDataHeartbeat MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Notification.InitialLoginDataHeartbeat.Descriptor; }
      }
      
      public override InitialLoginDataHeartbeat DefaultInstanceForType {
        get { return global::D3.Notification.InitialLoginDataHeartbeat.DefaultInstance; }
      }
      
      public override InitialLoginDataHeartbeat BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InitialLoginDataHeartbeat) {
          return MergeFrom((InitialLoginDataHeartbeat) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InitialLoginDataHeartbeat other) {
        if (other == global::D3.Notification.InitialLoginDataHeartbeat.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServiceId) {
          ServiceId = other.ServiceId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_initialLoginDataHeartbeatFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _initialLoginDataHeartbeatFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasServiceId = input.ReadUInt32(ref result.serviceId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServiceId {
        get { return result.hasServiceId; }
      }
      public uint ServiceId {
        get { return result.ServiceId; }
        set { SetServiceId(value); }
      }
      public Builder SetServiceId(uint value) {
        PrepareBuilder();
        result.hasServiceId = true;
        result.serviceId_ = value;
        return this;
      }
      public Builder ClearServiceId() {
        PrepareBuilder();
        result.hasServiceId = false;
        result.serviceId_ = 0;
        return this;
      }
    }
    static InitialLoginDataHeartbeat() {
      object.ReferenceEquals(global::D3.Notification.Notification.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class NewPersonalBest : pb::GeneratedMessage<NewPersonalBest, NewPersonalBest.Builder> {
    private NewPersonalBest() { }
    private static readonly NewPersonalBest defaultInstance = new NewPersonalBest().MakeReadOnly();
    private static readonly string[] _newPersonalBestFieldNames = new string[] { "old_score", "rank", "score" };
    private static readonly uint[] _newPersonalBestFieldTags = new uint[] { 24, 16, 10 };
    public static NewPersonalBest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewPersonalBest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewPersonalBest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_NewPersonalBest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewPersonalBest, NewPersonalBest.Builder> InternalFieldAccessors {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_NewPersonalBest__FieldAccessorTable; }
    }
    
    public const int ScoreFieldNumber = 1;
    private bool hasScore;
    private global::D3.Leaderboard.Score score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public global::D3.Leaderboard.Score Score {
      get { return score_ ?? global::D3.Leaderboard.Score.DefaultInstance; }
    }
    
    public const int RankFieldNumber = 2;
    private bool hasRank;
    private int rank_;
    public bool HasRank {
      get { return hasRank; }
    }
    public int Rank {
      get { return rank_; }
    }
    
    public const int OldScoreFieldNumber = 3;
    private bool hasOldScore;
    private ulong oldScore_;
    public bool HasOldScore {
      get { return hasOldScore; }
    }
    public ulong OldScore {
      get { return oldScore_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasScore) return false;
        if (!Score.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newPersonalBestFieldNames;
      if (hasScore) {
        output.WriteMessage(1, field_names[2], Score);
      }
      if (hasRank) {
        output.WriteInt32(2, field_names[1], Rank);
      }
      if (hasOldScore) {
        output.WriteUInt64(3, field_names[0], OldScore);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasScore) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Score);
        }
        if (hasRank) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Rank);
        }
        if (hasOldScore) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, OldScore);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewPersonalBest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewPersonalBest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewPersonalBest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewPersonalBest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewPersonalBest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewPersonalBest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewPersonalBest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewPersonalBest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewPersonalBest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewPersonalBest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewPersonalBest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewPersonalBest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<NewPersonalBest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewPersonalBest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewPersonalBest result;
      
      private NewPersonalBest PrepareBuilder() {
        if (resultIsReadOnly) {
          NewPersonalBest original = result;
          result = new NewPersonalBest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewPersonalBest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Notification.NewPersonalBest.Descriptor; }
      }
      
      public override NewPersonalBest DefaultInstanceForType {
        get { return global::D3.Notification.NewPersonalBest.DefaultInstance; }
      }
      
      public override NewPersonalBest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewPersonalBest) {
          return MergeFrom((NewPersonalBest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewPersonalBest other) {
        if (other == global::D3.Notification.NewPersonalBest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasScore) {
          MergeScore(other.Score);
        }
        if (other.HasRank) {
          Rank = other.Rank;
        }
        if (other.HasOldScore) {
          OldScore = other.OldScore;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newPersonalBestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newPersonalBestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.Leaderboard.Score.Builder subBuilder = global::D3.Leaderboard.Score.CreateBuilder();
              if (result.hasScore) {
                subBuilder.MergeFrom(Score);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Score = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasRank = input.ReadInt32(ref result.rank_);
              break;
            }
            case 24: {
              result.hasOldScore = input.ReadUInt64(ref result.oldScore_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasScore {
       get { return result.hasScore; }
      }
      public global::D3.Leaderboard.Score Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(global::D3.Leaderboard.Score value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder SetScore(global::D3.Leaderboard.Score.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = builderForValue.Build();
        return this;
      }
      public Builder MergeScore(global::D3.Leaderboard.Score value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasScore &&
            result.score_ != global::D3.Leaderboard.Score.DefaultInstance) {
            result.score_ = global::D3.Leaderboard.Score.CreateBuilder(result.score_).MergeFrom(value).BuildPartial();
        } else {
          result.score_ = value;
        }
        result.hasScore = true;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = null;
        return this;
      }
      
      public bool HasRank {
        get { return result.hasRank; }
      }
      public int Rank {
        get { return result.Rank; }
        set { SetRank(value); }
      }
      public Builder SetRank(int value) {
        PrepareBuilder();
        result.hasRank = true;
        result.rank_ = value;
        return this;
      }
      public Builder ClearRank() {
        PrepareBuilder();
        result.hasRank = false;
        result.rank_ = 0;
        return this;
      }
      
      public bool HasOldScore {
        get { return result.hasOldScore; }
      }
      public ulong OldScore {
        get { return result.OldScore; }
        set { SetOldScore(value); }
      }
      public Builder SetOldScore(ulong value) {
        PrepareBuilder();
        result.hasOldScore = true;
        result.oldScore_ = value;
        return this;
      }
      public Builder ClearOldScore() {
        PrepareBuilder();
        result.hasOldScore = false;
        result.oldScore_ = 0UL;
        return this;
      }
    }
    static NewPersonalBest() {
      object.ReferenceEquals(global::D3.Notification.Notification.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AccountMigrationAltLevel : pb::GeneratedMessage<AccountMigrationAltLevel, AccountMigrationAltLevel.Builder> {
    private AccountMigrationAltLevel() { }
    private static readonly AccountMigrationAltLevel defaultInstance = new AccountMigrationAltLevel().MakeReadOnly();
    private static readonly string[] _accountMigrationAltLevelFieldNames = new string[] { "alt_level", "partition_id" };
    private static readonly uint[] _accountMigrationAltLevelFieldTags = new uint[] { 16, 8 };
    public static AccountMigrationAltLevel DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AccountMigrationAltLevel DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AccountMigrationAltLevel ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_AccountMigrationAltLevel__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AccountMigrationAltLevel, AccountMigrationAltLevel.Builder> InternalFieldAccessors {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_AccountMigrationAltLevel__FieldAccessorTable; }
    }
    
    public const int PartitionIdFieldNumber = 1;
    private bool hasPartitionId;
    private uint partitionId_;
    public bool HasPartitionId {
      get { return hasPartitionId; }
    }
    public uint PartitionId {
      get { return partitionId_; }
    }
    
    public const int AltLevelFieldNumber = 2;
    private bool hasAltLevel;
    private uint altLevel_;
    public bool HasAltLevel {
      get { return hasAltLevel; }
    }
    public uint AltLevel {
      get { return altLevel_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPartitionId) return false;
        if (!hasAltLevel) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _accountMigrationAltLevelFieldNames;
      if (hasPartitionId) {
        output.WriteUInt32(1, field_names[1], PartitionId);
      }
      if (hasAltLevel) {
        output.WriteUInt32(2, field_names[0], AltLevel);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPartitionId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, PartitionId);
        }
        if (hasAltLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, AltLevel);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AccountMigrationAltLevel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountMigrationAltLevel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountMigrationAltLevel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountMigrationAltLevel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountMigrationAltLevel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountMigrationAltLevel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountMigrationAltLevel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountMigrationAltLevel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountMigrationAltLevel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountMigrationAltLevel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AccountMigrationAltLevel MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountMigrationAltLevel prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AccountMigrationAltLevel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AccountMigrationAltLevel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AccountMigrationAltLevel result;
      
      private AccountMigrationAltLevel PrepareBuilder() {
        if (resultIsReadOnly) {
          AccountMigrationAltLevel original = result;
          result = new AccountMigrationAltLevel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AccountMigrationAltLevel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Notification.AccountMigrationAltLevel.Descriptor; }
      }
      
      public override AccountMigrationAltLevel DefaultInstanceForType {
        get { return global::D3.Notification.AccountMigrationAltLevel.DefaultInstance; }
      }
      
      public override AccountMigrationAltLevel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountMigrationAltLevel) {
          return MergeFrom((AccountMigrationAltLevel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AccountMigrationAltLevel other) {
        if (other == global::D3.Notification.AccountMigrationAltLevel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPartitionId) {
          PartitionId = other.PartitionId;
        }
        if (other.HasAltLevel) {
          AltLevel = other.AltLevel;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_accountMigrationAltLevelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _accountMigrationAltLevelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPartitionId = input.ReadUInt32(ref result.partitionId_);
              break;
            }
            case 16: {
              result.hasAltLevel = input.ReadUInt32(ref result.altLevel_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPartitionId {
        get { return result.hasPartitionId; }
      }
      public uint PartitionId {
        get { return result.PartitionId; }
        set { SetPartitionId(value); }
      }
      public Builder SetPartitionId(uint value) {
        PrepareBuilder();
        result.hasPartitionId = true;
        result.partitionId_ = value;
        return this;
      }
      public Builder ClearPartitionId() {
        PrepareBuilder();
        result.hasPartitionId = false;
        result.partitionId_ = 0;
        return this;
      }
      
      public bool HasAltLevel {
        get { return result.hasAltLevel; }
      }
      public uint AltLevel {
        get { return result.AltLevel; }
        set { SetAltLevel(value); }
      }
      public Builder SetAltLevel(uint value) {
        PrepareBuilder();
        result.hasAltLevel = true;
        result.altLevel_ = value;
        return this;
      }
      public Builder ClearAltLevel() {
        PrepareBuilder();
        result.hasAltLevel = false;
        result.altLevel_ = 0;
        return this;
      }
    }
    static AccountMigrationAltLevel() {
      object.ReferenceEquals(global::D3.Notification.Notification.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AccountMigrationCompleted : pb::GeneratedMessage<AccountMigrationCompleted, AccountMigrationCompleted.Builder> {
    private AccountMigrationCompleted() { }
    private static readonly AccountMigrationCompleted defaultInstance = new AccountMigrationCompleted().MakeReadOnly();
    private static readonly string[] _accountMigrationCompletedFieldNames = new string[] { "alt_levels" };
    private static readonly uint[] _accountMigrationCompletedFieldTags = new uint[] { 10 };
    public static AccountMigrationCompleted DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AccountMigrationCompleted DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AccountMigrationCompleted ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_AccountMigrationCompleted__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AccountMigrationCompleted, AccountMigrationCompleted.Builder> InternalFieldAccessors {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_AccountMigrationCompleted__FieldAccessorTable; }
    }
    
    public const int AltLevelsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Notification.AccountMigrationAltLevel> altLevels_ = new pbc::PopsicleList<global::D3.Notification.AccountMigrationAltLevel>();
    public scg::IList<global::D3.Notification.AccountMigrationAltLevel> AltLevelsList {
      get { return altLevels_; }
    }
    public int AltLevelsCount {
      get { return altLevels_.Count; }
    }
    public global::D3.Notification.AccountMigrationAltLevel GetAltLevels(int index) {
      return altLevels_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Notification.AccountMigrationAltLevel element in AltLevelsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _accountMigrationCompletedFieldNames;
      if (altLevels_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], altLevels_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Notification.AccountMigrationAltLevel element in AltLevelsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AccountMigrationCompleted ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountMigrationCompleted ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountMigrationCompleted ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountMigrationCompleted ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountMigrationCompleted ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountMigrationCompleted ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountMigrationCompleted ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountMigrationCompleted ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountMigrationCompleted ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountMigrationCompleted ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AccountMigrationCompleted MakeReadOnly() {
      altLevels_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountMigrationCompleted prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AccountMigrationCompleted, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AccountMigrationCompleted cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AccountMigrationCompleted result;
      
      private AccountMigrationCompleted PrepareBuilder() {
        if (resultIsReadOnly) {
          AccountMigrationCompleted original = result;
          result = new AccountMigrationCompleted();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AccountMigrationCompleted MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Notification.AccountMigrationCompleted.Descriptor; }
      }
      
      public override AccountMigrationCompleted DefaultInstanceForType {
        get { return global::D3.Notification.AccountMigrationCompleted.DefaultInstance; }
      }
      
      public override AccountMigrationCompleted BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountMigrationCompleted) {
          return MergeFrom((AccountMigrationCompleted) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AccountMigrationCompleted other) {
        if (other == global::D3.Notification.AccountMigrationCompleted.DefaultInstance) return this;
        PrepareBuilder();
        if (other.altLevels_.Count != 0) {
          result.altLevels_.Add(other.altLevels_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_accountMigrationCompletedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _accountMigrationCompletedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.altLevels_, global::D3.Notification.AccountMigrationAltLevel.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Notification.AccountMigrationAltLevel> AltLevelsList {
        get { return PrepareBuilder().altLevels_; }
      }
      public int AltLevelsCount {
        get { return result.AltLevelsCount; }
      }
      public global::D3.Notification.AccountMigrationAltLevel GetAltLevels(int index) {
        return result.GetAltLevels(index);
      }
      public Builder SetAltLevels(int index, global::D3.Notification.AccountMigrationAltLevel value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.altLevels_[index] = value;
        return this;
      }
      public Builder SetAltLevels(int index, global::D3.Notification.AccountMigrationAltLevel.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.altLevels_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAltLevels(global::D3.Notification.AccountMigrationAltLevel value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.altLevels_.Add(value);
        return this;
      }
      public Builder AddAltLevels(global::D3.Notification.AccountMigrationAltLevel.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.altLevels_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAltLevels(scg::IEnumerable<global::D3.Notification.AccountMigrationAltLevel> values) {
        PrepareBuilder();
        result.altLevels_.Add(values);
        return this;
      }
      public Builder ClearAltLevels() {
        PrepareBuilder();
        result.altLevels_.Clear();
        return this;
      }
    }
    static AccountMigrationCompleted() {
      object.ReferenceEquals(global::D3.Notification.Notification.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ReceiveDataRequest : pb::GeneratedMessage<ReceiveDataRequest, ReceiveDataRequest.Builder> {
    private ReceiveDataRequest() { }
    private static readonly ReceiveDataRequest defaultInstance = new ReceiveDataRequest().MakeReadOnly();
    private static readonly string[] _receiveDataRequestFieldNames = new string[] { "data" };
    private static readonly uint[] _receiveDataRequestFieldTags = new uint[] { 10 };
    public static ReceiveDataRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ReceiveDataRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ReceiveDataRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_ReceiveDataRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ReceiveDataRequest, ReceiveDataRequest.Builder> InternalFieldAccessors {
      get { return global::D3.Notification.Notification.internal__static_D3_Notification_ReceiveDataRequest__FieldAccessorTable; }
    }
    
    public const int DataFieldNumber = 1;
    private pbc::PopsicleList<pb::ByteString> data_ = new pbc::PopsicleList<pb::ByteString>();
    public scg::IList<pb::ByteString> DataList {
      get { return pbc::Lists.AsReadOnly(data_); }
    }
    public int DataCount {
      get { return data_.Count; }
    }
    public pb::ByteString GetData(int index) {
      return data_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _receiveDataRequestFieldNames;
      if (data_.Count > 0) {
        output.WriteBytesArray(1, field_names[0], data_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (pb::ByteString element in DataList) {
            dataSize += pb::CodedOutputStream.ComputeBytesSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * data_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ReceiveDataRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReceiveDataRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReceiveDataRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ReceiveDataRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ReceiveDataRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReceiveDataRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ReceiveDataRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ReceiveDataRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ReceiveDataRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ReceiveDataRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ReceiveDataRequest MakeReadOnly() {
      data_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ReceiveDataRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ReceiveDataRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ReceiveDataRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ReceiveDataRequest result;
      
      private ReceiveDataRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ReceiveDataRequest original = result;
          result = new ReceiveDataRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ReceiveDataRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Notification.ReceiveDataRequest.Descriptor; }
      }
      
      public override ReceiveDataRequest DefaultInstanceForType {
        get { return global::D3.Notification.ReceiveDataRequest.DefaultInstance; }
      }
      
      public override ReceiveDataRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ReceiveDataRequest) {
          return MergeFrom((ReceiveDataRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ReceiveDataRequest other) {
        if (other == global::D3.Notification.ReceiveDataRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.data_.Count != 0) {
          result.data_.Add(other.data_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_receiveDataRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _receiveDataRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadBytesArray(tag, field_name, result.data_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<pb::ByteString> DataList {
        get { return PrepareBuilder().data_; }
      }
      public int DataCount {
        get { return result.DataCount; }
      }
      public pb::ByteString GetData(int index) {
        return result.GetData(index);
      }
      public Builder SetData(int index, pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_[index] = value;
        return this;
      }
      public Builder AddData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_.Add(value);
        return this;
      }
      public Builder AddRangeData(scg::IEnumerable<pb::ByteString> values) {
        PrepareBuilder();
        result.data_.Add(values);
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.data_.Clear();
        return this;
      }
    }
    static ReceiveDataRequest() {
      object.ReferenceEquals(global::D3.Notification.Notification.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
