// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Broadcast {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Broadcast {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Broadcast_SeasonalFirst__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Broadcast.SeasonalFirst, global::D3.Broadcast.SeasonalFirst.Builder> internal__static_D3_Broadcast_SeasonalFirst__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Broadcast_ProductCatalogUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Broadcast.ProductCatalogUpdate, global::D3.Broadcast.ProductCatalogUpdate.Builder> internal__static_D3_Broadcast_ProductCatalogUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Broadcast_BenefactedLicenseUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Broadcast.BenefactedLicenseUpdate, global::D3.Broadcast.BenefactedLicenseUpdate.Builder> internal__static_D3_Broadcast_BenefactedLicenseUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Broadcast_AchievementsStaticDataFileUpdated__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Broadcast.AchievementsStaticDataFileUpdated, global::D3.Broadcast.AchievementsStaticDataFileUpdated.Builder> internal__static_D3_Broadcast_AchievementsStaticDataFileUpdated__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Broadcast_NewClientAvailable__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Broadcast.NewClientAvailable, global::D3.Broadcast.NewClientAvailable.Builder> internal__static_D3_Broadcast_NewClientAvailable__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Broadcast_SyncedXVarUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Broadcast.SyncedXVarUpdate, global::D3.Broadcast.SyncedXVarUpdate.Builder> internal__static_D3_Broadcast_SyncedXVarUpdate__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Broadcast() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg9Ccm9hZGNhc3QucHJvdG8SDEQzLkJyb2FkY2FzdBoTT25saW5lU2Vydmlj" + 
          "ZS5wcm90byJ9Cg1TZWFzb25hbEZpcnN0EiUKDmxlYWRlcmJvYXJkX2lkGAEg" + 
          "AigEUg1sZWFkZXJib2FyZElkEiYKD2dhbWVfYWNjb3VudF9pZBgCIAIoBFIN" + 
          "Z2FtZUFjY291bnRJZBIdCgpiYXR0bGVfdGFnGAMgASgJUgliYXR0bGVUYWci" + 
          "ugEKFFByb2R1Y3RDYXRhbG9nVXBkYXRlEi4KE25ld19jYXRhbG9nX3ZlcnNp" + 
          "b24YASABKARSEW5ld0NhdGFsb2dWZXJzaW9uEiwKEm5ld19jYXRhbG9nX2Rp" + 
          "Z2VzdBgCIAEoDFIQbmV3Q2F0YWxvZ0RpZ2VzdBJECh9uZXdfY2F0YWxvZ19u" + 
          "ZXdlc3RfcHJvZHVjdF90aW1lGAMgASgDUhtuZXdDYXRhbG9nTmV3ZXN0UHJv" + 
          "ZHVjdFRpbWUiOgoXQmVuZWZhY3RlZExpY2Vuc2VVcGRhdGUSHwoLbGljZW5z" + 
          "ZV9pZHMYASADKARSCmxpY2Vuc2VJZHMikAEKIUFjaGlldmVtZW50c1N0YXRp" + 
          "Y0RhdGFGaWxlVXBkYXRlZBIjCg1idWlsZF92ZXJzaW9uGAEgASgJUgxidWls" + 
          "ZFZlcnNpb24SRgoOY29udGVudF9oYW5kbGUYAiABKAsyHy5EMy5PbmxpbmVT" + 
          "ZXJ2aWNlLkNvbnRlbnRIYW5kbGVSDWNvbnRlbnRIYW5kbGUiRAoSTmV3Q2xp" + 
          "ZW50QXZhaWxhYmxlEi4KE2NsaWVudF9idWlsZF9udW1iZXIYASACKA1SEWNs" + 
          "aWVudEJ1aWxkTnVtYmVyIi0KEFN5bmNlZFhWYXJVcGRhdGUSGQoIY21kX2xp" + 
          "bmUYASABKAlSB2NtZExpbmU=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Broadcast_SeasonalFirst__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Broadcast_SeasonalFirst__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Broadcast.SeasonalFirst, global::D3.Broadcast.SeasonalFirst.Builder>(internal__static_D3_Broadcast_SeasonalFirst__Descriptor,
                new string[] { "LeaderboardId", "GameAccountId", "BattleTag", });
        internal__static_D3_Broadcast_ProductCatalogUpdate__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Broadcast_ProductCatalogUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Broadcast.ProductCatalogUpdate, global::D3.Broadcast.ProductCatalogUpdate.Builder>(internal__static_D3_Broadcast_ProductCatalogUpdate__Descriptor,
                new string[] { "NewCatalogVersion", "NewCatalogDigest", "NewCatalogNewestProductTime", });
        internal__static_D3_Broadcast_BenefactedLicenseUpdate__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_Broadcast_BenefactedLicenseUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Broadcast.BenefactedLicenseUpdate, global::D3.Broadcast.BenefactedLicenseUpdate.Builder>(internal__static_D3_Broadcast_BenefactedLicenseUpdate__Descriptor,
                new string[] { "LicenseIds", });
        internal__static_D3_Broadcast_AchievementsStaticDataFileUpdated__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_Broadcast_AchievementsStaticDataFileUpdated__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Broadcast.AchievementsStaticDataFileUpdated, global::D3.Broadcast.AchievementsStaticDataFileUpdated.Builder>(internal__static_D3_Broadcast_AchievementsStaticDataFileUpdated__Descriptor,
                new string[] { "BuildVersion", "ContentHandle", });
        internal__static_D3_Broadcast_NewClientAvailable__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_Broadcast_NewClientAvailable__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Broadcast.NewClientAvailable, global::D3.Broadcast.NewClientAvailable.Builder>(internal__static_D3_Broadcast_NewClientAvailable__Descriptor,
                new string[] { "ClientBuildNumber", });
        internal__static_D3_Broadcast_SyncedXVarUpdate__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_Broadcast_SyncedXVarUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Broadcast.SyncedXVarUpdate, global::D3.Broadcast.SyncedXVarUpdate.Builder>(internal__static_D3_Broadcast_SyncedXVarUpdate__Descriptor,
                new string[] { "CmdLine", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::D3.OnlineService.OnlineService.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.OnlineService.OnlineService.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SeasonalFirst : pb::GeneratedMessage<SeasonalFirst, SeasonalFirst.Builder> {
    private SeasonalFirst() { }
    private static readonly SeasonalFirst defaultInstance = new SeasonalFirst().MakeReadOnly();
    private static readonly string[] _seasonalFirstFieldNames = new string[] { "battle_tag", "game_account_id", "leaderboard_id" };
    private static readonly uint[] _seasonalFirstFieldTags = new uint[] { 26, 16, 8 };
    public static SeasonalFirst DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SeasonalFirst DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SeasonalFirst ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Broadcast.Broadcast.internal__static_D3_Broadcast_SeasonalFirst__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SeasonalFirst, SeasonalFirst.Builder> InternalFieldAccessors {
      get { return global::D3.Broadcast.Broadcast.internal__static_D3_Broadcast_SeasonalFirst__FieldAccessorTable; }
    }
    
    public const int LeaderboardIdFieldNumber = 1;
    private bool hasLeaderboardId;
    private ulong leaderboardId_;
    public bool HasLeaderboardId {
      get { return hasLeaderboardId; }
    }
    public ulong LeaderboardId {
      get { return leaderboardId_; }
    }
    
    public const int GameAccountIdFieldNumber = 2;
    private bool hasGameAccountId;
    private ulong gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public ulong GameAccountId {
      get { return gameAccountId_; }
    }
    
    public const int BattleTagFieldNumber = 3;
    private bool hasBattleTag;
    private string battleTag_ = "";
    public bool HasBattleTag {
      get { return hasBattleTag; }
    }
    public string BattleTag {
      get { return battleTag_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLeaderboardId) return false;
        if (!hasGameAccountId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _seasonalFirstFieldNames;
      if (hasLeaderboardId) {
        output.WriteUInt64(1, field_names[2], LeaderboardId);
      }
      if (hasGameAccountId) {
        output.WriteUInt64(2, field_names[1], GameAccountId);
      }
      if (hasBattleTag) {
        output.WriteString(3, field_names[0], BattleTag);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLeaderboardId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, LeaderboardId);
        }
        if (hasGameAccountId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, GameAccountId);
        }
        if (hasBattleTag) {
          size += pb::CodedOutputStream.ComputeStringSize(3, BattleTag);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SeasonalFirst ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SeasonalFirst ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SeasonalFirst ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SeasonalFirst ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SeasonalFirst ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SeasonalFirst ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SeasonalFirst ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SeasonalFirst ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SeasonalFirst ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SeasonalFirst ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SeasonalFirst MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SeasonalFirst prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SeasonalFirst, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SeasonalFirst cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SeasonalFirst result;
      
      private SeasonalFirst PrepareBuilder() {
        if (resultIsReadOnly) {
          SeasonalFirst original = result;
          result = new SeasonalFirst();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SeasonalFirst MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Broadcast.SeasonalFirst.Descriptor; }
      }
      
      public override SeasonalFirst DefaultInstanceForType {
        get { return global::D3.Broadcast.SeasonalFirst.DefaultInstance; }
      }
      
      public override SeasonalFirst BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SeasonalFirst) {
          return MergeFrom((SeasonalFirst) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SeasonalFirst other) {
        if (other == global::D3.Broadcast.SeasonalFirst.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLeaderboardId) {
          LeaderboardId = other.LeaderboardId;
        }
        if (other.HasGameAccountId) {
          GameAccountId = other.GameAccountId;
        }
        if (other.HasBattleTag) {
          BattleTag = other.BattleTag;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_seasonalFirstFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _seasonalFirstFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLeaderboardId = input.ReadUInt64(ref result.leaderboardId_);
              break;
            }
            case 16: {
              result.hasGameAccountId = input.ReadUInt64(ref result.gameAccountId_);
              break;
            }
            case 26: {
              result.hasBattleTag = input.ReadString(ref result.battleTag_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLeaderboardId {
        get { return result.hasLeaderboardId; }
      }
      public ulong LeaderboardId {
        get { return result.LeaderboardId; }
        set { SetLeaderboardId(value); }
      }
      public Builder SetLeaderboardId(ulong value) {
        PrepareBuilder();
        result.hasLeaderboardId = true;
        result.leaderboardId_ = value;
        return this;
      }
      public Builder ClearLeaderboardId() {
        PrepareBuilder();
        result.hasLeaderboardId = false;
        result.leaderboardId_ = 0UL;
        return this;
      }
      
      public bool HasGameAccountId {
        get { return result.hasGameAccountId; }
      }
      public ulong GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(ulong value) {
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = 0UL;
        return this;
      }
      
      public bool HasBattleTag {
        get { return result.hasBattleTag; }
      }
      public string BattleTag {
        get { return result.BattleTag; }
        set { SetBattleTag(value); }
      }
      public Builder SetBattleTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBattleTag = true;
        result.battleTag_ = value;
        return this;
      }
      public Builder ClearBattleTag() {
        PrepareBuilder();
        result.hasBattleTag = false;
        result.battleTag_ = "";
        return this;
      }
    }
    static SeasonalFirst() {
      object.ReferenceEquals(global::D3.Broadcast.Broadcast.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ProductCatalogUpdate : pb::GeneratedMessage<ProductCatalogUpdate, ProductCatalogUpdate.Builder> {
    private ProductCatalogUpdate() { }
    private static readonly ProductCatalogUpdate defaultInstance = new ProductCatalogUpdate().MakeReadOnly();
    private static readonly string[] _productCatalogUpdateFieldNames = new string[] { "new_catalog_digest", "new_catalog_newest_product_time", "new_catalog_version" };
    private static readonly uint[] _productCatalogUpdateFieldTags = new uint[] { 18, 24, 8 };
    public static ProductCatalogUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ProductCatalogUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ProductCatalogUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Broadcast.Broadcast.internal__static_D3_Broadcast_ProductCatalogUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ProductCatalogUpdate, ProductCatalogUpdate.Builder> InternalFieldAccessors {
      get { return global::D3.Broadcast.Broadcast.internal__static_D3_Broadcast_ProductCatalogUpdate__FieldAccessorTable; }
    }
    
    public const int NewCatalogVersionFieldNumber = 1;
    private bool hasNewCatalogVersion;
    private ulong newCatalogVersion_;
    public bool HasNewCatalogVersion {
      get { return hasNewCatalogVersion; }
    }
    public ulong NewCatalogVersion {
      get { return newCatalogVersion_; }
    }
    
    public const int NewCatalogDigestFieldNumber = 2;
    private bool hasNewCatalogDigest;
    private pb::ByteString newCatalogDigest_ = pb::ByteString.Empty;
    public bool HasNewCatalogDigest {
      get { return hasNewCatalogDigest; }
    }
    public pb::ByteString NewCatalogDigest {
      get { return newCatalogDigest_; }
    }
    
    public const int NewCatalogNewestProductTimeFieldNumber = 3;
    private bool hasNewCatalogNewestProductTime;
    private long newCatalogNewestProductTime_;
    public bool HasNewCatalogNewestProductTime {
      get { return hasNewCatalogNewestProductTime; }
    }
    public long NewCatalogNewestProductTime {
      get { return newCatalogNewestProductTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _productCatalogUpdateFieldNames;
      if (hasNewCatalogVersion) {
        output.WriteUInt64(1, field_names[2], NewCatalogVersion);
      }
      if (hasNewCatalogDigest) {
        output.WriteBytes(2, field_names[0], NewCatalogDigest);
      }
      if (hasNewCatalogNewestProductTime) {
        output.WriteInt64(3, field_names[1], NewCatalogNewestProductTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasNewCatalogVersion) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, NewCatalogVersion);
        }
        if (hasNewCatalogDigest) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, NewCatalogDigest);
        }
        if (hasNewCatalogNewestProductTime) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, NewCatalogNewestProductTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ProductCatalogUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProductCatalogUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProductCatalogUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProductCatalogUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProductCatalogUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProductCatalogUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProductCatalogUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProductCatalogUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProductCatalogUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProductCatalogUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProductCatalogUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProductCatalogUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ProductCatalogUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ProductCatalogUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ProductCatalogUpdate result;
      
      private ProductCatalogUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          ProductCatalogUpdate original = result;
          result = new ProductCatalogUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ProductCatalogUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Broadcast.ProductCatalogUpdate.Descriptor; }
      }
      
      public override ProductCatalogUpdate DefaultInstanceForType {
        get { return global::D3.Broadcast.ProductCatalogUpdate.DefaultInstance; }
      }
      
      public override ProductCatalogUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ProductCatalogUpdate) {
          return MergeFrom((ProductCatalogUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ProductCatalogUpdate other) {
        if (other == global::D3.Broadcast.ProductCatalogUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNewCatalogVersion) {
          NewCatalogVersion = other.NewCatalogVersion;
        }
        if (other.HasNewCatalogDigest) {
          NewCatalogDigest = other.NewCatalogDigest;
        }
        if (other.HasNewCatalogNewestProductTime) {
          NewCatalogNewestProductTime = other.NewCatalogNewestProductTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_productCatalogUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _productCatalogUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasNewCatalogVersion = input.ReadUInt64(ref result.newCatalogVersion_);
              break;
            }
            case 18: {
              result.hasNewCatalogDigest = input.ReadBytes(ref result.newCatalogDigest_);
              break;
            }
            case 24: {
              result.hasNewCatalogNewestProductTime = input.ReadInt64(ref result.newCatalogNewestProductTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNewCatalogVersion {
        get { return result.hasNewCatalogVersion; }
      }
      public ulong NewCatalogVersion {
        get { return result.NewCatalogVersion; }
        set { SetNewCatalogVersion(value); }
      }
      public Builder SetNewCatalogVersion(ulong value) {
        PrepareBuilder();
        result.hasNewCatalogVersion = true;
        result.newCatalogVersion_ = value;
        return this;
      }
      public Builder ClearNewCatalogVersion() {
        PrepareBuilder();
        result.hasNewCatalogVersion = false;
        result.newCatalogVersion_ = 0UL;
        return this;
      }
      
      public bool HasNewCatalogDigest {
        get { return result.hasNewCatalogDigest; }
      }
      public pb::ByteString NewCatalogDigest {
        get { return result.NewCatalogDigest; }
        set { SetNewCatalogDigest(value); }
      }
      public Builder SetNewCatalogDigest(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewCatalogDigest = true;
        result.newCatalogDigest_ = value;
        return this;
      }
      public Builder ClearNewCatalogDigest() {
        PrepareBuilder();
        result.hasNewCatalogDigest = false;
        result.newCatalogDigest_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasNewCatalogNewestProductTime {
        get { return result.hasNewCatalogNewestProductTime; }
      }
      public long NewCatalogNewestProductTime {
        get { return result.NewCatalogNewestProductTime; }
        set { SetNewCatalogNewestProductTime(value); }
      }
      public Builder SetNewCatalogNewestProductTime(long value) {
        PrepareBuilder();
        result.hasNewCatalogNewestProductTime = true;
        result.newCatalogNewestProductTime_ = value;
        return this;
      }
      public Builder ClearNewCatalogNewestProductTime() {
        PrepareBuilder();
        result.hasNewCatalogNewestProductTime = false;
        result.newCatalogNewestProductTime_ = 0L;
        return this;
      }
    }
    static ProductCatalogUpdate() {
      object.ReferenceEquals(global::D3.Broadcast.Broadcast.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BenefactedLicenseUpdate : pb::GeneratedMessage<BenefactedLicenseUpdate, BenefactedLicenseUpdate.Builder> {
    private BenefactedLicenseUpdate() { }
    private static readonly BenefactedLicenseUpdate defaultInstance = new BenefactedLicenseUpdate().MakeReadOnly();
    private static readonly string[] _benefactedLicenseUpdateFieldNames = new string[] { "license_ids" };
    private static readonly uint[] _benefactedLicenseUpdateFieldTags = new uint[] { 8 };
    public static BenefactedLicenseUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BenefactedLicenseUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BenefactedLicenseUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Broadcast.Broadcast.internal__static_D3_Broadcast_BenefactedLicenseUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BenefactedLicenseUpdate, BenefactedLicenseUpdate.Builder> InternalFieldAccessors {
      get { return global::D3.Broadcast.Broadcast.internal__static_D3_Broadcast_BenefactedLicenseUpdate__FieldAccessorTable; }
    }
    
    public const int LicenseIdsFieldNumber = 1;
    private pbc::PopsicleList<ulong> licenseIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> LicenseIdsList {
      get { return pbc::Lists.AsReadOnly(licenseIds_); }
    }
    public int LicenseIdsCount {
      get { return licenseIds_.Count; }
    }
    public ulong GetLicenseIds(int index) {
      return licenseIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _benefactedLicenseUpdateFieldNames;
      if (licenseIds_.Count > 0) {
        output.WriteUInt64Array(1, field_names[0], licenseIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (ulong element in LicenseIdsList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * licenseIds_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BenefactedLicenseUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BenefactedLicenseUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BenefactedLicenseUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BenefactedLicenseUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BenefactedLicenseUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BenefactedLicenseUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BenefactedLicenseUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BenefactedLicenseUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BenefactedLicenseUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BenefactedLicenseUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BenefactedLicenseUpdate MakeReadOnly() {
      licenseIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BenefactedLicenseUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<BenefactedLicenseUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BenefactedLicenseUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BenefactedLicenseUpdate result;
      
      private BenefactedLicenseUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          BenefactedLicenseUpdate original = result;
          result = new BenefactedLicenseUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BenefactedLicenseUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Broadcast.BenefactedLicenseUpdate.Descriptor; }
      }
      
      public override BenefactedLicenseUpdate DefaultInstanceForType {
        get { return global::D3.Broadcast.BenefactedLicenseUpdate.DefaultInstance; }
      }
      
      public override BenefactedLicenseUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BenefactedLicenseUpdate) {
          return MergeFrom((BenefactedLicenseUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BenefactedLicenseUpdate other) {
        if (other == global::D3.Broadcast.BenefactedLicenseUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.licenseIds_.Count != 0) {
          result.licenseIds_.Add(other.licenseIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_benefactedLicenseUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _benefactedLicenseUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt64Array(tag, field_name, result.licenseIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<ulong> LicenseIdsList {
        get { return PrepareBuilder().licenseIds_; }
      }
      public int LicenseIdsCount {
        get { return result.LicenseIdsCount; }
      }
      public ulong GetLicenseIds(int index) {
        return result.GetLicenseIds(index);
      }
      public Builder SetLicenseIds(int index, ulong value) {
        PrepareBuilder();
        result.licenseIds_[index] = value;
        return this;
      }
      public Builder AddLicenseIds(ulong value) {
        PrepareBuilder();
        result.licenseIds_.Add(value);
        return this;
      }
      public Builder AddRangeLicenseIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.licenseIds_.Add(values);
        return this;
      }
      public Builder ClearLicenseIds() {
        PrepareBuilder();
        result.licenseIds_.Clear();
        return this;
      }
    }
    static BenefactedLicenseUpdate() {
      object.ReferenceEquals(global::D3.Broadcast.Broadcast.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AchievementsStaticDataFileUpdated : pb::GeneratedMessage<AchievementsStaticDataFileUpdated, AchievementsStaticDataFileUpdated.Builder> {
    private AchievementsStaticDataFileUpdated() { }
    private static readonly AchievementsStaticDataFileUpdated defaultInstance = new AchievementsStaticDataFileUpdated().MakeReadOnly();
    private static readonly string[] _achievementsStaticDataFileUpdatedFieldNames = new string[] { "build_version", "content_handle" };
    private static readonly uint[] _achievementsStaticDataFileUpdatedFieldTags = new uint[] { 10, 18 };
    public static AchievementsStaticDataFileUpdated DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AchievementsStaticDataFileUpdated DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AchievementsStaticDataFileUpdated ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Broadcast.Broadcast.internal__static_D3_Broadcast_AchievementsStaticDataFileUpdated__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AchievementsStaticDataFileUpdated, AchievementsStaticDataFileUpdated.Builder> InternalFieldAccessors {
      get { return global::D3.Broadcast.Broadcast.internal__static_D3_Broadcast_AchievementsStaticDataFileUpdated__FieldAccessorTable; }
    }
    
    public const int BuildVersionFieldNumber = 1;
    private bool hasBuildVersion;
    private string buildVersion_ = "";
    public bool HasBuildVersion {
      get { return hasBuildVersion; }
    }
    public string BuildVersion {
      get { return buildVersion_; }
    }
    
    public const int ContentHandleFieldNumber = 2;
    private bool hasContentHandle;
    private global::D3.OnlineService.ContentHandle contentHandle_;
    public bool HasContentHandle {
      get { return hasContentHandle; }
    }
    public global::D3.OnlineService.ContentHandle ContentHandle {
      get { return contentHandle_ ?? global::D3.OnlineService.ContentHandle.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _achievementsStaticDataFileUpdatedFieldNames;
      if (hasBuildVersion) {
        output.WriteString(1, field_names[0], BuildVersion);
      }
      if (hasContentHandle) {
        output.WriteMessage(2, field_names[1], ContentHandle);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBuildVersion) {
          size += pb::CodedOutputStream.ComputeStringSize(1, BuildVersion);
        }
        if (hasContentHandle) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ContentHandle);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AchievementsStaticDataFileUpdated ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementsStaticDataFileUpdated ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementsStaticDataFileUpdated ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementsStaticDataFileUpdated ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementsStaticDataFileUpdated ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementsStaticDataFileUpdated ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AchievementsStaticDataFileUpdated ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AchievementsStaticDataFileUpdated ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AchievementsStaticDataFileUpdated ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementsStaticDataFileUpdated ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AchievementsStaticDataFileUpdated MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AchievementsStaticDataFileUpdated prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AchievementsStaticDataFileUpdated, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AchievementsStaticDataFileUpdated cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AchievementsStaticDataFileUpdated result;
      
      private AchievementsStaticDataFileUpdated PrepareBuilder() {
        if (resultIsReadOnly) {
          AchievementsStaticDataFileUpdated original = result;
          result = new AchievementsStaticDataFileUpdated();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AchievementsStaticDataFileUpdated MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Broadcast.AchievementsStaticDataFileUpdated.Descriptor; }
      }
      
      public override AchievementsStaticDataFileUpdated DefaultInstanceForType {
        get { return global::D3.Broadcast.AchievementsStaticDataFileUpdated.DefaultInstance; }
      }
      
      public override AchievementsStaticDataFileUpdated BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AchievementsStaticDataFileUpdated) {
          return MergeFrom((AchievementsStaticDataFileUpdated) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AchievementsStaticDataFileUpdated other) {
        if (other == global::D3.Broadcast.AchievementsStaticDataFileUpdated.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBuildVersion) {
          BuildVersion = other.BuildVersion;
        }
        if (other.HasContentHandle) {
          MergeContentHandle(other.ContentHandle);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_achievementsStaticDataFileUpdatedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _achievementsStaticDataFileUpdatedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasBuildVersion = input.ReadString(ref result.buildVersion_);
              break;
            }
            case 18: {
              global::D3.OnlineService.ContentHandle.Builder subBuilder = global::D3.OnlineService.ContentHandle.CreateBuilder();
              if (result.hasContentHandle) {
                subBuilder.MergeFrom(ContentHandle);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ContentHandle = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBuildVersion {
        get { return result.hasBuildVersion; }
      }
      public string BuildVersion {
        get { return result.BuildVersion; }
        set { SetBuildVersion(value); }
      }
      public Builder SetBuildVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBuildVersion = true;
        result.buildVersion_ = value;
        return this;
      }
      public Builder ClearBuildVersion() {
        PrepareBuilder();
        result.hasBuildVersion = false;
        result.buildVersion_ = "";
        return this;
      }
      
      public bool HasContentHandle {
       get { return result.hasContentHandle; }
      }
      public global::D3.OnlineService.ContentHandle ContentHandle {
        get { return result.ContentHandle; }
        set { SetContentHandle(value); }
      }
      public Builder SetContentHandle(global::D3.OnlineService.ContentHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContentHandle = true;
        result.contentHandle_ = value;
        return this;
      }
      public Builder SetContentHandle(global::D3.OnlineService.ContentHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasContentHandle = true;
        result.contentHandle_ = builderForValue.Build();
        return this;
      }
      public Builder MergeContentHandle(global::D3.OnlineService.ContentHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasContentHandle &&
            result.contentHandle_ != global::D3.OnlineService.ContentHandle.DefaultInstance) {
            result.contentHandle_ = global::D3.OnlineService.ContentHandle.CreateBuilder(result.contentHandle_).MergeFrom(value).BuildPartial();
        } else {
          result.contentHandle_ = value;
        }
        result.hasContentHandle = true;
        return this;
      }
      public Builder ClearContentHandle() {
        PrepareBuilder();
        result.hasContentHandle = false;
        result.contentHandle_ = null;
        return this;
      }
    }
    static AchievementsStaticDataFileUpdated() {
      object.ReferenceEquals(global::D3.Broadcast.Broadcast.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class NewClientAvailable : pb::GeneratedMessage<NewClientAvailable, NewClientAvailable.Builder> {
    private NewClientAvailable() { }
    private static readonly NewClientAvailable defaultInstance = new NewClientAvailable().MakeReadOnly();
    private static readonly string[] _newClientAvailableFieldNames = new string[] { "client_build_number" };
    private static readonly uint[] _newClientAvailableFieldTags = new uint[] { 8 };
    public static NewClientAvailable DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewClientAvailable DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewClientAvailable ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Broadcast.Broadcast.internal__static_D3_Broadcast_NewClientAvailable__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewClientAvailable, NewClientAvailable.Builder> InternalFieldAccessors {
      get { return global::D3.Broadcast.Broadcast.internal__static_D3_Broadcast_NewClientAvailable__FieldAccessorTable; }
    }
    
    public const int ClientBuildNumberFieldNumber = 1;
    private bool hasClientBuildNumber;
    private uint clientBuildNumber_;
    public bool HasClientBuildNumber {
      get { return hasClientBuildNumber; }
    }
    public uint ClientBuildNumber {
      get { return clientBuildNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClientBuildNumber) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newClientAvailableFieldNames;
      if (hasClientBuildNumber) {
        output.WriteUInt32(1, field_names[0], ClientBuildNumber);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasClientBuildNumber) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ClientBuildNumber);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewClientAvailable ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewClientAvailable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewClientAvailable ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewClientAvailable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewClientAvailable ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewClientAvailable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewClientAvailable ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewClientAvailable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewClientAvailable ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewClientAvailable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewClientAvailable MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewClientAvailable prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<NewClientAvailable, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewClientAvailable cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewClientAvailable result;
      
      private NewClientAvailable PrepareBuilder() {
        if (resultIsReadOnly) {
          NewClientAvailable original = result;
          result = new NewClientAvailable();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewClientAvailable MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Broadcast.NewClientAvailable.Descriptor; }
      }
      
      public override NewClientAvailable DefaultInstanceForType {
        get { return global::D3.Broadcast.NewClientAvailable.DefaultInstance; }
      }
      
      public override NewClientAvailable BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewClientAvailable) {
          return MergeFrom((NewClientAvailable) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewClientAvailable other) {
        if (other == global::D3.Broadcast.NewClientAvailable.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClientBuildNumber) {
          ClientBuildNumber = other.ClientBuildNumber;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newClientAvailableFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newClientAvailableFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasClientBuildNumber = input.ReadUInt32(ref result.clientBuildNumber_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClientBuildNumber {
        get { return result.hasClientBuildNumber; }
      }
      public uint ClientBuildNumber {
        get { return result.ClientBuildNumber; }
        set { SetClientBuildNumber(value); }
      }
      public Builder SetClientBuildNumber(uint value) {
        PrepareBuilder();
        result.hasClientBuildNumber = true;
        result.clientBuildNumber_ = value;
        return this;
      }
      public Builder ClearClientBuildNumber() {
        PrepareBuilder();
        result.hasClientBuildNumber = false;
        result.clientBuildNumber_ = 0;
        return this;
      }
    }
    static NewClientAvailable() {
      object.ReferenceEquals(global::D3.Broadcast.Broadcast.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SyncedXVarUpdate : pb::GeneratedMessage<SyncedXVarUpdate, SyncedXVarUpdate.Builder> {
    private SyncedXVarUpdate() { }
    private static readonly SyncedXVarUpdate defaultInstance = new SyncedXVarUpdate().MakeReadOnly();
    private static readonly string[] _syncedXVarUpdateFieldNames = new string[] { "cmd_line" };
    private static readonly uint[] _syncedXVarUpdateFieldTags = new uint[] { 10 };
    public static SyncedXVarUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SyncedXVarUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SyncedXVarUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Broadcast.Broadcast.internal__static_D3_Broadcast_SyncedXVarUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SyncedXVarUpdate, SyncedXVarUpdate.Builder> InternalFieldAccessors {
      get { return global::D3.Broadcast.Broadcast.internal__static_D3_Broadcast_SyncedXVarUpdate__FieldAccessorTable; }
    }
    
    public const int CmdLineFieldNumber = 1;
    private bool hasCmdLine;
    private string cmdLine_ = "";
    public bool HasCmdLine {
      get { return hasCmdLine; }
    }
    public string CmdLine {
      get { return cmdLine_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _syncedXVarUpdateFieldNames;
      if (hasCmdLine) {
        output.WriteString(1, field_names[0], CmdLine);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCmdLine) {
          size += pb::CodedOutputStream.ComputeStringSize(1, CmdLine);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SyncedXVarUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SyncedXVarUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SyncedXVarUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SyncedXVarUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SyncedXVarUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SyncedXVarUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SyncedXVarUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SyncedXVarUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SyncedXVarUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SyncedXVarUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SyncedXVarUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SyncedXVarUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SyncedXVarUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SyncedXVarUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SyncedXVarUpdate result;
      
      private SyncedXVarUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          SyncedXVarUpdate original = result;
          result = new SyncedXVarUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SyncedXVarUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Broadcast.SyncedXVarUpdate.Descriptor; }
      }
      
      public override SyncedXVarUpdate DefaultInstanceForType {
        get { return global::D3.Broadcast.SyncedXVarUpdate.DefaultInstance; }
      }
      
      public override SyncedXVarUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SyncedXVarUpdate) {
          return MergeFrom((SyncedXVarUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SyncedXVarUpdate other) {
        if (other == global::D3.Broadcast.SyncedXVarUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCmdLine) {
          CmdLine = other.CmdLine;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_syncedXVarUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _syncedXVarUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCmdLine = input.ReadString(ref result.cmdLine_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCmdLine {
        get { return result.hasCmdLine; }
      }
      public string CmdLine {
        get { return result.CmdLine; }
        set { SetCmdLine(value); }
      }
      public Builder SetCmdLine(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCmdLine = true;
        result.cmdLine_ = value;
        return this;
      }
      public Builder ClearCmdLine() {
        PrepareBuilder();
        result.hasCmdLine = false;
        result.cmdLine_ = "";
        return this;
      }
    }
    static SyncedXVarUpdate() {
      object.ReferenceEquals(global::D3.Broadcast.Broadcast.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
