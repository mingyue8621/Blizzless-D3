// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.OnlineServiceServer {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class OnlineServiceServer {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_OnlineServiceServer_License__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineServiceServer.License, global::D3.OnlineServiceServer.License.Builder> internal__static_D3_OnlineServiceServer_License__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineServiceServer_Licenses__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineServiceServer.Licenses, global::D3.OnlineServiceServer.Licenses.Builder> internal__static_D3_OnlineServiceServer_Licenses__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineServiceServer_SessionInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineServiceServer.SessionInfo, global::D3.OnlineServiceServer.SessionInfo.Builder> internal__static_D3_OnlineServiceServer_SessionInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineServiceServer_CachedSessionData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineServiceServer.CachedSessionData, global::D3.OnlineServiceServer.CachedSessionData.Builder> internal__static_D3_OnlineServiceServer_CachedSessionData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineServiceServer_ConsoleSeasonData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineServiceServer.ConsoleSeasonData, global::D3.OnlineServiceServer.ConsoleSeasonData.Builder> internal__static_D3_OnlineServiceServer_ConsoleSeasonData__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static OnlineServiceServer() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChlPbmxpbmVTZXJ2aWNlU2VydmVyLnByb3RvEhZEMy5PbmxpbmVTZXJ2aWNl" + 
          "U2VydmVyIvEBCgdMaWNlbnNlEg4KAmlkGAEgAigEUgJpZBIfCgtleHBpcmVf" + 
          "dGltZRgCIAEoBFIKZXhwaXJlVGltZRIlCg50cmFuc2FjdGlvbl9pZBgDIAEo" + 
          "BFINdHJhbnNhY3Rpb25JZBIaCghjb25zdW1lZBgEIAEoCFIIY29uc3VtZWQS" + 
          "HwoLaW5zdGFuY2VfaWQYBSABKARSCmluc3RhbmNlSWQSJwoPY29uc3VtZWRf" + 
          "cmV2b2tlGAYgASgIUg5jb25zdW1lZFJldm9rZRIoChBpbl9tYW51YWxfcmV2" + 
          "aWV3GAcgASgIUg5pbk1hbnVhbFJldmlldyJQCghMaWNlbnNlcxJECg1saWNl" + 
          "bnNlc19wcm9wGAEgAygLMh8uRDMuT25saW5lU2VydmljZVNlcnZlci5MaWNl" + 
          "bnNlUgxsaWNlbnNlc1Byb3AihgIKC1Nlc3Npb25JbmZvEiIKDXN0YXJ0X3Rp" + 
          "bWVfbXMYASABKARSC3N0YXJ0VGltZU1zEisKDnBsYXlpbmdfaW5faWdyGAIg" + 
          "ASgIOgVmYWxzZVIMcGxheWluZ0luSWdyEiwKDmhhc19iZW5lZmFjdG9yGAMg" + 
          "ASgIOgVmYWxzZVINaGFzQmVuZWZhY3RvchI9Chd1c2luZ19wYXJlbnRhbF9j" + 
          "b250cm9scxgEIAEoCDoFZmFsc2VSFXVzaW5nUGFyZW50YWxDb250cm9scxIa" + 
          "Cghsb2NhdGlvbhgFIAEoCVIIbG9jYXRpb24SHQoKaXBfYWRkcmVzcxgGIAEo" + 
          "CVIJaXBBZGRyZXNzIr8DChFDYWNoZWRTZXNzaW9uRGF0YRJHCg5zdG9yZV9s" + 
          "aWNlbnNlcxgBIAEoCzIgLkQzLk9ubGluZVNlcnZpY2VTZXJ2ZXIuTGljZW5z" + 
          "ZXNSDXN0b3JlTGljZW5zZXMSTwoQZGVmaWxlcl9saWNlbnNlcxgCIAEoCzIg" + 
          "LkQzLk9ubGluZVNlcnZpY2VTZXJ2ZXIuTGljZW5zZXNCAhgBUg9kZWZpbGVy" + 
          "TGljZW5zZXMSRgoMc2Vzc2lvbl9pbmZvGAMgASgLMiMuRDMuT25saW5lU2Vy" + 
          "dmljZVNlcnZlci5TZXNzaW9uSW5mb1ILc2Vzc2lvbkluZm8SLAoSc3RvcmVf" + 
          "dXBkYXRlZF90aW1lGAogASgEUhBzdG9yZVVwZGF0ZWRUaW1lEjQKFGRlZmls" + 
          "ZXJfdXBkYXRlZF90aW1lGAsgASgEQgIYAVISZGVmaWxlclVwZGF0ZWRUaW1l" + 
          "EjAKFHNlc3Npb25fdXBkYXRlZF90aW1lGAwgASgEUhJzZXNzaW9uVXBkYXRl" + 
          "ZFRpbWUSMgoVbGFzdF9leHBpcmF0aW9uX2NoZWNrGA0gASgEUhNsYXN0RXhw" + 
          "aXJhdGlvbkNoZWNrImEKEUNvbnNvbGVTZWFzb25EYXRhEigKDmN1cnJlbnRf" + 
          "c2Vhc29uGAEgASgNOgEwUg1jdXJyZW50U2Vhc29uEiIKC2NvbmZpZ19oYXNo" + 
          "GAIgASgEOgEwUgpjb25maWdIYXNo");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_OnlineServiceServer_License__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_OnlineServiceServer_License__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineServiceServer.License, global::D3.OnlineServiceServer.License.Builder>(internal__static_D3_OnlineServiceServer_License__Descriptor,
                new string[] { "Id", "ExpireTime", "TransactionId", "Consumed", "InstanceId", "ConsumedRevoke", "InManualReview", });
        internal__static_D3_OnlineServiceServer_Licenses__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_OnlineServiceServer_Licenses__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineServiceServer.Licenses, global::D3.OnlineServiceServer.Licenses.Builder>(internal__static_D3_OnlineServiceServer_Licenses__Descriptor,
                new string[] { "LicensesProp", });
        internal__static_D3_OnlineServiceServer_SessionInfo__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_OnlineServiceServer_SessionInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineServiceServer.SessionInfo, global::D3.OnlineServiceServer.SessionInfo.Builder>(internal__static_D3_OnlineServiceServer_SessionInfo__Descriptor,
                new string[] { "StartTimeMs", "PlayingInIgr", "HasBenefactor", "UsingParentalControls", "Location", "IpAddress", });
        internal__static_D3_OnlineServiceServer_CachedSessionData__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_OnlineServiceServer_CachedSessionData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineServiceServer.CachedSessionData, global::D3.OnlineServiceServer.CachedSessionData.Builder>(internal__static_D3_OnlineServiceServer_CachedSessionData__Descriptor,
                new string[] { "StoreLicenses", "DefilerLicenses", "SessionInfo", "StoreUpdatedTime", "DefilerUpdatedTime", "SessionUpdatedTime", "LastExpirationCheck", });
        internal__static_D3_OnlineServiceServer_ConsoleSeasonData__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_OnlineServiceServer_ConsoleSeasonData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineServiceServer.ConsoleSeasonData, global::D3.OnlineServiceServer.ConsoleSeasonData.Builder>(internal__static_D3_OnlineServiceServer_ConsoleSeasonData__Descriptor,
                new string[] { "CurrentSeason", "ConfigHash", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class License : pb::GeneratedMessage<License, License.Builder> {
    private License() { }
    private static readonly License defaultInstance = new License().MakeReadOnly();
    private static readonly string[] _licenseFieldNames = new string[] { "consumed", "consumed_revoke", "expire_time", "id", "in_manual_review", "instance_id", "transaction_id" };
    private static readonly uint[] _licenseFieldTags = new uint[] { 32, 48, 16, 8, 56, 40, 24 };
    public static License DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override License DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override License ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineServiceServer.OnlineServiceServer.internal__static_D3_OnlineServiceServer_License__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<License, License.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineServiceServer.OnlineServiceServer.internal__static_D3_OnlineServiceServer_License__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    public ulong Id {
      get { return id_; }
    }
    
    public const int ExpireTimeFieldNumber = 2;
    private bool hasExpireTime;
    private ulong expireTime_;
    public bool HasExpireTime {
      get { return hasExpireTime; }
    }
    public ulong ExpireTime {
      get { return expireTime_; }
    }
    
    public const int TransactionIdFieldNumber = 3;
    private bool hasTransactionId;
    private ulong transactionId_;
    public bool HasTransactionId {
      get { return hasTransactionId; }
    }
    public ulong TransactionId {
      get { return transactionId_; }
    }
    
    public const int ConsumedFieldNumber = 4;
    private bool hasConsumed;
    private bool consumed_;
    public bool HasConsumed {
      get { return hasConsumed; }
    }
    public bool Consumed {
      get { return consumed_; }
    }
    
    public const int InstanceIdFieldNumber = 5;
    private bool hasInstanceId;
    private ulong instanceId_;
    public bool HasInstanceId {
      get { return hasInstanceId; }
    }
    public ulong InstanceId {
      get { return instanceId_; }
    }
    
    public const int ConsumedRevokeFieldNumber = 6;
    private bool hasConsumedRevoke;
    private bool consumedRevoke_;
    public bool HasConsumedRevoke {
      get { return hasConsumedRevoke; }
    }
    public bool ConsumedRevoke {
      get { return consumedRevoke_; }
    }
    
    public const int InManualReviewFieldNumber = 7;
    private bool hasInManualReview;
    private bool inManualReview_;
    public bool HasInManualReview {
      get { return hasInManualReview; }
    }
    public bool InManualReview {
      get { return inManualReview_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _licenseFieldNames;
      if (hasId) {
        output.WriteUInt64(1, field_names[3], Id);
      }
      if (hasExpireTime) {
        output.WriteUInt64(2, field_names[2], ExpireTime);
      }
      if (hasTransactionId) {
        output.WriteUInt64(3, field_names[6], TransactionId);
      }
      if (hasConsumed) {
        output.WriteBool(4, field_names[0], Consumed);
      }
      if (hasInstanceId) {
        output.WriteUInt64(5, field_names[5], InstanceId);
      }
      if (hasConsumedRevoke) {
        output.WriteBool(6, field_names[1], ConsumedRevoke);
      }
      if (hasInManualReview) {
        output.WriteBool(7, field_names[4], InManualReview);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, Id);
        }
        if (hasExpireTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, ExpireTime);
        }
        if (hasTransactionId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, TransactionId);
        }
        if (hasConsumed) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, Consumed);
        }
        if (hasInstanceId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(5, InstanceId);
        }
        if (hasConsumedRevoke) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, ConsumedRevoke);
        }
        if (hasInManualReview) {
          size += pb::CodedOutputStream.ComputeBoolSize(7, InManualReview);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static License ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static License ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static License ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static License ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static License ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static License ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static License ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static License ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static License ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static License ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private License MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(License prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<License, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(License cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private License result;
      
      private License PrepareBuilder() {
        if (resultIsReadOnly) {
          License original = result;
          result = new License();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override License MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineServiceServer.License.Descriptor; }
      }
      
      public override License DefaultInstanceForType {
        get { return global::D3.OnlineServiceServer.License.DefaultInstance; }
      }
      
      public override License BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is License) {
          return MergeFrom((License) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(License other) {
        if (other == global::D3.OnlineServiceServer.License.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasExpireTime) {
          ExpireTime = other.ExpireTime;
        }
        if (other.HasTransactionId) {
          TransactionId = other.TransactionId;
        }
        if (other.HasConsumed) {
          Consumed = other.Consumed;
        }
        if (other.HasInstanceId) {
          InstanceId = other.InstanceId;
        }
        if (other.HasConsumedRevoke) {
          ConsumedRevoke = other.ConsumedRevoke;
        }
        if (other.HasInManualReview) {
          InManualReview = other.InManualReview;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_licenseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _licenseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt64(ref result.id_);
              break;
            }
            case 16: {
              result.hasExpireTime = input.ReadUInt64(ref result.expireTime_);
              break;
            }
            case 24: {
              result.hasTransactionId = input.ReadUInt64(ref result.transactionId_);
              break;
            }
            case 32: {
              result.hasConsumed = input.ReadBool(ref result.consumed_);
              break;
            }
            case 40: {
              result.hasInstanceId = input.ReadUInt64(ref result.instanceId_);
              break;
            }
            case 48: {
              result.hasConsumedRevoke = input.ReadBool(ref result.consumedRevoke_);
              break;
            }
            case 56: {
              result.hasInManualReview = input.ReadBool(ref result.inManualReview_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0UL;
        return this;
      }
      
      public bool HasExpireTime {
        get { return result.hasExpireTime; }
      }
      public ulong ExpireTime {
        get { return result.ExpireTime; }
        set { SetExpireTime(value); }
      }
      public Builder SetExpireTime(ulong value) {
        PrepareBuilder();
        result.hasExpireTime = true;
        result.expireTime_ = value;
        return this;
      }
      public Builder ClearExpireTime() {
        PrepareBuilder();
        result.hasExpireTime = false;
        result.expireTime_ = 0UL;
        return this;
      }
      
      public bool HasTransactionId {
        get { return result.hasTransactionId; }
      }
      public ulong TransactionId {
        get { return result.TransactionId; }
        set { SetTransactionId(value); }
      }
      public Builder SetTransactionId(ulong value) {
        PrepareBuilder();
        result.hasTransactionId = true;
        result.transactionId_ = value;
        return this;
      }
      public Builder ClearTransactionId() {
        PrepareBuilder();
        result.hasTransactionId = false;
        result.transactionId_ = 0UL;
        return this;
      }
      
      public bool HasConsumed {
        get { return result.hasConsumed; }
      }
      public bool Consumed {
        get { return result.Consumed; }
        set { SetConsumed(value); }
      }
      public Builder SetConsumed(bool value) {
        PrepareBuilder();
        result.hasConsumed = true;
        result.consumed_ = value;
        return this;
      }
      public Builder ClearConsumed() {
        PrepareBuilder();
        result.hasConsumed = false;
        result.consumed_ = false;
        return this;
      }
      
      public bool HasInstanceId {
        get { return result.hasInstanceId; }
      }
      public ulong InstanceId {
        get { return result.InstanceId; }
        set { SetInstanceId(value); }
      }
      public Builder SetInstanceId(ulong value) {
        PrepareBuilder();
        result.hasInstanceId = true;
        result.instanceId_ = value;
        return this;
      }
      public Builder ClearInstanceId() {
        PrepareBuilder();
        result.hasInstanceId = false;
        result.instanceId_ = 0UL;
        return this;
      }
      
      public bool HasConsumedRevoke {
        get { return result.hasConsumedRevoke; }
      }
      public bool ConsumedRevoke {
        get { return result.ConsumedRevoke; }
        set { SetConsumedRevoke(value); }
      }
      public Builder SetConsumedRevoke(bool value) {
        PrepareBuilder();
        result.hasConsumedRevoke = true;
        result.consumedRevoke_ = value;
        return this;
      }
      public Builder ClearConsumedRevoke() {
        PrepareBuilder();
        result.hasConsumedRevoke = false;
        result.consumedRevoke_ = false;
        return this;
      }
      
      public bool HasInManualReview {
        get { return result.hasInManualReview; }
      }
      public bool InManualReview {
        get { return result.InManualReview; }
        set { SetInManualReview(value); }
      }
      public Builder SetInManualReview(bool value) {
        PrepareBuilder();
        result.hasInManualReview = true;
        result.inManualReview_ = value;
        return this;
      }
      public Builder ClearInManualReview() {
        PrepareBuilder();
        result.hasInManualReview = false;
        result.inManualReview_ = false;
        return this;
      }
    }
    static License() {
      object.ReferenceEquals(global::D3.OnlineServiceServer.OnlineServiceServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Licenses : pb::GeneratedMessage<Licenses, Licenses.Builder> {
    private Licenses() { }
    private static readonly Licenses defaultInstance = new Licenses().MakeReadOnly();
    private static readonly string[] _licensesFieldNames = new string[] { "licenses_prop" };
    private static readonly uint[] _licensesFieldTags = new uint[] { 10 };
    public static Licenses DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Licenses DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Licenses ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineServiceServer.OnlineServiceServer.internal__static_D3_OnlineServiceServer_Licenses__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Licenses, Licenses.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineServiceServer.OnlineServiceServer.internal__static_D3_OnlineServiceServer_Licenses__FieldAccessorTable; }
    }
    
    public const int LicensesPropFieldNumber = 1;
    private pbc::PopsicleList<global::D3.OnlineServiceServer.License> licensesProp_ = new pbc::PopsicleList<global::D3.OnlineServiceServer.License>();
    public scg::IList<global::D3.OnlineServiceServer.License> LicensesPropList {
      get { return licensesProp_; }
    }
    public int LicensesPropCount {
      get { return licensesProp_.Count; }
    }
    public global::D3.OnlineServiceServer.License GetLicensesProp(int index) {
      return licensesProp_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.OnlineServiceServer.License element in LicensesPropList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _licensesFieldNames;
      if (licensesProp_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], licensesProp_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.OnlineServiceServer.License element in LicensesPropList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Licenses ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Licenses ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Licenses ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Licenses ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Licenses ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Licenses ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Licenses ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Licenses ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Licenses ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Licenses ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Licenses MakeReadOnly() {
      licensesProp_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Licenses prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Licenses, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Licenses cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Licenses result;
      
      private Licenses PrepareBuilder() {
        if (resultIsReadOnly) {
          Licenses original = result;
          result = new Licenses();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Licenses MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineServiceServer.Licenses.Descriptor; }
      }
      
      public override Licenses DefaultInstanceForType {
        get { return global::D3.OnlineServiceServer.Licenses.DefaultInstance; }
      }
      
      public override Licenses BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Licenses) {
          return MergeFrom((Licenses) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Licenses other) {
        if (other == global::D3.OnlineServiceServer.Licenses.DefaultInstance) return this;
        PrepareBuilder();
        if (other.licensesProp_.Count != 0) {
          result.licensesProp_.Add(other.licensesProp_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_licensesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _licensesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.licensesProp_, global::D3.OnlineServiceServer.License.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.OnlineServiceServer.License> LicensesPropList {
        get { return PrepareBuilder().licensesProp_; }
      }
      public int LicensesPropCount {
        get { return result.LicensesPropCount; }
      }
      public global::D3.OnlineServiceServer.License GetLicensesProp(int index) {
        return result.GetLicensesProp(index);
      }
      public Builder SetLicensesProp(int index, global::D3.OnlineServiceServer.License value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.licensesProp_[index] = value;
        return this;
      }
      public Builder SetLicensesProp(int index, global::D3.OnlineServiceServer.License.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.licensesProp_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLicensesProp(global::D3.OnlineServiceServer.License value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.licensesProp_.Add(value);
        return this;
      }
      public Builder AddLicensesProp(global::D3.OnlineServiceServer.License.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.licensesProp_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLicensesProp(scg::IEnumerable<global::D3.OnlineServiceServer.License> values) {
        PrepareBuilder();
        result.licensesProp_.Add(values);
        return this;
      }
      public Builder ClearLicensesProp() {
        PrepareBuilder();
        result.licensesProp_.Clear();
        return this;
      }
    }
    static Licenses() {
      object.ReferenceEquals(global::D3.OnlineServiceServer.OnlineServiceServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SessionInfo : pb::GeneratedMessage<SessionInfo, SessionInfo.Builder> {
    private SessionInfo() { }
    private static readonly SessionInfo defaultInstance = new SessionInfo().MakeReadOnly();
    private static readonly string[] _sessionInfoFieldNames = new string[] { "has_benefactor", "ip_address", "location", "playing_in_igr", "start_time_ms", "using_parental_controls" };
    private static readonly uint[] _sessionInfoFieldTags = new uint[] { 24, 50, 42, 16, 8, 32 };
    public static SessionInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SessionInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SessionInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineServiceServer.OnlineServiceServer.internal__static_D3_OnlineServiceServer_SessionInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SessionInfo, SessionInfo.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineServiceServer.OnlineServiceServer.internal__static_D3_OnlineServiceServer_SessionInfo__FieldAccessorTable; }
    }
    
    public const int StartTimeMsFieldNumber = 1;
    private bool hasStartTimeMs;
    private ulong startTimeMs_;
    public bool HasStartTimeMs {
      get { return hasStartTimeMs; }
    }
    public ulong StartTimeMs {
      get { return startTimeMs_; }
    }
    
    public const int PlayingInIgrFieldNumber = 2;
    private bool hasPlayingInIgr;
    private bool playingInIgr_;
    public bool HasPlayingInIgr {
      get { return hasPlayingInIgr; }
    }
    public bool PlayingInIgr {
      get { return playingInIgr_; }
    }
    
    public const int HasBenefactorFieldNumber = 3;
    private bool hasHasBenefactor;
    private bool hasBenefactor_;
    public bool HasHasBenefactor {
      get { return hasHasBenefactor; }
    }
    public bool HasBenefactor {
      get { return hasBenefactor_; }
    }
    
    public const int UsingParentalControlsFieldNumber = 4;
    private bool hasUsingParentalControls;
    private bool usingParentalControls_;
    public bool HasUsingParentalControls {
      get { return hasUsingParentalControls; }
    }
    public bool UsingParentalControls {
      get { return usingParentalControls_; }
    }
    
    public const int LocationFieldNumber = 5;
    private bool hasLocation;
    private string location_ = "";
    public bool HasLocation {
      get { return hasLocation; }
    }
    public string Location {
      get { return location_; }
    }
    
    public const int IpAddressFieldNumber = 6;
    private bool hasIpAddress;
    private string ipAddress_ = "";
    public bool HasIpAddress {
      get { return hasIpAddress; }
    }
    public string IpAddress {
      get { return ipAddress_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sessionInfoFieldNames;
      if (hasStartTimeMs) {
        output.WriteUInt64(1, field_names[4], StartTimeMs);
      }
      if (hasPlayingInIgr) {
        output.WriteBool(2, field_names[3], PlayingInIgr);
      }
      if (hasHasBenefactor) {
        output.WriteBool(3, field_names[0], HasBenefactor);
      }
      if (hasUsingParentalControls) {
        output.WriteBool(4, field_names[5], UsingParentalControls);
      }
      if (hasLocation) {
        output.WriteString(5, field_names[2], Location);
      }
      if (hasIpAddress) {
        output.WriteString(6, field_names[1], IpAddress);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStartTimeMs) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, StartTimeMs);
        }
        if (hasPlayingInIgr) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, PlayingInIgr);
        }
        if (hasHasBenefactor) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, HasBenefactor);
        }
        if (hasUsingParentalControls) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, UsingParentalControls);
        }
        if (hasLocation) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Location);
        }
        if (hasIpAddress) {
          size += pb::CodedOutputStream.ComputeStringSize(6, IpAddress);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SessionInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SessionInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SessionInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SessionInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SessionInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SessionInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SessionInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SessionInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SessionInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SessionInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SessionInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SessionInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SessionInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SessionInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SessionInfo result;
      
      private SessionInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          SessionInfo original = result;
          result = new SessionInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SessionInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineServiceServer.SessionInfo.Descriptor; }
      }
      
      public override SessionInfo DefaultInstanceForType {
        get { return global::D3.OnlineServiceServer.SessionInfo.DefaultInstance; }
      }
      
      public override SessionInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SessionInfo) {
          return MergeFrom((SessionInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SessionInfo other) {
        if (other == global::D3.OnlineServiceServer.SessionInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStartTimeMs) {
          StartTimeMs = other.StartTimeMs;
        }
        if (other.HasPlayingInIgr) {
          PlayingInIgr = other.PlayingInIgr;
        }
        if (other.HasHasBenefactor) {
          HasBenefactor = other.HasBenefactor;
        }
        if (other.HasUsingParentalControls) {
          UsingParentalControls = other.UsingParentalControls;
        }
        if (other.HasLocation) {
          Location = other.Location;
        }
        if (other.HasIpAddress) {
          IpAddress = other.IpAddress;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sessionInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sessionInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStartTimeMs = input.ReadUInt64(ref result.startTimeMs_);
              break;
            }
            case 16: {
              result.hasPlayingInIgr = input.ReadBool(ref result.playingInIgr_);
              break;
            }
            case 24: {
              result.hasHasBenefactor = input.ReadBool(ref result.hasBenefactor_);
              break;
            }
            case 32: {
              result.hasUsingParentalControls = input.ReadBool(ref result.usingParentalControls_);
              break;
            }
            case 42: {
              result.hasLocation = input.ReadString(ref result.location_);
              break;
            }
            case 50: {
              result.hasIpAddress = input.ReadString(ref result.ipAddress_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStartTimeMs {
        get { return result.hasStartTimeMs; }
      }
      public ulong StartTimeMs {
        get { return result.StartTimeMs; }
        set { SetStartTimeMs(value); }
      }
      public Builder SetStartTimeMs(ulong value) {
        PrepareBuilder();
        result.hasStartTimeMs = true;
        result.startTimeMs_ = value;
        return this;
      }
      public Builder ClearStartTimeMs() {
        PrepareBuilder();
        result.hasStartTimeMs = false;
        result.startTimeMs_ = 0UL;
        return this;
      }
      
      public bool HasPlayingInIgr {
        get { return result.hasPlayingInIgr; }
      }
      public bool PlayingInIgr {
        get { return result.PlayingInIgr; }
        set { SetPlayingInIgr(value); }
      }
      public Builder SetPlayingInIgr(bool value) {
        PrepareBuilder();
        result.hasPlayingInIgr = true;
        result.playingInIgr_ = value;
        return this;
      }
      public Builder ClearPlayingInIgr() {
        PrepareBuilder();
        result.hasPlayingInIgr = false;
        result.playingInIgr_ = false;
        return this;
      }
      
      public bool HasHasBenefactor {
        get { return result.hasHasBenefactor; }
      }
      public bool HasBenefactor {
        get { return result.HasBenefactor; }
        set { SetHasBenefactor(value); }
      }
      public Builder SetHasBenefactor(bool value) {
        PrepareBuilder();
        result.hasHasBenefactor = true;
        result.hasBenefactor_ = value;
        return this;
      }
      public Builder ClearHasBenefactor() {
        PrepareBuilder();
        result.hasHasBenefactor = false;
        result.hasBenefactor_ = false;
        return this;
      }
      
      public bool HasUsingParentalControls {
        get { return result.hasUsingParentalControls; }
      }
      public bool UsingParentalControls {
        get { return result.UsingParentalControls; }
        set { SetUsingParentalControls(value); }
      }
      public Builder SetUsingParentalControls(bool value) {
        PrepareBuilder();
        result.hasUsingParentalControls = true;
        result.usingParentalControls_ = value;
        return this;
      }
      public Builder ClearUsingParentalControls() {
        PrepareBuilder();
        result.hasUsingParentalControls = false;
        result.usingParentalControls_ = false;
        return this;
      }
      
      public bool HasLocation {
        get { return result.hasLocation; }
      }
      public string Location {
        get { return result.Location; }
        set { SetLocation(value); }
      }
      public Builder SetLocation(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocation = true;
        result.location_ = value;
        return this;
      }
      public Builder ClearLocation() {
        PrepareBuilder();
        result.hasLocation = false;
        result.location_ = "";
        return this;
      }
      
      public bool HasIpAddress {
        get { return result.hasIpAddress; }
      }
      public string IpAddress {
        get { return result.IpAddress; }
        set { SetIpAddress(value); }
      }
      public Builder SetIpAddress(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIpAddress = true;
        result.ipAddress_ = value;
        return this;
      }
      public Builder ClearIpAddress() {
        PrepareBuilder();
        result.hasIpAddress = false;
        result.ipAddress_ = "";
        return this;
      }
    }
    static SessionInfo() {
      object.ReferenceEquals(global::D3.OnlineServiceServer.OnlineServiceServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CachedSessionData : pb::GeneratedMessage<CachedSessionData, CachedSessionData.Builder> {
    private CachedSessionData() { }
    private static readonly CachedSessionData defaultInstance = new CachedSessionData().MakeReadOnly();
    private static readonly string[] _cachedSessionDataFieldNames = new string[] { "defiler_licenses", "defiler_updated_time", "last_expiration_check", "session_info", "session_updated_time", "store_licenses", "store_updated_time" };
    private static readonly uint[] _cachedSessionDataFieldTags = new uint[] { 18, 88, 104, 26, 96, 10, 80 };
    public static CachedSessionData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CachedSessionData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CachedSessionData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineServiceServer.OnlineServiceServer.internal__static_D3_OnlineServiceServer_CachedSessionData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CachedSessionData, CachedSessionData.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineServiceServer.OnlineServiceServer.internal__static_D3_OnlineServiceServer_CachedSessionData__FieldAccessorTable; }
    }
    
    public const int StoreLicensesFieldNumber = 1;
    private bool hasStoreLicenses;
    private global::D3.OnlineServiceServer.Licenses storeLicenses_;
    public bool HasStoreLicenses {
      get { return hasStoreLicenses; }
    }
    public global::D3.OnlineServiceServer.Licenses StoreLicenses {
      get { return storeLicenses_ ?? global::D3.OnlineServiceServer.Licenses.DefaultInstance; }
    }
    
    public const int DefilerLicensesFieldNumber = 2;
    private bool hasDefilerLicenses;
    private global::D3.OnlineServiceServer.Licenses defilerLicenses_;
    [global::System.ObsoleteAttribute()]
    public bool HasDefilerLicenses {
      get { return hasDefilerLicenses; }
    }
    [global::System.ObsoleteAttribute()]
    public global::D3.OnlineServiceServer.Licenses DefilerLicenses {
      get { return defilerLicenses_ ?? global::D3.OnlineServiceServer.Licenses.DefaultInstance; }
    }
    
    public const int SessionInfoFieldNumber = 3;
    private bool hasSessionInfo;
    private global::D3.OnlineServiceServer.SessionInfo sessionInfo_;
    public bool HasSessionInfo {
      get { return hasSessionInfo; }
    }
    public global::D3.OnlineServiceServer.SessionInfo SessionInfo {
      get { return sessionInfo_ ?? global::D3.OnlineServiceServer.SessionInfo.DefaultInstance; }
    }
    
    public const int StoreUpdatedTimeFieldNumber = 10;
    private bool hasStoreUpdatedTime;
    private ulong storeUpdatedTime_;
    public bool HasStoreUpdatedTime {
      get { return hasStoreUpdatedTime; }
    }
    public ulong StoreUpdatedTime {
      get { return storeUpdatedTime_; }
    }
    
    public const int DefilerUpdatedTimeFieldNumber = 11;
    private bool hasDefilerUpdatedTime;
    private ulong defilerUpdatedTime_;
    [global::System.ObsoleteAttribute()]
    public bool HasDefilerUpdatedTime {
      get { return hasDefilerUpdatedTime; }
    }
    [global::System.ObsoleteAttribute()]
    public ulong DefilerUpdatedTime {
      get { return defilerUpdatedTime_; }
    }
    
    public const int SessionUpdatedTimeFieldNumber = 12;
    private bool hasSessionUpdatedTime;
    private ulong sessionUpdatedTime_;
    public bool HasSessionUpdatedTime {
      get { return hasSessionUpdatedTime; }
    }
    public ulong SessionUpdatedTime {
      get { return sessionUpdatedTime_; }
    }
    
    public const int LastExpirationCheckFieldNumber = 13;
    private bool hasLastExpirationCheck;
    private ulong lastExpirationCheck_;
    public bool HasLastExpirationCheck {
      get { return hasLastExpirationCheck; }
    }
    public ulong LastExpirationCheck {
      get { return lastExpirationCheck_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasStoreLicenses) {
          if (!StoreLicenses.IsInitialized) return false;
        }
        if (HasDefilerLicenses) {
          if (!DefilerLicenses.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cachedSessionDataFieldNames;
      if (hasStoreLicenses) {
        output.WriteMessage(1, field_names[5], StoreLicenses);
      }
      if (hasDefilerLicenses) {
        output.WriteMessage(2, field_names[0], DefilerLicenses);
      }
      if (hasSessionInfo) {
        output.WriteMessage(3, field_names[3], SessionInfo);
      }
      if (hasStoreUpdatedTime) {
        output.WriteUInt64(10, field_names[6], StoreUpdatedTime);
      }
      if (hasDefilerUpdatedTime) {
        output.WriteUInt64(11, field_names[1], DefilerUpdatedTime);
      }
      if (hasSessionUpdatedTime) {
        output.WriteUInt64(12, field_names[4], SessionUpdatedTime);
      }
      if (hasLastExpirationCheck) {
        output.WriteUInt64(13, field_names[2], LastExpirationCheck);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStoreLicenses) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, StoreLicenses);
        }
        if (hasDefilerLicenses) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, DefilerLicenses);
        }
        if (hasSessionInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, SessionInfo);
        }
        if (hasStoreUpdatedTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(10, StoreUpdatedTime);
        }
        if (hasDefilerUpdatedTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(11, DefilerUpdatedTime);
        }
        if (hasSessionUpdatedTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(12, SessionUpdatedTime);
        }
        if (hasLastExpirationCheck) {
          size += pb::CodedOutputStream.ComputeUInt64Size(13, LastExpirationCheck);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CachedSessionData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CachedSessionData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CachedSessionData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CachedSessionData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CachedSessionData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CachedSessionData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CachedSessionData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CachedSessionData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CachedSessionData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CachedSessionData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CachedSessionData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CachedSessionData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CachedSessionData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CachedSessionData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CachedSessionData result;
      
      private CachedSessionData PrepareBuilder() {
        if (resultIsReadOnly) {
          CachedSessionData original = result;
          result = new CachedSessionData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CachedSessionData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineServiceServer.CachedSessionData.Descriptor; }
      }
      
      public override CachedSessionData DefaultInstanceForType {
        get { return global::D3.OnlineServiceServer.CachedSessionData.DefaultInstance; }
      }
      
      public override CachedSessionData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CachedSessionData) {
          return MergeFrom((CachedSessionData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CachedSessionData other) {
        if (other == global::D3.OnlineServiceServer.CachedSessionData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStoreLicenses) {
          MergeStoreLicenses(other.StoreLicenses);
        }
        if (other.HasDefilerLicenses) {
          MergeDefilerLicenses(other.DefilerLicenses);
        }
        if (other.HasSessionInfo) {
          MergeSessionInfo(other.SessionInfo);
        }
        if (other.HasStoreUpdatedTime) {
          StoreUpdatedTime = other.StoreUpdatedTime;
        }
        if (other.HasDefilerUpdatedTime) {
          DefilerUpdatedTime = other.DefilerUpdatedTime;
        }
        if (other.HasSessionUpdatedTime) {
          SessionUpdatedTime = other.SessionUpdatedTime;
        }
        if (other.HasLastExpirationCheck) {
          LastExpirationCheck = other.LastExpirationCheck;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cachedSessionDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cachedSessionDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineServiceServer.Licenses.Builder subBuilder = global::D3.OnlineServiceServer.Licenses.CreateBuilder();
              if (result.hasStoreLicenses) {
                subBuilder.MergeFrom(StoreLicenses);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              StoreLicenses = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.OnlineServiceServer.Licenses.Builder subBuilder = global::D3.OnlineServiceServer.Licenses.CreateBuilder();
              if (result.hasDefilerLicenses) {
                subBuilder.MergeFrom(DefilerLicenses);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DefilerLicenses = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.OnlineServiceServer.SessionInfo.Builder subBuilder = global::D3.OnlineServiceServer.SessionInfo.CreateBuilder();
              if (result.hasSessionInfo) {
                subBuilder.MergeFrom(SessionInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SessionInfo = subBuilder.BuildPartial();
              break;
            }
            case 80: {
              result.hasStoreUpdatedTime = input.ReadUInt64(ref result.storeUpdatedTime_);
              break;
            }
            case 88: {
              result.hasDefilerUpdatedTime = input.ReadUInt64(ref result.defilerUpdatedTime_);
              break;
            }
            case 96: {
              result.hasSessionUpdatedTime = input.ReadUInt64(ref result.sessionUpdatedTime_);
              break;
            }
            case 104: {
              result.hasLastExpirationCheck = input.ReadUInt64(ref result.lastExpirationCheck_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStoreLicenses {
       get { return result.hasStoreLicenses; }
      }
      public global::D3.OnlineServiceServer.Licenses StoreLicenses {
        get { return result.StoreLicenses; }
        set { SetStoreLicenses(value); }
      }
      public Builder SetStoreLicenses(global::D3.OnlineServiceServer.Licenses value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStoreLicenses = true;
        result.storeLicenses_ = value;
        return this;
      }
      public Builder SetStoreLicenses(global::D3.OnlineServiceServer.Licenses.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStoreLicenses = true;
        result.storeLicenses_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStoreLicenses(global::D3.OnlineServiceServer.Licenses value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStoreLicenses &&
            result.storeLicenses_ != global::D3.OnlineServiceServer.Licenses.DefaultInstance) {
            result.storeLicenses_ = global::D3.OnlineServiceServer.Licenses.CreateBuilder(result.storeLicenses_).MergeFrom(value).BuildPartial();
        } else {
          result.storeLicenses_ = value;
        }
        result.hasStoreLicenses = true;
        return this;
      }
      public Builder ClearStoreLicenses() {
        PrepareBuilder();
        result.hasStoreLicenses = false;
        result.storeLicenses_ = null;
        return this;
      }
      
      [global::System.ObsoleteAttribute()]
      public bool HasDefilerLicenses {
       get { return result.hasDefilerLicenses; }
      }
      [global::System.ObsoleteAttribute()]
      public global::D3.OnlineServiceServer.Licenses DefilerLicenses {
        get { return result.DefilerLicenses; }
        set { SetDefilerLicenses(value); }
      }
      [global::System.ObsoleteAttribute()]
      public Builder SetDefilerLicenses(global::D3.OnlineServiceServer.Licenses value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDefilerLicenses = true;
        result.defilerLicenses_ = value;
        return this;
      }
      [global::System.ObsoleteAttribute()]
      public Builder SetDefilerLicenses(global::D3.OnlineServiceServer.Licenses.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDefilerLicenses = true;
        result.defilerLicenses_ = builderForValue.Build();
        return this;
      }
      [global::System.ObsoleteAttribute()]
      public Builder MergeDefilerLicenses(global::D3.OnlineServiceServer.Licenses value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDefilerLicenses &&
            result.defilerLicenses_ != global::D3.OnlineServiceServer.Licenses.DefaultInstance) {
            result.defilerLicenses_ = global::D3.OnlineServiceServer.Licenses.CreateBuilder(result.defilerLicenses_).MergeFrom(value).BuildPartial();
        } else {
          result.defilerLicenses_ = value;
        }
        result.hasDefilerLicenses = true;
        return this;
      }
      [global::System.ObsoleteAttribute()]
      public Builder ClearDefilerLicenses() {
        PrepareBuilder();
        result.hasDefilerLicenses = false;
        result.defilerLicenses_ = null;
        return this;
      }
      
      public bool HasSessionInfo {
       get { return result.hasSessionInfo; }
      }
      public global::D3.OnlineServiceServer.SessionInfo SessionInfo {
        get { return result.SessionInfo; }
        set { SetSessionInfo(value); }
      }
      public Builder SetSessionInfo(global::D3.OnlineServiceServer.SessionInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionInfo = true;
        result.sessionInfo_ = value;
        return this;
      }
      public Builder SetSessionInfo(global::D3.OnlineServiceServer.SessionInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSessionInfo = true;
        result.sessionInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSessionInfo(global::D3.OnlineServiceServer.SessionInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSessionInfo &&
            result.sessionInfo_ != global::D3.OnlineServiceServer.SessionInfo.DefaultInstance) {
            result.sessionInfo_ = global::D3.OnlineServiceServer.SessionInfo.CreateBuilder(result.sessionInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.sessionInfo_ = value;
        }
        result.hasSessionInfo = true;
        return this;
      }
      public Builder ClearSessionInfo() {
        PrepareBuilder();
        result.hasSessionInfo = false;
        result.sessionInfo_ = null;
        return this;
      }
      
      public bool HasStoreUpdatedTime {
        get { return result.hasStoreUpdatedTime; }
      }
      public ulong StoreUpdatedTime {
        get { return result.StoreUpdatedTime; }
        set { SetStoreUpdatedTime(value); }
      }
      public Builder SetStoreUpdatedTime(ulong value) {
        PrepareBuilder();
        result.hasStoreUpdatedTime = true;
        result.storeUpdatedTime_ = value;
        return this;
      }
      public Builder ClearStoreUpdatedTime() {
        PrepareBuilder();
        result.hasStoreUpdatedTime = false;
        result.storeUpdatedTime_ = 0UL;
        return this;
      }
      
      [global::System.ObsoleteAttribute()]
      public bool HasDefilerUpdatedTime {
        get { return result.hasDefilerUpdatedTime; }
      }
      [global::System.ObsoleteAttribute()]
      public ulong DefilerUpdatedTime {
        get { return result.DefilerUpdatedTime; }
        set { SetDefilerUpdatedTime(value); }
      }
      [global::System.ObsoleteAttribute()]
      public Builder SetDefilerUpdatedTime(ulong value) {
        PrepareBuilder();
        result.hasDefilerUpdatedTime = true;
        result.defilerUpdatedTime_ = value;
        return this;
      }
      [global::System.ObsoleteAttribute()]
      public Builder ClearDefilerUpdatedTime() {
        PrepareBuilder();
        result.hasDefilerUpdatedTime = false;
        result.defilerUpdatedTime_ = 0UL;
        return this;
      }
      
      public bool HasSessionUpdatedTime {
        get { return result.hasSessionUpdatedTime; }
      }
      public ulong SessionUpdatedTime {
        get { return result.SessionUpdatedTime; }
        set { SetSessionUpdatedTime(value); }
      }
      public Builder SetSessionUpdatedTime(ulong value) {
        PrepareBuilder();
        result.hasSessionUpdatedTime = true;
        result.sessionUpdatedTime_ = value;
        return this;
      }
      public Builder ClearSessionUpdatedTime() {
        PrepareBuilder();
        result.hasSessionUpdatedTime = false;
        result.sessionUpdatedTime_ = 0UL;
        return this;
      }
      
      public bool HasLastExpirationCheck {
        get { return result.hasLastExpirationCheck; }
      }
      public ulong LastExpirationCheck {
        get { return result.LastExpirationCheck; }
        set { SetLastExpirationCheck(value); }
      }
      public Builder SetLastExpirationCheck(ulong value) {
        PrepareBuilder();
        result.hasLastExpirationCheck = true;
        result.lastExpirationCheck_ = value;
        return this;
      }
      public Builder ClearLastExpirationCheck() {
        PrepareBuilder();
        result.hasLastExpirationCheck = false;
        result.lastExpirationCheck_ = 0UL;
        return this;
      }
    }
    static CachedSessionData() {
      object.ReferenceEquals(global::D3.OnlineServiceServer.OnlineServiceServer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConsoleSeasonData : pb::GeneratedMessage<ConsoleSeasonData, ConsoleSeasonData.Builder> {
    private ConsoleSeasonData() { }
    private static readonly ConsoleSeasonData defaultInstance = new ConsoleSeasonData().MakeReadOnly();
    private static readonly string[] _consoleSeasonDataFieldNames = new string[] { "config_hash", "current_season" };
    private static readonly uint[] _consoleSeasonDataFieldTags = new uint[] { 16, 8 };
    public static ConsoleSeasonData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConsoleSeasonData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConsoleSeasonData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineServiceServer.OnlineServiceServer.internal__static_D3_OnlineServiceServer_ConsoleSeasonData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConsoleSeasonData, ConsoleSeasonData.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineServiceServer.OnlineServiceServer.internal__static_D3_OnlineServiceServer_ConsoleSeasonData__FieldAccessorTable; }
    }
    
    public const int CurrentSeasonFieldNumber = 1;
    private bool hasCurrentSeason;
    private uint currentSeason_;
    public bool HasCurrentSeason {
      get { return hasCurrentSeason; }
    }
    public uint CurrentSeason {
      get { return currentSeason_; }
    }
    
    public const int ConfigHashFieldNumber = 2;
    private bool hasConfigHash;
    private ulong configHash_;
    public bool HasConfigHash {
      get { return hasConfigHash; }
    }
    public ulong ConfigHash {
      get { return configHash_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _consoleSeasonDataFieldNames;
      if (hasCurrentSeason) {
        output.WriteUInt32(1, field_names[1], CurrentSeason);
      }
      if (hasConfigHash) {
        output.WriteUInt64(2, field_names[0], ConfigHash);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCurrentSeason) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, CurrentSeason);
        }
        if (hasConfigHash) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, ConfigHash);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConsoleSeasonData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleSeasonData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleSeasonData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleSeasonData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleSeasonData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleSeasonData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConsoleSeasonData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConsoleSeasonData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConsoleSeasonData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleSeasonData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConsoleSeasonData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConsoleSeasonData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConsoleSeasonData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConsoleSeasonData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConsoleSeasonData result;
      
      private ConsoleSeasonData PrepareBuilder() {
        if (resultIsReadOnly) {
          ConsoleSeasonData original = result;
          result = new ConsoleSeasonData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConsoleSeasonData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineServiceServer.ConsoleSeasonData.Descriptor; }
      }
      
      public override ConsoleSeasonData DefaultInstanceForType {
        get { return global::D3.OnlineServiceServer.ConsoleSeasonData.DefaultInstance; }
      }
      
      public override ConsoleSeasonData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConsoleSeasonData) {
          return MergeFrom((ConsoleSeasonData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConsoleSeasonData other) {
        if (other == global::D3.OnlineServiceServer.ConsoleSeasonData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurrentSeason) {
          CurrentSeason = other.CurrentSeason;
        }
        if (other.HasConfigHash) {
          ConfigHash = other.ConfigHash;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_consoleSeasonDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _consoleSeasonDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCurrentSeason = input.ReadUInt32(ref result.currentSeason_);
              break;
            }
            case 16: {
              result.hasConfigHash = input.ReadUInt64(ref result.configHash_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCurrentSeason {
        get { return result.hasCurrentSeason; }
      }
      public uint CurrentSeason {
        get { return result.CurrentSeason; }
        set { SetCurrentSeason(value); }
      }
      public Builder SetCurrentSeason(uint value) {
        PrepareBuilder();
        result.hasCurrentSeason = true;
        result.currentSeason_ = value;
        return this;
      }
      public Builder ClearCurrentSeason() {
        PrepareBuilder();
        result.hasCurrentSeason = false;
        result.currentSeason_ = 0;
        return this;
      }
      
      public bool HasConfigHash {
        get { return result.hasConfigHash; }
      }
      public ulong ConfigHash {
        get { return result.ConfigHash; }
        set { SetConfigHash(value); }
      }
      public Builder SetConfigHash(ulong value) {
        PrepareBuilder();
        result.hasConfigHash = true;
        result.configHash_ = value;
        return this;
      }
      public Builder ClearConfigHash() {
        PrepareBuilder();
        result.hasConfigHash = false;
        result.configHash_ = 0UL;
        return this;
      }
    }
    static ConsoleSeasonData() {
      object.ReferenceEquals(global::D3.OnlineServiceServer.OnlineServiceServer.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
