// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.CosmeticItems {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class CosmeticItems {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_D3_CosmeticItems_CosmeticItem__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.CosmeticItems.CosmeticItem, global::D3.CosmeticItems.CosmeticItem.Builder> internal__static_D3_CosmeticItems_CosmeticItem__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_CosmeticItems_CosmeticItems__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.CosmeticItems.CosmeticItems, global::D3.CosmeticItems.CosmeticItems.Builder> internal__static_D3_CosmeticItems_CosmeticItems__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_CosmeticItems_CosmeticItemSavedData__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.CosmeticItems.CosmeticItemSavedData, global::D3.CosmeticItems.CosmeticItemSavedData.Builder> internal__static_D3_CosmeticItems_CosmeticItemSavedData__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static CosmeticItems() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChNDb3NtZXRpY0l0ZW1zLnByb3RvEhBEMy5Db3NtZXRpY0l0ZW1zGhFHYW1l" + 
            "QmFsYW5jZS5wcm90byJLCgxDb3NtZXRpY0l0ZW0SEgoEZ2JpZBgBIAEoD1IE" + 
            "Z2JpZBInCg9leHBpcmF0aW9uX3RpbWUYAiABKANSDmV4cGlyYXRpb25UaW1l" + 
            "IlYKDUNvc21ldGljSXRlbXMSRQoOY29zbWV0aWNfaXRlbXMYASADKAsyHi5E" + 
            "My5Db3NtZXRpY0l0ZW1zLkNvc21ldGljSXRlbVINY29zbWV0aWNJdGVtcyJi" + 
            "ChVDb3NtZXRpY0l0ZW1TYXZlZERhdGESSQoOY29zbWV0aWNfaXRlbXMYASAB" + 
            "KAsyIi5EMy5HYW1lQmFsYW5jZS5CaXRQYWNrZWRHYmlkQXJyYXlSDWNvc21l" + 
            "dGljSXRlbXM=");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_D3_CosmeticItems_CosmeticItem__Descriptor = Descriptor.MessageTypes[0];
          internal__static_D3_CosmeticItems_CosmeticItem__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.CosmeticItems.CosmeticItem, global::D3.CosmeticItems.CosmeticItem.Builder>(internal__static_D3_CosmeticItems_CosmeticItem__Descriptor,
                  new string[] { "Gbid", "ExpirationTime", });
          internal__static_D3_CosmeticItems_CosmeticItems__Descriptor = Descriptor.MessageTypes[1];
          internal__static_D3_CosmeticItems_CosmeticItems__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.CosmeticItems.CosmeticItems, global::D3.CosmeticItems.CosmeticItems.Builder>(internal__static_D3_CosmeticItems_CosmeticItems__Descriptor,
                  new string[] { "CosmeticItems_", });
          internal__static_D3_CosmeticItems_CosmeticItemSavedData__Descriptor = Descriptor.MessageTypes[2];
          internal__static_D3_CosmeticItems_CosmeticItemSavedData__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.CosmeticItems.CosmeticItemSavedData, global::D3.CosmeticItems.CosmeticItemSavedData.Builder>(internal__static_D3_CosmeticItems_CosmeticItemSavedData__Descriptor,
                  new string[] { "CosmeticItems", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::D3.GameBalance.GameBalance.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::D3.GameBalance.GameBalance.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CosmeticItem : pb::GeneratedMessage<CosmeticItem, CosmeticItem.Builder> {
    private CosmeticItem() { }
    private static readonly CosmeticItem defaultInstance = new CosmeticItem().MakeReadOnly();
    private static readonly string[] _cosmeticItemFieldNames = new string[] { "expiration_time", "gbid" };
    private static readonly uint[] _cosmeticItemFieldTags = new uint[] { 16, 13 };
    public static CosmeticItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CosmeticItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CosmeticItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.CosmeticItems.Proto.CosmeticItems.internal__static_D3_CosmeticItems_CosmeticItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CosmeticItem, CosmeticItem.Builder> InternalFieldAccessors {
      get { return global::D3.CosmeticItems.Proto.CosmeticItems.internal__static_D3_CosmeticItems_CosmeticItem__FieldAccessorTable; }
    }
    
    public const int GbidFieldNumber = 1;
    private bool hasGbid;
    private int gbid_;
    public bool HasGbid {
      get { return hasGbid; }
    }
    public int Gbid {
      get { return gbid_; }
    }
    
    public const int ExpirationTimeFieldNumber = 2;
    private bool hasExpirationTime;
    private long expirationTime_;
    public bool HasExpirationTime {
      get { return hasExpirationTime; }
    }
    public long ExpirationTime {
      get { return expirationTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cosmeticItemFieldNames;
      if (hasGbid) {
        output.WriteSFixed32(1, field_names[1], Gbid);
      }
      if (hasExpirationTime) {
        output.WriteInt64(2, field_names[0], ExpirationTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGbid) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, Gbid);
        }
        if (hasExpirationTime) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, ExpirationTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CosmeticItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CosmeticItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CosmeticItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CosmeticItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CosmeticItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CosmeticItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CosmeticItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CosmeticItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CosmeticItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CosmeticItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CosmeticItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CosmeticItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CosmeticItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CosmeticItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CosmeticItem result;
      
      private CosmeticItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CosmeticItem original = result;
          result = new CosmeticItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CosmeticItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.CosmeticItems.CosmeticItem.Descriptor; }
      }
      
      public override CosmeticItem DefaultInstanceForType {
        get { return global::D3.CosmeticItems.CosmeticItem.DefaultInstance; }
      }
      
      public override CosmeticItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CosmeticItem) {
          return MergeFrom((CosmeticItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CosmeticItem other) {
        if (other == global::D3.CosmeticItems.CosmeticItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGbid) {
          Gbid = other.Gbid;
        }
        if (other.HasExpirationTime) {
          ExpirationTime = other.ExpirationTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cosmeticItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cosmeticItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasGbid = input.ReadSFixed32(ref result.gbid_);
              break;
            }
            case 16: {
              result.hasExpirationTime = input.ReadInt64(ref result.expirationTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGbid {
        get { return result.hasGbid; }
      }
      public int Gbid {
        get { return result.Gbid; }
        set { SetGbid(value); }
      }
      public Builder SetGbid(int value) {
        PrepareBuilder();
        result.hasGbid = true;
        result.gbid_ = value;
        return this;
      }
      public Builder ClearGbid() {
        PrepareBuilder();
        result.hasGbid = false;
        result.gbid_ = 0;
        return this;
      }
      
      public bool HasExpirationTime {
        get { return result.hasExpirationTime; }
      }
      public long ExpirationTime {
        get { return result.ExpirationTime; }
        set { SetExpirationTime(value); }
      }
      public Builder SetExpirationTime(long value) {
        PrepareBuilder();
        result.hasExpirationTime = true;
        result.expirationTime_ = value;
        return this;
      }
      public Builder ClearExpirationTime() {
        PrepareBuilder();
        result.hasExpirationTime = false;
        result.expirationTime_ = 0L;
        return this;
      }
    }
    static CosmeticItem() {
      object.ReferenceEquals(global::D3.CosmeticItems.Proto.CosmeticItems.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CosmeticItems : pb::GeneratedMessage<CosmeticItems, CosmeticItems.Builder> {
    private CosmeticItems() { }
    private static readonly CosmeticItems defaultInstance = new CosmeticItems().MakeReadOnly();
    private static readonly string[] _cosmeticItemsFieldNames = new string[] { "cosmetic_items" };
    private static readonly uint[] _cosmeticItemsFieldTags = new uint[] { 10 };
    public static CosmeticItems DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CosmeticItems DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CosmeticItems ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.CosmeticItems.Proto.CosmeticItems.internal__static_D3_CosmeticItems_CosmeticItems__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CosmeticItems, CosmeticItems.Builder> InternalFieldAccessors {
      get { return global::D3.CosmeticItems.Proto.CosmeticItems.internal__static_D3_CosmeticItems_CosmeticItems__FieldAccessorTable; }
    }
    
    public const int CosmeticItems_FieldNumber = 1;
    private pbc::PopsicleList<global::D3.CosmeticItems.CosmeticItem> cosmeticItems_ = new pbc::PopsicleList<global::D3.CosmeticItems.CosmeticItem>();
    public scg::IList<global::D3.CosmeticItems.CosmeticItem> CosmeticItems_List {
      get { return cosmeticItems_; }
    }
    public int CosmeticItems_Count {
      get { return cosmeticItems_.Count; }
    }
    public global::D3.CosmeticItems.CosmeticItem GetCosmeticItems_(int index) {
      return cosmeticItems_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cosmeticItemsFieldNames;
      if (cosmeticItems_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], cosmeticItems_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.CosmeticItems.CosmeticItem element in CosmeticItems_List) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CosmeticItems ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CosmeticItems ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CosmeticItems ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CosmeticItems ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CosmeticItems ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CosmeticItems ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CosmeticItems ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CosmeticItems ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CosmeticItems ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CosmeticItems ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CosmeticItems MakeReadOnly() {
      cosmeticItems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CosmeticItems prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CosmeticItems, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CosmeticItems cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CosmeticItems result;
      
      private CosmeticItems PrepareBuilder() {
        if (resultIsReadOnly) {
          CosmeticItems original = result;
          result = new CosmeticItems();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CosmeticItems MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.CosmeticItems.CosmeticItems.Descriptor; }
      }
      
      public override CosmeticItems DefaultInstanceForType {
        get { return global::D3.CosmeticItems.CosmeticItems.DefaultInstance; }
      }
      
      public override CosmeticItems BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CosmeticItems) {
          return MergeFrom((CosmeticItems) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CosmeticItems other) {
        if (other == global::D3.CosmeticItems.CosmeticItems.DefaultInstance) return this;
        PrepareBuilder();
        if (other.cosmeticItems_.Count != 0) {
          result.cosmeticItems_.Add(other.cosmeticItems_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cosmeticItemsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cosmeticItemsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.cosmeticItems_, global::D3.CosmeticItems.CosmeticItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.CosmeticItems.CosmeticItem> CosmeticItems_List {
        get { return PrepareBuilder().cosmeticItems_; }
      }
      public int CosmeticItems_Count {
        get { return result.CosmeticItems_Count; }
      }
      public global::D3.CosmeticItems.CosmeticItem GetCosmeticItems_(int index) {
        return result.GetCosmeticItems_(index);
      }
      public Builder SetCosmeticItems_(int index, global::D3.CosmeticItems.CosmeticItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cosmeticItems_[index] = value;
        return this;
      }
      public Builder SetCosmeticItems_(int index, global::D3.CosmeticItems.CosmeticItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cosmeticItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCosmeticItems_(global::D3.CosmeticItems.CosmeticItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cosmeticItems_.Add(value);
        return this;
      }
      public Builder AddCosmeticItems_(global::D3.CosmeticItems.CosmeticItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cosmeticItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCosmeticItems_(scg::IEnumerable<global::D3.CosmeticItems.CosmeticItem> values) {
        PrepareBuilder();
        result.cosmeticItems_.Add(values);
        return this;
      }
      public Builder ClearCosmeticItems_() {
        PrepareBuilder();
        result.cosmeticItems_.Clear();
        return this;
      }
    }
    static CosmeticItems() {
      object.ReferenceEquals(global::D3.CosmeticItems.Proto.CosmeticItems.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CosmeticItemSavedData : pb::GeneratedMessage<CosmeticItemSavedData, CosmeticItemSavedData.Builder> {
    private CosmeticItemSavedData() { }
    private static readonly CosmeticItemSavedData defaultInstance = new CosmeticItemSavedData().MakeReadOnly();
    private static readonly string[] _cosmeticItemSavedDataFieldNames = new string[] { "cosmetic_items" };
    private static readonly uint[] _cosmeticItemSavedDataFieldTags = new uint[] { 10 };
    public static CosmeticItemSavedData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CosmeticItemSavedData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CosmeticItemSavedData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.CosmeticItems.Proto.CosmeticItems.internal__static_D3_CosmeticItems_CosmeticItemSavedData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CosmeticItemSavedData, CosmeticItemSavedData.Builder> InternalFieldAccessors {
      get { return global::D3.CosmeticItems.Proto.CosmeticItems.internal__static_D3_CosmeticItems_CosmeticItemSavedData__FieldAccessorTable; }
    }
    
    public const int CosmeticItemsFieldNumber = 1;
    private bool hasCosmeticItems;
    private global::D3.GameBalance.BitPackedGbidArray cosmeticItems_;
    public bool HasCosmeticItems {
      get { return hasCosmeticItems; }
    }
    public global::D3.GameBalance.BitPackedGbidArray CosmeticItems {
      get { return cosmeticItems_ ?? global::D3.GameBalance.BitPackedGbidArray.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cosmeticItemSavedDataFieldNames;
      if (hasCosmeticItems) {
        output.WriteMessage(1, field_names[0], CosmeticItems);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCosmeticItems) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, CosmeticItems);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CosmeticItemSavedData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CosmeticItemSavedData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CosmeticItemSavedData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CosmeticItemSavedData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CosmeticItemSavedData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CosmeticItemSavedData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CosmeticItemSavedData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CosmeticItemSavedData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CosmeticItemSavedData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CosmeticItemSavedData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CosmeticItemSavedData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CosmeticItemSavedData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CosmeticItemSavedData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CosmeticItemSavedData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CosmeticItemSavedData result;
      
      private CosmeticItemSavedData PrepareBuilder() {
        if (resultIsReadOnly) {
          CosmeticItemSavedData original = result;
          result = new CosmeticItemSavedData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CosmeticItemSavedData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.CosmeticItems.CosmeticItemSavedData.Descriptor; }
      }
      
      public override CosmeticItemSavedData DefaultInstanceForType {
        get { return global::D3.CosmeticItems.CosmeticItemSavedData.DefaultInstance; }
      }
      
      public override CosmeticItemSavedData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CosmeticItemSavedData) {
          return MergeFrom((CosmeticItemSavedData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CosmeticItemSavedData other) {
        if (other == global::D3.CosmeticItems.CosmeticItemSavedData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCosmeticItems) {
          MergeCosmeticItems(other.CosmeticItems);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cosmeticItemSavedDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cosmeticItemSavedDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.GameBalance.BitPackedGbidArray.Builder subBuilder = global::D3.GameBalance.BitPackedGbidArray.CreateBuilder();
              if (result.hasCosmeticItems) {
                subBuilder.MergeFrom(CosmeticItems);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CosmeticItems = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCosmeticItems {
       get { return result.hasCosmeticItems; }
      }
      public global::D3.GameBalance.BitPackedGbidArray CosmeticItems {
        get { return result.CosmeticItems; }
        set { SetCosmeticItems(value); }
      }
      public Builder SetCosmeticItems(global::D3.GameBalance.BitPackedGbidArray value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCosmeticItems = true;
        result.cosmeticItems_ = value;
        return this;
      }
      public Builder SetCosmeticItems(global::D3.GameBalance.BitPackedGbidArray.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCosmeticItems = true;
        result.cosmeticItems_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCosmeticItems(global::D3.GameBalance.BitPackedGbidArray value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCosmeticItems &&
            result.cosmeticItems_ != global::D3.GameBalance.BitPackedGbidArray.DefaultInstance) {
            result.cosmeticItems_ = global::D3.GameBalance.BitPackedGbidArray.CreateBuilder(result.cosmeticItems_).MergeFrom(value).BuildPartial();
        } else {
          result.cosmeticItems_ = value;
        }
        result.hasCosmeticItems = true;
        return this;
      }
      public Builder ClearCosmeticItems() {
        PrepareBuilder();
        result.hasCosmeticItems = false;
        result.cosmeticItems_ = null;
        return this;
      }
    }
    static CosmeticItemSavedData() {
      object.ReferenceEquals(global::D3.CosmeticItems.Proto.CosmeticItems.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
