// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.ItemCrafting {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class ItemCrafting {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_ItemCrafting_CrafterData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.ItemCrafting.CrafterData, global::D3.ItemCrafting.CrafterData.Builder> internal__static_D3_ItemCrafting_CrafterData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_ItemCrafting_CrafterDevilsHandData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.ItemCrafting.CrafterDevilsHandData, global::D3.ItemCrafting.CrafterDevilsHandData.Builder> internal__static_D3_ItemCrafting_CrafterDevilsHandData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_ItemCrafting_CrafterSavedData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.ItemCrafting.CrafterSavedData, global::D3.ItemCrafting.CrafterSavedData.Builder> internal__static_D3_ItemCrafting_CrafterSavedData__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ItemCrafting() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChJJdGVtQ3JhZnRpbmcucHJvdG8SD0QzLkl0ZW1DcmFmdGluZxoRR2FtZUJh" + 
          "bGFuY2UucHJvdG8ijgIKC0NyYWZ0ZXJEYXRhEhgKB3JlY2lwZXMYASADKA9S" + 
          "B3JlY2lwZXMSQgodZGVwcmVjYXRlZF9hdmFpbGFibGVfZW5jaGFudHMYAiAD" + 
          "KA9SG2RlcHJlY2F0ZWRBdmFpbGFibGVFbmNoYW50cxIUCgVsZXZlbBgDIAIo" + 
          "BVIFbGV2ZWwSIQoMY29vbGRvd25fZW5kGAQgASgQUgtjb29sZG93bkVuZBIp" + 
          "ChByZWNpcGVzX2JpdGZpZWxkGAUgASgMUg9yZWNpcGVzQml0ZmllbGQSPQob" + 
          "Yml0ZmllbGRfbGVhZGluZ19udWxsX2J5dGVzGAYgASgFUhhiaXRmaWVsZExl" + 
          "YWRpbmdOdWxsQnl0ZXMiPAoVQ3JhZnRlckRldmlsc0hhbmREYXRhEiMKDXVu" + 
          "bG9ja2VkX3NldHMYASADKA9SDHVubG9ja2VkU2V0cyLlAgoQQ3JhZnRlclNh" + 
          "dmVkRGF0YRI/CgxjcmFmdGVyX2RhdGEYASADKAsyHC5EMy5JdGVtQ3JhZnRp" + 
          "bmcuQ3JhZnRlckRhdGFSC2NyYWZ0ZXJEYXRhEkcKDXRyYW5zbW9nX2RhdGEY" + 
          "AiABKAsyIi5EMy5HYW1lQmFsYW5jZS5CaXRQYWNrZWRHYmlkQXJyYXlSDHRy" + 
          "YW5zbW9nRGF0YRJlChtkZXByZWNhdGVkX2Rldmlsc19oYW5kX2RhdGEYAyAB" + 
          "KAsyJi5EMy5JdGVtQ3JhZnRpbmcuQ3JhZnRlckRldmlsc0hhbmREYXRhUhhk" + 
          "ZXByZWNhdGVkRGV2aWxzSGFuZERhdGESYAoaZXh0cmFjdGVkX2xlZ2VuZGFy" + 
          "aWVzX2RhdGEYBCABKAsyIi5EMy5HYW1lQmFsYW5jZS5CaXRQYWNrZWRHYmlk" + 
          "QXJyYXlSGGV4dHJhY3RlZExlZ2VuZGFyaWVzRGF0YQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_ItemCrafting_CrafterData__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_ItemCrafting_CrafterData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.ItemCrafting.CrafterData, global::D3.ItemCrafting.CrafterData.Builder>(internal__static_D3_ItemCrafting_CrafterData__Descriptor,
                new string[] { "Recipes", "DeprecatedAvailableEnchants", "Level", "CooldownEnd", "RecipesBitfield", "BitfieldLeadingNullBytes", });
        internal__static_D3_ItemCrafting_CrafterDevilsHandData__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_ItemCrafting_CrafterDevilsHandData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.ItemCrafting.CrafterDevilsHandData, global::D3.ItemCrafting.CrafterDevilsHandData.Builder>(internal__static_D3_ItemCrafting_CrafterDevilsHandData__Descriptor,
                new string[] { "UnlockedSets", });
        internal__static_D3_ItemCrafting_CrafterSavedData__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_ItemCrafting_CrafterSavedData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.ItemCrafting.CrafterSavedData, global::D3.ItemCrafting.CrafterSavedData.Builder>(internal__static_D3_ItemCrafting_CrafterSavedData__Descriptor,
                new string[] { "CrafterData", "TransmogData", "DeprecatedDevilsHandData", "ExtractedLegendariesData", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::D3.GameBalance.GameBalance.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.GameBalance.GameBalance.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CrafterData : pb::GeneratedMessage<CrafterData, CrafterData.Builder> {
    private CrafterData() { }
    private static readonly CrafterData defaultInstance = new CrafterData().MakeReadOnly();
    private static readonly string[] _crafterDataFieldNames = new string[] { "bitfield_leading_null_bytes", "cooldown_end", "deprecated_available_enchants", "level", "recipes", "recipes_bitfield" };
    private static readonly uint[] _crafterDataFieldTags = new uint[] { 48, 33, 21, 24, 13, 42 };
    public static CrafterData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CrafterData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CrafterData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.ItemCrafting.ItemCrafting.internal__static_D3_ItemCrafting_CrafterData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CrafterData, CrafterData.Builder> InternalFieldAccessors {
      get { return global::D3.ItemCrafting.ItemCrafting.internal__static_D3_ItemCrafting_CrafterData__FieldAccessorTable; }
    }
    
    public const int RecipesFieldNumber = 1;
    private pbc::PopsicleList<int> recipes_ = new pbc::PopsicleList<int>();
    public scg::IList<int> RecipesList {
      get { return pbc::Lists.AsReadOnly(recipes_); }
    }
    public int RecipesCount {
      get { return recipes_.Count; }
    }
    public int GetRecipes(int index) {
      return recipes_[index];
    }
    
    public const int DeprecatedAvailableEnchantsFieldNumber = 2;
    private pbc::PopsicleList<int> deprecatedAvailableEnchants_ = new pbc::PopsicleList<int>();
    public scg::IList<int> DeprecatedAvailableEnchantsList {
      get { return pbc::Lists.AsReadOnly(deprecatedAvailableEnchants_); }
    }
    public int DeprecatedAvailableEnchantsCount {
      get { return deprecatedAvailableEnchants_.Count; }
    }
    public int GetDeprecatedAvailableEnchants(int index) {
      return deprecatedAvailableEnchants_[index];
    }
    
    public const int LevelFieldNumber = 3;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int CooldownEndFieldNumber = 4;
    private bool hasCooldownEnd;
    private long cooldownEnd_;
    public bool HasCooldownEnd {
      get { return hasCooldownEnd; }
    }
    public long CooldownEnd {
      get { return cooldownEnd_; }
    }
    
    public const int RecipesBitfieldFieldNumber = 5;
    private bool hasRecipesBitfield;
    private pb::ByteString recipesBitfield_ = pb::ByteString.Empty;
    public bool HasRecipesBitfield {
      get { return hasRecipesBitfield; }
    }
    public pb::ByteString RecipesBitfield {
      get { return recipesBitfield_; }
    }
    
    public const int BitfieldLeadingNullBytesFieldNumber = 6;
    private bool hasBitfieldLeadingNullBytes;
    private int bitfieldLeadingNullBytes_;
    public bool HasBitfieldLeadingNullBytes {
      get { return hasBitfieldLeadingNullBytes; }
    }
    public int BitfieldLeadingNullBytes {
      get { return bitfieldLeadingNullBytes_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLevel) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _crafterDataFieldNames;
      if (recipes_.Count > 0) {
        output.WriteSFixed32Array(1, field_names[4], recipes_);
      }
      if (deprecatedAvailableEnchants_.Count > 0) {
        output.WriteSFixed32Array(2, field_names[2], deprecatedAvailableEnchants_);
      }
      if (hasLevel) {
        output.WriteInt32(3, field_names[3], Level);
      }
      if (hasCooldownEnd) {
        output.WriteSFixed64(4, field_names[1], CooldownEnd);
      }
      if (hasRecipesBitfield) {
        output.WriteBytes(5, field_names[5], RecipesBitfield);
      }
      if (hasBitfieldLeadingNullBytes) {
        output.WriteInt32(6, field_names[0], BitfieldLeadingNullBytes);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          dataSize = 4 * recipes_.Count;
          size += dataSize;
          size += 1 * recipes_.Count;
        }
        {
          int dataSize = 0;
          dataSize = 4 * deprecatedAvailableEnchants_.Count;
          size += dataSize;
          size += 1 * deprecatedAvailableEnchants_.Count;
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Level);
        }
        if (hasCooldownEnd) {
          size += pb::CodedOutputStream.ComputeSFixed64Size(4, CooldownEnd);
        }
        if (hasRecipesBitfield) {
          size += pb::CodedOutputStream.ComputeBytesSize(5, RecipesBitfield);
        }
        if (hasBitfieldLeadingNullBytes) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, BitfieldLeadingNullBytes);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CrafterData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CrafterData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CrafterData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CrafterData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CrafterData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CrafterData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CrafterData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CrafterData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CrafterData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CrafterData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CrafterData MakeReadOnly() {
      recipes_.MakeReadOnly();
      deprecatedAvailableEnchants_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CrafterData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CrafterData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CrafterData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CrafterData result;
      
      private CrafterData PrepareBuilder() {
        if (resultIsReadOnly) {
          CrafterData original = result;
          result = new CrafterData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CrafterData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.ItemCrafting.CrafterData.Descriptor; }
      }
      
      public override CrafterData DefaultInstanceForType {
        get { return global::D3.ItemCrafting.CrafterData.DefaultInstance; }
      }
      
      public override CrafterData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CrafterData) {
          return MergeFrom((CrafterData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CrafterData other) {
        if (other == global::D3.ItemCrafting.CrafterData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.recipes_.Count != 0) {
          result.recipes_.Add(other.recipes_);
        }
        if (other.deprecatedAvailableEnchants_.Count != 0) {
          result.deprecatedAvailableEnchants_.Add(other.deprecatedAvailableEnchants_);
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasCooldownEnd) {
          CooldownEnd = other.CooldownEnd;
        }
        if (other.HasRecipesBitfield) {
          RecipesBitfield = other.RecipesBitfield;
        }
        if (other.HasBitfieldLeadingNullBytes) {
          BitfieldLeadingNullBytes = other.BitfieldLeadingNullBytes;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_crafterDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _crafterDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 13: {
              input.ReadSFixed32Array(tag, field_name, result.recipes_);
              break;
            }
            case 18:
            case 21: {
              input.ReadSFixed32Array(tag, field_name, result.deprecatedAvailableEnchants_);
              break;
            }
            case 24: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 33: {
              result.hasCooldownEnd = input.ReadSFixed64(ref result.cooldownEnd_);
              break;
            }
            case 42: {
              result.hasRecipesBitfield = input.ReadBytes(ref result.recipesBitfield_);
              break;
            }
            case 48: {
              result.hasBitfieldLeadingNullBytes = input.ReadInt32(ref result.bitfieldLeadingNullBytes_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<int> RecipesList {
        get { return PrepareBuilder().recipes_; }
      }
      public int RecipesCount {
        get { return result.RecipesCount; }
      }
      public int GetRecipes(int index) {
        return result.GetRecipes(index);
      }
      public Builder SetRecipes(int index, int value) {
        PrepareBuilder();
        result.recipes_[index] = value;
        return this;
      }
      public Builder AddRecipes(int value) {
        PrepareBuilder();
        result.recipes_.Add(value);
        return this;
      }
      public Builder AddRangeRecipes(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.recipes_.Add(values);
        return this;
      }
      public Builder ClearRecipes() {
        PrepareBuilder();
        result.recipes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> DeprecatedAvailableEnchantsList {
        get { return PrepareBuilder().deprecatedAvailableEnchants_; }
      }
      public int DeprecatedAvailableEnchantsCount {
        get { return result.DeprecatedAvailableEnchantsCount; }
      }
      public int GetDeprecatedAvailableEnchants(int index) {
        return result.GetDeprecatedAvailableEnchants(index);
      }
      public Builder SetDeprecatedAvailableEnchants(int index, int value) {
        PrepareBuilder();
        result.deprecatedAvailableEnchants_[index] = value;
        return this;
      }
      public Builder AddDeprecatedAvailableEnchants(int value) {
        PrepareBuilder();
        result.deprecatedAvailableEnchants_.Add(value);
        return this;
      }
      public Builder AddRangeDeprecatedAvailableEnchants(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.deprecatedAvailableEnchants_.Add(values);
        return this;
      }
      public Builder ClearDeprecatedAvailableEnchants() {
        PrepareBuilder();
        result.deprecatedAvailableEnchants_.Clear();
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasCooldownEnd {
        get { return result.hasCooldownEnd; }
      }
      public long CooldownEnd {
        get { return result.CooldownEnd; }
        set { SetCooldownEnd(value); }
      }
      public Builder SetCooldownEnd(long value) {
        PrepareBuilder();
        result.hasCooldownEnd = true;
        result.cooldownEnd_ = value;
        return this;
      }
      public Builder ClearCooldownEnd() {
        PrepareBuilder();
        result.hasCooldownEnd = false;
        result.cooldownEnd_ = 0;
        return this;
      }
      
      public bool HasRecipesBitfield {
        get { return result.hasRecipesBitfield; }
      }
      public pb::ByteString RecipesBitfield {
        get { return result.RecipesBitfield; }
        set { SetRecipesBitfield(value); }
      }
      public Builder SetRecipesBitfield(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRecipesBitfield = true;
        result.recipesBitfield_ = value;
        return this;
      }
      public Builder ClearRecipesBitfield() {
        PrepareBuilder();
        result.hasRecipesBitfield = false;
        result.recipesBitfield_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasBitfieldLeadingNullBytes {
        get { return result.hasBitfieldLeadingNullBytes; }
      }
      public int BitfieldLeadingNullBytes {
        get { return result.BitfieldLeadingNullBytes; }
        set { SetBitfieldLeadingNullBytes(value); }
      }
      public Builder SetBitfieldLeadingNullBytes(int value) {
        PrepareBuilder();
        result.hasBitfieldLeadingNullBytes = true;
        result.bitfieldLeadingNullBytes_ = value;
        return this;
      }
      public Builder ClearBitfieldLeadingNullBytes() {
        PrepareBuilder();
        result.hasBitfieldLeadingNullBytes = false;
        result.bitfieldLeadingNullBytes_ = 0;
        return this;
      }
    }
    static CrafterData() {
      object.ReferenceEquals(global::D3.ItemCrafting.ItemCrafting.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CrafterDevilsHandData : pb::GeneratedMessage<CrafterDevilsHandData, CrafterDevilsHandData.Builder> {
    private CrafterDevilsHandData() { }
    private static readonly CrafterDevilsHandData defaultInstance = new CrafterDevilsHandData().MakeReadOnly();
    private static readonly string[] _crafterDevilsHandDataFieldNames = new string[] { "unlocked_sets" };
    private static readonly uint[] _crafterDevilsHandDataFieldTags = new uint[] { 13 };
    public static CrafterDevilsHandData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CrafterDevilsHandData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CrafterDevilsHandData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.ItemCrafting.ItemCrafting.internal__static_D3_ItemCrafting_CrafterDevilsHandData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CrafterDevilsHandData, CrafterDevilsHandData.Builder> InternalFieldAccessors {
      get { return global::D3.ItemCrafting.ItemCrafting.internal__static_D3_ItemCrafting_CrafterDevilsHandData__FieldAccessorTable; }
    }
    
    public const int UnlockedSetsFieldNumber = 1;
    private pbc::PopsicleList<int> unlockedSets_ = new pbc::PopsicleList<int>();
    public scg::IList<int> UnlockedSetsList {
      get { return pbc::Lists.AsReadOnly(unlockedSets_); }
    }
    public int UnlockedSetsCount {
      get { return unlockedSets_.Count; }
    }
    public int GetUnlockedSets(int index) {
      return unlockedSets_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _crafterDevilsHandDataFieldNames;
      if (unlockedSets_.Count > 0) {
        output.WriteSFixed32Array(1, field_names[0], unlockedSets_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          dataSize = 4 * unlockedSets_.Count;
          size += dataSize;
          size += 1 * unlockedSets_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CrafterDevilsHandData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CrafterDevilsHandData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CrafterDevilsHandData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CrafterDevilsHandData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CrafterDevilsHandData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CrafterDevilsHandData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CrafterDevilsHandData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CrafterDevilsHandData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CrafterDevilsHandData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CrafterDevilsHandData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CrafterDevilsHandData MakeReadOnly() {
      unlockedSets_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CrafterDevilsHandData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CrafterDevilsHandData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CrafterDevilsHandData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CrafterDevilsHandData result;
      
      private CrafterDevilsHandData PrepareBuilder() {
        if (resultIsReadOnly) {
          CrafterDevilsHandData original = result;
          result = new CrafterDevilsHandData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CrafterDevilsHandData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.ItemCrafting.CrafterDevilsHandData.Descriptor; }
      }
      
      public override CrafterDevilsHandData DefaultInstanceForType {
        get { return global::D3.ItemCrafting.CrafterDevilsHandData.DefaultInstance; }
      }
      
      public override CrafterDevilsHandData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CrafterDevilsHandData) {
          return MergeFrom((CrafterDevilsHandData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CrafterDevilsHandData other) {
        if (other == global::D3.ItemCrafting.CrafterDevilsHandData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.unlockedSets_.Count != 0) {
          result.unlockedSets_.Add(other.unlockedSets_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_crafterDevilsHandDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _crafterDevilsHandDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 13: {
              input.ReadSFixed32Array(tag, field_name, result.unlockedSets_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<int> UnlockedSetsList {
        get { return PrepareBuilder().unlockedSets_; }
      }
      public int UnlockedSetsCount {
        get { return result.UnlockedSetsCount; }
      }
      public int GetUnlockedSets(int index) {
        return result.GetUnlockedSets(index);
      }
      public Builder SetUnlockedSets(int index, int value) {
        PrepareBuilder();
        result.unlockedSets_[index] = value;
        return this;
      }
      public Builder AddUnlockedSets(int value) {
        PrepareBuilder();
        result.unlockedSets_.Add(value);
        return this;
      }
      public Builder AddRangeUnlockedSets(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.unlockedSets_.Add(values);
        return this;
      }
      public Builder ClearUnlockedSets() {
        PrepareBuilder();
        result.unlockedSets_.Clear();
        return this;
      }
    }
    static CrafterDevilsHandData() {
      object.ReferenceEquals(global::D3.ItemCrafting.ItemCrafting.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CrafterSavedData : pb::GeneratedMessage<CrafterSavedData, CrafterSavedData.Builder> {
    private CrafterSavedData() { }
    private static readonly CrafterSavedData defaultInstance = new CrafterSavedData().MakeReadOnly();
    private static readonly string[] _crafterSavedDataFieldNames = new string[] { "crafter_data", "deprecated_devils_hand_data", "extracted_legendaries_data", "transmog_data" };
    private static readonly uint[] _crafterSavedDataFieldTags = new uint[] { 10, 26, 34, 18 };
    public static CrafterSavedData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CrafterSavedData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CrafterSavedData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.ItemCrafting.ItemCrafting.internal__static_D3_ItemCrafting_CrafterSavedData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CrafterSavedData, CrafterSavedData.Builder> InternalFieldAccessors {
      get { return global::D3.ItemCrafting.ItemCrafting.internal__static_D3_ItemCrafting_CrafterSavedData__FieldAccessorTable; }
    }
    
    public const int CrafterDataFieldNumber = 1;
    private pbc::PopsicleList<global::D3.ItemCrafting.CrafterData> crafterData_ = new pbc::PopsicleList<global::D3.ItemCrafting.CrafterData>();
    public scg::IList<global::D3.ItemCrafting.CrafterData> CrafterDataList {
      get { return crafterData_; }
    }
    public int CrafterDataCount {
      get { return crafterData_.Count; }
    }
    public global::D3.ItemCrafting.CrafterData GetCrafterData(int index) {
      return crafterData_[index];
    }
    
    public const int TransmogDataFieldNumber = 2;
    private bool hasTransmogData;
    private global::D3.GameBalance.BitPackedGbidArray transmogData_;
    public bool HasTransmogData {
      get { return hasTransmogData; }
    }
    public global::D3.GameBalance.BitPackedGbidArray TransmogData {
      get { return transmogData_ ?? global::D3.GameBalance.BitPackedGbidArray.DefaultInstance; }
    }
    
    public const int DeprecatedDevilsHandDataFieldNumber = 3;
    private bool hasDeprecatedDevilsHandData;
    private global::D3.ItemCrafting.CrafterDevilsHandData deprecatedDevilsHandData_;
    public bool HasDeprecatedDevilsHandData {
      get { return hasDeprecatedDevilsHandData; }
    }
    public global::D3.ItemCrafting.CrafterDevilsHandData DeprecatedDevilsHandData {
      get { return deprecatedDevilsHandData_ ?? global::D3.ItemCrafting.CrafterDevilsHandData.DefaultInstance; }
    }
    
    public const int ExtractedLegendariesDataFieldNumber = 4;
    private bool hasExtractedLegendariesData;
    private global::D3.GameBalance.BitPackedGbidArray extractedLegendariesData_;
    public bool HasExtractedLegendariesData {
      get { return hasExtractedLegendariesData; }
    }
    public global::D3.GameBalance.BitPackedGbidArray ExtractedLegendariesData {
      get { return extractedLegendariesData_ ?? global::D3.GameBalance.BitPackedGbidArray.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.ItemCrafting.CrafterData element in CrafterDataList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _crafterSavedDataFieldNames;
      if (crafterData_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], crafterData_);
      }
      if (hasTransmogData) {
        output.WriteMessage(2, field_names[3], TransmogData);
      }
      if (hasDeprecatedDevilsHandData) {
        output.WriteMessage(3, field_names[1], DeprecatedDevilsHandData);
      }
      if (hasExtractedLegendariesData) {
        output.WriteMessage(4, field_names[2], ExtractedLegendariesData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.ItemCrafting.CrafterData element in CrafterDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasTransmogData) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, TransmogData);
        }
        if (hasDeprecatedDevilsHandData) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, DeprecatedDevilsHandData);
        }
        if (hasExtractedLegendariesData) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, ExtractedLegendariesData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CrafterSavedData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CrafterSavedData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CrafterSavedData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CrafterSavedData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CrafterSavedData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CrafterSavedData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CrafterSavedData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CrafterSavedData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CrafterSavedData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CrafterSavedData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CrafterSavedData MakeReadOnly() {
      crafterData_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CrafterSavedData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CrafterSavedData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CrafterSavedData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CrafterSavedData result;
      
      private CrafterSavedData PrepareBuilder() {
        if (resultIsReadOnly) {
          CrafterSavedData original = result;
          result = new CrafterSavedData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CrafterSavedData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.ItemCrafting.CrafterSavedData.Descriptor; }
      }
      
      public override CrafterSavedData DefaultInstanceForType {
        get { return global::D3.ItemCrafting.CrafterSavedData.DefaultInstance; }
      }
      
      public override CrafterSavedData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CrafterSavedData) {
          return MergeFrom((CrafterSavedData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CrafterSavedData other) {
        if (other == global::D3.ItemCrafting.CrafterSavedData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.crafterData_.Count != 0) {
          result.crafterData_.Add(other.crafterData_);
        }
        if (other.HasTransmogData) {
          MergeTransmogData(other.TransmogData);
        }
        if (other.HasDeprecatedDevilsHandData) {
          MergeDeprecatedDevilsHandData(other.DeprecatedDevilsHandData);
        }
        if (other.HasExtractedLegendariesData) {
          MergeExtractedLegendariesData(other.ExtractedLegendariesData);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_crafterSavedDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _crafterSavedDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.crafterData_, global::D3.ItemCrafting.CrafterData.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              global::D3.GameBalance.BitPackedGbidArray.Builder subBuilder = global::D3.GameBalance.BitPackedGbidArray.CreateBuilder();
              if (result.hasTransmogData) {
                subBuilder.MergeFrom(TransmogData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TransmogData = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.ItemCrafting.CrafterDevilsHandData.Builder subBuilder = global::D3.ItemCrafting.CrafterDevilsHandData.CreateBuilder();
              if (result.hasDeprecatedDevilsHandData) {
                subBuilder.MergeFrom(DeprecatedDevilsHandData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DeprecatedDevilsHandData = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::D3.GameBalance.BitPackedGbidArray.Builder subBuilder = global::D3.GameBalance.BitPackedGbidArray.CreateBuilder();
              if (result.hasExtractedLegendariesData) {
                subBuilder.MergeFrom(ExtractedLegendariesData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ExtractedLegendariesData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.ItemCrafting.CrafterData> CrafterDataList {
        get { return PrepareBuilder().crafterData_; }
      }
      public int CrafterDataCount {
        get { return result.CrafterDataCount; }
      }
      public global::D3.ItemCrafting.CrafterData GetCrafterData(int index) {
        return result.GetCrafterData(index);
      }
      public Builder SetCrafterData(int index, global::D3.ItemCrafting.CrafterData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.crafterData_[index] = value;
        return this;
      }
      public Builder SetCrafterData(int index, global::D3.ItemCrafting.CrafterData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.crafterData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCrafterData(global::D3.ItemCrafting.CrafterData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.crafterData_.Add(value);
        return this;
      }
      public Builder AddCrafterData(global::D3.ItemCrafting.CrafterData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.crafterData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCrafterData(scg::IEnumerable<global::D3.ItemCrafting.CrafterData> values) {
        PrepareBuilder();
        result.crafterData_.Add(values);
        return this;
      }
      public Builder ClearCrafterData() {
        PrepareBuilder();
        result.crafterData_.Clear();
        return this;
      }
      
      public bool HasTransmogData {
       get { return result.hasTransmogData; }
      }
      public global::D3.GameBalance.BitPackedGbidArray TransmogData {
        get { return result.TransmogData; }
        set { SetTransmogData(value); }
      }
      public Builder SetTransmogData(global::D3.GameBalance.BitPackedGbidArray value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTransmogData = true;
        result.transmogData_ = value;
        return this;
      }
      public Builder SetTransmogData(global::D3.GameBalance.BitPackedGbidArray.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTransmogData = true;
        result.transmogData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTransmogData(global::D3.GameBalance.BitPackedGbidArray value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTransmogData &&
            result.transmogData_ != global::D3.GameBalance.BitPackedGbidArray.DefaultInstance) {
            result.transmogData_ = global::D3.GameBalance.BitPackedGbidArray.CreateBuilder(result.transmogData_).MergeFrom(value).BuildPartial();
        } else {
          result.transmogData_ = value;
        }
        result.hasTransmogData = true;
        return this;
      }
      public Builder ClearTransmogData() {
        PrepareBuilder();
        result.hasTransmogData = false;
        result.transmogData_ = null;
        return this;
      }
      
      public bool HasDeprecatedDevilsHandData {
       get { return result.hasDeprecatedDevilsHandData; }
      }
      public global::D3.ItemCrafting.CrafterDevilsHandData DeprecatedDevilsHandData {
        get { return result.DeprecatedDevilsHandData; }
        set { SetDeprecatedDevilsHandData(value); }
      }
      public Builder SetDeprecatedDevilsHandData(global::D3.ItemCrafting.CrafterDevilsHandData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeprecatedDevilsHandData = true;
        result.deprecatedDevilsHandData_ = value;
        return this;
      }
      public Builder SetDeprecatedDevilsHandData(global::D3.ItemCrafting.CrafterDevilsHandData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDeprecatedDevilsHandData = true;
        result.deprecatedDevilsHandData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDeprecatedDevilsHandData(global::D3.ItemCrafting.CrafterDevilsHandData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDeprecatedDevilsHandData &&
            result.deprecatedDevilsHandData_ != global::D3.ItemCrafting.CrafterDevilsHandData.DefaultInstance) {
            result.deprecatedDevilsHandData_ = global::D3.ItemCrafting.CrafterDevilsHandData.CreateBuilder(result.deprecatedDevilsHandData_).MergeFrom(value).BuildPartial();
        } else {
          result.deprecatedDevilsHandData_ = value;
        }
        result.hasDeprecatedDevilsHandData = true;
        return this;
      }
      public Builder ClearDeprecatedDevilsHandData() {
        PrepareBuilder();
        result.hasDeprecatedDevilsHandData = false;
        result.deprecatedDevilsHandData_ = null;
        return this;
      }
      
      public bool HasExtractedLegendariesData {
       get { return result.hasExtractedLegendariesData; }
      }
      public global::D3.GameBalance.BitPackedGbidArray ExtractedLegendariesData {
        get { return result.ExtractedLegendariesData; }
        set { SetExtractedLegendariesData(value); }
      }
      public Builder SetExtractedLegendariesData(global::D3.GameBalance.BitPackedGbidArray value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExtractedLegendariesData = true;
        result.extractedLegendariesData_ = value;
        return this;
      }
      public Builder SetExtractedLegendariesData(global::D3.GameBalance.BitPackedGbidArray.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasExtractedLegendariesData = true;
        result.extractedLegendariesData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeExtractedLegendariesData(global::D3.GameBalance.BitPackedGbidArray value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasExtractedLegendariesData &&
            result.extractedLegendariesData_ != global::D3.GameBalance.BitPackedGbidArray.DefaultInstance) {
            result.extractedLegendariesData_ = global::D3.GameBalance.BitPackedGbidArray.CreateBuilder(result.extractedLegendariesData_).MergeFrom(value).BuildPartial();
        } else {
          result.extractedLegendariesData_ = value;
        }
        result.hasExtractedLegendariesData = true;
        return this;
      }
      public Builder ClearExtractedLegendariesData() {
        PrepareBuilder();
        result.hasExtractedLegendariesData = false;
        result.extractedLegendariesData_ = null;
        return this;
      }
    }
    static CrafterSavedData() {
      object.ReferenceEquals(global::D3.ItemCrafting.ItemCrafting.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
