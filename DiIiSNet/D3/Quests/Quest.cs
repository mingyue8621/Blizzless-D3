// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Quests {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Quest {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Quests_QuestReward__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Quests.QuestReward, global::D3.Quests.QuestReward.Builder> internal__static_D3_Quests_QuestReward__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Quests_QuestStepComplete__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Quests.QuestStepComplete, global::D3.Quests.QuestStepComplete.Builder> internal__static_D3_Quests_QuestStepComplete__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Quests_QuestTieredRiftComplete__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Quests.QuestTieredRiftComplete, global::D3.Quests.QuestTieredRiftComplete.Builder> internal__static_D3_Quests_QuestTieredRiftComplete__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Quest() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgtRdWVzdC5wcm90bxIJRDMuUXVlc3RzGgtJdGVtcy5wcm90byK0AgoLUXVl" + 
          "c3RSZXdhcmQSIAoKeHBfZ3JhbnRlZBgBIAEoBDoBMFIJeHBHcmFudGVkEiQK" + 
          "DGdvbGRfZ3JhbnRlZBgCIAEoBToBMFILZ29sZEdyYW50ZWQSNgoMaXRlbV9n" + 
          "cmFudGVkGAMgASgLMhMuRDMuSXRlbXMuR2VuZXJhdG9yUgtpdGVtR3JhbnRl" + 
          "ZBIfCglzbm9fcXVlc3QYBCABKA86Ai0xUghzbm9RdWVzdBIpCgVpdGVtcxgF" + 
          "IAMoCzITLkQzLkl0ZW1zLkdlbmVyYXRvclIFaXRlbXMSKwoQYm9udXNfeHBf" + 
          "Z3JhbnRlZBgGIAEoBDoBMFIOYm9udXNYcEdyYW50ZWQSLAoQcGxhdGludW1f" + 
          "Z3JhbnRlZBgHIAEoDzoBMFIPcGxhdGludW1HcmFudGVkIq4BChFRdWVzdFN0" + 
          "ZXBDb21wbGV0ZRIqChFpc19xdWVzdF9jb21wbGV0ZRgBIAIoCFIPaXNRdWVz" + 
          "dENvbXBsZXRlEi4KBnJld2FyZBgCIAEoCzIWLkQzLlF1ZXN0cy5RdWVzdFJl" + 
          "d2FyZFIGcmV3YXJkEj0KF3dhc19yZXdhcmRfYXV0b2VxdWlwcGVkGAMgASgI" + 
          "OgVmYWxzZVIVd2FzUmV3YXJkQXV0b2VxdWlwcGVkIpcBChdRdWVzdFRpZXJl" + 
          "ZFJpZnRDb21wbGV0ZRItChNpc19maW5pc2hlZF9pbl90aW1lGAEgAigIUhBp" + 
          "c0ZpbmlzaGVkSW5UaW1lEh0KCnJpZnRfZGVwdGgYAiACKAVSCXJpZnREZXB0" + 
          "aBIuCgZyZXdhcmQYAyABKAsyFi5EMy5RdWVzdHMuUXVlc3RSZXdhcmRSBnJl" + 
          "d2FyZA==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Quests_QuestReward__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Quests_QuestReward__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Quests.QuestReward, global::D3.Quests.QuestReward.Builder>(internal__static_D3_Quests_QuestReward__Descriptor,
                new string[] { "XpGranted", "GoldGranted", "ItemGranted", "SnoQuest", "Items", "BonusXpGranted", "PlatinumGranted", });
        internal__static_D3_Quests_QuestStepComplete__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Quests_QuestStepComplete__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Quests.QuestStepComplete, global::D3.Quests.QuestStepComplete.Builder>(internal__static_D3_Quests_QuestStepComplete__Descriptor,
                new string[] { "IsQuestComplete", "Reward", "WasRewardAutoequipped", });
        internal__static_D3_Quests_QuestTieredRiftComplete__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_Quests_QuestTieredRiftComplete__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Quests.QuestTieredRiftComplete, global::D3.Quests.QuestTieredRiftComplete.Builder>(internal__static_D3_Quests_QuestTieredRiftComplete__Descriptor,
                new string[] { "IsFinishedInTime", "RiftDepth", "Reward", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::D3.Items.Items.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.Items.Items.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class QuestReward : pb::GeneratedMessage<QuestReward, QuestReward.Builder> {
    private QuestReward() { }
    private static readonly QuestReward defaultInstance = new QuestReward().MakeReadOnly();
    private static readonly string[] _questRewardFieldNames = new string[] { "bonus_xp_granted", "gold_granted", "item_granted", "items", "platinum_granted", "sno_quest", "xp_granted" };
    private static readonly uint[] _questRewardFieldTags = new uint[] { 48, 16, 26, 42, 61, 37, 8 };
    public static QuestReward DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QuestReward DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QuestReward ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Quests.Quest.internal__static_D3_Quests_QuestReward__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QuestReward, QuestReward.Builder> InternalFieldAccessors {
      get { return global::D3.Quests.Quest.internal__static_D3_Quests_QuestReward__FieldAccessorTable; }
    }
    
    public const int XpGrantedFieldNumber = 1;
    private bool hasXpGranted;
    private ulong xpGranted_;
    public bool HasXpGranted {
      get { return hasXpGranted; }
    }
    public ulong XpGranted {
      get { return xpGranted_; }
    }
    
    public const int GoldGrantedFieldNumber = 2;
    private bool hasGoldGranted;
    private int goldGranted_;
    public bool HasGoldGranted {
      get { return hasGoldGranted; }
    }
    public int GoldGranted {
      get { return goldGranted_; }
    }
    
    public const int ItemGrantedFieldNumber = 3;
    private bool hasItemGranted;
    private global::D3.Items.Generator itemGranted_;
    public bool HasItemGranted {
      get { return hasItemGranted; }
    }
    public global::D3.Items.Generator ItemGranted {
      get { return itemGranted_ ?? global::D3.Items.Generator.DefaultInstance; }
    }
    
    public const int SnoQuestFieldNumber = 4;
    private bool hasSnoQuest;
    private int snoQuest_ = -1;
    public bool HasSnoQuest {
      get { return hasSnoQuest; }
    }
    public int SnoQuest {
      get { return snoQuest_; }
    }
    
    public const int ItemsFieldNumber = 5;
    private pbc::PopsicleList<global::D3.Items.Generator> items_ = new pbc::PopsicleList<global::D3.Items.Generator>();
    public scg::IList<global::D3.Items.Generator> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::D3.Items.Generator GetItems(int index) {
      return items_[index];
    }
    
    public const int BonusXpGrantedFieldNumber = 6;
    private bool hasBonusXpGranted;
    private ulong bonusXpGranted_;
    public bool HasBonusXpGranted {
      get { return hasBonusXpGranted; }
    }
    public ulong BonusXpGranted {
      get { return bonusXpGranted_; }
    }
    
    public const int PlatinumGrantedFieldNumber = 7;
    private bool hasPlatinumGranted;
    private int platinumGranted_;
    public bool HasPlatinumGranted {
      get { return hasPlatinumGranted; }
    }
    public int PlatinumGranted {
      get { return platinumGranted_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasItemGranted) {
          if (!ItemGranted.IsInitialized) return false;
        }
        foreach (global::D3.Items.Generator element in ItemsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _questRewardFieldNames;
      if (hasXpGranted) {
        output.WriteUInt64(1, field_names[6], XpGranted);
      }
      if (hasGoldGranted) {
        output.WriteInt32(2, field_names[1], GoldGranted);
      }
      if (hasItemGranted) {
        output.WriteMessage(3, field_names[2], ItemGranted);
      }
      if (hasSnoQuest) {
        output.WriteSFixed32(4, field_names[5], SnoQuest);
      }
      if (items_.Count > 0) {
        output.WriteMessageArray(5, field_names[3], items_);
      }
      if (hasBonusXpGranted) {
        output.WriteUInt64(6, field_names[0], BonusXpGranted);
      }
      if (hasPlatinumGranted) {
        output.WriteSFixed32(7, field_names[4], PlatinumGranted);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasXpGranted) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, XpGranted);
        }
        if (hasGoldGranted) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, GoldGranted);
        }
        if (hasItemGranted) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ItemGranted);
        }
        if (hasSnoQuest) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(4, SnoQuest);
        }
        foreach (global::D3.Items.Generator element in ItemsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        if (hasBonusXpGranted) {
          size += pb::CodedOutputStream.ComputeUInt64Size(6, BonusXpGranted);
        }
        if (hasPlatinumGranted) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(7, PlatinumGranted);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QuestReward ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestReward ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestReward ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestReward ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestReward ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestReward ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QuestReward ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QuestReward ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QuestReward ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestReward ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QuestReward MakeReadOnly() {
      items_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QuestReward prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<QuestReward, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QuestReward cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QuestReward result;
      
      private QuestReward PrepareBuilder() {
        if (resultIsReadOnly) {
          QuestReward original = result;
          result = new QuestReward();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QuestReward MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Quests.QuestReward.Descriptor; }
      }
      
      public override QuestReward DefaultInstanceForType {
        get { return global::D3.Quests.QuestReward.DefaultInstance; }
      }
      
      public override QuestReward BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QuestReward) {
          return MergeFrom((QuestReward) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QuestReward other) {
        if (other == global::D3.Quests.QuestReward.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasXpGranted) {
          XpGranted = other.XpGranted;
        }
        if (other.HasGoldGranted) {
          GoldGranted = other.GoldGranted;
        }
        if (other.HasItemGranted) {
          MergeItemGranted(other.ItemGranted);
        }
        if (other.HasSnoQuest) {
          SnoQuest = other.SnoQuest;
        }
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        if (other.HasBonusXpGranted) {
          BonusXpGranted = other.BonusXpGranted;
        }
        if (other.HasPlatinumGranted) {
          PlatinumGranted = other.PlatinumGranted;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_questRewardFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _questRewardFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasXpGranted = input.ReadUInt64(ref result.xpGranted_);
              break;
            }
            case 16: {
              result.hasGoldGranted = input.ReadInt32(ref result.goldGranted_);
              break;
            }
            case 26: {
              global::D3.Items.Generator.Builder subBuilder = global::D3.Items.Generator.CreateBuilder();
              if (result.hasItemGranted) {
                subBuilder.MergeFrom(ItemGranted);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ItemGranted = subBuilder.BuildPartial();
              break;
            }
            case 37: {
              result.hasSnoQuest = input.ReadSFixed32(ref result.snoQuest_);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.items_, global::D3.Items.Generator.DefaultInstance, extensionRegistry);
              break;
            }
            case 48: {
              result.hasBonusXpGranted = input.ReadUInt64(ref result.bonusXpGranted_);
              break;
            }
            case 61: {
              result.hasPlatinumGranted = input.ReadSFixed32(ref result.platinumGranted_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasXpGranted {
        get { return result.hasXpGranted; }
      }
      public ulong XpGranted {
        get { return result.XpGranted; }
        set { SetXpGranted(value); }
      }
      public Builder SetXpGranted(ulong value) {
        PrepareBuilder();
        result.hasXpGranted = true;
        result.xpGranted_ = value;
        return this;
      }
      public Builder ClearXpGranted() {
        PrepareBuilder();
        result.hasXpGranted = false;
        result.xpGranted_ = 0UL;
        return this;
      }
      
      public bool HasGoldGranted {
        get { return result.hasGoldGranted; }
      }
      public int GoldGranted {
        get { return result.GoldGranted; }
        set { SetGoldGranted(value); }
      }
      public Builder SetGoldGranted(int value) {
        PrepareBuilder();
        result.hasGoldGranted = true;
        result.goldGranted_ = value;
        return this;
      }
      public Builder ClearGoldGranted() {
        PrepareBuilder();
        result.hasGoldGranted = false;
        result.goldGranted_ = 0;
        return this;
      }
      
      public bool HasItemGranted {
       get { return result.hasItemGranted; }
      }
      public global::D3.Items.Generator ItemGranted {
        get { return result.ItemGranted; }
        set { SetItemGranted(value); }
      }
      public Builder SetItemGranted(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItemGranted = true;
        result.itemGranted_ = value;
        return this;
      }
      public Builder SetItemGranted(global::D3.Items.Generator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItemGranted = true;
        result.itemGranted_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItemGranted(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItemGranted &&
            result.itemGranted_ != global::D3.Items.Generator.DefaultInstance) {
            result.itemGranted_ = global::D3.Items.Generator.CreateBuilder(result.itemGranted_).MergeFrom(value).BuildPartial();
        } else {
          result.itemGranted_ = value;
        }
        result.hasItemGranted = true;
        return this;
      }
      public Builder ClearItemGranted() {
        PrepareBuilder();
        result.hasItemGranted = false;
        result.itemGranted_ = null;
        return this;
      }
      
      public bool HasSnoQuest {
        get { return result.hasSnoQuest; }
      }
      public int SnoQuest {
        get { return result.SnoQuest; }
        set { SetSnoQuest(value); }
      }
      public Builder SetSnoQuest(int value) {
        PrepareBuilder();
        result.hasSnoQuest = true;
        result.snoQuest_ = value;
        return this;
      }
      public Builder ClearSnoQuest() {
        PrepareBuilder();
        result.hasSnoQuest = false;
        result.snoQuest_ = -1;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Items.Generator> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::D3.Items.Generator GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::D3.Items.Generator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::D3.Items.Generator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::D3.Items.Generator> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
      
      public bool HasBonusXpGranted {
        get { return result.hasBonusXpGranted; }
      }
      public ulong BonusXpGranted {
        get { return result.BonusXpGranted; }
        set { SetBonusXpGranted(value); }
      }
      public Builder SetBonusXpGranted(ulong value) {
        PrepareBuilder();
        result.hasBonusXpGranted = true;
        result.bonusXpGranted_ = value;
        return this;
      }
      public Builder ClearBonusXpGranted() {
        PrepareBuilder();
        result.hasBonusXpGranted = false;
        result.bonusXpGranted_ = 0UL;
        return this;
      }
      
      public bool HasPlatinumGranted {
        get { return result.hasPlatinumGranted; }
      }
      public int PlatinumGranted {
        get { return result.PlatinumGranted; }
        set { SetPlatinumGranted(value); }
      }
      public Builder SetPlatinumGranted(int value) {
        PrepareBuilder();
        result.hasPlatinumGranted = true;
        result.platinumGranted_ = value;
        return this;
      }
      public Builder ClearPlatinumGranted() {
        PrepareBuilder();
        result.hasPlatinumGranted = false;
        result.platinumGranted_ = 0;
        return this;
      }
    }
    static QuestReward() {
      object.ReferenceEquals(global::D3.Quests.Quest.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class QuestStepComplete : pb::GeneratedMessage<QuestStepComplete, QuestStepComplete.Builder> {
    private QuestStepComplete() { }
    private static readonly QuestStepComplete defaultInstance = new QuestStepComplete().MakeReadOnly();
    private static readonly string[] _questStepCompleteFieldNames = new string[] { "is_quest_complete", "reward", "was_reward_autoequipped" };
    private static readonly uint[] _questStepCompleteFieldTags = new uint[] { 8, 18, 24 };
    public static QuestStepComplete DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QuestStepComplete DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QuestStepComplete ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Quests.Quest.internal__static_D3_Quests_QuestStepComplete__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QuestStepComplete, QuestStepComplete.Builder> InternalFieldAccessors {
      get { return global::D3.Quests.Quest.internal__static_D3_Quests_QuestStepComplete__FieldAccessorTable; }
    }
    
    public const int IsQuestCompleteFieldNumber = 1;
    private bool hasIsQuestComplete;
    private bool isQuestComplete_;
    public bool HasIsQuestComplete {
      get { return hasIsQuestComplete; }
    }
    public bool IsQuestComplete {
      get { return isQuestComplete_; }
    }
    
    public const int RewardFieldNumber = 2;
    private bool hasReward;
    private global::D3.Quests.QuestReward reward_;
    public bool HasReward {
      get { return hasReward; }
    }
    public global::D3.Quests.QuestReward Reward {
      get { return reward_ ?? global::D3.Quests.QuestReward.DefaultInstance; }
    }
    
    public const int WasRewardAutoequippedFieldNumber = 3;
    private bool hasWasRewardAutoequipped;
    private bool wasRewardAutoequipped_;
    public bool HasWasRewardAutoequipped {
      get { return hasWasRewardAutoequipped; }
    }
    public bool WasRewardAutoequipped {
      get { return wasRewardAutoequipped_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIsQuestComplete) return false;
        if (HasReward) {
          if (!Reward.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _questStepCompleteFieldNames;
      if (hasIsQuestComplete) {
        output.WriteBool(1, field_names[0], IsQuestComplete);
      }
      if (hasReward) {
        output.WriteMessage(2, field_names[1], Reward);
      }
      if (hasWasRewardAutoequipped) {
        output.WriteBool(3, field_names[2], WasRewardAutoequipped);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIsQuestComplete) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, IsQuestComplete);
        }
        if (hasReward) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Reward);
        }
        if (hasWasRewardAutoequipped) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, WasRewardAutoequipped);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QuestStepComplete ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestStepComplete ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestStepComplete ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestStepComplete ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestStepComplete ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestStepComplete ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QuestStepComplete ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QuestStepComplete ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QuestStepComplete ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestStepComplete ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QuestStepComplete MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QuestStepComplete prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<QuestStepComplete, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QuestStepComplete cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QuestStepComplete result;
      
      private QuestStepComplete PrepareBuilder() {
        if (resultIsReadOnly) {
          QuestStepComplete original = result;
          result = new QuestStepComplete();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QuestStepComplete MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Quests.QuestStepComplete.Descriptor; }
      }
      
      public override QuestStepComplete DefaultInstanceForType {
        get { return global::D3.Quests.QuestStepComplete.DefaultInstance; }
      }
      
      public override QuestStepComplete BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QuestStepComplete) {
          return MergeFrom((QuestStepComplete) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QuestStepComplete other) {
        if (other == global::D3.Quests.QuestStepComplete.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsQuestComplete) {
          IsQuestComplete = other.IsQuestComplete;
        }
        if (other.HasReward) {
          MergeReward(other.Reward);
        }
        if (other.HasWasRewardAutoequipped) {
          WasRewardAutoequipped = other.WasRewardAutoequipped;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_questStepCompleteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _questStepCompleteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsQuestComplete = input.ReadBool(ref result.isQuestComplete_);
              break;
            }
            case 18: {
              global::D3.Quests.QuestReward.Builder subBuilder = global::D3.Quests.QuestReward.CreateBuilder();
              if (result.hasReward) {
                subBuilder.MergeFrom(Reward);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Reward = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasWasRewardAutoequipped = input.ReadBool(ref result.wasRewardAutoequipped_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIsQuestComplete {
        get { return result.hasIsQuestComplete; }
      }
      public bool IsQuestComplete {
        get { return result.IsQuestComplete; }
        set { SetIsQuestComplete(value); }
      }
      public Builder SetIsQuestComplete(bool value) {
        PrepareBuilder();
        result.hasIsQuestComplete = true;
        result.isQuestComplete_ = value;
        return this;
      }
      public Builder ClearIsQuestComplete() {
        PrepareBuilder();
        result.hasIsQuestComplete = false;
        result.isQuestComplete_ = false;
        return this;
      }
      
      public bool HasReward {
       get { return result.hasReward; }
      }
      public global::D3.Quests.QuestReward Reward {
        get { return result.Reward; }
        set { SetReward(value); }
      }
      public Builder SetReward(global::D3.Quests.QuestReward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReward = true;
        result.reward_ = value;
        return this;
      }
      public Builder SetReward(global::D3.Quests.QuestReward.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReward = true;
        result.reward_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReward(global::D3.Quests.QuestReward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReward &&
            result.reward_ != global::D3.Quests.QuestReward.DefaultInstance) {
            result.reward_ = global::D3.Quests.QuestReward.CreateBuilder(result.reward_).MergeFrom(value).BuildPartial();
        } else {
          result.reward_ = value;
        }
        result.hasReward = true;
        return this;
      }
      public Builder ClearReward() {
        PrepareBuilder();
        result.hasReward = false;
        result.reward_ = null;
        return this;
      }
      
      public bool HasWasRewardAutoequipped {
        get { return result.hasWasRewardAutoequipped; }
      }
      public bool WasRewardAutoequipped {
        get { return result.WasRewardAutoequipped; }
        set { SetWasRewardAutoequipped(value); }
      }
      public Builder SetWasRewardAutoequipped(bool value) {
        PrepareBuilder();
        result.hasWasRewardAutoequipped = true;
        result.wasRewardAutoequipped_ = value;
        return this;
      }
      public Builder ClearWasRewardAutoequipped() {
        PrepareBuilder();
        result.hasWasRewardAutoequipped = false;
        result.wasRewardAutoequipped_ = false;
        return this;
      }
    }
    static QuestStepComplete() {
      object.ReferenceEquals(global::D3.Quests.Quest.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class QuestTieredRiftComplete : pb::GeneratedMessage<QuestTieredRiftComplete, QuestTieredRiftComplete.Builder> {
    private QuestTieredRiftComplete() { }
    private static readonly QuestTieredRiftComplete defaultInstance = new QuestTieredRiftComplete().MakeReadOnly();
    private static readonly string[] _questTieredRiftCompleteFieldNames = new string[] { "is_finished_in_time", "reward", "rift_depth" };
    private static readonly uint[] _questTieredRiftCompleteFieldTags = new uint[] { 8, 26, 16 };
    public static QuestTieredRiftComplete DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QuestTieredRiftComplete DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QuestTieredRiftComplete ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Quests.Quest.internal__static_D3_Quests_QuestTieredRiftComplete__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QuestTieredRiftComplete, QuestTieredRiftComplete.Builder> InternalFieldAccessors {
      get { return global::D3.Quests.Quest.internal__static_D3_Quests_QuestTieredRiftComplete__FieldAccessorTable; }
    }
    
    public const int IsFinishedInTimeFieldNumber = 1;
    private bool hasIsFinishedInTime;
    private bool isFinishedInTime_;
    public bool HasIsFinishedInTime {
      get { return hasIsFinishedInTime; }
    }
    public bool IsFinishedInTime {
      get { return isFinishedInTime_; }
    }
    
    public const int RiftDepthFieldNumber = 2;
    private bool hasRiftDepth;
    private int riftDepth_;
    public bool HasRiftDepth {
      get { return hasRiftDepth; }
    }
    public int RiftDepth {
      get { return riftDepth_; }
    }
    
    public const int RewardFieldNumber = 3;
    private bool hasReward;
    private global::D3.Quests.QuestReward reward_;
    public bool HasReward {
      get { return hasReward; }
    }
    public global::D3.Quests.QuestReward Reward {
      get { return reward_ ?? global::D3.Quests.QuestReward.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIsFinishedInTime) return false;
        if (!hasRiftDepth) return false;
        if (HasReward) {
          if (!Reward.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _questTieredRiftCompleteFieldNames;
      if (hasIsFinishedInTime) {
        output.WriteBool(1, field_names[0], IsFinishedInTime);
      }
      if (hasRiftDepth) {
        output.WriteInt32(2, field_names[2], RiftDepth);
      }
      if (hasReward) {
        output.WriteMessage(3, field_names[1], Reward);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIsFinishedInTime) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, IsFinishedInTime);
        }
        if (hasRiftDepth) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, RiftDepth);
        }
        if (hasReward) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Reward);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QuestTieredRiftComplete ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestTieredRiftComplete ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestTieredRiftComplete ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestTieredRiftComplete ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestTieredRiftComplete ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestTieredRiftComplete ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QuestTieredRiftComplete ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QuestTieredRiftComplete ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QuestTieredRiftComplete ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestTieredRiftComplete ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QuestTieredRiftComplete MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QuestTieredRiftComplete prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<QuestTieredRiftComplete, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QuestTieredRiftComplete cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QuestTieredRiftComplete result;
      
      private QuestTieredRiftComplete PrepareBuilder() {
        if (resultIsReadOnly) {
          QuestTieredRiftComplete original = result;
          result = new QuestTieredRiftComplete();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QuestTieredRiftComplete MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Quests.QuestTieredRiftComplete.Descriptor; }
      }
      
      public override QuestTieredRiftComplete DefaultInstanceForType {
        get { return global::D3.Quests.QuestTieredRiftComplete.DefaultInstance; }
      }
      
      public override QuestTieredRiftComplete BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QuestTieredRiftComplete) {
          return MergeFrom((QuestTieredRiftComplete) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QuestTieredRiftComplete other) {
        if (other == global::D3.Quests.QuestTieredRiftComplete.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsFinishedInTime) {
          IsFinishedInTime = other.IsFinishedInTime;
        }
        if (other.HasRiftDepth) {
          RiftDepth = other.RiftDepth;
        }
        if (other.HasReward) {
          MergeReward(other.Reward);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_questTieredRiftCompleteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _questTieredRiftCompleteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsFinishedInTime = input.ReadBool(ref result.isFinishedInTime_);
              break;
            }
            case 16: {
              result.hasRiftDepth = input.ReadInt32(ref result.riftDepth_);
              break;
            }
            case 26: {
              global::D3.Quests.QuestReward.Builder subBuilder = global::D3.Quests.QuestReward.CreateBuilder();
              if (result.hasReward) {
                subBuilder.MergeFrom(Reward);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Reward = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIsFinishedInTime {
        get { return result.hasIsFinishedInTime; }
      }
      public bool IsFinishedInTime {
        get { return result.IsFinishedInTime; }
        set { SetIsFinishedInTime(value); }
      }
      public Builder SetIsFinishedInTime(bool value) {
        PrepareBuilder();
        result.hasIsFinishedInTime = true;
        result.isFinishedInTime_ = value;
        return this;
      }
      public Builder ClearIsFinishedInTime() {
        PrepareBuilder();
        result.hasIsFinishedInTime = false;
        result.isFinishedInTime_ = false;
        return this;
      }
      
      public bool HasRiftDepth {
        get { return result.hasRiftDepth; }
      }
      public int RiftDepth {
        get { return result.RiftDepth; }
        set { SetRiftDepth(value); }
      }
      public Builder SetRiftDepth(int value) {
        PrepareBuilder();
        result.hasRiftDepth = true;
        result.riftDepth_ = value;
        return this;
      }
      public Builder ClearRiftDepth() {
        PrepareBuilder();
        result.hasRiftDepth = false;
        result.riftDepth_ = 0;
        return this;
      }
      
      public bool HasReward {
       get { return result.hasReward; }
      }
      public global::D3.Quests.QuestReward Reward {
        get { return result.Reward; }
        set { SetReward(value); }
      }
      public Builder SetReward(global::D3.Quests.QuestReward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReward = true;
        result.reward_ = value;
        return this;
      }
      public Builder SetReward(global::D3.Quests.QuestReward.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReward = true;
        result.reward_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReward(global::D3.Quests.QuestReward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReward &&
            result.reward_ != global::D3.Quests.QuestReward.DefaultInstance) {
            result.reward_ = global::D3.Quests.QuestReward.CreateBuilder(result.reward_).MergeFrom(value).BuildPartial();
        } else {
          result.reward_ = value;
        }
        result.hasReward = true;
        return this;
      }
      public Builder ClearReward() {
        PrepareBuilder();
        result.hasReward = false;
        result.reward_ = null;
        return this;
      }
    }
    static QuestTieredRiftComplete() {
      object.ReferenceEquals(global::D3.Quests.Quest.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
