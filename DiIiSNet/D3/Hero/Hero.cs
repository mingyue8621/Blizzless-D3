// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Hero {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Hero {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Hero_Digest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Digest, global::D3.Hero.Digest.Builder> internal__static_D3_Hero_Digest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_DigestUI__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.DigestUI, global::D3.Hero.DigestUI.Builder> internal__static_D3_Hero_DigestUI__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SavedData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedData, global::D3.Hero.SavedData.Builder> internal__static_D3_Hero_SavedData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SavedDefinition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedDefinition, global::D3.Hero.SavedDefinition.Builder> internal__static_D3_Hero_SavedDefinition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_DigestList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.DigestList, global::D3.Hero.DigestList.Builder> internal__static_D3_Hero_DigestList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_BasicAttributeList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.BasicAttributeList, global::D3.Hero.BasicAttributeList.Builder> internal__static_D3_Hero_BasicAttributeList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_ConsoleRandomVendorSeed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.ConsoleRandomVendorSeed, global::D3.Hero.ConsoleRandomVendorSeed.Builder> internal__static_D3_Hero_ConsoleRandomVendorSeed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_ConsoleRandomVendorSeedList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.ConsoleRandomVendorSeedList, global::D3.Hero.ConsoleRandomVendorSeedList.Builder> internal__static_D3_Hero_ConsoleRandomVendorSeedList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_ConsoleData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.ConsoleData, global::D3.Hero.ConsoleData.Builder> internal__static_D3_Hero_ConsoleData__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Hero() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgpIZXJvLnByb3RvEgdEMy5IZXJvGhlBdHRyaWJ1dGVTZXJpYWxpemVyLnBy" + 
          "b3RvGg5IaXJlbGluZy5wcm90bxoLSXRlbXMucHJvdG8aE09ubGluZVNlcnZp" + 
          "Y2UucHJvdG8aEEhlcm9Db21tb24ucHJvdG8aDVByb2ZpbGUucHJvdG8aEUdh" + 
          "bWVCYWxhbmNlLnByb3RvItkJCgZEaWdlc3QSGAoHdmVyc2lvbhgBIAIoDVIH" + 
          "dmVyc2lvbhIzCgdoZXJvX2lkGAIgAigLMhouRDMuT25saW5lU2VydmljZS5F" + 
          "bnRpdHlJZFIGaGVyb0lkEhsKCWhlcm9fbmFtZRgDIAEoCVIIaGVyb05hbWUS" + 
          "HQoKZ2JpZF9jbGFzcxgEIAIoD1IJZ2JpZENsYXNzEhQKBWxldmVsGAUgAigR" + 
          "UgVsZXZlbBIhCgxwbGF5ZXJfZmxhZ3MYBiACKA1SC3BsYXllckZsYWdzEkMK" + 
          "EHZpc3VhbF9lcXVpcG1lbnQYByACKAsyGC5EMy5IZXJvLlZpc3VhbEVxdWlw" + 
          "bWVudFIPdmlzdWFsRXF1aXBtZW50Ej8KDXF1ZXN0X2hpc3RvcnkYCCADKAsy" + 
          "Gi5EMy5IZXJvLlF1ZXN0SGlzdG9yeUVudHJ5UgxxdWVzdEhpc3RvcnkSJgoP" + 
          "bGFzdF9wbGF5ZWRfYWN0GAkgAigRUg1sYXN0UGxheWVkQWN0EjAKFGhpZ2hl" + 
          "c3RfdW5sb2NrZWRfYWN0GAogAigRUhJoaWdoZXN0VW5sb2NrZWRBY3QSSQoh" + 
          "bGFzdF9wbGF5ZWRfZGlmZmljdWx0eV9kZXByZWNhdGVkGAsgASgRUh5sYXN0" + 
          "UGxheWVkRGlmZmljdWx0eURlcHJlY2F0ZWQSUwomaGlnaGVzdF91bmxvY2tl" + 
          "ZF9kaWZmaWN1bHR5X2RlcHJlY2F0ZWQYDCABKBFSI2hpZ2hlc3RVbmxvY2tl" + 
          "ZERpZmZpY3VsdHlEZXByZWNhdGVkEioKEWxhc3RfcGxheWVkX3F1ZXN0GA0g" + 
          "AigPUg9sYXN0UGxheWVkUXVlc3QSMwoWbGFzdF9wbGF5ZWRfcXVlc3Rfc3Rl" + 
          "cBgOIAIoEVITbGFzdFBsYXllZFF1ZXN0U3RlcBIiCgt0aW1lX3BsYXllZBgP" + 
          "IAIoDToBMFIKdGltZVBsYXllZBJZCidoaWdoZXN0X2NvbXBsZXRlZF9kaWZm" + 
          "aWN1bHR5X2RlcHJlY2F0ZWQYECABKBE6Ai0xUiRoaWdoZXN0Q29tcGxldGVk" + 
          "RGlmZmljdWx0eURlcHJlY2F0ZWQSHwoLY3JlYXRlX3RpbWUYESABKA1SCmNy" + 
          "ZWF0ZVRpbWUSKAoQbGFzdF9wbGF5ZWRfdGltZRgSIAEoDVIObGFzdFBsYXll" + 
          "ZFRpbWUSHwoLZGVsZXRlX3RpbWUYEyABKA1SCmRlbGV0ZVRpbWUSQAobaGln" + 
          "aGVzdF9zb2xvX3JpZnRfY29tcGxldGVkGBkgASgNOgEwUhhoaWdoZXN0U29s" + 
          "b1JpZnRDb21wbGV0ZWQSMAoUZGVwcmVjYXRlZF9hbHRfbGV2ZWwYFCABKBFS" + 
          "EmRlcHJlY2F0ZWRBbHRMZXZlbBIZCghwdnBfcmFuaxgVIAEoEVIHcHZwUmFu" + 
          "axIoCg5zZWFzb25fY3JlYXRlZBgWIAEoDToBMFINc2Vhc29uQ3JlYXRlZBJA" + 
          "ChtsYXN0X3BsYXllZF9tb2RlX2RlcHJlY2F0ZWQYFyABKA06ATBSGGxhc3RQ" + 
          "bGF5ZWRNb2RlRGVwcmVjYXRlZBJEChBvcmlnaW5hbF9oZXJvX2lkGBggASgL" + 
          "MhouRDMuT25saW5lU2VydmljZS5FbnRpdHlJZFIOb3JpZ2luYWxIZXJvSWQi" + 
          "5AQKCERpZ2VzdFVJEiYKD2xhc3RfcGxheWVkX2FjdBgBIAIoEVINbGFzdFBs" + 
          "YXllZEFjdBIwChRoaWdoZXN0X3VubG9ja2VkX2FjdBgCIAIoEVISaGlnaGVz" + 
          "dFVubG9ja2VkQWN0EkkKIWxhc3RfcGxheWVkX2RpZmZpY3VsdHlfZGVwcmVj" + 
          "YXRlZBgDIAEoEVIebGFzdFBsYXllZERpZmZpY3VsdHlEZXByZWNhdGVkElMK" + 
          "JmhpZ2hlc3RfdW5sb2NrZWRfZGlmZmljdWx0eV9kZXByZWNhdGVkGAQgASgR" + 
          "UiNoaWdoZXN0VW5sb2NrZWREaWZmaWN1bHR5RGVwcmVjYXRlZBIqChFsYXN0" + 
          "X3BsYXllZF9xdWVzdBgFIAIoD1IPbGFzdFBsYXllZFF1ZXN0EjMKFmxhc3Rf" + 
          "cGxheWVkX3F1ZXN0X3N0ZXAYBiACKBFSE2xhc3RQbGF5ZWRRdWVzdFN0ZXAS" + 
          "IgoLdGltZV9wbGF5ZWQYByACKA06ATBSCnRpbWVQbGF5ZWQSVQonaGlnaGVz" + 
          "dF9jb21wbGV0ZWRfZGlmZmljdWx0eV9kZXByZWNhdGVkGAggASgRUiRoaWdo" + 
          "ZXN0Q29tcGxldGVkRGlmZmljdWx0eURlcHJlY2F0ZWQSQAobbGFzdF9wbGF5" + 
          "ZWRfbW9kZV9kZXByZWNhdGVkGAkgASgNOgEwUhhsYXN0UGxheWVkTW9kZURl" + 
          "cHJlY2F0ZWQSQAobaGlnaGVzdF9zb2xvX3JpZnRfY29tcGxldGVkGAogASgN" + 
          "OgEwUhhoaWdoZXN0U29sb1JpZnRDb21wbGV0ZWQi0QcKCVNhdmVkRGF0YRIi" + 
          "Cgt0aW1lX3BsYXllZBgBIAIoDToBMFIKdGltZVBsYXllZBIyChNhY3RpdmF0" + 
          "ZWRfd2F5cG9pbnRzGAIgAigNOgEwUhJhY3RpdmF0ZWRXYXlwb2ludHMSRgoT" + 
          "aGlyZWxpbmdfc2F2ZWRfZGF0YRgDIAIoCzIWLkQzLkhpcmVsaW5nLlNhdmVk" + 
          "RGF0YVIRaGlyZWxpbmdTYXZlZERhdGESKQoPbGFzdF9sZXZlbF90aW1lGAQg" + 
          "AigNOgEwUg1sYXN0TGV2ZWxUaW1lEkUKDGxlYXJuZWRfbG9yZRgFIAIoCzIi" + 
          "LkQzLkdhbWVCYWxhbmNlLkJpdFBhY2tlZEdiaWRBcnJheVILbGVhcm5lZExv" + 
          "cmUSTAoTc2F2ZWRfY29udmVyc2F0aW9ucxgGIAIoCzIbLkQzLkhlcm8uU2F2" + 
          "ZWRDb252ZXJzYXRpb25zUhJzYXZlZENvbnZlcnNhdGlvbnMSHQoKc25vX3Ry" + 
          "YWl0cxgHIAMoD1IJc25vVHJhaXRzEjsKCnNhdmVfcG9pbnQYCCACKAsyHC5E" + 
          "My5IZXJvLlNhdmVQb2ludERhdGFfUHJvdG9SCXNhdmVQb2ludBIwChJnYmlk" + 
          "X3BvdGlvbl9idXR0b24YCSACKA86Ai0xUhBnYmlkUG90aW9uQnV0dG9uEjsK" + 
          "DWFjdGl2ZV9za2lsbHMYCiADKAsyFi5EMy5IZXJvLlNraWxsV2l0aFJ1bmVS" + 
          "DGFjdGl2ZVNraWxscxI3Chhza2lsbF9zbG90X2V2ZXJfYXNzaWduZWQYCyAC" + 
          "KAxSFXNraWxsU2xvdEV2ZXJBc3NpZ25lZBImCg1za2lsbF92ZXJzaW9uGAwg" + 
          "AigNOgEwUgxza2lsbFZlcnNpb24SJgoPYm9zc19raWxsX2ZsYWdzGA0gAygN" + 
          "Ug1ib3NzS2lsbEZsYWdzEiIKC2V2ZW50X2ZsYWdzGA4gASgNOgEwUgpldmVu" + 
          "dEZsYWdzEi0KEXNraWxsX2tpdF92ZXJzaW9uGA8gASgNOgEwUg9za2lsbEtp" + 
          "dFZlcnNpb24SRAoScG90aW9uX2J1dHRvbl9pdGVtGBAgASgLMhYuRDMuSGVy" + 
          "by5TYXZlZEl0ZW1MaW5rUhBwb3Rpb25CdXR0b25JdGVtEkMKHG1haW5fcXVl" + 
          "c3RfaGFuZGljYXBfc25hcHNob3QYESABKAU6Ai0xUhltYWluUXVlc3RIYW5k" + 
          "aWNhcFNuYXBzaG90EjIKFWdiaWRfbGVnZW5kYXJ5X3Bvd2VycxgSIAMoD1IT" + 
          "Z2JpZExlZ2VuZGFyeVBvd2VycyLRBAoPU2F2ZWREZWZpbml0aW9uEhgKB3Zl" + 
          "cnNpb24YASACKA1SB3ZlcnNpb24SJwoGZGlnZXN0GAIgASgLMg8uRDMuSGVy" + 
          "by5EaWdlc3RSBmRpZ2VzdBJSChBzYXZlZF9hdHRyaWJ1dGVzGAMgAigLMicu" + 
          "RDMuQXR0cmlidXRlU2VyaWFsaXplci5TYXZlZEF0dHJpYnV0ZXNSD3NhdmVk" + 
          "QXR0cmlidXRlcxIxCgpzYXZlZF9kYXRhGAQgASgLMhIuRDMuSGVyby5TYXZl" + 
          "ZERhdGFSCXNhdmVkRGF0YRI0CgtzYXZlZF9xdWVzdBgFIAMoCzITLkQzLkhl" + 
          "cm8uU2F2ZWRRdWVzdFIKc2F2ZWRRdWVzdBIoCgVpdGVtcxgGIAEoCzISLkQz" + 
          "Lkl0ZW1zLkl0ZW1MaXN0UgVpdGVtcxJSChRxdWVzdF9yZXdhcmRfaGlzdG9y" + 
          "eRgHIAMoCzIgLkQzLkhlcm8uUXVlc3RSZXdhcmRIaXN0b3J5RW50cnlSEnF1" + 
          "ZXN0UmV3YXJkSGlzdG9yeRIyChVhY2NlcHRlZF9saWNlbnNlX2JpdHMYCCAB" + 
          "KARSE2FjY2VwdGVkTGljZW5zZUJpdHMSNwoMY29uc29sZV9kYXRhGAogASgL" + 
          "MhQuRDMuSGVyby5Db25zb2xlRGF0YVILY29uc29sZURhdGESUwoWZXF1aXBt" + 
          "ZW50X21hbmFnZXJfZGF0YRgLIAEoCzIdLkQzLkhlcm8uRXF1aXBtZW50TWFu" + 
          "YWdlckRhdGFSFGVxdWlwbWVudE1hbmFnZXJEYXRhIjcKCkRpZ2VzdExpc3QS" + 
          "KQoHZGlnZXN0cxgBIAMoCzIPLkQzLkhlcm8uRGlnZXN0UgdkaWdlc3RzIlwK" + 
          "EkJhc2ljQXR0cmlidXRlTGlzdBJGCgphdHRyaWJ1dGVzGAEgAygLMiYuRDMu" + 
          "QXR0cmlidXRlU2VyaWFsaXplci5TYXZlZEF0dHJpYnV0ZVIKYXR0cmlidXRl" + 
          "cyKYAQoXQ29uc29sZVJhbmRvbVZlbmRvclNlZWQSIgoNaXRlbV9zbG90X2tl" + 
          "eRgBIAIoEVILaXRlbVNsb3RLZXkSKAoQcmFuZG9tX2l0ZW1fc2VlZBgCIAIo" + 
          "EVIOcmFuZG9tSXRlbVNlZWQSLwoRcmFuZG9tX2l0ZW1fY2FycnkYAyABKBE6" + 
          "AzY2NlIPcmFuZG9tSXRlbUNhcnJ5IoUBChtDb25zb2xlUmFuZG9tVmVuZG9y" + 
          "U2VlZExpc3QSZgofY29uc29sZV9yYW5kb21fdmVuZG9yX3NlZWRfcHJvcBgB" + 
          "IAMoCzIgLkQzLkhlcm8uQ29uc29sZVJhbmRvbVZlbmRvclNlZWRSG2NvbnNv" + 
          "bGVSYW5kb21WZW5kb3JTZWVkUHJvcCLJAgoLQ29uc29sZURhdGESOgoMaGVy" + 
          "b19wcm9maWxlGAEgASgLMhcuRDMuUHJvZmlsZS5IZXJvUHJvZmlsZVILaGVy" + 
          "b1Byb2ZpbGUSMwoUbGFzdF9wbGF5ZWRfaGFuZGljYXAYAiABKBE6ATJSEmxh" + 
          "c3RQbGF5ZWRIYW5kaWNhcBIfCgtraWxsZXJfbmFtZRgDIAEoCVIKa2lsbGVy" + 
          "TmFtZRJCCh5sYXN0X3BsYXllZF9hZHZlbnR1cmVfbW9kZV9hY3QYBCABKBFS" + 
          "Gmxhc3RQbGF5ZWRBZHZlbnR1cmVNb2RlQWN0EmQKHHJhbmRvbV9pdGVtX3Zl" + 
          "bmRvcl9zZWVkX2xpc3QYBSABKAsyJC5EMy5IZXJvLkNvbnNvbGVSYW5kb21W" + 
          "ZW5kb3JTZWVkTGlzdFIYcmFuZG9tSXRlbVZlbmRvclNlZWRMaXN0");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Hero_Digest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Hero_Digest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Digest, global::D3.Hero.Digest.Builder>(internal__static_D3_Hero_Digest__Descriptor,
                new string[] { "Version", "HeroId", "HeroName", "GbidClass", "Level", "PlayerFlags", "VisualEquipment", "QuestHistory", "LastPlayedAct", "HighestUnlockedAct", "LastPlayedDifficultyDeprecated", "HighestUnlockedDifficultyDeprecated", "LastPlayedQuest", "LastPlayedQuestStep", "TimePlayed", "HighestCompletedDifficultyDeprecated", "CreateTime", "LastPlayedTime", "DeleteTime", "HighestSoloRiftCompleted", "DeprecatedAltLevel", "PvpRank", "SeasonCreated", "LastPlayedModeDeprecated", "OriginalHeroId", });
        internal__static_D3_Hero_DigestUI__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Hero_DigestUI__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.DigestUI, global::D3.Hero.DigestUI.Builder>(internal__static_D3_Hero_DigestUI__Descriptor,
                new string[] { "LastPlayedAct", "HighestUnlockedAct", "LastPlayedDifficultyDeprecated", "HighestUnlockedDifficultyDeprecated", "LastPlayedQuest", "LastPlayedQuestStep", "TimePlayed", "HighestCompletedDifficultyDeprecated", "LastPlayedModeDeprecated", "HighestSoloRiftCompleted", });
        internal__static_D3_Hero_SavedData__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_Hero_SavedData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedData, global::D3.Hero.SavedData.Builder>(internal__static_D3_Hero_SavedData__Descriptor,
                new string[] { "TimePlayed", "ActivatedWaypoints", "HirelingSavedData", "LastLevelTime", "LearnedLore", "SavedConversations", "SnoTraits", "SavePoint", "GbidPotionButton", "ActiveSkills", "SkillSlotEverAssigned", "SkillVersion", "BossKillFlags", "EventFlags", "SkillKitVersion", "PotionButtonItem", "MainQuestHandicapSnapshot", "GbidLegendaryPowers", });
        internal__static_D3_Hero_SavedDefinition__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_Hero_SavedDefinition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedDefinition, global::D3.Hero.SavedDefinition.Builder>(internal__static_D3_Hero_SavedDefinition__Descriptor,
                new string[] { "Version", "Digest", "SavedAttributes", "SavedData", "SavedQuest", "Items", "QuestRewardHistory", "AcceptedLicenseBits", "ConsoleData", "EquipmentManagerData", });
        internal__static_D3_Hero_DigestList__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_Hero_DigestList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.DigestList, global::D3.Hero.DigestList.Builder>(internal__static_D3_Hero_DigestList__Descriptor,
                new string[] { "Digests", });
        internal__static_D3_Hero_BasicAttributeList__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_Hero_BasicAttributeList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.BasicAttributeList, global::D3.Hero.BasicAttributeList.Builder>(internal__static_D3_Hero_BasicAttributeList__Descriptor,
                new string[] { "Attributes", });
        internal__static_D3_Hero_ConsoleRandomVendorSeed__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_Hero_ConsoleRandomVendorSeed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.ConsoleRandomVendorSeed, global::D3.Hero.ConsoleRandomVendorSeed.Builder>(internal__static_D3_Hero_ConsoleRandomVendorSeed__Descriptor,
                new string[] { "ItemSlotKey", "RandomItemSeed", "RandomItemCarry", });
        internal__static_D3_Hero_ConsoleRandomVendorSeedList__Descriptor = Descriptor.MessageTypes[7];
        internal__static_D3_Hero_ConsoleRandomVendorSeedList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.ConsoleRandomVendorSeedList, global::D3.Hero.ConsoleRandomVendorSeedList.Builder>(internal__static_D3_Hero_ConsoleRandomVendorSeedList__Descriptor,
                new string[] { "ConsoleRandomVendorSeedProp", });
        internal__static_D3_Hero_ConsoleData__Descriptor = Descriptor.MessageTypes[8];
        internal__static_D3_Hero_ConsoleData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.ConsoleData, global::D3.Hero.ConsoleData.Builder>(internal__static_D3_Hero_ConsoleData__Descriptor,
                new string[] { "HeroProfile", "LastPlayedHandicap", "KillerName", "LastPlayedAdventureModeAct", "RandomItemVendorSeedList", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::D3.AttributeSerializer.AttributeSerializer.RegisterAllExtensions(registry);
        global::D3.Hireling.Hireling.RegisterAllExtensions(registry);
        global::D3.Items.Items.RegisterAllExtensions(registry);
        global::D3.OnlineService.OnlineService.RegisterAllExtensions(registry);
        global::D3.Hero.HeroCommon.RegisterAllExtensions(registry);
        global::D3.Profile.Profile.RegisterAllExtensions(registry);
        global::D3.GameBalance.GameBalance.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.AttributeSerializer.AttributeSerializer.Descriptor, 
          global::D3.Hireling.Hireling.Descriptor, 
          global::D3.Items.Items.Descriptor, 
          global::D3.OnlineService.OnlineService.Descriptor, 
          global::D3.Hero.HeroCommon.Descriptor, 
          global::D3.Profile.Profile.Descriptor, 
          global::D3.GameBalance.GameBalance.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Digest : pb::GeneratedMessage<Digest, Digest.Builder> {
    private Digest() { }
    private static readonly Digest defaultInstance = new Digest().MakeReadOnly();
    private static readonly string[] _digestFieldNames = new string[] { "create_time", "delete_time", "deprecated_alt_level", "gbid_class", "hero_id", "hero_name", "highest_completed_difficulty_deprecated", "highest_solo_rift_completed", "highest_unlocked_act", "highest_unlocked_difficulty_deprecated", "last_played_act", "last_played_difficulty_deprecated", "last_played_mode_deprecated", "last_played_quest", "last_played_quest_step", "last_played_time", "level", "original_hero_id", "player_flags", "pvp_rank", "quest_history", "season_created", "time_played", "version", "visual_equipment" };
    private static readonly uint[] _digestFieldTags = new uint[] { 136, 152, 160, 37, 18, 26, 128, 200, 80, 96, 72, 88, 184, 109, 112, 144, 40, 194, 48, 168, 66, 176, 120, 8, 58 };
    public static Digest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Digest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Digest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_Digest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Digest, Digest.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_Digest__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private uint version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public uint Version {
      get { return version_; }
    }
    
    public const int HeroIdFieldNumber = 2;
    private bool hasHeroId;
    private global::D3.OnlineService.EntityId heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public global::D3.OnlineService.EntityId HeroId {
      get { return heroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int HeroNameFieldNumber = 3;
    private bool hasHeroName;
    private string heroName_ = "";
    public bool HasHeroName {
      get { return hasHeroName; }
    }
    public string HeroName {
      get { return heroName_; }
    }
    
    public const int GbidClassFieldNumber = 4;
    private bool hasGbidClass;
    private int gbidClass_;
    public bool HasGbidClass {
      get { return hasGbidClass; }
    }
    public int GbidClass {
      get { return gbidClass_; }
    }
    
    public const int LevelFieldNumber = 5;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int PlayerFlagsFieldNumber = 6;
    private bool hasPlayerFlags;
    private uint playerFlags_;
    public bool HasPlayerFlags {
      get { return hasPlayerFlags; }
    }
    public uint PlayerFlags {
      get { return playerFlags_; }
    }
    
    public const int VisualEquipmentFieldNumber = 7;
    private bool hasVisualEquipment;
    private global::D3.Hero.VisualEquipment visualEquipment_;
    public bool HasVisualEquipment {
      get { return hasVisualEquipment; }
    }
    public global::D3.Hero.VisualEquipment VisualEquipment {
      get { return visualEquipment_ ?? global::D3.Hero.VisualEquipment.DefaultInstance; }
    }
    
    public const int QuestHistoryFieldNumber = 8;
    private pbc::PopsicleList<global::D3.Hero.QuestHistoryEntry> questHistory_ = new pbc::PopsicleList<global::D3.Hero.QuestHistoryEntry>();
    public scg::IList<global::D3.Hero.QuestHistoryEntry> QuestHistoryList {
      get { return questHistory_; }
    }
    public int QuestHistoryCount {
      get { return questHistory_.Count; }
    }
    public global::D3.Hero.QuestHistoryEntry GetQuestHistory(int index) {
      return questHistory_[index];
    }
    
    public const int LastPlayedActFieldNumber = 9;
    private bool hasLastPlayedAct;
    private int lastPlayedAct_;
    public bool HasLastPlayedAct {
      get { return hasLastPlayedAct; }
    }
    public int LastPlayedAct {
      get { return lastPlayedAct_; }
    }
    
    public const int HighestUnlockedActFieldNumber = 10;
    private bool hasHighestUnlockedAct;
    private int highestUnlockedAct_;
    public bool HasHighestUnlockedAct {
      get { return hasHighestUnlockedAct; }
    }
    public int HighestUnlockedAct {
      get { return highestUnlockedAct_; }
    }
    
    public const int LastPlayedDifficultyDeprecatedFieldNumber = 11;
    private bool hasLastPlayedDifficultyDeprecated;
    private int lastPlayedDifficultyDeprecated_;
    public bool HasLastPlayedDifficultyDeprecated {
      get { return hasLastPlayedDifficultyDeprecated; }
    }
    public int LastPlayedDifficultyDeprecated {
      get { return lastPlayedDifficultyDeprecated_; }
    }
    
    public const int HighestUnlockedDifficultyDeprecatedFieldNumber = 12;
    private bool hasHighestUnlockedDifficultyDeprecated;
    private int highestUnlockedDifficultyDeprecated_;
    public bool HasHighestUnlockedDifficultyDeprecated {
      get { return hasHighestUnlockedDifficultyDeprecated; }
    }
    public int HighestUnlockedDifficultyDeprecated {
      get { return highestUnlockedDifficultyDeprecated_; }
    }
    
    public const int LastPlayedQuestFieldNumber = 13;
    private bool hasLastPlayedQuest;
    private int lastPlayedQuest_;
    public bool HasLastPlayedQuest {
      get { return hasLastPlayedQuest; }
    }
    public int LastPlayedQuest {
      get { return lastPlayedQuest_; }
    }
    
    public const int LastPlayedQuestStepFieldNumber = 14;
    private bool hasLastPlayedQuestStep;
    private int lastPlayedQuestStep_;
    public bool HasLastPlayedQuestStep {
      get { return hasLastPlayedQuestStep; }
    }
    public int LastPlayedQuestStep {
      get { return lastPlayedQuestStep_; }
    }
    
    public const int TimePlayedFieldNumber = 15;
    private bool hasTimePlayed;
    private uint timePlayed_;
    public bool HasTimePlayed {
      get { return hasTimePlayed; }
    }
    public uint TimePlayed {
      get { return timePlayed_; }
    }
    
    public const int HighestCompletedDifficultyDeprecatedFieldNumber = 16;
    private bool hasHighestCompletedDifficultyDeprecated;
    private int highestCompletedDifficultyDeprecated_ = -1;
    public bool HasHighestCompletedDifficultyDeprecated {
      get { return hasHighestCompletedDifficultyDeprecated; }
    }
    public int HighestCompletedDifficultyDeprecated {
      get { return highestCompletedDifficultyDeprecated_; }
    }
    
    public const int CreateTimeFieldNumber = 17;
    private bool hasCreateTime;
    private uint createTime_;
    public bool HasCreateTime {
      get { return hasCreateTime; }
    }
    public uint CreateTime {
      get { return createTime_; }
    }
    
    public const int LastPlayedTimeFieldNumber = 18;
    private bool hasLastPlayedTime;
    private uint lastPlayedTime_;
    public bool HasLastPlayedTime {
      get { return hasLastPlayedTime; }
    }
    public uint LastPlayedTime {
      get { return lastPlayedTime_; }
    }
    
    public const int DeleteTimeFieldNumber = 19;
    private bool hasDeleteTime;
    private uint deleteTime_;
    public bool HasDeleteTime {
      get { return hasDeleteTime; }
    }
    public uint DeleteTime {
      get { return deleteTime_; }
    }
    
    public const int HighestSoloRiftCompletedFieldNumber = 25;
    private bool hasHighestSoloRiftCompleted;
    private uint highestSoloRiftCompleted_;
    public bool HasHighestSoloRiftCompleted {
      get { return hasHighestSoloRiftCompleted; }
    }
    public uint HighestSoloRiftCompleted {
      get { return highestSoloRiftCompleted_; }
    }
    
    public const int DeprecatedAltLevelFieldNumber = 20;
    private bool hasDeprecatedAltLevel;
    private int deprecatedAltLevel_;
    public bool HasDeprecatedAltLevel {
      get { return hasDeprecatedAltLevel; }
    }
    public int DeprecatedAltLevel {
      get { return deprecatedAltLevel_; }
    }
    
    public const int PvpRankFieldNumber = 21;
    private bool hasPvpRank;
    private int pvpRank_;
    public bool HasPvpRank {
      get { return hasPvpRank; }
    }
    public int PvpRank {
      get { return pvpRank_; }
    }
    
    public const int SeasonCreatedFieldNumber = 22;
    private bool hasSeasonCreated;
    private uint seasonCreated_;
    public bool HasSeasonCreated {
      get { return hasSeasonCreated; }
    }
    public uint SeasonCreated {
      get { return seasonCreated_; }
    }
    
    public const int LastPlayedModeDeprecatedFieldNumber = 23;
    private bool hasLastPlayedModeDeprecated;
    private uint lastPlayedModeDeprecated_;
    public bool HasLastPlayedModeDeprecated {
      get { return hasLastPlayedModeDeprecated; }
    }
    public uint LastPlayedModeDeprecated {
      get { return lastPlayedModeDeprecated_; }
    }
    
    public const int OriginalHeroIdFieldNumber = 24;
    private bool hasOriginalHeroId;
    private global::D3.OnlineService.EntityId originalHeroId_;
    public bool HasOriginalHeroId {
      get { return hasOriginalHeroId; }
    }
    public global::D3.OnlineService.EntityId OriginalHeroId {
      get { return originalHeroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasHeroId) return false;
        if (!hasGbidClass) return false;
        if (!hasLevel) return false;
        if (!hasPlayerFlags) return false;
        if (!hasVisualEquipment) return false;
        if (!hasLastPlayedAct) return false;
        if (!hasHighestUnlockedAct) return false;
        if (!hasLastPlayedQuest) return false;
        if (!hasLastPlayedQuestStep) return false;
        if (!hasTimePlayed) return false;
        if (!HeroId.IsInitialized) return false;
        foreach (global::D3.Hero.QuestHistoryEntry element in QuestHistoryList) {
          if (!element.IsInitialized) return false;
        }
        if (HasOriginalHeroId) {
          if (!OriginalHeroId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _digestFieldNames;
      if (hasVersion) {
        output.WriteUInt32(1, field_names[23], Version);
      }
      if (hasHeroId) {
        output.WriteMessage(2, field_names[4], HeroId);
      }
      if (hasHeroName) {
        output.WriteString(3, field_names[5], HeroName);
      }
      if (hasGbidClass) {
        output.WriteSFixed32(4, field_names[3], GbidClass);
      }
      if (hasLevel) {
        output.WriteSInt32(5, field_names[16], Level);
      }
      if (hasPlayerFlags) {
        output.WriteUInt32(6, field_names[18], PlayerFlags);
      }
      if (hasVisualEquipment) {
        output.WriteMessage(7, field_names[24], VisualEquipment);
      }
      if (questHistory_.Count > 0) {
        output.WriteMessageArray(8, field_names[20], questHistory_);
      }
      if (hasLastPlayedAct) {
        output.WriteSInt32(9, field_names[10], LastPlayedAct);
      }
      if (hasHighestUnlockedAct) {
        output.WriteSInt32(10, field_names[8], HighestUnlockedAct);
      }
      if (hasLastPlayedDifficultyDeprecated) {
        output.WriteSInt32(11, field_names[11], LastPlayedDifficultyDeprecated);
      }
      if (hasHighestUnlockedDifficultyDeprecated) {
        output.WriteSInt32(12, field_names[9], HighestUnlockedDifficultyDeprecated);
      }
      if (hasLastPlayedQuest) {
        output.WriteSFixed32(13, field_names[13], LastPlayedQuest);
      }
      if (hasLastPlayedQuestStep) {
        output.WriteSInt32(14, field_names[14], LastPlayedQuestStep);
      }
      if (hasTimePlayed) {
        output.WriteUInt32(15, field_names[22], TimePlayed);
      }
      if (hasHighestCompletedDifficultyDeprecated) {
        output.WriteSInt32(16, field_names[6], HighestCompletedDifficultyDeprecated);
      }
      if (hasCreateTime) {
        output.WriteUInt32(17, field_names[0], CreateTime);
      }
      if (hasLastPlayedTime) {
        output.WriteUInt32(18, field_names[15], LastPlayedTime);
      }
      if (hasDeleteTime) {
        output.WriteUInt32(19, field_names[1], DeleteTime);
      }
      if (hasDeprecatedAltLevel) {
        output.WriteSInt32(20, field_names[2], DeprecatedAltLevel);
      }
      if (hasPvpRank) {
        output.WriteSInt32(21, field_names[19], PvpRank);
      }
      if (hasSeasonCreated) {
        output.WriteUInt32(22, field_names[21], SeasonCreated);
      }
      if (hasLastPlayedModeDeprecated) {
        output.WriteUInt32(23, field_names[12], LastPlayedModeDeprecated);
      }
      if (hasOriginalHeroId) {
        output.WriteMessage(24, field_names[17], OriginalHeroId);
      }
      if (hasHighestSoloRiftCompleted) {
        output.WriteUInt32(25, field_names[7], HighestSoloRiftCompleted);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Version);
        }
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, HeroId);
        }
        if (hasHeroName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, HeroName);
        }
        if (hasGbidClass) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(4, GbidClass);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeSInt32Size(5, Level);
        }
        if (hasPlayerFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, PlayerFlags);
        }
        if (hasVisualEquipment) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, VisualEquipment);
        }
        foreach (global::D3.Hero.QuestHistoryEntry element in QuestHistoryList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        if (hasLastPlayedAct) {
          size += pb::CodedOutputStream.ComputeSInt32Size(9, LastPlayedAct);
        }
        if (hasHighestUnlockedAct) {
          size += pb::CodedOutputStream.ComputeSInt32Size(10, HighestUnlockedAct);
        }
        if (hasLastPlayedDifficultyDeprecated) {
          size += pb::CodedOutputStream.ComputeSInt32Size(11, LastPlayedDifficultyDeprecated);
        }
        if (hasHighestUnlockedDifficultyDeprecated) {
          size += pb::CodedOutputStream.ComputeSInt32Size(12, HighestUnlockedDifficultyDeprecated);
        }
        if (hasLastPlayedQuest) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(13, LastPlayedQuest);
        }
        if (hasLastPlayedQuestStep) {
          size += pb::CodedOutputStream.ComputeSInt32Size(14, LastPlayedQuestStep);
        }
        if (hasTimePlayed) {
          size += pb::CodedOutputStream.ComputeUInt32Size(15, TimePlayed);
        }
        if (hasHighestCompletedDifficultyDeprecated) {
          size += pb::CodedOutputStream.ComputeSInt32Size(16, HighestCompletedDifficultyDeprecated);
        }
        if (hasCreateTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(17, CreateTime);
        }
        if (hasLastPlayedTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(18, LastPlayedTime);
        }
        if (hasDeleteTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(19, DeleteTime);
        }
        if (hasHighestSoloRiftCompleted) {
          size += pb::CodedOutputStream.ComputeUInt32Size(25, HighestSoloRiftCompleted);
        }
        if (hasDeprecatedAltLevel) {
          size += pb::CodedOutputStream.ComputeSInt32Size(20, DeprecatedAltLevel);
        }
        if (hasPvpRank) {
          size += pb::CodedOutputStream.ComputeSInt32Size(21, PvpRank);
        }
        if (hasSeasonCreated) {
          size += pb::CodedOutputStream.ComputeUInt32Size(22, SeasonCreated);
        }
        if (hasLastPlayedModeDeprecated) {
          size += pb::CodedOutputStream.ComputeUInt32Size(23, LastPlayedModeDeprecated);
        }
        if (hasOriginalHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(24, OriginalHeroId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Digest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Digest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Digest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Digest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Digest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Digest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Digest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Digest MakeReadOnly() {
      questHistory_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Digest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Digest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Digest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Digest result;
      
      private Digest PrepareBuilder() {
        if (resultIsReadOnly) {
          Digest original = result;
          result = new Digest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Digest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.Digest.Descriptor; }
      }
      
      public override Digest DefaultInstanceForType {
        get { return global::D3.Hero.Digest.DefaultInstance; }
      }
      
      public override Digest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Digest) {
          return MergeFrom((Digest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Digest other) {
        if (other == global::D3.Hero.Digest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasHeroId) {
          MergeHeroId(other.HeroId);
        }
        if (other.HasHeroName) {
          HeroName = other.HeroName;
        }
        if (other.HasGbidClass) {
          GbidClass = other.GbidClass;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasPlayerFlags) {
          PlayerFlags = other.PlayerFlags;
        }
        if (other.HasVisualEquipment) {
          MergeVisualEquipment(other.VisualEquipment);
        }
        if (other.questHistory_.Count != 0) {
          result.questHistory_.Add(other.questHistory_);
        }
        if (other.HasLastPlayedAct) {
          LastPlayedAct = other.LastPlayedAct;
        }
        if (other.HasHighestUnlockedAct) {
          HighestUnlockedAct = other.HighestUnlockedAct;
        }
        if (other.HasLastPlayedDifficultyDeprecated) {
          LastPlayedDifficultyDeprecated = other.LastPlayedDifficultyDeprecated;
        }
        if (other.HasHighestUnlockedDifficultyDeprecated) {
          HighestUnlockedDifficultyDeprecated = other.HighestUnlockedDifficultyDeprecated;
        }
        if (other.HasLastPlayedQuest) {
          LastPlayedQuest = other.LastPlayedQuest;
        }
        if (other.HasLastPlayedQuestStep) {
          LastPlayedQuestStep = other.LastPlayedQuestStep;
        }
        if (other.HasTimePlayed) {
          TimePlayed = other.TimePlayed;
        }
        if (other.HasHighestCompletedDifficultyDeprecated) {
          HighestCompletedDifficultyDeprecated = other.HighestCompletedDifficultyDeprecated;
        }
        if (other.HasCreateTime) {
          CreateTime = other.CreateTime;
        }
        if (other.HasLastPlayedTime) {
          LastPlayedTime = other.LastPlayedTime;
        }
        if (other.HasDeleteTime) {
          DeleteTime = other.DeleteTime;
        }
        if (other.HasHighestSoloRiftCompleted) {
          HighestSoloRiftCompleted = other.HighestSoloRiftCompleted;
        }
        if (other.HasDeprecatedAltLevel) {
          DeprecatedAltLevel = other.DeprecatedAltLevel;
        }
        if (other.HasPvpRank) {
          PvpRank = other.PvpRank;
        }
        if (other.HasSeasonCreated) {
          SeasonCreated = other.SeasonCreated;
        }
        if (other.HasLastPlayedModeDeprecated) {
          LastPlayedModeDeprecated = other.LastPlayedModeDeprecated;
        }
        if (other.HasOriginalHeroId) {
          MergeOriginalHeroId(other.OriginalHeroId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_digestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _digestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadUInt32(ref result.version_);
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasHeroId) {
                subBuilder.MergeFrom(HeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              result.hasHeroName = input.ReadString(ref result.heroName_);
              break;
            }
            case 37: {
              result.hasGbidClass = input.ReadSFixed32(ref result.gbidClass_);
              break;
            }
            case 40: {
              result.hasLevel = input.ReadSInt32(ref result.level_);
              break;
            }
            case 48: {
              result.hasPlayerFlags = input.ReadUInt32(ref result.playerFlags_);
              break;
            }
            case 58: {
              global::D3.Hero.VisualEquipment.Builder subBuilder = global::D3.Hero.VisualEquipment.CreateBuilder();
              if (result.hasVisualEquipment) {
                subBuilder.MergeFrom(VisualEquipment);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              VisualEquipment = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.questHistory_, global::D3.Hero.QuestHistoryEntry.DefaultInstance, extensionRegistry);
              break;
            }
            case 72: {
              result.hasLastPlayedAct = input.ReadSInt32(ref result.lastPlayedAct_);
              break;
            }
            case 80: {
              result.hasHighestUnlockedAct = input.ReadSInt32(ref result.highestUnlockedAct_);
              break;
            }
            case 88: {
              result.hasLastPlayedDifficultyDeprecated = input.ReadSInt32(ref result.lastPlayedDifficultyDeprecated_);
              break;
            }
            case 96: {
              result.hasHighestUnlockedDifficultyDeprecated = input.ReadSInt32(ref result.highestUnlockedDifficultyDeprecated_);
              break;
            }
            case 109: {
              result.hasLastPlayedQuest = input.ReadSFixed32(ref result.lastPlayedQuest_);
              break;
            }
            case 112: {
              result.hasLastPlayedQuestStep = input.ReadSInt32(ref result.lastPlayedQuestStep_);
              break;
            }
            case 120: {
              result.hasTimePlayed = input.ReadUInt32(ref result.timePlayed_);
              break;
            }
            case 128: {
              result.hasHighestCompletedDifficultyDeprecated = input.ReadSInt32(ref result.highestCompletedDifficultyDeprecated_);
              break;
            }
            case 136: {
              result.hasCreateTime = input.ReadUInt32(ref result.createTime_);
              break;
            }
            case 144: {
              result.hasLastPlayedTime = input.ReadUInt32(ref result.lastPlayedTime_);
              break;
            }
            case 152: {
              result.hasDeleteTime = input.ReadUInt32(ref result.deleteTime_);
              break;
            }
            case 160: {
              result.hasDeprecatedAltLevel = input.ReadSInt32(ref result.deprecatedAltLevel_);
              break;
            }
            case 168: {
              result.hasPvpRank = input.ReadSInt32(ref result.pvpRank_);
              break;
            }
            case 176: {
              result.hasSeasonCreated = input.ReadUInt32(ref result.seasonCreated_);
              break;
            }
            case 184: {
              result.hasLastPlayedModeDeprecated = input.ReadUInt32(ref result.lastPlayedModeDeprecated_);
              break;
            }
            case 194: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasOriginalHeroId) {
                subBuilder.MergeFrom(OriginalHeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OriginalHeroId = subBuilder.BuildPartial();
              break;
            }
            case 200: {
              result.hasHighestSoloRiftCompleted = input.ReadUInt32(ref result.highestSoloRiftCompleted_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public uint Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(uint value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasHeroId {
       get { return result.hasHeroId; }
      }
      public global::D3.OnlineService.EntityId HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroId &&
            result.heroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.heroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.heroId_).MergeFrom(value).BuildPartial();
        } else {
          result.heroId_ = value;
        }
        result.hasHeroId = true;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = null;
        return this;
      }
      
      public bool HasHeroName {
        get { return result.hasHeroName; }
      }
      public string HeroName {
        get { return result.HeroName; }
        set { SetHeroName(value); }
      }
      public Builder SetHeroName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroName = true;
        result.heroName_ = value;
        return this;
      }
      public Builder ClearHeroName() {
        PrepareBuilder();
        result.hasHeroName = false;
        result.heroName_ = "";
        return this;
      }
      
      public bool HasGbidClass {
        get { return result.hasGbidClass; }
      }
      public int GbidClass {
        get { return result.GbidClass; }
        set { SetGbidClass(value); }
      }
      public Builder SetGbidClass(int value) {
        PrepareBuilder();
        result.hasGbidClass = true;
        result.gbidClass_ = value;
        return this;
      }
      public Builder ClearGbidClass() {
        PrepareBuilder();
        result.hasGbidClass = false;
        result.gbidClass_ = 0;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasPlayerFlags {
        get { return result.hasPlayerFlags; }
      }
      public uint PlayerFlags {
        get { return result.PlayerFlags; }
        set { SetPlayerFlags(value); }
      }
      public Builder SetPlayerFlags(uint value) {
        PrepareBuilder();
        result.hasPlayerFlags = true;
        result.playerFlags_ = value;
        return this;
      }
      public Builder ClearPlayerFlags() {
        PrepareBuilder();
        result.hasPlayerFlags = false;
        result.playerFlags_ = 0;
        return this;
      }
      
      public bool HasVisualEquipment {
       get { return result.hasVisualEquipment; }
      }
      public global::D3.Hero.VisualEquipment VisualEquipment {
        get { return result.VisualEquipment; }
        set { SetVisualEquipment(value); }
      }
      public Builder SetVisualEquipment(global::D3.Hero.VisualEquipment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVisualEquipment = true;
        result.visualEquipment_ = value;
        return this;
      }
      public Builder SetVisualEquipment(global::D3.Hero.VisualEquipment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasVisualEquipment = true;
        result.visualEquipment_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVisualEquipment(global::D3.Hero.VisualEquipment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasVisualEquipment &&
            result.visualEquipment_ != global::D3.Hero.VisualEquipment.DefaultInstance) {
            result.visualEquipment_ = global::D3.Hero.VisualEquipment.CreateBuilder(result.visualEquipment_).MergeFrom(value).BuildPartial();
        } else {
          result.visualEquipment_ = value;
        }
        result.hasVisualEquipment = true;
        return this;
      }
      public Builder ClearVisualEquipment() {
        PrepareBuilder();
        result.hasVisualEquipment = false;
        result.visualEquipment_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Hero.QuestHistoryEntry> QuestHistoryList {
        get { return PrepareBuilder().questHistory_; }
      }
      public int QuestHistoryCount {
        get { return result.QuestHistoryCount; }
      }
      public global::D3.Hero.QuestHistoryEntry GetQuestHistory(int index) {
        return result.GetQuestHistory(index);
      }
      public Builder SetQuestHistory(int index, global::D3.Hero.QuestHistoryEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.questHistory_[index] = value;
        return this;
      }
      public Builder SetQuestHistory(int index, global::D3.Hero.QuestHistoryEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.questHistory_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddQuestHistory(global::D3.Hero.QuestHistoryEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.questHistory_.Add(value);
        return this;
      }
      public Builder AddQuestHistory(global::D3.Hero.QuestHistoryEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.questHistory_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeQuestHistory(scg::IEnumerable<global::D3.Hero.QuestHistoryEntry> values) {
        PrepareBuilder();
        result.questHistory_.Add(values);
        return this;
      }
      public Builder ClearQuestHistory() {
        PrepareBuilder();
        result.questHistory_.Clear();
        return this;
      }
      
      public bool HasLastPlayedAct {
        get { return result.hasLastPlayedAct; }
      }
      public int LastPlayedAct {
        get { return result.LastPlayedAct; }
        set { SetLastPlayedAct(value); }
      }
      public Builder SetLastPlayedAct(int value) {
        PrepareBuilder();
        result.hasLastPlayedAct = true;
        result.lastPlayedAct_ = value;
        return this;
      }
      public Builder ClearLastPlayedAct() {
        PrepareBuilder();
        result.hasLastPlayedAct = false;
        result.lastPlayedAct_ = 0;
        return this;
      }
      
      public bool HasHighestUnlockedAct {
        get { return result.hasHighestUnlockedAct; }
      }
      public int HighestUnlockedAct {
        get { return result.HighestUnlockedAct; }
        set { SetHighestUnlockedAct(value); }
      }
      public Builder SetHighestUnlockedAct(int value) {
        PrepareBuilder();
        result.hasHighestUnlockedAct = true;
        result.highestUnlockedAct_ = value;
        return this;
      }
      public Builder ClearHighestUnlockedAct() {
        PrepareBuilder();
        result.hasHighestUnlockedAct = false;
        result.highestUnlockedAct_ = 0;
        return this;
      }
      
      public bool HasLastPlayedDifficultyDeprecated {
        get { return result.hasLastPlayedDifficultyDeprecated; }
      }
      public int LastPlayedDifficultyDeprecated {
        get { return result.LastPlayedDifficultyDeprecated; }
        set { SetLastPlayedDifficultyDeprecated(value); }
      }
      public Builder SetLastPlayedDifficultyDeprecated(int value) {
        PrepareBuilder();
        result.hasLastPlayedDifficultyDeprecated = true;
        result.lastPlayedDifficultyDeprecated_ = value;
        return this;
      }
      public Builder ClearLastPlayedDifficultyDeprecated() {
        PrepareBuilder();
        result.hasLastPlayedDifficultyDeprecated = false;
        result.lastPlayedDifficultyDeprecated_ = 0;
        return this;
      }
      
      public bool HasHighestUnlockedDifficultyDeprecated {
        get { return result.hasHighestUnlockedDifficultyDeprecated; }
      }
      public int HighestUnlockedDifficultyDeprecated {
        get { return result.HighestUnlockedDifficultyDeprecated; }
        set { SetHighestUnlockedDifficultyDeprecated(value); }
      }
      public Builder SetHighestUnlockedDifficultyDeprecated(int value) {
        PrepareBuilder();
        result.hasHighestUnlockedDifficultyDeprecated = true;
        result.highestUnlockedDifficultyDeprecated_ = value;
        return this;
      }
      public Builder ClearHighestUnlockedDifficultyDeprecated() {
        PrepareBuilder();
        result.hasHighestUnlockedDifficultyDeprecated = false;
        result.highestUnlockedDifficultyDeprecated_ = 0;
        return this;
      }
      
      public bool HasLastPlayedQuest {
        get { return result.hasLastPlayedQuest; }
      }
      public int LastPlayedQuest {
        get { return result.LastPlayedQuest; }
        set { SetLastPlayedQuest(value); }
      }
      public Builder SetLastPlayedQuest(int value) {
        PrepareBuilder();
        result.hasLastPlayedQuest = true;
        result.lastPlayedQuest_ = value;
        return this;
      }
      public Builder ClearLastPlayedQuest() {
        PrepareBuilder();
        result.hasLastPlayedQuest = false;
        result.lastPlayedQuest_ = 0;
        return this;
      }
      
      public bool HasLastPlayedQuestStep {
        get { return result.hasLastPlayedQuestStep; }
      }
      public int LastPlayedQuestStep {
        get { return result.LastPlayedQuestStep; }
        set { SetLastPlayedQuestStep(value); }
      }
      public Builder SetLastPlayedQuestStep(int value) {
        PrepareBuilder();
        result.hasLastPlayedQuestStep = true;
        result.lastPlayedQuestStep_ = value;
        return this;
      }
      public Builder ClearLastPlayedQuestStep() {
        PrepareBuilder();
        result.hasLastPlayedQuestStep = false;
        result.lastPlayedQuestStep_ = 0;
        return this;
      }
      
      public bool HasTimePlayed {
        get { return result.hasTimePlayed; }
      }
      public uint TimePlayed {
        get { return result.TimePlayed; }
        set { SetTimePlayed(value); }
      }
      public Builder SetTimePlayed(uint value) {
        PrepareBuilder();
        result.hasTimePlayed = true;
        result.timePlayed_ = value;
        return this;
      }
      public Builder ClearTimePlayed() {
        PrepareBuilder();
        result.hasTimePlayed = false;
        result.timePlayed_ = 0;
        return this;
      }
      
      public bool HasHighestCompletedDifficultyDeprecated {
        get { return result.hasHighestCompletedDifficultyDeprecated; }
      }
      public int HighestCompletedDifficultyDeprecated {
        get { return result.HighestCompletedDifficultyDeprecated; }
        set { SetHighestCompletedDifficultyDeprecated(value); }
      }
      public Builder SetHighestCompletedDifficultyDeprecated(int value) {
        PrepareBuilder();
        result.hasHighestCompletedDifficultyDeprecated = true;
        result.highestCompletedDifficultyDeprecated_ = value;
        return this;
      }
      public Builder ClearHighestCompletedDifficultyDeprecated() {
        PrepareBuilder();
        result.hasHighestCompletedDifficultyDeprecated = false;
        result.highestCompletedDifficultyDeprecated_ = -1;
        return this;
      }
      
      public bool HasCreateTime {
        get { return result.hasCreateTime; }
      }
      public uint CreateTime {
        get { return result.CreateTime; }
        set { SetCreateTime(value); }
      }
      public Builder SetCreateTime(uint value) {
        PrepareBuilder();
        result.hasCreateTime = true;
        result.createTime_ = value;
        return this;
      }
      public Builder ClearCreateTime() {
        PrepareBuilder();
        result.hasCreateTime = false;
        result.createTime_ = 0;
        return this;
      }
      
      public bool HasLastPlayedTime {
        get { return result.hasLastPlayedTime; }
      }
      public uint LastPlayedTime {
        get { return result.LastPlayedTime; }
        set { SetLastPlayedTime(value); }
      }
      public Builder SetLastPlayedTime(uint value) {
        PrepareBuilder();
        result.hasLastPlayedTime = true;
        result.lastPlayedTime_ = value;
        return this;
      }
      public Builder ClearLastPlayedTime() {
        PrepareBuilder();
        result.hasLastPlayedTime = false;
        result.lastPlayedTime_ = 0;
        return this;
      }
      
      public bool HasDeleteTime {
        get { return result.hasDeleteTime; }
      }
      public uint DeleteTime {
        get { return result.DeleteTime; }
        set { SetDeleteTime(value); }
      }
      public Builder SetDeleteTime(uint value) {
        PrepareBuilder();
        result.hasDeleteTime = true;
        result.deleteTime_ = value;
        return this;
      }
      public Builder ClearDeleteTime() {
        PrepareBuilder();
        result.hasDeleteTime = false;
        result.deleteTime_ = 0;
        return this;
      }
      
      public bool HasHighestSoloRiftCompleted {
        get { return result.hasHighestSoloRiftCompleted; }
      }
      public uint HighestSoloRiftCompleted {
        get { return result.HighestSoloRiftCompleted; }
        set { SetHighestSoloRiftCompleted(value); }
      }
      public Builder SetHighestSoloRiftCompleted(uint value) {
        PrepareBuilder();
        result.hasHighestSoloRiftCompleted = true;
        result.highestSoloRiftCompleted_ = value;
        return this;
      }
      public Builder ClearHighestSoloRiftCompleted() {
        PrepareBuilder();
        result.hasHighestSoloRiftCompleted = false;
        result.highestSoloRiftCompleted_ = 0;
        return this;
      }
      
      public bool HasDeprecatedAltLevel {
        get { return result.hasDeprecatedAltLevel; }
      }
      public int DeprecatedAltLevel {
        get { return result.DeprecatedAltLevel; }
        set { SetDeprecatedAltLevel(value); }
      }
      public Builder SetDeprecatedAltLevel(int value) {
        PrepareBuilder();
        result.hasDeprecatedAltLevel = true;
        result.deprecatedAltLevel_ = value;
        return this;
      }
      public Builder ClearDeprecatedAltLevel() {
        PrepareBuilder();
        result.hasDeprecatedAltLevel = false;
        result.deprecatedAltLevel_ = 0;
        return this;
      }
      
      public bool HasPvpRank {
        get { return result.hasPvpRank; }
      }
      public int PvpRank {
        get { return result.PvpRank; }
        set { SetPvpRank(value); }
      }
      public Builder SetPvpRank(int value) {
        PrepareBuilder();
        result.hasPvpRank = true;
        result.pvpRank_ = value;
        return this;
      }
      public Builder ClearPvpRank() {
        PrepareBuilder();
        result.hasPvpRank = false;
        result.pvpRank_ = 0;
        return this;
      }
      
      public bool HasSeasonCreated {
        get { return result.hasSeasonCreated; }
      }
      public uint SeasonCreated {
        get { return result.SeasonCreated; }
        set { SetSeasonCreated(value); }
      }
      public Builder SetSeasonCreated(uint value) {
        PrepareBuilder();
        result.hasSeasonCreated = true;
        result.seasonCreated_ = value;
        return this;
      }
      public Builder ClearSeasonCreated() {
        PrepareBuilder();
        result.hasSeasonCreated = false;
        result.seasonCreated_ = 0;
        return this;
      }
      
      public bool HasLastPlayedModeDeprecated {
        get { return result.hasLastPlayedModeDeprecated; }
      }
      public uint LastPlayedModeDeprecated {
        get { return result.LastPlayedModeDeprecated; }
        set { SetLastPlayedModeDeprecated(value); }
      }
      public Builder SetLastPlayedModeDeprecated(uint value) {
        PrepareBuilder();
        result.hasLastPlayedModeDeprecated = true;
        result.lastPlayedModeDeprecated_ = value;
        return this;
      }
      public Builder ClearLastPlayedModeDeprecated() {
        PrepareBuilder();
        result.hasLastPlayedModeDeprecated = false;
        result.lastPlayedModeDeprecated_ = 0;
        return this;
      }
      
      public bool HasOriginalHeroId {
       get { return result.hasOriginalHeroId; }
      }
      public global::D3.OnlineService.EntityId OriginalHeroId {
        get { return result.OriginalHeroId; }
        set { SetOriginalHeroId(value); }
      }
      public Builder SetOriginalHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOriginalHeroId = true;
        result.originalHeroId_ = value;
        return this;
      }
      public Builder SetOriginalHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOriginalHeroId = true;
        result.originalHeroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOriginalHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOriginalHeroId &&
            result.originalHeroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.originalHeroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.originalHeroId_).MergeFrom(value).BuildPartial();
        } else {
          result.originalHeroId_ = value;
        }
        result.hasOriginalHeroId = true;
        return this;
      }
      public Builder ClearOriginalHeroId() {
        PrepareBuilder();
        result.hasOriginalHeroId = false;
        result.originalHeroId_ = null;
        return this;
      }
    }
    static Digest() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DigestUI : pb::GeneratedMessage<DigestUI, DigestUI.Builder> {
    private DigestUI() { }
    private static readonly DigestUI defaultInstance = new DigestUI().MakeReadOnly();
    private static readonly string[] _digestUIFieldNames = new string[] { "highest_completed_difficulty_deprecated", "highest_solo_rift_completed", "highest_unlocked_act", "highest_unlocked_difficulty_deprecated", "last_played_act", "last_played_difficulty_deprecated", "last_played_mode_deprecated", "last_played_quest", "last_played_quest_step", "time_played" };
    private static readonly uint[] _digestUIFieldTags = new uint[] { 64, 80, 16, 32, 8, 24, 72, 45, 48, 56 };
    public static DigestUI DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DigestUI DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DigestUI ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_DigestUI__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DigestUI, DigestUI.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_DigestUI__FieldAccessorTable; }
    }
    
    public const int LastPlayedActFieldNumber = 1;
    private bool hasLastPlayedAct;
    private int lastPlayedAct_;
    public bool HasLastPlayedAct {
      get { return hasLastPlayedAct; }
    }
    public int LastPlayedAct {
      get { return lastPlayedAct_; }
    }
    
    public const int HighestUnlockedActFieldNumber = 2;
    private bool hasHighestUnlockedAct;
    private int highestUnlockedAct_;
    public bool HasHighestUnlockedAct {
      get { return hasHighestUnlockedAct; }
    }
    public int HighestUnlockedAct {
      get { return highestUnlockedAct_; }
    }
    
    public const int LastPlayedDifficultyDeprecatedFieldNumber = 3;
    private bool hasLastPlayedDifficultyDeprecated;
    private int lastPlayedDifficultyDeprecated_;
    public bool HasLastPlayedDifficultyDeprecated {
      get { return hasLastPlayedDifficultyDeprecated; }
    }
    public int LastPlayedDifficultyDeprecated {
      get { return lastPlayedDifficultyDeprecated_; }
    }
    
    public const int HighestUnlockedDifficultyDeprecatedFieldNumber = 4;
    private bool hasHighestUnlockedDifficultyDeprecated;
    private int highestUnlockedDifficultyDeprecated_;
    public bool HasHighestUnlockedDifficultyDeprecated {
      get { return hasHighestUnlockedDifficultyDeprecated; }
    }
    public int HighestUnlockedDifficultyDeprecated {
      get { return highestUnlockedDifficultyDeprecated_; }
    }
    
    public const int LastPlayedQuestFieldNumber = 5;
    private bool hasLastPlayedQuest;
    private int lastPlayedQuest_;
    public bool HasLastPlayedQuest {
      get { return hasLastPlayedQuest; }
    }
    public int LastPlayedQuest {
      get { return lastPlayedQuest_; }
    }
    
    public const int LastPlayedQuestStepFieldNumber = 6;
    private bool hasLastPlayedQuestStep;
    private int lastPlayedQuestStep_;
    public bool HasLastPlayedQuestStep {
      get { return hasLastPlayedQuestStep; }
    }
    public int LastPlayedQuestStep {
      get { return lastPlayedQuestStep_; }
    }
    
    public const int TimePlayedFieldNumber = 7;
    private bool hasTimePlayed;
    private uint timePlayed_;
    public bool HasTimePlayed {
      get { return hasTimePlayed; }
    }
    public uint TimePlayed {
      get { return timePlayed_; }
    }
    
    public const int HighestCompletedDifficultyDeprecatedFieldNumber = 8;
    private bool hasHighestCompletedDifficultyDeprecated;
    private int highestCompletedDifficultyDeprecated_;
    public bool HasHighestCompletedDifficultyDeprecated {
      get { return hasHighestCompletedDifficultyDeprecated; }
    }
    public int HighestCompletedDifficultyDeprecated {
      get { return highestCompletedDifficultyDeprecated_; }
    }
    
    public const int LastPlayedModeDeprecatedFieldNumber = 9;
    private bool hasLastPlayedModeDeprecated;
    private uint lastPlayedModeDeprecated_;
    public bool HasLastPlayedModeDeprecated {
      get { return hasLastPlayedModeDeprecated; }
    }
    public uint LastPlayedModeDeprecated {
      get { return lastPlayedModeDeprecated_; }
    }
    
    public const int HighestSoloRiftCompletedFieldNumber = 10;
    private bool hasHighestSoloRiftCompleted;
    private uint highestSoloRiftCompleted_;
    public bool HasHighestSoloRiftCompleted {
      get { return hasHighestSoloRiftCompleted; }
    }
    public uint HighestSoloRiftCompleted {
      get { return highestSoloRiftCompleted_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLastPlayedAct) return false;
        if (!hasHighestUnlockedAct) return false;
        if (!hasLastPlayedQuest) return false;
        if (!hasLastPlayedQuestStep) return false;
        if (!hasTimePlayed) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _digestUIFieldNames;
      if (hasLastPlayedAct) {
        output.WriteSInt32(1, field_names[4], LastPlayedAct);
      }
      if (hasHighestUnlockedAct) {
        output.WriteSInt32(2, field_names[2], HighestUnlockedAct);
      }
      if (hasLastPlayedDifficultyDeprecated) {
        output.WriteSInt32(3, field_names[5], LastPlayedDifficultyDeprecated);
      }
      if (hasHighestUnlockedDifficultyDeprecated) {
        output.WriteSInt32(4, field_names[3], HighestUnlockedDifficultyDeprecated);
      }
      if (hasLastPlayedQuest) {
        output.WriteSFixed32(5, field_names[7], LastPlayedQuest);
      }
      if (hasLastPlayedQuestStep) {
        output.WriteSInt32(6, field_names[8], LastPlayedQuestStep);
      }
      if (hasTimePlayed) {
        output.WriteUInt32(7, field_names[9], TimePlayed);
      }
      if (hasHighestCompletedDifficultyDeprecated) {
        output.WriteSInt32(8, field_names[0], HighestCompletedDifficultyDeprecated);
      }
      if (hasLastPlayedModeDeprecated) {
        output.WriteUInt32(9, field_names[6], LastPlayedModeDeprecated);
      }
      if (hasHighestSoloRiftCompleted) {
        output.WriteUInt32(10, field_names[1], HighestSoloRiftCompleted);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLastPlayedAct) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, LastPlayedAct);
        }
        if (hasHighestUnlockedAct) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, HighestUnlockedAct);
        }
        if (hasLastPlayedDifficultyDeprecated) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, LastPlayedDifficultyDeprecated);
        }
        if (hasHighestUnlockedDifficultyDeprecated) {
          size += pb::CodedOutputStream.ComputeSInt32Size(4, HighestUnlockedDifficultyDeprecated);
        }
        if (hasLastPlayedQuest) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(5, LastPlayedQuest);
        }
        if (hasLastPlayedQuestStep) {
          size += pb::CodedOutputStream.ComputeSInt32Size(6, LastPlayedQuestStep);
        }
        if (hasTimePlayed) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, TimePlayed);
        }
        if (hasHighestCompletedDifficultyDeprecated) {
          size += pb::CodedOutputStream.ComputeSInt32Size(8, HighestCompletedDifficultyDeprecated);
        }
        if (hasLastPlayedModeDeprecated) {
          size += pb::CodedOutputStream.ComputeUInt32Size(9, LastPlayedModeDeprecated);
        }
        if (hasHighestSoloRiftCompleted) {
          size += pb::CodedOutputStream.ComputeUInt32Size(10, HighestSoloRiftCompleted);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DigestUI ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DigestUI ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DigestUI ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DigestUI ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DigestUI ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DigestUI ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DigestUI ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DigestUI ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DigestUI ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DigestUI ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DigestUI MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DigestUI prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DigestUI, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DigestUI cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DigestUI result;
      
      private DigestUI PrepareBuilder() {
        if (resultIsReadOnly) {
          DigestUI original = result;
          result = new DigestUI();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DigestUI MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.DigestUI.Descriptor; }
      }
      
      public override DigestUI DefaultInstanceForType {
        get { return global::D3.Hero.DigestUI.DefaultInstance; }
      }
      
      public override DigestUI BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DigestUI) {
          return MergeFrom((DigestUI) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DigestUI other) {
        if (other == global::D3.Hero.DigestUI.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLastPlayedAct) {
          LastPlayedAct = other.LastPlayedAct;
        }
        if (other.HasHighestUnlockedAct) {
          HighestUnlockedAct = other.HighestUnlockedAct;
        }
        if (other.HasLastPlayedDifficultyDeprecated) {
          LastPlayedDifficultyDeprecated = other.LastPlayedDifficultyDeprecated;
        }
        if (other.HasHighestUnlockedDifficultyDeprecated) {
          HighestUnlockedDifficultyDeprecated = other.HighestUnlockedDifficultyDeprecated;
        }
        if (other.HasLastPlayedQuest) {
          LastPlayedQuest = other.LastPlayedQuest;
        }
        if (other.HasLastPlayedQuestStep) {
          LastPlayedQuestStep = other.LastPlayedQuestStep;
        }
        if (other.HasTimePlayed) {
          TimePlayed = other.TimePlayed;
        }
        if (other.HasHighestCompletedDifficultyDeprecated) {
          HighestCompletedDifficultyDeprecated = other.HighestCompletedDifficultyDeprecated;
        }
        if (other.HasLastPlayedModeDeprecated) {
          LastPlayedModeDeprecated = other.LastPlayedModeDeprecated;
        }
        if (other.HasHighestSoloRiftCompleted) {
          HighestSoloRiftCompleted = other.HighestSoloRiftCompleted;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_digestUIFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _digestUIFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLastPlayedAct = input.ReadSInt32(ref result.lastPlayedAct_);
              break;
            }
            case 16: {
              result.hasHighestUnlockedAct = input.ReadSInt32(ref result.highestUnlockedAct_);
              break;
            }
            case 24: {
              result.hasLastPlayedDifficultyDeprecated = input.ReadSInt32(ref result.lastPlayedDifficultyDeprecated_);
              break;
            }
            case 32: {
              result.hasHighestUnlockedDifficultyDeprecated = input.ReadSInt32(ref result.highestUnlockedDifficultyDeprecated_);
              break;
            }
            case 45: {
              result.hasLastPlayedQuest = input.ReadSFixed32(ref result.lastPlayedQuest_);
              break;
            }
            case 48: {
              result.hasLastPlayedQuestStep = input.ReadSInt32(ref result.lastPlayedQuestStep_);
              break;
            }
            case 56: {
              result.hasTimePlayed = input.ReadUInt32(ref result.timePlayed_);
              break;
            }
            case 64: {
              result.hasHighestCompletedDifficultyDeprecated = input.ReadSInt32(ref result.highestCompletedDifficultyDeprecated_);
              break;
            }
            case 72: {
              result.hasLastPlayedModeDeprecated = input.ReadUInt32(ref result.lastPlayedModeDeprecated_);
              break;
            }
            case 80: {
              result.hasHighestSoloRiftCompleted = input.ReadUInt32(ref result.highestSoloRiftCompleted_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLastPlayedAct {
        get { return result.hasLastPlayedAct; }
      }
      public int LastPlayedAct {
        get { return result.LastPlayedAct; }
        set { SetLastPlayedAct(value); }
      }
      public Builder SetLastPlayedAct(int value) {
        PrepareBuilder();
        result.hasLastPlayedAct = true;
        result.lastPlayedAct_ = value;
        return this;
      }
      public Builder ClearLastPlayedAct() {
        PrepareBuilder();
        result.hasLastPlayedAct = false;
        result.lastPlayedAct_ = 0;
        return this;
      }
      
      public bool HasHighestUnlockedAct {
        get { return result.hasHighestUnlockedAct; }
      }
      public int HighestUnlockedAct {
        get { return result.HighestUnlockedAct; }
        set { SetHighestUnlockedAct(value); }
      }
      public Builder SetHighestUnlockedAct(int value) {
        PrepareBuilder();
        result.hasHighestUnlockedAct = true;
        result.highestUnlockedAct_ = value;
        return this;
      }
      public Builder ClearHighestUnlockedAct() {
        PrepareBuilder();
        result.hasHighestUnlockedAct = false;
        result.highestUnlockedAct_ = 0;
        return this;
      }
      
      public bool HasLastPlayedDifficultyDeprecated {
        get { return result.hasLastPlayedDifficultyDeprecated; }
      }
      public int LastPlayedDifficultyDeprecated {
        get { return result.LastPlayedDifficultyDeprecated; }
        set { SetLastPlayedDifficultyDeprecated(value); }
      }
      public Builder SetLastPlayedDifficultyDeprecated(int value) {
        PrepareBuilder();
        result.hasLastPlayedDifficultyDeprecated = true;
        result.lastPlayedDifficultyDeprecated_ = value;
        return this;
      }
      public Builder ClearLastPlayedDifficultyDeprecated() {
        PrepareBuilder();
        result.hasLastPlayedDifficultyDeprecated = false;
        result.lastPlayedDifficultyDeprecated_ = 0;
        return this;
      }
      
      public bool HasHighestUnlockedDifficultyDeprecated {
        get { return result.hasHighestUnlockedDifficultyDeprecated; }
      }
      public int HighestUnlockedDifficultyDeprecated {
        get { return result.HighestUnlockedDifficultyDeprecated; }
        set { SetHighestUnlockedDifficultyDeprecated(value); }
      }
      public Builder SetHighestUnlockedDifficultyDeprecated(int value) {
        PrepareBuilder();
        result.hasHighestUnlockedDifficultyDeprecated = true;
        result.highestUnlockedDifficultyDeprecated_ = value;
        return this;
      }
      public Builder ClearHighestUnlockedDifficultyDeprecated() {
        PrepareBuilder();
        result.hasHighestUnlockedDifficultyDeprecated = false;
        result.highestUnlockedDifficultyDeprecated_ = 0;
        return this;
      }
      
      public bool HasLastPlayedQuest {
        get { return result.hasLastPlayedQuest; }
      }
      public int LastPlayedQuest {
        get { return result.LastPlayedQuest; }
        set { SetLastPlayedQuest(value); }
      }
      public Builder SetLastPlayedQuest(int value) {
        PrepareBuilder();
        result.hasLastPlayedQuest = true;
        result.lastPlayedQuest_ = value;
        return this;
      }
      public Builder ClearLastPlayedQuest() {
        PrepareBuilder();
        result.hasLastPlayedQuest = false;
        result.lastPlayedQuest_ = 0;
        return this;
      }
      
      public bool HasLastPlayedQuestStep {
        get { return result.hasLastPlayedQuestStep; }
      }
      public int LastPlayedQuestStep {
        get { return result.LastPlayedQuestStep; }
        set { SetLastPlayedQuestStep(value); }
      }
      public Builder SetLastPlayedQuestStep(int value) {
        PrepareBuilder();
        result.hasLastPlayedQuestStep = true;
        result.lastPlayedQuestStep_ = value;
        return this;
      }
      public Builder ClearLastPlayedQuestStep() {
        PrepareBuilder();
        result.hasLastPlayedQuestStep = false;
        result.lastPlayedQuestStep_ = 0;
        return this;
      }
      
      public bool HasTimePlayed {
        get { return result.hasTimePlayed; }
      }
      public uint TimePlayed {
        get { return result.TimePlayed; }
        set { SetTimePlayed(value); }
      }
      public Builder SetTimePlayed(uint value) {
        PrepareBuilder();
        result.hasTimePlayed = true;
        result.timePlayed_ = value;
        return this;
      }
      public Builder ClearTimePlayed() {
        PrepareBuilder();
        result.hasTimePlayed = false;
        result.timePlayed_ = 0;
        return this;
      }
      
      public bool HasHighestCompletedDifficultyDeprecated {
        get { return result.hasHighestCompletedDifficultyDeprecated; }
      }
      public int HighestCompletedDifficultyDeprecated {
        get { return result.HighestCompletedDifficultyDeprecated; }
        set { SetHighestCompletedDifficultyDeprecated(value); }
      }
      public Builder SetHighestCompletedDifficultyDeprecated(int value) {
        PrepareBuilder();
        result.hasHighestCompletedDifficultyDeprecated = true;
        result.highestCompletedDifficultyDeprecated_ = value;
        return this;
      }
      public Builder ClearHighestCompletedDifficultyDeprecated() {
        PrepareBuilder();
        result.hasHighestCompletedDifficultyDeprecated = false;
        result.highestCompletedDifficultyDeprecated_ = 0;
        return this;
      }
      
      public bool HasLastPlayedModeDeprecated {
        get { return result.hasLastPlayedModeDeprecated; }
      }
      public uint LastPlayedModeDeprecated {
        get { return result.LastPlayedModeDeprecated; }
        set { SetLastPlayedModeDeprecated(value); }
      }
      public Builder SetLastPlayedModeDeprecated(uint value) {
        PrepareBuilder();
        result.hasLastPlayedModeDeprecated = true;
        result.lastPlayedModeDeprecated_ = value;
        return this;
      }
      public Builder ClearLastPlayedModeDeprecated() {
        PrepareBuilder();
        result.hasLastPlayedModeDeprecated = false;
        result.lastPlayedModeDeprecated_ = 0;
        return this;
      }
      
      public bool HasHighestSoloRiftCompleted {
        get { return result.hasHighestSoloRiftCompleted; }
      }
      public uint HighestSoloRiftCompleted {
        get { return result.HighestSoloRiftCompleted; }
        set { SetHighestSoloRiftCompleted(value); }
      }
      public Builder SetHighestSoloRiftCompleted(uint value) {
        PrepareBuilder();
        result.hasHighestSoloRiftCompleted = true;
        result.highestSoloRiftCompleted_ = value;
        return this;
      }
      public Builder ClearHighestSoloRiftCompleted() {
        PrepareBuilder();
        result.hasHighestSoloRiftCompleted = false;
        result.highestSoloRiftCompleted_ = 0;
        return this;
      }
    }
    static DigestUI() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavedData : pb::GeneratedMessage<SavedData, SavedData.Builder> {
    private SavedData() { }
    private static readonly SavedData defaultInstance = new SavedData().MakeReadOnly();
    private static readonly string[] _savedDataFieldNames = new string[] { "activated_waypoints", "active_skills", "boss_kill_flags", "event_flags", "gbid_legendary_powers", "gbid_potion_button", "hireling_saved_data", "last_level_time", "learned_lore", "main_quest_handicap_snapshot", "potion_button_item", "save_point", "saved_conversations", "skill_kit_version", "skill_slot_ever_assigned", "skill_version", "sno_traits", "time_played" };
    private static readonly uint[] _savedDataFieldTags = new uint[] { 16, 82, 104, 112, 149, 77, 26, 32, 42, 136, 130, 66, 50, 120, 90, 96, 61, 8 };
    public static SavedData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavedData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedData, SavedData.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedData__FieldAccessorTable; }
    }
    
    public const int TimePlayedFieldNumber = 1;
    private bool hasTimePlayed;
    private uint timePlayed_;
    public bool HasTimePlayed {
      get { return hasTimePlayed; }
    }
    public uint TimePlayed {
      get { return timePlayed_; }
    }
    
    public const int ActivatedWaypointsFieldNumber = 2;
    private bool hasActivatedWaypoints;
    private uint activatedWaypoints_;
    public bool HasActivatedWaypoints {
      get { return hasActivatedWaypoints; }
    }
    public uint ActivatedWaypoints {
      get { return activatedWaypoints_; }
    }
    
    public const int HirelingSavedDataFieldNumber = 3;
    private bool hasHirelingSavedData;
    private global::D3.Hireling.SavedData hirelingSavedData_;
    public bool HasHirelingSavedData {
      get { return hasHirelingSavedData; }
    }
    public global::D3.Hireling.SavedData HirelingSavedData {
      get { return hirelingSavedData_ ?? global::D3.Hireling.SavedData.DefaultInstance; }
    }
    
    public const int LastLevelTimeFieldNumber = 4;
    private bool hasLastLevelTime;
    private uint lastLevelTime_;
    public bool HasLastLevelTime {
      get { return hasLastLevelTime; }
    }
    public uint LastLevelTime {
      get { return lastLevelTime_; }
    }
    
    public const int LearnedLoreFieldNumber = 5;
    private bool hasLearnedLore;
    private global::D3.GameBalance.BitPackedGbidArray learnedLore_;
    public bool HasLearnedLore {
      get { return hasLearnedLore; }
    }
    public global::D3.GameBalance.BitPackedGbidArray LearnedLore {
      get { return learnedLore_ ?? global::D3.GameBalance.BitPackedGbidArray.DefaultInstance; }
    }
    
    public const int SavedConversationsFieldNumber = 6;
    private bool hasSavedConversations;
    private global::D3.Hero.SavedConversations savedConversations_;
    public bool HasSavedConversations {
      get { return hasSavedConversations; }
    }
    public global::D3.Hero.SavedConversations SavedConversations {
      get { return savedConversations_ ?? global::D3.Hero.SavedConversations.DefaultInstance; }
    }
    
    public const int SnoTraitsFieldNumber = 7;
    private pbc::PopsicleList<int> snoTraits_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SnoTraitsList {
      get { return pbc::Lists.AsReadOnly(snoTraits_); }
    }
    public int SnoTraitsCount {
      get { return snoTraits_.Count; }
    }
    public int GetSnoTraits(int index) {
      return snoTraits_[index];
    }
    
    public const int SavePointFieldNumber = 8;
    private bool hasSavePoint;
    private global::D3.Hero.SavePointData_Proto savePoint_;
    public bool HasSavePoint {
      get { return hasSavePoint; }
    }
    public global::D3.Hero.SavePointData_Proto SavePoint {
      get { return savePoint_ ?? global::D3.Hero.SavePointData_Proto.DefaultInstance; }
    }
    
    public const int GbidPotionButtonFieldNumber = 9;
    private bool hasGbidPotionButton;
    private int gbidPotionButton_ = -1;
    public bool HasGbidPotionButton {
      get { return hasGbidPotionButton; }
    }
    public int GbidPotionButton {
      get { return gbidPotionButton_; }
    }
    
    public const int ActiveSkillsFieldNumber = 10;
    private pbc::PopsicleList<global::D3.Hero.SkillWithRune> activeSkills_ = new pbc::PopsicleList<global::D3.Hero.SkillWithRune>();
    public scg::IList<global::D3.Hero.SkillWithRune> ActiveSkillsList {
      get { return activeSkills_; }
    }
    public int ActiveSkillsCount {
      get { return activeSkills_.Count; }
    }
    public global::D3.Hero.SkillWithRune GetActiveSkills(int index) {
      return activeSkills_[index];
    }
    
    public const int SkillSlotEverAssignedFieldNumber = 11;
    private bool hasSkillSlotEverAssigned;
    private pb::ByteString skillSlotEverAssigned_ = pb::ByteString.Empty;
    public bool HasSkillSlotEverAssigned {
      get { return hasSkillSlotEverAssigned; }
    }
    public pb::ByteString SkillSlotEverAssigned {
      get { return skillSlotEverAssigned_; }
    }
    
    public const int SkillVersionFieldNumber = 12;
    private bool hasSkillVersion;
    private uint skillVersion_;
    public bool HasSkillVersion {
      get { return hasSkillVersion; }
    }
    public uint SkillVersion {
      get { return skillVersion_; }
    }
    
    public const int BossKillFlagsFieldNumber = 13;
    private pbc::PopsicleList<uint> bossKillFlags_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> BossKillFlagsList {
      get { return pbc::Lists.AsReadOnly(bossKillFlags_); }
    }
    public int BossKillFlagsCount {
      get { return bossKillFlags_.Count; }
    }
    public uint GetBossKillFlags(int index) {
      return bossKillFlags_[index];
    }
    
    public const int EventFlagsFieldNumber = 14;
    private bool hasEventFlags;
    private uint eventFlags_;
    public bool HasEventFlags {
      get { return hasEventFlags; }
    }
    public uint EventFlags {
      get { return eventFlags_; }
    }
    
    public const int SkillKitVersionFieldNumber = 15;
    private bool hasSkillKitVersion;
    private uint skillKitVersion_;
    public bool HasSkillKitVersion {
      get { return hasSkillKitVersion; }
    }
    public uint SkillKitVersion {
      get { return skillKitVersion_; }
    }
    
    public const int PotionButtonItemFieldNumber = 16;
    private bool hasPotionButtonItem;
    private global::D3.Hero.SavedItemLink potionButtonItem_;
    public bool HasPotionButtonItem {
      get { return hasPotionButtonItem; }
    }
    public global::D3.Hero.SavedItemLink PotionButtonItem {
      get { return potionButtonItem_ ?? global::D3.Hero.SavedItemLink.DefaultInstance; }
    }
    
    public const int MainQuestHandicapSnapshotFieldNumber = 17;
    private bool hasMainQuestHandicapSnapshot;
    private int mainQuestHandicapSnapshot_ = -1;
    public bool HasMainQuestHandicapSnapshot {
      get { return hasMainQuestHandicapSnapshot; }
    }
    public int MainQuestHandicapSnapshot {
      get { return mainQuestHandicapSnapshot_; }
    }
    
    public const int GbidLegendaryPowersFieldNumber = 18;
    private pbc::PopsicleList<int> gbidLegendaryPowers_ = new pbc::PopsicleList<int>();
    public scg::IList<int> GbidLegendaryPowersList {
      get { return pbc::Lists.AsReadOnly(gbidLegendaryPowers_); }
    }
    public int GbidLegendaryPowersCount {
      get { return gbidLegendaryPowers_.Count; }
    }
    public int GetGbidLegendaryPowers(int index) {
      return gbidLegendaryPowers_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTimePlayed) return false;
        if (!hasActivatedWaypoints) return false;
        if (!hasHirelingSavedData) return false;
        if (!hasLastLevelTime) return false;
        if (!hasLearnedLore) return false;
        if (!hasSavedConversations) return false;
        if (!hasSavePoint) return false;
        if (!hasGbidPotionButton) return false;
        if (!hasSkillSlotEverAssigned) return false;
        if (!hasSkillVersion) return false;
        if (!HirelingSavedData.IsInitialized) return false;
        if (!SavedConversations.IsInitialized) return false;
        if (!SavePoint.IsInitialized) return false;
        foreach (global::D3.Hero.SkillWithRune element in ActiveSkillsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasPotionButtonItem) {
          if (!PotionButtonItem.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savedDataFieldNames;
      if (hasTimePlayed) {
        output.WriteUInt32(1, field_names[17], TimePlayed);
      }
      if (hasActivatedWaypoints) {
        output.WriteUInt32(2, field_names[0], ActivatedWaypoints);
      }
      if (hasHirelingSavedData) {
        output.WriteMessage(3, field_names[6], HirelingSavedData);
      }
      if (hasLastLevelTime) {
        output.WriteUInt32(4, field_names[7], LastLevelTime);
      }
      if (hasLearnedLore) {
        output.WriteMessage(5, field_names[8], LearnedLore);
      }
      if (hasSavedConversations) {
        output.WriteMessage(6, field_names[12], SavedConversations);
      }
      if (snoTraits_.Count > 0) {
        output.WriteSFixed32Array(7, field_names[16], snoTraits_);
      }
      if (hasSavePoint) {
        output.WriteMessage(8, field_names[11], SavePoint);
      }
      if (hasGbidPotionButton) {
        output.WriteSFixed32(9, field_names[5], GbidPotionButton);
      }
      if (activeSkills_.Count > 0) {
        output.WriteMessageArray(10, field_names[1], activeSkills_);
      }
      if (hasSkillSlotEverAssigned) {
        output.WriteBytes(11, field_names[14], SkillSlotEverAssigned);
      }
      if (hasSkillVersion) {
        output.WriteUInt32(12, field_names[15], SkillVersion);
      }
      if (bossKillFlags_.Count > 0) {
        output.WriteUInt32Array(13, field_names[2], bossKillFlags_);
      }
      if (hasEventFlags) {
        output.WriteUInt32(14, field_names[3], EventFlags);
      }
      if (hasSkillKitVersion) {
        output.WriteUInt32(15, field_names[13], SkillKitVersion);
      }
      if (hasPotionButtonItem) {
        output.WriteMessage(16, field_names[10], PotionButtonItem);
      }
      if (hasMainQuestHandicapSnapshot) {
        output.WriteInt32(17, field_names[9], MainQuestHandicapSnapshot);
      }
      if (gbidLegendaryPowers_.Count > 0) {
        output.WriteSFixed32Array(18, field_names[4], gbidLegendaryPowers_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTimePlayed) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, TimePlayed);
        }
        if (hasActivatedWaypoints) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, ActivatedWaypoints);
        }
        if (hasHirelingSavedData) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, HirelingSavedData);
        }
        if (hasLastLevelTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, LastLevelTime);
        }
        if (hasLearnedLore) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, LearnedLore);
        }
        if (hasSavedConversations) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, SavedConversations);
        }
        {
          int dataSize = 0;
          dataSize = 4 * snoTraits_.Count;
          size += dataSize;
          size += 1 * snoTraits_.Count;
        }
        if (hasSavePoint) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, SavePoint);
        }
        if (hasGbidPotionButton) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(9, GbidPotionButton);
        }
        foreach (global::D3.Hero.SkillWithRune element in ActiveSkillsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        if (hasSkillSlotEverAssigned) {
          size += pb::CodedOutputStream.ComputeBytesSize(11, SkillSlotEverAssigned);
        }
        if (hasSkillVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(12, SkillVersion);
        }
        {
          int dataSize = 0;
          foreach (uint element in BossKillFlagsList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * bossKillFlags_.Count;
        }
        if (hasEventFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(14, EventFlags);
        }
        if (hasSkillKitVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(15, SkillKitVersion);
        }
        if (hasPotionButtonItem) {
          size += pb::CodedOutputStream.ComputeMessageSize(16, PotionButtonItem);
        }
        if (hasMainQuestHandicapSnapshot) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, MainQuestHandicapSnapshot);
        }
        {
          int dataSize = 0;
          dataSize = 4 * gbidLegendaryPowers_.Count;
          size += dataSize;
          size += 2 * gbidLegendaryPowers_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavedData MakeReadOnly() {
      snoTraits_.MakeReadOnly();
      activeSkills_.MakeReadOnly();
      bossKillFlags_.MakeReadOnly();
      gbidLegendaryPowers_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavedData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavedData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavedData result;
      
      private SavedData PrepareBuilder() {
        if (resultIsReadOnly) {
          SavedData original = result;
          result = new SavedData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavedData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SavedData.Descriptor; }
      }
      
      public override SavedData DefaultInstanceForType {
        get { return global::D3.Hero.SavedData.DefaultInstance; }
      }
      
      public override SavedData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedData) {
          return MergeFrom((SavedData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedData other) {
        if (other == global::D3.Hero.SavedData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimePlayed) {
          TimePlayed = other.TimePlayed;
        }
        if (other.HasActivatedWaypoints) {
          ActivatedWaypoints = other.ActivatedWaypoints;
        }
        if (other.HasHirelingSavedData) {
          MergeHirelingSavedData(other.HirelingSavedData);
        }
        if (other.HasLastLevelTime) {
          LastLevelTime = other.LastLevelTime;
        }
        if (other.HasLearnedLore) {
          MergeLearnedLore(other.LearnedLore);
        }
        if (other.HasSavedConversations) {
          MergeSavedConversations(other.SavedConversations);
        }
        if (other.snoTraits_.Count != 0) {
          result.snoTraits_.Add(other.snoTraits_);
        }
        if (other.HasSavePoint) {
          MergeSavePoint(other.SavePoint);
        }
        if (other.HasGbidPotionButton) {
          GbidPotionButton = other.GbidPotionButton;
        }
        if (other.activeSkills_.Count != 0) {
          result.activeSkills_.Add(other.activeSkills_);
        }
        if (other.HasSkillSlotEverAssigned) {
          SkillSlotEverAssigned = other.SkillSlotEverAssigned;
        }
        if (other.HasSkillVersion) {
          SkillVersion = other.SkillVersion;
        }
        if (other.bossKillFlags_.Count != 0) {
          result.bossKillFlags_.Add(other.bossKillFlags_);
        }
        if (other.HasEventFlags) {
          EventFlags = other.EventFlags;
        }
        if (other.HasSkillKitVersion) {
          SkillKitVersion = other.SkillKitVersion;
        }
        if (other.HasPotionButtonItem) {
          MergePotionButtonItem(other.PotionButtonItem);
        }
        if (other.HasMainQuestHandicapSnapshot) {
          MainQuestHandicapSnapshot = other.MainQuestHandicapSnapshot;
        }
        if (other.gbidLegendaryPowers_.Count != 0) {
          result.gbidLegendaryPowers_.Add(other.gbidLegendaryPowers_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savedDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savedDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimePlayed = input.ReadUInt32(ref result.timePlayed_);
              break;
            }
            case 16: {
              result.hasActivatedWaypoints = input.ReadUInt32(ref result.activatedWaypoints_);
              break;
            }
            case 26: {
              global::D3.Hireling.SavedData.Builder subBuilder = global::D3.Hireling.SavedData.CreateBuilder();
              if (result.hasHirelingSavedData) {
                subBuilder.MergeFrom(HirelingSavedData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HirelingSavedData = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasLastLevelTime = input.ReadUInt32(ref result.lastLevelTime_);
              break;
            }
            case 42: {
              global::D3.GameBalance.BitPackedGbidArray.Builder subBuilder = global::D3.GameBalance.BitPackedGbidArray.CreateBuilder();
              if (result.hasLearnedLore) {
                subBuilder.MergeFrom(LearnedLore);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LearnedLore = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::D3.Hero.SavedConversations.Builder subBuilder = global::D3.Hero.SavedConversations.CreateBuilder();
              if (result.hasSavedConversations) {
                subBuilder.MergeFrom(SavedConversations);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SavedConversations = subBuilder.BuildPartial();
              break;
            }
            case 58:
            case 61: {
              input.ReadSFixed32Array(tag, field_name, result.snoTraits_);
              break;
            }
            case 66: {
              global::D3.Hero.SavePointData_Proto.Builder subBuilder = global::D3.Hero.SavePointData_Proto.CreateBuilder();
              if (result.hasSavePoint) {
                subBuilder.MergeFrom(SavePoint);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SavePoint = subBuilder.BuildPartial();
              break;
            }
            case 77: {
              result.hasGbidPotionButton = input.ReadSFixed32(ref result.gbidPotionButton_);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.activeSkills_, global::D3.Hero.SkillWithRune.DefaultInstance, extensionRegistry);
              break;
            }
            case 90: {
              result.hasSkillSlotEverAssigned = input.ReadBytes(ref result.skillSlotEverAssigned_);
              break;
            }
            case 96: {
              result.hasSkillVersion = input.ReadUInt32(ref result.skillVersion_);
              break;
            }
            case 106:
            case 104: {
              input.ReadUInt32Array(tag, field_name, result.bossKillFlags_);
              break;
            }
            case 112: {
              result.hasEventFlags = input.ReadUInt32(ref result.eventFlags_);
              break;
            }
            case 120: {
              result.hasSkillKitVersion = input.ReadUInt32(ref result.skillKitVersion_);
              break;
            }
            case 130: {
              global::D3.Hero.SavedItemLink.Builder subBuilder = global::D3.Hero.SavedItemLink.CreateBuilder();
              if (result.hasPotionButtonItem) {
                subBuilder.MergeFrom(PotionButtonItem);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PotionButtonItem = subBuilder.BuildPartial();
              break;
            }
            case 136: {
              result.hasMainQuestHandicapSnapshot = input.ReadInt32(ref result.mainQuestHandicapSnapshot_);
              break;
            }
            case 146:
            case 149: {
              input.ReadSFixed32Array(tag, field_name, result.gbidLegendaryPowers_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimePlayed {
        get { return result.hasTimePlayed; }
      }
      public uint TimePlayed {
        get { return result.TimePlayed; }
        set { SetTimePlayed(value); }
      }
      public Builder SetTimePlayed(uint value) {
        PrepareBuilder();
        result.hasTimePlayed = true;
        result.timePlayed_ = value;
        return this;
      }
      public Builder ClearTimePlayed() {
        PrepareBuilder();
        result.hasTimePlayed = false;
        result.timePlayed_ = 0;
        return this;
      }
      
      public bool HasActivatedWaypoints {
        get { return result.hasActivatedWaypoints; }
      }
      public uint ActivatedWaypoints {
        get { return result.ActivatedWaypoints; }
        set { SetActivatedWaypoints(value); }
      }
      public Builder SetActivatedWaypoints(uint value) {
        PrepareBuilder();
        result.hasActivatedWaypoints = true;
        result.activatedWaypoints_ = value;
        return this;
      }
      public Builder ClearActivatedWaypoints() {
        PrepareBuilder();
        result.hasActivatedWaypoints = false;
        result.activatedWaypoints_ = 0;
        return this;
      }
      
      public bool HasHirelingSavedData {
       get { return result.hasHirelingSavedData; }
      }
      public global::D3.Hireling.SavedData HirelingSavedData {
        get { return result.HirelingSavedData; }
        set { SetHirelingSavedData(value); }
      }
      public Builder SetHirelingSavedData(global::D3.Hireling.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHirelingSavedData = true;
        result.hirelingSavedData_ = value;
        return this;
      }
      public Builder SetHirelingSavedData(global::D3.Hireling.SavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHirelingSavedData = true;
        result.hirelingSavedData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHirelingSavedData(global::D3.Hireling.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHirelingSavedData &&
            result.hirelingSavedData_ != global::D3.Hireling.SavedData.DefaultInstance) {
            result.hirelingSavedData_ = global::D3.Hireling.SavedData.CreateBuilder(result.hirelingSavedData_).MergeFrom(value).BuildPartial();
        } else {
          result.hirelingSavedData_ = value;
        }
        result.hasHirelingSavedData = true;
        return this;
      }
      public Builder ClearHirelingSavedData() {
        PrepareBuilder();
        result.hasHirelingSavedData = false;
        result.hirelingSavedData_ = null;
        return this;
      }
      
      public bool HasLastLevelTime {
        get { return result.hasLastLevelTime; }
      }
      public uint LastLevelTime {
        get { return result.LastLevelTime; }
        set { SetLastLevelTime(value); }
      }
      public Builder SetLastLevelTime(uint value) {
        PrepareBuilder();
        result.hasLastLevelTime = true;
        result.lastLevelTime_ = value;
        return this;
      }
      public Builder ClearLastLevelTime() {
        PrepareBuilder();
        result.hasLastLevelTime = false;
        result.lastLevelTime_ = 0;
        return this;
      }
      
      public bool HasLearnedLore {
       get { return result.hasLearnedLore; }
      }
      public global::D3.GameBalance.BitPackedGbidArray LearnedLore {
        get { return result.LearnedLore; }
        set { SetLearnedLore(value); }
      }
      public Builder SetLearnedLore(global::D3.GameBalance.BitPackedGbidArray value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLearnedLore = true;
        result.learnedLore_ = value;
        return this;
      }
      public Builder SetLearnedLore(global::D3.GameBalance.BitPackedGbidArray.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLearnedLore = true;
        result.learnedLore_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLearnedLore(global::D3.GameBalance.BitPackedGbidArray value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLearnedLore &&
            result.learnedLore_ != global::D3.GameBalance.BitPackedGbidArray.DefaultInstance) {
            result.learnedLore_ = global::D3.GameBalance.BitPackedGbidArray.CreateBuilder(result.learnedLore_).MergeFrom(value).BuildPartial();
        } else {
          result.learnedLore_ = value;
        }
        result.hasLearnedLore = true;
        return this;
      }
      public Builder ClearLearnedLore() {
        PrepareBuilder();
        result.hasLearnedLore = false;
        result.learnedLore_ = null;
        return this;
      }
      
      public bool HasSavedConversations {
       get { return result.hasSavedConversations; }
      }
      public global::D3.Hero.SavedConversations SavedConversations {
        get { return result.SavedConversations; }
        set { SetSavedConversations(value); }
      }
      public Builder SetSavedConversations(global::D3.Hero.SavedConversations value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSavedConversations = true;
        result.savedConversations_ = value;
        return this;
      }
      public Builder SetSavedConversations(global::D3.Hero.SavedConversations.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSavedConversations = true;
        result.savedConversations_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSavedConversations(global::D3.Hero.SavedConversations value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSavedConversations &&
            result.savedConversations_ != global::D3.Hero.SavedConversations.DefaultInstance) {
            result.savedConversations_ = global::D3.Hero.SavedConversations.CreateBuilder(result.savedConversations_).MergeFrom(value).BuildPartial();
        } else {
          result.savedConversations_ = value;
        }
        result.hasSavedConversations = true;
        return this;
      }
      public Builder ClearSavedConversations() {
        PrepareBuilder();
        result.hasSavedConversations = false;
        result.savedConversations_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<int> SnoTraitsList {
        get { return PrepareBuilder().snoTraits_; }
      }
      public int SnoTraitsCount {
        get { return result.SnoTraitsCount; }
      }
      public int GetSnoTraits(int index) {
        return result.GetSnoTraits(index);
      }
      public Builder SetSnoTraits(int index, int value) {
        PrepareBuilder();
        result.snoTraits_[index] = value;
        return this;
      }
      public Builder AddSnoTraits(int value) {
        PrepareBuilder();
        result.snoTraits_.Add(value);
        return this;
      }
      public Builder AddRangeSnoTraits(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.snoTraits_.Add(values);
        return this;
      }
      public Builder ClearSnoTraits() {
        PrepareBuilder();
        result.snoTraits_.Clear();
        return this;
      }
      
      public bool HasSavePoint {
       get { return result.hasSavePoint; }
      }
      public global::D3.Hero.SavePointData_Proto SavePoint {
        get { return result.SavePoint; }
        set { SetSavePoint(value); }
      }
      public Builder SetSavePoint(global::D3.Hero.SavePointData_Proto value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSavePoint = true;
        result.savePoint_ = value;
        return this;
      }
      public Builder SetSavePoint(global::D3.Hero.SavePointData_Proto.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSavePoint = true;
        result.savePoint_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSavePoint(global::D3.Hero.SavePointData_Proto value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSavePoint &&
            result.savePoint_ != global::D3.Hero.SavePointData_Proto.DefaultInstance) {
            result.savePoint_ = global::D3.Hero.SavePointData_Proto.CreateBuilder(result.savePoint_).MergeFrom(value).BuildPartial();
        } else {
          result.savePoint_ = value;
        }
        result.hasSavePoint = true;
        return this;
      }
      public Builder ClearSavePoint() {
        PrepareBuilder();
        result.hasSavePoint = false;
        result.savePoint_ = null;
        return this;
      }
      
      public bool HasGbidPotionButton {
        get { return result.hasGbidPotionButton; }
      }
      public int GbidPotionButton {
        get { return result.GbidPotionButton; }
        set { SetGbidPotionButton(value); }
      }
      public Builder SetGbidPotionButton(int value) {
        PrepareBuilder();
        result.hasGbidPotionButton = true;
        result.gbidPotionButton_ = value;
        return this;
      }
      public Builder ClearGbidPotionButton() {
        PrepareBuilder();
        result.hasGbidPotionButton = false;
        result.gbidPotionButton_ = -1;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Hero.SkillWithRune> ActiveSkillsList {
        get { return PrepareBuilder().activeSkills_; }
      }
      public int ActiveSkillsCount {
        get { return result.ActiveSkillsCount; }
      }
      public global::D3.Hero.SkillWithRune GetActiveSkills(int index) {
        return result.GetActiveSkills(index);
      }
      public Builder SetActiveSkills(int index, global::D3.Hero.SkillWithRune value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.activeSkills_[index] = value;
        return this;
      }
      public Builder SetActiveSkills(int index, global::D3.Hero.SkillWithRune.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.activeSkills_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddActiveSkills(global::D3.Hero.SkillWithRune value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.activeSkills_.Add(value);
        return this;
      }
      public Builder AddActiveSkills(global::D3.Hero.SkillWithRune.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.activeSkills_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeActiveSkills(scg::IEnumerable<global::D3.Hero.SkillWithRune> values) {
        PrepareBuilder();
        result.activeSkills_.Add(values);
        return this;
      }
      public Builder ClearActiveSkills() {
        PrepareBuilder();
        result.activeSkills_.Clear();
        return this;
      }
      
      public bool HasSkillSlotEverAssigned {
        get { return result.hasSkillSlotEverAssigned; }
      }
      public pb::ByteString SkillSlotEverAssigned {
        get { return result.SkillSlotEverAssigned; }
        set { SetSkillSlotEverAssigned(value); }
      }
      public Builder SetSkillSlotEverAssigned(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSkillSlotEverAssigned = true;
        result.skillSlotEverAssigned_ = value;
        return this;
      }
      public Builder ClearSkillSlotEverAssigned() {
        PrepareBuilder();
        result.hasSkillSlotEverAssigned = false;
        result.skillSlotEverAssigned_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasSkillVersion {
        get { return result.hasSkillVersion; }
      }
      public uint SkillVersion {
        get { return result.SkillVersion; }
        set { SetSkillVersion(value); }
      }
      public Builder SetSkillVersion(uint value) {
        PrepareBuilder();
        result.hasSkillVersion = true;
        result.skillVersion_ = value;
        return this;
      }
      public Builder ClearSkillVersion() {
        PrepareBuilder();
        result.hasSkillVersion = false;
        result.skillVersion_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<uint> BossKillFlagsList {
        get { return PrepareBuilder().bossKillFlags_; }
      }
      public int BossKillFlagsCount {
        get { return result.BossKillFlagsCount; }
      }
      public uint GetBossKillFlags(int index) {
        return result.GetBossKillFlags(index);
      }
      public Builder SetBossKillFlags(int index, uint value) {
        PrepareBuilder();
        result.bossKillFlags_[index] = value;
        return this;
      }
      public Builder AddBossKillFlags(uint value) {
        PrepareBuilder();
        result.bossKillFlags_.Add(value);
        return this;
      }
      public Builder AddRangeBossKillFlags(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.bossKillFlags_.Add(values);
        return this;
      }
      public Builder ClearBossKillFlags() {
        PrepareBuilder();
        result.bossKillFlags_.Clear();
        return this;
      }
      
      public bool HasEventFlags {
        get { return result.hasEventFlags; }
      }
      public uint EventFlags {
        get { return result.EventFlags; }
        set { SetEventFlags(value); }
      }
      public Builder SetEventFlags(uint value) {
        PrepareBuilder();
        result.hasEventFlags = true;
        result.eventFlags_ = value;
        return this;
      }
      public Builder ClearEventFlags() {
        PrepareBuilder();
        result.hasEventFlags = false;
        result.eventFlags_ = 0;
        return this;
      }
      
      public bool HasSkillKitVersion {
        get { return result.hasSkillKitVersion; }
      }
      public uint SkillKitVersion {
        get { return result.SkillKitVersion; }
        set { SetSkillKitVersion(value); }
      }
      public Builder SetSkillKitVersion(uint value) {
        PrepareBuilder();
        result.hasSkillKitVersion = true;
        result.skillKitVersion_ = value;
        return this;
      }
      public Builder ClearSkillKitVersion() {
        PrepareBuilder();
        result.hasSkillKitVersion = false;
        result.skillKitVersion_ = 0;
        return this;
      }
      
      public bool HasPotionButtonItem {
       get { return result.hasPotionButtonItem; }
      }
      public global::D3.Hero.SavedItemLink PotionButtonItem {
        get { return result.PotionButtonItem; }
        set { SetPotionButtonItem(value); }
      }
      public Builder SetPotionButtonItem(global::D3.Hero.SavedItemLink value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPotionButtonItem = true;
        result.potionButtonItem_ = value;
        return this;
      }
      public Builder SetPotionButtonItem(global::D3.Hero.SavedItemLink.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPotionButtonItem = true;
        result.potionButtonItem_ = builderForValue.Build();
        return this;
      }
      public Builder MergePotionButtonItem(global::D3.Hero.SavedItemLink value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPotionButtonItem &&
            result.potionButtonItem_ != global::D3.Hero.SavedItemLink.DefaultInstance) {
            result.potionButtonItem_ = global::D3.Hero.SavedItemLink.CreateBuilder(result.potionButtonItem_).MergeFrom(value).BuildPartial();
        } else {
          result.potionButtonItem_ = value;
        }
        result.hasPotionButtonItem = true;
        return this;
      }
      public Builder ClearPotionButtonItem() {
        PrepareBuilder();
        result.hasPotionButtonItem = false;
        result.potionButtonItem_ = null;
        return this;
      }
      
      public bool HasMainQuestHandicapSnapshot {
        get { return result.hasMainQuestHandicapSnapshot; }
      }
      public int MainQuestHandicapSnapshot {
        get { return result.MainQuestHandicapSnapshot; }
        set { SetMainQuestHandicapSnapshot(value); }
      }
      public Builder SetMainQuestHandicapSnapshot(int value) {
        PrepareBuilder();
        result.hasMainQuestHandicapSnapshot = true;
        result.mainQuestHandicapSnapshot_ = value;
        return this;
      }
      public Builder ClearMainQuestHandicapSnapshot() {
        PrepareBuilder();
        result.hasMainQuestHandicapSnapshot = false;
        result.mainQuestHandicapSnapshot_ = -1;
        return this;
      }
      
      public pbc::IPopsicleList<int> GbidLegendaryPowersList {
        get { return PrepareBuilder().gbidLegendaryPowers_; }
      }
      public int GbidLegendaryPowersCount {
        get { return result.GbidLegendaryPowersCount; }
      }
      public int GetGbidLegendaryPowers(int index) {
        return result.GetGbidLegendaryPowers(index);
      }
      public Builder SetGbidLegendaryPowers(int index, int value) {
        PrepareBuilder();
        result.gbidLegendaryPowers_[index] = value;
        return this;
      }
      public Builder AddGbidLegendaryPowers(int value) {
        PrepareBuilder();
        result.gbidLegendaryPowers_.Add(value);
        return this;
      }
      public Builder AddRangeGbidLegendaryPowers(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.gbidLegendaryPowers_.Add(values);
        return this;
      }
      public Builder ClearGbidLegendaryPowers() {
        PrepareBuilder();
        result.gbidLegendaryPowers_.Clear();
        return this;
      }
    }
    static SavedData() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavedDefinition : pb::GeneratedMessage<SavedDefinition, SavedDefinition.Builder> {
    private SavedDefinition() { }
    private static readonly SavedDefinition defaultInstance = new SavedDefinition().MakeReadOnly();
    private static readonly string[] _savedDefinitionFieldNames = new string[] { "accepted_license_bits", "console_data", "digest", "equipment_manager_data", "items", "quest_reward_history", "saved_attributes", "saved_data", "saved_quest", "version" };
    private static readonly uint[] _savedDefinitionFieldTags = new uint[] { 64, 82, 18, 90, 50, 58, 26, 34, 42, 8 };
    public static SavedDefinition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedDefinition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavedDefinition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedDefinition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedDefinition, SavedDefinition.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_SavedDefinition__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private uint version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public uint Version {
      get { return version_; }
    }
    
    public const int DigestFieldNumber = 2;
    private bool hasDigest;
    private global::D3.Hero.Digest digest_;
    public bool HasDigest {
      get { return hasDigest; }
    }
    public global::D3.Hero.Digest Digest {
      get { return digest_ ?? global::D3.Hero.Digest.DefaultInstance; }
    }
    
    public const int SavedAttributesFieldNumber = 3;
    private bool hasSavedAttributes;
    private global::D3.AttributeSerializer.SavedAttributes savedAttributes_;
    public bool HasSavedAttributes {
      get { return hasSavedAttributes; }
    }
    public global::D3.AttributeSerializer.SavedAttributes SavedAttributes {
      get { return savedAttributes_ ?? global::D3.AttributeSerializer.SavedAttributes.DefaultInstance; }
    }
    
    public const int SavedDataFieldNumber = 4;
    private bool hasSavedData;
    private global::D3.Hero.SavedData savedData_;
    public bool HasSavedData {
      get { return hasSavedData; }
    }
    public global::D3.Hero.SavedData SavedData {
      get { return savedData_ ?? global::D3.Hero.SavedData.DefaultInstance; }
    }
    
    public const int SavedQuestFieldNumber = 5;
    private pbc::PopsicleList<global::D3.Hero.SavedQuest> savedQuest_ = new pbc::PopsicleList<global::D3.Hero.SavedQuest>();
    public scg::IList<global::D3.Hero.SavedQuest> SavedQuestList {
      get { return savedQuest_; }
    }
    public int SavedQuestCount {
      get { return savedQuest_.Count; }
    }
    public global::D3.Hero.SavedQuest GetSavedQuest(int index) {
      return savedQuest_[index];
    }
    
    public const int ItemsFieldNumber = 6;
    private bool hasItems;
    private global::D3.Items.ItemList items_;
    public bool HasItems {
      get { return hasItems; }
    }
    public global::D3.Items.ItemList Items {
      get { return items_ ?? global::D3.Items.ItemList.DefaultInstance; }
    }
    
    public const int QuestRewardHistoryFieldNumber = 7;
    private pbc::PopsicleList<global::D3.Hero.QuestRewardHistoryEntry> questRewardHistory_ = new pbc::PopsicleList<global::D3.Hero.QuestRewardHistoryEntry>();
    public scg::IList<global::D3.Hero.QuestRewardHistoryEntry> QuestRewardHistoryList {
      get { return questRewardHistory_; }
    }
    public int QuestRewardHistoryCount {
      get { return questRewardHistory_.Count; }
    }
    public global::D3.Hero.QuestRewardHistoryEntry GetQuestRewardHistory(int index) {
      return questRewardHistory_[index];
    }
    
    public const int AcceptedLicenseBitsFieldNumber = 8;
    private bool hasAcceptedLicenseBits;
    private ulong acceptedLicenseBits_;
    public bool HasAcceptedLicenseBits {
      get { return hasAcceptedLicenseBits; }
    }
    public ulong AcceptedLicenseBits {
      get { return acceptedLicenseBits_; }
    }
    
    public const int ConsoleDataFieldNumber = 10;
    private bool hasConsoleData;
    private global::D3.Hero.ConsoleData consoleData_;
    public bool HasConsoleData {
      get { return hasConsoleData; }
    }
    public global::D3.Hero.ConsoleData ConsoleData {
      get { return consoleData_ ?? global::D3.Hero.ConsoleData.DefaultInstance; }
    }
    
    public const int EquipmentManagerDataFieldNumber = 11;
    private bool hasEquipmentManagerData;
    private global::D3.Hero.EquipmentManagerData equipmentManagerData_;
    public bool HasEquipmentManagerData {
      get { return hasEquipmentManagerData; }
    }
    public global::D3.Hero.EquipmentManagerData EquipmentManagerData {
      get { return equipmentManagerData_ ?? global::D3.Hero.EquipmentManagerData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasSavedAttributes) return false;
        if (HasDigest) {
          if (!Digest.IsInitialized) return false;
        }
        if (!SavedAttributes.IsInitialized) return false;
        if (HasSavedData) {
          if (!SavedData.IsInitialized) return false;
        }
        foreach (global::D3.Hero.SavedQuest element in SavedQuestList) {
          if (!element.IsInitialized) return false;
        }
        if (HasItems) {
          if (!Items.IsInitialized) return false;
        }
        foreach (global::D3.Hero.QuestRewardHistoryEntry element in QuestRewardHistoryList) {
          if (!element.IsInitialized) return false;
        }
        if (HasConsoleData) {
          if (!ConsoleData.IsInitialized) return false;
        }
        if (HasEquipmentManagerData) {
          if (!EquipmentManagerData.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savedDefinitionFieldNames;
      if (hasVersion) {
        output.WriteUInt32(1, field_names[9], Version);
      }
      if (hasDigest) {
        output.WriteMessage(2, field_names[2], Digest);
      }
      if (hasSavedAttributes) {
        output.WriteMessage(3, field_names[6], SavedAttributes);
      }
      if (hasSavedData) {
        output.WriteMessage(4, field_names[7], SavedData);
      }
      if (savedQuest_.Count > 0) {
        output.WriteMessageArray(5, field_names[8], savedQuest_);
      }
      if (hasItems) {
        output.WriteMessage(6, field_names[4], Items);
      }
      if (questRewardHistory_.Count > 0) {
        output.WriteMessageArray(7, field_names[5], questRewardHistory_);
      }
      if (hasAcceptedLicenseBits) {
        output.WriteUInt64(8, field_names[0], AcceptedLicenseBits);
      }
      if (hasConsoleData) {
        output.WriteMessage(10, field_names[1], ConsoleData);
      }
      if (hasEquipmentManagerData) {
        output.WriteMessage(11, field_names[3], EquipmentManagerData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Version);
        }
        if (hasDigest) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Digest);
        }
        if (hasSavedAttributes) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, SavedAttributes);
        }
        if (hasSavedData) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, SavedData);
        }
        foreach (global::D3.Hero.SavedQuest element in SavedQuestList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        if (hasItems) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Items);
        }
        foreach (global::D3.Hero.QuestRewardHistoryEntry element in QuestRewardHistoryList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        if (hasAcceptedLicenseBits) {
          size += pb::CodedOutputStream.ComputeUInt64Size(8, AcceptedLicenseBits);
        }
        if (hasConsoleData) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, ConsoleData);
        }
        if (hasEquipmentManagerData) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, EquipmentManagerData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedDefinition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedDefinition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavedDefinition MakeReadOnly() {
      savedQuest_.MakeReadOnly();
      questRewardHistory_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedDefinition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavedDefinition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavedDefinition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavedDefinition result;
      
      private SavedDefinition PrepareBuilder() {
        if (resultIsReadOnly) {
          SavedDefinition original = result;
          result = new SavedDefinition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavedDefinition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SavedDefinition.Descriptor; }
      }
      
      public override SavedDefinition DefaultInstanceForType {
        get { return global::D3.Hero.SavedDefinition.DefaultInstance; }
      }
      
      public override SavedDefinition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedDefinition) {
          return MergeFrom((SavedDefinition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedDefinition other) {
        if (other == global::D3.Hero.SavedDefinition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasDigest) {
          MergeDigest(other.Digest);
        }
        if (other.HasSavedAttributes) {
          MergeSavedAttributes(other.SavedAttributes);
        }
        if (other.HasSavedData) {
          MergeSavedData(other.SavedData);
        }
        if (other.savedQuest_.Count != 0) {
          result.savedQuest_.Add(other.savedQuest_);
        }
        if (other.HasItems) {
          MergeItems(other.Items);
        }
        if (other.questRewardHistory_.Count != 0) {
          result.questRewardHistory_.Add(other.questRewardHistory_);
        }
        if (other.HasAcceptedLicenseBits) {
          AcceptedLicenseBits = other.AcceptedLicenseBits;
        }
        if (other.HasConsoleData) {
          MergeConsoleData(other.ConsoleData);
        }
        if (other.HasEquipmentManagerData) {
          MergeEquipmentManagerData(other.EquipmentManagerData);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savedDefinitionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savedDefinitionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadUInt32(ref result.version_);
              break;
            }
            case 18: {
              global::D3.Hero.Digest.Builder subBuilder = global::D3.Hero.Digest.CreateBuilder();
              if (result.hasDigest) {
                subBuilder.MergeFrom(Digest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Digest = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.AttributeSerializer.SavedAttributes.Builder subBuilder = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder();
              if (result.hasSavedAttributes) {
                subBuilder.MergeFrom(SavedAttributes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SavedAttributes = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::D3.Hero.SavedData.Builder subBuilder = global::D3.Hero.SavedData.CreateBuilder();
              if (result.hasSavedData) {
                subBuilder.MergeFrom(SavedData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SavedData = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.savedQuest_, global::D3.Hero.SavedQuest.DefaultInstance, extensionRegistry);
              break;
            }
            case 50: {
              global::D3.Items.ItemList.Builder subBuilder = global::D3.Items.ItemList.CreateBuilder();
              if (result.hasItems) {
                subBuilder.MergeFrom(Items);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Items = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.questRewardHistory_, global::D3.Hero.QuestRewardHistoryEntry.DefaultInstance, extensionRegistry);
              break;
            }
            case 64: {
              result.hasAcceptedLicenseBits = input.ReadUInt64(ref result.acceptedLicenseBits_);
              break;
            }
            case 82: {
              global::D3.Hero.ConsoleData.Builder subBuilder = global::D3.Hero.ConsoleData.CreateBuilder();
              if (result.hasConsoleData) {
                subBuilder.MergeFrom(ConsoleData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ConsoleData = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::D3.Hero.EquipmentManagerData.Builder subBuilder = global::D3.Hero.EquipmentManagerData.CreateBuilder();
              if (result.hasEquipmentManagerData) {
                subBuilder.MergeFrom(EquipmentManagerData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EquipmentManagerData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public uint Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(uint value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasDigest {
       get { return result.hasDigest; }
      }
      public global::D3.Hero.Digest Digest {
        get { return result.Digest; }
        set { SetDigest(value); }
      }
      public Builder SetDigest(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDigest = true;
        result.digest_ = value;
        return this;
      }
      public Builder SetDigest(global::D3.Hero.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDigest = true;
        result.digest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDigest(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDigest &&
            result.digest_ != global::D3.Hero.Digest.DefaultInstance) {
            result.digest_ = global::D3.Hero.Digest.CreateBuilder(result.digest_).MergeFrom(value).BuildPartial();
        } else {
          result.digest_ = value;
        }
        result.hasDigest = true;
        return this;
      }
      public Builder ClearDigest() {
        PrepareBuilder();
        result.hasDigest = false;
        result.digest_ = null;
        return this;
      }
      
      public bool HasSavedAttributes {
       get { return result.hasSavedAttributes; }
      }
      public global::D3.AttributeSerializer.SavedAttributes SavedAttributes {
        get { return result.SavedAttributes; }
        set { SetSavedAttributes(value); }
      }
      public Builder SetSavedAttributes(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSavedAttributes = true;
        result.savedAttributes_ = value;
        return this;
      }
      public Builder SetSavedAttributes(global::D3.AttributeSerializer.SavedAttributes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSavedAttributes = true;
        result.savedAttributes_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSavedAttributes(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSavedAttributes &&
            result.savedAttributes_ != global::D3.AttributeSerializer.SavedAttributes.DefaultInstance) {
            result.savedAttributes_ = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder(result.savedAttributes_).MergeFrom(value).BuildPartial();
        } else {
          result.savedAttributes_ = value;
        }
        result.hasSavedAttributes = true;
        return this;
      }
      public Builder ClearSavedAttributes() {
        PrepareBuilder();
        result.hasSavedAttributes = false;
        result.savedAttributes_ = null;
        return this;
      }
      
      public bool HasSavedData {
       get { return result.hasSavedData; }
      }
      public global::D3.Hero.SavedData SavedData {
        get { return result.SavedData; }
        set { SetSavedData(value); }
      }
      public Builder SetSavedData(global::D3.Hero.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSavedData = true;
        result.savedData_ = value;
        return this;
      }
      public Builder SetSavedData(global::D3.Hero.SavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSavedData = true;
        result.savedData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSavedData(global::D3.Hero.SavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSavedData &&
            result.savedData_ != global::D3.Hero.SavedData.DefaultInstance) {
            result.savedData_ = global::D3.Hero.SavedData.CreateBuilder(result.savedData_).MergeFrom(value).BuildPartial();
        } else {
          result.savedData_ = value;
        }
        result.hasSavedData = true;
        return this;
      }
      public Builder ClearSavedData() {
        PrepareBuilder();
        result.hasSavedData = false;
        result.savedData_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Hero.SavedQuest> SavedQuestList {
        get { return PrepareBuilder().savedQuest_; }
      }
      public int SavedQuestCount {
        get { return result.SavedQuestCount; }
      }
      public global::D3.Hero.SavedQuest GetSavedQuest(int index) {
        return result.GetSavedQuest(index);
      }
      public Builder SetSavedQuest(int index, global::D3.Hero.SavedQuest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.savedQuest_[index] = value;
        return this;
      }
      public Builder SetSavedQuest(int index, global::D3.Hero.SavedQuest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.savedQuest_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSavedQuest(global::D3.Hero.SavedQuest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.savedQuest_.Add(value);
        return this;
      }
      public Builder AddSavedQuest(global::D3.Hero.SavedQuest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.savedQuest_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSavedQuest(scg::IEnumerable<global::D3.Hero.SavedQuest> values) {
        PrepareBuilder();
        result.savedQuest_.Add(values);
        return this;
      }
      public Builder ClearSavedQuest() {
        PrepareBuilder();
        result.savedQuest_.Clear();
        return this;
      }
      
      public bool HasItems {
       get { return result.hasItems; }
      }
      public global::D3.Items.ItemList Items {
        get { return result.Items; }
        set { SetItems(value); }
      }
      public Builder SetItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItems = true;
        result.items_ = value;
        return this;
      }
      public Builder SetItems(global::D3.Items.ItemList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItems = true;
        result.items_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItems &&
            result.items_ != global::D3.Items.ItemList.DefaultInstance) {
            result.items_ = global::D3.Items.ItemList.CreateBuilder(result.items_).MergeFrom(value).BuildPartial();
        } else {
          result.items_ = value;
        }
        result.hasItems = true;
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.hasItems = false;
        result.items_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Hero.QuestRewardHistoryEntry> QuestRewardHistoryList {
        get { return PrepareBuilder().questRewardHistory_; }
      }
      public int QuestRewardHistoryCount {
        get { return result.QuestRewardHistoryCount; }
      }
      public global::D3.Hero.QuestRewardHistoryEntry GetQuestRewardHistory(int index) {
        return result.GetQuestRewardHistory(index);
      }
      public Builder SetQuestRewardHistory(int index, global::D3.Hero.QuestRewardHistoryEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.questRewardHistory_[index] = value;
        return this;
      }
      public Builder SetQuestRewardHistory(int index, global::D3.Hero.QuestRewardHistoryEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.questRewardHistory_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddQuestRewardHistory(global::D3.Hero.QuestRewardHistoryEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.questRewardHistory_.Add(value);
        return this;
      }
      public Builder AddQuestRewardHistory(global::D3.Hero.QuestRewardHistoryEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.questRewardHistory_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeQuestRewardHistory(scg::IEnumerable<global::D3.Hero.QuestRewardHistoryEntry> values) {
        PrepareBuilder();
        result.questRewardHistory_.Add(values);
        return this;
      }
      public Builder ClearQuestRewardHistory() {
        PrepareBuilder();
        result.questRewardHistory_.Clear();
        return this;
      }
      
      public bool HasAcceptedLicenseBits {
        get { return result.hasAcceptedLicenseBits; }
      }
      public ulong AcceptedLicenseBits {
        get { return result.AcceptedLicenseBits; }
        set { SetAcceptedLicenseBits(value); }
      }
      public Builder SetAcceptedLicenseBits(ulong value) {
        PrepareBuilder();
        result.hasAcceptedLicenseBits = true;
        result.acceptedLicenseBits_ = value;
        return this;
      }
      public Builder ClearAcceptedLicenseBits() {
        PrepareBuilder();
        result.hasAcceptedLicenseBits = false;
        result.acceptedLicenseBits_ = 0UL;
        return this;
      }
      
      public bool HasConsoleData {
       get { return result.hasConsoleData; }
      }
      public global::D3.Hero.ConsoleData ConsoleData {
        get { return result.ConsoleData; }
        set { SetConsoleData(value); }
      }
      public Builder SetConsoleData(global::D3.Hero.ConsoleData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConsoleData = true;
        result.consoleData_ = value;
        return this;
      }
      public Builder SetConsoleData(global::D3.Hero.ConsoleData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasConsoleData = true;
        result.consoleData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeConsoleData(global::D3.Hero.ConsoleData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasConsoleData &&
            result.consoleData_ != global::D3.Hero.ConsoleData.DefaultInstance) {
            result.consoleData_ = global::D3.Hero.ConsoleData.CreateBuilder(result.consoleData_).MergeFrom(value).BuildPartial();
        } else {
          result.consoleData_ = value;
        }
        result.hasConsoleData = true;
        return this;
      }
      public Builder ClearConsoleData() {
        PrepareBuilder();
        result.hasConsoleData = false;
        result.consoleData_ = null;
        return this;
      }
      
      public bool HasEquipmentManagerData {
       get { return result.hasEquipmentManagerData; }
      }
      public global::D3.Hero.EquipmentManagerData EquipmentManagerData {
        get { return result.EquipmentManagerData; }
        set { SetEquipmentManagerData(value); }
      }
      public Builder SetEquipmentManagerData(global::D3.Hero.EquipmentManagerData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEquipmentManagerData = true;
        result.equipmentManagerData_ = value;
        return this;
      }
      public Builder SetEquipmentManagerData(global::D3.Hero.EquipmentManagerData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEquipmentManagerData = true;
        result.equipmentManagerData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEquipmentManagerData(global::D3.Hero.EquipmentManagerData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEquipmentManagerData &&
            result.equipmentManagerData_ != global::D3.Hero.EquipmentManagerData.DefaultInstance) {
            result.equipmentManagerData_ = global::D3.Hero.EquipmentManagerData.CreateBuilder(result.equipmentManagerData_).MergeFrom(value).BuildPartial();
        } else {
          result.equipmentManagerData_ = value;
        }
        result.hasEquipmentManagerData = true;
        return this;
      }
      public Builder ClearEquipmentManagerData() {
        PrepareBuilder();
        result.hasEquipmentManagerData = false;
        result.equipmentManagerData_ = null;
        return this;
      }
    }
    static SavedDefinition() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DigestList : pb::GeneratedMessage<DigestList, DigestList.Builder> {
    private DigestList() { }
    private static readonly DigestList defaultInstance = new DigestList().MakeReadOnly();
    private static readonly string[] _digestListFieldNames = new string[] { "digests" };
    private static readonly uint[] _digestListFieldTags = new uint[] { 10 };
    public static DigestList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DigestList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DigestList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_DigestList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DigestList, DigestList.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_DigestList__FieldAccessorTable; }
    }
    
    public const int DigestsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Hero.Digest> digests_ = new pbc::PopsicleList<global::D3.Hero.Digest>();
    public scg::IList<global::D3.Hero.Digest> DigestsList {
      get { return digests_; }
    }
    public int DigestsCount {
      get { return digests_.Count; }
    }
    public global::D3.Hero.Digest GetDigests(int index) {
      return digests_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Hero.Digest element in DigestsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _digestListFieldNames;
      if (digests_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], digests_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Hero.Digest element in DigestsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DigestList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DigestList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DigestList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DigestList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DigestList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DigestList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DigestList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DigestList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DigestList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DigestList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DigestList MakeReadOnly() {
      digests_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DigestList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DigestList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DigestList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DigestList result;
      
      private DigestList PrepareBuilder() {
        if (resultIsReadOnly) {
          DigestList original = result;
          result = new DigestList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DigestList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.DigestList.Descriptor; }
      }
      
      public override DigestList DefaultInstanceForType {
        get { return global::D3.Hero.DigestList.DefaultInstance; }
      }
      
      public override DigestList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DigestList) {
          return MergeFrom((DigestList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DigestList other) {
        if (other == global::D3.Hero.DigestList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.digests_.Count != 0) {
          result.digests_.Add(other.digests_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_digestListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _digestListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.digests_, global::D3.Hero.Digest.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Hero.Digest> DigestsList {
        get { return PrepareBuilder().digests_; }
      }
      public int DigestsCount {
        get { return result.DigestsCount; }
      }
      public global::D3.Hero.Digest GetDigests(int index) {
        return result.GetDigests(index);
      }
      public Builder SetDigests(int index, global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.digests_[index] = value;
        return this;
      }
      public Builder SetDigests(int index, global::D3.Hero.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.digests_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDigests(global::D3.Hero.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.digests_.Add(value);
        return this;
      }
      public Builder AddDigests(global::D3.Hero.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.digests_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDigests(scg::IEnumerable<global::D3.Hero.Digest> values) {
        PrepareBuilder();
        result.digests_.Add(values);
        return this;
      }
      public Builder ClearDigests() {
        PrepareBuilder();
        result.digests_.Clear();
        return this;
      }
    }
    static DigestList() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BasicAttributeList : pb::GeneratedMessage<BasicAttributeList, BasicAttributeList.Builder> {
    private BasicAttributeList() { }
    private static readonly BasicAttributeList defaultInstance = new BasicAttributeList().MakeReadOnly();
    private static readonly string[] _basicAttributeListFieldNames = new string[] { "attributes" };
    private static readonly uint[] _basicAttributeListFieldTags = new uint[] { 10 };
    public static BasicAttributeList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BasicAttributeList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BasicAttributeList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_BasicAttributeList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BasicAttributeList, BasicAttributeList.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_BasicAttributeList__FieldAccessorTable; }
    }
    
    public const int AttributesFieldNumber = 1;
    private pbc::PopsicleList<global::D3.AttributeSerializer.SavedAttribute> attributes_ = new pbc::PopsicleList<global::D3.AttributeSerializer.SavedAttribute>();
    public scg::IList<global::D3.AttributeSerializer.SavedAttribute> AttributesList {
      get { return attributes_; }
    }
    public int AttributesCount {
      get { return attributes_.Count; }
    }
    public global::D3.AttributeSerializer.SavedAttribute GetAttributes(int index) {
      return attributes_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.AttributeSerializer.SavedAttribute element in AttributesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _basicAttributeListFieldNames;
      if (attributes_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], attributes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.AttributeSerializer.SavedAttribute element in AttributesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BasicAttributeList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BasicAttributeList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BasicAttributeList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BasicAttributeList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BasicAttributeList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BasicAttributeList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BasicAttributeList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BasicAttributeList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BasicAttributeList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BasicAttributeList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BasicAttributeList MakeReadOnly() {
      attributes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BasicAttributeList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<BasicAttributeList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BasicAttributeList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BasicAttributeList result;
      
      private BasicAttributeList PrepareBuilder() {
        if (resultIsReadOnly) {
          BasicAttributeList original = result;
          result = new BasicAttributeList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BasicAttributeList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.BasicAttributeList.Descriptor; }
      }
      
      public override BasicAttributeList DefaultInstanceForType {
        get { return global::D3.Hero.BasicAttributeList.DefaultInstance; }
      }
      
      public override BasicAttributeList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BasicAttributeList) {
          return MergeFrom((BasicAttributeList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BasicAttributeList other) {
        if (other == global::D3.Hero.BasicAttributeList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.attributes_.Count != 0) {
          result.attributes_.Add(other.attributes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_basicAttributeListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _basicAttributeListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.attributes_, global::D3.AttributeSerializer.SavedAttribute.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.AttributeSerializer.SavedAttribute> AttributesList {
        get { return PrepareBuilder().attributes_; }
      }
      public int AttributesCount {
        get { return result.AttributesCount; }
      }
      public global::D3.AttributeSerializer.SavedAttribute GetAttributes(int index) {
        return result.GetAttributes(index);
      }
      public Builder SetAttributes(int index, global::D3.AttributeSerializer.SavedAttribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_[index] = value;
        return this;
      }
      public Builder SetAttributes(int index, global::D3.AttributeSerializer.SavedAttribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttributes(global::D3.AttributeSerializer.SavedAttribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_.Add(value);
        return this;
      }
      public Builder AddAttributes(global::D3.AttributeSerializer.SavedAttribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttributes(scg::IEnumerable<global::D3.AttributeSerializer.SavedAttribute> values) {
        PrepareBuilder();
        result.attributes_.Add(values);
        return this;
      }
      public Builder ClearAttributes() {
        PrepareBuilder();
        result.attributes_.Clear();
        return this;
      }
    }
    static BasicAttributeList() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConsoleRandomVendorSeed : pb::GeneratedMessage<ConsoleRandomVendorSeed, ConsoleRandomVendorSeed.Builder> {
    private ConsoleRandomVendorSeed() { }
    private static readonly ConsoleRandomVendorSeed defaultInstance = new ConsoleRandomVendorSeed().MakeReadOnly();
    private static readonly string[] _consoleRandomVendorSeedFieldNames = new string[] { "item_slot_key", "random_item_carry", "random_item_seed" };
    private static readonly uint[] _consoleRandomVendorSeedFieldTags = new uint[] { 8, 24, 16 };
    public static ConsoleRandomVendorSeed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConsoleRandomVendorSeed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConsoleRandomVendorSeed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_ConsoleRandomVendorSeed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConsoleRandomVendorSeed, ConsoleRandomVendorSeed.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_ConsoleRandomVendorSeed__FieldAccessorTable; }
    }
    
    public const int ItemSlotKeyFieldNumber = 1;
    private bool hasItemSlotKey;
    private int itemSlotKey_;
    public bool HasItemSlotKey {
      get { return hasItemSlotKey; }
    }
    public int ItemSlotKey {
      get { return itemSlotKey_; }
    }
    
    public const int RandomItemSeedFieldNumber = 2;
    private bool hasRandomItemSeed;
    private int randomItemSeed_;
    public bool HasRandomItemSeed {
      get { return hasRandomItemSeed; }
    }
    public int RandomItemSeed {
      get { return randomItemSeed_; }
    }
    
    public const int RandomItemCarryFieldNumber = 3;
    private bool hasRandomItemCarry;
    private int randomItemCarry_ = 666;
    public bool HasRandomItemCarry {
      get { return hasRandomItemCarry; }
    }
    public int RandomItemCarry {
      get { return randomItemCarry_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemSlotKey) return false;
        if (!hasRandomItemSeed) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _consoleRandomVendorSeedFieldNames;
      if (hasItemSlotKey) {
        output.WriteSInt32(1, field_names[0], ItemSlotKey);
      }
      if (hasRandomItemSeed) {
        output.WriteSInt32(2, field_names[2], RandomItemSeed);
      }
      if (hasRandomItemCarry) {
        output.WriteSInt32(3, field_names[1], RandomItemCarry);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasItemSlotKey) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, ItemSlotKey);
        }
        if (hasRandomItemSeed) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, RandomItemSeed);
        }
        if (hasRandomItemCarry) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, RandomItemCarry);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConsoleRandomVendorSeed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleRandomVendorSeed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleRandomVendorSeed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleRandomVendorSeed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleRandomVendorSeed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleRandomVendorSeed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConsoleRandomVendorSeed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConsoleRandomVendorSeed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConsoleRandomVendorSeed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleRandomVendorSeed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConsoleRandomVendorSeed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConsoleRandomVendorSeed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConsoleRandomVendorSeed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConsoleRandomVendorSeed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConsoleRandomVendorSeed result;
      
      private ConsoleRandomVendorSeed PrepareBuilder() {
        if (resultIsReadOnly) {
          ConsoleRandomVendorSeed original = result;
          result = new ConsoleRandomVendorSeed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConsoleRandomVendorSeed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.ConsoleRandomVendorSeed.Descriptor; }
      }
      
      public override ConsoleRandomVendorSeed DefaultInstanceForType {
        get { return global::D3.Hero.ConsoleRandomVendorSeed.DefaultInstance; }
      }
      
      public override ConsoleRandomVendorSeed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConsoleRandomVendorSeed) {
          return MergeFrom((ConsoleRandomVendorSeed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConsoleRandomVendorSeed other) {
        if (other == global::D3.Hero.ConsoleRandomVendorSeed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemSlotKey) {
          ItemSlotKey = other.ItemSlotKey;
        }
        if (other.HasRandomItemSeed) {
          RandomItemSeed = other.RandomItemSeed;
        }
        if (other.HasRandomItemCarry) {
          RandomItemCarry = other.RandomItemCarry;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_consoleRandomVendorSeedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _consoleRandomVendorSeedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemSlotKey = input.ReadSInt32(ref result.itemSlotKey_);
              break;
            }
            case 16: {
              result.hasRandomItemSeed = input.ReadSInt32(ref result.randomItemSeed_);
              break;
            }
            case 24: {
              result.hasRandomItemCarry = input.ReadSInt32(ref result.randomItemCarry_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemSlotKey {
        get { return result.hasItemSlotKey; }
      }
      public int ItemSlotKey {
        get { return result.ItemSlotKey; }
        set { SetItemSlotKey(value); }
      }
      public Builder SetItemSlotKey(int value) {
        PrepareBuilder();
        result.hasItemSlotKey = true;
        result.itemSlotKey_ = value;
        return this;
      }
      public Builder ClearItemSlotKey() {
        PrepareBuilder();
        result.hasItemSlotKey = false;
        result.itemSlotKey_ = 0;
        return this;
      }
      
      public bool HasRandomItemSeed {
        get { return result.hasRandomItemSeed; }
      }
      public int RandomItemSeed {
        get { return result.RandomItemSeed; }
        set { SetRandomItemSeed(value); }
      }
      public Builder SetRandomItemSeed(int value) {
        PrepareBuilder();
        result.hasRandomItemSeed = true;
        result.randomItemSeed_ = value;
        return this;
      }
      public Builder ClearRandomItemSeed() {
        PrepareBuilder();
        result.hasRandomItemSeed = false;
        result.randomItemSeed_ = 0;
        return this;
      }
      
      public bool HasRandomItemCarry {
        get { return result.hasRandomItemCarry; }
      }
      public int RandomItemCarry {
        get { return result.RandomItemCarry; }
        set { SetRandomItemCarry(value); }
      }
      public Builder SetRandomItemCarry(int value) {
        PrepareBuilder();
        result.hasRandomItemCarry = true;
        result.randomItemCarry_ = value;
        return this;
      }
      public Builder ClearRandomItemCarry() {
        PrepareBuilder();
        result.hasRandomItemCarry = false;
        result.randomItemCarry_ = 666;
        return this;
      }
    }
    static ConsoleRandomVendorSeed() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConsoleRandomVendorSeedList : pb::GeneratedMessage<ConsoleRandomVendorSeedList, ConsoleRandomVendorSeedList.Builder> {
    private ConsoleRandomVendorSeedList() { }
    private static readonly ConsoleRandomVendorSeedList defaultInstance = new ConsoleRandomVendorSeedList().MakeReadOnly();
    private static readonly string[] _consoleRandomVendorSeedListFieldNames = new string[] { "console_random_vendor_seed_prop" };
    private static readonly uint[] _consoleRandomVendorSeedListFieldTags = new uint[] { 10 };
    public static ConsoleRandomVendorSeedList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConsoleRandomVendorSeedList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConsoleRandomVendorSeedList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_ConsoleRandomVendorSeedList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConsoleRandomVendorSeedList, ConsoleRandomVendorSeedList.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_ConsoleRandomVendorSeedList__FieldAccessorTable; }
    }
    
    public const int ConsoleRandomVendorSeedPropFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Hero.ConsoleRandomVendorSeed> consoleRandomVendorSeedProp_ = new pbc::PopsicleList<global::D3.Hero.ConsoleRandomVendorSeed>();
    public scg::IList<global::D3.Hero.ConsoleRandomVendorSeed> ConsoleRandomVendorSeedPropList {
      get { return consoleRandomVendorSeedProp_; }
    }
    public int ConsoleRandomVendorSeedPropCount {
      get { return consoleRandomVendorSeedProp_.Count; }
    }
    public global::D3.Hero.ConsoleRandomVendorSeed GetConsoleRandomVendorSeedProp(int index) {
      return consoleRandomVendorSeedProp_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Hero.ConsoleRandomVendorSeed element in ConsoleRandomVendorSeedPropList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _consoleRandomVendorSeedListFieldNames;
      if (consoleRandomVendorSeedProp_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], consoleRandomVendorSeedProp_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Hero.ConsoleRandomVendorSeed element in ConsoleRandomVendorSeedPropList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConsoleRandomVendorSeedList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleRandomVendorSeedList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleRandomVendorSeedList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleRandomVendorSeedList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleRandomVendorSeedList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleRandomVendorSeedList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConsoleRandomVendorSeedList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConsoleRandomVendorSeedList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConsoleRandomVendorSeedList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleRandomVendorSeedList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConsoleRandomVendorSeedList MakeReadOnly() {
      consoleRandomVendorSeedProp_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConsoleRandomVendorSeedList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConsoleRandomVendorSeedList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConsoleRandomVendorSeedList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConsoleRandomVendorSeedList result;
      
      private ConsoleRandomVendorSeedList PrepareBuilder() {
        if (resultIsReadOnly) {
          ConsoleRandomVendorSeedList original = result;
          result = new ConsoleRandomVendorSeedList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConsoleRandomVendorSeedList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.ConsoleRandomVendorSeedList.Descriptor; }
      }
      
      public override ConsoleRandomVendorSeedList DefaultInstanceForType {
        get { return global::D3.Hero.ConsoleRandomVendorSeedList.DefaultInstance; }
      }
      
      public override ConsoleRandomVendorSeedList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConsoleRandomVendorSeedList) {
          return MergeFrom((ConsoleRandomVendorSeedList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConsoleRandomVendorSeedList other) {
        if (other == global::D3.Hero.ConsoleRandomVendorSeedList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.consoleRandomVendorSeedProp_.Count != 0) {
          result.consoleRandomVendorSeedProp_.Add(other.consoleRandomVendorSeedProp_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_consoleRandomVendorSeedListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _consoleRandomVendorSeedListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.consoleRandomVendorSeedProp_, global::D3.Hero.ConsoleRandomVendorSeed.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Hero.ConsoleRandomVendorSeed> ConsoleRandomVendorSeedPropList {
        get { return PrepareBuilder().consoleRandomVendorSeedProp_; }
      }
      public int ConsoleRandomVendorSeedPropCount {
        get { return result.ConsoleRandomVendorSeedPropCount; }
      }
      public global::D3.Hero.ConsoleRandomVendorSeed GetConsoleRandomVendorSeedProp(int index) {
        return result.GetConsoleRandomVendorSeedProp(index);
      }
      public Builder SetConsoleRandomVendorSeedProp(int index, global::D3.Hero.ConsoleRandomVendorSeed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.consoleRandomVendorSeedProp_[index] = value;
        return this;
      }
      public Builder SetConsoleRandomVendorSeedProp(int index, global::D3.Hero.ConsoleRandomVendorSeed.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.consoleRandomVendorSeedProp_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddConsoleRandomVendorSeedProp(global::D3.Hero.ConsoleRandomVendorSeed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.consoleRandomVendorSeedProp_.Add(value);
        return this;
      }
      public Builder AddConsoleRandomVendorSeedProp(global::D3.Hero.ConsoleRandomVendorSeed.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.consoleRandomVendorSeedProp_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeConsoleRandomVendorSeedProp(scg::IEnumerable<global::D3.Hero.ConsoleRandomVendorSeed> values) {
        PrepareBuilder();
        result.consoleRandomVendorSeedProp_.Add(values);
        return this;
      }
      public Builder ClearConsoleRandomVendorSeedProp() {
        PrepareBuilder();
        result.consoleRandomVendorSeedProp_.Clear();
        return this;
      }
    }
    static ConsoleRandomVendorSeedList() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConsoleData : pb::GeneratedMessage<ConsoleData, ConsoleData.Builder> {
    private ConsoleData() { }
    private static readonly ConsoleData defaultInstance = new ConsoleData().MakeReadOnly();
    private static readonly string[] _consoleDataFieldNames = new string[] { "hero_profile", "killer_name", "last_played_adventure_mode_act", "last_played_handicap", "random_item_vendor_seed_list" };
    private static readonly uint[] _consoleDataFieldTags = new uint[] { 10, 26, 32, 16, 42 };
    public static ConsoleData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConsoleData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConsoleData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_ConsoleData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConsoleData, ConsoleData.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.Hero.internal__static_D3_Hero_ConsoleData__FieldAccessorTable; }
    }
    
    public const int HeroProfileFieldNumber = 1;
    private bool hasHeroProfile;
    private global::D3.Profile.HeroProfile heroProfile_;
    public bool HasHeroProfile {
      get { return hasHeroProfile; }
    }
    public global::D3.Profile.HeroProfile HeroProfile {
      get { return heroProfile_ ?? global::D3.Profile.HeroProfile.DefaultInstance; }
    }
    
    public const int LastPlayedHandicapFieldNumber = 2;
    private bool hasLastPlayedHandicap;
    private int lastPlayedHandicap_ = 2;
    public bool HasLastPlayedHandicap {
      get { return hasLastPlayedHandicap; }
    }
    public int LastPlayedHandicap {
      get { return lastPlayedHandicap_; }
    }
    
    public const int KillerNameFieldNumber = 3;
    private bool hasKillerName;
    private string killerName_ = "";
    public bool HasKillerName {
      get { return hasKillerName; }
    }
    public string KillerName {
      get { return killerName_; }
    }
    
    public const int LastPlayedAdventureModeActFieldNumber = 4;
    private bool hasLastPlayedAdventureModeAct;
    private int lastPlayedAdventureModeAct_;
    public bool HasLastPlayedAdventureModeAct {
      get { return hasLastPlayedAdventureModeAct; }
    }
    public int LastPlayedAdventureModeAct {
      get { return lastPlayedAdventureModeAct_; }
    }
    
    public const int RandomItemVendorSeedListFieldNumber = 5;
    private bool hasRandomItemVendorSeedList;
    private global::D3.Hero.ConsoleRandomVendorSeedList randomItemVendorSeedList_;
    public bool HasRandomItemVendorSeedList {
      get { return hasRandomItemVendorSeedList; }
    }
    public global::D3.Hero.ConsoleRandomVendorSeedList RandomItemVendorSeedList {
      get { return randomItemVendorSeedList_ ?? global::D3.Hero.ConsoleRandomVendorSeedList.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasHeroProfile) {
          if (!HeroProfile.IsInitialized) return false;
        }
        if (HasRandomItemVendorSeedList) {
          if (!RandomItemVendorSeedList.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _consoleDataFieldNames;
      if (hasHeroProfile) {
        output.WriteMessage(1, field_names[0], HeroProfile);
      }
      if (hasLastPlayedHandicap) {
        output.WriteSInt32(2, field_names[3], LastPlayedHandicap);
      }
      if (hasKillerName) {
        output.WriteString(3, field_names[1], KillerName);
      }
      if (hasLastPlayedAdventureModeAct) {
        output.WriteSInt32(4, field_names[2], LastPlayedAdventureModeAct);
      }
      if (hasRandomItemVendorSeedList) {
        output.WriteMessage(5, field_names[4], RandomItemVendorSeedList);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroProfile) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, HeroProfile);
        }
        if (hasLastPlayedHandicap) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, LastPlayedHandicap);
        }
        if (hasKillerName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, KillerName);
        }
        if (hasLastPlayedAdventureModeAct) {
          size += pb::CodedOutputStream.ComputeSInt32Size(4, LastPlayedAdventureModeAct);
        }
        if (hasRandomItemVendorSeedList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, RandomItemVendorSeedList);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConsoleData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConsoleData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConsoleData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConsoleData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConsoleData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConsoleData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConsoleData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConsoleData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConsoleData result;
      
      private ConsoleData PrepareBuilder() {
        if (resultIsReadOnly) {
          ConsoleData original = result;
          result = new ConsoleData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConsoleData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.ConsoleData.Descriptor; }
      }
      
      public override ConsoleData DefaultInstanceForType {
        get { return global::D3.Hero.ConsoleData.DefaultInstance; }
      }
      
      public override ConsoleData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConsoleData) {
          return MergeFrom((ConsoleData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConsoleData other) {
        if (other == global::D3.Hero.ConsoleData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroProfile) {
          MergeHeroProfile(other.HeroProfile);
        }
        if (other.HasLastPlayedHandicap) {
          LastPlayedHandicap = other.LastPlayedHandicap;
        }
        if (other.HasKillerName) {
          KillerName = other.KillerName;
        }
        if (other.HasLastPlayedAdventureModeAct) {
          LastPlayedAdventureModeAct = other.LastPlayedAdventureModeAct;
        }
        if (other.HasRandomItemVendorSeedList) {
          MergeRandomItemVendorSeedList(other.RandomItemVendorSeedList);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_consoleDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _consoleDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.Profile.HeroProfile.Builder subBuilder = global::D3.Profile.HeroProfile.CreateBuilder();
              if (result.hasHeroProfile) {
                subBuilder.MergeFrom(HeroProfile);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroProfile = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasLastPlayedHandicap = input.ReadSInt32(ref result.lastPlayedHandicap_);
              break;
            }
            case 26: {
              result.hasKillerName = input.ReadString(ref result.killerName_);
              break;
            }
            case 32: {
              result.hasLastPlayedAdventureModeAct = input.ReadSInt32(ref result.lastPlayedAdventureModeAct_);
              break;
            }
            case 42: {
              global::D3.Hero.ConsoleRandomVendorSeedList.Builder subBuilder = global::D3.Hero.ConsoleRandomVendorSeedList.CreateBuilder();
              if (result.hasRandomItemVendorSeedList) {
                subBuilder.MergeFrom(RandomItemVendorSeedList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RandomItemVendorSeedList = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroProfile {
       get { return result.hasHeroProfile; }
      }
      public global::D3.Profile.HeroProfile HeroProfile {
        get { return result.HeroProfile; }
        set { SetHeroProfile(value); }
      }
      public Builder SetHeroProfile(global::D3.Profile.HeroProfile value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroProfile = true;
        result.heroProfile_ = value;
        return this;
      }
      public Builder SetHeroProfile(global::D3.Profile.HeroProfile.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroProfile = true;
        result.heroProfile_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroProfile(global::D3.Profile.HeroProfile value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroProfile &&
            result.heroProfile_ != global::D3.Profile.HeroProfile.DefaultInstance) {
            result.heroProfile_ = global::D3.Profile.HeroProfile.CreateBuilder(result.heroProfile_).MergeFrom(value).BuildPartial();
        } else {
          result.heroProfile_ = value;
        }
        result.hasHeroProfile = true;
        return this;
      }
      public Builder ClearHeroProfile() {
        PrepareBuilder();
        result.hasHeroProfile = false;
        result.heroProfile_ = null;
        return this;
      }
      
      public bool HasLastPlayedHandicap {
        get { return result.hasLastPlayedHandicap; }
      }
      public int LastPlayedHandicap {
        get { return result.LastPlayedHandicap; }
        set { SetLastPlayedHandicap(value); }
      }
      public Builder SetLastPlayedHandicap(int value) {
        PrepareBuilder();
        result.hasLastPlayedHandicap = true;
        result.lastPlayedHandicap_ = value;
        return this;
      }
      public Builder ClearLastPlayedHandicap() {
        PrepareBuilder();
        result.hasLastPlayedHandicap = false;
        result.lastPlayedHandicap_ = 2;
        return this;
      }
      
      public bool HasKillerName {
        get { return result.hasKillerName; }
      }
      public string KillerName {
        get { return result.KillerName; }
        set { SetKillerName(value); }
      }
      public Builder SetKillerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKillerName = true;
        result.killerName_ = value;
        return this;
      }
      public Builder ClearKillerName() {
        PrepareBuilder();
        result.hasKillerName = false;
        result.killerName_ = "";
        return this;
      }
      
      public bool HasLastPlayedAdventureModeAct {
        get { return result.hasLastPlayedAdventureModeAct; }
      }
      public int LastPlayedAdventureModeAct {
        get { return result.LastPlayedAdventureModeAct; }
        set { SetLastPlayedAdventureModeAct(value); }
      }
      public Builder SetLastPlayedAdventureModeAct(int value) {
        PrepareBuilder();
        result.hasLastPlayedAdventureModeAct = true;
        result.lastPlayedAdventureModeAct_ = value;
        return this;
      }
      public Builder ClearLastPlayedAdventureModeAct() {
        PrepareBuilder();
        result.hasLastPlayedAdventureModeAct = false;
        result.lastPlayedAdventureModeAct_ = 0;
        return this;
      }
      
      public bool HasRandomItemVendorSeedList {
       get { return result.hasRandomItemVendorSeedList; }
      }
      public global::D3.Hero.ConsoleRandomVendorSeedList RandomItemVendorSeedList {
        get { return result.RandomItemVendorSeedList; }
        set { SetRandomItemVendorSeedList(value); }
      }
      public Builder SetRandomItemVendorSeedList(global::D3.Hero.ConsoleRandomVendorSeedList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRandomItemVendorSeedList = true;
        result.randomItemVendorSeedList_ = value;
        return this;
      }
      public Builder SetRandomItemVendorSeedList(global::D3.Hero.ConsoleRandomVendorSeedList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRandomItemVendorSeedList = true;
        result.randomItemVendorSeedList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRandomItemVendorSeedList(global::D3.Hero.ConsoleRandomVendorSeedList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRandomItemVendorSeedList &&
            result.randomItemVendorSeedList_ != global::D3.Hero.ConsoleRandomVendorSeedList.DefaultInstance) {
            result.randomItemVendorSeedList_ = global::D3.Hero.ConsoleRandomVendorSeedList.CreateBuilder(result.randomItemVendorSeedList_).MergeFrom(value).BuildPartial();
        } else {
          result.randomItemVendorSeedList_ = value;
        }
        result.hasRandomItemVendorSeedList = true;
        return this;
      }
      public Builder ClearRandomItemVendorSeedList() {
        PrepareBuilder();
        result.hasRandomItemVendorSeedList = false;
        result.randomItemVendorSeedList_ = null;
        return this;
      }
    }
    static ConsoleData() {
      object.ReferenceEquals(global::D3.Hero.Hero.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
