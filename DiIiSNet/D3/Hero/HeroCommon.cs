// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Hero {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class HeroCommon {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Hero_VisualItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.VisualItem, global::D3.Hero.VisualItem.Builder> internal__static_D3_Hero_VisualItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_VisualCosmeticItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.VisualCosmeticItem, global::D3.Hero.VisualCosmeticItem.Builder> internal__static_D3_Hero_VisualCosmeticItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_VisualEquipment__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.VisualEquipment, global::D3.Hero.VisualEquipment.Builder> internal__static_D3_Hero_VisualEquipment__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_QuestHistoryEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.QuestHistoryEntry, global::D3.Hero.QuestHistoryEntry.Builder> internal__static_D3_Hero_QuestHistoryEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_QuestRewardHistoryEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.QuestRewardHistoryEntry, global::D3.Hero.QuestRewardHistoryEntry.Builder> internal__static_D3_Hero_QuestRewardHistoryEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SavedQuest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedQuest, global::D3.Hero.SavedQuest.Builder> internal__static_D3_Hero_SavedQuest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SavedConversations__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedConversations, global::D3.Hero.SavedConversations.Builder> internal__static_D3_Hero_SavedConversations__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SavePointData_Proto__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavePointData_Proto, global::D3.Hero.SavePointData_Proto.Builder> internal__static_D3_Hero_SavePointData_Proto__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SkillWithRune__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SkillWithRune, global::D3.Hero.SkillWithRune.Builder> internal__static_D3_Hero_SkillWithRune__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SavedItemLink__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedItemLink, global::D3.Hero.SavedItemLink.Builder> internal__static_D3_Hero_SavedItemLink__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_Timestamps__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Timestamps, global::D3.Hero.Timestamps.Builder> internal__static_D3_Hero_Timestamps__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_NameText__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.NameText, global::D3.Hero.NameText.Builder> internal__static_D3_Hero_NameText__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_QuestHistoryList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.QuestHistoryList, global::D3.Hero.QuestHistoryList.Builder> internal__static_D3_Hero_QuestHistoryList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_SavedQuestList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedQuestList, global::D3.Hero.SavedQuestList.Builder> internal__static_D3_Hero_SavedQuestList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_QuestRewardHistoryList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.QuestRewardHistoryList, global::D3.Hero.QuestRewardHistoryList.Builder> internal__static_D3_Hero_QuestRewardHistoryList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_LoadoutItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.LoadoutItem, global::D3.Hero.LoadoutItem.Builder> internal__static_D3_Hero_LoadoutItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_LoadoutPotion__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.LoadoutPotion, global::D3.Hero.LoadoutPotion.Builder> internal__static_D3_Hero_LoadoutPotion__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_Loadout__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Loadout, global::D3.Hero.Loadout.Builder> internal__static_D3_Hero_Loadout__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Hero_EquipmentManagerData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Hero.EquipmentManagerData, global::D3.Hero.EquipmentManagerData.Builder> internal__static_D3_Hero_EquipmentManagerData__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static HeroCommon() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChBIZXJvQ29tbW9uLnByb3RvEgdEMy5IZXJvIpYBCgpWaXN1YWxJdGVtEhYK" + 
          "BGdiaWQYASABKA86Ai0xUgRnYmlkEhwKCGR5ZV90eXBlGAIgASgROgEwUgdk" + 
          "eWVUeXBlEisKEGl0ZW1fZWZmZWN0X3R5cGUYAyABKBE6ATBSDml0ZW1FZmZl" + 
          "Y3RUeXBlEiUKDGVmZmVjdF9sZXZlbBgEIAEoEToCLTFSC2VmZmVjdExldmVs" + 
          "IiwKElZpc3VhbENvc21ldGljSXRlbRIWCgRnYmlkGAEgASgPOgItMVIEZ2Jp" + 
          "ZCKJAQoPVmlzdWFsRXF1aXBtZW50EjQKC3Zpc3VhbF9pdGVtGAEgAygLMhMu" + 
          "RDMuSGVyby5WaXN1YWxJdGVtUgp2aXN1YWxJdGVtEkAKDWNvc21ldGljX2l0" + 
          "ZW0YAiADKAsyGy5EMy5IZXJvLlZpc3VhbENvc21ldGljSXRlbVIMY29zbWV0" + 
          "aWNJdGVtIqsBChFRdWVzdEhpc3RvcnlFbnRyeRIfCglzbm9fcXVlc3QYASAC" + 
          "KA86Ai0xUghzbm9RdWVzdBI2ChVkaWZmaWN1bHR5X2RlcHJlY2F0ZWQYAiAB" + 
          "KBE6ATBSFGRpZmZpY3VsdHlEZXByZWNhdGVkEj0KGWhpZ2hlc3RfcGxheWVk" + 
          "X3F1ZXN0X3N0ZXAYAyABKBE6Ai0zUhZoaWdoZXN0UGxheWVkUXVlc3RTdGVw" + 
          "Ir8BChdRdWVzdFJld2FyZEhpc3RvcnlFbnRyeRIfCglzbm9fcXVlc3QYASAC" + 
          "KA86Ai0xUghzbm9RdWVzdBIdCghzdGVwX3VpZBgCIAIoEToCLTFSB3N0ZXBV" + 
          "aWQSNgoVZGlmZmljdWx0eV9kZXByZWNhdGVkGAMgASgROgEwUhRkaWZmaWN1" + 
          "bHR5RGVwcmVjYXRlZBIsChBkaWZmaWN1bHR5X2ZsYWdzGAQgASgNOgEwUg9k" + 
          "aWZmaWN1bHR5RmxhZ3Mi/AEKClNhdmVkUXVlc3QSHwoJc25vX3F1ZXN0GAEg" + 
          "AigPOgItMVIIc25vUXVlc3QSNgoVZGlmZmljdWx0eV9kZXByZWNhdGVkGAIg" + 
          "ASgROgEwUhRkaWZmaWN1bHR5RGVwcmVjYXRlZBIsChBjdXJyZW50X3N0ZXBf" + 
          "dWlkGAMgAigROgItMVIOY3VycmVudFN0ZXBVaWQSKwoPb2JqZWN0aXZlX3N0" + 
          "YXRlGAQgAygRQgIQAVIOb2JqZWN0aXZlU3RhdGUSOgoXZmFpbHVyZV9jb25k" + 
          "aXRpb25fc3RhdGUYBSADKBFCAhABUhVmYWlsdXJlQ29uZGl0aW9uU3RhdGUi" + 
          "mAIKElNhdmVkQ29udmVyc2F0aW9ucxJCCh1wbGF5ZWRfY29udmVyc2F0aW9u" + 
          "c19iaXRmaWVsZBgBIAIoDFIbcGxheWVkQ29udmVyc2F0aW9uc0JpdGZpZWxk" + 
          "EjYKF3Nub19zYXZlZF9jb252ZXJzYXRpb25zGAIgAygPUhVzbm9TYXZlZENv" + 
          "bnZlcnNhdGlvbnMSRwogc25vX3NhdmVkX2NvbnZlcnNhdGlvbnNfYml0Zmll" + 
          "bGQYAyABKAxSHXNub1NhdmVkQ29udmVyc2F0aW9uc0JpdGZpZWxkEj0KG2Jp" + 
          "dGZpZWxkX2xlYWRpbmdfbnVsbF9ieXRlcxgEIAEoBVIYYml0ZmllbGRMZWFk" + 
          "aW5nTnVsbEJ5dGVzIo8BChNTYXZlUG9pbnREYXRhX1Byb3RvEh8KCXNub193" + 
          "b3JsZBgBIAIoDzoCLTFSCHNub1dvcmxkEi0KEHNhdmVwb2ludF9udW1iZXIY" + 
          "AiACKBE6Ai0xUg9zYXZlcG9pbnROdW1iZXISKAoOY3JlYXRlc19wb3J0YWwY" + 
          "AyACKA06ATBSDWNyZWF0ZXNQb3J0YWwiUQoNU2tpbGxXaXRoUnVuZRIfCglz" + 
          "bm9fc2tpbGwYASACKA86Ai0xUghzbm9Ta2lsbBIfCglydW5lX3R5cGUYAiAB" + 
          "KBE6Ai0xUghydW5lVHlwZSIzCg1TYXZlZEl0ZW1MaW5rEhAKAXgYASACKBE6" + 
          "Ai0xUgF4EhAKAXkYAiACKBE6Ai0xUgF5Ik4KClRpbWVzdGFtcHMSHwoLY3Jl" + 
          "YXRlX3RpbWUYASACKBJSCmNyZWF0ZVRpbWUSHwoLZGVsZXRlX3RpbWUYAiAB" + 
          "KBJSCmRlbGV0ZVRpbWUiHgoITmFtZVRleHQSEgoEbmFtZRgBIAIoCVIEbmFt" + 
          "ZSJIChBRdWVzdEhpc3RvcnlMaXN0EjQKB2hpc3RvcnkYASADKAsyGi5EMy5I" + 
          "ZXJvLlF1ZXN0SGlzdG9yeUVudHJ5UgdoaXN0b3J5IkgKDlNhdmVkUXVlc3RM" + 
          "aXN0EjYKDHNhdmVkX3F1ZXN0cxgBIAMoCzITLkQzLkhlcm8uU2F2ZWRRdWVz" + 
          "dFILc2F2ZWRRdWVzdHMiYQoWUXVlc3RSZXdhcmRIaXN0b3J5TGlzdBJHCg5y" + 
          "ZXdhcmRfaGlzdG9yeRgBIAMoCzIgLkQzLkhlcm8uUXVlc3RSZXdhcmRIaXN0" + 
          "b3J5RW50cnlSDXJld2FyZEhpc3RvcnkiUAoLTG9hZG91dEl0ZW0SHgoLaXRl" + 
          "bV9pZF9sb3cYASACKBBSCWl0ZW1JZExvdxIhCgxnYmlkX3NvY2tldHMYAiAD" + 
          "KA9SC2diaWRTb2NrZXRzIlAKDUxvYWRvdXRQb3Rpb24SHgoLaXRlbV9pZF9s" + 
          "b3cYASACKBBSCWl0ZW1JZExvdxIfCgtnYmlkX3BvdGlvbhgCIAIoD1IKZ2Jp" + 
          "ZFBvdGlvbiLGAgoHTG9hZG91dBI7Cg5lcXVpcHBlZF9pdGVtcxgBIAMoCzIU" + 
          "LkQzLkhlcm8uTG9hZG91dEl0ZW1SDWVxdWlwcGVkSXRlbXMSOwoNYWN0aXZl" + 
          "X3NraWxscxgCIAMoCzIWLkQzLkhlcm8uU2tpbGxXaXRoUnVuZVIMYWN0aXZl" + 
          "U2tpbGxzEh0KCnNub190cmFpdHMYAyADKA9SCXNub1RyYWl0cxIyChVnYmlk" + 
          "X2xlZ2VuZGFyeV9wb3dlcnMYBCADKA9SE2diaWRMZWdlbmRhcnlQb3dlcnMS" + 
          "EgoEbmFtZRgFIAEoCVIEbmFtZRIZCgh0YWJfaWNvbhgGIAEoEVIHdGFiSWNv" + 
          "bhI/Cg9lcXVpcHBlZF9wb3Rpb24YByABKAsyFi5EMy5IZXJvLkxvYWRvdXRQ" + 
          "b3Rpb25SDmVxdWlwcGVkUG90aW9uIkQKFEVxdWlwbWVudE1hbmFnZXJEYXRh" + 
          "EiwKCGxvYWRvdXRzGAEgAygLMhAuRDMuSGVyby5Mb2Fkb3V0Ughsb2Fkb3V0" + 
          "cw==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Hero_VisualItem__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Hero_VisualItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.VisualItem, global::D3.Hero.VisualItem.Builder>(internal__static_D3_Hero_VisualItem__Descriptor,
                new string[] { "Gbid", "DyeType", "ItemEffectType", "EffectLevel", });
        internal__static_D3_Hero_VisualCosmeticItem__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Hero_VisualCosmeticItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.VisualCosmeticItem, global::D3.Hero.VisualCosmeticItem.Builder>(internal__static_D3_Hero_VisualCosmeticItem__Descriptor,
                new string[] { "Gbid", });
        internal__static_D3_Hero_VisualEquipment__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_Hero_VisualEquipment__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.VisualEquipment, global::D3.Hero.VisualEquipment.Builder>(internal__static_D3_Hero_VisualEquipment__Descriptor,
                new string[] { "VisualItem", "CosmeticItem", });
        internal__static_D3_Hero_QuestHistoryEntry__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_Hero_QuestHistoryEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.QuestHistoryEntry, global::D3.Hero.QuestHistoryEntry.Builder>(internal__static_D3_Hero_QuestHistoryEntry__Descriptor,
                new string[] { "SnoQuest", "DifficultyDeprecated", "HighestPlayedQuestStep", });
        internal__static_D3_Hero_QuestRewardHistoryEntry__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_Hero_QuestRewardHistoryEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.QuestRewardHistoryEntry, global::D3.Hero.QuestRewardHistoryEntry.Builder>(internal__static_D3_Hero_QuestRewardHistoryEntry__Descriptor,
                new string[] { "SnoQuest", "StepUid", "DifficultyDeprecated", "DifficultyFlags", });
        internal__static_D3_Hero_SavedQuest__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_Hero_SavedQuest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedQuest, global::D3.Hero.SavedQuest.Builder>(internal__static_D3_Hero_SavedQuest__Descriptor,
                new string[] { "SnoQuest", "DifficultyDeprecated", "CurrentStepUid", "ObjectiveState", "FailureConditionState", });
        internal__static_D3_Hero_SavedConversations__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_Hero_SavedConversations__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedConversations, global::D3.Hero.SavedConversations.Builder>(internal__static_D3_Hero_SavedConversations__Descriptor,
                new string[] { "PlayedConversationsBitfield", "SnoSavedConversations", "SnoSavedConversationsBitfield", "BitfieldLeadingNullBytes", });
        internal__static_D3_Hero_SavePointData_Proto__Descriptor = Descriptor.MessageTypes[7];
        internal__static_D3_Hero_SavePointData_Proto__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavePointData_Proto, global::D3.Hero.SavePointData_Proto.Builder>(internal__static_D3_Hero_SavePointData_Proto__Descriptor,
                new string[] { "SnoWorld", "SavepointNumber", "CreatesPortal", });
        internal__static_D3_Hero_SkillWithRune__Descriptor = Descriptor.MessageTypes[8];
        internal__static_D3_Hero_SkillWithRune__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SkillWithRune, global::D3.Hero.SkillWithRune.Builder>(internal__static_D3_Hero_SkillWithRune__Descriptor,
                new string[] { "SnoSkill", "RuneType", });
        internal__static_D3_Hero_SavedItemLink__Descriptor = Descriptor.MessageTypes[9];
        internal__static_D3_Hero_SavedItemLink__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedItemLink, global::D3.Hero.SavedItemLink.Builder>(internal__static_D3_Hero_SavedItemLink__Descriptor,
                new string[] { "X", "Y", });
        internal__static_D3_Hero_Timestamps__Descriptor = Descriptor.MessageTypes[10];
        internal__static_D3_Hero_Timestamps__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Timestamps, global::D3.Hero.Timestamps.Builder>(internal__static_D3_Hero_Timestamps__Descriptor,
                new string[] { "CreateTime", "DeleteTime", });
        internal__static_D3_Hero_NameText__Descriptor = Descriptor.MessageTypes[11];
        internal__static_D3_Hero_NameText__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.NameText, global::D3.Hero.NameText.Builder>(internal__static_D3_Hero_NameText__Descriptor,
                new string[] { "Name", });
        internal__static_D3_Hero_QuestHistoryList__Descriptor = Descriptor.MessageTypes[12];
        internal__static_D3_Hero_QuestHistoryList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.QuestHistoryList, global::D3.Hero.QuestHistoryList.Builder>(internal__static_D3_Hero_QuestHistoryList__Descriptor,
                new string[] { "History", });
        internal__static_D3_Hero_SavedQuestList__Descriptor = Descriptor.MessageTypes[13];
        internal__static_D3_Hero_SavedQuestList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.SavedQuestList, global::D3.Hero.SavedQuestList.Builder>(internal__static_D3_Hero_SavedQuestList__Descriptor,
                new string[] { "SavedQuests", });
        internal__static_D3_Hero_QuestRewardHistoryList__Descriptor = Descriptor.MessageTypes[14];
        internal__static_D3_Hero_QuestRewardHistoryList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.QuestRewardHistoryList, global::D3.Hero.QuestRewardHistoryList.Builder>(internal__static_D3_Hero_QuestRewardHistoryList__Descriptor,
                new string[] { "RewardHistory", });
        internal__static_D3_Hero_LoadoutItem__Descriptor = Descriptor.MessageTypes[15];
        internal__static_D3_Hero_LoadoutItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.LoadoutItem, global::D3.Hero.LoadoutItem.Builder>(internal__static_D3_Hero_LoadoutItem__Descriptor,
                new string[] { "ItemIdLow", "GbidSockets", });
        internal__static_D3_Hero_LoadoutPotion__Descriptor = Descriptor.MessageTypes[16];
        internal__static_D3_Hero_LoadoutPotion__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.LoadoutPotion, global::D3.Hero.LoadoutPotion.Builder>(internal__static_D3_Hero_LoadoutPotion__Descriptor,
                new string[] { "ItemIdLow", "GbidPotion", });
        internal__static_D3_Hero_Loadout__Descriptor = Descriptor.MessageTypes[17];
        internal__static_D3_Hero_Loadout__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.Loadout, global::D3.Hero.Loadout.Builder>(internal__static_D3_Hero_Loadout__Descriptor,
                new string[] { "EquippedItems", "ActiveSkills", "SnoTraits", "GbidLegendaryPowers", "Name", "TabIcon", "EquippedPotion", });
        internal__static_D3_Hero_EquipmentManagerData__Descriptor = Descriptor.MessageTypes[18];
        internal__static_D3_Hero_EquipmentManagerData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Hero.EquipmentManagerData, global::D3.Hero.EquipmentManagerData.Builder>(internal__static_D3_Hero_EquipmentManagerData__Descriptor,
                new string[] { "Loadouts", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class VisualItem : pb::GeneratedMessage<VisualItem, VisualItem.Builder> {
    private VisualItem() { }
    private static readonly VisualItem defaultInstance = new VisualItem().MakeReadOnly();
    private static readonly string[] _visualItemFieldNames = new string[] { "dye_type", "effect_level", "gbid", "item_effect_type" };
    private static readonly uint[] _visualItemFieldTags = new uint[] { 16, 32, 13, 24 };
    public static VisualItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override VisualItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override VisualItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_VisualItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<VisualItem, VisualItem.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_VisualItem__FieldAccessorTable; }
    }
    
    public const int GbidFieldNumber = 1;
    private bool hasGbid;
    private int gbid_ = -1;
    public bool HasGbid {
      get { return hasGbid; }
    }
    public int Gbid {
      get { return gbid_; }
    }
    
    public const int DyeTypeFieldNumber = 2;
    private bool hasDyeType;
    private int dyeType_;
    public bool HasDyeType {
      get { return hasDyeType; }
    }
    public int DyeType {
      get { return dyeType_; }
    }
    
    public const int ItemEffectTypeFieldNumber = 3;
    private bool hasItemEffectType;
    private int itemEffectType_;
    public bool HasItemEffectType {
      get { return hasItemEffectType; }
    }
    public int ItemEffectType {
      get { return itemEffectType_; }
    }
    
    public const int EffectLevelFieldNumber = 4;
    private bool hasEffectLevel;
    private int effectLevel_ = -1;
    public bool HasEffectLevel {
      get { return hasEffectLevel; }
    }
    public int EffectLevel {
      get { return effectLevel_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _visualItemFieldNames;
      if (hasGbid) {
        output.WriteSFixed32(1, field_names[2], Gbid);
      }
      if (hasDyeType) {
        output.WriteSInt32(2, field_names[0], DyeType);
      }
      if (hasItemEffectType) {
        output.WriteSInt32(3, field_names[3], ItemEffectType);
      }
      if (hasEffectLevel) {
        output.WriteSInt32(4, field_names[1], EffectLevel);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGbid) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, Gbid);
        }
        if (hasDyeType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, DyeType);
        }
        if (hasItemEffectType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, ItemEffectType);
        }
        if (hasEffectLevel) {
          size += pb::CodedOutputStream.ComputeSInt32Size(4, EffectLevel);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static VisualItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VisualItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VisualItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VisualItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VisualItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VisualItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static VisualItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static VisualItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static VisualItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VisualItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private VisualItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(VisualItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<VisualItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(VisualItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private VisualItem result;
      
      private VisualItem PrepareBuilder() {
        if (resultIsReadOnly) {
          VisualItem original = result;
          result = new VisualItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override VisualItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.VisualItem.Descriptor; }
      }
      
      public override VisualItem DefaultInstanceForType {
        get { return global::D3.Hero.VisualItem.DefaultInstance; }
      }
      
      public override VisualItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is VisualItem) {
          return MergeFrom((VisualItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(VisualItem other) {
        if (other == global::D3.Hero.VisualItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGbid) {
          Gbid = other.Gbid;
        }
        if (other.HasDyeType) {
          DyeType = other.DyeType;
        }
        if (other.HasItemEffectType) {
          ItemEffectType = other.ItemEffectType;
        }
        if (other.HasEffectLevel) {
          EffectLevel = other.EffectLevel;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_visualItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _visualItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasGbid = input.ReadSFixed32(ref result.gbid_);
              break;
            }
            case 16: {
              result.hasDyeType = input.ReadSInt32(ref result.dyeType_);
              break;
            }
            case 24: {
              result.hasItemEffectType = input.ReadSInt32(ref result.itemEffectType_);
              break;
            }
            case 32: {
              result.hasEffectLevel = input.ReadSInt32(ref result.effectLevel_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGbid {
        get { return result.hasGbid; }
      }
      public int Gbid {
        get { return result.Gbid; }
        set { SetGbid(value); }
      }
      public Builder SetGbid(int value) {
        PrepareBuilder();
        result.hasGbid = true;
        result.gbid_ = value;
        return this;
      }
      public Builder ClearGbid() {
        PrepareBuilder();
        result.hasGbid = false;
        result.gbid_ = -1;
        return this;
      }
      
      public bool HasDyeType {
        get { return result.hasDyeType; }
      }
      public int DyeType {
        get { return result.DyeType; }
        set { SetDyeType(value); }
      }
      public Builder SetDyeType(int value) {
        PrepareBuilder();
        result.hasDyeType = true;
        result.dyeType_ = value;
        return this;
      }
      public Builder ClearDyeType() {
        PrepareBuilder();
        result.hasDyeType = false;
        result.dyeType_ = 0;
        return this;
      }
      
      public bool HasItemEffectType {
        get { return result.hasItemEffectType; }
      }
      public int ItemEffectType {
        get { return result.ItemEffectType; }
        set { SetItemEffectType(value); }
      }
      public Builder SetItemEffectType(int value) {
        PrepareBuilder();
        result.hasItemEffectType = true;
        result.itemEffectType_ = value;
        return this;
      }
      public Builder ClearItemEffectType() {
        PrepareBuilder();
        result.hasItemEffectType = false;
        result.itemEffectType_ = 0;
        return this;
      }
      
      public bool HasEffectLevel {
        get { return result.hasEffectLevel; }
      }
      public int EffectLevel {
        get { return result.EffectLevel; }
        set { SetEffectLevel(value); }
      }
      public Builder SetEffectLevel(int value) {
        PrepareBuilder();
        result.hasEffectLevel = true;
        result.effectLevel_ = value;
        return this;
      }
      public Builder ClearEffectLevel() {
        PrepareBuilder();
        result.hasEffectLevel = false;
        result.effectLevel_ = -1;
        return this;
      }
    }
    static VisualItem() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class VisualCosmeticItem : pb::GeneratedMessage<VisualCosmeticItem, VisualCosmeticItem.Builder> {
    private VisualCosmeticItem() { }
    private static readonly VisualCosmeticItem defaultInstance = new VisualCosmeticItem().MakeReadOnly();
    private static readonly string[] _visualCosmeticItemFieldNames = new string[] { "gbid" };
    private static readonly uint[] _visualCosmeticItemFieldTags = new uint[] { 13 };
    public static VisualCosmeticItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override VisualCosmeticItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override VisualCosmeticItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_VisualCosmeticItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<VisualCosmeticItem, VisualCosmeticItem.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_VisualCosmeticItem__FieldAccessorTable; }
    }
    
    public const int GbidFieldNumber = 1;
    private bool hasGbid;
    private int gbid_ = -1;
    public bool HasGbid {
      get { return hasGbid; }
    }
    public int Gbid {
      get { return gbid_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _visualCosmeticItemFieldNames;
      if (hasGbid) {
        output.WriteSFixed32(1, field_names[0], Gbid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGbid) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, Gbid);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static VisualCosmeticItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VisualCosmeticItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VisualCosmeticItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VisualCosmeticItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VisualCosmeticItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VisualCosmeticItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static VisualCosmeticItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static VisualCosmeticItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static VisualCosmeticItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VisualCosmeticItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private VisualCosmeticItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(VisualCosmeticItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<VisualCosmeticItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(VisualCosmeticItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private VisualCosmeticItem result;
      
      private VisualCosmeticItem PrepareBuilder() {
        if (resultIsReadOnly) {
          VisualCosmeticItem original = result;
          result = new VisualCosmeticItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override VisualCosmeticItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.VisualCosmeticItem.Descriptor; }
      }
      
      public override VisualCosmeticItem DefaultInstanceForType {
        get { return global::D3.Hero.VisualCosmeticItem.DefaultInstance; }
      }
      
      public override VisualCosmeticItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is VisualCosmeticItem) {
          return MergeFrom((VisualCosmeticItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(VisualCosmeticItem other) {
        if (other == global::D3.Hero.VisualCosmeticItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGbid) {
          Gbid = other.Gbid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_visualCosmeticItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _visualCosmeticItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasGbid = input.ReadSFixed32(ref result.gbid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGbid {
        get { return result.hasGbid; }
      }
      public int Gbid {
        get { return result.Gbid; }
        set { SetGbid(value); }
      }
      public Builder SetGbid(int value) {
        PrepareBuilder();
        result.hasGbid = true;
        result.gbid_ = value;
        return this;
      }
      public Builder ClearGbid() {
        PrepareBuilder();
        result.hasGbid = false;
        result.gbid_ = -1;
        return this;
      }
    }
    static VisualCosmeticItem() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class VisualEquipment : pb::GeneratedMessage<VisualEquipment, VisualEquipment.Builder> {
    private VisualEquipment() { }
    private static readonly VisualEquipment defaultInstance = new VisualEquipment().MakeReadOnly();
    private static readonly string[] _visualEquipmentFieldNames = new string[] { "cosmetic_item", "visual_item" };
    private static readonly uint[] _visualEquipmentFieldTags = new uint[] { 18, 10 };
    public static VisualEquipment DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override VisualEquipment DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override VisualEquipment ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_VisualEquipment__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<VisualEquipment, VisualEquipment.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_VisualEquipment__FieldAccessorTable; }
    }
    
    public const int VisualItemFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Hero.VisualItem> visualItem_ = new pbc::PopsicleList<global::D3.Hero.VisualItem>();
    public scg::IList<global::D3.Hero.VisualItem> VisualItemList {
      get { return visualItem_; }
    }
    public int VisualItemCount {
      get { return visualItem_.Count; }
    }
    public global::D3.Hero.VisualItem GetVisualItem(int index) {
      return visualItem_[index];
    }
    
    public const int CosmeticItemFieldNumber = 2;
    private pbc::PopsicleList<global::D3.Hero.VisualCosmeticItem> cosmeticItem_ = new pbc::PopsicleList<global::D3.Hero.VisualCosmeticItem>();
    public scg::IList<global::D3.Hero.VisualCosmeticItem> CosmeticItemList {
      get { return cosmeticItem_; }
    }
    public int CosmeticItemCount {
      get { return cosmeticItem_.Count; }
    }
    public global::D3.Hero.VisualCosmeticItem GetCosmeticItem(int index) {
      return cosmeticItem_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _visualEquipmentFieldNames;
      if (visualItem_.Count > 0) {
        output.WriteMessageArray(1, field_names[1], visualItem_);
      }
      if (cosmeticItem_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], cosmeticItem_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Hero.VisualItem element in VisualItemList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        foreach (global::D3.Hero.VisualCosmeticItem element in CosmeticItemList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static VisualEquipment ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static VisualEquipment ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static VisualEquipment ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static VisualEquipment ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VisualEquipment ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private VisualEquipment MakeReadOnly() {
      visualItem_.MakeReadOnly();
      cosmeticItem_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(VisualEquipment prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<VisualEquipment, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(VisualEquipment cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private VisualEquipment result;
      
      private VisualEquipment PrepareBuilder() {
        if (resultIsReadOnly) {
          VisualEquipment original = result;
          result = new VisualEquipment();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override VisualEquipment MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.VisualEquipment.Descriptor; }
      }
      
      public override VisualEquipment DefaultInstanceForType {
        get { return global::D3.Hero.VisualEquipment.DefaultInstance; }
      }
      
      public override VisualEquipment BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is VisualEquipment) {
          return MergeFrom((VisualEquipment) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(VisualEquipment other) {
        if (other == global::D3.Hero.VisualEquipment.DefaultInstance) return this;
        PrepareBuilder();
        if (other.visualItem_.Count != 0) {
          result.visualItem_.Add(other.visualItem_);
        }
        if (other.cosmeticItem_.Count != 0) {
          result.cosmeticItem_.Add(other.cosmeticItem_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_visualEquipmentFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _visualEquipmentFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.visualItem_, global::D3.Hero.VisualItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.cosmeticItem_, global::D3.Hero.VisualCosmeticItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Hero.VisualItem> VisualItemList {
        get { return PrepareBuilder().visualItem_; }
      }
      public int VisualItemCount {
        get { return result.VisualItemCount; }
      }
      public global::D3.Hero.VisualItem GetVisualItem(int index) {
        return result.GetVisualItem(index);
      }
      public Builder SetVisualItem(int index, global::D3.Hero.VisualItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.visualItem_[index] = value;
        return this;
      }
      public Builder SetVisualItem(int index, global::D3.Hero.VisualItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.visualItem_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddVisualItem(global::D3.Hero.VisualItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.visualItem_.Add(value);
        return this;
      }
      public Builder AddVisualItem(global::D3.Hero.VisualItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.visualItem_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeVisualItem(scg::IEnumerable<global::D3.Hero.VisualItem> values) {
        PrepareBuilder();
        result.visualItem_.Add(values);
        return this;
      }
      public Builder ClearVisualItem() {
        PrepareBuilder();
        result.visualItem_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Hero.VisualCosmeticItem> CosmeticItemList {
        get { return PrepareBuilder().cosmeticItem_; }
      }
      public int CosmeticItemCount {
        get { return result.CosmeticItemCount; }
      }
      public global::D3.Hero.VisualCosmeticItem GetCosmeticItem(int index) {
        return result.GetCosmeticItem(index);
      }
      public Builder SetCosmeticItem(int index, global::D3.Hero.VisualCosmeticItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cosmeticItem_[index] = value;
        return this;
      }
      public Builder SetCosmeticItem(int index, global::D3.Hero.VisualCosmeticItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cosmeticItem_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCosmeticItem(global::D3.Hero.VisualCosmeticItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cosmeticItem_.Add(value);
        return this;
      }
      public Builder AddCosmeticItem(global::D3.Hero.VisualCosmeticItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cosmeticItem_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCosmeticItem(scg::IEnumerable<global::D3.Hero.VisualCosmeticItem> values) {
        PrepareBuilder();
        result.cosmeticItem_.Add(values);
        return this;
      }
      public Builder ClearCosmeticItem() {
        PrepareBuilder();
        result.cosmeticItem_.Clear();
        return this;
      }
    }
    static VisualEquipment() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class QuestHistoryEntry : pb::GeneratedMessage<QuestHistoryEntry, QuestHistoryEntry.Builder> {
    private QuestHistoryEntry() { }
    private static readonly QuestHistoryEntry defaultInstance = new QuestHistoryEntry().MakeReadOnly();
    private static readonly string[] _questHistoryEntryFieldNames = new string[] { "difficulty_deprecated", "highest_played_quest_step", "sno_quest" };
    private static readonly uint[] _questHistoryEntryFieldTags = new uint[] { 16, 24, 13 };
    public static QuestHistoryEntry DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QuestHistoryEntry DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QuestHistoryEntry ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_QuestHistoryEntry__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QuestHistoryEntry, QuestHistoryEntry.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_QuestHistoryEntry__FieldAccessorTable; }
    }
    
    public const int SnoQuestFieldNumber = 1;
    private bool hasSnoQuest;
    private int snoQuest_ = -1;
    public bool HasSnoQuest {
      get { return hasSnoQuest; }
    }
    public int SnoQuest {
      get { return snoQuest_; }
    }
    
    public const int DifficultyDeprecatedFieldNumber = 2;
    private bool hasDifficultyDeprecated;
    private int difficultyDeprecated_;
    public bool HasDifficultyDeprecated {
      get { return hasDifficultyDeprecated; }
    }
    public int DifficultyDeprecated {
      get { return difficultyDeprecated_; }
    }
    
    public const int HighestPlayedQuestStepFieldNumber = 3;
    private bool hasHighestPlayedQuestStep;
    private int highestPlayedQuestStep_ = -3;
    public bool HasHighestPlayedQuestStep {
      get { return hasHighestPlayedQuestStep; }
    }
    public int HighestPlayedQuestStep {
      get { return highestPlayedQuestStep_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoQuest) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _questHistoryEntryFieldNames;
      if (hasSnoQuest) {
        output.WriteSFixed32(1, field_names[2], SnoQuest);
      }
      if (hasDifficultyDeprecated) {
        output.WriteSInt32(2, field_names[0], DifficultyDeprecated);
      }
      if (hasHighestPlayedQuestStep) {
        output.WriteSInt32(3, field_names[1], HighestPlayedQuestStep);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnoQuest) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoQuest);
        }
        if (hasDifficultyDeprecated) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, DifficultyDeprecated);
        }
        if (hasHighestPlayedQuestStep) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, HighestPlayedQuestStep);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QuestHistoryEntry ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QuestHistoryEntry ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QuestHistoryEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestHistoryEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QuestHistoryEntry MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QuestHistoryEntry prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<QuestHistoryEntry, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QuestHistoryEntry cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QuestHistoryEntry result;
      
      private QuestHistoryEntry PrepareBuilder() {
        if (resultIsReadOnly) {
          QuestHistoryEntry original = result;
          result = new QuestHistoryEntry();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QuestHistoryEntry MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.QuestHistoryEntry.Descriptor; }
      }
      
      public override QuestHistoryEntry DefaultInstanceForType {
        get { return global::D3.Hero.QuestHistoryEntry.DefaultInstance; }
      }
      
      public override QuestHistoryEntry BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QuestHistoryEntry) {
          return MergeFrom((QuestHistoryEntry) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QuestHistoryEntry other) {
        if (other == global::D3.Hero.QuestHistoryEntry.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnoQuest) {
          SnoQuest = other.SnoQuest;
        }
        if (other.HasDifficultyDeprecated) {
          DifficultyDeprecated = other.DifficultyDeprecated;
        }
        if (other.HasHighestPlayedQuestStep) {
          HighestPlayedQuestStep = other.HighestPlayedQuestStep;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_questHistoryEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _questHistoryEntryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSnoQuest = input.ReadSFixed32(ref result.snoQuest_);
              break;
            }
            case 16: {
              result.hasDifficultyDeprecated = input.ReadSInt32(ref result.difficultyDeprecated_);
              break;
            }
            case 24: {
              result.hasHighestPlayedQuestStep = input.ReadSInt32(ref result.highestPlayedQuestStep_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnoQuest {
        get { return result.hasSnoQuest; }
      }
      public int SnoQuest {
        get { return result.SnoQuest; }
        set { SetSnoQuest(value); }
      }
      public Builder SetSnoQuest(int value) {
        PrepareBuilder();
        result.hasSnoQuest = true;
        result.snoQuest_ = value;
        return this;
      }
      public Builder ClearSnoQuest() {
        PrepareBuilder();
        result.hasSnoQuest = false;
        result.snoQuest_ = -1;
        return this;
      }
      
      public bool HasDifficultyDeprecated {
        get { return result.hasDifficultyDeprecated; }
      }
      public int DifficultyDeprecated {
        get { return result.DifficultyDeprecated; }
        set { SetDifficultyDeprecated(value); }
      }
      public Builder SetDifficultyDeprecated(int value) {
        PrepareBuilder();
        result.hasDifficultyDeprecated = true;
        result.difficultyDeprecated_ = value;
        return this;
      }
      public Builder ClearDifficultyDeprecated() {
        PrepareBuilder();
        result.hasDifficultyDeprecated = false;
        result.difficultyDeprecated_ = 0;
        return this;
      }
      
      public bool HasHighestPlayedQuestStep {
        get { return result.hasHighestPlayedQuestStep; }
      }
      public int HighestPlayedQuestStep {
        get { return result.HighestPlayedQuestStep; }
        set { SetHighestPlayedQuestStep(value); }
      }
      public Builder SetHighestPlayedQuestStep(int value) {
        PrepareBuilder();
        result.hasHighestPlayedQuestStep = true;
        result.highestPlayedQuestStep_ = value;
        return this;
      }
      public Builder ClearHighestPlayedQuestStep() {
        PrepareBuilder();
        result.hasHighestPlayedQuestStep = false;
        result.highestPlayedQuestStep_ = -3;
        return this;
      }
    }
    static QuestHistoryEntry() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class QuestRewardHistoryEntry : pb::GeneratedMessage<QuestRewardHistoryEntry, QuestRewardHistoryEntry.Builder> {
    private QuestRewardHistoryEntry() { }
    private static readonly QuestRewardHistoryEntry defaultInstance = new QuestRewardHistoryEntry().MakeReadOnly();
    private static readonly string[] _questRewardHistoryEntryFieldNames = new string[] { "difficulty_deprecated", "difficulty_flags", "sno_quest", "step_uid" };
    private static readonly uint[] _questRewardHistoryEntryFieldTags = new uint[] { 24, 32, 13, 16 };
    public static QuestRewardHistoryEntry DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QuestRewardHistoryEntry DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QuestRewardHistoryEntry ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_QuestRewardHistoryEntry__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QuestRewardHistoryEntry, QuestRewardHistoryEntry.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_QuestRewardHistoryEntry__FieldAccessorTable; }
    }
    
    public const int SnoQuestFieldNumber = 1;
    private bool hasSnoQuest;
    private int snoQuest_ = -1;
    public bool HasSnoQuest {
      get { return hasSnoQuest; }
    }
    public int SnoQuest {
      get { return snoQuest_; }
    }
    
    public const int StepUidFieldNumber = 2;
    private bool hasStepUid;
    private int stepUid_ = -1;
    public bool HasStepUid {
      get { return hasStepUid; }
    }
    public int StepUid {
      get { return stepUid_; }
    }
    
    public const int DifficultyDeprecatedFieldNumber = 3;
    private bool hasDifficultyDeprecated;
    private int difficultyDeprecated_;
    public bool HasDifficultyDeprecated {
      get { return hasDifficultyDeprecated; }
    }
    public int DifficultyDeprecated {
      get { return difficultyDeprecated_; }
    }
    
    public const int DifficultyFlagsFieldNumber = 4;
    private bool hasDifficultyFlags;
    private uint difficultyFlags_;
    public bool HasDifficultyFlags {
      get { return hasDifficultyFlags; }
    }
    public uint DifficultyFlags {
      get { return difficultyFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoQuest) return false;
        if (!hasStepUid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _questRewardHistoryEntryFieldNames;
      if (hasSnoQuest) {
        output.WriteSFixed32(1, field_names[2], SnoQuest);
      }
      if (hasStepUid) {
        output.WriteSInt32(2, field_names[3], StepUid);
      }
      if (hasDifficultyDeprecated) {
        output.WriteSInt32(3, field_names[0], DifficultyDeprecated);
      }
      if (hasDifficultyFlags) {
        output.WriteUInt32(4, field_names[1], DifficultyFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnoQuest) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoQuest);
        }
        if (hasStepUid) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, StepUid);
        }
        if (hasDifficultyDeprecated) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, DifficultyDeprecated);
        }
        if (hasDifficultyFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, DifficultyFlags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QuestRewardHistoryEntry ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestRewardHistoryEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QuestRewardHistoryEntry MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QuestRewardHistoryEntry prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<QuestRewardHistoryEntry, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QuestRewardHistoryEntry cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QuestRewardHistoryEntry result;
      
      private QuestRewardHistoryEntry PrepareBuilder() {
        if (resultIsReadOnly) {
          QuestRewardHistoryEntry original = result;
          result = new QuestRewardHistoryEntry();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QuestRewardHistoryEntry MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.QuestRewardHistoryEntry.Descriptor; }
      }
      
      public override QuestRewardHistoryEntry DefaultInstanceForType {
        get { return global::D3.Hero.QuestRewardHistoryEntry.DefaultInstance; }
      }
      
      public override QuestRewardHistoryEntry BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QuestRewardHistoryEntry) {
          return MergeFrom((QuestRewardHistoryEntry) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QuestRewardHistoryEntry other) {
        if (other == global::D3.Hero.QuestRewardHistoryEntry.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnoQuest) {
          SnoQuest = other.SnoQuest;
        }
        if (other.HasStepUid) {
          StepUid = other.StepUid;
        }
        if (other.HasDifficultyDeprecated) {
          DifficultyDeprecated = other.DifficultyDeprecated;
        }
        if (other.HasDifficultyFlags) {
          DifficultyFlags = other.DifficultyFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_questRewardHistoryEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _questRewardHistoryEntryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSnoQuest = input.ReadSFixed32(ref result.snoQuest_);
              break;
            }
            case 16: {
              result.hasStepUid = input.ReadSInt32(ref result.stepUid_);
              break;
            }
            case 24: {
              result.hasDifficultyDeprecated = input.ReadSInt32(ref result.difficultyDeprecated_);
              break;
            }
            case 32: {
              result.hasDifficultyFlags = input.ReadUInt32(ref result.difficultyFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnoQuest {
        get { return result.hasSnoQuest; }
      }
      public int SnoQuest {
        get { return result.SnoQuest; }
        set { SetSnoQuest(value); }
      }
      public Builder SetSnoQuest(int value) {
        PrepareBuilder();
        result.hasSnoQuest = true;
        result.snoQuest_ = value;
        return this;
      }
      public Builder ClearSnoQuest() {
        PrepareBuilder();
        result.hasSnoQuest = false;
        result.snoQuest_ = -1;
        return this;
      }
      
      public bool HasStepUid {
        get { return result.hasStepUid; }
      }
      public int StepUid {
        get { return result.StepUid; }
        set { SetStepUid(value); }
      }
      public Builder SetStepUid(int value) {
        PrepareBuilder();
        result.hasStepUid = true;
        result.stepUid_ = value;
        return this;
      }
      public Builder ClearStepUid() {
        PrepareBuilder();
        result.hasStepUid = false;
        result.stepUid_ = -1;
        return this;
      }
      
      public bool HasDifficultyDeprecated {
        get { return result.hasDifficultyDeprecated; }
      }
      public int DifficultyDeprecated {
        get { return result.DifficultyDeprecated; }
        set { SetDifficultyDeprecated(value); }
      }
      public Builder SetDifficultyDeprecated(int value) {
        PrepareBuilder();
        result.hasDifficultyDeprecated = true;
        result.difficultyDeprecated_ = value;
        return this;
      }
      public Builder ClearDifficultyDeprecated() {
        PrepareBuilder();
        result.hasDifficultyDeprecated = false;
        result.difficultyDeprecated_ = 0;
        return this;
      }
      
      public bool HasDifficultyFlags {
        get { return result.hasDifficultyFlags; }
      }
      public uint DifficultyFlags {
        get { return result.DifficultyFlags; }
        set { SetDifficultyFlags(value); }
      }
      public Builder SetDifficultyFlags(uint value) {
        PrepareBuilder();
        result.hasDifficultyFlags = true;
        result.difficultyFlags_ = value;
        return this;
      }
      public Builder ClearDifficultyFlags() {
        PrepareBuilder();
        result.hasDifficultyFlags = false;
        result.difficultyFlags_ = 0;
        return this;
      }
    }
    static QuestRewardHistoryEntry() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavedQuest : pb::GeneratedMessage<SavedQuest, SavedQuest.Builder> {
    private SavedQuest() { }
    private static readonly SavedQuest defaultInstance = new SavedQuest().MakeReadOnly();
    private static readonly string[] _savedQuestFieldNames = new string[] { "current_step_uid", "difficulty_deprecated", "failure_condition_state", "objective_state", "sno_quest" };
    private static readonly uint[] _savedQuestFieldTags = new uint[] { 24, 16, 42, 34, 13 };
    public static SavedQuest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedQuest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavedQuest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_SavedQuest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedQuest, SavedQuest.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_SavedQuest__FieldAccessorTable; }
    }
    
    public const int SnoQuestFieldNumber = 1;
    private bool hasSnoQuest;
    private int snoQuest_ = -1;
    public bool HasSnoQuest {
      get { return hasSnoQuest; }
    }
    public int SnoQuest {
      get { return snoQuest_; }
    }
    
    public const int DifficultyDeprecatedFieldNumber = 2;
    private bool hasDifficultyDeprecated;
    private int difficultyDeprecated_;
    public bool HasDifficultyDeprecated {
      get { return hasDifficultyDeprecated; }
    }
    public int DifficultyDeprecated {
      get { return difficultyDeprecated_; }
    }
    
    public const int CurrentStepUidFieldNumber = 3;
    private bool hasCurrentStepUid;
    private int currentStepUid_ = -1;
    public bool HasCurrentStepUid {
      get { return hasCurrentStepUid; }
    }
    public int CurrentStepUid {
      get { return currentStepUid_; }
    }
    
    public const int ObjectiveStateFieldNumber = 4;
    private int objectiveStateMemoizedSerializedSize;
    private pbc::PopsicleList<int> objectiveState_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ObjectiveStateList {
      get { return pbc::Lists.AsReadOnly(objectiveState_); }
    }
    public int ObjectiveStateCount {
      get { return objectiveState_.Count; }
    }
    public int GetObjectiveState(int index) {
      return objectiveState_[index];
    }
    
    public const int FailureConditionStateFieldNumber = 5;
    private int failureConditionStateMemoizedSerializedSize;
    private pbc::PopsicleList<int> failureConditionState_ = new pbc::PopsicleList<int>();
    public scg::IList<int> FailureConditionStateList {
      get { return pbc::Lists.AsReadOnly(failureConditionState_); }
    }
    public int FailureConditionStateCount {
      get { return failureConditionState_.Count; }
    }
    public int GetFailureConditionState(int index) {
      return failureConditionState_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoQuest) return false;
        if (!hasCurrentStepUid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savedQuestFieldNames;
      if (hasSnoQuest) {
        output.WriteSFixed32(1, field_names[4], SnoQuest);
      }
      if (hasDifficultyDeprecated) {
        output.WriteSInt32(2, field_names[1], DifficultyDeprecated);
      }
      if (hasCurrentStepUid) {
        output.WriteSInt32(3, field_names[0], CurrentStepUid);
      }
      if (objectiveState_.Count > 0) {
        output.WritePackedSInt32Array(4, field_names[3], objectiveStateMemoizedSerializedSize, objectiveState_);
      }
      if (failureConditionState_.Count > 0) {
        output.WritePackedSInt32Array(5, field_names[2], failureConditionStateMemoizedSerializedSize, failureConditionState_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnoQuest) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoQuest);
        }
        if (hasDifficultyDeprecated) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, DifficultyDeprecated);
        }
        if (hasCurrentStepUid) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, CurrentStepUid);
        }
        {
          int dataSize = 0;
          foreach (int element in ObjectiveStateList) {
            dataSize += pb::CodedOutputStream.ComputeSInt32SizeNoTag(element);
          }
          size += dataSize;
          if (objectiveState_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          objectiveStateMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          foreach (int element in FailureConditionStateList) {
            dataSize += pb::CodedOutputStream.ComputeSInt32SizeNoTag(element);
          }
          size += dataSize;
          if (failureConditionState_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          failureConditionStateMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedQuest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedQuest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedQuest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedQuest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedQuest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedQuest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedQuest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedQuest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedQuest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedQuest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavedQuest MakeReadOnly() {
      objectiveState_.MakeReadOnly();
      failureConditionState_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedQuest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavedQuest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavedQuest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavedQuest result;
      
      private SavedQuest PrepareBuilder() {
        if (resultIsReadOnly) {
          SavedQuest original = result;
          result = new SavedQuest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavedQuest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SavedQuest.Descriptor; }
      }
      
      public override SavedQuest DefaultInstanceForType {
        get { return global::D3.Hero.SavedQuest.DefaultInstance; }
      }
      
      public override SavedQuest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedQuest) {
          return MergeFrom((SavedQuest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedQuest other) {
        if (other == global::D3.Hero.SavedQuest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnoQuest) {
          SnoQuest = other.SnoQuest;
        }
        if (other.HasDifficultyDeprecated) {
          DifficultyDeprecated = other.DifficultyDeprecated;
        }
        if (other.HasCurrentStepUid) {
          CurrentStepUid = other.CurrentStepUid;
        }
        if (other.objectiveState_.Count != 0) {
          result.objectiveState_.Add(other.objectiveState_);
        }
        if (other.failureConditionState_.Count != 0) {
          result.failureConditionState_.Add(other.failureConditionState_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savedQuestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savedQuestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSnoQuest = input.ReadSFixed32(ref result.snoQuest_);
              break;
            }
            case 16: {
              result.hasDifficultyDeprecated = input.ReadSInt32(ref result.difficultyDeprecated_);
              break;
            }
            case 24: {
              result.hasCurrentStepUid = input.ReadSInt32(ref result.currentStepUid_);
              break;
            }
            case 34:
            case 32: {
              input.ReadSInt32Array(tag, field_name, result.objectiveState_);
              break;
            }
            case 42:
            case 40: {
              input.ReadSInt32Array(tag, field_name, result.failureConditionState_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnoQuest {
        get { return result.hasSnoQuest; }
      }
      public int SnoQuest {
        get { return result.SnoQuest; }
        set { SetSnoQuest(value); }
      }
      public Builder SetSnoQuest(int value) {
        PrepareBuilder();
        result.hasSnoQuest = true;
        result.snoQuest_ = value;
        return this;
      }
      public Builder ClearSnoQuest() {
        PrepareBuilder();
        result.hasSnoQuest = false;
        result.snoQuest_ = -1;
        return this;
      }
      
      public bool HasDifficultyDeprecated {
        get { return result.hasDifficultyDeprecated; }
      }
      public int DifficultyDeprecated {
        get { return result.DifficultyDeprecated; }
        set { SetDifficultyDeprecated(value); }
      }
      public Builder SetDifficultyDeprecated(int value) {
        PrepareBuilder();
        result.hasDifficultyDeprecated = true;
        result.difficultyDeprecated_ = value;
        return this;
      }
      public Builder ClearDifficultyDeprecated() {
        PrepareBuilder();
        result.hasDifficultyDeprecated = false;
        result.difficultyDeprecated_ = 0;
        return this;
      }
      
      public bool HasCurrentStepUid {
        get { return result.hasCurrentStepUid; }
      }
      public int CurrentStepUid {
        get { return result.CurrentStepUid; }
        set { SetCurrentStepUid(value); }
      }
      public Builder SetCurrentStepUid(int value) {
        PrepareBuilder();
        result.hasCurrentStepUid = true;
        result.currentStepUid_ = value;
        return this;
      }
      public Builder ClearCurrentStepUid() {
        PrepareBuilder();
        result.hasCurrentStepUid = false;
        result.currentStepUid_ = -1;
        return this;
      }
      
      public pbc::IPopsicleList<int> ObjectiveStateList {
        get { return PrepareBuilder().objectiveState_; }
      }
      public int ObjectiveStateCount {
        get { return result.ObjectiveStateCount; }
      }
      public int GetObjectiveState(int index) {
        return result.GetObjectiveState(index);
      }
      public Builder SetObjectiveState(int index, int value) {
        PrepareBuilder();
        result.objectiveState_[index] = value;
        return this;
      }
      public Builder AddObjectiveState(int value) {
        PrepareBuilder();
        result.objectiveState_.Add(value);
        return this;
      }
      public Builder AddRangeObjectiveState(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.objectiveState_.Add(values);
        return this;
      }
      public Builder ClearObjectiveState() {
        PrepareBuilder();
        result.objectiveState_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> FailureConditionStateList {
        get { return PrepareBuilder().failureConditionState_; }
      }
      public int FailureConditionStateCount {
        get { return result.FailureConditionStateCount; }
      }
      public int GetFailureConditionState(int index) {
        return result.GetFailureConditionState(index);
      }
      public Builder SetFailureConditionState(int index, int value) {
        PrepareBuilder();
        result.failureConditionState_[index] = value;
        return this;
      }
      public Builder AddFailureConditionState(int value) {
        PrepareBuilder();
        result.failureConditionState_.Add(value);
        return this;
      }
      public Builder AddRangeFailureConditionState(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.failureConditionState_.Add(values);
        return this;
      }
      public Builder ClearFailureConditionState() {
        PrepareBuilder();
        result.failureConditionState_.Clear();
        return this;
      }
    }
    static SavedQuest() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavedConversations : pb::GeneratedMessage<SavedConversations, SavedConversations.Builder> {
    private SavedConversations() { }
    private static readonly SavedConversations defaultInstance = new SavedConversations().MakeReadOnly();
    private static readonly string[] _savedConversationsFieldNames = new string[] { "bitfield_leading_null_bytes", "played_conversations_bitfield", "sno_saved_conversations", "sno_saved_conversations_bitfield" };
    private static readonly uint[] _savedConversationsFieldTags = new uint[] { 32, 10, 21, 26 };
    public static SavedConversations DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedConversations DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavedConversations ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_SavedConversations__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedConversations, SavedConversations.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_SavedConversations__FieldAccessorTable; }
    }
    
    public const int PlayedConversationsBitfieldFieldNumber = 1;
    private bool hasPlayedConversationsBitfield;
    private pb::ByteString playedConversationsBitfield_ = pb::ByteString.Empty;
    public bool HasPlayedConversationsBitfield {
      get { return hasPlayedConversationsBitfield; }
    }
    public pb::ByteString PlayedConversationsBitfield {
      get { return playedConversationsBitfield_; }
    }
    
    public const int SnoSavedConversationsFieldNumber = 2;
    private pbc::PopsicleList<int> snoSavedConversations_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SnoSavedConversationsList {
      get { return pbc::Lists.AsReadOnly(snoSavedConversations_); }
    }
    public int SnoSavedConversationsCount {
      get { return snoSavedConversations_.Count; }
    }
    public int GetSnoSavedConversations(int index) {
      return snoSavedConversations_[index];
    }
    
    public const int SnoSavedConversationsBitfieldFieldNumber = 3;
    private bool hasSnoSavedConversationsBitfield;
    private pb::ByteString snoSavedConversationsBitfield_ = pb::ByteString.Empty;
    public bool HasSnoSavedConversationsBitfield {
      get { return hasSnoSavedConversationsBitfield; }
    }
    public pb::ByteString SnoSavedConversationsBitfield {
      get { return snoSavedConversationsBitfield_; }
    }
    
    public const int BitfieldLeadingNullBytesFieldNumber = 4;
    private bool hasBitfieldLeadingNullBytes;
    private int bitfieldLeadingNullBytes_;
    public bool HasBitfieldLeadingNullBytes {
      get { return hasBitfieldLeadingNullBytes; }
    }
    public int BitfieldLeadingNullBytes {
      get { return bitfieldLeadingNullBytes_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayedConversationsBitfield) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savedConversationsFieldNames;
      if (hasPlayedConversationsBitfield) {
        output.WriteBytes(1, field_names[1], PlayedConversationsBitfield);
      }
      if (snoSavedConversations_.Count > 0) {
        output.WriteSFixed32Array(2, field_names[2], snoSavedConversations_);
      }
      if (hasSnoSavedConversationsBitfield) {
        output.WriteBytes(3, field_names[3], SnoSavedConversationsBitfield);
      }
      if (hasBitfieldLeadingNullBytes) {
        output.WriteInt32(4, field_names[0], BitfieldLeadingNullBytes);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayedConversationsBitfield) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, PlayedConversationsBitfield);
        }
        {
          int dataSize = 0;
          dataSize = 4 * snoSavedConversations_.Count;
          size += dataSize;
          size += 1 * snoSavedConversations_.Count;
        }
        if (hasSnoSavedConversationsBitfield) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, SnoSavedConversationsBitfield);
        }
        if (hasBitfieldLeadingNullBytes) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, BitfieldLeadingNullBytes);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedConversations ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedConversations ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedConversations ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedConversations ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedConversations ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedConversations ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedConversations ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedConversations ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedConversations ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedConversations ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavedConversations MakeReadOnly() {
      snoSavedConversations_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedConversations prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavedConversations, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavedConversations cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavedConversations result;
      
      private SavedConversations PrepareBuilder() {
        if (resultIsReadOnly) {
          SavedConversations original = result;
          result = new SavedConversations();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavedConversations MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SavedConversations.Descriptor; }
      }
      
      public override SavedConversations DefaultInstanceForType {
        get { return global::D3.Hero.SavedConversations.DefaultInstance; }
      }
      
      public override SavedConversations BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedConversations) {
          return MergeFrom((SavedConversations) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedConversations other) {
        if (other == global::D3.Hero.SavedConversations.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayedConversationsBitfield) {
          PlayedConversationsBitfield = other.PlayedConversationsBitfield;
        }
        if (other.snoSavedConversations_.Count != 0) {
          result.snoSavedConversations_.Add(other.snoSavedConversations_);
        }
        if (other.HasSnoSavedConversationsBitfield) {
          SnoSavedConversationsBitfield = other.SnoSavedConversationsBitfield;
        }
        if (other.HasBitfieldLeadingNullBytes) {
          BitfieldLeadingNullBytes = other.BitfieldLeadingNullBytes;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savedConversationsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savedConversationsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPlayedConversationsBitfield = input.ReadBytes(ref result.playedConversationsBitfield_);
              break;
            }
            case 18:
            case 21: {
              input.ReadSFixed32Array(tag, field_name, result.snoSavedConversations_);
              break;
            }
            case 26: {
              result.hasSnoSavedConversationsBitfield = input.ReadBytes(ref result.snoSavedConversationsBitfield_);
              break;
            }
            case 32: {
              result.hasBitfieldLeadingNullBytes = input.ReadInt32(ref result.bitfieldLeadingNullBytes_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayedConversationsBitfield {
        get { return result.hasPlayedConversationsBitfield; }
      }
      public pb::ByteString PlayedConversationsBitfield {
        get { return result.PlayedConversationsBitfield; }
        set { SetPlayedConversationsBitfield(value); }
      }
      public Builder SetPlayedConversationsBitfield(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayedConversationsBitfield = true;
        result.playedConversationsBitfield_ = value;
        return this;
      }
      public Builder ClearPlayedConversationsBitfield() {
        PrepareBuilder();
        result.hasPlayedConversationsBitfield = false;
        result.playedConversationsBitfield_ = pb::ByteString.Empty;
        return this;
      }
      
      public pbc::IPopsicleList<int> SnoSavedConversationsList {
        get { return PrepareBuilder().snoSavedConversations_; }
      }
      public int SnoSavedConversationsCount {
        get { return result.SnoSavedConversationsCount; }
      }
      public int GetSnoSavedConversations(int index) {
        return result.GetSnoSavedConversations(index);
      }
      public Builder SetSnoSavedConversations(int index, int value) {
        PrepareBuilder();
        result.snoSavedConversations_[index] = value;
        return this;
      }
      public Builder AddSnoSavedConversations(int value) {
        PrepareBuilder();
        result.snoSavedConversations_.Add(value);
        return this;
      }
      public Builder AddRangeSnoSavedConversations(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.snoSavedConversations_.Add(values);
        return this;
      }
      public Builder ClearSnoSavedConversations() {
        PrepareBuilder();
        result.snoSavedConversations_.Clear();
        return this;
      }
      
      public bool HasSnoSavedConversationsBitfield {
        get { return result.hasSnoSavedConversationsBitfield; }
      }
      public pb::ByteString SnoSavedConversationsBitfield {
        get { return result.SnoSavedConversationsBitfield; }
        set { SetSnoSavedConversationsBitfield(value); }
      }
      public Builder SetSnoSavedConversationsBitfield(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSnoSavedConversationsBitfield = true;
        result.snoSavedConversationsBitfield_ = value;
        return this;
      }
      public Builder ClearSnoSavedConversationsBitfield() {
        PrepareBuilder();
        result.hasSnoSavedConversationsBitfield = false;
        result.snoSavedConversationsBitfield_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasBitfieldLeadingNullBytes {
        get { return result.hasBitfieldLeadingNullBytes; }
      }
      public int BitfieldLeadingNullBytes {
        get { return result.BitfieldLeadingNullBytes; }
        set { SetBitfieldLeadingNullBytes(value); }
      }
      public Builder SetBitfieldLeadingNullBytes(int value) {
        PrepareBuilder();
        result.hasBitfieldLeadingNullBytes = true;
        result.bitfieldLeadingNullBytes_ = value;
        return this;
      }
      public Builder ClearBitfieldLeadingNullBytes() {
        PrepareBuilder();
        result.hasBitfieldLeadingNullBytes = false;
        result.bitfieldLeadingNullBytes_ = 0;
        return this;
      }
    }
    static SavedConversations() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavePointData_Proto : pb::GeneratedMessage<SavePointData_Proto, SavePointData_Proto.Builder> {
    private SavePointData_Proto() { }
    private static readonly SavePointData_Proto defaultInstance = new SavePointData_Proto().MakeReadOnly();
    private static readonly string[] _savePointDataProtoFieldNames = new string[] { "creates_portal", "savepoint_number", "sno_world" };
    private static readonly uint[] _savePointDataProtoFieldTags = new uint[] { 24, 16, 13 };
    public static SavePointData_Proto DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavePointData_Proto DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavePointData_Proto ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_SavePointData_Proto__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavePointData_Proto, SavePointData_Proto.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_SavePointData_Proto__FieldAccessorTable; }
    }
    
    public const int SnoWorldFieldNumber = 1;
    private bool hasSnoWorld;
    private int snoWorld_ = -1;
    public bool HasSnoWorld {
      get { return hasSnoWorld; }
    }
    public int SnoWorld {
      get { return snoWorld_; }
    }
    
    public const int SavepointNumberFieldNumber = 2;
    private bool hasSavepointNumber;
    private int savepointNumber_ = -1;
    public bool HasSavepointNumber {
      get { return hasSavepointNumber; }
    }
    public int SavepointNumber {
      get { return savepointNumber_; }
    }
    
    public const int CreatesPortalFieldNumber = 3;
    private bool hasCreatesPortal;
    private uint createsPortal_;
    public bool HasCreatesPortal {
      get { return hasCreatesPortal; }
    }
    public uint CreatesPortal {
      get { return createsPortal_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoWorld) return false;
        if (!hasSavepointNumber) return false;
        if (!hasCreatesPortal) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savePointDataProtoFieldNames;
      if (hasSnoWorld) {
        output.WriteSFixed32(1, field_names[2], SnoWorld);
      }
      if (hasSavepointNumber) {
        output.WriteSInt32(2, field_names[1], SavepointNumber);
      }
      if (hasCreatesPortal) {
        output.WriteUInt32(3, field_names[0], CreatesPortal);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnoWorld) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoWorld);
        }
        if (hasSavepointNumber) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, SavepointNumber);
        }
        if (hasCreatesPortal) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, CreatesPortal);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavePointData_Proto ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavePointData_Proto ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavePointData_Proto ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavePointData_Proto ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavePointData_Proto MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavePointData_Proto prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavePointData_Proto, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavePointData_Proto cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavePointData_Proto result;
      
      private SavePointData_Proto PrepareBuilder() {
        if (resultIsReadOnly) {
          SavePointData_Proto original = result;
          result = new SavePointData_Proto();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavePointData_Proto MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SavePointData_Proto.Descriptor; }
      }
      
      public override SavePointData_Proto DefaultInstanceForType {
        get { return global::D3.Hero.SavePointData_Proto.DefaultInstance; }
      }
      
      public override SavePointData_Proto BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavePointData_Proto) {
          return MergeFrom((SavePointData_Proto) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavePointData_Proto other) {
        if (other == global::D3.Hero.SavePointData_Proto.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnoWorld) {
          SnoWorld = other.SnoWorld;
        }
        if (other.HasSavepointNumber) {
          SavepointNumber = other.SavepointNumber;
        }
        if (other.HasCreatesPortal) {
          CreatesPortal = other.CreatesPortal;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savePointDataProtoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savePointDataProtoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSnoWorld = input.ReadSFixed32(ref result.snoWorld_);
              break;
            }
            case 16: {
              result.hasSavepointNumber = input.ReadSInt32(ref result.savepointNumber_);
              break;
            }
            case 24: {
              result.hasCreatesPortal = input.ReadUInt32(ref result.createsPortal_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnoWorld {
        get { return result.hasSnoWorld; }
      }
      public int SnoWorld {
        get { return result.SnoWorld; }
        set { SetSnoWorld(value); }
      }
      public Builder SetSnoWorld(int value) {
        PrepareBuilder();
        result.hasSnoWorld = true;
        result.snoWorld_ = value;
        return this;
      }
      public Builder ClearSnoWorld() {
        PrepareBuilder();
        result.hasSnoWorld = false;
        result.snoWorld_ = -1;
        return this;
      }
      
      public bool HasSavepointNumber {
        get { return result.hasSavepointNumber; }
      }
      public int SavepointNumber {
        get { return result.SavepointNumber; }
        set { SetSavepointNumber(value); }
      }
      public Builder SetSavepointNumber(int value) {
        PrepareBuilder();
        result.hasSavepointNumber = true;
        result.savepointNumber_ = value;
        return this;
      }
      public Builder ClearSavepointNumber() {
        PrepareBuilder();
        result.hasSavepointNumber = false;
        result.savepointNumber_ = -1;
        return this;
      }
      
      public bool HasCreatesPortal {
        get { return result.hasCreatesPortal; }
      }
      public uint CreatesPortal {
        get { return result.CreatesPortal; }
        set { SetCreatesPortal(value); }
      }
      public Builder SetCreatesPortal(uint value) {
        PrepareBuilder();
        result.hasCreatesPortal = true;
        result.createsPortal_ = value;
        return this;
      }
      public Builder ClearCreatesPortal() {
        PrepareBuilder();
        result.hasCreatesPortal = false;
        result.createsPortal_ = 0;
        return this;
      }
    }
    static SavePointData_Proto() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SkillWithRune : pb::GeneratedMessage<SkillWithRune, SkillWithRune.Builder> {
    private SkillWithRune() { }
    private static readonly SkillWithRune defaultInstance = new SkillWithRune().MakeReadOnly();
    private static readonly string[] _skillWithRuneFieldNames = new string[] { "rune_type", "sno_skill" };
    private static readonly uint[] _skillWithRuneFieldTags = new uint[] { 16, 13 };
    public static SkillWithRune DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SkillWithRune DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SkillWithRune ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_SkillWithRune__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SkillWithRune, SkillWithRune.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_SkillWithRune__FieldAccessorTable; }
    }
    
    public const int SnoSkillFieldNumber = 1;
    private bool hasSnoSkill;
    private int snoSkill_ = -1;
    public bool HasSnoSkill {
      get { return hasSnoSkill; }
    }
    public int SnoSkill {
      get { return snoSkill_; }
    }
    
    public const int RuneTypeFieldNumber = 2;
    private bool hasRuneType;
    private int runeType_ = -1;
    public bool HasRuneType {
      get { return hasRuneType; }
    }
    public int RuneType {
      get { return runeType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoSkill) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _skillWithRuneFieldNames;
      if (hasSnoSkill) {
        output.WriteSFixed32(1, field_names[1], SnoSkill);
      }
      if (hasRuneType) {
        output.WriteSInt32(2, field_names[0], RuneType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnoSkill) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoSkill);
        }
        if (hasRuneType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, RuneType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SkillWithRune ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SkillWithRune ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SkillWithRune ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SkillWithRune ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SkillWithRune MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SkillWithRune prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SkillWithRune, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SkillWithRune cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SkillWithRune result;
      
      private SkillWithRune PrepareBuilder() {
        if (resultIsReadOnly) {
          SkillWithRune original = result;
          result = new SkillWithRune();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SkillWithRune MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SkillWithRune.Descriptor; }
      }
      
      public override SkillWithRune DefaultInstanceForType {
        get { return global::D3.Hero.SkillWithRune.DefaultInstance; }
      }
      
      public override SkillWithRune BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SkillWithRune) {
          return MergeFrom((SkillWithRune) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SkillWithRune other) {
        if (other == global::D3.Hero.SkillWithRune.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnoSkill) {
          SnoSkill = other.SnoSkill;
        }
        if (other.HasRuneType) {
          RuneType = other.RuneType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_skillWithRuneFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _skillWithRuneFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSnoSkill = input.ReadSFixed32(ref result.snoSkill_);
              break;
            }
            case 16: {
              result.hasRuneType = input.ReadSInt32(ref result.runeType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnoSkill {
        get { return result.hasSnoSkill; }
      }
      public int SnoSkill {
        get { return result.SnoSkill; }
        set { SetSnoSkill(value); }
      }
      public Builder SetSnoSkill(int value) {
        PrepareBuilder();
        result.hasSnoSkill = true;
        result.snoSkill_ = value;
        return this;
      }
      public Builder ClearSnoSkill() {
        PrepareBuilder();
        result.hasSnoSkill = false;
        result.snoSkill_ = -1;
        return this;
      }
      
      public bool HasRuneType {
        get { return result.hasRuneType; }
      }
      public int RuneType {
        get { return result.RuneType; }
        set { SetRuneType(value); }
      }
      public Builder SetRuneType(int value) {
        PrepareBuilder();
        result.hasRuneType = true;
        result.runeType_ = value;
        return this;
      }
      public Builder ClearRuneType() {
        PrepareBuilder();
        result.hasRuneType = false;
        result.runeType_ = -1;
        return this;
      }
    }
    static SkillWithRune() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavedItemLink : pb::GeneratedMessage<SavedItemLink, SavedItemLink.Builder> {
    private SavedItemLink() { }
    private static readonly SavedItemLink defaultInstance = new SavedItemLink().MakeReadOnly();
    private static readonly string[] _savedItemLinkFieldNames = new string[] { "x", "y" };
    private static readonly uint[] _savedItemLinkFieldTags = new uint[] { 8, 16 };
    public static SavedItemLink DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedItemLink DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavedItemLink ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_SavedItemLink__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedItemLink, SavedItemLink.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_SavedItemLink__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private int x_ = -1;
    public bool HasX {
      get { return hasX; }
    }
    public int X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private int y_ = -1;
    public bool HasY {
      get { return hasY; }
    }
    public int Y {
      get { return y_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasX) return false;
        if (!hasY) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savedItemLinkFieldNames;
      if (hasX) {
        output.WriteSInt32(1, field_names[0], X);
      }
      if (hasY) {
        output.WriteSInt32(2, field_names[1], Y);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasX) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, Y);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedItemLink ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedItemLink ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedItemLink ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedItemLink ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedItemLink ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedItemLink ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedItemLink ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedItemLink ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedItemLink ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedItemLink ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavedItemLink MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedItemLink prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavedItemLink, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavedItemLink cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavedItemLink result;
      
      private SavedItemLink PrepareBuilder() {
        if (resultIsReadOnly) {
          SavedItemLink original = result;
          result = new SavedItemLink();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavedItemLink MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SavedItemLink.Descriptor; }
      }
      
      public override SavedItemLink DefaultInstanceForType {
        get { return global::D3.Hero.SavedItemLink.DefaultInstance; }
      }
      
      public override SavedItemLink BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedItemLink) {
          return MergeFrom((SavedItemLink) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedItemLink other) {
        if (other == global::D3.Hero.SavedItemLink.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savedItemLinkFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savedItemLinkFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasX = input.ReadSInt32(ref result.x_);
              break;
            }
            case 16: {
              result.hasY = input.ReadSInt32(ref result.y_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public int X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(int value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = -1;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public int Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(int value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = -1;
        return this;
      }
    }
    static SavedItemLink() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Timestamps : pb::GeneratedMessage<Timestamps, Timestamps.Builder> {
    private Timestamps() { }
    private static readonly Timestamps defaultInstance = new Timestamps().MakeReadOnly();
    private static readonly string[] _timestampsFieldNames = new string[] { "create_time", "delete_time" };
    private static readonly uint[] _timestampsFieldTags = new uint[] { 8, 16 };
    public static Timestamps DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Timestamps DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Timestamps ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_Timestamps__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Timestamps, Timestamps.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_Timestamps__FieldAccessorTable; }
    }
    
    public const int CreateTimeFieldNumber = 1;
    private bool hasCreateTime;
    private long createTime_;
    public bool HasCreateTime {
      get { return hasCreateTime; }
    }
    public long CreateTime {
      get { return createTime_; }
    }
    
    public const int DeleteTimeFieldNumber = 2;
    private bool hasDeleteTime;
    private long deleteTime_;
    public bool HasDeleteTime {
      get { return hasDeleteTime; }
    }
    public long DeleteTime {
      get { return deleteTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCreateTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _timestampsFieldNames;
      if (hasCreateTime) {
        output.WriteSInt64(1, field_names[0], CreateTime);
      }
      if (hasDeleteTime) {
        output.WriteSInt64(2, field_names[1], DeleteTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCreateTime) {
          size += pb::CodedOutputStream.ComputeSInt64Size(1, CreateTime);
        }
        if (hasDeleteTime) {
          size += pb::CodedOutputStream.ComputeSInt64Size(2, DeleteTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Timestamps ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Timestamps ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Timestamps ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Timestamps ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Timestamps ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Timestamps ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Timestamps ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Timestamps ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Timestamps ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Timestamps ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Timestamps MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Timestamps prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Timestamps, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Timestamps cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Timestamps result;
      
      private Timestamps PrepareBuilder() {
        if (resultIsReadOnly) {
          Timestamps original = result;
          result = new Timestamps();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Timestamps MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.Timestamps.Descriptor; }
      }
      
      public override Timestamps DefaultInstanceForType {
        get { return global::D3.Hero.Timestamps.DefaultInstance; }
      }
      
      public override Timestamps BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Timestamps) {
          return MergeFrom((Timestamps) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Timestamps other) {
        if (other == global::D3.Hero.Timestamps.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCreateTime) {
          CreateTime = other.CreateTime;
        }
        if (other.HasDeleteTime) {
          DeleteTime = other.DeleteTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_timestampsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _timestampsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCreateTime = input.ReadSInt64(ref result.createTime_);
              break;
            }
            case 16: {
              result.hasDeleteTime = input.ReadSInt64(ref result.deleteTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCreateTime {
        get { return result.hasCreateTime; }
      }
      public long CreateTime {
        get { return result.CreateTime; }
        set { SetCreateTime(value); }
      }
      public Builder SetCreateTime(long value) {
        PrepareBuilder();
        result.hasCreateTime = true;
        result.createTime_ = value;
        return this;
      }
      public Builder ClearCreateTime() {
        PrepareBuilder();
        result.hasCreateTime = false;
        result.createTime_ = 0;
        return this;
      }
      
      public bool HasDeleteTime {
        get { return result.hasDeleteTime; }
      }
      public long DeleteTime {
        get { return result.DeleteTime; }
        set { SetDeleteTime(value); }
      }
      public Builder SetDeleteTime(long value) {
        PrepareBuilder();
        result.hasDeleteTime = true;
        result.deleteTime_ = value;
        return this;
      }
      public Builder ClearDeleteTime() {
        PrepareBuilder();
        result.hasDeleteTime = false;
        result.deleteTime_ = 0;
        return this;
      }
    }
    static Timestamps() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class NameText : pb::GeneratedMessage<NameText, NameText.Builder> {
    private NameText() { }
    private static readonly NameText defaultInstance = new NameText().MakeReadOnly();
    private static readonly string[] _nameTextFieldNames = new string[] { "name" };
    private static readonly uint[] _nameTextFieldTags = new uint[] { 10 };
    public static NameText DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NameText DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NameText ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_NameText__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NameText, NameText.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_NameText__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nameTextFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[0], Name);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NameText ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NameText ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NameText ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NameText ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NameText ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NameText ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NameText ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NameText ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NameText ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NameText ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NameText MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NameText prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<NameText, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NameText cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NameText result;
      
      private NameText PrepareBuilder() {
        if (resultIsReadOnly) {
          NameText original = result;
          result = new NameText();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NameText MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.NameText.Descriptor; }
      }
      
      public override NameText DefaultInstanceForType {
        get { return global::D3.Hero.NameText.DefaultInstance; }
      }
      
      public override NameText BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NameText) {
          return MergeFrom((NameText) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NameText other) {
        if (other == global::D3.Hero.NameText.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nameTextFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nameTextFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static NameText() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class QuestHistoryList : pb::GeneratedMessage<QuestHistoryList, QuestHistoryList.Builder> {
    private QuestHistoryList() { }
    private static readonly QuestHistoryList defaultInstance = new QuestHistoryList().MakeReadOnly();
    private static readonly string[] _questHistoryListFieldNames = new string[] { "history" };
    private static readonly uint[] _questHistoryListFieldTags = new uint[] { 10 };
    public static QuestHistoryList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QuestHistoryList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QuestHistoryList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_QuestHistoryList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QuestHistoryList, QuestHistoryList.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_QuestHistoryList__FieldAccessorTable; }
    }
    
    public const int HistoryFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Hero.QuestHistoryEntry> history_ = new pbc::PopsicleList<global::D3.Hero.QuestHistoryEntry>();
    public scg::IList<global::D3.Hero.QuestHistoryEntry> HistoryList {
      get { return history_; }
    }
    public int HistoryCount {
      get { return history_.Count; }
    }
    public global::D3.Hero.QuestHistoryEntry GetHistory(int index) {
      return history_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Hero.QuestHistoryEntry element in HistoryList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _questHistoryListFieldNames;
      if (history_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], history_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Hero.QuestHistoryEntry element in HistoryList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QuestHistoryList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestHistoryList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestHistoryList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestHistoryList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestHistoryList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestHistoryList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QuestHistoryList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QuestHistoryList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QuestHistoryList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestHistoryList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QuestHistoryList MakeReadOnly() {
      history_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QuestHistoryList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<QuestHistoryList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QuestHistoryList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QuestHistoryList result;
      
      private QuestHistoryList PrepareBuilder() {
        if (resultIsReadOnly) {
          QuestHistoryList original = result;
          result = new QuestHistoryList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QuestHistoryList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.QuestHistoryList.Descriptor; }
      }
      
      public override QuestHistoryList DefaultInstanceForType {
        get { return global::D3.Hero.QuestHistoryList.DefaultInstance; }
      }
      
      public override QuestHistoryList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QuestHistoryList) {
          return MergeFrom((QuestHistoryList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QuestHistoryList other) {
        if (other == global::D3.Hero.QuestHistoryList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.history_.Count != 0) {
          result.history_.Add(other.history_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_questHistoryListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _questHistoryListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.history_, global::D3.Hero.QuestHistoryEntry.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Hero.QuestHistoryEntry> HistoryList {
        get { return PrepareBuilder().history_; }
      }
      public int HistoryCount {
        get { return result.HistoryCount; }
      }
      public global::D3.Hero.QuestHistoryEntry GetHistory(int index) {
        return result.GetHistory(index);
      }
      public Builder SetHistory(int index, global::D3.Hero.QuestHistoryEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.history_[index] = value;
        return this;
      }
      public Builder SetHistory(int index, global::D3.Hero.QuestHistoryEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.history_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddHistory(global::D3.Hero.QuestHistoryEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.history_.Add(value);
        return this;
      }
      public Builder AddHistory(global::D3.Hero.QuestHistoryEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.history_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeHistory(scg::IEnumerable<global::D3.Hero.QuestHistoryEntry> values) {
        PrepareBuilder();
        result.history_.Add(values);
        return this;
      }
      public Builder ClearHistory() {
        PrepareBuilder();
        result.history_.Clear();
        return this;
      }
    }
    static QuestHistoryList() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavedQuestList : pb::GeneratedMessage<SavedQuestList, SavedQuestList.Builder> {
    private SavedQuestList() { }
    private static readonly SavedQuestList defaultInstance = new SavedQuestList().MakeReadOnly();
    private static readonly string[] _savedQuestListFieldNames = new string[] { "saved_quests" };
    private static readonly uint[] _savedQuestListFieldTags = new uint[] { 10 };
    public static SavedQuestList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedQuestList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavedQuestList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_SavedQuestList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedQuestList, SavedQuestList.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_SavedQuestList__FieldAccessorTable; }
    }
    
    public const int SavedQuestsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Hero.SavedQuest> savedQuests_ = new pbc::PopsicleList<global::D3.Hero.SavedQuest>();
    public scg::IList<global::D3.Hero.SavedQuest> SavedQuestsList {
      get { return savedQuests_; }
    }
    public int SavedQuestsCount {
      get { return savedQuests_.Count; }
    }
    public global::D3.Hero.SavedQuest GetSavedQuests(int index) {
      return savedQuests_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Hero.SavedQuest element in SavedQuestsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savedQuestListFieldNames;
      if (savedQuests_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], savedQuests_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Hero.SavedQuest element in SavedQuestsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedQuestList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedQuestList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedQuestList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedQuestList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedQuestList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedQuestList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedQuestList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedQuestList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedQuestList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedQuestList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavedQuestList MakeReadOnly() {
      savedQuests_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedQuestList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavedQuestList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavedQuestList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavedQuestList result;
      
      private SavedQuestList PrepareBuilder() {
        if (resultIsReadOnly) {
          SavedQuestList original = result;
          result = new SavedQuestList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavedQuestList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.SavedQuestList.Descriptor; }
      }
      
      public override SavedQuestList DefaultInstanceForType {
        get { return global::D3.Hero.SavedQuestList.DefaultInstance; }
      }
      
      public override SavedQuestList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedQuestList) {
          return MergeFrom((SavedQuestList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedQuestList other) {
        if (other == global::D3.Hero.SavedQuestList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.savedQuests_.Count != 0) {
          result.savedQuests_.Add(other.savedQuests_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savedQuestListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savedQuestListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.savedQuests_, global::D3.Hero.SavedQuest.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Hero.SavedQuest> SavedQuestsList {
        get { return PrepareBuilder().savedQuests_; }
      }
      public int SavedQuestsCount {
        get { return result.SavedQuestsCount; }
      }
      public global::D3.Hero.SavedQuest GetSavedQuests(int index) {
        return result.GetSavedQuests(index);
      }
      public Builder SetSavedQuests(int index, global::D3.Hero.SavedQuest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.savedQuests_[index] = value;
        return this;
      }
      public Builder SetSavedQuests(int index, global::D3.Hero.SavedQuest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.savedQuests_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSavedQuests(global::D3.Hero.SavedQuest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.savedQuests_.Add(value);
        return this;
      }
      public Builder AddSavedQuests(global::D3.Hero.SavedQuest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.savedQuests_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSavedQuests(scg::IEnumerable<global::D3.Hero.SavedQuest> values) {
        PrepareBuilder();
        result.savedQuests_.Add(values);
        return this;
      }
      public Builder ClearSavedQuests() {
        PrepareBuilder();
        result.savedQuests_.Clear();
        return this;
      }
    }
    static SavedQuestList() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class QuestRewardHistoryList : pb::GeneratedMessage<QuestRewardHistoryList, QuestRewardHistoryList.Builder> {
    private QuestRewardHistoryList() { }
    private static readonly QuestRewardHistoryList defaultInstance = new QuestRewardHistoryList().MakeReadOnly();
    private static readonly string[] _questRewardHistoryListFieldNames = new string[] { "reward_history" };
    private static readonly uint[] _questRewardHistoryListFieldTags = new uint[] { 10 };
    public static QuestRewardHistoryList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QuestRewardHistoryList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QuestRewardHistoryList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_QuestRewardHistoryList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QuestRewardHistoryList, QuestRewardHistoryList.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_QuestRewardHistoryList__FieldAccessorTable; }
    }
    
    public const int RewardHistoryFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Hero.QuestRewardHistoryEntry> rewardHistory_ = new pbc::PopsicleList<global::D3.Hero.QuestRewardHistoryEntry>();
    public scg::IList<global::D3.Hero.QuestRewardHistoryEntry> RewardHistoryList {
      get { return rewardHistory_; }
    }
    public int RewardHistoryCount {
      get { return rewardHistory_.Count; }
    }
    public global::D3.Hero.QuestRewardHistoryEntry GetRewardHistory(int index) {
      return rewardHistory_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Hero.QuestRewardHistoryEntry element in RewardHistoryList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _questRewardHistoryListFieldNames;
      if (rewardHistory_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], rewardHistory_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Hero.QuestRewardHistoryEntry element in RewardHistoryList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QuestRewardHistoryList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestRewardHistoryList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestRewardHistoryList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuestRewardHistoryList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuestRewardHistoryList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestRewardHistoryList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QuestRewardHistoryList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QuestRewardHistoryList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QuestRewardHistoryList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuestRewardHistoryList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QuestRewardHistoryList MakeReadOnly() {
      rewardHistory_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QuestRewardHistoryList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<QuestRewardHistoryList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QuestRewardHistoryList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QuestRewardHistoryList result;
      
      private QuestRewardHistoryList PrepareBuilder() {
        if (resultIsReadOnly) {
          QuestRewardHistoryList original = result;
          result = new QuestRewardHistoryList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QuestRewardHistoryList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.QuestRewardHistoryList.Descriptor; }
      }
      
      public override QuestRewardHistoryList DefaultInstanceForType {
        get { return global::D3.Hero.QuestRewardHistoryList.DefaultInstance; }
      }
      
      public override QuestRewardHistoryList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QuestRewardHistoryList) {
          return MergeFrom((QuestRewardHistoryList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QuestRewardHistoryList other) {
        if (other == global::D3.Hero.QuestRewardHistoryList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.rewardHistory_.Count != 0) {
          result.rewardHistory_.Add(other.rewardHistory_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_questRewardHistoryListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _questRewardHistoryListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.rewardHistory_, global::D3.Hero.QuestRewardHistoryEntry.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Hero.QuestRewardHistoryEntry> RewardHistoryList {
        get { return PrepareBuilder().rewardHistory_; }
      }
      public int RewardHistoryCount {
        get { return result.RewardHistoryCount; }
      }
      public global::D3.Hero.QuestRewardHistoryEntry GetRewardHistory(int index) {
        return result.GetRewardHistory(index);
      }
      public Builder SetRewardHistory(int index, global::D3.Hero.QuestRewardHistoryEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rewardHistory_[index] = value;
        return this;
      }
      public Builder SetRewardHistory(int index, global::D3.Hero.QuestRewardHistoryEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rewardHistory_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRewardHistory(global::D3.Hero.QuestRewardHistoryEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rewardHistory_.Add(value);
        return this;
      }
      public Builder AddRewardHistory(global::D3.Hero.QuestRewardHistoryEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rewardHistory_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRewardHistory(scg::IEnumerable<global::D3.Hero.QuestRewardHistoryEntry> values) {
        PrepareBuilder();
        result.rewardHistory_.Add(values);
        return this;
      }
      public Builder ClearRewardHistory() {
        PrepareBuilder();
        result.rewardHistory_.Clear();
        return this;
      }
    }
    static QuestRewardHistoryList() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LoadoutItem : pb::GeneratedMessage<LoadoutItem, LoadoutItem.Builder> {
    private LoadoutItem() { }
    private static readonly LoadoutItem defaultInstance = new LoadoutItem().MakeReadOnly();
    private static readonly string[] _loadoutItemFieldNames = new string[] { "gbid_sockets", "item_id_low" };
    private static readonly uint[] _loadoutItemFieldTags = new uint[] { 21, 9 };
    public static LoadoutItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoadoutItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoadoutItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_LoadoutItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoadoutItem, LoadoutItem.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_LoadoutItem__FieldAccessorTable; }
    }
    
    public const int ItemIdLowFieldNumber = 1;
    private bool hasItemIdLow;
    private long itemIdLow_;
    public bool HasItemIdLow {
      get { return hasItemIdLow; }
    }
    public long ItemIdLow {
      get { return itemIdLow_; }
    }
    
    public const int GbidSocketsFieldNumber = 2;
    private pbc::PopsicleList<int> gbidSockets_ = new pbc::PopsicleList<int>();
    public scg::IList<int> GbidSocketsList {
      get { return pbc::Lists.AsReadOnly(gbidSockets_); }
    }
    public int GbidSocketsCount {
      get { return gbidSockets_.Count; }
    }
    public int GetGbidSockets(int index) {
      return gbidSockets_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemIdLow) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _loadoutItemFieldNames;
      if (hasItemIdLow) {
        output.WriteSFixed64(1, field_names[1], ItemIdLow);
      }
      if (gbidSockets_.Count > 0) {
        output.WriteSFixed32Array(2, field_names[0], gbidSockets_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasItemIdLow) {
          size += pb::CodedOutputStream.ComputeSFixed64Size(1, ItemIdLow);
        }
        {
          int dataSize = 0;
          dataSize = 4 * gbidSockets_.Count;
          size += dataSize;
          size += 1 * gbidSockets_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LoadoutItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoadoutItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoadoutItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoadoutItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoadoutItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoadoutItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoadoutItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoadoutItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoadoutItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoadoutItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoadoutItem MakeReadOnly() {
      gbidSockets_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoadoutItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LoadoutItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoadoutItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoadoutItem result;
      
      private LoadoutItem PrepareBuilder() {
        if (resultIsReadOnly) {
          LoadoutItem original = result;
          result = new LoadoutItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoadoutItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.LoadoutItem.Descriptor; }
      }
      
      public override LoadoutItem DefaultInstanceForType {
        get { return global::D3.Hero.LoadoutItem.DefaultInstance; }
      }
      
      public override LoadoutItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoadoutItem) {
          return MergeFrom((LoadoutItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoadoutItem other) {
        if (other == global::D3.Hero.LoadoutItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemIdLow) {
          ItemIdLow = other.ItemIdLow;
        }
        if (other.gbidSockets_.Count != 0) {
          result.gbidSockets_.Add(other.gbidSockets_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loadoutItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loadoutItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasItemIdLow = input.ReadSFixed64(ref result.itemIdLow_);
              break;
            }
            case 18:
            case 21: {
              input.ReadSFixed32Array(tag, field_name, result.gbidSockets_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemIdLow {
        get { return result.hasItemIdLow; }
      }
      public long ItemIdLow {
        get { return result.ItemIdLow; }
        set { SetItemIdLow(value); }
      }
      public Builder SetItemIdLow(long value) {
        PrepareBuilder();
        result.hasItemIdLow = true;
        result.itemIdLow_ = value;
        return this;
      }
      public Builder ClearItemIdLow() {
        PrepareBuilder();
        result.hasItemIdLow = false;
        result.itemIdLow_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> GbidSocketsList {
        get { return PrepareBuilder().gbidSockets_; }
      }
      public int GbidSocketsCount {
        get { return result.GbidSocketsCount; }
      }
      public int GetGbidSockets(int index) {
        return result.GetGbidSockets(index);
      }
      public Builder SetGbidSockets(int index, int value) {
        PrepareBuilder();
        result.gbidSockets_[index] = value;
        return this;
      }
      public Builder AddGbidSockets(int value) {
        PrepareBuilder();
        result.gbidSockets_.Add(value);
        return this;
      }
      public Builder AddRangeGbidSockets(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.gbidSockets_.Add(values);
        return this;
      }
      public Builder ClearGbidSockets() {
        PrepareBuilder();
        result.gbidSockets_.Clear();
        return this;
      }
    }
    static LoadoutItem() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LoadoutPotion : pb::GeneratedMessage<LoadoutPotion, LoadoutPotion.Builder> {
    private LoadoutPotion() { }
    private static readonly LoadoutPotion defaultInstance = new LoadoutPotion().MakeReadOnly();
    private static readonly string[] _loadoutPotionFieldNames = new string[] { "gbid_potion", "item_id_low" };
    private static readonly uint[] _loadoutPotionFieldTags = new uint[] { 21, 9 };
    public static LoadoutPotion DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoadoutPotion DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoadoutPotion ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_LoadoutPotion__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoadoutPotion, LoadoutPotion.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_LoadoutPotion__FieldAccessorTable; }
    }
    
    public const int ItemIdLowFieldNumber = 1;
    private bool hasItemIdLow;
    private long itemIdLow_;
    public bool HasItemIdLow {
      get { return hasItemIdLow; }
    }
    public long ItemIdLow {
      get { return itemIdLow_; }
    }
    
    public const int GbidPotionFieldNumber = 2;
    private bool hasGbidPotion;
    private int gbidPotion_;
    public bool HasGbidPotion {
      get { return hasGbidPotion; }
    }
    public int GbidPotion {
      get { return gbidPotion_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemIdLow) return false;
        if (!hasGbidPotion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _loadoutPotionFieldNames;
      if (hasItemIdLow) {
        output.WriteSFixed64(1, field_names[1], ItemIdLow);
      }
      if (hasGbidPotion) {
        output.WriteSFixed32(2, field_names[0], GbidPotion);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasItemIdLow) {
          size += pb::CodedOutputStream.ComputeSFixed64Size(1, ItemIdLow);
        }
        if (hasGbidPotion) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(2, GbidPotion);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LoadoutPotion ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoadoutPotion ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoadoutPotion ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoadoutPotion ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoadoutPotion ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoadoutPotion ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoadoutPotion ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoadoutPotion ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoadoutPotion ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoadoutPotion ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoadoutPotion MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoadoutPotion prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LoadoutPotion, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoadoutPotion cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoadoutPotion result;
      
      private LoadoutPotion PrepareBuilder() {
        if (resultIsReadOnly) {
          LoadoutPotion original = result;
          result = new LoadoutPotion();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoadoutPotion MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.LoadoutPotion.Descriptor; }
      }
      
      public override LoadoutPotion DefaultInstanceForType {
        get { return global::D3.Hero.LoadoutPotion.DefaultInstance; }
      }
      
      public override LoadoutPotion BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoadoutPotion) {
          return MergeFrom((LoadoutPotion) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoadoutPotion other) {
        if (other == global::D3.Hero.LoadoutPotion.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemIdLow) {
          ItemIdLow = other.ItemIdLow;
        }
        if (other.HasGbidPotion) {
          GbidPotion = other.GbidPotion;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loadoutPotionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loadoutPotionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasItemIdLow = input.ReadSFixed64(ref result.itemIdLow_);
              break;
            }
            case 21: {
              result.hasGbidPotion = input.ReadSFixed32(ref result.gbidPotion_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemIdLow {
        get { return result.hasItemIdLow; }
      }
      public long ItemIdLow {
        get { return result.ItemIdLow; }
        set { SetItemIdLow(value); }
      }
      public Builder SetItemIdLow(long value) {
        PrepareBuilder();
        result.hasItemIdLow = true;
        result.itemIdLow_ = value;
        return this;
      }
      public Builder ClearItemIdLow() {
        PrepareBuilder();
        result.hasItemIdLow = false;
        result.itemIdLow_ = 0;
        return this;
      }
      
      public bool HasGbidPotion {
        get { return result.hasGbidPotion; }
      }
      public int GbidPotion {
        get { return result.GbidPotion; }
        set { SetGbidPotion(value); }
      }
      public Builder SetGbidPotion(int value) {
        PrepareBuilder();
        result.hasGbidPotion = true;
        result.gbidPotion_ = value;
        return this;
      }
      public Builder ClearGbidPotion() {
        PrepareBuilder();
        result.hasGbidPotion = false;
        result.gbidPotion_ = 0;
        return this;
      }
    }
    static LoadoutPotion() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Loadout : pb::GeneratedMessage<Loadout, Loadout.Builder> {
    private Loadout() { }
    private static readonly Loadout defaultInstance = new Loadout().MakeReadOnly();
    private static readonly string[] _loadoutFieldNames = new string[] { "active_skills", "equipped_items", "equipped_potion", "gbid_legendary_powers", "name", "sno_traits", "tab_icon" };
    private static readonly uint[] _loadoutFieldTags = new uint[] { 18, 10, 58, 37, 42, 29, 48 };
    public static Loadout DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Loadout DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Loadout ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_Loadout__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Loadout, Loadout.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_Loadout__FieldAccessorTable; }
    }
    
    public const int EquippedItemsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Hero.LoadoutItem> equippedItems_ = new pbc::PopsicleList<global::D3.Hero.LoadoutItem>();
    public scg::IList<global::D3.Hero.LoadoutItem> EquippedItemsList {
      get { return equippedItems_; }
    }
    public int EquippedItemsCount {
      get { return equippedItems_.Count; }
    }
    public global::D3.Hero.LoadoutItem GetEquippedItems(int index) {
      return equippedItems_[index];
    }
    
    public const int ActiveSkillsFieldNumber = 2;
    private pbc::PopsicleList<global::D3.Hero.SkillWithRune> activeSkills_ = new pbc::PopsicleList<global::D3.Hero.SkillWithRune>();
    public scg::IList<global::D3.Hero.SkillWithRune> ActiveSkillsList {
      get { return activeSkills_; }
    }
    public int ActiveSkillsCount {
      get { return activeSkills_.Count; }
    }
    public global::D3.Hero.SkillWithRune GetActiveSkills(int index) {
      return activeSkills_[index];
    }
    
    public const int SnoTraitsFieldNumber = 3;
    private pbc::PopsicleList<int> snoTraits_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SnoTraitsList {
      get { return pbc::Lists.AsReadOnly(snoTraits_); }
    }
    public int SnoTraitsCount {
      get { return snoTraits_.Count; }
    }
    public int GetSnoTraits(int index) {
      return snoTraits_[index];
    }
    
    public const int GbidLegendaryPowersFieldNumber = 4;
    private pbc::PopsicleList<int> gbidLegendaryPowers_ = new pbc::PopsicleList<int>();
    public scg::IList<int> GbidLegendaryPowersList {
      get { return pbc::Lists.AsReadOnly(gbidLegendaryPowers_); }
    }
    public int GbidLegendaryPowersCount {
      get { return gbidLegendaryPowers_.Count; }
    }
    public int GetGbidLegendaryPowers(int index) {
      return gbidLegendaryPowers_[index];
    }
    
    public const int NameFieldNumber = 5;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int TabIconFieldNumber = 6;
    private bool hasTabIcon;
    private int tabIcon_;
    public bool HasTabIcon {
      get { return hasTabIcon; }
    }
    public int TabIcon {
      get { return tabIcon_; }
    }
    
    public const int EquippedPotionFieldNumber = 7;
    private bool hasEquippedPotion;
    private global::D3.Hero.LoadoutPotion equippedPotion_;
    public bool HasEquippedPotion {
      get { return hasEquippedPotion; }
    }
    public global::D3.Hero.LoadoutPotion EquippedPotion {
      get { return equippedPotion_ ?? global::D3.Hero.LoadoutPotion.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Hero.LoadoutItem element in EquippedItemsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::D3.Hero.SkillWithRune element in ActiveSkillsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasEquippedPotion) {
          if (!EquippedPotion.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _loadoutFieldNames;
      if (equippedItems_.Count > 0) {
        output.WriteMessageArray(1, field_names[1], equippedItems_);
      }
      if (activeSkills_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], activeSkills_);
      }
      if (snoTraits_.Count > 0) {
        output.WriteSFixed32Array(3, field_names[5], snoTraits_);
      }
      if (gbidLegendaryPowers_.Count > 0) {
        output.WriteSFixed32Array(4, field_names[3], gbidLegendaryPowers_);
      }
      if (hasName) {
        output.WriteString(5, field_names[4], Name);
      }
      if (hasTabIcon) {
        output.WriteSInt32(6, field_names[6], TabIcon);
      }
      if (hasEquippedPotion) {
        output.WriteMessage(7, field_names[2], EquippedPotion);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Hero.LoadoutItem element in EquippedItemsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        foreach (global::D3.Hero.SkillWithRune element in ActiveSkillsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        {
          int dataSize = 0;
          dataSize = 4 * snoTraits_.Count;
          size += dataSize;
          size += 1 * snoTraits_.Count;
        }
        {
          int dataSize = 0;
          dataSize = 4 * gbidLegendaryPowers_.Count;
          size += dataSize;
          size += 1 * gbidLegendaryPowers_.Count;
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Name);
        }
        if (hasTabIcon) {
          size += pb::CodedOutputStream.ComputeSInt32Size(6, TabIcon);
        }
        if (hasEquippedPotion) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, EquippedPotion);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Loadout ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Loadout ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Loadout ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Loadout ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Loadout ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Loadout ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Loadout ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Loadout ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Loadout ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Loadout ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Loadout MakeReadOnly() {
      equippedItems_.MakeReadOnly();
      activeSkills_.MakeReadOnly();
      snoTraits_.MakeReadOnly();
      gbidLegendaryPowers_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Loadout prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Loadout, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Loadout cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Loadout result;
      
      private Loadout PrepareBuilder() {
        if (resultIsReadOnly) {
          Loadout original = result;
          result = new Loadout();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Loadout MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.Loadout.Descriptor; }
      }
      
      public override Loadout DefaultInstanceForType {
        get { return global::D3.Hero.Loadout.DefaultInstance; }
      }
      
      public override Loadout BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Loadout) {
          return MergeFrom((Loadout) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Loadout other) {
        if (other == global::D3.Hero.Loadout.DefaultInstance) return this;
        PrepareBuilder();
        if (other.equippedItems_.Count != 0) {
          result.equippedItems_.Add(other.equippedItems_);
        }
        if (other.activeSkills_.Count != 0) {
          result.activeSkills_.Add(other.activeSkills_);
        }
        if (other.snoTraits_.Count != 0) {
          result.snoTraits_.Add(other.snoTraits_);
        }
        if (other.gbidLegendaryPowers_.Count != 0) {
          result.gbidLegendaryPowers_.Add(other.gbidLegendaryPowers_);
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasTabIcon) {
          TabIcon = other.TabIcon;
        }
        if (other.HasEquippedPotion) {
          MergeEquippedPotion(other.EquippedPotion);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loadoutFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loadoutFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.equippedItems_, global::D3.Hero.LoadoutItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.activeSkills_, global::D3.Hero.SkillWithRune.DefaultInstance, extensionRegistry);
              break;
            }
            case 26:
            case 29: {
              input.ReadSFixed32Array(tag, field_name, result.snoTraits_);
              break;
            }
            case 34:
            case 37: {
              input.ReadSFixed32Array(tag, field_name, result.gbidLegendaryPowers_);
              break;
            }
            case 42: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 48: {
              result.hasTabIcon = input.ReadSInt32(ref result.tabIcon_);
              break;
            }
            case 58: {
              global::D3.Hero.LoadoutPotion.Builder subBuilder = global::D3.Hero.LoadoutPotion.CreateBuilder();
              if (result.hasEquippedPotion) {
                subBuilder.MergeFrom(EquippedPotion);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EquippedPotion = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Hero.LoadoutItem> EquippedItemsList {
        get { return PrepareBuilder().equippedItems_; }
      }
      public int EquippedItemsCount {
        get { return result.EquippedItemsCount; }
      }
      public global::D3.Hero.LoadoutItem GetEquippedItems(int index) {
        return result.GetEquippedItems(index);
      }
      public Builder SetEquippedItems(int index, global::D3.Hero.LoadoutItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.equippedItems_[index] = value;
        return this;
      }
      public Builder SetEquippedItems(int index, global::D3.Hero.LoadoutItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.equippedItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEquippedItems(global::D3.Hero.LoadoutItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.equippedItems_.Add(value);
        return this;
      }
      public Builder AddEquippedItems(global::D3.Hero.LoadoutItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.equippedItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEquippedItems(scg::IEnumerable<global::D3.Hero.LoadoutItem> values) {
        PrepareBuilder();
        result.equippedItems_.Add(values);
        return this;
      }
      public Builder ClearEquippedItems() {
        PrepareBuilder();
        result.equippedItems_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Hero.SkillWithRune> ActiveSkillsList {
        get { return PrepareBuilder().activeSkills_; }
      }
      public int ActiveSkillsCount {
        get { return result.ActiveSkillsCount; }
      }
      public global::D3.Hero.SkillWithRune GetActiveSkills(int index) {
        return result.GetActiveSkills(index);
      }
      public Builder SetActiveSkills(int index, global::D3.Hero.SkillWithRune value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.activeSkills_[index] = value;
        return this;
      }
      public Builder SetActiveSkills(int index, global::D3.Hero.SkillWithRune.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.activeSkills_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddActiveSkills(global::D3.Hero.SkillWithRune value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.activeSkills_.Add(value);
        return this;
      }
      public Builder AddActiveSkills(global::D3.Hero.SkillWithRune.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.activeSkills_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeActiveSkills(scg::IEnumerable<global::D3.Hero.SkillWithRune> values) {
        PrepareBuilder();
        result.activeSkills_.Add(values);
        return this;
      }
      public Builder ClearActiveSkills() {
        PrepareBuilder();
        result.activeSkills_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> SnoTraitsList {
        get { return PrepareBuilder().snoTraits_; }
      }
      public int SnoTraitsCount {
        get { return result.SnoTraitsCount; }
      }
      public int GetSnoTraits(int index) {
        return result.GetSnoTraits(index);
      }
      public Builder SetSnoTraits(int index, int value) {
        PrepareBuilder();
        result.snoTraits_[index] = value;
        return this;
      }
      public Builder AddSnoTraits(int value) {
        PrepareBuilder();
        result.snoTraits_.Add(value);
        return this;
      }
      public Builder AddRangeSnoTraits(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.snoTraits_.Add(values);
        return this;
      }
      public Builder ClearSnoTraits() {
        PrepareBuilder();
        result.snoTraits_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> GbidLegendaryPowersList {
        get { return PrepareBuilder().gbidLegendaryPowers_; }
      }
      public int GbidLegendaryPowersCount {
        get { return result.GbidLegendaryPowersCount; }
      }
      public int GetGbidLegendaryPowers(int index) {
        return result.GetGbidLegendaryPowers(index);
      }
      public Builder SetGbidLegendaryPowers(int index, int value) {
        PrepareBuilder();
        result.gbidLegendaryPowers_[index] = value;
        return this;
      }
      public Builder AddGbidLegendaryPowers(int value) {
        PrepareBuilder();
        result.gbidLegendaryPowers_.Add(value);
        return this;
      }
      public Builder AddRangeGbidLegendaryPowers(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.gbidLegendaryPowers_.Add(values);
        return this;
      }
      public Builder ClearGbidLegendaryPowers() {
        PrepareBuilder();
        result.gbidLegendaryPowers_.Clear();
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasTabIcon {
        get { return result.hasTabIcon; }
      }
      public int TabIcon {
        get { return result.TabIcon; }
        set { SetTabIcon(value); }
      }
      public Builder SetTabIcon(int value) {
        PrepareBuilder();
        result.hasTabIcon = true;
        result.tabIcon_ = value;
        return this;
      }
      public Builder ClearTabIcon() {
        PrepareBuilder();
        result.hasTabIcon = false;
        result.tabIcon_ = 0;
        return this;
      }
      
      public bool HasEquippedPotion {
       get { return result.hasEquippedPotion; }
      }
      public global::D3.Hero.LoadoutPotion EquippedPotion {
        get { return result.EquippedPotion; }
        set { SetEquippedPotion(value); }
      }
      public Builder SetEquippedPotion(global::D3.Hero.LoadoutPotion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEquippedPotion = true;
        result.equippedPotion_ = value;
        return this;
      }
      public Builder SetEquippedPotion(global::D3.Hero.LoadoutPotion.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEquippedPotion = true;
        result.equippedPotion_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEquippedPotion(global::D3.Hero.LoadoutPotion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEquippedPotion &&
            result.equippedPotion_ != global::D3.Hero.LoadoutPotion.DefaultInstance) {
            result.equippedPotion_ = global::D3.Hero.LoadoutPotion.CreateBuilder(result.equippedPotion_).MergeFrom(value).BuildPartial();
        } else {
          result.equippedPotion_ = value;
        }
        result.hasEquippedPotion = true;
        return this;
      }
      public Builder ClearEquippedPotion() {
        PrepareBuilder();
        result.hasEquippedPotion = false;
        result.equippedPotion_ = null;
        return this;
      }
    }
    static Loadout() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class EquipmentManagerData : pb::GeneratedMessage<EquipmentManagerData, EquipmentManagerData.Builder> {
    private EquipmentManagerData() { }
    private static readonly EquipmentManagerData defaultInstance = new EquipmentManagerData().MakeReadOnly();
    private static readonly string[] _equipmentManagerDataFieldNames = new string[] { "loadouts" };
    private static readonly uint[] _equipmentManagerDataFieldTags = new uint[] { 10 };
    public static EquipmentManagerData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EquipmentManagerData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EquipmentManagerData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_EquipmentManagerData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EquipmentManagerData, EquipmentManagerData.Builder> InternalFieldAccessors {
      get { return global::D3.Hero.HeroCommon.internal__static_D3_Hero_EquipmentManagerData__FieldAccessorTable; }
    }
    
    public const int LoadoutsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Hero.Loadout> loadouts_ = new pbc::PopsicleList<global::D3.Hero.Loadout>();
    public scg::IList<global::D3.Hero.Loadout> LoadoutsList {
      get { return loadouts_; }
    }
    public int LoadoutsCount {
      get { return loadouts_.Count; }
    }
    public global::D3.Hero.Loadout GetLoadouts(int index) {
      return loadouts_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Hero.Loadout element in LoadoutsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _equipmentManagerDataFieldNames;
      if (loadouts_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], loadouts_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Hero.Loadout element in LoadoutsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EquipmentManagerData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EquipmentManagerData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EquipmentManagerData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EquipmentManagerData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EquipmentManagerData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EquipmentManagerData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EquipmentManagerData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EquipmentManagerData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EquipmentManagerData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EquipmentManagerData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EquipmentManagerData MakeReadOnly() {
      loadouts_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EquipmentManagerData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<EquipmentManagerData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EquipmentManagerData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EquipmentManagerData result;
      
      private EquipmentManagerData PrepareBuilder() {
        if (resultIsReadOnly) {
          EquipmentManagerData original = result;
          result = new EquipmentManagerData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EquipmentManagerData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Hero.EquipmentManagerData.Descriptor; }
      }
      
      public override EquipmentManagerData DefaultInstanceForType {
        get { return global::D3.Hero.EquipmentManagerData.DefaultInstance; }
      }
      
      public override EquipmentManagerData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EquipmentManagerData) {
          return MergeFrom((EquipmentManagerData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EquipmentManagerData other) {
        if (other == global::D3.Hero.EquipmentManagerData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.loadouts_.Count != 0) {
          result.loadouts_.Add(other.loadouts_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_equipmentManagerDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _equipmentManagerDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.loadouts_, global::D3.Hero.Loadout.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Hero.Loadout> LoadoutsList {
        get { return PrepareBuilder().loadouts_; }
      }
      public int LoadoutsCount {
        get { return result.LoadoutsCount; }
      }
      public global::D3.Hero.Loadout GetLoadouts(int index) {
        return result.GetLoadouts(index);
      }
      public Builder SetLoadouts(int index, global::D3.Hero.Loadout value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.loadouts_[index] = value;
        return this;
      }
      public Builder SetLoadouts(int index, global::D3.Hero.Loadout.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.loadouts_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLoadouts(global::D3.Hero.Loadout value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.loadouts_.Add(value);
        return this;
      }
      public Builder AddLoadouts(global::D3.Hero.Loadout.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.loadouts_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLoadouts(scg::IEnumerable<global::D3.Hero.Loadout> values) {
        PrepareBuilder();
        result.loadouts_.Add(values);
        return this;
      }
      public Builder ClearLoadouts() {
        PrepareBuilder();
        result.loadouts_.Clear();
        return this;
      }
    }
    static EquipmentManagerData() {
      object.ReferenceEquals(global::D3.Hero.HeroCommon.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
