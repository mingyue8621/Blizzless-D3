// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Account {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Account {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Account_BannerConfiguration__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.BannerConfiguration, global::D3.Account.BannerConfiguration.Builder> internal__static_D3_Account_BannerConfiguration__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_Digest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.Digest, global::D3.Account.Digest.Builder> internal__static_D3_Account_Digest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_ConsoleRandomTransmuteSeed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.ConsoleRandomTransmuteSeed, global::D3.Account.ConsoleRandomTransmuteSeed.Builder> internal__static_D3_Account_ConsoleRandomTransmuteSeed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_ConsoleRandomTransmuteSeedList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.ConsoleRandomTransmuteSeedList, global::D3.Account.ConsoleRandomTransmuteSeedList.Builder> internal__static_D3_Account_ConsoleRandomTransmuteSeedList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_ConsolePartitionData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.ConsolePartitionData, global::D3.Account.ConsolePartitionData.Builder> internal__static_D3_Account_ConsolePartitionData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_ConsolePartitionData_SeasonalRolloverItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem, global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem.Builder> internal__static_D3_Account_ConsolePartitionData_SeasonalRolloverItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_AccountPartition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.AccountPartition, global::D3.Account.AccountPartition.Builder> internal__static_D3_Account_AccountPartition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_SavedDefinition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.SavedDefinition, global::D3.Account.SavedDefinition.Builder> internal__static_D3_Account_SavedDefinition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_AvengerVictim__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.AvengerVictim, global::D3.Account.AvengerVictim.Builder> internal__static_D3_Account_AvengerVictim__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_Avenger__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.Avenger, global::D3.Account.Avenger.Builder> internal__static_D3_Account_Avenger__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_AvengerData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.AvengerData, global::D3.Account.AvengerData.Builder> internal__static_D3_Account_AvengerData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_ConsoleChallengeRiftReward__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.ConsoleChallengeRiftReward, global::D3.Account.ConsoleChallengeRiftReward.Builder> internal__static_D3_Account_ConsoleChallengeRiftReward__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_ConsoleChallengeRiftPersonalBest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.ConsoleChallengeRiftPersonalBest, global::D3.Account.ConsoleChallengeRiftPersonalBest.Builder> internal__static_D3_Account_ConsoleChallengeRiftPersonalBest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_ConsoleData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.ConsoleData, global::D3.Account.ConsoleData.Builder> internal__static_D3_Account_ConsoleData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_DeliveredAchievementReward__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.DeliveredAchievementReward, global::D3.Account.DeliveredAchievementReward.Builder> internal__static_D3_Account_DeliveredAchievementReward__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_DeliveredRewards__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.DeliveredRewards, global::D3.Account.DeliveredRewards.Builder> internal__static_D3_Account_DeliveredRewards__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_Consumable__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.Consumable, global::D3.Account.Consumable.Builder> internal__static_D3_Account_Consumable__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Account_Consumables__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Account.Consumables, global::D3.Account.Consumables.Builder> internal__static_D3_Account_Consumables__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Account() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg1BY2NvdW50LnByb3RvEgpEMy5BY2NvdW50GhlBdHRyaWJ1dGVTZXJpYWxp" + 
          "emVyLnByb3RvGhJBY2hpZXZlbWVudHMucHJvdG8aC0l0ZW1zLnByb3RvGhNP" + 
          "bmxpbmVTZXJ2aWNlLnByb3RvGhJJdGVtQ3JhZnRpbmcucHJvdG8aE0Nvc21l" + 
          "dGljSXRlbXMucHJvdG8aEUdhbWVCYWxhbmNlLnByb3RvGhRDaGFsbGVuZ2VS" + 
          "aWZ0cy5wcm90byKdAwoTQmFubmVyQ29uZmlndXJhdGlvbhIkCgxiYW5uZXJf" + 
          "c2hhcGUYASACKA06ATBSC2Jhbm5lclNoYXBlEiAKCnNpZ2lsX21haW4YAiAC" + 
          "KA06ATBSCXNpZ2lsTWFpbhIkCgxzaWdpbF9hY2NlbnQYAyACKA06ATBSC3Np" + 
          "Z2lsQWNjZW50EiYKDXBhdHRlcm5fY29sb3IYBCACKA06ATBSDHBhdHRlcm5D" + 
          "b2xvchIsChBiYWNrZ3JvdW5kX2NvbG9yGAUgAigNOgEwUg9iYWNrZ3JvdW5k" + 
          "Q29sb3ISIgoLc2lnaWxfY29sb3IYBiACKA06ATBSCnNpZ2lsQ29sb3ISKgoP" + 
          "c2lnaWxfcGxhY2VtZW50GAcgAigNOgEwUg5zaWdpbFBsYWNlbWVudBIbCgdw" + 
          "YXR0ZXJuGAggAigNOgEwUgdwYXR0ZXJuEjEKEXVzZV9zaWdpbF92YXJpYW50" + 
          "GAkgAigIOgVmYWxzZVIPdXNlU2lnaWxWYXJpYW50EiIKC2VwaWNfYmFubmVy" + 
          "GAogASgNOgEwUgplcGljQmFubmVyIuwICgZEaWdlc3QSGAoHdmVyc2lvbhgB" + 
          "IAIoDVIHdmVyc2lvbhJJChNsYXN0X3BsYXllZF9oZXJvX2lkGAIgAigLMhou" + 
          "RDMuT25saW5lU2VydmljZS5FbnRpdHlJZFIQbGFzdFBsYXllZEhlcm9JZBJS" + 
          "ChRiYW5uZXJfY29uZmlndXJhdGlvbhgDIAIoCzIfLkQzLkFjY291bnQuQmFu" + 
          "bmVyQ29uZmlndXJhdGlvblITYmFubmVyQ29uZmlndXJhdGlvbhIXCgVmbGFn" + 
          "cxgEIAIoDToBMFIFZmxhZ3MSJAoMcHZwX2Nvb2xkb3duGAUgASgEOgEwUgtw" + 
          "dnBDb29sZG93bhIeCglzZWFzb25faWQYByABKA06ATBSCHNlYXNvbklkEhwK" + 
          "CGd1aWxkX2lkGAggASgEOgEwUgdndWlsZElkEh0KCmFsdF9sZXZlbHMYCSAD" + 
          "KA1SCWFsdExldmVscxJGCiBzdGFzaF90YWJzX3Jld2FyZGVkX2Zyb21fc2Vh" + 
          "c29ucxgKIAEoDVIcc3Rhc2hUYWJzUmV3YXJkZWRGcm9tU2Vhc29ucxIjCg1y" + 
          "ZWJpcnRoc191c2VkGAsgASgNUgxyZWJpcnRoc1VzZWQSIwoNcGF0Y2hfdmVy" + 
          "c2lvbhgMIAEoCVIMcGF0Y2hWZXJzaW9uEl0KG2NoYWxsZW5nZV9yaWZ0X2Fj" + 
          "Y291bnRfZGF0YRgNIAEoCzIeLkQzLkNoYWxsZW5nZVJpZnRzLkFjY291bnRE" + 
          "YXRhUhhjaGFsbGVuZ2VSaWZ0QWNjb3VudERhdGESLgoTY29tcGxldGVkX3Nv" + 
          "bG9fcmlmdBgOIAEoCFIRY29tcGxldGVkU29sb1JpZnQSKgoRbGFzdF9wdWJs" + 
          "aXNoX3RpbWUYDyABKA1SD2xhc3RQdWJsaXNoVGltZSK/AwoFRmxhZ3MSJQoh" + 
          "SEFSRENPUkVfSEVST19VTkxPQ0tFRF9ERVBSRUNBVEVEEAESGwoXQURWRU5U" + 
          "VVJFX01PREVfVU5MT0NLRUQQAhIcChhQQVJBR09OXzEwMF9WQU5JTExBX0ZF" + 
          "QVQQAxIeChpNQVNURVJfRElGRklDVUxUWV9VTkxPQ0tFRBAEEh8KG1RPUk1F" + 
          "TlRfRElGRklDVUxUWV9VTkxPQ0tFRBAFEiIKHkFEVkVOVFVSRV9NT0RFX1RV" + 
          "VE9SSUFMX1BMQVlFRBAGEicKI0hBUkRDT1JFX01BU1RFUl9ESUZGSUNVTFRZ" + 
          "X1VOTE9DS0VEEAcSKAokSEFSRENPUkVfVE9STUVOVF9ESUZGSUNVTFRZX1VO" + 
          "TE9DS0VEEAgSJAogSEFSRENPUkVfQURWRU5UVVJFX01PREVfVU5MT0NLRUQQ" + 
          "CRIqCiZUT1JNRU5UX0RJRkZJQ1VMVFlfN19BTkRfT1ZFUl9VTkxPQ0tFRBAK" + 
          "Ej4KOkhBUkRDT1JFX1RPUk1FTlRfRElGRklDVUxUWV83X0FORF9PVkVSX1VO" + 
          "TE9DS0VEX0RFUFJFQ0FURUQQCxIKCgZCQU5ORUQQDCKbAQoaQ29uc29sZVJh" + 
          "bmRvbVRyYW5zbXV0ZVNlZWQSIgoNaXRlbV9zbG90X2tleRgBIAIoEVILaXRl" + 
          "bVNsb3RLZXkSKAoQcmFuZG9tX2l0ZW1fc2VlZBgCIAIoEVIOcmFuZG9tSXRl" + 
          "bVNlZWQSLwoRcmFuZG9tX2l0ZW1fY2FycnkYAyABKBE6AzY2NlIPcmFuZG9t" + 
          "SXRlbUNhcnJ5IpQBCh5Db25zb2xlUmFuZG9tVHJhbnNtdXRlU2VlZExpc3QS" + 
          "cgoiY29uc29sZV9yYW5kb21fdHJhbnNtdXRlX3NlZWRfcHJvcBgBIAMoCzIm" + 
          "LkQzLkFjY291bnQuQ29uc29sZVJhbmRvbVRyYW5zbXV0ZVNlZWRSHmNvbnNv" + 
          "bGVSYW5kb21UcmFuc211dGVTZWVkUHJvcCKeAwoUQ29uc29sZVBhcnRpdGlv" + 
          "bkRhdGESPwocc2Vhc29uYWxfZ2lmdF9nYmlkc19yZWRlZW1lZBgBIAMoEVIZ" + 
          "c2Vhc29uYWxHaWZ0R2JpZHNSZWRlZW1lZBJrChZzZWFzb25hbF9yb2xsb3Zl" + 
          "cl9pdGVtGAIgAygLMjUuRDMuQWNjb3VudC5Db25zb2xlUGFydGl0aW9uRGF0" + 
          "YS5TZWFzb25hbFJvbGxvdmVySXRlbVIUc2Vhc29uYWxSb2xsb3Zlckl0ZW0S" + 
          "dgoiY29uc29sZV9yYW5kb21fdHJhbnNtdXRlX3NlZWRfbGlzdBgDIAEoCzIq" + 
          "LkQzLkFjY291bnQuQ29uc29sZVJhbmRvbVRyYW5zbXV0ZVNlZWRMaXN0Uh5j" + 
          "b25zb2xlUmFuZG9tVHJhbnNtdXRlU2VlZExpc3QaYAoUU2Vhc29uYWxSb2xs" + 
          "b3Zlckl0ZW0SJwoEaXRlbRgBIAEoCzITLkQzLkl0ZW1zLlNhdmVkSXRlbVIE" + 
          "aXRlbRIfCgtjcmVhdGVfdGltZRgCIAEoDVIKY3JlYXRlVGltZSLrBAoQQWNj" + 
          "b3VudFBhcnRpdGlvbhIhCgxwYXJ0aXRpb25faWQYASACKAVSC3BhcnRpdGlv" + 
          "bklkElIKEHNhdmVkX2F0dHJpYnV0ZXMYAiACKAsyJy5EMy5BdHRyaWJ1dGVT" + 
          "ZXJpYWxpemVyLlNhdmVkQXR0cmlidXRlc1IPc2F2ZWRBdHRyaWJ1dGVzEigK" + 
          "BWl0ZW1zGAMgASgLMhIuRDMuSXRlbXMuSXRlbUxpc3RSBWl0ZW1zEkQKDGNy" + 
          "YWZ0ZXJfZGF0YRgEIAEoCzIhLkQzLkl0ZW1DcmFmdGluZy5DcmFmdGVyU2F2" + 
          "ZWREYXRhUgtjcmFmdGVyRGF0YRJIChJnb2xkX2lkX2RlcHJlY2F0ZWQYBSAB" + 
          "KAsyGi5EMy5PbmxpbmVTZXJ2aWNlLkVudGl0eUlkUhBnb2xkSWREZXByZWNh" + 
          "dGVkEh8KC3N0YXNoX2ljb25zGAYgASgMUgpzdGFzaEljb25zEjIKFWFjY2Vw" + 
          "dGVkX2xpY2Vuc2VfYml0cxgHIAEoBFITYWNjZXB0ZWRMaWNlbnNlQml0cxIe" + 
          "CglhbHRfbGV2ZWwYCCABKA06ATBSCGFsdExldmVsEkAKDWN1cnJlbmN5X2Rh" + 
          "dGEYCSABKAsyGy5EMy5JdGVtcy5DdXJyZW5jeVNhdmVkRGF0YVIMY3VycmVu" + 
          "Y3lEYXRhEhcKBWZsYWdzGAogASgNOgEwUgVmbGFncxJWChZjb25zb2xlX3Bh" + 
          "cnRpdGlvbl9kYXRhGAsgASgLMiAuRDMuQWNjb3VudC5Db25zb2xlUGFydGl0" + 
          "aW9uRGF0YVIUY29uc29sZVBhcnRpdGlvbkRhdGEi4w8KD1NhdmVkRGVmaW5p" + 
          "dGlvbhIYCgd2ZXJzaW9uGAEgAigNUgd2ZXJzaW9uEioKBmRpZ2VzdBgCIAEo" + 
          "CzISLkQzLkFjY291bnQuRGlnZXN0UgZkaWdlc3QSUgoQc2F2ZWRfYXR0cmli" + 
          "dXRlcxgDIAEoCzInLkQzLkF0dHJpYnV0ZVNlcmlhbGl6ZXIuU2F2ZWRBdHRy" + 
          "aWJ1dGVzUg9zYXZlZEF0dHJpYnV0ZXMSJQoOc2Vlbl90dXRvcmlhbHMYCSAB" + 
          "KAxSDXNlZW5UdXRvcmlhbHMSQgoebnVtX3ZvdGVfa2lja3NfcGFydGljaXBh" + 
          "dGVkX2luGAogASgQUhpudW1Wb3RlS2lja3NQYXJ0aWNpcGF0ZWRJbhI3Chhu" + 
          "dW1fdm90ZV9raWNrc19pbml0aWF0ZWQYCyABKBBSFW51bVZvdGVLaWNrc0lu" + 
          "aXRpYXRlZBI2ChhudW1fcHVibGljX2dhbWVzX25vX2tpY2sYDCABKBBSFG51" + 
          "bVB1YmxpY0dhbWVzTm9LaWNrEioKEXRpbWVzX3ZvdGVfa2lja2VkGA0gASgQ" + 
          "Ug90aW1lc1ZvdGVLaWNrZWQSIgoLY3JlYXRlX3RpbWUYEyABKA06ATBSCmNy" + 
          "ZWF0ZVRpbWUSQQodbnVtX2dyb3Vwc19jcmVhdGVkX2RlcHJlY2F0ZWQYFiAB" + 
          "KA1SGm51bUdyb3Vwc0NyZWF0ZWREZXByZWNhdGVkEjwKCnBhcnRpdGlvbnMY" + 
          "FCADKAsyHC5EMy5BY2NvdW50LkFjY291bnRQYXJ0aXRpb25SCnBhcnRpdGlv" + 
          "bnMSeAokZGVwcmVjYXRlZF9zYXZlZF9hdHRyaWJ1dGVzX2hhcmRjb3JlGAQg" + 
          "ASgLMicuRDMuQXR0cmlidXRlU2VyaWFsaXplci5TYXZlZEF0dHJpYnV0ZXNS" + 
          "IWRlcHJlY2F0ZWRTYXZlZEF0dHJpYnV0ZXNIYXJkY29yZRJiCiRkZXByZWNh" + 
          "dGVkX25vcm1hbF9zaGFyZWRfc2F2ZWRfaXRlbXMYBSABKAsyEi5EMy5JdGVt" + 
          "cy5JdGVtTGlzdFIgZGVwcmVjYXRlZE5vcm1hbFNoYXJlZFNhdmVkSXRlbXMS" + 
          "ZgomZGVwcmVjYXRlZF9oYXJkY29yZV9zaGFyZWRfc2F2ZWRfaXRlbXMYBiAB" + 
          "KAsyEi5EMy5JdGVtcy5JdGVtTGlzdFIiZGVwcmVjYXRlZEhhcmRjb3JlU2hh" + 
          "cmVkU2F2ZWRJdGVtcxJmCh5kZXByZWNhdGVkX2NyYWZ0ZXJfbm9ybWFsX2Rh" + 
          "dGEYByABKAsyIS5EMy5JdGVtQ3JhZnRpbmcuQ3JhZnRlclNhdmVkRGF0YVIb" + 
          "ZGVwcmVjYXRlZENyYWZ0ZXJOb3JtYWxEYXRhEmoKIGRlcHJlY2F0ZWRfY3Jh" + 
          "ZnRlcl9oYXJkY29yZV9kYXRhGAggASgLMiEuRDMuSXRlbUNyYWZ0aW5nLkNy" + 
          "YWZ0ZXJTYXZlZERhdGFSHWRlcHJlY2F0ZWRDcmFmdGVySGFyZGNvcmVEYXRh" + 
          "ElUKGWRlcHJlY2F0ZWRfZ29sZF9pZF9ub3JtYWwYDiABKAsyGi5EMy5Pbmxp" + 
          "bmVTZXJ2aWNlLkVudGl0eUlkUhZkZXByZWNhdGVkR29sZElkTm9ybWFsElkK" + 
          "G2RlcHJlY2F0ZWRfZ29sZF9pZF9oYXJkY29yZRgPIAEoCzIaLkQzLk9ubGlu" + 
          "ZVNlcnZpY2UuRW50aXR5SWRSGGRlcHJlY2F0ZWRHb2xkSWRIYXJkY29yZRJB" + 
          "Ch1kZXByZWNhdGVkX3N0YXNoX2ljb25zX25vcm1hbBgQIAEoDFIaZGVwcmVj" + 
          "YXRlZFN0YXNoSWNvbnNOb3JtYWwSRwogZGVwcmVjYXRlZF9hY2NlcHRlZF9s" + 
          "aWNlbnNlX2JpdHMYESABKARSHWRlcHJlY2F0ZWRBY2NlcHRlZExpY2Vuc2VC" + 
          "aXRzEkUKH2RlcHJlY2F0ZWRfc3Rhc2hfaWNvbnNfaGFyZGNvcmUYEiABKAxS" + 
          "HGRlcHJlY2F0ZWRTdGFzaEljb25zSGFyZGNvcmUSOgoMY29uc29sZV9kYXRh" + 
          "GBUgASgLMhcuRDMuQWNjb3VudC5Db25zb2xlRGF0YVILY29uc29sZURhdGES" + 
          "XwoaYWNjb3VudF93aWRlX3RyYW5zbW9nX2RhdGEYFyABKAsyIi5EMy5HYW1l" + 
          "QmFsYW5jZS5CaXRQYWNrZWRHYmlkQXJyYXlSF2FjY291bnRXaWRlVHJhbnNt" + 
          "b2dEYXRhEm0KH2FjY291bnRfd2lkZV9jb3NtZXRpY19pdGVtX2RhdGEYGCAB" + 
          "KAsyJy5EMy5Db3NtZXRpY0l0ZW1zLkNvc21ldGljSXRlbVNhdmVkRGF0YVIb" + 
          "YWNjb3VudFdpZGVDb3NtZXRpY0l0ZW1EYXRhElgKGmFjY291bnRfd2lkZV9j" + 
          "dXJyZW5jeV9kYXRhGBogASgLMhsuRDMuSXRlbXMuQ3VycmVuY3lTYXZlZERh" + 
          "dGFSF2FjY291bnRXaWRlQ3VycmVuY3lEYXRhEkkKEWRlbGl2ZXJlZF9yZXdh" + 
          "cmRzGBsgASgLMhwuRDMuQWNjb3VudC5EZWxpdmVyZWRSZXdhcmRzUhBkZWxp" + 
          "dmVyZWRSZXdhcmRzEjkKC2NvbnN1bWFibGVzGBwgASgLMhcuRDMuQWNjb3Vu" + 
          "dC5Db25zdW1hYmxlc1ILY29uc3VtYWJsZXMiUgoNQXZlbmdlclZpY3RpbRId" + 
          "CgpnYmlkX2NsYXNzGAEgASgNUglnYmlkQ2xhc3MSIgoJaXNfZmVtYWxlGAIg" + 
          "ASgIOgVmYWxzZVIIaXNGZW1hbGUi3wMKB0F2ZW5nZXISOQoXZGVwcmVjYXRl" + 
          "ZF9wbGF5ZXJfa2lsbHMYASABKA06ATFSFWRlcHJlY2F0ZWRQbGF5ZXJLaWxs" + 
          "cxIqCgxhdmVuZ2VyX25hbWUYAiACKAk6B0F2ZW5nZXJSC2F2ZW5nZXJOYW1l" + 
          "EjgKFmRlcHJlY2F0ZWRfbW9uc3Rlcl9zbm8YAyABKBE6Ai0xUhRkZXByZWNh" + 
          "dGVkTW9uc3RlclNubxI2ChNkZXByZWNhdGVkX3Jlc29sdmVkGAQgASgIOgVm" + 
          "YWxzZVISZGVwcmVjYXRlZFJlc29sdmVkEk0KEWRlcHJlY2F0ZWRfcmVzdWx0" + 
          "GAUgASgOMhkuRDMuQWNjb3VudC5BdmVuZ2VyLlN0YXRlOgVBTElWRVIQZGVw" + 
          "cmVjYXRlZFJlc3VsdBIeCglzZW50X2Zyb20YBiACKAQ6ATBSCHNlbnRGcm9t" + 
          "EiQKDGFmZml4X2J1Y2tldBgHIAEoBToBMFILYWZmaXhCdWNrZXQSMwoHdmlj" + 
          "dGltcxgIIAMoCzIZLkQzLkFjY291bnQuQXZlbmdlclZpY3RpbVIHdmljdGlt" + 
          "cyIxCgVTdGF0ZRIJCgVBTElWRRAAEhEKDUtJTExFRF9QTEFZRVIQARIKCgZL" + 
          "SUxMRUQQAiLYAQoLQXZlbmdlckRhdGESUwobZGVwcmVjYXRlZF9hdmVuZ2Vy" + 
          "X2hhcmRjb3JlGAEgASgLMhMuRDMuQWNjb3VudC5BdmVuZ2VyUhlkZXByZWNh" + 
          "dGVkQXZlbmdlckhhcmRjb3JlEjYKDGF2ZW5nZXJfc29sbxgCIAEoCzITLkQz" + 
          "LkFjY291bnQuQXZlbmdlclILYXZlbmdlclNvbG8SPAoPYXZlbmdlcl9mcmll" + 
          "bmRzGAMgASgLMhMuRDMuQWNjb3VudC5BdmVuZ2VyUg5hdmVuZ2VyRnJpZW5k" + 
          "cyK0AQoaQ29uc29sZUNoYWxsZW5nZVJpZnRSZXdhcmQSKQoFaXRlbXMYASAD" + 
          "KAsyEy5EMy5JdGVtcy5TYXZlZEl0ZW1SBWl0ZW1zEiUKDmNoYWxsZW5nZV9y" + 
          "aWZ0GAIgASgNUg1jaGFsbGVuZ2VSaWZ0Eh8KC2NyZWF0ZV90aW1lGAMgASgN" + 
          "UgpjcmVhdGVUaW1lEiMKDXNlYXNvbl9lYXJuZWQYBCABKA1SDHNlYXNvbkVh" + 
          "cm5lZCJmCiBDb25zb2xlQ2hhbGxlbmdlUmlmdFBlcnNvbmFsQmVzdBIOCgJp" + 
          "ZBgBIAEoBFICaWQSFAoFc2NvcmUYAiABKARSBXNjb3JlEhwKCXRpbWVzdGFt" + 
          "cBgDIAEoA1IJdGltZXN0YW1wIvcHCgtDb25zb2xlRGF0YRIsChB2ZXJzaW9u" + 
          "X3JlcXVpcmVkGAEgASgNOgEwUg92ZXJzaW9uUmVxdWlyZWQSTAoUYWNoaWV2" + 
          "ZW1lbnRfc25hcHNob3QYAiABKAsyGS5EMy5BY2hpZXZlbWVudHMuU25hcHNo" + 
          "b3RSE2FjaGlldmVtZW50U25hcHNob3QSWQonaGlnaGVzdF9jb21wbGV0ZWRf" + 
          "ZGlmZmljdWx0eV9kZXByZWNhdGVkGAMgASgROgItMVIkaGlnaGVzdENvbXBs" + 
          "ZXRlZERpZmZpY3VsdHlEZXByZWNhdGVkEikKDWhhc19kZW1vX3NhdmUYBCAB" + 
          "KAg6BWZhbHNlUgtoYXNEZW1vU2F2ZRI6CgxhdmVuZ2VyX2RhdGEYBSABKAsy" + 
          "Fy5EMy5BY2NvdW50LkF2ZW5nZXJEYXRhUgthdmVuZ2VyRGF0YRIaCghwcm9n" + 
          "cmVzcxgGIAEoAlIIcHJvZ3Jlc3MSKAoQaGFzX2JuZXRfYWNjb3VudBgHIAEo" + 
          "CFIOaGFzQm5ldEFjY291bnQSLgoTbGVnYWN5X2xpY2Vuc2VfYml0cxgIIAEo" + 
          "DVIRbGVnYWN5TGljZW5zZUJpdHMSQgodbGVhZGVyYm9hcmRfaGVhbF9hY2hp" + 
          "ZXZlbWVudHMYCSABKA1SG2xlYWRlcmJvYXJkSGVhbEFjaGlldmVtZW50cxI8" + 
          "ChpsZWFkZXJib2FyZF9oZWFsX2NvbnF1ZXN0cxgKIAMoBFIYbGVhZGVyYm9h" + 
          "cmRIZWFsQ29ucXVlc3RzEloKFWNoYWxsZW5nZV9yaWZ0X3Jld2FyZBgLIAMo" + 
          "CzImLkQzLkFjY291bnQuQ29uc29sZUNoYWxsZW5nZVJpZnRSZXdhcmRSE2No" + 
          "YWxsZW5nZVJpZnRSZXdhcmQSVQooY2hhbGxlbmdlX3JpZnRfcGVyc29uYWxf" + 
          "YmVzdF9yaWZ0X251bWJlchgMIAEoDVIjY2hhbGxlbmdlUmlmdFBlcnNvbmFs" + 
          "QmVzdFJpZnROdW1iZXISbQocY2hhbGxlbmdlX3JpZnRfcGVyc29uYWxfYmVz" + 
          "dBgNIAMoCzIsLkQzLkFjY291bnQuQ29uc29sZUNoYWxsZW5nZVJpZnRQZXJz" + 
          "b25hbEJlc3RSGWNoYWxsZW5nZVJpZnRQZXJzb25hbEJlc3QSOAoWY29uc29s" + 
          "ZV9jdWJlX2Jhc2Vfc2VlZBgOIAEoDToDNjY2UhNjb25zb2xlQ3ViZUJhc2VT" + 
          "ZWVkEisKEG5mcF9kZWZhdWx0X3RpbWUYDyABKAU6ATBSDm5mcERlZmF1bHRU" + 
          "aW1lEikKD25mcF9nb2JsaW5fdGltZRgQIAEoBToBMFINbmZwR29ibGluVGlt" + 
          "ZSJDChpEZWxpdmVyZWRBY2hpZXZlbWVudFJld2FyZBIlCg5hY2hpZXZlbWVu" + 
          "dF9pZBgBIAIoBlINYWNoaWV2ZW1lbnRJZCK2AgoQRGVsaXZlcmVkUmV3YXJk" + 
          "cxJVChJhY2hpZXZlbWVudF9yZXdhcmQYASADKAsyJi5EMy5BY2NvdW50LkRl" + 
          "bGl2ZXJlZEFjaGlldmVtZW50UmV3YXJkUhFhY2hpZXZlbWVudFJld2FyZBI/" + 
          "ChxlbnRpdGxlZF9yZXdhcmRfbGljZW5zZV9iaXRzGAIgASgNUhllbnRpdGxl" + 
          "ZFJld2FyZExpY2Vuc2VCaXRzEkUKH291dHN0YW5kaW5nX3Jld2FyZF9saWNl" + 
          "bnNlX2JpdHMYAyABKA1SHG91dHN0YW5kaW5nUmV3YXJkTGljZW5zZUJpdHMS" + 
          "QwoebGVnYWN5X2FjaGlldmVtZW50c190b19kZWxpdmVyGAQgAygGUhtsZWdh" + 
          "Y3lBY2hpZXZlbWVudHNUb0RlbGl2ZXIipAIKCkNvbnN1bWFibGUSLgoTbGlj" + 
          "ZW5zZV9pbnN0YW5jZV9pZBgBIAEoBFIRbGljZW5zZUluc3RhbmNlSWQSHQoK" + 
          "bGljZW5zZV9pZBgCIAEoBFIJbGljZW5zZUlkEiUKDnRyYW5zYWN0aW9uX2lk" + 
          "GAMgASgEUg10cmFuc2FjdGlvbklkEhoKCHF1YW50aXR5GAQgASgDUghxdWFu" + 
          "dGl0eRIhCgxjb25zdW1lX3RpbWUYBSABKANSC2NvbnN1bWVUaW1lEh8KC3Jl" + 
          "dm9rZV90aW1lGAYgASgDUgpyZXZva2VUaW1lEhIKBHR5cGUYByABKAVSBHR5" + 
          "cGUSLAoSZGF0YV9wZXJzaXN0X2ZsYWdzGAggASgNUhBkYXRhUGVyc2lzdEZs" + 
          "YWdzIlIKC0NvbnN1bWFibGVzEkMKEWNvbnN1bWVkX2xpY2Vuc2VzGAEgAygL" + 
          "MhYuRDMuQWNjb3VudC5Db25zdW1hYmxlUhBjb25zdW1lZExpY2Vuc2Vz");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Account_BannerConfiguration__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Account_BannerConfiguration__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.BannerConfiguration, global::D3.Account.BannerConfiguration.Builder>(internal__static_D3_Account_BannerConfiguration__Descriptor,
                new string[] { "BannerShape", "SigilMain", "SigilAccent", "PatternColor", "BackgroundColor", "SigilColor", "SigilPlacement", "Pattern", "UseSigilVariant", "EpicBanner", });
        internal__static_D3_Account_Digest__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Account_Digest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.Digest, global::D3.Account.Digest.Builder>(internal__static_D3_Account_Digest__Descriptor,
                new string[] { "Version", "LastPlayedHeroId", "BannerConfiguration", "Flags", "PvpCooldown", "SeasonId", "GuildId", "AltLevels", "StashTabsRewardedFromSeasons", "RebirthsUsed", "PatchVersion", "ChallengeRiftAccountData", "CompletedSoloRift", "LastPublishTime", });
        internal__static_D3_Account_ConsoleRandomTransmuteSeed__Descriptor = Descriptor.MessageTypes[2];
        //internal__static_D3_Account_ConsoleRandomTransmuteSeed__FieldAccessorTable = 
        //    new pb::FieldAccess.FieldAccessorTable<global::D3.Account.ConsoleRandomTransmuteSeed, global::D3.Account.ConsoleRandomTransmuteSeed.Builder>(internal__static_D3_Account_ConsoleRandomTransmuteSeed__Descriptor,
        //        new string[] { "ItemSlotKey", "RandomItemSeed", "RandomItemCarry", });
        internal__static_D3_Account_ConsoleRandomTransmuteSeedList__Descriptor = Descriptor.MessageTypes[3];
        //internal__static_D3_Account_ConsoleRandomTransmuteSeedList__FieldAccessorTable = 
        //    new pb::FieldAccess.FieldAccessorTable<global::D3.Account.ConsoleRandomTransmuteSeedList, global::D3.Account.ConsoleRandomTransmuteSeedList.Builder>(internal__static_D3_Account_ConsoleRandomTransmuteSeedList__Descriptor,
        //        new string[] { "ConsoleRandomTransmuteSeedProp", });
        internal__static_D3_Account_ConsolePartitionData__Descriptor = Descriptor.MessageTypes[4];
        //internal__static_D3_Account_ConsolePartitionData__FieldAccessorTable = 
        //    new pb::FieldAccess.FieldAccessorTable<global::D3.Account.ConsolePartitionData, global::D3.Account.ConsolePartitionData.Builder>(internal__static_D3_Account_ConsolePartitionData__Descriptor,
        //        new string[] { "SeasonalGiftGbidsRedeemed", "SeasonalRolloverItem", "ConsoleRandomTransmuteSeedList", });
        internal__static_D3_Account_ConsolePartitionData_SeasonalRolloverItem__Descriptor = internal__static_D3_Account_ConsolePartitionData__Descriptor.NestedTypes[0];
        //internal__static_D3_Account_ConsolePartitionData_SeasonalRolloverItem__FieldAccessorTable = 
        //    new pb::FieldAccess.FieldAccessorTable<global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem, global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem.Builder>(internal__static_D3_Account_ConsolePartitionData_SeasonalRolloverItem__Descriptor,
        //        new string[] { "Item", "CreateTime", });
        internal__static_D3_Account_AccountPartition__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_Account_AccountPartition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.AccountPartition, global::D3.Account.AccountPartition.Builder>(internal__static_D3_Account_AccountPartition__Descriptor,
                new string[] { "PartitionId", "SavedAttributes", "Items", "CrafterData", "GoldIdDeprecated", "StashIcons", "AcceptedLicenseBits", "AltLevel", "CurrencyData", "Flags", "ConsolePartitionData", });
        internal__static_D3_Account_SavedDefinition__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_Account_SavedDefinition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.SavedDefinition, global::D3.Account.SavedDefinition.Builder>(internal__static_D3_Account_SavedDefinition__Descriptor,
                new string[] { "Version", "Digest", "SavedAttributes", "SeenTutorials", "NumVoteKicksParticipatedIn", "NumVoteKicksInitiated", "NumPublicGamesNoKick", "TimesVoteKicked", "CreateTime", "NumGroupsCreatedDeprecated", "Partitions", "DeprecatedSavedAttributesHardcore", "DeprecatedNormalSharedSavedItems", "DeprecatedHardcoreSharedSavedItems", "DeprecatedCrafterNormalData", "DeprecatedCrafterHardcoreData", "DeprecatedGoldIdNormal", "DeprecatedGoldIdHardcore", "DeprecatedStashIconsNormal", "DeprecatedAcceptedLicenseBits", "DeprecatedStashIconsHardcore", "ConsoleData", "AccountWideTransmogData", "AccountWideCosmeticItemData", "AccountWideCurrencyData", "DeliveredRewards", "Consumables", });
        internal__static_D3_Account_AvengerVictim__Descriptor = Descriptor.MessageTypes[7];
        internal__static_D3_Account_AvengerVictim__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.AvengerVictim, global::D3.Account.AvengerVictim.Builder>(internal__static_D3_Account_AvengerVictim__Descriptor,
                new string[] { "GbidClass", "IsFemale", });
        internal__static_D3_Account_Avenger__Descriptor = Descriptor.MessageTypes[8];
        internal__static_D3_Account_Avenger__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.Avenger, global::D3.Account.Avenger.Builder>(internal__static_D3_Account_Avenger__Descriptor,
                new string[] { "DeprecatedPlayerKills", "AvengerName", "DeprecatedMonsterSno", "DeprecatedResolved", "DeprecatedResult", "SentFrom", "AffixBucket", "Victims", });
        internal__static_D3_Account_AvengerData__Descriptor = Descriptor.MessageTypes[9];
        internal__static_D3_Account_AvengerData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.AvengerData, global::D3.Account.AvengerData.Builder>(internal__static_D3_Account_AvengerData__Descriptor,
                new string[] { "DeprecatedAvengerHardcore", "AvengerSolo", "AvengerFriends", });
        internal__static_D3_Account_ConsoleChallengeRiftReward__Descriptor = Descriptor.MessageTypes[10];
        internal__static_D3_Account_ConsoleChallengeRiftReward__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.ConsoleChallengeRiftReward, global::D3.Account.ConsoleChallengeRiftReward.Builder>(internal__static_D3_Account_ConsoleChallengeRiftReward__Descriptor,
                new string[] { "Items", "ChallengeRift", "CreateTime", "SeasonEarned", });
        internal__static_D3_Account_ConsoleChallengeRiftPersonalBest__Descriptor = Descriptor.MessageTypes[11];
        internal__static_D3_Account_ConsoleChallengeRiftPersonalBest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.ConsoleChallengeRiftPersonalBest, global::D3.Account.ConsoleChallengeRiftPersonalBest.Builder>(internal__static_D3_Account_ConsoleChallengeRiftPersonalBest__Descriptor,
                new string[] { "Id", "Score", "Timestamp", });
        internal__static_D3_Account_ConsoleData__Descriptor = Descriptor.MessageTypes[12];
        internal__static_D3_Account_ConsoleData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.ConsoleData, global::D3.Account.ConsoleData.Builder>(internal__static_D3_Account_ConsoleData__Descriptor,
                new string[] { "VersionRequired", "AchievementSnapshot", "HighestCompletedDifficultyDeprecated", "HasDemoSave", "AvengerData", "Progress", "HasBnetAccount", "LegacyLicenseBits", "LeaderboardHealAchievements", "LeaderboardHealConquests", "ChallengeRiftReward", "ChallengeRiftPersonalBestRiftNumber", "ChallengeRiftPersonalBest", "ConsoleCubeBaseSeed", "NfpDefaultTime", "NfpGoblinTime", });
        internal__static_D3_Account_DeliveredAchievementReward__Descriptor = Descriptor.MessageTypes[13];
        internal__static_D3_Account_DeliveredAchievementReward__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.DeliveredAchievementReward, global::D3.Account.DeliveredAchievementReward.Builder>(internal__static_D3_Account_DeliveredAchievementReward__Descriptor,
                new string[] { "AchievementId", });
        internal__static_D3_Account_DeliveredRewards__Descriptor = Descriptor.MessageTypes[14];
        internal__static_D3_Account_DeliveredRewards__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.DeliveredRewards, global::D3.Account.DeliveredRewards.Builder>(internal__static_D3_Account_DeliveredRewards__Descriptor,
                new string[] { "AchievementReward", "EntitledRewardLicenseBits", "OutstandingRewardLicenseBits", "LegacyAchievementsToDeliver", });
        internal__static_D3_Account_Consumable__Descriptor = Descriptor.MessageTypes[15];
        internal__static_D3_Account_Consumable__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.Consumable, global::D3.Account.Consumable.Builder>(internal__static_D3_Account_Consumable__Descriptor,
                new string[] { "LicenseInstanceId", "LicenseId", "TransactionId", "Quantity", "ConsumeTime", "RevokeTime", "Type", "DataPersistFlags", });
        internal__static_D3_Account_Consumables__Descriptor = Descriptor.MessageTypes[16];
        internal__static_D3_Account_Consumables__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Account.Consumables, global::D3.Account.Consumables.Builder>(internal__static_D3_Account_Consumables__Descriptor,
                new string[] { "ConsumedLicenses", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::D3.AttributeSerializer.AttributeSerializer.RegisterAllExtensions(registry);
        global::D3.Achievements.Achievements.RegisterAllExtensions(registry);
        global::D3.Items.Items.RegisterAllExtensions(registry);
        global::D3.OnlineService.OnlineService.RegisterAllExtensions(registry);
        global::D3.ItemCrafting.ItemCrafting.RegisterAllExtensions(registry);
        global::D3.CosmeticItems.Proto.CosmeticItems.RegisterAllExtensions(registry);
        global::D3.GameBalance.GameBalance.RegisterAllExtensions(registry);
        global::D3.ChallengeRifts.ChallengeRifts.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.AttributeSerializer.AttributeSerializer.Descriptor, 
          global::D3.Achievements.Achievements.Descriptor, 
          global::D3.Items.Items.Descriptor, 
          global::D3.OnlineService.OnlineService.Descriptor, 
          global::D3.ItemCrafting.ItemCrafting.Descriptor, 
          global::D3.CosmeticItems.Proto.CosmeticItems.Descriptor, 
          global::D3.GameBalance.GameBalance.Descriptor, 
          global::D3.ChallengeRifts.ChallengeRifts.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BannerConfiguration : pb::GeneratedMessage<BannerConfiguration, BannerConfiguration.Builder> {
    private BannerConfiguration() { }
    private static readonly BannerConfiguration defaultInstance = new BannerConfiguration().MakeReadOnly();
    private static readonly string[] _bannerConfigurationFieldNames = new string[] { "background_color", "banner_shape", "epic_banner", "pattern", "pattern_color", "sigil_accent", "sigil_color", "sigil_main", "sigil_placement", "use_sigil_variant" };
    private static readonly uint[] _bannerConfigurationFieldTags = new uint[] { 40, 8, 80, 64, 32, 24, 48, 16, 56, 72 };
    public static BannerConfiguration DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BannerConfiguration DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BannerConfiguration ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_BannerConfiguration__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BannerConfiguration, BannerConfiguration.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_BannerConfiguration__FieldAccessorTable; }
    }
    
    public const int BannerShapeFieldNumber = 1;
    private bool hasBannerShape;
    private uint bannerShape_;
    public bool HasBannerShape {
      get { return hasBannerShape; }
    }
    public uint BannerShape {
      get { return bannerShape_; }
    }
    
    public const int SigilMainFieldNumber = 2;
    private bool hasSigilMain;
    private uint sigilMain_;
    public bool HasSigilMain {
      get { return hasSigilMain; }
    }
    public uint SigilMain {
      get { return sigilMain_; }
    }
    
    public const int SigilAccentFieldNumber = 3;
    private bool hasSigilAccent;
    private uint sigilAccent_;
    public bool HasSigilAccent {
      get { return hasSigilAccent; }
    }
    public uint SigilAccent {
      get { return sigilAccent_; }
    }
    
    public const int PatternColorFieldNumber = 4;
    private bool hasPatternColor;
    private uint patternColor_;
    public bool HasPatternColor {
      get { return hasPatternColor; }
    }
    public uint PatternColor {
      get { return patternColor_; }
    }
    
    public const int BackgroundColorFieldNumber = 5;
    private bool hasBackgroundColor;
    private uint backgroundColor_;
    public bool HasBackgroundColor {
      get { return hasBackgroundColor; }
    }
    public uint BackgroundColor {
      get { return backgroundColor_; }
    }
    
    public const int SigilColorFieldNumber = 6;
    private bool hasSigilColor;
    private uint sigilColor_;
    public bool HasSigilColor {
      get { return hasSigilColor; }
    }
    public uint SigilColor {
      get { return sigilColor_; }
    }
    
    public const int SigilPlacementFieldNumber = 7;
    private bool hasSigilPlacement;
    private uint sigilPlacement_;
    public bool HasSigilPlacement {
      get { return hasSigilPlacement; }
    }
    public uint SigilPlacement {
      get { return sigilPlacement_; }
    }
    
    public const int PatternFieldNumber = 8;
    private bool hasPattern;
    private uint pattern_;
    public bool HasPattern {
      get { return hasPattern; }
    }
    public uint Pattern {
      get { return pattern_; }
    }
    
    public const int UseSigilVariantFieldNumber = 9;
    private bool hasUseSigilVariant;
    private bool useSigilVariant_;
    public bool HasUseSigilVariant {
      get { return hasUseSigilVariant; }
    }
    public bool UseSigilVariant {
      get { return useSigilVariant_; }
    }
    
    public const int EpicBannerFieldNumber = 10;
    private bool hasEpicBanner;
    private uint epicBanner_;
    public bool HasEpicBanner {
      get { return hasEpicBanner; }
    }
    public uint EpicBanner {
      get { return epicBanner_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBannerShape) return false;
        if (!hasSigilMain) return false;
        if (!hasSigilAccent) return false;
        if (!hasPatternColor) return false;
        if (!hasBackgroundColor) return false;
        if (!hasSigilColor) return false;
        if (!hasSigilPlacement) return false;
        if (!hasPattern) return false;
        if (!hasUseSigilVariant) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _bannerConfigurationFieldNames;
      if (hasBannerShape) {
        output.WriteUInt32(1, field_names[1], BannerShape);
      }
      if (hasSigilMain) {
        output.WriteUInt32(2, field_names[7], SigilMain);
      }
      if (hasSigilAccent) {
        output.WriteUInt32(3, field_names[5], SigilAccent);
      }
      if (hasPatternColor) {
        output.WriteUInt32(4, field_names[4], PatternColor);
      }
      if (hasBackgroundColor) {
        output.WriteUInt32(5, field_names[0], BackgroundColor);
      }
      if (hasSigilColor) {
        output.WriteUInt32(6, field_names[6], SigilColor);
      }
      if (hasSigilPlacement) {
        output.WriteUInt32(7, field_names[8], SigilPlacement);
      }
      if (hasPattern) {
        output.WriteUInt32(8, field_names[3], Pattern);
      }
      if (hasUseSigilVariant) {
        output.WriteBool(9, field_names[9], UseSigilVariant);
      }
      if (hasEpicBanner) {
        output.WriteUInt32(10, field_names[2], EpicBanner);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBannerShape) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, BannerShape);
        }
        if (hasSigilMain) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, SigilMain);
        }
        if (hasSigilAccent) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, SigilAccent);
        }
        if (hasPatternColor) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, PatternColor);
        }
        if (hasBackgroundColor) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, BackgroundColor);
        }
        if (hasSigilColor) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, SigilColor);
        }
        if (hasSigilPlacement) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, SigilPlacement);
        }
        if (hasPattern) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, Pattern);
        }
        if (hasUseSigilVariant) {
          size += pb::CodedOutputStream.ComputeBoolSize(9, UseSigilVariant);
        }
        if (hasEpicBanner) {
          size += pb::CodedOutputStream.ComputeUInt32Size(10, EpicBanner);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BannerConfiguration ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BannerConfiguration ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BannerConfiguration ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BannerConfiguration ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BannerConfiguration MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BannerConfiguration prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<BannerConfiguration, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BannerConfiguration cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BannerConfiguration result;
      
      private BannerConfiguration PrepareBuilder() {
        if (resultIsReadOnly) {
          BannerConfiguration original = result;
          result = new BannerConfiguration();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BannerConfiguration MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.BannerConfiguration.Descriptor; }
      }
      
      public override BannerConfiguration DefaultInstanceForType {
        get { return global::D3.Account.BannerConfiguration.DefaultInstance; }
      }
      
      public override BannerConfiguration BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BannerConfiguration) {
          return MergeFrom((BannerConfiguration) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BannerConfiguration other) {
        if (other == global::D3.Account.BannerConfiguration.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBannerShape) {
          BannerShape = other.BannerShape;
        }
        if (other.HasSigilMain) {
          SigilMain = other.SigilMain;
        }
        if (other.HasSigilAccent) {
          SigilAccent = other.SigilAccent;
        }
        if (other.HasPatternColor) {
          PatternColor = other.PatternColor;
        }
        if (other.HasBackgroundColor) {
          BackgroundColor = other.BackgroundColor;
        }
        if (other.HasSigilColor) {
          SigilColor = other.SigilColor;
        }
        if (other.HasSigilPlacement) {
          SigilPlacement = other.SigilPlacement;
        }
        if (other.HasPattern) {
          Pattern = other.Pattern;
        }
        if (other.HasUseSigilVariant) {
          UseSigilVariant = other.UseSigilVariant;
        }
        if (other.HasEpicBanner) {
          EpicBanner = other.EpicBanner;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bannerConfigurationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bannerConfigurationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasBannerShape = input.ReadUInt32(ref result.bannerShape_);
              break;
            }
            case 16: {
              result.hasSigilMain = input.ReadUInt32(ref result.sigilMain_);
              break;
            }
            case 24: {
              result.hasSigilAccent = input.ReadUInt32(ref result.sigilAccent_);
              break;
            }
            case 32: {
              result.hasPatternColor = input.ReadUInt32(ref result.patternColor_);
              break;
            }
            case 40: {
              result.hasBackgroundColor = input.ReadUInt32(ref result.backgroundColor_);
              break;
            }
            case 48: {
              result.hasSigilColor = input.ReadUInt32(ref result.sigilColor_);
              break;
            }
            case 56: {
              result.hasSigilPlacement = input.ReadUInt32(ref result.sigilPlacement_);
              break;
            }
            case 64: {
              result.hasPattern = input.ReadUInt32(ref result.pattern_);
              break;
            }
            case 72: {
              result.hasUseSigilVariant = input.ReadBool(ref result.useSigilVariant_);
              break;
            }
            case 80: {
              result.hasEpicBanner = input.ReadUInt32(ref result.epicBanner_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBannerShape {
        get { return result.hasBannerShape; }
      }
      public uint BannerShape {
        get { return result.BannerShape; }
        set { SetBannerShape(value); }
      }
      public Builder SetBannerShape(uint value) {
        PrepareBuilder();
        result.hasBannerShape = true;
        result.bannerShape_ = value;
        return this;
      }
      public Builder ClearBannerShape() {
        PrepareBuilder();
        result.hasBannerShape = false;
        result.bannerShape_ = 0;
        return this;
      }
      
      public bool HasSigilMain {
        get { return result.hasSigilMain; }
      }
      public uint SigilMain {
        get { return result.SigilMain; }
        set { SetSigilMain(value); }
      }
      public Builder SetSigilMain(uint value) {
        PrepareBuilder();
        result.hasSigilMain = true;
        result.sigilMain_ = value;
        return this;
      }
      public Builder ClearSigilMain() {
        PrepareBuilder();
        result.hasSigilMain = false;
        result.sigilMain_ = 0;
        return this;
      }
      
      public bool HasSigilAccent {
        get { return result.hasSigilAccent; }
      }
      public uint SigilAccent {
        get { return result.SigilAccent; }
        set { SetSigilAccent(value); }
      }
      public Builder SetSigilAccent(uint value) {
        PrepareBuilder();
        result.hasSigilAccent = true;
        result.sigilAccent_ = value;
        return this;
      }
      public Builder ClearSigilAccent() {
        PrepareBuilder();
        result.hasSigilAccent = false;
        result.sigilAccent_ = 0;
        return this;
      }
      
      public bool HasPatternColor {
        get { return result.hasPatternColor; }
      }
      public uint PatternColor {
        get { return result.PatternColor; }
        set { SetPatternColor(value); }
      }
      public Builder SetPatternColor(uint value) {
        PrepareBuilder();
        result.hasPatternColor = true;
        result.patternColor_ = value;
        return this;
      }
      public Builder ClearPatternColor() {
        PrepareBuilder();
        result.hasPatternColor = false;
        result.patternColor_ = 0;
        return this;
      }
      
      public bool HasBackgroundColor {
        get { return result.hasBackgroundColor; }
      }
      public uint BackgroundColor {
        get { return result.BackgroundColor; }
        set { SetBackgroundColor(value); }
      }
      public Builder SetBackgroundColor(uint value) {
        PrepareBuilder();
        result.hasBackgroundColor = true;
        result.backgroundColor_ = value;
        return this;
      }
      public Builder ClearBackgroundColor() {
        PrepareBuilder();
        result.hasBackgroundColor = false;
        result.backgroundColor_ = 0;
        return this;
      }
      
      public bool HasSigilColor {
        get { return result.hasSigilColor; }
      }
      public uint SigilColor {
        get { return result.SigilColor; }
        set { SetSigilColor(value); }
      }
      public Builder SetSigilColor(uint value) {
        PrepareBuilder();
        result.hasSigilColor = true;
        result.sigilColor_ = value;
        return this;
      }
      public Builder ClearSigilColor() {
        PrepareBuilder();
        result.hasSigilColor = false;
        result.sigilColor_ = 0;
        return this;
      }
      
      public bool HasSigilPlacement {
        get { return result.hasSigilPlacement; }
      }
      public uint SigilPlacement {
        get { return result.SigilPlacement; }
        set { SetSigilPlacement(value); }
      }
      public Builder SetSigilPlacement(uint value) {
        PrepareBuilder();
        result.hasSigilPlacement = true;
        result.sigilPlacement_ = value;
        return this;
      }
      public Builder ClearSigilPlacement() {
        PrepareBuilder();
        result.hasSigilPlacement = false;
        result.sigilPlacement_ = 0;
        return this;
      }
      
      public bool HasPattern {
        get { return result.hasPattern; }
      }
      public uint Pattern {
        get { return result.Pattern; }
        set { SetPattern(value); }
      }
      public Builder SetPattern(uint value) {
        PrepareBuilder();
        result.hasPattern = true;
        result.pattern_ = value;
        return this;
      }
      public Builder ClearPattern() {
        PrepareBuilder();
        result.hasPattern = false;
        result.pattern_ = 0;
        return this;
      }
      
      public bool HasUseSigilVariant {
        get { return result.hasUseSigilVariant; }
      }
      public bool UseSigilVariant {
        get { return result.UseSigilVariant; }
        set { SetUseSigilVariant(value); }
      }
      public Builder SetUseSigilVariant(bool value) {
        PrepareBuilder();
        result.hasUseSigilVariant = true;
        result.useSigilVariant_ = value;
        return this;
      }
      public Builder ClearUseSigilVariant() {
        PrepareBuilder();
        result.hasUseSigilVariant = false;
        result.useSigilVariant_ = false;
        return this;
      }
      
      public bool HasEpicBanner {
        get { return result.hasEpicBanner; }
      }
      public uint EpicBanner {
        get { return result.EpicBanner; }
        set { SetEpicBanner(value); }
      }
      public Builder SetEpicBanner(uint value) {
        PrepareBuilder();
        result.hasEpicBanner = true;
        result.epicBanner_ = value;
        return this;
      }
      public Builder ClearEpicBanner() {
        PrepareBuilder();
        result.hasEpicBanner = false;
        result.epicBanner_ = 0;
        return this;
      }
    }
    static BannerConfiguration() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Digest : pb::GeneratedMessage<Digest, Digest.Builder> {
    private Digest() { }
    private static readonly Digest defaultInstance = new Digest().MakeReadOnly();
    private static readonly string[] _digestFieldNames = new string[] { "alt_levels", "banner_configuration", "challenge_rift_account_data", "completed_solo_rift", "flags", "guild_id", "last_played_hero_id", "last_publish_time", "patch_version", "pvp_cooldown", "rebirths_used", "season_id", "stash_tabs_rewarded_from_seasons", "version" };
    private static readonly uint[] _digestFieldTags = new uint[] { 72, 26, 106, 112, 32, 64, 18, 120, 98, 40, 88, 56, 80, 8 };
    public static Digest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Digest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Digest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_Digest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Digest, Digest.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_Digest__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Flags {
        HARDCORE_HERO_UNLOCKED_DEPRECATED = 1,
        ADVENTURE_MODE_UNLOCKED = 2,
        PARAGON_100_VANILLA_FEAT = 3,
        MASTER_DIFFICULTY_UNLOCKED = 4,
        TORMENT_DIFFICULTY_UNLOCKED = 5,
        ADVENTURE_MODE_TUTORIAL_PLAYED = 6,
        HARDCORE_MASTER_DIFFICULTY_UNLOCKED = 7,
        HARDCORE_TORMENT_DIFFICULTY_UNLOCKED = 8,
        HARDCORE_ADVENTURE_MODE_UNLOCKED = 9,
        TORMENT_DIFFICULTY_7_AND_OVER_UNLOCKED = 10,
        HARDCORE_TORMENT_DIFFICULTY_7_AND_OVER_UNLOCKED_DEPRECATED = 11,
        BANNED = 12,
      }
      
    }
    #endregion
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private uint version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public uint Version {
      get { return version_; }
    }
    
    public const int LastPlayedHeroIdFieldNumber = 2;
    private bool hasLastPlayedHeroId;
    private global::D3.OnlineService.EntityId lastPlayedHeroId_;
    public bool HasLastPlayedHeroId {
      get { return hasLastPlayedHeroId; }
    }
    public global::D3.OnlineService.EntityId LastPlayedHeroId {
      get { return lastPlayedHeroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int BannerConfigurationFieldNumber = 3;
    private bool hasBannerConfiguration;
    private global::D3.Account.BannerConfiguration bannerConfiguration_;
    public bool HasBannerConfiguration {
      get { return hasBannerConfiguration; }
    }
    public global::D3.Account.BannerConfiguration BannerConfiguration {
      get { return bannerConfiguration_ ?? global::D3.Account.BannerConfiguration.DefaultInstance; }
    }
    
    public const int FlagsFieldNumber = 4;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public uint Flags {
      get { return flags_; }
    }
    
    public const int PvpCooldownFieldNumber = 5;
    private bool hasPvpCooldown;
    private ulong pvpCooldown_;
    public bool HasPvpCooldown {
      get { return hasPvpCooldown; }
    }
    public ulong PvpCooldown {
      get { return pvpCooldown_; }
    }
    
    public const int SeasonIdFieldNumber = 7;
    private bool hasSeasonId;
    private uint seasonId_;
    public bool HasSeasonId {
      get { return hasSeasonId; }
    }
    public uint SeasonId {
      get { return seasonId_; }
    }
    
    public const int GuildIdFieldNumber = 8;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int AltLevelsFieldNumber = 9;
    private pbc::PopsicleList<uint> altLevels_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> AltLevelsList {
      get { return pbc::Lists.AsReadOnly(altLevels_); }
    }
    public int AltLevelsCount {
      get { return altLevels_.Count; }
    }
    public uint GetAltLevels(int index) {
      return altLevels_[index];
    }
    
    public const int StashTabsRewardedFromSeasonsFieldNumber = 10;
    private bool hasStashTabsRewardedFromSeasons;
    private uint stashTabsRewardedFromSeasons_;
    public bool HasStashTabsRewardedFromSeasons {
      get { return hasStashTabsRewardedFromSeasons; }
    }
    public uint StashTabsRewardedFromSeasons {
      get { return stashTabsRewardedFromSeasons_; }
    }
    
    public const int RebirthsUsedFieldNumber = 11;
    private bool hasRebirthsUsed;
    private uint rebirthsUsed_;
    public bool HasRebirthsUsed {
      get { return hasRebirthsUsed; }
    }
    public uint RebirthsUsed {
      get { return rebirthsUsed_; }
    }
    
    public const int PatchVersionFieldNumber = 12;
    private bool hasPatchVersion;
    private string patchVersion_ = "";
    public bool HasPatchVersion {
      get { return hasPatchVersion; }
    }
    public string PatchVersion {
      get { return patchVersion_; }
    }
    
    public const int ChallengeRiftAccountDataFieldNumber = 13;
    private bool hasChallengeRiftAccountData;
    private global::D3.ChallengeRifts.AccountData challengeRiftAccountData_;
    public bool HasChallengeRiftAccountData {
      get { return hasChallengeRiftAccountData; }
    }
    public global::D3.ChallengeRifts.AccountData ChallengeRiftAccountData {
      get { return challengeRiftAccountData_ ?? global::D3.ChallengeRifts.AccountData.DefaultInstance; }
    }
    
    public const int CompletedSoloRiftFieldNumber = 14;
    private bool hasCompletedSoloRift;
    private bool completedSoloRift_;
    public bool HasCompletedSoloRift {
      get { return hasCompletedSoloRift; }
    }
    public bool CompletedSoloRift {
      get { return completedSoloRift_; }
    }
    
    public const int LastPublishTimeFieldNumber = 15;
    private bool hasLastPublishTime;
    private uint lastPublishTime_;
    public bool HasLastPublishTime {
      get { return hasLastPublishTime; }
    }
    public uint LastPublishTime {
      get { return lastPublishTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (!hasLastPlayedHeroId) return false;
        if (!hasBannerConfiguration) return false;
        if (!hasFlags) return false;
        if (!LastPlayedHeroId.IsInitialized) return false;
        if (!BannerConfiguration.IsInitialized) return false;
        if (HasChallengeRiftAccountData) {
          if (!ChallengeRiftAccountData.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _digestFieldNames;
      if (hasVersion) {
        output.WriteUInt32(1, field_names[13], Version);
      }
      if (hasLastPlayedHeroId) {
        output.WriteMessage(2, field_names[6], LastPlayedHeroId);
      }
      if (hasBannerConfiguration) {
        output.WriteMessage(3, field_names[1], BannerConfiguration);
      }
      if (hasFlags) {
        output.WriteUInt32(4, field_names[4], Flags);
      }
      if (hasPvpCooldown) {
        output.WriteUInt64(5, field_names[9], PvpCooldown);
      }
      if (hasSeasonId) {
        output.WriteUInt32(7, field_names[11], SeasonId);
      }
      if (hasGuildId) {
        output.WriteUInt64(8, field_names[5], GuildId);
      }
      if (altLevels_.Count > 0) {
        output.WriteUInt32Array(9, field_names[0], altLevels_);
      }
      if (hasStashTabsRewardedFromSeasons) {
        output.WriteUInt32(10, field_names[12], StashTabsRewardedFromSeasons);
      }
      if (hasRebirthsUsed) {
        output.WriteUInt32(11, field_names[10], RebirthsUsed);
      }
      if (hasPatchVersion) {
        output.WriteString(12, field_names[8], PatchVersion);
      }
      if (hasChallengeRiftAccountData) {
        output.WriteMessage(13, field_names[2], ChallengeRiftAccountData);
      }
      if (hasCompletedSoloRift) {
        output.WriteBool(14, field_names[3], CompletedSoloRift);
      }
      if (hasLastPublishTime) {
        output.WriteUInt32(15, field_names[7], LastPublishTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Version);
        }
        if (hasLastPlayedHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, LastPlayedHeroId);
        }
        if (hasBannerConfiguration) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, BannerConfiguration);
        }
        if (hasFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, Flags);
        }
        if (hasPvpCooldown) {
          size += pb::CodedOutputStream.ComputeUInt64Size(5, PvpCooldown);
        }
        if (hasSeasonId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, SeasonId);
        }
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(8, GuildId);
        }
        {
          int dataSize = 0;
          foreach (uint element in AltLevelsList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * altLevels_.Count;
        }
        if (hasStashTabsRewardedFromSeasons) {
          size += pb::CodedOutputStream.ComputeUInt32Size(10, StashTabsRewardedFromSeasons);
        }
        if (hasRebirthsUsed) {
          size += pb::CodedOutputStream.ComputeUInt32Size(11, RebirthsUsed);
        }
        if (hasPatchVersion) {
          size += pb::CodedOutputStream.ComputeStringSize(12, PatchVersion);
        }
        if (hasChallengeRiftAccountData) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, ChallengeRiftAccountData);
        }
        if (hasCompletedSoloRift) {
          size += pb::CodedOutputStream.ComputeBoolSize(14, CompletedSoloRift);
        }
        if (hasLastPublishTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(15, LastPublishTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Digest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Digest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Digest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Digest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Digest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Digest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Digest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Digest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Digest MakeReadOnly() {
      altLevels_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Digest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Digest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Digest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Digest result;
      
      private Digest PrepareBuilder() {
        if (resultIsReadOnly) {
          Digest original = result;
          result = new Digest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Digest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.Digest.Descriptor; }
      }
      
      public override Digest DefaultInstanceForType {
        get { return global::D3.Account.Digest.DefaultInstance; }
      }
      
      public override Digest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Digest) {
          return MergeFrom((Digest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Digest other) {
        if (other == global::D3.Account.Digest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasLastPlayedHeroId) {
          MergeLastPlayedHeroId(other.LastPlayedHeroId);
        }
        if (other.HasBannerConfiguration) {
          MergeBannerConfiguration(other.BannerConfiguration);
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        if (other.HasPvpCooldown) {
          PvpCooldown = other.PvpCooldown;
        }
        if (other.HasSeasonId) {
          SeasonId = other.SeasonId;
        }
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.altLevels_.Count != 0) {
          result.altLevels_.Add(other.altLevels_);
        }
        if (other.HasStashTabsRewardedFromSeasons) {
          StashTabsRewardedFromSeasons = other.StashTabsRewardedFromSeasons;
        }
        if (other.HasRebirthsUsed) {
          RebirthsUsed = other.RebirthsUsed;
        }
        if (other.HasPatchVersion) {
          PatchVersion = other.PatchVersion;
        }
        if (other.HasChallengeRiftAccountData) {
          MergeChallengeRiftAccountData(other.ChallengeRiftAccountData);
        }
        if (other.HasCompletedSoloRift) {
          CompletedSoloRift = other.CompletedSoloRift;
        }
        if (other.HasLastPublishTime) {
          LastPublishTime = other.LastPublishTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_digestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _digestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadUInt32(ref result.version_);
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasLastPlayedHeroId) {
                subBuilder.MergeFrom(LastPlayedHeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LastPlayedHeroId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.Account.BannerConfiguration.Builder subBuilder = global::D3.Account.BannerConfiguration.CreateBuilder();
              if (result.hasBannerConfiguration) {
                subBuilder.MergeFrom(BannerConfiguration);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BannerConfiguration = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
            case 40: {
              result.hasPvpCooldown = input.ReadUInt64(ref result.pvpCooldown_);
              break;
            }
            case 56: {
              result.hasSeasonId = input.ReadUInt32(ref result.seasonId_);
              break;
            }
            case 64: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 74:
            case 72: {
              input.ReadUInt32Array(tag, field_name, result.altLevels_);
              break;
            }
            case 80: {
              result.hasStashTabsRewardedFromSeasons = input.ReadUInt32(ref result.stashTabsRewardedFromSeasons_);
              break;
            }
            case 88: {
              result.hasRebirthsUsed = input.ReadUInt32(ref result.rebirthsUsed_);
              break;
            }
            case 98: {
              result.hasPatchVersion = input.ReadString(ref result.patchVersion_);
              break;
            }
            case 106: {
              global::D3.ChallengeRifts.AccountData.Builder subBuilder = global::D3.ChallengeRifts.AccountData.CreateBuilder();
              if (result.hasChallengeRiftAccountData) {
                subBuilder.MergeFrom(ChallengeRiftAccountData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChallengeRiftAccountData = subBuilder.BuildPartial();
              break;
            }
            case 112: {
              result.hasCompletedSoloRift = input.ReadBool(ref result.completedSoloRift_);
              break;
            }
            case 120: {
              result.hasLastPublishTime = input.ReadUInt32(ref result.lastPublishTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public uint Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(uint value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasLastPlayedHeroId {
       get { return result.hasLastPlayedHeroId; }
      }
      public global::D3.OnlineService.EntityId LastPlayedHeroId {
        get { return result.LastPlayedHeroId; }
        set { SetLastPlayedHeroId(value); }
      }
      public Builder SetLastPlayedHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLastPlayedHeroId = true;
        result.lastPlayedHeroId_ = value;
        return this;
      }
      public Builder SetLastPlayedHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLastPlayedHeroId = true;
        result.lastPlayedHeroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLastPlayedHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLastPlayedHeroId &&
            result.lastPlayedHeroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.lastPlayedHeroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.lastPlayedHeroId_).MergeFrom(value).BuildPartial();
        } else {
          result.lastPlayedHeroId_ = value;
        }
        result.hasLastPlayedHeroId = true;
        return this;
      }
      public Builder ClearLastPlayedHeroId() {
        PrepareBuilder();
        result.hasLastPlayedHeroId = false;
        result.lastPlayedHeroId_ = null;
        return this;
      }
      
      public bool HasBannerConfiguration {
       get { return result.hasBannerConfiguration; }
      }
      public global::D3.Account.BannerConfiguration BannerConfiguration {
        get { return result.BannerConfiguration; }
        set { SetBannerConfiguration(value); }
      }
      public Builder SetBannerConfiguration(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBannerConfiguration = true;
        result.bannerConfiguration_ = value;
        return this;
      }
      public Builder SetBannerConfiguration(global::D3.Account.BannerConfiguration.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBannerConfiguration = true;
        result.bannerConfiguration_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBannerConfiguration(global::D3.Account.BannerConfiguration value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBannerConfiguration &&
            result.bannerConfiguration_ != global::D3.Account.BannerConfiguration.DefaultInstance) {
            result.bannerConfiguration_ = global::D3.Account.BannerConfiguration.CreateBuilder(result.bannerConfiguration_).MergeFrom(value).BuildPartial();
        } else {
          result.bannerConfiguration_ = value;
        }
        result.hasBannerConfiguration = true;
        return this;
      }
      public Builder ClearBannerConfiguration() {
        PrepareBuilder();
        result.hasBannerConfiguration = false;
        result.bannerConfiguration_ = null;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(uint value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
      
      public bool HasPvpCooldown {
        get { return result.hasPvpCooldown; }
      }
      public ulong PvpCooldown {
        get { return result.PvpCooldown; }
        set { SetPvpCooldown(value); }
      }
      public Builder SetPvpCooldown(ulong value) {
        PrepareBuilder();
        result.hasPvpCooldown = true;
        result.pvpCooldown_ = value;
        return this;
      }
      public Builder ClearPvpCooldown() {
        PrepareBuilder();
        result.hasPvpCooldown = false;
        result.pvpCooldown_ = 0UL;
        return this;
      }
      
      public bool HasSeasonId {
        get { return result.hasSeasonId; }
      }
      public uint SeasonId {
        get { return result.SeasonId; }
        set { SetSeasonId(value); }
      }
      public Builder SetSeasonId(uint value) {
        PrepareBuilder();
        result.hasSeasonId = true;
        result.seasonId_ = value;
        return this;
      }
      public Builder ClearSeasonId() {
        PrepareBuilder();
        result.hasSeasonId = false;
        result.seasonId_ = 0;
        return this;
      }
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<uint> AltLevelsList {
        get { return PrepareBuilder().altLevels_; }
      }
      public int AltLevelsCount {
        get { return result.AltLevelsCount; }
      }
      public uint GetAltLevels(int index) {
        return result.GetAltLevels(index);
      }
      public Builder SetAltLevels(int index, uint value) {
        PrepareBuilder();
        result.altLevels_[index] = value;
        return this;
      }
      public Builder AddAltLevels(uint value) {
        PrepareBuilder();
        result.altLevels_.Add(value);
        return this;
      }
      public Builder AddRangeAltLevels(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.altLevels_.Add(values);
        return this;
      }
      public Builder ClearAltLevels() {
        PrepareBuilder();
        result.altLevels_.Clear();
        return this;
      }
      
      public bool HasStashTabsRewardedFromSeasons {
        get { return result.hasStashTabsRewardedFromSeasons; }
      }
      public uint StashTabsRewardedFromSeasons {
        get { return result.StashTabsRewardedFromSeasons; }
        set { SetStashTabsRewardedFromSeasons(value); }
      }
      public Builder SetStashTabsRewardedFromSeasons(uint value) {
        PrepareBuilder();
        result.hasStashTabsRewardedFromSeasons = true;
        result.stashTabsRewardedFromSeasons_ = value;
        return this;
      }
      public Builder ClearStashTabsRewardedFromSeasons() {
        PrepareBuilder();
        result.hasStashTabsRewardedFromSeasons = false;
        result.stashTabsRewardedFromSeasons_ = 0;
        return this;
      }
      
      public bool HasRebirthsUsed {
        get { return result.hasRebirthsUsed; }
      }
      public uint RebirthsUsed {
        get { return result.RebirthsUsed; }
        set { SetRebirthsUsed(value); }
      }
      public Builder SetRebirthsUsed(uint value) {
        PrepareBuilder();
        result.hasRebirthsUsed = true;
        result.rebirthsUsed_ = value;
        return this;
      }
      public Builder ClearRebirthsUsed() {
        PrepareBuilder();
        result.hasRebirthsUsed = false;
        result.rebirthsUsed_ = 0;
        return this;
      }
      
      public bool HasPatchVersion {
        get { return result.hasPatchVersion; }
      }
      public string PatchVersion {
        get { return result.PatchVersion; }
        set { SetPatchVersion(value); }
      }
      public Builder SetPatchVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPatchVersion = true;
        result.patchVersion_ = value;
        return this;
      }
      public Builder ClearPatchVersion() {
        PrepareBuilder();
        result.hasPatchVersion = false;
        result.patchVersion_ = "";
        return this;
      }
      
      public bool HasChallengeRiftAccountData {
       get { return result.hasChallengeRiftAccountData; }
      }
      public global::D3.ChallengeRifts.AccountData ChallengeRiftAccountData {
        get { return result.ChallengeRiftAccountData; }
        set { SetChallengeRiftAccountData(value); }
      }
      public Builder SetChallengeRiftAccountData(global::D3.ChallengeRifts.AccountData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChallengeRiftAccountData = true;
        result.challengeRiftAccountData_ = value;
        return this;
      }
      public Builder SetChallengeRiftAccountData(global::D3.ChallengeRifts.AccountData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChallengeRiftAccountData = true;
        result.challengeRiftAccountData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChallengeRiftAccountData(global::D3.ChallengeRifts.AccountData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChallengeRiftAccountData &&
            result.challengeRiftAccountData_ != global::D3.ChallengeRifts.AccountData.DefaultInstance) {
            result.challengeRiftAccountData_ = global::D3.ChallengeRifts.AccountData.CreateBuilder(result.challengeRiftAccountData_).MergeFrom(value).BuildPartial();
        } else {
          result.challengeRiftAccountData_ = value;
        }
        result.hasChallengeRiftAccountData = true;
        return this;
      }
      public Builder ClearChallengeRiftAccountData() {
        PrepareBuilder();
        result.hasChallengeRiftAccountData = false;
        result.challengeRiftAccountData_ = null;
        return this;
      }
      
      public bool HasCompletedSoloRift {
        get { return result.hasCompletedSoloRift; }
      }
      public bool CompletedSoloRift {
        get { return result.CompletedSoloRift; }
        set { SetCompletedSoloRift(value); }
      }
      public Builder SetCompletedSoloRift(bool value) {
        PrepareBuilder();
        result.hasCompletedSoloRift = true;
        result.completedSoloRift_ = value;
        return this;
      }
      public Builder ClearCompletedSoloRift() {
        PrepareBuilder();
        result.hasCompletedSoloRift = false;
        result.completedSoloRift_ = false;
        return this;
      }
      
      public bool HasLastPublishTime {
        get { return result.hasLastPublishTime; }
      }
      public uint LastPublishTime {
        get { return result.LastPublishTime; }
        set { SetLastPublishTime(value); }
      }
      public Builder SetLastPublishTime(uint value) {
        PrepareBuilder();
        result.hasLastPublishTime = true;
        result.lastPublishTime_ = value;
        return this;
      }
      public Builder ClearLastPublishTime() {
        PrepareBuilder();
        result.hasLastPublishTime = false;
        result.lastPublishTime_ = 0;
        return this;
      }
    }
    static Digest() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConsoleRandomTransmuteSeed : pb::GeneratedMessage<ConsoleRandomTransmuteSeed, ConsoleRandomTransmuteSeed.Builder> {
    private ConsoleRandomTransmuteSeed() { }
    private static readonly ConsoleRandomTransmuteSeed defaultInstance = new ConsoleRandomTransmuteSeed().MakeReadOnly();
    private static readonly string[] _consoleRandomTransmuteSeedFieldNames = new string[] { "item_slot_key", "random_item_carry", "random_item_seed" };
    private static readonly uint[] _consoleRandomTransmuteSeedFieldTags = new uint[] { 8, 24, 16 };
    public static ConsoleRandomTransmuteSeed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConsoleRandomTransmuteSeed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConsoleRandomTransmuteSeed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_ConsoleRandomTransmuteSeed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConsoleRandomTransmuteSeed, ConsoleRandomTransmuteSeed.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_ConsoleRandomTransmuteSeed__FieldAccessorTable; }
    }
    
    public const int ItemSlotKeyFieldNumber = 1;
    private bool hasItemSlotKey;
    private int itemSlotKey_;
    public bool HasItemSlotKey {
      get { return hasItemSlotKey; }
    }
    public int ItemSlotKey {
      get { return itemSlotKey_; }
    }
    
    public const int RandomItemSeedFieldNumber = 2;
    private bool hasRandomItemSeed;
    private int randomItemSeed_;
    public bool HasRandomItemSeed {
      get { return hasRandomItemSeed; }
    }
    public int RandomItemSeed {
      get { return randomItemSeed_; }
    }
    
    public const int RandomItemCarryFieldNumber = 3;
    private bool hasRandomItemCarry;
    private int randomItemCarry_ = 666;
    public bool HasRandomItemCarry {
      get { return hasRandomItemCarry; }
    }
    public int RandomItemCarry {
      get { return randomItemCarry_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemSlotKey) return false;
        if (!hasRandomItemSeed) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _consoleRandomTransmuteSeedFieldNames;
      if (hasItemSlotKey) {
        output.WriteSInt32(1, field_names[0], ItemSlotKey);
      }
      if (hasRandomItemSeed) {
        output.WriteSInt32(2, field_names[2], RandomItemSeed);
      }
      if (hasRandomItemCarry) {
        output.WriteSInt32(3, field_names[1], RandomItemCarry);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasItemSlotKey) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, ItemSlotKey);
        }
        if (hasRandomItemSeed) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, RandomItemSeed);
        }
        if (hasRandomItemCarry) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, RandomItemCarry);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConsoleRandomTransmuteSeed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConsoleRandomTransmuteSeed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConsoleRandomTransmuteSeed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConsoleRandomTransmuteSeed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConsoleRandomTransmuteSeed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConsoleRandomTransmuteSeed result;
      
      private ConsoleRandomTransmuteSeed PrepareBuilder() {
        if (resultIsReadOnly) {
          ConsoleRandomTransmuteSeed original = result;
          result = new ConsoleRandomTransmuteSeed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConsoleRandomTransmuteSeed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.ConsoleRandomTransmuteSeed.Descriptor; }
      }
      
      public override ConsoleRandomTransmuteSeed DefaultInstanceForType {
        get { return global::D3.Account.ConsoleRandomTransmuteSeed.DefaultInstance; }
      }
      
      public override ConsoleRandomTransmuteSeed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConsoleRandomTransmuteSeed) {
          return MergeFrom((ConsoleRandomTransmuteSeed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConsoleRandomTransmuteSeed other) {
        if (other == global::D3.Account.ConsoleRandomTransmuteSeed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemSlotKey) {
          ItemSlotKey = other.ItemSlotKey;
        }
        if (other.HasRandomItemSeed) {
          RandomItemSeed = other.RandomItemSeed;
        }
        if (other.HasRandomItemCarry) {
          RandomItemCarry = other.RandomItemCarry;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_consoleRandomTransmuteSeedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _consoleRandomTransmuteSeedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemSlotKey = input.ReadSInt32(ref result.itemSlotKey_);
              break;
            }
            case 16: {
              result.hasRandomItemSeed = input.ReadSInt32(ref result.randomItemSeed_);
              break;
            }
            case 24: {
              result.hasRandomItemCarry = input.ReadSInt32(ref result.randomItemCarry_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemSlotKey {
        get { return result.hasItemSlotKey; }
      }
      public int ItemSlotKey {
        get { return result.ItemSlotKey; }
        set { SetItemSlotKey(value); }
      }
      public Builder SetItemSlotKey(int value) {
        PrepareBuilder();
        result.hasItemSlotKey = true;
        result.itemSlotKey_ = value;
        return this;
      }
      public Builder ClearItemSlotKey() {
        PrepareBuilder();
        result.hasItemSlotKey = false;
        result.itemSlotKey_ = 0;
        return this;
      }
      
      public bool HasRandomItemSeed {
        get { return result.hasRandomItemSeed; }
      }
      public int RandomItemSeed {
        get { return result.RandomItemSeed; }
        set { SetRandomItemSeed(value); }
      }
      public Builder SetRandomItemSeed(int value) {
        PrepareBuilder();
        result.hasRandomItemSeed = true;
        result.randomItemSeed_ = value;
        return this;
      }
      public Builder ClearRandomItemSeed() {
        PrepareBuilder();
        result.hasRandomItemSeed = false;
        result.randomItemSeed_ = 0;
        return this;
      }
      
      public bool HasRandomItemCarry {
        get { return result.hasRandomItemCarry; }
      }
      public int RandomItemCarry {
        get { return result.RandomItemCarry; }
        set { SetRandomItemCarry(value); }
      }
      public Builder SetRandomItemCarry(int value) {
        PrepareBuilder();
        result.hasRandomItemCarry = true;
        result.randomItemCarry_ = value;
        return this;
      }
      public Builder ClearRandomItemCarry() {
        PrepareBuilder();
        result.hasRandomItemCarry = false;
        result.randomItemCarry_ = 666;
        return this;
      }
    }
    static ConsoleRandomTransmuteSeed() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConsoleRandomTransmuteSeedList : pb::GeneratedMessage<ConsoleRandomTransmuteSeedList, ConsoleRandomTransmuteSeedList.Builder> {
    private ConsoleRandomTransmuteSeedList() { }
    private static readonly ConsoleRandomTransmuteSeedList defaultInstance = new ConsoleRandomTransmuteSeedList().MakeReadOnly();
    private static readonly string[] _consoleRandomTransmuteSeedListFieldNames = new string[] { "console_random_transmute_seed_prop" };
    private static readonly uint[] _consoleRandomTransmuteSeedListFieldTags = new uint[] { 10 };
    public static ConsoleRandomTransmuteSeedList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConsoleRandomTransmuteSeedList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConsoleRandomTransmuteSeedList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_ConsoleRandomTransmuteSeedList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConsoleRandomTransmuteSeedList, ConsoleRandomTransmuteSeedList.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_ConsoleRandomTransmuteSeedList__FieldAccessorTable; }
    }
    
    public const int ConsoleRandomTransmuteSeedPropFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Account.ConsoleRandomTransmuteSeed> consoleRandomTransmuteSeedProp_ = new pbc::PopsicleList<global::D3.Account.ConsoleRandomTransmuteSeed>();
    public scg::IList<global::D3.Account.ConsoleRandomTransmuteSeed> ConsoleRandomTransmuteSeedPropList {
      get { return consoleRandomTransmuteSeedProp_; }
    }
    public int ConsoleRandomTransmuteSeedPropCount {
      get { return consoleRandomTransmuteSeedProp_.Count; }
    }
    public global::D3.Account.ConsoleRandomTransmuteSeed GetConsoleRandomTransmuteSeedProp(int index) {
      return consoleRandomTransmuteSeedProp_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Account.ConsoleRandomTransmuteSeed element in ConsoleRandomTransmuteSeedPropList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _consoleRandomTransmuteSeedListFieldNames;
      if (consoleRandomTransmuteSeedProp_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], consoleRandomTransmuteSeedProp_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Account.ConsoleRandomTransmuteSeed element in ConsoleRandomTransmuteSeedPropList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConsoleRandomTransmuteSeedList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeedList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeedList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeedList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeedList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeedList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeedList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeedList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeedList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleRandomTransmuteSeedList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConsoleRandomTransmuteSeedList MakeReadOnly() {
      consoleRandomTransmuteSeedProp_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConsoleRandomTransmuteSeedList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConsoleRandomTransmuteSeedList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConsoleRandomTransmuteSeedList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConsoleRandomTransmuteSeedList result;
      
      private ConsoleRandomTransmuteSeedList PrepareBuilder() {
        if (resultIsReadOnly) {
          ConsoleRandomTransmuteSeedList original = result;
          result = new ConsoleRandomTransmuteSeedList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConsoleRandomTransmuteSeedList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.ConsoleRandomTransmuteSeedList.Descriptor; }
      }
      
      public override ConsoleRandomTransmuteSeedList DefaultInstanceForType {
        get { return global::D3.Account.ConsoleRandomTransmuteSeedList.DefaultInstance; }
      }
      
      public override ConsoleRandomTransmuteSeedList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConsoleRandomTransmuteSeedList) {
          return MergeFrom((ConsoleRandomTransmuteSeedList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConsoleRandomTransmuteSeedList other) {
        if (other == global::D3.Account.ConsoleRandomTransmuteSeedList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.consoleRandomTransmuteSeedProp_.Count != 0) {
          result.consoleRandomTransmuteSeedProp_.Add(other.consoleRandomTransmuteSeedProp_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_consoleRandomTransmuteSeedListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _consoleRandomTransmuteSeedListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.consoleRandomTransmuteSeedProp_, global::D3.Account.ConsoleRandomTransmuteSeed.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Account.ConsoleRandomTransmuteSeed> ConsoleRandomTransmuteSeedPropList {
        get { return PrepareBuilder().consoleRandomTransmuteSeedProp_; }
      }
      public int ConsoleRandomTransmuteSeedPropCount {
        get { return result.ConsoleRandomTransmuteSeedPropCount; }
      }
      public global::D3.Account.ConsoleRandomTransmuteSeed GetConsoleRandomTransmuteSeedProp(int index) {
        return result.GetConsoleRandomTransmuteSeedProp(index);
      }
      public Builder SetConsoleRandomTransmuteSeedProp(int index, global::D3.Account.ConsoleRandomTransmuteSeed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.consoleRandomTransmuteSeedProp_[index] = value;
        return this;
      }
      public Builder SetConsoleRandomTransmuteSeedProp(int index, global::D3.Account.ConsoleRandomTransmuteSeed.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.consoleRandomTransmuteSeedProp_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddConsoleRandomTransmuteSeedProp(global::D3.Account.ConsoleRandomTransmuteSeed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.consoleRandomTransmuteSeedProp_.Add(value);
        return this;
      }
      public Builder AddConsoleRandomTransmuteSeedProp(global::D3.Account.ConsoleRandomTransmuteSeed.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.consoleRandomTransmuteSeedProp_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeConsoleRandomTransmuteSeedProp(scg::IEnumerable<global::D3.Account.ConsoleRandomTransmuteSeed> values) {
        PrepareBuilder();
        result.consoleRandomTransmuteSeedProp_.Add(values);
        return this;
      }
      public Builder ClearConsoleRandomTransmuteSeedProp() {
        PrepareBuilder();
        result.consoleRandomTransmuteSeedProp_.Clear();
        return this;
      }
    }
    static ConsoleRandomTransmuteSeedList() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConsolePartitionData : pb::GeneratedMessage<ConsolePartitionData, ConsolePartitionData.Builder> {
    private ConsolePartitionData() { }
    private static readonly ConsolePartitionData defaultInstance = new ConsolePartitionData().MakeReadOnly();
    private static readonly string[] _consolePartitionDataFieldNames = new string[] { "console_random_transmute_seed_list", "seasonal_gift_gbids_redeemed", "seasonal_rollover_item" };
    private static readonly uint[] _consolePartitionDataFieldTags = new uint[] { 26, 8, 18 };
    public static ConsolePartitionData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConsolePartitionData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConsolePartitionData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_ConsolePartitionData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConsolePartitionData, ConsolePartitionData.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_ConsolePartitionData__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class SeasonalRolloverItem : pb::GeneratedMessage<SeasonalRolloverItem, SeasonalRolloverItem.Builder> {
        private SeasonalRolloverItem() { }
        private static readonly SeasonalRolloverItem defaultInstance = new SeasonalRolloverItem().MakeReadOnly();
        private static readonly string[] _seasonalRolloverItemFieldNames = new string[] { "create_time", "item" };
        private static readonly uint[] _seasonalRolloverItemFieldTags = new uint[] { 16, 10 };
        public static SeasonalRolloverItem DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override SeasonalRolloverItem DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override SeasonalRolloverItem ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::D3.Account.Account.internal__static_D3_Account_ConsolePartitionData_SeasonalRolloverItem__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<SeasonalRolloverItem, SeasonalRolloverItem.Builder> InternalFieldAccessors {
          get { return global::D3.Account.Account.internal__static_D3_Account_ConsolePartitionData_SeasonalRolloverItem__FieldAccessorTable; }
        }
        
        public const int ItemFieldNumber = 1;
        private bool hasItem;
        private global::D3.Items.SavedItem item_;
        public bool HasItem {
          get { return hasItem; }
        }
        public global::D3.Items.SavedItem Item {
          get { return item_ ?? global::D3.Items.SavedItem.DefaultInstance; }
        }
        
        public const int CreateTimeFieldNumber = 2;
        private bool hasCreateTime;
        private uint createTime_;
        public bool HasCreateTime {
          get { return hasCreateTime; }
        }
        public uint CreateTime {
          get { return createTime_; }
        }
        
        public override bool IsInitialized {
          get {
            if (HasItem) {
              if (!Item.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _seasonalRolloverItemFieldNames;
          if (hasItem) {
            output.WriteMessage(1, field_names[1], Item);
          }
          if (hasCreateTime) {
            output.WriteUInt32(2, field_names[0], CreateTime);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasItem) {
              size += pb::CodedOutputStream.ComputeMessageSize(1, Item);
            }
            if (hasCreateTime) {
              size += pb::CodedOutputStream.ComputeUInt32Size(2, CreateTime);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static SeasonalRolloverItem ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SeasonalRolloverItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SeasonalRolloverItem ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SeasonalRolloverItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SeasonalRolloverItem ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SeasonalRolloverItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SeasonalRolloverItem ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SeasonalRolloverItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SeasonalRolloverItem ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SeasonalRolloverItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SeasonalRolloverItem MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SeasonalRolloverItem prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<SeasonalRolloverItem, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(SeasonalRolloverItem cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private SeasonalRolloverItem result;
          
          private SeasonalRolloverItem PrepareBuilder() {
            if (resultIsReadOnly) {
              SeasonalRolloverItem original = result;
              result = new SeasonalRolloverItem();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override SeasonalRolloverItem MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem.Descriptor; }
          }
          
          public override SeasonalRolloverItem DefaultInstanceForType {
            get { return global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem.DefaultInstance; }
          }
          
          public override SeasonalRolloverItem BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is SeasonalRolloverItem) {
              return MergeFrom((SeasonalRolloverItem) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(SeasonalRolloverItem other) {
            if (other == global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasItem) {
              MergeItem(other.Item);
            }
            if (other.HasCreateTime) {
              CreateTime = other.CreateTime;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_seasonalRolloverItemFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _seasonalRolloverItemFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  global::D3.Items.SavedItem.Builder subBuilder = global::D3.Items.SavedItem.CreateBuilder();
                  if (result.hasItem) {
                    subBuilder.MergeFrom(Item);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Item = subBuilder.BuildPartial();
                  break;
                }
                case 16: {
                  result.hasCreateTime = input.ReadUInt32(ref result.createTime_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasItem {
           get { return result.hasItem; }
          }
          public global::D3.Items.SavedItem Item {
            get { return result.Item; }
            set { SetItem(value); }
          }
          public Builder SetItem(global::D3.Items.SavedItem value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasItem = true;
            result.item_ = value;
            return this;
          }
          public Builder SetItem(global::D3.Items.SavedItem.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasItem = true;
            result.item_ = builderForValue.Build();
            return this;
          }
          public Builder MergeItem(global::D3.Items.SavedItem value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasItem &&
                result.item_ != global::D3.Items.SavedItem.DefaultInstance) {
                result.item_ = global::D3.Items.SavedItem.CreateBuilder(result.item_).MergeFrom(value).BuildPartial();
            } else {
              result.item_ = value;
            }
            result.hasItem = true;
            return this;
          }
          public Builder ClearItem() {
            PrepareBuilder();
            result.hasItem = false;
            result.item_ = null;
            return this;
          }
          
          public bool HasCreateTime {
            get { return result.hasCreateTime; }
          }
          public uint CreateTime {
            get { return result.CreateTime; }
            set { SetCreateTime(value); }
          }
          public Builder SetCreateTime(uint value) {
            PrepareBuilder();
            result.hasCreateTime = true;
            result.createTime_ = value;
            return this;
          }
          public Builder ClearCreateTime() {
            PrepareBuilder();
            result.hasCreateTime = false;
            result.createTime_ = 0;
            return this;
          }
        }
        static SeasonalRolloverItem() {
          object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int SeasonalGiftGbidsRedeemedFieldNumber = 1;
    private pbc::PopsicleList<int> seasonalGiftGbidsRedeemed_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SeasonalGiftGbidsRedeemedList {
      get { return pbc::Lists.AsReadOnly(seasonalGiftGbidsRedeemed_); }
    }
    public int SeasonalGiftGbidsRedeemedCount {
      get { return seasonalGiftGbidsRedeemed_.Count; }
    }
    public int GetSeasonalGiftGbidsRedeemed(int index) {
      return seasonalGiftGbidsRedeemed_[index];
    }
    
    public const int SeasonalRolloverItemFieldNumber = 2;
    private pbc::PopsicleList<global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem> seasonalRolloverItem_ = new pbc::PopsicleList<global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem>();
    public scg::IList<global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem> SeasonalRolloverItemList {
      get { return seasonalRolloverItem_; }
    }
    public int SeasonalRolloverItemCount {
      get { return seasonalRolloverItem_.Count; }
    }
    public global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem GetSeasonalRolloverItem(int index) {
      return seasonalRolloverItem_[index];
    }
    
    public const int ConsoleRandomTransmuteSeedListFieldNumber = 3;
    private bool hasConsoleRandomTransmuteSeedList;
    private global::D3.Account.ConsoleRandomTransmuteSeedList consoleRandomTransmuteSeedList_;
    public bool HasConsoleRandomTransmuteSeedList {
      get { return hasConsoleRandomTransmuteSeedList; }
    }
    public global::D3.Account.ConsoleRandomTransmuteSeedList ConsoleRandomTransmuteSeedList {
      get { return consoleRandomTransmuteSeedList_ ?? global::D3.Account.ConsoleRandomTransmuteSeedList.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem element in SeasonalRolloverItemList) {
          if (!element.IsInitialized) return false;
        }
        if (HasConsoleRandomTransmuteSeedList) {
          if (!ConsoleRandomTransmuteSeedList.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _consolePartitionDataFieldNames;
      if (seasonalGiftGbidsRedeemed_.Count > 0) {
        output.WriteSInt32Array(1, field_names[1], seasonalGiftGbidsRedeemed_);
      }
      if (seasonalRolloverItem_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], seasonalRolloverItem_);
      }
      if (hasConsoleRandomTransmuteSeedList) {
        output.WriteMessage(3, field_names[0], ConsoleRandomTransmuteSeedList);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (int element in SeasonalGiftGbidsRedeemedList) {
            dataSize += pb::CodedOutputStream.ComputeSInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * seasonalGiftGbidsRedeemed_.Count;
        }
        foreach (global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem element in SeasonalRolloverItemList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasConsoleRandomTransmuteSeedList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ConsoleRandomTransmuteSeedList);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConsolePartitionData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsolePartitionData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsolePartitionData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsolePartitionData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsolePartitionData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsolePartitionData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConsolePartitionData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConsolePartitionData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConsolePartitionData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsolePartitionData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConsolePartitionData MakeReadOnly() {
      seasonalGiftGbidsRedeemed_.MakeReadOnly();
      seasonalRolloverItem_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConsolePartitionData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConsolePartitionData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConsolePartitionData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConsolePartitionData result;
      
      private ConsolePartitionData PrepareBuilder() {
        if (resultIsReadOnly) {
          ConsolePartitionData original = result;
          result = new ConsolePartitionData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConsolePartitionData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.ConsolePartitionData.Descriptor; }
      }
      
      public override ConsolePartitionData DefaultInstanceForType {
        get { return global::D3.Account.ConsolePartitionData.DefaultInstance; }
      }
      
      public override ConsolePartitionData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConsolePartitionData) {
          return MergeFrom((ConsolePartitionData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConsolePartitionData other) {
        if (other == global::D3.Account.ConsolePartitionData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.seasonalGiftGbidsRedeemed_.Count != 0) {
          result.seasonalGiftGbidsRedeemed_.Add(other.seasonalGiftGbidsRedeemed_);
        }
        if (other.seasonalRolloverItem_.Count != 0) {
          result.seasonalRolloverItem_.Add(other.seasonalRolloverItem_);
        }
        if (other.HasConsoleRandomTransmuteSeedList) {
          MergeConsoleRandomTransmuteSeedList(other.ConsoleRandomTransmuteSeedList);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_consolePartitionDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _consolePartitionDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadSInt32Array(tag, field_name, result.seasonalGiftGbidsRedeemed_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.seasonalRolloverItem_, global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              global::D3.Account.ConsoleRandomTransmuteSeedList.Builder subBuilder = global::D3.Account.ConsoleRandomTransmuteSeedList.CreateBuilder();
              if (result.hasConsoleRandomTransmuteSeedList) {
                subBuilder.MergeFrom(ConsoleRandomTransmuteSeedList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ConsoleRandomTransmuteSeedList = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<int> SeasonalGiftGbidsRedeemedList {
        get { return PrepareBuilder().seasonalGiftGbidsRedeemed_; }
      }
      public int SeasonalGiftGbidsRedeemedCount {
        get { return result.SeasonalGiftGbidsRedeemedCount; }
      }
      public int GetSeasonalGiftGbidsRedeemed(int index) {
        return result.GetSeasonalGiftGbidsRedeemed(index);
      }
      public Builder SetSeasonalGiftGbidsRedeemed(int index, int value) {
        PrepareBuilder();
        result.seasonalGiftGbidsRedeemed_[index] = value;
        return this;
      }
      public Builder AddSeasonalGiftGbidsRedeemed(int value) {
        PrepareBuilder();
        result.seasonalGiftGbidsRedeemed_.Add(value);
        return this;
      }
      public Builder AddRangeSeasonalGiftGbidsRedeemed(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.seasonalGiftGbidsRedeemed_.Add(values);
        return this;
      }
      public Builder ClearSeasonalGiftGbidsRedeemed() {
        PrepareBuilder();
        result.seasonalGiftGbidsRedeemed_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem> SeasonalRolloverItemList {
        get { return PrepareBuilder().seasonalRolloverItem_; }
      }
      public int SeasonalRolloverItemCount {
        get { return result.SeasonalRolloverItemCount; }
      }
      public global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem GetSeasonalRolloverItem(int index) {
        return result.GetSeasonalRolloverItem(index);
      }
      public Builder SetSeasonalRolloverItem(int index, global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.seasonalRolloverItem_[index] = value;
        return this;
      }
      public Builder SetSeasonalRolloverItem(int index, global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.seasonalRolloverItem_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSeasonalRolloverItem(global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.seasonalRolloverItem_.Add(value);
        return this;
      }
      public Builder AddSeasonalRolloverItem(global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.seasonalRolloverItem_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSeasonalRolloverItem(scg::IEnumerable<global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem> values) {
        PrepareBuilder();
        result.seasonalRolloverItem_.Add(values);
        return this;
      }
      public Builder ClearSeasonalRolloverItem() {
        PrepareBuilder();
        result.seasonalRolloverItem_.Clear();
        return this;
      }
      
      public bool HasConsoleRandomTransmuteSeedList {
       get { return result.hasConsoleRandomTransmuteSeedList; }
      }
      public global::D3.Account.ConsoleRandomTransmuteSeedList ConsoleRandomTransmuteSeedList {
        get { return result.ConsoleRandomTransmuteSeedList; }
        set { SetConsoleRandomTransmuteSeedList(value); }
      }
      public Builder SetConsoleRandomTransmuteSeedList(global::D3.Account.ConsoleRandomTransmuteSeedList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConsoleRandomTransmuteSeedList = true;
        result.consoleRandomTransmuteSeedList_ = value;
        return this;
      }
      public Builder SetConsoleRandomTransmuteSeedList(global::D3.Account.ConsoleRandomTransmuteSeedList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasConsoleRandomTransmuteSeedList = true;
        result.consoleRandomTransmuteSeedList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeConsoleRandomTransmuteSeedList(global::D3.Account.ConsoleRandomTransmuteSeedList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasConsoleRandomTransmuteSeedList &&
            result.consoleRandomTransmuteSeedList_ != global::D3.Account.ConsoleRandomTransmuteSeedList.DefaultInstance) {
            result.consoleRandomTransmuteSeedList_ = global::D3.Account.ConsoleRandomTransmuteSeedList.CreateBuilder(result.consoleRandomTransmuteSeedList_).MergeFrom(value).BuildPartial();
        } else {
          result.consoleRandomTransmuteSeedList_ = value;
        }
        result.hasConsoleRandomTransmuteSeedList = true;
        return this;
      }
      public Builder ClearConsoleRandomTransmuteSeedList() {
        PrepareBuilder();
        result.hasConsoleRandomTransmuteSeedList = false;
        result.consoleRandomTransmuteSeedList_ = null;
        return this;
      }
    }
    static ConsolePartitionData() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AccountPartition : pb::GeneratedMessage<AccountPartition, AccountPartition.Builder> {
    private AccountPartition() { }
    private static readonly AccountPartition defaultInstance = new AccountPartition().MakeReadOnly();
    private static readonly string[] _accountPartitionFieldNames = new string[] { "accepted_license_bits", "alt_level", "console_partition_data", "crafter_data", "currency_data", "flags", "gold_id_deprecated", "items", "partition_id", "saved_attributes", "stash_icons" };
    private static readonly uint[] _accountPartitionFieldTags = new uint[] { 56, 64, 90, 34, 74, 80, 42, 26, 8, 18, 50 };
    public static AccountPartition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AccountPartition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AccountPartition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_AccountPartition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AccountPartition, AccountPartition.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_AccountPartition__FieldAccessorTable; }
    }
    
    public const int PartitionIdFieldNumber = 1;
    private bool hasPartitionId;
    private int partitionId_;
    public bool HasPartitionId {
      get { return hasPartitionId; }
    }
    public int PartitionId {
      get { return partitionId_; }
    }
    
    public const int SavedAttributesFieldNumber = 2;
    private bool hasSavedAttributes;
    private global::D3.AttributeSerializer.SavedAttributes savedAttributes_;
    public bool HasSavedAttributes {
      get { return hasSavedAttributes; }
    }
    public global::D3.AttributeSerializer.SavedAttributes SavedAttributes {
      get { return savedAttributes_ ?? global::D3.AttributeSerializer.SavedAttributes.DefaultInstance; }
    }
    
    public const int ItemsFieldNumber = 3;
    private bool hasItems;
    private global::D3.Items.ItemList items_;
    public bool HasItems {
      get { return hasItems; }
    }
    public global::D3.Items.ItemList Items {
      get { return items_ ?? global::D3.Items.ItemList.DefaultInstance; }
    }
    
    public const int CrafterDataFieldNumber = 4;
    private bool hasCrafterData;
    private global::D3.ItemCrafting.CrafterSavedData crafterData_;
    public bool HasCrafterData {
      get { return hasCrafterData; }
    }
    public global::D3.ItemCrafting.CrafterSavedData CrafterData {
      get { return crafterData_ ?? global::D3.ItemCrafting.CrafterSavedData.DefaultInstance; }
    }
    
    public const int GoldIdDeprecatedFieldNumber = 5;
    private bool hasGoldIdDeprecated;
    private global::D3.OnlineService.EntityId goldIdDeprecated_;
    public bool HasGoldIdDeprecated {
      get { return hasGoldIdDeprecated; }
    }
    public global::D3.OnlineService.EntityId GoldIdDeprecated {
      get { return goldIdDeprecated_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int StashIconsFieldNumber = 6;
    private bool hasStashIcons;
    private pb::ByteString stashIcons_ = pb::ByteString.Empty;
    public bool HasStashIcons {
      get { return hasStashIcons; }
    }
    public pb::ByteString StashIcons {
      get { return stashIcons_; }
    }
    
    public const int AcceptedLicenseBitsFieldNumber = 7;
    private bool hasAcceptedLicenseBits;
    private ulong acceptedLicenseBits_;
    public bool HasAcceptedLicenseBits {
      get { return hasAcceptedLicenseBits; }
    }
    public ulong AcceptedLicenseBits {
      get { return acceptedLicenseBits_; }
    }
    
    public const int AltLevelFieldNumber = 8;
    private bool hasAltLevel;
    private uint altLevel_;
    public bool HasAltLevel {
      get { return hasAltLevel; }
    }
    public uint AltLevel {
      get { return altLevel_; }
    }
    
    public const int CurrencyDataFieldNumber = 9;
    private bool hasCurrencyData;
    private global::D3.Items.CurrencySavedData currencyData_;
    public bool HasCurrencyData {
      get { return hasCurrencyData; }
    }
    public global::D3.Items.CurrencySavedData CurrencyData {
      get { return currencyData_ ?? global::D3.Items.CurrencySavedData.DefaultInstance; }
    }
    
    public const int FlagsFieldNumber = 10;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public uint Flags {
      get { return flags_; }
    }
    
    public const int ConsolePartitionDataFieldNumber = 11;
    private bool hasConsolePartitionData;
    private global::D3.Account.ConsolePartitionData consolePartitionData_;
    public bool HasConsolePartitionData {
      get { return hasConsolePartitionData; }
    }
    public global::D3.Account.ConsolePartitionData ConsolePartitionData {
      get { return consolePartitionData_ ?? global::D3.Account.ConsolePartitionData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPartitionId) return false;
        if (!hasSavedAttributes) return false;
        if (!SavedAttributes.IsInitialized) return false;
        if (HasItems) {
          if (!Items.IsInitialized) return false;
        }
        if (HasCrafterData) {
          if (!CrafterData.IsInitialized) return false;
        }
        if (HasGoldIdDeprecated) {
          if (!GoldIdDeprecated.IsInitialized) return false;
        }
        if (HasCurrencyData) {
          if (!CurrencyData.IsInitialized) return false;
        }
        if (HasConsolePartitionData) {
          if (!ConsolePartitionData.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _accountPartitionFieldNames;
      if (hasPartitionId) {
        output.WriteInt32(1, field_names[8], PartitionId);
      }
      if (hasSavedAttributes) {
        output.WriteMessage(2, field_names[9], SavedAttributes);
      }
      if (hasItems) {
        output.WriteMessage(3, field_names[7], Items);
      }
      if (hasCrafterData) {
        output.WriteMessage(4, field_names[3], CrafterData);
      }
      if (hasGoldIdDeprecated) {
        output.WriteMessage(5, field_names[6], GoldIdDeprecated);
      }
      if (hasStashIcons) {
        output.WriteBytes(6, field_names[10], StashIcons);
      }
      if (hasAcceptedLicenseBits) {
        output.WriteUInt64(7, field_names[0], AcceptedLicenseBits);
      }
      if (hasAltLevel) {
        output.WriteUInt32(8, field_names[1], AltLevel);
      }
      if (hasCurrencyData) {
        output.WriteMessage(9, field_names[4], CurrencyData);
      }
      if (hasFlags) {
        output.WriteUInt32(10, field_names[5], Flags);
      }
      if (hasConsolePartitionData) {
        output.WriteMessage(11, field_names[2], ConsolePartitionData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPartitionId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, PartitionId);
        }
        if (hasSavedAttributes) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, SavedAttributes);
        }
        if (hasItems) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Items);
        }
        if (hasCrafterData) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, CrafterData);
        }
        if (hasGoldIdDeprecated) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, GoldIdDeprecated);
        }
        if (hasStashIcons) {
          size += pb::CodedOutputStream.ComputeBytesSize(6, StashIcons);
        }
        if (hasAcceptedLicenseBits) {
          size += pb::CodedOutputStream.ComputeUInt64Size(7, AcceptedLicenseBits);
        }
        if (hasAltLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, AltLevel);
        }
        if (hasCurrencyData) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, CurrencyData);
        }
        if (hasFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(10, Flags);
        }
        if (hasConsolePartitionData) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, ConsolePartitionData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AccountPartition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountPartition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountPartition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountPartition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountPartition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountPartition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountPartition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountPartition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountPartition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountPartition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AccountPartition MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountPartition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AccountPartition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AccountPartition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AccountPartition result;
      
      private AccountPartition PrepareBuilder() {
        if (resultIsReadOnly) {
          AccountPartition original = result;
          result = new AccountPartition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AccountPartition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.AccountPartition.Descriptor; }
      }
      
      public override AccountPartition DefaultInstanceForType {
        get { return global::D3.Account.AccountPartition.DefaultInstance; }
      }
      
      public override AccountPartition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountPartition) {
          return MergeFrom((AccountPartition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AccountPartition other) {
        if (other == global::D3.Account.AccountPartition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPartitionId) {
          PartitionId = other.PartitionId;
        }
        if (other.HasSavedAttributes) {
          MergeSavedAttributes(other.SavedAttributes);
        }
        if (other.HasItems) {
          MergeItems(other.Items);
        }
        if (other.HasCrafterData) {
          MergeCrafterData(other.CrafterData);
        }
        if (other.HasGoldIdDeprecated) {
          MergeGoldIdDeprecated(other.GoldIdDeprecated);
        }
        if (other.HasStashIcons) {
          StashIcons = other.StashIcons;
        }
        if (other.HasAcceptedLicenseBits) {
          AcceptedLicenseBits = other.AcceptedLicenseBits;
        }
        if (other.HasAltLevel) {
          AltLevel = other.AltLevel;
        }
        if (other.HasCurrencyData) {
          MergeCurrencyData(other.CurrencyData);
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        if (other.HasConsolePartitionData) {
          MergeConsolePartitionData(other.ConsolePartitionData);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_accountPartitionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _accountPartitionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPartitionId = input.ReadInt32(ref result.partitionId_);
              break;
            }
            case 18: {
              global::D3.AttributeSerializer.SavedAttributes.Builder subBuilder = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder();
              if (result.hasSavedAttributes) {
                subBuilder.MergeFrom(SavedAttributes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SavedAttributes = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.Items.ItemList.Builder subBuilder = global::D3.Items.ItemList.CreateBuilder();
              if (result.hasItems) {
                subBuilder.MergeFrom(Items);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Items = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::D3.ItemCrafting.CrafterSavedData.Builder subBuilder = global::D3.ItemCrafting.CrafterSavedData.CreateBuilder();
              if (result.hasCrafterData) {
                subBuilder.MergeFrom(CrafterData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CrafterData = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasGoldIdDeprecated) {
                subBuilder.MergeFrom(GoldIdDeprecated);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GoldIdDeprecated = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              result.hasStashIcons = input.ReadBytes(ref result.stashIcons_);
              break;
            }
            case 56: {
              result.hasAcceptedLicenseBits = input.ReadUInt64(ref result.acceptedLicenseBits_);
              break;
            }
            case 64: {
              result.hasAltLevel = input.ReadUInt32(ref result.altLevel_);
              break;
            }
            case 74: {
              global::D3.Items.CurrencySavedData.Builder subBuilder = global::D3.Items.CurrencySavedData.CreateBuilder();
              if (result.hasCurrencyData) {
                subBuilder.MergeFrom(CurrencyData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CurrencyData = subBuilder.BuildPartial();
              break;
            }
            case 80: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
            case 90: {
              global::D3.Account.ConsolePartitionData.Builder subBuilder = global::D3.Account.ConsolePartitionData.CreateBuilder();
              if (result.hasConsolePartitionData) {
                subBuilder.MergeFrom(ConsolePartitionData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ConsolePartitionData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPartitionId {
        get { return result.hasPartitionId; }
      }
      public int PartitionId {
        get { return result.PartitionId; }
        set { SetPartitionId(value); }
      }
      public Builder SetPartitionId(int value) {
        PrepareBuilder();
        result.hasPartitionId = true;
        result.partitionId_ = value;
        return this;
      }
      public Builder ClearPartitionId() {
        PrepareBuilder();
        result.hasPartitionId = false;
        result.partitionId_ = 0;
        return this;
      }
      
      public bool HasSavedAttributes {
       get { return result.hasSavedAttributes; }
      }
      public global::D3.AttributeSerializer.SavedAttributes SavedAttributes {
        get { return result.SavedAttributes; }
        set { SetSavedAttributes(value); }
      }
      public Builder SetSavedAttributes(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSavedAttributes = true;
        result.savedAttributes_ = value;
        return this;
      }
      public Builder SetSavedAttributes(global::D3.AttributeSerializer.SavedAttributes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSavedAttributes = true;
        result.savedAttributes_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSavedAttributes(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSavedAttributes &&
            result.savedAttributes_ != global::D3.AttributeSerializer.SavedAttributes.DefaultInstance) {
            result.savedAttributes_ = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder(result.savedAttributes_).MergeFrom(value).BuildPartial();
        } else {
          result.savedAttributes_ = value;
        }
        result.hasSavedAttributes = true;
        return this;
      }
      public Builder ClearSavedAttributes() {
        PrepareBuilder();
        result.hasSavedAttributes = false;
        result.savedAttributes_ = null;
        return this;
      }
      
      public bool HasItems {
       get { return result.hasItems; }
      }
      public global::D3.Items.ItemList Items {
        get { return result.Items; }
        set { SetItems(value); }
      }
      public Builder SetItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItems = true;
        result.items_ = value;
        return this;
      }
      public Builder SetItems(global::D3.Items.ItemList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItems = true;
        result.items_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItems &&
            result.items_ != global::D3.Items.ItemList.DefaultInstance) {
            result.items_ = global::D3.Items.ItemList.CreateBuilder(result.items_).MergeFrom(value).BuildPartial();
        } else {
          result.items_ = value;
        }
        result.hasItems = true;
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.hasItems = false;
        result.items_ = null;
        return this;
      }
      
      public bool HasCrafterData {
       get { return result.hasCrafterData; }
      }
      public global::D3.ItemCrafting.CrafterSavedData CrafterData {
        get { return result.CrafterData; }
        set { SetCrafterData(value); }
      }
      public Builder SetCrafterData(global::D3.ItemCrafting.CrafterSavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCrafterData = true;
        result.crafterData_ = value;
        return this;
      }
      public Builder SetCrafterData(global::D3.ItemCrafting.CrafterSavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCrafterData = true;
        result.crafterData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCrafterData(global::D3.ItemCrafting.CrafterSavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCrafterData &&
            result.crafterData_ != global::D3.ItemCrafting.CrafterSavedData.DefaultInstance) {
            result.crafterData_ = global::D3.ItemCrafting.CrafterSavedData.CreateBuilder(result.crafterData_).MergeFrom(value).BuildPartial();
        } else {
          result.crafterData_ = value;
        }
        result.hasCrafterData = true;
        return this;
      }
      public Builder ClearCrafterData() {
        PrepareBuilder();
        result.hasCrafterData = false;
        result.crafterData_ = null;
        return this;
      }
      
      public bool HasGoldIdDeprecated {
       get { return result.hasGoldIdDeprecated; }
      }
      public global::D3.OnlineService.EntityId GoldIdDeprecated {
        get { return result.GoldIdDeprecated; }
        set { SetGoldIdDeprecated(value); }
      }
      public Builder SetGoldIdDeprecated(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGoldIdDeprecated = true;
        result.goldIdDeprecated_ = value;
        return this;
      }
      public Builder SetGoldIdDeprecated(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGoldIdDeprecated = true;
        result.goldIdDeprecated_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGoldIdDeprecated(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGoldIdDeprecated &&
            result.goldIdDeprecated_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.goldIdDeprecated_ = global::D3.OnlineService.EntityId.CreateBuilder(result.goldIdDeprecated_).MergeFrom(value).BuildPartial();
        } else {
          result.goldIdDeprecated_ = value;
        }
        result.hasGoldIdDeprecated = true;
        return this;
      }
      public Builder ClearGoldIdDeprecated() {
        PrepareBuilder();
        result.hasGoldIdDeprecated = false;
        result.goldIdDeprecated_ = null;
        return this;
      }
      
      public bool HasStashIcons {
        get { return result.hasStashIcons; }
      }
      public pb::ByteString StashIcons {
        get { return result.StashIcons; }
        set { SetStashIcons(value); }
      }
      public Builder SetStashIcons(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStashIcons = true;
        result.stashIcons_ = value;
        return this;
      }
      public Builder ClearStashIcons() {
        PrepareBuilder();
        result.hasStashIcons = false;
        result.stashIcons_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasAcceptedLicenseBits {
        get { return result.hasAcceptedLicenseBits; }
      }
      public ulong AcceptedLicenseBits {
        get { return result.AcceptedLicenseBits; }
        set { SetAcceptedLicenseBits(value); }
      }
      public Builder SetAcceptedLicenseBits(ulong value) {
        PrepareBuilder();
        result.hasAcceptedLicenseBits = true;
        result.acceptedLicenseBits_ = value;
        return this;
      }
      public Builder ClearAcceptedLicenseBits() {
        PrepareBuilder();
        result.hasAcceptedLicenseBits = false;
        result.acceptedLicenseBits_ = 0UL;
        return this;
      }
      
      public bool HasAltLevel {
        get { return result.hasAltLevel; }
      }
      public uint AltLevel {
        get { return result.AltLevel; }
        set { SetAltLevel(value); }
      }
      public Builder SetAltLevel(uint value) {
        PrepareBuilder();
        result.hasAltLevel = true;
        result.altLevel_ = value;
        return this;
      }
      public Builder ClearAltLevel() {
        PrepareBuilder();
        result.hasAltLevel = false;
        result.altLevel_ = 0;
        return this;
      }
      
      public bool HasCurrencyData {
       get { return result.hasCurrencyData; }
      }
      public global::D3.Items.CurrencySavedData CurrencyData {
        get { return result.CurrencyData; }
        set { SetCurrencyData(value); }
      }
      public Builder SetCurrencyData(global::D3.Items.CurrencySavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCurrencyData = true;
        result.currencyData_ = value;
        return this;
      }
      public Builder SetCurrencyData(global::D3.Items.CurrencySavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCurrencyData = true;
        result.currencyData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCurrencyData(global::D3.Items.CurrencySavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCurrencyData &&
            result.currencyData_ != global::D3.Items.CurrencySavedData.DefaultInstance) {
            result.currencyData_ = global::D3.Items.CurrencySavedData.CreateBuilder(result.currencyData_).MergeFrom(value).BuildPartial();
        } else {
          result.currencyData_ = value;
        }
        result.hasCurrencyData = true;
        return this;
      }
      public Builder ClearCurrencyData() {
        PrepareBuilder();
        result.hasCurrencyData = false;
        result.currencyData_ = null;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(uint value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
      
      public bool HasConsolePartitionData {
       get { return result.hasConsolePartitionData; }
      }
      public global::D3.Account.ConsolePartitionData ConsolePartitionData {
        get { return result.ConsolePartitionData; }
        set { SetConsolePartitionData(value); }
      }
      public Builder SetConsolePartitionData(global::D3.Account.ConsolePartitionData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConsolePartitionData = true;
        result.consolePartitionData_ = value;
        return this;
      }
      public Builder SetConsolePartitionData(global::D3.Account.ConsolePartitionData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasConsolePartitionData = true;
        result.consolePartitionData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeConsolePartitionData(global::D3.Account.ConsolePartitionData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasConsolePartitionData &&
            result.consolePartitionData_ != global::D3.Account.ConsolePartitionData.DefaultInstance) {
            result.consolePartitionData_ = global::D3.Account.ConsolePartitionData.CreateBuilder(result.consolePartitionData_).MergeFrom(value).BuildPartial();
        } else {
          result.consolePartitionData_ = value;
        }
        result.hasConsolePartitionData = true;
        return this;
      }
      public Builder ClearConsolePartitionData() {
        PrepareBuilder();
        result.hasConsolePartitionData = false;
        result.consolePartitionData_ = null;
        return this;
      }
    }
    static AccountPartition() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavedDefinition : pb::GeneratedMessage<SavedDefinition, SavedDefinition.Builder> {
    private SavedDefinition() { }
    private static readonly SavedDefinition defaultInstance = new SavedDefinition().MakeReadOnly();
    private static readonly string[] _savedDefinitionFieldNames = new string[] { "account_wide_cosmetic_item_data", "account_wide_currency_data", "account_wide_transmog_data", "console_data", "consumables", "create_time", "delivered_rewards", "deprecated_accepted_license_bits", "deprecated_crafter_hardcore_data", "deprecated_crafter_normal_data", "deprecated_gold_id_hardcore", "deprecated_gold_id_normal", "deprecated_hardcore_shared_saved_items", "deprecated_normal_shared_saved_items", "deprecated_saved_attributes_hardcore", "deprecated_stash_icons_hardcore", "deprecated_stash_icons_normal", "digest", "num_groups_created_deprecated", "num_public_games_no_kick", "num_vote_kicks_initiated", "num_vote_kicks_participated_in", "partitions", "saved_attributes", "seen_tutorials", "times_vote_kicked", "version" };
    private static readonly uint[] _savedDefinitionFieldTags = new uint[] { 194, 210, 186, 170, 226, 152, 218, 136, 66, 58, 122, 114, 50, 42, 34, 146, 130, 18, 176, 97, 89, 81, 162, 26, 74, 105, 8 };
    public static SavedDefinition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedDefinition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavedDefinition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_SavedDefinition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedDefinition, SavedDefinition.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_SavedDefinition__FieldAccessorTable; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private uint version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public uint Version {
      get { return version_; }
    }
    
    public const int DigestFieldNumber = 2;
    private bool hasDigest;
    private global::D3.Account.Digest digest_;
    public bool HasDigest {
      get { return hasDigest; }
    }
    public global::D3.Account.Digest Digest {
      get { return digest_ ?? global::D3.Account.Digest.DefaultInstance; }
    }
    
    public const int SavedAttributesFieldNumber = 3;
    private bool hasSavedAttributes;
    private global::D3.AttributeSerializer.SavedAttributes savedAttributes_;
    public bool HasSavedAttributes {
      get { return hasSavedAttributes; }
    }
    public global::D3.AttributeSerializer.SavedAttributes SavedAttributes {
      get { return savedAttributes_ ?? global::D3.AttributeSerializer.SavedAttributes.DefaultInstance; }
    }
    
    public const int SeenTutorialsFieldNumber = 9;
    private bool hasSeenTutorials;
    private pb::ByteString seenTutorials_ = pb::ByteString.Empty;
    public bool HasSeenTutorials {
      get { return hasSeenTutorials; }
    }
    public pb::ByteString SeenTutorials {
      get { return seenTutorials_; }
    }
    
    public const int NumVoteKicksParticipatedInFieldNumber = 10;
    private bool hasNumVoteKicksParticipatedIn;
    private long numVoteKicksParticipatedIn_;
    public bool HasNumVoteKicksParticipatedIn {
      get { return hasNumVoteKicksParticipatedIn; }
    }
    public long NumVoteKicksParticipatedIn {
      get { return numVoteKicksParticipatedIn_; }
    }
    
    public const int NumVoteKicksInitiatedFieldNumber = 11;
    private bool hasNumVoteKicksInitiated;
    private long numVoteKicksInitiated_;
    public bool HasNumVoteKicksInitiated {
      get { return hasNumVoteKicksInitiated; }
    }
    public long NumVoteKicksInitiated {
      get { return numVoteKicksInitiated_; }
    }
    
    public const int NumPublicGamesNoKickFieldNumber = 12;
    private bool hasNumPublicGamesNoKick;
    private long numPublicGamesNoKick_;
    public bool HasNumPublicGamesNoKick {
      get { return hasNumPublicGamesNoKick; }
    }
    public long NumPublicGamesNoKick {
      get { return numPublicGamesNoKick_; }
    }
    
    public const int TimesVoteKickedFieldNumber = 13;
    private bool hasTimesVoteKicked;
    private long timesVoteKicked_;
    public bool HasTimesVoteKicked {
      get { return hasTimesVoteKicked; }
    }
    public long TimesVoteKicked {
      get { return timesVoteKicked_; }
    }
    
    public const int CreateTimeFieldNumber = 19;
    private bool hasCreateTime;
    private uint createTime_;
    public bool HasCreateTime {
      get { return hasCreateTime; }
    }
    public uint CreateTime {
      get { return createTime_; }
    }
    
    public const int NumGroupsCreatedDeprecatedFieldNumber = 22;
    private bool hasNumGroupsCreatedDeprecated;
    private uint numGroupsCreatedDeprecated_;
    public bool HasNumGroupsCreatedDeprecated {
      get { return hasNumGroupsCreatedDeprecated; }
    }
    public uint NumGroupsCreatedDeprecated {
      get { return numGroupsCreatedDeprecated_; }
    }
    
    public const int PartitionsFieldNumber = 20;
    private pbc::PopsicleList<global::D3.Account.AccountPartition> partitions_ = new pbc::PopsicleList<global::D3.Account.AccountPartition>();
    public scg::IList<global::D3.Account.AccountPartition> PartitionsList {
      get { return partitions_; }
    }
    public int PartitionsCount {
      get { return partitions_.Count; }
    }
    public global::D3.Account.AccountPartition GetPartitions(int index) {
      return partitions_[index];
    }
    
    public const int DeprecatedSavedAttributesHardcoreFieldNumber = 4;
    private bool hasDeprecatedSavedAttributesHardcore;
    private global::D3.AttributeSerializer.SavedAttributes deprecatedSavedAttributesHardcore_;
    public bool HasDeprecatedSavedAttributesHardcore {
      get { return hasDeprecatedSavedAttributesHardcore; }
    }
    public global::D3.AttributeSerializer.SavedAttributes DeprecatedSavedAttributesHardcore {
      get { return deprecatedSavedAttributesHardcore_ ?? global::D3.AttributeSerializer.SavedAttributes.DefaultInstance; }
    }
    
    public const int DeprecatedNormalSharedSavedItemsFieldNumber = 5;
    private bool hasDeprecatedNormalSharedSavedItems;
    private global::D3.Items.ItemList deprecatedNormalSharedSavedItems_;
    public bool HasDeprecatedNormalSharedSavedItems {
      get { return hasDeprecatedNormalSharedSavedItems; }
    }
    public global::D3.Items.ItemList DeprecatedNormalSharedSavedItems {
      get { return deprecatedNormalSharedSavedItems_ ?? global::D3.Items.ItemList.DefaultInstance; }
    }
    
    public const int DeprecatedHardcoreSharedSavedItemsFieldNumber = 6;
    private bool hasDeprecatedHardcoreSharedSavedItems;
    private global::D3.Items.ItemList deprecatedHardcoreSharedSavedItems_;
    public bool HasDeprecatedHardcoreSharedSavedItems {
      get { return hasDeprecatedHardcoreSharedSavedItems; }
    }
    public global::D3.Items.ItemList DeprecatedHardcoreSharedSavedItems {
      get { return deprecatedHardcoreSharedSavedItems_ ?? global::D3.Items.ItemList.DefaultInstance; }
    }
    
    public const int DeprecatedCrafterNormalDataFieldNumber = 7;
    private bool hasDeprecatedCrafterNormalData;
    private global::D3.ItemCrafting.CrafterSavedData deprecatedCrafterNormalData_;
    public bool HasDeprecatedCrafterNormalData {
      get { return hasDeprecatedCrafterNormalData; }
    }
    public global::D3.ItemCrafting.CrafterSavedData DeprecatedCrafterNormalData {
      get { return deprecatedCrafterNormalData_ ?? global::D3.ItemCrafting.CrafterSavedData.DefaultInstance; }
    }
    
    public const int DeprecatedCrafterHardcoreDataFieldNumber = 8;
    private bool hasDeprecatedCrafterHardcoreData;
    private global::D3.ItemCrafting.CrafterSavedData deprecatedCrafterHardcoreData_;
    public bool HasDeprecatedCrafterHardcoreData {
      get { return hasDeprecatedCrafterHardcoreData; }
    }
    public global::D3.ItemCrafting.CrafterSavedData DeprecatedCrafterHardcoreData {
      get { return deprecatedCrafterHardcoreData_ ?? global::D3.ItemCrafting.CrafterSavedData.DefaultInstance; }
    }
    
    public const int DeprecatedGoldIdNormalFieldNumber = 14;
    private bool hasDeprecatedGoldIdNormal;
    private global::D3.OnlineService.EntityId deprecatedGoldIdNormal_;
    public bool HasDeprecatedGoldIdNormal {
      get { return hasDeprecatedGoldIdNormal; }
    }
    public global::D3.OnlineService.EntityId DeprecatedGoldIdNormal {
      get { return deprecatedGoldIdNormal_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int DeprecatedGoldIdHardcoreFieldNumber = 15;
    private bool hasDeprecatedGoldIdHardcore;
    private global::D3.OnlineService.EntityId deprecatedGoldIdHardcore_;
    public bool HasDeprecatedGoldIdHardcore {
      get { return hasDeprecatedGoldIdHardcore; }
    }
    public global::D3.OnlineService.EntityId DeprecatedGoldIdHardcore {
      get { return deprecatedGoldIdHardcore_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int DeprecatedStashIconsNormalFieldNumber = 16;
    private bool hasDeprecatedStashIconsNormal;
    private pb::ByteString deprecatedStashIconsNormal_ = pb::ByteString.Empty;
    public bool HasDeprecatedStashIconsNormal {
      get { return hasDeprecatedStashIconsNormal; }
    }
    public pb::ByteString DeprecatedStashIconsNormal {
      get { return deprecatedStashIconsNormal_; }
    }
    
    public const int DeprecatedAcceptedLicenseBitsFieldNumber = 17;
    private bool hasDeprecatedAcceptedLicenseBits;
    private ulong deprecatedAcceptedLicenseBits_;
    public bool HasDeprecatedAcceptedLicenseBits {
      get { return hasDeprecatedAcceptedLicenseBits; }
    }
    public ulong DeprecatedAcceptedLicenseBits {
      get { return deprecatedAcceptedLicenseBits_; }
    }
    
    public const int DeprecatedStashIconsHardcoreFieldNumber = 18;
    private bool hasDeprecatedStashIconsHardcore;
    private pb::ByteString deprecatedStashIconsHardcore_ = pb::ByteString.Empty;
    public bool HasDeprecatedStashIconsHardcore {
      get { return hasDeprecatedStashIconsHardcore; }
    }
    public pb::ByteString DeprecatedStashIconsHardcore {
      get { return deprecatedStashIconsHardcore_; }
    }
    
    public const int ConsoleDataFieldNumber = 21;
    private bool hasConsoleData;
    private global::D3.Account.ConsoleData consoleData_;
    public bool HasConsoleData {
      get { return hasConsoleData; }
    }
    public global::D3.Account.ConsoleData ConsoleData {
      get { return consoleData_ ?? global::D3.Account.ConsoleData.DefaultInstance; }
    }
    
    public const int AccountWideTransmogDataFieldNumber = 23;
    private bool hasAccountWideTransmogData;
    private global::D3.GameBalance.BitPackedGbidArray accountWideTransmogData_;
    public bool HasAccountWideTransmogData {
      get { return hasAccountWideTransmogData; }
    }
    public global::D3.GameBalance.BitPackedGbidArray AccountWideTransmogData {
      get { return accountWideTransmogData_ ?? global::D3.GameBalance.BitPackedGbidArray.DefaultInstance; }
    }
    
    public const int AccountWideCosmeticItemDataFieldNumber = 24;
    private bool hasAccountWideCosmeticItemData;
    private global::D3.CosmeticItems.CosmeticItemSavedData accountWideCosmeticItemData_;
    public bool HasAccountWideCosmeticItemData {
      get { return hasAccountWideCosmeticItemData; }
    }
    public global::D3.CosmeticItems.CosmeticItemSavedData AccountWideCosmeticItemData {
      get { return accountWideCosmeticItemData_ ?? global::D3.CosmeticItems.CosmeticItemSavedData.DefaultInstance; }
    }
    
    public const int AccountWideCurrencyDataFieldNumber = 26;
    private bool hasAccountWideCurrencyData;
    private global::D3.Items.CurrencySavedData accountWideCurrencyData_;
    public bool HasAccountWideCurrencyData {
      get { return hasAccountWideCurrencyData; }
    }
    public global::D3.Items.CurrencySavedData AccountWideCurrencyData {
      get { return accountWideCurrencyData_ ?? global::D3.Items.CurrencySavedData.DefaultInstance; }
    }
    
    public const int DeliveredRewardsFieldNumber = 27;
    private bool hasDeliveredRewards;
    private global::D3.Account.DeliveredRewards deliveredRewards_;
    public bool HasDeliveredRewards {
      get { return hasDeliveredRewards; }
    }
    public global::D3.Account.DeliveredRewards DeliveredRewards {
      get { return deliveredRewards_ ?? global::D3.Account.DeliveredRewards.DefaultInstance; }
    }
    
    public const int ConsumablesFieldNumber = 28;
    private bool hasConsumables;
    private global::D3.Account.Consumables consumables_;
    public bool HasConsumables {
      get { return hasConsumables; }
    }
    public global::D3.Account.Consumables Consumables {
      get { return consumables_ ?? global::D3.Account.Consumables.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasVersion) return false;
        if (HasDigest) {
          if (!Digest.IsInitialized) return false;
        }
        if (HasSavedAttributes) {
          if (!SavedAttributes.IsInitialized) return false;
        }
        foreach (global::D3.Account.AccountPartition element in PartitionsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasDeprecatedSavedAttributesHardcore) {
          if (!DeprecatedSavedAttributesHardcore.IsInitialized) return false;
        }
        if (HasDeprecatedNormalSharedSavedItems) {
          if (!DeprecatedNormalSharedSavedItems.IsInitialized) return false;
        }
        if (HasDeprecatedHardcoreSharedSavedItems) {
          if (!DeprecatedHardcoreSharedSavedItems.IsInitialized) return false;
        }
        if (HasDeprecatedCrafterNormalData) {
          if (!DeprecatedCrafterNormalData.IsInitialized) return false;
        }
        if (HasDeprecatedCrafterHardcoreData) {
          if (!DeprecatedCrafterHardcoreData.IsInitialized) return false;
        }
        if (HasDeprecatedGoldIdNormal) {
          if (!DeprecatedGoldIdNormal.IsInitialized) return false;
        }
        if (HasDeprecatedGoldIdHardcore) {
          if (!DeprecatedGoldIdHardcore.IsInitialized) return false;
        }
        if (HasConsoleData) {
          if (!ConsoleData.IsInitialized) return false;
        }
        if (HasAccountWideCurrencyData) {
          if (!AccountWideCurrencyData.IsInitialized) return false;
        }
        if (HasDeliveredRewards) {
          if (!DeliveredRewards.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savedDefinitionFieldNames;
      if (hasVersion) {
        output.WriteUInt32(1, field_names[26], Version);
      }
      if (hasDigest) {
        output.WriteMessage(2, field_names[17], Digest);
      }
      if (hasSavedAttributes) {
        output.WriteMessage(3, field_names[23], SavedAttributes);
      }
      if (hasDeprecatedSavedAttributesHardcore) {
        output.WriteMessage(4, field_names[14], DeprecatedSavedAttributesHardcore);
      }
      if (hasDeprecatedNormalSharedSavedItems) {
        output.WriteMessage(5, field_names[13], DeprecatedNormalSharedSavedItems);
      }
      if (hasDeprecatedHardcoreSharedSavedItems) {
        output.WriteMessage(6, field_names[12], DeprecatedHardcoreSharedSavedItems);
      }
      if (hasDeprecatedCrafterNormalData) {
        output.WriteMessage(7, field_names[9], DeprecatedCrafterNormalData);
      }
      if (hasDeprecatedCrafterHardcoreData) {
        output.WriteMessage(8, field_names[8], DeprecatedCrafterHardcoreData);
      }
      if (hasSeenTutorials) {
        output.WriteBytes(9, field_names[24], SeenTutorials);
      }
      if (hasNumVoteKicksParticipatedIn) {
        output.WriteSFixed64(10, field_names[21], NumVoteKicksParticipatedIn);
      }
      if (hasNumVoteKicksInitiated) {
        output.WriteSFixed64(11, field_names[20], NumVoteKicksInitiated);
      }
      if (hasNumPublicGamesNoKick) {
        output.WriteSFixed64(12, field_names[19], NumPublicGamesNoKick);
      }
      if (hasTimesVoteKicked) {
        output.WriteSFixed64(13, field_names[25], TimesVoteKicked);
      }
      if (hasDeprecatedGoldIdNormal) {
        output.WriteMessage(14, field_names[11], DeprecatedGoldIdNormal);
      }
      if (hasDeprecatedGoldIdHardcore) {
        output.WriteMessage(15, field_names[10], DeprecatedGoldIdHardcore);
      }
      if (hasDeprecatedStashIconsNormal) {
        output.WriteBytes(16, field_names[16], DeprecatedStashIconsNormal);
      }
      if (hasDeprecatedAcceptedLicenseBits) {
        output.WriteUInt64(17, field_names[7], DeprecatedAcceptedLicenseBits);
      }
      if (hasDeprecatedStashIconsHardcore) {
        output.WriteBytes(18, field_names[15], DeprecatedStashIconsHardcore);
      }
      if (hasCreateTime) {
        output.WriteUInt32(19, field_names[5], CreateTime);
      }
      if (partitions_.Count > 0) {
        output.WriteMessageArray(20, field_names[22], partitions_);
      }
      if (hasConsoleData) {
        output.WriteMessage(21, field_names[3], ConsoleData);
      }
      if (hasNumGroupsCreatedDeprecated) {
        output.WriteUInt32(22, field_names[18], NumGroupsCreatedDeprecated);
      }
      if (hasAccountWideTransmogData) {
        output.WriteMessage(23, field_names[2], AccountWideTransmogData);
      }
      if (hasAccountWideCosmeticItemData) {
        output.WriteMessage(24, field_names[0], AccountWideCosmeticItemData);
      }
      if (hasAccountWideCurrencyData) {
        output.WriteMessage(26, field_names[1], AccountWideCurrencyData);
      }
      if (hasDeliveredRewards) {
        output.WriteMessage(27, field_names[6], DeliveredRewards);
      }
      if (hasConsumables) {
        output.WriteMessage(28, field_names[4], Consumables);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Version);
        }
        if (hasDigest) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Digest);
        }
        if (hasSavedAttributes) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, SavedAttributes);
        }
        if (hasSeenTutorials) {
          size += pb::CodedOutputStream.ComputeBytesSize(9, SeenTutorials);
        }
        if (hasNumVoteKicksParticipatedIn) {
          size += pb::CodedOutputStream.ComputeSFixed64Size(10, NumVoteKicksParticipatedIn);
        }
        if (hasNumVoteKicksInitiated) {
          size += pb::CodedOutputStream.ComputeSFixed64Size(11, NumVoteKicksInitiated);
        }
        if (hasNumPublicGamesNoKick) {
          size += pb::CodedOutputStream.ComputeSFixed64Size(12, NumPublicGamesNoKick);
        }
        if (hasTimesVoteKicked) {
          size += pb::CodedOutputStream.ComputeSFixed64Size(13, TimesVoteKicked);
        }
        if (hasCreateTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(19, CreateTime);
        }
        if (hasNumGroupsCreatedDeprecated) {
          size += pb::CodedOutputStream.ComputeUInt32Size(22, NumGroupsCreatedDeprecated);
        }
        foreach (global::D3.Account.AccountPartition element in PartitionsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(20, element);
        }
        if (hasDeprecatedSavedAttributesHardcore) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, DeprecatedSavedAttributesHardcore);
        }
        if (hasDeprecatedNormalSharedSavedItems) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, DeprecatedNormalSharedSavedItems);
        }
        if (hasDeprecatedHardcoreSharedSavedItems) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, DeprecatedHardcoreSharedSavedItems);
        }
        if (hasDeprecatedCrafterNormalData) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, DeprecatedCrafterNormalData);
        }
        if (hasDeprecatedCrafterHardcoreData) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, DeprecatedCrafterHardcoreData);
        }
        if (hasDeprecatedGoldIdNormal) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, DeprecatedGoldIdNormal);
        }
        if (hasDeprecatedGoldIdHardcore) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, DeprecatedGoldIdHardcore);
        }
        if (hasDeprecatedStashIconsNormal) {
          size += pb::CodedOutputStream.ComputeBytesSize(16, DeprecatedStashIconsNormal);
        }
        if (hasDeprecatedAcceptedLicenseBits) {
          size += pb::CodedOutputStream.ComputeUInt64Size(17, DeprecatedAcceptedLicenseBits);
        }
        if (hasDeprecatedStashIconsHardcore) {
          size += pb::CodedOutputStream.ComputeBytesSize(18, DeprecatedStashIconsHardcore);
        }
        if (hasConsoleData) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, ConsoleData);
        }
        if (hasAccountWideTransmogData) {
          size += pb::CodedOutputStream.ComputeMessageSize(23, AccountWideTransmogData);
        }
        if (hasAccountWideCosmeticItemData) {
          size += pb::CodedOutputStream.ComputeMessageSize(24, AccountWideCosmeticItemData);
        }
        if (hasAccountWideCurrencyData) {
          size += pb::CodedOutputStream.ComputeMessageSize(26, AccountWideCurrencyData);
        }
        if (hasDeliveredRewards) {
          size += pb::CodedOutputStream.ComputeMessageSize(27, DeliveredRewards);
        }
        if (hasConsumables) {
          size += pb::CodedOutputStream.ComputeMessageSize(28, Consumables);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedDefinition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedDefinition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedDefinition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedDefinition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavedDefinition MakeReadOnly() {
      partitions_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedDefinition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavedDefinition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavedDefinition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavedDefinition result;
      
      private SavedDefinition PrepareBuilder() {
        if (resultIsReadOnly) {
          SavedDefinition original = result;
          result = new SavedDefinition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavedDefinition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.SavedDefinition.Descriptor; }
      }
      
      public override SavedDefinition DefaultInstanceForType {
        get { return global::D3.Account.SavedDefinition.DefaultInstance; }
      }
      
      public override SavedDefinition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedDefinition) {
          return MergeFrom((SavedDefinition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedDefinition other) {
        if (other == global::D3.Account.SavedDefinition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasDigest) {
          MergeDigest(other.Digest);
        }
        if (other.HasSavedAttributes) {
          MergeSavedAttributes(other.SavedAttributes);
        }
        if (other.HasSeenTutorials) {
          SeenTutorials = other.SeenTutorials;
        }
        if (other.HasNumVoteKicksParticipatedIn) {
          NumVoteKicksParticipatedIn = other.NumVoteKicksParticipatedIn;
        }
        if (other.HasNumVoteKicksInitiated) {
          NumVoteKicksInitiated = other.NumVoteKicksInitiated;
        }
        if (other.HasNumPublicGamesNoKick) {
          NumPublicGamesNoKick = other.NumPublicGamesNoKick;
        }
        if (other.HasTimesVoteKicked) {
          TimesVoteKicked = other.TimesVoteKicked;
        }
        if (other.HasCreateTime) {
          CreateTime = other.CreateTime;
        }
        if (other.HasNumGroupsCreatedDeprecated) {
          NumGroupsCreatedDeprecated = other.NumGroupsCreatedDeprecated;
        }
        if (other.partitions_.Count != 0) {
          result.partitions_.Add(other.partitions_);
        }
        if (other.HasDeprecatedSavedAttributesHardcore) {
          MergeDeprecatedSavedAttributesHardcore(other.DeprecatedSavedAttributesHardcore);
        }
        if (other.HasDeprecatedNormalSharedSavedItems) {
          MergeDeprecatedNormalSharedSavedItems(other.DeprecatedNormalSharedSavedItems);
        }
        if (other.HasDeprecatedHardcoreSharedSavedItems) {
          MergeDeprecatedHardcoreSharedSavedItems(other.DeprecatedHardcoreSharedSavedItems);
        }
        if (other.HasDeprecatedCrafterNormalData) {
          MergeDeprecatedCrafterNormalData(other.DeprecatedCrafterNormalData);
        }
        if (other.HasDeprecatedCrafterHardcoreData) {
          MergeDeprecatedCrafterHardcoreData(other.DeprecatedCrafterHardcoreData);
        }
        if (other.HasDeprecatedGoldIdNormal) {
          MergeDeprecatedGoldIdNormal(other.DeprecatedGoldIdNormal);
        }
        if (other.HasDeprecatedGoldIdHardcore) {
          MergeDeprecatedGoldIdHardcore(other.DeprecatedGoldIdHardcore);
        }
        if (other.HasDeprecatedStashIconsNormal) {
          DeprecatedStashIconsNormal = other.DeprecatedStashIconsNormal;
        }
        if (other.HasDeprecatedAcceptedLicenseBits) {
          DeprecatedAcceptedLicenseBits = other.DeprecatedAcceptedLicenseBits;
        }
        if (other.HasDeprecatedStashIconsHardcore) {
          DeprecatedStashIconsHardcore = other.DeprecatedStashIconsHardcore;
        }
        if (other.HasConsoleData) {
          MergeConsoleData(other.ConsoleData);
        }
        if (other.HasAccountWideTransmogData) {
          MergeAccountWideTransmogData(other.AccountWideTransmogData);
        }
        if (other.HasAccountWideCosmeticItemData) {
          MergeAccountWideCosmeticItemData(other.AccountWideCosmeticItemData);
        }
        if (other.HasAccountWideCurrencyData) {
          MergeAccountWideCurrencyData(other.AccountWideCurrencyData);
        }
        if (other.HasDeliveredRewards) {
          MergeDeliveredRewards(other.DeliveredRewards);
        }
        if (other.HasConsumables) {
          MergeConsumables(other.Consumables);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savedDefinitionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savedDefinitionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadUInt32(ref result.version_);
              break;
            }
            case 18: {
              global::D3.Account.Digest.Builder subBuilder = global::D3.Account.Digest.CreateBuilder();
              if (result.hasDigest) {
                subBuilder.MergeFrom(Digest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Digest = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.AttributeSerializer.SavedAttributes.Builder subBuilder = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder();
              if (result.hasSavedAttributes) {
                subBuilder.MergeFrom(SavedAttributes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SavedAttributes = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::D3.AttributeSerializer.SavedAttributes.Builder subBuilder = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder();
              if (result.hasDeprecatedSavedAttributesHardcore) {
                subBuilder.MergeFrom(DeprecatedSavedAttributesHardcore);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DeprecatedSavedAttributesHardcore = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::D3.Items.ItemList.Builder subBuilder = global::D3.Items.ItemList.CreateBuilder();
              if (result.hasDeprecatedNormalSharedSavedItems) {
                subBuilder.MergeFrom(DeprecatedNormalSharedSavedItems);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DeprecatedNormalSharedSavedItems = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::D3.Items.ItemList.Builder subBuilder = global::D3.Items.ItemList.CreateBuilder();
              if (result.hasDeprecatedHardcoreSharedSavedItems) {
                subBuilder.MergeFrom(DeprecatedHardcoreSharedSavedItems);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DeprecatedHardcoreSharedSavedItems = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::D3.ItemCrafting.CrafterSavedData.Builder subBuilder = global::D3.ItemCrafting.CrafterSavedData.CreateBuilder();
              if (result.hasDeprecatedCrafterNormalData) {
                subBuilder.MergeFrom(DeprecatedCrafterNormalData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DeprecatedCrafterNormalData = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::D3.ItemCrafting.CrafterSavedData.Builder subBuilder = global::D3.ItemCrafting.CrafterSavedData.CreateBuilder();
              if (result.hasDeprecatedCrafterHardcoreData) {
                subBuilder.MergeFrom(DeprecatedCrafterHardcoreData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DeprecatedCrafterHardcoreData = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              result.hasSeenTutorials = input.ReadBytes(ref result.seenTutorials_);
              break;
            }
            case 81: {
              result.hasNumVoteKicksParticipatedIn = input.ReadSFixed64(ref result.numVoteKicksParticipatedIn_);
              break;
            }
            case 89: {
              result.hasNumVoteKicksInitiated = input.ReadSFixed64(ref result.numVoteKicksInitiated_);
              break;
            }
            case 97: {
              result.hasNumPublicGamesNoKick = input.ReadSFixed64(ref result.numPublicGamesNoKick_);
              break;
            }
            case 105: {
              result.hasTimesVoteKicked = input.ReadSFixed64(ref result.timesVoteKicked_);
              break;
            }
            case 114: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasDeprecatedGoldIdNormal) {
                subBuilder.MergeFrom(DeprecatedGoldIdNormal);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DeprecatedGoldIdNormal = subBuilder.BuildPartial();
              break;
            }
            case 122: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasDeprecatedGoldIdHardcore) {
                subBuilder.MergeFrom(DeprecatedGoldIdHardcore);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DeprecatedGoldIdHardcore = subBuilder.BuildPartial();
              break;
            }
            case 130: {
              result.hasDeprecatedStashIconsNormal = input.ReadBytes(ref result.deprecatedStashIconsNormal_);
              break;
            }
            case 136: {
              result.hasDeprecatedAcceptedLicenseBits = input.ReadUInt64(ref result.deprecatedAcceptedLicenseBits_);
              break;
            }
            case 146: {
              result.hasDeprecatedStashIconsHardcore = input.ReadBytes(ref result.deprecatedStashIconsHardcore_);
              break;
            }
            case 152: {
              result.hasCreateTime = input.ReadUInt32(ref result.createTime_);
              break;
            }
            case 162: {
              input.ReadMessageArray(tag, field_name, result.partitions_, global::D3.Account.AccountPartition.DefaultInstance, extensionRegistry);
              break;
            }
            case 170: {
              global::D3.Account.ConsoleData.Builder subBuilder = global::D3.Account.ConsoleData.CreateBuilder();
              if (result.hasConsoleData) {
                subBuilder.MergeFrom(ConsoleData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ConsoleData = subBuilder.BuildPartial();
              break;
            }
            case 176: {
              result.hasNumGroupsCreatedDeprecated = input.ReadUInt32(ref result.numGroupsCreatedDeprecated_);
              break;
            }
            case 186: {
              global::D3.GameBalance.BitPackedGbidArray.Builder subBuilder = global::D3.GameBalance.BitPackedGbidArray.CreateBuilder();
              if (result.hasAccountWideTransmogData) {
                subBuilder.MergeFrom(AccountWideTransmogData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountWideTransmogData = subBuilder.BuildPartial();
              break;
            }
            case 194: {
              global::D3.CosmeticItems.CosmeticItemSavedData.Builder subBuilder = global::D3.CosmeticItems.CosmeticItemSavedData.CreateBuilder();
              if (result.hasAccountWideCosmeticItemData) {
                subBuilder.MergeFrom(AccountWideCosmeticItemData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountWideCosmeticItemData = subBuilder.BuildPartial();
              break;
            }
            case 210: {
              global::D3.Items.CurrencySavedData.Builder subBuilder = global::D3.Items.CurrencySavedData.CreateBuilder();
              if (result.hasAccountWideCurrencyData) {
                subBuilder.MergeFrom(AccountWideCurrencyData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountWideCurrencyData = subBuilder.BuildPartial();
              break;
            }
            case 218: {
              global::D3.Account.DeliveredRewards.Builder subBuilder = global::D3.Account.DeliveredRewards.CreateBuilder();
              if (result.hasDeliveredRewards) {
                subBuilder.MergeFrom(DeliveredRewards);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DeliveredRewards = subBuilder.BuildPartial();
              break;
            }
            case 226: {
              global::D3.Account.Consumables.Builder subBuilder = global::D3.Account.Consumables.CreateBuilder();
              if (result.hasConsumables) {
                subBuilder.MergeFrom(Consumables);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Consumables = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public uint Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(uint value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasDigest {
       get { return result.hasDigest; }
      }
      public global::D3.Account.Digest Digest {
        get { return result.Digest; }
        set { SetDigest(value); }
      }
      public Builder SetDigest(global::D3.Account.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDigest = true;
        result.digest_ = value;
        return this;
      }
      public Builder SetDigest(global::D3.Account.Digest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDigest = true;
        result.digest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDigest(global::D3.Account.Digest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDigest &&
            result.digest_ != global::D3.Account.Digest.DefaultInstance) {
            result.digest_ = global::D3.Account.Digest.CreateBuilder(result.digest_).MergeFrom(value).BuildPartial();
        } else {
          result.digest_ = value;
        }
        result.hasDigest = true;
        return this;
      }
      public Builder ClearDigest() {
        PrepareBuilder();
        result.hasDigest = false;
        result.digest_ = null;
        return this;
      }
      
      public bool HasSavedAttributes {
       get { return result.hasSavedAttributes; }
      }
      public global::D3.AttributeSerializer.SavedAttributes SavedAttributes {
        get { return result.SavedAttributes; }
        set { SetSavedAttributes(value); }
      }
      public Builder SetSavedAttributes(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSavedAttributes = true;
        result.savedAttributes_ = value;
        return this;
      }
      public Builder SetSavedAttributes(global::D3.AttributeSerializer.SavedAttributes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSavedAttributes = true;
        result.savedAttributes_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSavedAttributes(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSavedAttributes &&
            result.savedAttributes_ != global::D3.AttributeSerializer.SavedAttributes.DefaultInstance) {
            result.savedAttributes_ = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder(result.savedAttributes_).MergeFrom(value).BuildPartial();
        } else {
          result.savedAttributes_ = value;
        }
        result.hasSavedAttributes = true;
        return this;
      }
      public Builder ClearSavedAttributes() {
        PrepareBuilder();
        result.hasSavedAttributes = false;
        result.savedAttributes_ = null;
        return this;
      }
      
      public bool HasSeenTutorials {
        get { return result.hasSeenTutorials; }
      }
      public pb::ByteString SeenTutorials {
        get { return result.SeenTutorials; }
        set { SetSeenTutorials(value); }
      }
      public Builder SetSeenTutorials(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeenTutorials = true;
        result.seenTutorials_ = value;
        return this;
      }
      public Builder ClearSeenTutorials() {
        PrepareBuilder();
        result.hasSeenTutorials = false;
        result.seenTutorials_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasNumVoteKicksParticipatedIn {
        get { return result.hasNumVoteKicksParticipatedIn; }
      }
      public long NumVoteKicksParticipatedIn {
        get { return result.NumVoteKicksParticipatedIn; }
        set { SetNumVoteKicksParticipatedIn(value); }
      }
      public Builder SetNumVoteKicksParticipatedIn(long value) {
        PrepareBuilder();
        result.hasNumVoteKicksParticipatedIn = true;
        result.numVoteKicksParticipatedIn_ = value;
        return this;
      }
      public Builder ClearNumVoteKicksParticipatedIn() {
        PrepareBuilder();
        result.hasNumVoteKicksParticipatedIn = false;
        result.numVoteKicksParticipatedIn_ = 0;
        return this;
      }
      
      public bool HasNumVoteKicksInitiated {
        get { return result.hasNumVoteKicksInitiated; }
      }
      public long NumVoteKicksInitiated {
        get { return result.NumVoteKicksInitiated; }
        set { SetNumVoteKicksInitiated(value); }
      }
      public Builder SetNumVoteKicksInitiated(long value) {
        PrepareBuilder();
        result.hasNumVoteKicksInitiated = true;
        result.numVoteKicksInitiated_ = value;
        return this;
      }
      public Builder ClearNumVoteKicksInitiated() {
        PrepareBuilder();
        result.hasNumVoteKicksInitiated = false;
        result.numVoteKicksInitiated_ = 0;
        return this;
      }
      
      public bool HasNumPublicGamesNoKick {
        get { return result.hasNumPublicGamesNoKick; }
      }
      public long NumPublicGamesNoKick {
        get { return result.NumPublicGamesNoKick; }
        set { SetNumPublicGamesNoKick(value); }
      }
      public Builder SetNumPublicGamesNoKick(long value) {
        PrepareBuilder();
        result.hasNumPublicGamesNoKick = true;
        result.numPublicGamesNoKick_ = value;
        return this;
      }
      public Builder ClearNumPublicGamesNoKick() {
        PrepareBuilder();
        result.hasNumPublicGamesNoKick = false;
        result.numPublicGamesNoKick_ = 0;
        return this;
      }
      
      public bool HasTimesVoteKicked {
        get { return result.hasTimesVoteKicked; }
      }
      public long TimesVoteKicked {
        get { return result.TimesVoteKicked; }
        set { SetTimesVoteKicked(value); }
      }
      public Builder SetTimesVoteKicked(long value) {
        PrepareBuilder();
        result.hasTimesVoteKicked = true;
        result.timesVoteKicked_ = value;
        return this;
      }
      public Builder ClearTimesVoteKicked() {
        PrepareBuilder();
        result.hasTimesVoteKicked = false;
        result.timesVoteKicked_ = 0;
        return this;
      }
      
      public bool HasCreateTime {
        get { return result.hasCreateTime; }
      }
      public uint CreateTime {
        get { return result.CreateTime; }
        set { SetCreateTime(value); }
      }
      public Builder SetCreateTime(uint value) {
        PrepareBuilder();
        result.hasCreateTime = true;
        result.createTime_ = value;
        return this;
      }
      public Builder ClearCreateTime() {
        PrepareBuilder();
        result.hasCreateTime = false;
        result.createTime_ = 0;
        return this;
      }
      
      public bool HasNumGroupsCreatedDeprecated {
        get { return result.hasNumGroupsCreatedDeprecated; }
      }
      public uint NumGroupsCreatedDeprecated {
        get { return result.NumGroupsCreatedDeprecated; }
        set { SetNumGroupsCreatedDeprecated(value); }
      }
      public Builder SetNumGroupsCreatedDeprecated(uint value) {
        PrepareBuilder();
        result.hasNumGroupsCreatedDeprecated = true;
        result.numGroupsCreatedDeprecated_ = value;
        return this;
      }
      public Builder ClearNumGroupsCreatedDeprecated() {
        PrepareBuilder();
        result.hasNumGroupsCreatedDeprecated = false;
        result.numGroupsCreatedDeprecated_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Account.AccountPartition> PartitionsList {
        get { return PrepareBuilder().partitions_; }
      }
      public int PartitionsCount {
        get { return result.PartitionsCount; }
      }
      public global::D3.Account.AccountPartition GetPartitions(int index) {
        return result.GetPartitions(index);
      }
      public Builder SetPartitions(int index, global::D3.Account.AccountPartition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.partitions_[index] = value;
        return this;
      }
      public Builder SetPartitions(int index, global::D3.Account.AccountPartition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.partitions_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPartitions(global::D3.Account.AccountPartition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.partitions_.Add(value);
        return this;
      }
      public Builder AddPartitions(global::D3.Account.AccountPartition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.partitions_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePartitions(scg::IEnumerable<global::D3.Account.AccountPartition> values) {
        PrepareBuilder();
        result.partitions_.Add(values);
        return this;
      }
      public Builder ClearPartitions() {
        PrepareBuilder();
        result.partitions_.Clear();
        return this;
      }
      
      public bool HasDeprecatedSavedAttributesHardcore {
       get { return result.hasDeprecatedSavedAttributesHardcore; }
      }
      public global::D3.AttributeSerializer.SavedAttributes DeprecatedSavedAttributesHardcore {
        get { return result.DeprecatedSavedAttributesHardcore; }
        set { SetDeprecatedSavedAttributesHardcore(value); }
      }
      public Builder SetDeprecatedSavedAttributesHardcore(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeprecatedSavedAttributesHardcore = true;
        result.deprecatedSavedAttributesHardcore_ = value;
        return this;
      }
      public Builder SetDeprecatedSavedAttributesHardcore(global::D3.AttributeSerializer.SavedAttributes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDeprecatedSavedAttributesHardcore = true;
        result.deprecatedSavedAttributesHardcore_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDeprecatedSavedAttributesHardcore(global::D3.AttributeSerializer.SavedAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDeprecatedSavedAttributesHardcore &&
            result.deprecatedSavedAttributesHardcore_ != global::D3.AttributeSerializer.SavedAttributes.DefaultInstance) {
            result.deprecatedSavedAttributesHardcore_ = global::D3.AttributeSerializer.SavedAttributes.CreateBuilder(result.deprecatedSavedAttributesHardcore_).MergeFrom(value).BuildPartial();
        } else {
          result.deprecatedSavedAttributesHardcore_ = value;
        }
        result.hasDeprecatedSavedAttributesHardcore = true;
        return this;
      }
      public Builder ClearDeprecatedSavedAttributesHardcore() {
        PrepareBuilder();
        result.hasDeprecatedSavedAttributesHardcore = false;
        result.deprecatedSavedAttributesHardcore_ = null;
        return this;
      }
      
      public bool HasDeprecatedNormalSharedSavedItems {
       get { return result.hasDeprecatedNormalSharedSavedItems; }
      }
      public global::D3.Items.ItemList DeprecatedNormalSharedSavedItems {
        get { return result.DeprecatedNormalSharedSavedItems; }
        set { SetDeprecatedNormalSharedSavedItems(value); }
      }
      public Builder SetDeprecatedNormalSharedSavedItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeprecatedNormalSharedSavedItems = true;
        result.deprecatedNormalSharedSavedItems_ = value;
        return this;
      }
      public Builder SetDeprecatedNormalSharedSavedItems(global::D3.Items.ItemList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDeprecatedNormalSharedSavedItems = true;
        result.deprecatedNormalSharedSavedItems_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDeprecatedNormalSharedSavedItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDeprecatedNormalSharedSavedItems &&
            result.deprecatedNormalSharedSavedItems_ != global::D3.Items.ItemList.DefaultInstance) {
            result.deprecatedNormalSharedSavedItems_ = global::D3.Items.ItemList.CreateBuilder(result.deprecatedNormalSharedSavedItems_).MergeFrom(value).BuildPartial();
        } else {
          result.deprecatedNormalSharedSavedItems_ = value;
        }
        result.hasDeprecatedNormalSharedSavedItems = true;
        return this;
      }
      public Builder ClearDeprecatedNormalSharedSavedItems() {
        PrepareBuilder();
        result.hasDeprecatedNormalSharedSavedItems = false;
        result.deprecatedNormalSharedSavedItems_ = null;
        return this;
      }
      
      public bool HasDeprecatedHardcoreSharedSavedItems {
       get { return result.hasDeprecatedHardcoreSharedSavedItems; }
      }
      public global::D3.Items.ItemList DeprecatedHardcoreSharedSavedItems {
        get { return result.DeprecatedHardcoreSharedSavedItems; }
        set { SetDeprecatedHardcoreSharedSavedItems(value); }
      }
      public Builder SetDeprecatedHardcoreSharedSavedItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeprecatedHardcoreSharedSavedItems = true;
        result.deprecatedHardcoreSharedSavedItems_ = value;
        return this;
      }
      public Builder SetDeprecatedHardcoreSharedSavedItems(global::D3.Items.ItemList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDeprecatedHardcoreSharedSavedItems = true;
        result.deprecatedHardcoreSharedSavedItems_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDeprecatedHardcoreSharedSavedItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDeprecatedHardcoreSharedSavedItems &&
            result.deprecatedHardcoreSharedSavedItems_ != global::D3.Items.ItemList.DefaultInstance) {
            result.deprecatedHardcoreSharedSavedItems_ = global::D3.Items.ItemList.CreateBuilder(result.deprecatedHardcoreSharedSavedItems_).MergeFrom(value).BuildPartial();
        } else {
          result.deprecatedHardcoreSharedSavedItems_ = value;
        }
        result.hasDeprecatedHardcoreSharedSavedItems = true;
        return this;
      }
      public Builder ClearDeprecatedHardcoreSharedSavedItems() {
        PrepareBuilder();
        result.hasDeprecatedHardcoreSharedSavedItems = false;
        result.deprecatedHardcoreSharedSavedItems_ = null;
        return this;
      }
      
      public bool HasDeprecatedCrafterNormalData {
       get { return result.hasDeprecatedCrafterNormalData; }
      }
      public global::D3.ItemCrafting.CrafterSavedData DeprecatedCrafterNormalData {
        get { return result.DeprecatedCrafterNormalData; }
        set { SetDeprecatedCrafterNormalData(value); }
      }
      public Builder SetDeprecatedCrafterNormalData(global::D3.ItemCrafting.CrafterSavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeprecatedCrafterNormalData = true;
        result.deprecatedCrafterNormalData_ = value;
        return this;
      }
      public Builder SetDeprecatedCrafterNormalData(global::D3.ItemCrafting.CrafterSavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDeprecatedCrafterNormalData = true;
        result.deprecatedCrafterNormalData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDeprecatedCrafterNormalData(global::D3.ItemCrafting.CrafterSavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDeprecatedCrafterNormalData &&
            result.deprecatedCrafterNormalData_ != global::D3.ItemCrafting.CrafterSavedData.DefaultInstance) {
            result.deprecatedCrafterNormalData_ = global::D3.ItemCrafting.CrafterSavedData.CreateBuilder(result.deprecatedCrafterNormalData_).MergeFrom(value).BuildPartial();
        } else {
          result.deprecatedCrafterNormalData_ = value;
        }
        result.hasDeprecatedCrafterNormalData = true;
        return this;
      }
      public Builder ClearDeprecatedCrafterNormalData() {
        PrepareBuilder();
        result.hasDeprecatedCrafterNormalData = false;
        result.deprecatedCrafterNormalData_ = null;
        return this;
      }
      
      public bool HasDeprecatedCrafterHardcoreData {
       get { return result.hasDeprecatedCrafterHardcoreData; }
      }
      public global::D3.ItemCrafting.CrafterSavedData DeprecatedCrafterHardcoreData {
        get { return result.DeprecatedCrafterHardcoreData; }
        set { SetDeprecatedCrafterHardcoreData(value); }
      }
      public Builder SetDeprecatedCrafterHardcoreData(global::D3.ItemCrafting.CrafterSavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeprecatedCrafterHardcoreData = true;
        result.deprecatedCrafterHardcoreData_ = value;
        return this;
      }
      public Builder SetDeprecatedCrafterHardcoreData(global::D3.ItemCrafting.CrafterSavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDeprecatedCrafterHardcoreData = true;
        result.deprecatedCrafterHardcoreData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDeprecatedCrafterHardcoreData(global::D3.ItemCrafting.CrafterSavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDeprecatedCrafterHardcoreData &&
            result.deprecatedCrafterHardcoreData_ != global::D3.ItemCrafting.CrafterSavedData.DefaultInstance) {
            result.deprecatedCrafterHardcoreData_ = global::D3.ItemCrafting.CrafterSavedData.CreateBuilder(result.deprecatedCrafterHardcoreData_).MergeFrom(value).BuildPartial();
        } else {
          result.deprecatedCrafterHardcoreData_ = value;
        }
        result.hasDeprecatedCrafterHardcoreData = true;
        return this;
      }
      public Builder ClearDeprecatedCrafterHardcoreData() {
        PrepareBuilder();
        result.hasDeprecatedCrafterHardcoreData = false;
        result.deprecatedCrafterHardcoreData_ = null;
        return this;
      }
      
      public bool HasDeprecatedGoldIdNormal {
       get { return result.hasDeprecatedGoldIdNormal; }
      }
      public global::D3.OnlineService.EntityId DeprecatedGoldIdNormal {
        get { return result.DeprecatedGoldIdNormal; }
        set { SetDeprecatedGoldIdNormal(value); }
      }
      public Builder SetDeprecatedGoldIdNormal(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeprecatedGoldIdNormal = true;
        result.deprecatedGoldIdNormal_ = value;
        return this;
      }
      public Builder SetDeprecatedGoldIdNormal(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDeprecatedGoldIdNormal = true;
        result.deprecatedGoldIdNormal_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDeprecatedGoldIdNormal(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDeprecatedGoldIdNormal &&
            result.deprecatedGoldIdNormal_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.deprecatedGoldIdNormal_ = global::D3.OnlineService.EntityId.CreateBuilder(result.deprecatedGoldIdNormal_).MergeFrom(value).BuildPartial();
        } else {
          result.deprecatedGoldIdNormal_ = value;
        }
        result.hasDeprecatedGoldIdNormal = true;
        return this;
      }
      public Builder ClearDeprecatedGoldIdNormal() {
        PrepareBuilder();
        result.hasDeprecatedGoldIdNormal = false;
        result.deprecatedGoldIdNormal_ = null;
        return this;
      }
      
      public bool HasDeprecatedGoldIdHardcore {
       get { return result.hasDeprecatedGoldIdHardcore; }
      }
      public global::D3.OnlineService.EntityId DeprecatedGoldIdHardcore {
        get { return result.DeprecatedGoldIdHardcore; }
        set { SetDeprecatedGoldIdHardcore(value); }
      }
      public Builder SetDeprecatedGoldIdHardcore(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeprecatedGoldIdHardcore = true;
        result.deprecatedGoldIdHardcore_ = value;
        return this;
      }
      public Builder SetDeprecatedGoldIdHardcore(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDeprecatedGoldIdHardcore = true;
        result.deprecatedGoldIdHardcore_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDeprecatedGoldIdHardcore(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDeprecatedGoldIdHardcore &&
            result.deprecatedGoldIdHardcore_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.deprecatedGoldIdHardcore_ = global::D3.OnlineService.EntityId.CreateBuilder(result.deprecatedGoldIdHardcore_).MergeFrom(value).BuildPartial();
        } else {
          result.deprecatedGoldIdHardcore_ = value;
        }
        result.hasDeprecatedGoldIdHardcore = true;
        return this;
      }
      public Builder ClearDeprecatedGoldIdHardcore() {
        PrepareBuilder();
        result.hasDeprecatedGoldIdHardcore = false;
        result.deprecatedGoldIdHardcore_ = null;
        return this;
      }
      
      public bool HasDeprecatedStashIconsNormal {
        get { return result.hasDeprecatedStashIconsNormal; }
      }
      public pb::ByteString DeprecatedStashIconsNormal {
        get { return result.DeprecatedStashIconsNormal; }
        set { SetDeprecatedStashIconsNormal(value); }
      }
      public Builder SetDeprecatedStashIconsNormal(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeprecatedStashIconsNormal = true;
        result.deprecatedStashIconsNormal_ = value;
        return this;
      }
      public Builder ClearDeprecatedStashIconsNormal() {
        PrepareBuilder();
        result.hasDeprecatedStashIconsNormal = false;
        result.deprecatedStashIconsNormal_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasDeprecatedAcceptedLicenseBits {
        get { return result.hasDeprecatedAcceptedLicenseBits; }
      }
      public ulong DeprecatedAcceptedLicenseBits {
        get { return result.DeprecatedAcceptedLicenseBits; }
        set { SetDeprecatedAcceptedLicenseBits(value); }
      }
      public Builder SetDeprecatedAcceptedLicenseBits(ulong value) {
        PrepareBuilder();
        result.hasDeprecatedAcceptedLicenseBits = true;
        result.deprecatedAcceptedLicenseBits_ = value;
        return this;
      }
      public Builder ClearDeprecatedAcceptedLicenseBits() {
        PrepareBuilder();
        result.hasDeprecatedAcceptedLicenseBits = false;
        result.deprecatedAcceptedLicenseBits_ = 0UL;
        return this;
      }
      
      public bool HasDeprecatedStashIconsHardcore {
        get { return result.hasDeprecatedStashIconsHardcore; }
      }
      public pb::ByteString DeprecatedStashIconsHardcore {
        get { return result.DeprecatedStashIconsHardcore; }
        set { SetDeprecatedStashIconsHardcore(value); }
      }
      public Builder SetDeprecatedStashIconsHardcore(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeprecatedStashIconsHardcore = true;
        result.deprecatedStashIconsHardcore_ = value;
        return this;
      }
      public Builder ClearDeprecatedStashIconsHardcore() {
        PrepareBuilder();
        result.hasDeprecatedStashIconsHardcore = false;
        result.deprecatedStashIconsHardcore_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasConsoleData {
       get { return result.hasConsoleData; }
      }
      public global::D3.Account.ConsoleData ConsoleData {
        get { return result.ConsoleData; }
        set { SetConsoleData(value); }
      }
      public Builder SetConsoleData(global::D3.Account.ConsoleData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConsoleData = true;
        result.consoleData_ = value;
        return this;
      }
      public Builder SetConsoleData(global::D3.Account.ConsoleData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasConsoleData = true;
        result.consoleData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeConsoleData(global::D3.Account.ConsoleData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasConsoleData &&
            result.consoleData_ != global::D3.Account.ConsoleData.DefaultInstance) {
            result.consoleData_ = global::D3.Account.ConsoleData.CreateBuilder(result.consoleData_).MergeFrom(value).BuildPartial();
        } else {
          result.consoleData_ = value;
        }
        result.hasConsoleData = true;
        return this;
      }
      public Builder ClearConsoleData() {
        PrepareBuilder();
        result.hasConsoleData = false;
        result.consoleData_ = null;
        return this;
      }
      
      public bool HasAccountWideTransmogData {
       get { return result.hasAccountWideTransmogData; }
      }
      public global::D3.GameBalance.BitPackedGbidArray AccountWideTransmogData {
        get { return result.AccountWideTransmogData; }
        set { SetAccountWideTransmogData(value); }
      }
      public Builder SetAccountWideTransmogData(global::D3.GameBalance.BitPackedGbidArray value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountWideTransmogData = true;
        result.accountWideTransmogData_ = value;
        return this;
      }
      public Builder SetAccountWideTransmogData(global::D3.GameBalance.BitPackedGbidArray.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountWideTransmogData = true;
        result.accountWideTransmogData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountWideTransmogData(global::D3.GameBalance.BitPackedGbidArray value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountWideTransmogData &&
            result.accountWideTransmogData_ != global::D3.GameBalance.BitPackedGbidArray.DefaultInstance) {
            result.accountWideTransmogData_ = global::D3.GameBalance.BitPackedGbidArray.CreateBuilder(result.accountWideTransmogData_).MergeFrom(value).BuildPartial();
        } else {
          result.accountWideTransmogData_ = value;
        }
        result.hasAccountWideTransmogData = true;
        return this;
      }
      public Builder ClearAccountWideTransmogData() {
        PrepareBuilder();
        result.hasAccountWideTransmogData = false;
        result.accountWideTransmogData_ = null;
        return this;
      }
      
      public bool HasAccountWideCosmeticItemData {
       get { return result.hasAccountWideCosmeticItemData; }
      }
      public global::D3.CosmeticItems.CosmeticItemSavedData AccountWideCosmeticItemData {
        get { return result.AccountWideCosmeticItemData; }
        set { SetAccountWideCosmeticItemData(value); }
      }
      public Builder SetAccountWideCosmeticItemData(global::D3.CosmeticItems.CosmeticItemSavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountWideCosmeticItemData = true;
        result.accountWideCosmeticItemData_ = value;
        return this;
      }
      public Builder SetAccountWideCosmeticItemData(global::D3.CosmeticItems.CosmeticItemSavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountWideCosmeticItemData = true;
        result.accountWideCosmeticItemData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountWideCosmeticItemData(global::D3.CosmeticItems.CosmeticItemSavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountWideCosmeticItemData &&
            result.accountWideCosmeticItemData_ != global::D3.CosmeticItems.CosmeticItemSavedData.DefaultInstance) {
            result.accountWideCosmeticItemData_ = global::D3.CosmeticItems.CosmeticItemSavedData.CreateBuilder(result.accountWideCosmeticItemData_).MergeFrom(value).BuildPartial();
        } else {
          result.accountWideCosmeticItemData_ = value;
        }
        result.hasAccountWideCosmeticItemData = true;
        return this;
      }
      public Builder ClearAccountWideCosmeticItemData() {
        PrepareBuilder();
        result.hasAccountWideCosmeticItemData = false;
        result.accountWideCosmeticItemData_ = null;
        return this;
      }
      
      public bool HasAccountWideCurrencyData {
       get { return result.hasAccountWideCurrencyData; }
      }
      public global::D3.Items.CurrencySavedData AccountWideCurrencyData {
        get { return result.AccountWideCurrencyData; }
        set { SetAccountWideCurrencyData(value); }
      }
      public Builder SetAccountWideCurrencyData(global::D3.Items.CurrencySavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountWideCurrencyData = true;
        result.accountWideCurrencyData_ = value;
        return this;
      }
      public Builder SetAccountWideCurrencyData(global::D3.Items.CurrencySavedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountWideCurrencyData = true;
        result.accountWideCurrencyData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountWideCurrencyData(global::D3.Items.CurrencySavedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountWideCurrencyData &&
            result.accountWideCurrencyData_ != global::D3.Items.CurrencySavedData.DefaultInstance) {
            result.accountWideCurrencyData_ = global::D3.Items.CurrencySavedData.CreateBuilder(result.accountWideCurrencyData_).MergeFrom(value).BuildPartial();
        } else {
          result.accountWideCurrencyData_ = value;
        }
        result.hasAccountWideCurrencyData = true;
        return this;
      }
      public Builder ClearAccountWideCurrencyData() {
        PrepareBuilder();
        result.hasAccountWideCurrencyData = false;
        result.accountWideCurrencyData_ = null;
        return this;
      }
      
      public bool HasDeliveredRewards {
       get { return result.hasDeliveredRewards; }
      }
      public global::D3.Account.DeliveredRewards DeliveredRewards {
        get { return result.DeliveredRewards; }
        set { SetDeliveredRewards(value); }
      }
      public Builder SetDeliveredRewards(global::D3.Account.DeliveredRewards value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeliveredRewards = true;
        result.deliveredRewards_ = value;
        return this;
      }
      public Builder SetDeliveredRewards(global::D3.Account.DeliveredRewards.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDeliveredRewards = true;
        result.deliveredRewards_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDeliveredRewards(global::D3.Account.DeliveredRewards value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDeliveredRewards &&
            result.deliveredRewards_ != global::D3.Account.DeliveredRewards.DefaultInstance) {
            result.deliveredRewards_ = global::D3.Account.DeliveredRewards.CreateBuilder(result.deliveredRewards_).MergeFrom(value).BuildPartial();
        } else {
          result.deliveredRewards_ = value;
        }
        result.hasDeliveredRewards = true;
        return this;
      }
      public Builder ClearDeliveredRewards() {
        PrepareBuilder();
        result.hasDeliveredRewards = false;
        result.deliveredRewards_ = null;
        return this;
      }
      
      public bool HasConsumables {
       get { return result.hasConsumables; }
      }
      public global::D3.Account.Consumables Consumables {
        get { return result.Consumables; }
        set { SetConsumables(value); }
      }
      public Builder SetConsumables(global::D3.Account.Consumables value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConsumables = true;
        result.consumables_ = value;
        return this;
      }
      public Builder SetConsumables(global::D3.Account.Consumables.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasConsumables = true;
        result.consumables_ = builderForValue.Build();
        return this;
      }
      public Builder MergeConsumables(global::D3.Account.Consumables value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasConsumables &&
            result.consumables_ != global::D3.Account.Consumables.DefaultInstance) {
            result.consumables_ = global::D3.Account.Consumables.CreateBuilder(result.consumables_).MergeFrom(value).BuildPartial();
        } else {
          result.consumables_ = value;
        }
        result.hasConsumables = true;
        return this;
      }
      public Builder ClearConsumables() {
        PrepareBuilder();
        result.hasConsumables = false;
        result.consumables_ = null;
        return this;
      }
    }
    static SavedDefinition() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AvengerVictim : pb::GeneratedMessage<AvengerVictim, AvengerVictim.Builder> {
    private AvengerVictim() { }
    private static readonly AvengerVictim defaultInstance = new AvengerVictim().MakeReadOnly();
    private static readonly string[] _avengerVictimFieldNames = new string[] { "gbid_class", "is_female" };
    private static readonly uint[] _avengerVictimFieldTags = new uint[] { 8, 16 };
    public static AvengerVictim DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AvengerVictim DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AvengerVictim ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_AvengerVictim__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AvengerVictim, AvengerVictim.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_AvengerVictim__FieldAccessorTable; }
    }
    
    public const int GbidClassFieldNumber = 1;
    private bool hasGbidClass;
    private uint gbidClass_;
    public bool HasGbidClass {
      get { return hasGbidClass; }
    }
    public uint GbidClass {
      get { return gbidClass_; }
    }
    
    public const int IsFemaleFieldNumber = 2;
    private bool hasIsFemale;
    private bool isFemale_;
    public bool HasIsFemale {
      get { return hasIsFemale; }
    }
    public bool IsFemale {
      get { return isFemale_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _avengerVictimFieldNames;
      if (hasGbidClass) {
        output.WriteUInt32(1, field_names[0], GbidClass);
      }
      if (hasIsFemale) {
        output.WriteBool(2, field_names[1], IsFemale);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGbidClass) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, GbidClass);
        }
        if (hasIsFemale) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IsFemale);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AvengerVictim ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AvengerVictim ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AvengerVictim ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AvengerVictim ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AvengerVictim ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AvengerVictim ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AvengerVictim ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AvengerVictim ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AvengerVictim ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AvengerVictim ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AvengerVictim MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AvengerVictim prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AvengerVictim, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AvengerVictim cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AvengerVictim result;
      
      private AvengerVictim PrepareBuilder() {
        if (resultIsReadOnly) {
          AvengerVictim original = result;
          result = new AvengerVictim();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AvengerVictim MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.AvengerVictim.Descriptor; }
      }
      
      public override AvengerVictim DefaultInstanceForType {
        get { return global::D3.Account.AvengerVictim.DefaultInstance; }
      }
      
      public override AvengerVictim BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AvengerVictim) {
          return MergeFrom((AvengerVictim) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AvengerVictim other) {
        if (other == global::D3.Account.AvengerVictim.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGbidClass) {
          GbidClass = other.GbidClass;
        }
        if (other.HasIsFemale) {
          IsFemale = other.IsFemale;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_avengerVictimFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _avengerVictimFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGbidClass = input.ReadUInt32(ref result.gbidClass_);
              break;
            }
            case 16: {
              result.hasIsFemale = input.ReadBool(ref result.isFemale_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGbidClass {
        get { return result.hasGbidClass; }
      }
      public uint GbidClass {
        get { return result.GbidClass; }
        set { SetGbidClass(value); }
      }
      public Builder SetGbidClass(uint value) {
        PrepareBuilder();
        result.hasGbidClass = true;
        result.gbidClass_ = value;
        return this;
      }
      public Builder ClearGbidClass() {
        PrepareBuilder();
        result.hasGbidClass = false;
        result.gbidClass_ = 0;
        return this;
      }
      
      public bool HasIsFemale {
        get { return result.hasIsFemale; }
      }
      public bool IsFemale {
        get { return result.IsFemale; }
        set { SetIsFemale(value); }
      }
      public Builder SetIsFemale(bool value) {
        PrepareBuilder();
        result.hasIsFemale = true;
        result.isFemale_ = value;
        return this;
      }
      public Builder ClearIsFemale() {
        PrepareBuilder();
        result.hasIsFemale = false;
        result.isFemale_ = false;
        return this;
      }
    }
    static AvengerVictim() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Avenger : pb::GeneratedMessage<Avenger, Avenger.Builder> {
    private Avenger() { }
    private static readonly Avenger defaultInstance = new Avenger().MakeReadOnly();
    private static readonly string[] _avengerFieldNames = new string[] { "affix_bucket", "avenger_name", "deprecated_monster_sno", "deprecated_player_kills", "deprecated_resolved", "deprecated_result", "sent_from", "victims" };
    private static readonly uint[] _avengerFieldTags = new uint[] { 56, 18, 24, 8, 32, 40, 48, 66 };
    public static Avenger DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Avenger DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Avenger ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_Avenger__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Avenger, Avenger.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_Avenger__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum State {
        ALIVE = 0,
        KILLED_PLAYER = 1,
        KILLED = 2,
      }
      
    }
    #endregion
    
    public const int DeprecatedPlayerKillsFieldNumber = 1;
    private bool hasDeprecatedPlayerKills;
    private uint deprecatedPlayerKills_ = 1;
    public bool HasDeprecatedPlayerKills {
      get { return hasDeprecatedPlayerKills; }
    }
    public uint DeprecatedPlayerKills {
      get { return deprecatedPlayerKills_; }
    }
    
    public const int AvengerNameFieldNumber = 2;
    private bool hasAvengerName;
    private string avengerName_ = "Avenger";
    public bool HasAvengerName {
      get { return hasAvengerName; }
    }
    public string AvengerName {
      get { return avengerName_; }
    }
    
    public const int DeprecatedMonsterSnoFieldNumber = 3;
    private bool hasDeprecatedMonsterSno;
    private int deprecatedMonsterSno_ = -1;
    public bool HasDeprecatedMonsterSno {
      get { return hasDeprecatedMonsterSno; }
    }
    public int DeprecatedMonsterSno {
      get { return deprecatedMonsterSno_; }
    }
    
    public const int DeprecatedResolvedFieldNumber = 4;
    private bool hasDeprecatedResolved;
    private bool deprecatedResolved_;
    public bool HasDeprecatedResolved {
      get { return hasDeprecatedResolved; }
    }
    public bool DeprecatedResolved {
      get { return deprecatedResolved_; }
    }
    
    public const int DeprecatedResultFieldNumber = 5;
    private bool hasDeprecatedResult;
    private global::D3.Account.Avenger.Types.State deprecatedResult_ = global::D3.Account.Avenger.Types.State.ALIVE;
    public bool HasDeprecatedResult {
      get { return hasDeprecatedResult; }
    }
    public global::D3.Account.Avenger.Types.State DeprecatedResult {
      get { return deprecatedResult_; }
    }
    
    public const int SentFromFieldNumber = 6;
    private bool hasSentFrom;
    private ulong sentFrom_;
    public bool HasSentFrom {
      get { return hasSentFrom; }
    }
    public ulong SentFrom {
      get { return sentFrom_; }
    }
    
    public const int AffixBucketFieldNumber = 7;
    private bool hasAffixBucket;
    private int affixBucket_;
    public bool HasAffixBucket {
      get { return hasAffixBucket; }
    }
    public int AffixBucket {
      get { return affixBucket_; }
    }
    
    public const int VictimsFieldNumber = 8;
    private pbc::PopsicleList<global::D3.Account.AvengerVictim> victims_ = new pbc::PopsicleList<global::D3.Account.AvengerVictim>();
    public scg::IList<global::D3.Account.AvengerVictim> VictimsList {
      get { return victims_; }
    }
    public int VictimsCount {
      get { return victims_.Count; }
    }
    public global::D3.Account.AvengerVictim GetVictims(int index) {
      return victims_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAvengerName) return false;
        if (!hasSentFrom) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _avengerFieldNames;
      if (hasDeprecatedPlayerKills) {
        output.WriteUInt32(1, field_names[3], DeprecatedPlayerKills);
      }
      if (hasAvengerName) {
        output.WriteString(2, field_names[1], AvengerName);
      }
      if (hasDeprecatedMonsterSno) {
        output.WriteSInt32(3, field_names[2], DeprecatedMonsterSno);
      }
      if (hasDeprecatedResolved) {
        output.WriteBool(4, field_names[4], DeprecatedResolved);
      }
      if (hasDeprecatedResult) {
        output.WriteEnum(5, field_names[5], (int) DeprecatedResult, DeprecatedResult);
      }
      if (hasSentFrom) {
        output.WriteUInt64(6, field_names[6], SentFrom);
      }
      if (hasAffixBucket) {
        output.WriteInt32(7, field_names[0], AffixBucket);
      }
      if (victims_.Count > 0) {
        output.WriteMessageArray(8, field_names[7], victims_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDeprecatedPlayerKills) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, DeprecatedPlayerKills);
        }
        if (hasAvengerName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, AvengerName);
        }
        if (hasDeprecatedMonsterSno) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, DeprecatedMonsterSno);
        }
        if (hasDeprecatedResolved) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, DeprecatedResolved);
        }
        if (hasDeprecatedResult) {
          size += pb::CodedOutputStream.ComputeEnumSize(5, (int) DeprecatedResult);
        }
        if (hasSentFrom) {
          size += pb::CodedOutputStream.ComputeUInt64Size(6, SentFrom);
        }
        if (hasAffixBucket) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, AffixBucket);
        }
        foreach (global::D3.Account.AvengerVictim element in VictimsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Avenger ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Avenger ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Avenger ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Avenger ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Avenger ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Avenger ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Avenger ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Avenger ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Avenger ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Avenger ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Avenger MakeReadOnly() {
      victims_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Avenger prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Avenger, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Avenger cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Avenger result;
      
      private Avenger PrepareBuilder() {
        if (resultIsReadOnly) {
          Avenger original = result;
          result = new Avenger();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Avenger MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.Avenger.Descriptor; }
      }
      
      public override Avenger DefaultInstanceForType {
        get { return global::D3.Account.Avenger.DefaultInstance; }
      }
      
      public override Avenger BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Avenger) {
          return MergeFrom((Avenger) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Avenger other) {
        if (other == global::D3.Account.Avenger.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDeprecatedPlayerKills) {
          DeprecatedPlayerKills = other.DeprecatedPlayerKills;
        }
        if (other.HasAvengerName) {
          AvengerName = other.AvengerName;
        }
        if (other.HasDeprecatedMonsterSno) {
          DeprecatedMonsterSno = other.DeprecatedMonsterSno;
        }
        if (other.HasDeprecatedResolved) {
          DeprecatedResolved = other.DeprecatedResolved;
        }
        if (other.HasDeprecatedResult) {
          DeprecatedResult = other.DeprecatedResult;
        }
        if (other.HasSentFrom) {
          SentFrom = other.SentFrom;
        }
        if (other.HasAffixBucket) {
          AffixBucket = other.AffixBucket;
        }
        if (other.victims_.Count != 0) {
          result.victims_.Add(other.victims_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_avengerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _avengerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDeprecatedPlayerKills = input.ReadUInt32(ref result.deprecatedPlayerKills_);
              break;
            }
            case 18: {
              result.hasAvengerName = input.ReadString(ref result.avengerName_);
              break;
            }
            case 24: {
              result.hasDeprecatedMonsterSno = input.ReadSInt32(ref result.deprecatedMonsterSno_);
              break;
            }
            case 32: {
              result.hasDeprecatedResolved = input.ReadBool(ref result.deprecatedResolved_);
              break;
            }
            case 40: {
              object unknown;
              if(input.ReadEnum(ref result.deprecatedResult_, out unknown)) {
                result.hasDeprecatedResult = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(5, (ulong)(int)unknown);
              }
              break;
            }
            case 48: {
              result.hasSentFrom = input.ReadUInt64(ref result.sentFrom_);
              break;
            }
            case 56: {
              result.hasAffixBucket = input.ReadInt32(ref result.affixBucket_);
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.victims_, global::D3.Account.AvengerVictim.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDeprecatedPlayerKills {
        get { return result.hasDeprecatedPlayerKills; }
      }
      public uint DeprecatedPlayerKills {
        get { return result.DeprecatedPlayerKills; }
        set { SetDeprecatedPlayerKills(value); }
      }
      public Builder SetDeprecatedPlayerKills(uint value) {
        PrepareBuilder();
        result.hasDeprecatedPlayerKills = true;
        result.deprecatedPlayerKills_ = value;
        return this;
      }
      public Builder ClearDeprecatedPlayerKills() {
        PrepareBuilder();
        result.hasDeprecatedPlayerKills = false;
        result.deprecatedPlayerKills_ = 1;
        return this;
      }
      
      public bool HasAvengerName {
        get { return result.hasAvengerName; }
      }
      public string AvengerName {
        get { return result.AvengerName; }
        set { SetAvengerName(value); }
      }
      public Builder SetAvengerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAvengerName = true;
        result.avengerName_ = value;
        return this;
      }
      public Builder ClearAvengerName() {
        PrepareBuilder();
        result.hasAvengerName = false;
        result.avengerName_ = "Avenger";
        return this;
      }
      
      public bool HasDeprecatedMonsterSno {
        get { return result.hasDeprecatedMonsterSno; }
      }
      public int DeprecatedMonsterSno {
        get { return result.DeprecatedMonsterSno; }
        set { SetDeprecatedMonsterSno(value); }
      }
      public Builder SetDeprecatedMonsterSno(int value) {
        PrepareBuilder();
        result.hasDeprecatedMonsterSno = true;
        result.deprecatedMonsterSno_ = value;
        return this;
      }
      public Builder ClearDeprecatedMonsterSno() {
        PrepareBuilder();
        result.hasDeprecatedMonsterSno = false;
        result.deprecatedMonsterSno_ = -1;
        return this;
      }
      
      public bool HasDeprecatedResolved {
        get { return result.hasDeprecatedResolved; }
      }
      public bool DeprecatedResolved {
        get { return result.DeprecatedResolved; }
        set { SetDeprecatedResolved(value); }
      }
      public Builder SetDeprecatedResolved(bool value) {
        PrepareBuilder();
        result.hasDeprecatedResolved = true;
        result.deprecatedResolved_ = value;
        return this;
      }
      public Builder ClearDeprecatedResolved() {
        PrepareBuilder();
        result.hasDeprecatedResolved = false;
        result.deprecatedResolved_ = false;
        return this;
      }
      
      public bool HasDeprecatedResult {
       get { return result.hasDeprecatedResult; }
      }
      public global::D3.Account.Avenger.Types.State DeprecatedResult {
        get { return result.DeprecatedResult; }
        set { SetDeprecatedResult(value); }
      }
      public Builder SetDeprecatedResult(global::D3.Account.Avenger.Types.State value) {
        PrepareBuilder();
        result.hasDeprecatedResult = true;
        result.deprecatedResult_ = value;
        return this;
      }
      public Builder ClearDeprecatedResult() {
        PrepareBuilder();
        result.hasDeprecatedResult = false;
        result.deprecatedResult_ = global::D3.Account.Avenger.Types.State.ALIVE;
        return this;
      }
      
      public bool HasSentFrom {
        get { return result.hasSentFrom; }
      }
      public ulong SentFrom {
        get { return result.SentFrom; }
        set { SetSentFrom(value); }
      }
      public Builder SetSentFrom(ulong value) {
        PrepareBuilder();
        result.hasSentFrom = true;
        result.sentFrom_ = value;
        return this;
      }
      public Builder ClearSentFrom() {
        PrepareBuilder();
        result.hasSentFrom = false;
        result.sentFrom_ = 0UL;
        return this;
      }
      
      public bool HasAffixBucket {
        get { return result.hasAffixBucket; }
      }
      public int AffixBucket {
        get { return result.AffixBucket; }
        set { SetAffixBucket(value); }
      }
      public Builder SetAffixBucket(int value) {
        PrepareBuilder();
        result.hasAffixBucket = true;
        result.affixBucket_ = value;
        return this;
      }
      public Builder ClearAffixBucket() {
        PrepareBuilder();
        result.hasAffixBucket = false;
        result.affixBucket_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Account.AvengerVictim> VictimsList {
        get { return PrepareBuilder().victims_; }
      }
      public int VictimsCount {
        get { return result.VictimsCount; }
      }
      public global::D3.Account.AvengerVictim GetVictims(int index) {
        return result.GetVictims(index);
      }
      public Builder SetVictims(int index, global::D3.Account.AvengerVictim value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.victims_[index] = value;
        return this;
      }
      public Builder SetVictims(int index, global::D3.Account.AvengerVictim.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.victims_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddVictims(global::D3.Account.AvengerVictim value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.victims_.Add(value);
        return this;
      }
      public Builder AddVictims(global::D3.Account.AvengerVictim.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.victims_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeVictims(scg::IEnumerable<global::D3.Account.AvengerVictim> values) {
        PrepareBuilder();
        result.victims_.Add(values);
        return this;
      }
      public Builder ClearVictims() {
        PrepareBuilder();
        result.victims_.Clear();
        return this;
      }
    }
    static Avenger() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AvengerData : pb::GeneratedMessage<AvengerData, AvengerData.Builder> {
    private AvengerData() { }
    private static readonly AvengerData defaultInstance = new AvengerData().MakeReadOnly();
    private static readonly string[] _avengerDataFieldNames = new string[] { "avenger_friends", "avenger_solo", "deprecated_avenger_hardcore" };
    private static readonly uint[] _avengerDataFieldTags = new uint[] { 26, 18, 10 };
    public static AvengerData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AvengerData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AvengerData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_AvengerData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AvengerData, AvengerData.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_AvengerData__FieldAccessorTable; }
    }
    
    public const int DeprecatedAvengerHardcoreFieldNumber = 1;
    private bool hasDeprecatedAvengerHardcore;
    private global::D3.Account.Avenger deprecatedAvengerHardcore_;
    public bool HasDeprecatedAvengerHardcore {
      get { return hasDeprecatedAvengerHardcore; }
    }
    public global::D3.Account.Avenger DeprecatedAvengerHardcore {
      get { return deprecatedAvengerHardcore_ ?? global::D3.Account.Avenger.DefaultInstance; }
    }
    
    public const int AvengerSoloFieldNumber = 2;
    private bool hasAvengerSolo;
    private global::D3.Account.Avenger avengerSolo_;
    public bool HasAvengerSolo {
      get { return hasAvengerSolo; }
    }
    public global::D3.Account.Avenger AvengerSolo {
      get { return avengerSolo_ ?? global::D3.Account.Avenger.DefaultInstance; }
    }
    
    public const int AvengerFriendsFieldNumber = 3;
    private bool hasAvengerFriends;
    private global::D3.Account.Avenger avengerFriends_;
    public bool HasAvengerFriends {
      get { return hasAvengerFriends; }
    }
    public global::D3.Account.Avenger AvengerFriends {
      get { return avengerFriends_ ?? global::D3.Account.Avenger.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasDeprecatedAvengerHardcore) {
          if (!DeprecatedAvengerHardcore.IsInitialized) return false;
        }
        if (HasAvengerSolo) {
          if (!AvengerSolo.IsInitialized) return false;
        }
        if (HasAvengerFriends) {
          if (!AvengerFriends.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _avengerDataFieldNames;
      if (hasDeprecatedAvengerHardcore) {
        output.WriteMessage(1, field_names[2], DeprecatedAvengerHardcore);
      }
      if (hasAvengerSolo) {
        output.WriteMessage(2, field_names[1], AvengerSolo);
      }
      if (hasAvengerFriends) {
        output.WriteMessage(3, field_names[0], AvengerFriends);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDeprecatedAvengerHardcore) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, DeprecatedAvengerHardcore);
        }
        if (hasAvengerSolo) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, AvengerSolo);
        }
        if (hasAvengerFriends) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, AvengerFriends);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AvengerData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AvengerData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AvengerData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AvengerData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AvengerData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AvengerData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AvengerData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AvengerData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AvengerData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AvengerData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AvengerData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AvengerData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AvengerData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AvengerData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AvengerData result;
      
      private AvengerData PrepareBuilder() {
        if (resultIsReadOnly) {
          AvengerData original = result;
          result = new AvengerData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AvengerData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.AvengerData.Descriptor; }
      }
      
      public override AvengerData DefaultInstanceForType {
        get { return global::D3.Account.AvengerData.DefaultInstance; }
      }
      
      public override AvengerData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AvengerData) {
          return MergeFrom((AvengerData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AvengerData other) {
        if (other == global::D3.Account.AvengerData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDeprecatedAvengerHardcore) {
          MergeDeprecatedAvengerHardcore(other.DeprecatedAvengerHardcore);
        }
        if (other.HasAvengerSolo) {
          MergeAvengerSolo(other.AvengerSolo);
        }
        if (other.HasAvengerFriends) {
          MergeAvengerFriends(other.AvengerFriends);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_avengerDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _avengerDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.Account.Avenger.Builder subBuilder = global::D3.Account.Avenger.CreateBuilder();
              if (result.hasDeprecatedAvengerHardcore) {
                subBuilder.MergeFrom(DeprecatedAvengerHardcore);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DeprecatedAvengerHardcore = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.Account.Avenger.Builder subBuilder = global::D3.Account.Avenger.CreateBuilder();
              if (result.hasAvengerSolo) {
                subBuilder.MergeFrom(AvengerSolo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AvengerSolo = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.Account.Avenger.Builder subBuilder = global::D3.Account.Avenger.CreateBuilder();
              if (result.hasAvengerFriends) {
                subBuilder.MergeFrom(AvengerFriends);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AvengerFriends = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDeprecatedAvengerHardcore {
       get { return result.hasDeprecatedAvengerHardcore; }
      }
      public global::D3.Account.Avenger DeprecatedAvengerHardcore {
        get { return result.DeprecatedAvengerHardcore; }
        set { SetDeprecatedAvengerHardcore(value); }
      }
      public Builder SetDeprecatedAvengerHardcore(global::D3.Account.Avenger value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeprecatedAvengerHardcore = true;
        result.deprecatedAvengerHardcore_ = value;
        return this;
      }
      public Builder SetDeprecatedAvengerHardcore(global::D3.Account.Avenger.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDeprecatedAvengerHardcore = true;
        result.deprecatedAvengerHardcore_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDeprecatedAvengerHardcore(global::D3.Account.Avenger value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDeprecatedAvengerHardcore &&
            result.deprecatedAvengerHardcore_ != global::D3.Account.Avenger.DefaultInstance) {
            result.deprecatedAvengerHardcore_ = global::D3.Account.Avenger.CreateBuilder(result.deprecatedAvengerHardcore_).MergeFrom(value).BuildPartial();
        } else {
          result.deprecatedAvengerHardcore_ = value;
        }
        result.hasDeprecatedAvengerHardcore = true;
        return this;
      }
      public Builder ClearDeprecatedAvengerHardcore() {
        PrepareBuilder();
        result.hasDeprecatedAvengerHardcore = false;
        result.deprecatedAvengerHardcore_ = null;
        return this;
      }
      
      public bool HasAvengerSolo {
       get { return result.hasAvengerSolo; }
      }
      public global::D3.Account.Avenger AvengerSolo {
        get { return result.AvengerSolo; }
        set { SetAvengerSolo(value); }
      }
      public Builder SetAvengerSolo(global::D3.Account.Avenger value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAvengerSolo = true;
        result.avengerSolo_ = value;
        return this;
      }
      public Builder SetAvengerSolo(global::D3.Account.Avenger.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAvengerSolo = true;
        result.avengerSolo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAvengerSolo(global::D3.Account.Avenger value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAvengerSolo &&
            result.avengerSolo_ != global::D3.Account.Avenger.DefaultInstance) {
            result.avengerSolo_ = global::D3.Account.Avenger.CreateBuilder(result.avengerSolo_).MergeFrom(value).BuildPartial();
        } else {
          result.avengerSolo_ = value;
        }
        result.hasAvengerSolo = true;
        return this;
      }
      public Builder ClearAvengerSolo() {
        PrepareBuilder();
        result.hasAvengerSolo = false;
        result.avengerSolo_ = null;
        return this;
      }
      
      public bool HasAvengerFriends {
       get { return result.hasAvengerFriends; }
      }
      public global::D3.Account.Avenger AvengerFriends {
        get { return result.AvengerFriends; }
        set { SetAvengerFriends(value); }
      }
      public Builder SetAvengerFriends(global::D3.Account.Avenger value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAvengerFriends = true;
        result.avengerFriends_ = value;
        return this;
      }
      public Builder SetAvengerFriends(global::D3.Account.Avenger.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAvengerFriends = true;
        result.avengerFriends_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAvengerFriends(global::D3.Account.Avenger value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAvengerFriends &&
            result.avengerFriends_ != global::D3.Account.Avenger.DefaultInstance) {
            result.avengerFriends_ = global::D3.Account.Avenger.CreateBuilder(result.avengerFriends_).MergeFrom(value).BuildPartial();
        } else {
          result.avengerFriends_ = value;
        }
        result.hasAvengerFriends = true;
        return this;
      }
      public Builder ClearAvengerFriends() {
        PrepareBuilder();
        result.hasAvengerFriends = false;
        result.avengerFriends_ = null;
        return this;
      }
    }
    static AvengerData() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConsoleChallengeRiftReward : pb::GeneratedMessage<ConsoleChallengeRiftReward, ConsoleChallengeRiftReward.Builder> {
    private ConsoleChallengeRiftReward() { }
    private static readonly ConsoleChallengeRiftReward defaultInstance = new ConsoleChallengeRiftReward().MakeReadOnly();
    private static readonly string[] _consoleChallengeRiftRewardFieldNames = new string[] { "challenge_rift", "create_time", "items", "season_earned" };
    private static readonly uint[] _consoleChallengeRiftRewardFieldTags = new uint[] { 16, 24, 10, 32 };
    public static ConsoleChallengeRiftReward DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConsoleChallengeRiftReward DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConsoleChallengeRiftReward ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_ConsoleChallengeRiftReward__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConsoleChallengeRiftReward, ConsoleChallengeRiftReward.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_ConsoleChallengeRiftReward__FieldAccessorTable; }
    }
    
    public const int ItemsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Items.SavedItem> items_ = new pbc::PopsicleList<global::D3.Items.SavedItem>();
    public scg::IList<global::D3.Items.SavedItem> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::D3.Items.SavedItem GetItems(int index) {
      return items_[index];
    }
    
    public const int ChallengeRiftFieldNumber = 2;
    private bool hasChallengeRift;
    private uint challengeRift_;
    public bool HasChallengeRift {
      get { return hasChallengeRift; }
    }
    public uint ChallengeRift {
      get { return challengeRift_; }
    }
    
    public const int CreateTimeFieldNumber = 3;
    private bool hasCreateTime;
    private uint createTime_;
    public bool HasCreateTime {
      get { return hasCreateTime; }
    }
    public uint CreateTime {
      get { return createTime_; }
    }
    
    public const int SeasonEarnedFieldNumber = 4;
    private bool hasSeasonEarned;
    private uint seasonEarned_;
    public bool HasSeasonEarned {
      get { return hasSeasonEarned; }
    }
    public uint SeasonEarned {
      get { return seasonEarned_; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Items.SavedItem element in ItemsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _consoleChallengeRiftRewardFieldNames;
      if (items_.Count > 0) {
        output.WriteMessageArray(1, field_names[2], items_);
      }
      if (hasChallengeRift) {
        output.WriteUInt32(2, field_names[0], ChallengeRift);
      }
      if (hasCreateTime) {
        output.WriteUInt32(3, field_names[1], CreateTime);
      }
      if (hasSeasonEarned) {
        output.WriteUInt32(4, field_names[3], SeasonEarned);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Items.SavedItem element in ItemsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasChallengeRift) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, ChallengeRift);
        }
        if (hasCreateTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, CreateTime);
        }
        if (hasSeasonEarned) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, SeasonEarned);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConsoleChallengeRiftReward ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleChallengeRiftReward ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleChallengeRiftReward ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleChallengeRiftReward ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleChallengeRiftReward ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleChallengeRiftReward ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConsoleChallengeRiftReward ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConsoleChallengeRiftReward ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConsoleChallengeRiftReward ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleChallengeRiftReward ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConsoleChallengeRiftReward MakeReadOnly() {
      items_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConsoleChallengeRiftReward prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConsoleChallengeRiftReward, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConsoleChallengeRiftReward cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConsoleChallengeRiftReward result;
      
      private ConsoleChallengeRiftReward PrepareBuilder() {
        if (resultIsReadOnly) {
          ConsoleChallengeRiftReward original = result;
          result = new ConsoleChallengeRiftReward();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConsoleChallengeRiftReward MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.ConsoleChallengeRiftReward.Descriptor; }
      }
      
      public override ConsoleChallengeRiftReward DefaultInstanceForType {
        get { return global::D3.Account.ConsoleChallengeRiftReward.DefaultInstance; }
      }
      
      public override ConsoleChallengeRiftReward BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConsoleChallengeRiftReward) {
          return MergeFrom((ConsoleChallengeRiftReward) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConsoleChallengeRiftReward other) {
        if (other == global::D3.Account.ConsoleChallengeRiftReward.DefaultInstance) return this;
        PrepareBuilder();
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        if (other.HasChallengeRift) {
          ChallengeRift = other.ChallengeRift;
        }
        if (other.HasCreateTime) {
          CreateTime = other.CreateTime;
        }
        if (other.HasSeasonEarned) {
          SeasonEarned = other.SeasonEarned;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_consoleChallengeRiftRewardFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _consoleChallengeRiftRewardFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.items_, global::D3.Items.SavedItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 16: {
              result.hasChallengeRift = input.ReadUInt32(ref result.challengeRift_);
              break;
            }
            case 24: {
              result.hasCreateTime = input.ReadUInt32(ref result.createTime_);
              break;
            }
            case 32: {
              result.hasSeasonEarned = input.ReadUInt32(ref result.seasonEarned_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Items.SavedItem> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::D3.Items.SavedItem GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::D3.Items.SavedItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::D3.Items.SavedItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::D3.Items.SavedItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::D3.Items.SavedItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::D3.Items.SavedItem> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
      
      public bool HasChallengeRift {
        get { return result.hasChallengeRift; }
      }
      public uint ChallengeRift {
        get { return result.ChallengeRift; }
        set { SetChallengeRift(value); }
      }
      public Builder SetChallengeRift(uint value) {
        PrepareBuilder();
        result.hasChallengeRift = true;
        result.challengeRift_ = value;
        return this;
      }
      public Builder ClearChallengeRift() {
        PrepareBuilder();
        result.hasChallengeRift = false;
        result.challengeRift_ = 0;
        return this;
      }
      
      public bool HasCreateTime {
        get { return result.hasCreateTime; }
      }
      public uint CreateTime {
        get { return result.CreateTime; }
        set { SetCreateTime(value); }
      }
      public Builder SetCreateTime(uint value) {
        PrepareBuilder();
        result.hasCreateTime = true;
        result.createTime_ = value;
        return this;
      }
      public Builder ClearCreateTime() {
        PrepareBuilder();
        result.hasCreateTime = false;
        result.createTime_ = 0;
        return this;
      }
      
      public bool HasSeasonEarned {
        get { return result.hasSeasonEarned; }
      }
      public uint SeasonEarned {
        get { return result.SeasonEarned; }
        set { SetSeasonEarned(value); }
      }
      public Builder SetSeasonEarned(uint value) {
        PrepareBuilder();
        result.hasSeasonEarned = true;
        result.seasonEarned_ = value;
        return this;
      }
      public Builder ClearSeasonEarned() {
        PrepareBuilder();
        result.hasSeasonEarned = false;
        result.seasonEarned_ = 0;
        return this;
      }
    }
    static ConsoleChallengeRiftReward() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConsoleChallengeRiftPersonalBest : pb::GeneratedMessage<ConsoleChallengeRiftPersonalBest, ConsoleChallengeRiftPersonalBest.Builder> {
    private ConsoleChallengeRiftPersonalBest() { }
    private static readonly ConsoleChallengeRiftPersonalBest defaultInstance = new ConsoleChallengeRiftPersonalBest().MakeReadOnly();
    private static readonly string[] _consoleChallengeRiftPersonalBestFieldNames = new string[] { "id", "score", "timestamp" };
    private static readonly uint[] _consoleChallengeRiftPersonalBestFieldTags = new uint[] { 8, 16, 24 };
    public static ConsoleChallengeRiftPersonalBest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConsoleChallengeRiftPersonalBest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConsoleChallengeRiftPersonalBest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_ConsoleChallengeRiftPersonalBest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConsoleChallengeRiftPersonalBest, ConsoleChallengeRiftPersonalBest.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_ConsoleChallengeRiftPersonalBest__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    public ulong Id {
      get { return id_; }
    }
    
    public const int ScoreFieldNumber = 2;
    private bool hasScore;
    private ulong score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public ulong Score {
      get { return score_; }
    }
    
    public const int TimestampFieldNumber = 3;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _consoleChallengeRiftPersonalBestFieldNames;
      if (hasId) {
        output.WriteUInt64(1, field_names[0], Id);
      }
      if (hasScore) {
        output.WriteUInt64(2, field_names[1], Score);
      }
      if (hasTimestamp) {
        output.WriteInt64(3, field_names[2], Timestamp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, Id);
        }
        if (hasScore) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, Score);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, Timestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConsoleChallengeRiftPersonalBest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleChallengeRiftPersonalBest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleChallengeRiftPersonalBest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleChallengeRiftPersonalBest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleChallengeRiftPersonalBest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleChallengeRiftPersonalBest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConsoleChallengeRiftPersonalBest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConsoleChallengeRiftPersonalBest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConsoleChallengeRiftPersonalBest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleChallengeRiftPersonalBest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConsoleChallengeRiftPersonalBest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConsoleChallengeRiftPersonalBest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConsoleChallengeRiftPersonalBest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConsoleChallengeRiftPersonalBest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConsoleChallengeRiftPersonalBest result;
      
      private ConsoleChallengeRiftPersonalBest PrepareBuilder() {
        if (resultIsReadOnly) {
          ConsoleChallengeRiftPersonalBest original = result;
          result = new ConsoleChallengeRiftPersonalBest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConsoleChallengeRiftPersonalBest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.ConsoleChallengeRiftPersonalBest.Descriptor; }
      }
      
      public override ConsoleChallengeRiftPersonalBest DefaultInstanceForType {
        get { return global::D3.Account.ConsoleChallengeRiftPersonalBest.DefaultInstance; }
      }
      
      public override ConsoleChallengeRiftPersonalBest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConsoleChallengeRiftPersonalBest) {
          return MergeFrom((ConsoleChallengeRiftPersonalBest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConsoleChallengeRiftPersonalBest other) {
        if (other == global::D3.Account.ConsoleChallengeRiftPersonalBest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_consoleChallengeRiftPersonalBestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _consoleChallengeRiftPersonalBestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt64(ref result.id_);
              break;
            }
            case 16: {
              result.hasScore = input.ReadUInt64(ref result.score_);
              break;
            }
            case 24: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0UL;
        return this;
      }
      
      public bool HasScore {
        get { return result.hasScore; }
      }
      public ulong Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(ulong value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0UL;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
    }
    static ConsoleChallengeRiftPersonalBest() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConsoleData : pb::GeneratedMessage<ConsoleData, ConsoleData.Builder> {
    private ConsoleData() { }
    private static readonly ConsoleData defaultInstance = new ConsoleData().MakeReadOnly();
    private static readonly string[] _consoleDataFieldNames = new string[] { "achievement_snapshot", "avenger_data", "challenge_rift_personal_best", "challenge_rift_personal_best_rift_number", "challenge_rift_reward", "console_cube_base_seed", "has_bnet_account", "has_demo_save", "highest_completed_difficulty_deprecated", "leaderboard_heal_achievements", "leaderboard_heal_conquests", "legacy_license_bits", "nfp_default_time", "nfp_goblin_time", "progress", "version_required" };
    private static readonly uint[] _consoleDataFieldTags = new uint[] { 18, 42, 106, 96, 90, 112, 56, 32, 24, 72, 80, 64, 120, 128, 53, 8 };
    public static ConsoleData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConsoleData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConsoleData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_ConsoleData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConsoleData, ConsoleData.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_ConsoleData__FieldAccessorTable; }
    }
    
    public const int VersionRequiredFieldNumber = 1;
    private bool hasVersionRequired;
    private uint versionRequired_;
    public bool HasVersionRequired {
      get { return hasVersionRequired; }
    }
    public uint VersionRequired {
      get { return versionRequired_; }
    }
    
    public const int AchievementSnapshotFieldNumber = 2;
    private bool hasAchievementSnapshot;
    private global::D3.Achievements.Snapshot achievementSnapshot_;
    public bool HasAchievementSnapshot {
      get { return hasAchievementSnapshot; }
    }
    public global::D3.Achievements.Snapshot AchievementSnapshot {
      get { return achievementSnapshot_ ?? global::D3.Achievements.Snapshot.DefaultInstance; }
    }
    
    public const int HighestCompletedDifficultyDeprecatedFieldNumber = 3;
    private bool hasHighestCompletedDifficultyDeprecated;
    private int highestCompletedDifficultyDeprecated_ = -1;
    public bool HasHighestCompletedDifficultyDeprecated {
      get { return hasHighestCompletedDifficultyDeprecated; }
    }
    public int HighestCompletedDifficultyDeprecated {
      get { return highestCompletedDifficultyDeprecated_; }
    }
    
    public const int HasDemoSaveFieldNumber = 4;
    private bool hasHasDemoSave;
    private bool hasDemoSave_;
    public bool HasHasDemoSave {
      get { return hasHasDemoSave; }
    }
    public bool HasDemoSave {
      get { return hasDemoSave_; }
    }
    
    public const int AvengerDataFieldNumber = 5;
    private bool hasAvengerData;
    private global::D3.Account.AvengerData avengerData_;
    public bool HasAvengerData {
      get { return hasAvengerData; }
    }
    public global::D3.Account.AvengerData AvengerData {
      get { return avengerData_ ?? global::D3.Account.AvengerData.DefaultInstance; }
    }
    
    public const int ProgressFieldNumber = 6;
    private bool hasProgress;
    private float progress_;
    public bool HasProgress {
      get { return hasProgress; }
    }
    public float Progress {
      get { return progress_; }
    }
    
    public const int HasBnetAccountFieldNumber = 7;
    private bool hasHasBnetAccount;
    private bool hasBnetAccount_;
    public bool HasHasBnetAccount {
      get { return hasHasBnetAccount; }
    }
    public bool HasBnetAccount {
      get { return hasBnetAccount_; }
    }
    
    public const int LegacyLicenseBitsFieldNumber = 8;
    private bool hasLegacyLicenseBits;
    private uint legacyLicenseBits_;
    public bool HasLegacyLicenseBits {
      get { return hasLegacyLicenseBits; }
    }
    public uint LegacyLicenseBits {
      get { return legacyLicenseBits_; }
    }
    
    public const int LeaderboardHealAchievementsFieldNumber = 9;
    private bool hasLeaderboardHealAchievements;
    private uint leaderboardHealAchievements_;
    public bool HasLeaderboardHealAchievements {
      get { return hasLeaderboardHealAchievements; }
    }
    public uint LeaderboardHealAchievements {
      get { return leaderboardHealAchievements_; }
    }
    
    public const int LeaderboardHealConquestsFieldNumber = 10;
    private pbc::PopsicleList<ulong> leaderboardHealConquests_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> LeaderboardHealConquestsList {
      get { return pbc::Lists.AsReadOnly(leaderboardHealConquests_); }
    }
    public int LeaderboardHealConquestsCount {
      get { return leaderboardHealConquests_.Count; }
    }
    public ulong GetLeaderboardHealConquests(int index) {
      return leaderboardHealConquests_[index];
    }
    
    public const int ChallengeRiftRewardFieldNumber = 11;
    private pbc::PopsicleList<global::D3.Account.ConsoleChallengeRiftReward> challengeRiftReward_ = new pbc::PopsicleList<global::D3.Account.ConsoleChallengeRiftReward>();
    public scg::IList<global::D3.Account.ConsoleChallengeRiftReward> ChallengeRiftRewardList {
      get { return challengeRiftReward_; }
    }
    public int ChallengeRiftRewardCount {
      get { return challengeRiftReward_.Count; }
    }
    public global::D3.Account.ConsoleChallengeRiftReward GetChallengeRiftReward(int index) {
      return challengeRiftReward_[index];
    }
    
    public const int ChallengeRiftPersonalBestRiftNumberFieldNumber = 12;
    private bool hasChallengeRiftPersonalBestRiftNumber;
    private uint challengeRiftPersonalBestRiftNumber_;
    public bool HasChallengeRiftPersonalBestRiftNumber {
      get { return hasChallengeRiftPersonalBestRiftNumber; }
    }
    public uint ChallengeRiftPersonalBestRiftNumber {
      get { return challengeRiftPersonalBestRiftNumber_; }
    }
    
    public const int ChallengeRiftPersonalBestFieldNumber = 13;
    private pbc::PopsicleList<global::D3.Account.ConsoleChallengeRiftPersonalBest> challengeRiftPersonalBest_ = new pbc::PopsicleList<global::D3.Account.ConsoleChallengeRiftPersonalBest>();
    public scg::IList<global::D3.Account.ConsoleChallengeRiftPersonalBest> ChallengeRiftPersonalBestList {
      get { return challengeRiftPersonalBest_; }
    }
    public int ChallengeRiftPersonalBestCount {
      get { return challengeRiftPersonalBest_.Count; }
    }
    public global::D3.Account.ConsoleChallengeRiftPersonalBest GetChallengeRiftPersonalBest(int index) {
      return challengeRiftPersonalBest_[index];
    }
    
    public const int ConsoleCubeBaseSeedFieldNumber = 14;
    private bool hasConsoleCubeBaseSeed;
    private uint consoleCubeBaseSeed_ = 666;
    public bool HasConsoleCubeBaseSeed {
      get { return hasConsoleCubeBaseSeed; }
    }
    public uint ConsoleCubeBaseSeed {
      get { return consoleCubeBaseSeed_; }
    }
    
    public const int NfpDefaultTimeFieldNumber = 15;
    private bool hasNfpDefaultTime;
    private int nfpDefaultTime_;
    public bool HasNfpDefaultTime {
      get { return hasNfpDefaultTime; }
    }
    public int NfpDefaultTime {
      get { return nfpDefaultTime_; }
    }
    
    public const int NfpGoblinTimeFieldNumber = 16;
    private bool hasNfpGoblinTime;
    private int nfpGoblinTime_;
    public bool HasNfpGoblinTime {
      get { return hasNfpGoblinTime; }
    }
    public int NfpGoblinTime {
      get { return nfpGoblinTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasAchievementSnapshot) {
          if (!AchievementSnapshot.IsInitialized) return false;
        }
        if (HasAvengerData) {
          if (!AvengerData.IsInitialized) return false;
        }
        foreach (global::D3.Account.ConsoleChallengeRiftReward element in ChallengeRiftRewardList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _consoleDataFieldNames;
      if (hasVersionRequired) {
        output.WriteUInt32(1, field_names[15], VersionRequired);
      }
      if (hasAchievementSnapshot) {
        output.WriteMessage(2, field_names[0], AchievementSnapshot);
      }
      if (hasHighestCompletedDifficultyDeprecated) {
        output.WriteSInt32(3, field_names[8], HighestCompletedDifficultyDeprecated);
      }
      if (hasHasDemoSave) {
        output.WriteBool(4, field_names[7], HasDemoSave);
      }
      if (hasAvengerData) {
        output.WriteMessage(5, field_names[1], AvengerData);
      }
      if (hasProgress) {
        output.WriteFloat(6, field_names[14], Progress);
      }
      if (hasHasBnetAccount) {
        output.WriteBool(7, field_names[6], HasBnetAccount);
      }
      if (hasLegacyLicenseBits) {
        output.WriteUInt32(8, field_names[11], LegacyLicenseBits);
      }
      if (hasLeaderboardHealAchievements) {
        output.WriteUInt32(9, field_names[9], LeaderboardHealAchievements);
      }
      if (leaderboardHealConquests_.Count > 0) {
        output.WriteUInt64Array(10, field_names[10], leaderboardHealConquests_);
      }
      if (challengeRiftReward_.Count > 0) {
        output.WriteMessageArray(11, field_names[4], challengeRiftReward_);
      }
      if (hasChallengeRiftPersonalBestRiftNumber) {
        output.WriteUInt32(12, field_names[3], ChallengeRiftPersonalBestRiftNumber);
      }
      if (challengeRiftPersonalBest_.Count > 0) {
        output.WriteMessageArray(13, field_names[2], challengeRiftPersonalBest_);
      }
      if (hasConsoleCubeBaseSeed) {
        output.WriteUInt32(14, field_names[5], ConsoleCubeBaseSeed);
      }
      if (hasNfpDefaultTime) {
        output.WriteInt32(15, field_names[12], NfpDefaultTime);
      }
      if (hasNfpGoblinTime) {
        output.WriteInt32(16, field_names[13], NfpGoblinTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersionRequired) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, VersionRequired);
        }
        if (hasAchievementSnapshot) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, AchievementSnapshot);
        }
        if (hasHighestCompletedDifficultyDeprecated) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, HighestCompletedDifficultyDeprecated);
        }
        if (hasHasDemoSave) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, HasDemoSave);
        }
        if (hasAvengerData) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, AvengerData);
        }
        if (hasProgress) {
          size += pb::CodedOutputStream.ComputeFloatSize(6, Progress);
        }
        if (hasHasBnetAccount) {
          size += pb::CodedOutputStream.ComputeBoolSize(7, HasBnetAccount);
        }
        if (hasLegacyLicenseBits) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, LegacyLicenseBits);
        }
        if (hasLeaderboardHealAchievements) {
          size += pb::CodedOutputStream.ComputeUInt32Size(9, LeaderboardHealAchievements);
        }
        {
          int dataSize = 0;
          foreach (ulong element in LeaderboardHealConquestsList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * leaderboardHealConquests_.Count;
        }
        foreach (global::D3.Account.ConsoleChallengeRiftReward element in ChallengeRiftRewardList) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, element);
        }
        if (hasChallengeRiftPersonalBestRiftNumber) {
          size += pb::CodedOutputStream.ComputeUInt32Size(12, ChallengeRiftPersonalBestRiftNumber);
        }
        foreach (global::D3.Account.ConsoleChallengeRiftPersonalBest element in ChallengeRiftPersonalBestList) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, element);
        }
        if (hasConsoleCubeBaseSeed) {
          size += pb::CodedOutputStream.ComputeUInt32Size(14, ConsoleCubeBaseSeed);
        }
        if (hasNfpDefaultTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, NfpDefaultTime);
        }
        if (hasNfpGoblinTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(16, NfpGoblinTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConsoleData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConsoleData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConsoleData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConsoleData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConsoleData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConsoleData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConsoleData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConsoleData MakeReadOnly() {
      leaderboardHealConquests_.MakeReadOnly();
      challengeRiftReward_.MakeReadOnly();
      challengeRiftPersonalBest_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConsoleData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConsoleData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConsoleData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConsoleData result;
      
      private ConsoleData PrepareBuilder() {
        if (resultIsReadOnly) {
          ConsoleData original = result;
          result = new ConsoleData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConsoleData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.ConsoleData.Descriptor; }
      }
      
      public override ConsoleData DefaultInstanceForType {
        get { return global::D3.Account.ConsoleData.DefaultInstance; }
      }
      
      public override ConsoleData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConsoleData) {
          return MergeFrom((ConsoleData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConsoleData other) {
        if (other == global::D3.Account.ConsoleData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersionRequired) {
          VersionRequired = other.VersionRequired;
        }
        if (other.HasAchievementSnapshot) {
          MergeAchievementSnapshot(other.AchievementSnapshot);
        }
        if (other.HasHighestCompletedDifficultyDeprecated) {
          HighestCompletedDifficultyDeprecated = other.HighestCompletedDifficultyDeprecated;
        }
        if (other.HasHasDemoSave) {
          HasDemoSave = other.HasDemoSave;
        }
        if (other.HasAvengerData) {
          MergeAvengerData(other.AvengerData);
        }
        if (other.HasProgress) {
          Progress = other.Progress;
        }
        if (other.HasHasBnetAccount) {
          HasBnetAccount = other.HasBnetAccount;
        }
        if (other.HasLegacyLicenseBits) {
          LegacyLicenseBits = other.LegacyLicenseBits;
        }
        if (other.HasLeaderboardHealAchievements) {
          LeaderboardHealAchievements = other.LeaderboardHealAchievements;
        }
        if (other.leaderboardHealConquests_.Count != 0) {
          result.leaderboardHealConquests_.Add(other.leaderboardHealConquests_);
        }
        if (other.challengeRiftReward_.Count != 0) {
          result.challengeRiftReward_.Add(other.challengeRiftReward_);
        }
        if (other.HasChallengeRiftPersonalBestRiftNumber) {
          ChallengeRiftPersonalBestRiftNumber = other.ChallengeRiftPersonalBestRiftNumber;
        }
        if (other.challengeRiftPersonalBest_.Count != 0) {
          result.challengeRiftPersonalBest_.Add(other.challengeRiftPersonalBest_);
        }
        if (other.HasConsoleCubeBaseSeed) {
          ConsoleCubeBaseSeed = other.ConsoleCubeBaseSeed;
        }
        if (other.HasNfpDefaultTime) {
          NfpDefaultTime = other.NfpDefaultTime;
        }
        if (other.HasNfpGoblinTime) {
          NfpGoblinTime = other.NfpGoblinTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_consoleDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _consoleDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersionRequired = input.ReadUInt32(ref result.versionRequired_);
              break;
            }
            case 18: {
              global::D3.Achievements.Snapshot.Builder subBuilder = global::D3.Achievements.Snapshot.CreateBuilder();
              if (result.hasAchievementSnapshot) {
                subBuilder.MergeFrom(AchievementSnapshot);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AchievementSnapshot = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasHighestCompletedDifficultyDeprecated = input.ReadSInt32(ref result.highestCompletedDifficultyDeprecated_);
              break;
            }
            case 32: {
              result.hasHasDemoSave = input.ReadBool(ref result.hasDemoSave_);
              break;
            }
            case 42: {
              global::D3.Account.AvengerData.Builder subBuilder = global::D3.Account.AvengerData.CreateBuilder();
              if (result.hasAvengerData) {
                subBuilder.MergeFrom(AvengerData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AvengerData = subBuilder.BuildPartial();
              break;
            }
            case 53: {
              result.hasProgress = input.ReadFloat(ref result.progress_);
              break;
            }
            case 56: {
              result.hasHasBnetAccount = input.ReadBool(ref result.hasBnetAccount_);
              break;
            }
            case 64: {
              result.hasLegacyLicenseBits = input.ReadUInt32(ref result.legacyLicenseBits_);
              break;
            }
            case 72: {
              result.hasLeaderboardHealAchievements = input.ReadUInt32(ref result.leaderboardHealAchievements_);
              break;
            }
            case 82:
            case 80: {
              input.ReadUInt64Array(tag, field_name, result.leaderboardHealConquests_);
              break;
            }
            case 90: {
              input.ReadMessageArray(tag, field_name, result.challengeRiftReward_, global::D3.Account.ConsoleChallengeRiftReward.DefaultInstance, extensionRegistry);
              break;
            }
            case 96: {
              result.hasChallengeRiftPersonalBestRiftNumber = input.ReadUInt32(ref result.challengeRiftPersonalBestRiftNumber_);
              break;
            }
            case 106: {
              input.ReadMessageArray(tag, field_name, result.challengeRiftPersonalBest_, global::D3.Account.ConsoleChallengeRiftPersonalBest.DefaultInstance, extensionRegistry);
              break;
            }
            case 112: {
              result.hasConsoleCubeBaseSeed = input.ReadUInt32(ref result.consoleCubeBaseSeed_);
              break;
            }
            case 120: {
              result.hasNfpDefaultTime = input.ReadInt32(ref result.nfpDefaultTime_);
              break;
            }
            case 128: {
              result.hasNfpGoblinTime = input.ReadInt32(ref result.nfpGoblinTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasVersionRequired {
        get { return result.hasVersionRequired; }
      }
      public uint VersionRequired {
        get { return result.VersionRequired; }
        set { SetVersionRequired(value); }
      }
      public Builder SetVersionRequired(uint value) {
        PrepareBuilder();
        result.hasVersionRequired = true;
        result.versionRequired_ = value;
        return this;
      }
      public Builder ClearVersionRequired() {
        PrepareBuilder();
        result.hasVersionRequired = false;
        result.versionRequired_ = 0;
        return this;
      }
      
      public bool HasAchievementSnapshot {
       get { return result.hasAchievementSnapshot; }
      }
      public global::D3.Achievements.Snapshot AchievementSnapshot {
        get { return result.AchievementSnapshot; }
        set { SetAchievementSnapshot(value); }
      }
      public Builder SetAchievementSnapshot(global::D3.Achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAchievementSnapshot = true;
        result.achievementSnapshot_ = value;
        return this;
      }
      public Builder SetAchievementSnapshot(global::D3.Achievements.Snapshot.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAchievementSnapshot = true;
        result.achievementSnapshot_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAchievementSnapshot(global::D3.Achievements.Snapshot value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAchievementSnapshot &&
            result.achievementSnapshot_ != global::D3.Achievements.Snapshot.DefaultInstance) {
            result.achievementSnapshot_ = global::D3.Achievements.Snapshot.CreateBuilder(result.achievementSnapshot_).MergeFrom(value).BuildPartial();
        } else {
          result.achievementSnapshot_ = value;
        }
        result.hasAchievementSnapshot = true;
        return this;
      }
      public Builder ClearAchievementSnapshot() {
        PrepareBuilder();
        result.hasAchievementSnapshot = false;
        result.achievementSnapshot_ = null;
        return this;
      }
      
      public bool HasHighestCompletedDifficultyDeprecated {
        get { return result.hasHighestCompletedDifficultyDeprecated; }
      }
      public int HighestCompletedDifficultyDeprecated {
        get { return result.HighestCompletedDifficultyDeprecated; }
        set { SetHighestCompletedDifficultyDeprecated(value); }
      }
      public Builder SetHighestCompletedDifficultyDeprecated(int value) {
        PrepareBuilder();
        result.hasHighestCompletedDifficultyDeprecated = true;
        result.highestCompletedDifficultyDeprecated_ = value;
        return this;
      }
      public Builder ClearHighestCompletedDifficultyDeprecated() {
        PrepareBuilder();
        result.hasHighestCompletedDifficultyDeprecated = false;
        result.highestCompletedDifficultyDeprecated_ = -1;
        return this;
      }
      
      public bool HasHasDemoSave {
        get { return result.hasHasDemoSave; }
      }
      public bool HasDemoSave {
        get { return result.HasDemoSave; }
        set { SetHasDemoSave(value); }
      }
      public Builder SetHasDemoSave(bool value) {
        PrepareBuilder();
        result.hasHasDemoSave = true;
        result.hasDemoSave_ = value;
        return this;
      }
      public Builder ClearHasDemoSave() {
        PrepareBuilder();
        result.hasHasDemoSave = false;
        result.hasDemoSave_ = false;
        return this;
      }
      
      public bool HasAvengerData {
       get { return result.hasAvengerData; }
      }
      public global::D3.Account.AvengerData AvengerData {
        get { return result.AvengerData; }
        set { SetAvengerData(value); }
      }
      public Builder SetAvengerData(global::D3.Account.AvengerData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAvengerData = true;
        result.avengerData_ = value;
        return this;
      }
      public Builder SetAvengerData(global::D3.Account.AvengerData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAvengerData = true;
        result.avengerData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAvengerData(global::D3.Account.AvengerData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAvengerData &&
            result.avengerData_ != global::D3.Account.AvengerData.DefaultInstance) {
            result.avengerData_ = global::D3.Account.AvengerData.CreateBuilder(result.avengerData_).MergeFrom(value).BuildPartial();
        } else {
          result.avengerData_ = value;
        }
        result.hasAvengerData = true;
        return this;
      }
      public Builder ClearAvengerData() {
        PrepareBuilder();
        result.hasAvengerData = false;
        result.avengerData_ = null;
        return this;
      }
      
      public bool HasProgress {
        get { return result.hasProgress; }
      }
      public float Progress {
        get { return result.Progress; }
        set { SetProgress(value); }
      }
      public Builder SetProgress(float value) {
        PrepareBuilder();
        result.hasProgress = true;
        result.progress_ = value;
        return this;
      }
      public Builder ClearProgress() {
        PrepareBuilder();
        result.hasProgress = false;
        result.progress_ = 0F;
        return this;
      }
      
      public bool HasHasBnetAccount {
        get { return result.hasHasBnetAccount; }
      }
      public bool HasBnetAccount {
        get { return result.HasBnetAccount; }
        set { SetHasBnetAccount(value); }
      }
      public Builder SetHasBnetAccount(bool value) {
        PrepareBuilder();
        result.hasHasBnetAccount = true;
        result.hasBnetAccount_ = value;
        return this;
      }
      public Builder ClearHasBnetAccount() {
        PrepareBuilder();
        result.hasHasBnetAccount = false;
        result.hasBnetAccount_ = false;
        return this;
      }
      
      public bool HasLegacyLicenseBits {
        get { return result.hasLegacyLicenseBits; }
      }
      public uint LegacyLicenseBits {
        get { return result.LegacyLicenseBits; }
        set { SetLegacyLicenseBits(value); }
      }
      public Builder SetLegacyLicenseBits(uint value) {
        PrepareBuilder();
        result.hasLegacyLicenseBits = true;
        result.legacyLicenseBits_ = value;
        return this;
      }
      public Builder ClearLegacyLicenseBits() {
        PrepareBuilder();
        result.hasLegacyLicenseBits = false;
        result.legacyLicenseBits_ = 0;
        return this;
      }
      
      public bool HasLeaderboardHealAchievements {
        get { return result.hasLeaderboardHealAchievements; }
      }
      public uint LeaderboardHealAchievements {
        get { return result.LeaderboardHealAchievements; }
        set { SetLeaderboardHealAchievements(value); }
      }
      public Builder SetLeaderboardHealAchievements(uint value) {
        PrepareBuilder();
        result.hasLeaderboardHealAchievements = true;
        result.leaderboardHealAchievements_ = value;
        return this;
      }
      public Builder ClearLeaderboardHealAchievements() {
        PrepareBuilder();
        result.hasLeaderboardHealAchievements = false;
        result.leaderboardHealAchievements_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> LeaderboardHealConquestsList {
        get { return PrepareBuilder().leaderboardHealConquests_; }
      }
      public int LeaderboardHealConquestsCount {
        get { return result.LeaderboardHealConquestsCount; }
      }
      public ulong GetLeaderboardHealConquests(int index) {
        return result.GetLeaderboardHealConquests(index);
      }
      public Builder SetLeaderboardHealConquests(int index, ulong value) {
        PrepareBuilder();
        result.leaderboardHealConquests_[index] = value;
        return this;
      }
      public Builder AddLeaderboardHealConquests(ulong value) {
        PrepareBuilder();
        result.leaderboardHealConquests_.Add(value);
        return this;
      }
      public Builder AddRangeLeaderboardHealConquests(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.leaderboardHealConquests_.Add(values);
        return this;
      }
      public Builder ClearLeaderboardHealConquests() {
        PrepareBuilder();
        result.leaderboardHealConquests_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Account.ConsoleChallengeRiftReward> ChallengeRiftRewardList {
        get { return PrepareBuilder().challengeRiftReward_; }
      }
      public int ChallengeRiftRewardCount {
        get { return result.ChallengeRiftRewardCount; }
      }
      public global::D3.Account.ConsoleChallengeRiftReward GetChallengeRiftReward(int index) {
        return result.GetChallengeRiftReward(index);
      }
      public Builder SetChallengeRiftReward(int index, global::D3.Account.ConsoleChallengeRiftReward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.challengeRiftReward_[index] = value;
        return this;
      }
      public Builder SetChallengeRiftReward(int index, global::D3.Account.ConsoleChallengeRiftReward.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.challengeRiftReward_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddChallengeRiftReward(global::D3.Account.ConsoleChallengeRiftReward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.challengeRiftReward_.Add(value);
        return this;
      }
      public Builder AddChallengeRiftReward(global::D3.Account.ConsoleChallengeRiftReward.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.challengeRiftReward_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeChallengeRiftReward(scg::IEnumerable<global::D3.Account.ConsoleChallengeRiftReward> values) {
        PrepareBuilder();
        result.challengeRiftReward_.Add(values);
        return this;
      }
      public Builder ClearChallengeRiftReward() {
        PrepareBuilder();
        result.challengeRiftReward_.Clear();
        return this;
      }
      
      public bool HasChallengeRiftPersonalBestRiftNumber {
        get { return result.hasChallengeRiftPersonalBestRiftNumber; }
      }
      public uint ChallengeRiftPersonalBestRiftNumber {
        get { return result.ChallengeRiftPersonalBestRiftNumber; }
        set { SetChallengeRiftPersonalBestRiftNumber(value); }
      }
      public Builder SetChallengeRiftPersonalBestRiftNumber(uint value) {
        PrepareBuilder();
        result.hasChallengeRiftPersonalBestRiftNumber = true;
        result.challengeRiftPersonalBestRiftNumber_ = value;
        return this;
      }
      public Builder ClearChallengeRiftPersonalBestRiftNumber() {
        PrepareBuilder();
        result.hasChallengeRiftPersonalBestRiftNumber = false;
        result.challengeRiftPersonalBestRiftNumber_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Account.ConsoleChallengeRiftPersonalBest> ChallengeRiftPersonalBestList {
        get { return PrepareBuilder().challengeRiftPersonalBest_; }
      }
      public int ChallengeRiftPersonalBestCount {
        get { return result.ChallengeRiftPersonalBestCount; }
      }
      public global::D3.Account.ConsoleChallengeRiftPersonalBest GetChallengeRiftPersonalBest(int index) {
        return result.GetChallengeRiftPersonalBest(index);
      }
      public Builder SetChallengeRiftPersonalBest(int index, global::D3.Account.ConsoleChallengeRiftPersonalBest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.challengeRiftPersonalBest_[index] = value;
        return this;
      }
      public Builder SetChallengeRiftPersonalBest(int index, global::D3.Account.ConsoleChallengeRiftPersonalBest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.challengeRiftPersonalBest_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddChallengeRiftPersonalBest(global::D3.Account.ConsoleChallengeRiftPersonalBest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.challengeRiftPersonalBest_.Add(value);
        return this;
      }
      public Builder AddChallengeRiftPersonalBest(global::D3.Account.ConsoleChallengeRiftPersonalBest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.challengeRiftPersonalBest_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeChallengeRiftPersonalBest(scg::IEnumerable<global::D3.Account.ConsoleChallengeRiftPersonalBest> values) {
        PrepareBuilder();
        result.challengeRiftPersonalBest_.Add(values);
        return this;
      }
      public Builder ClearChallengeRiftPersonalBest() {
        PrepareBuilder();
        result.challengeRiftPersonalBest_.Clear();
        return this;
      }
      
      public bool HasConsoleCubeBaseSeed {
        get { return result.hasConsoleCubeBaseSeed; }
      }
      public uint ConsoleCubeBaseSeed {
        get { return result.ConsoleCubeBaseSeed; }
        set { SetConsoleCubeBaseSeed(value); }
      }
      public Builder SetConsoleCubeBaseSeed(uint value) {
        PrepareBuilder();
        result.hasConsoleCubeBaseSeed = true;
        result.consoleCubeBaseSeed_ = value;
        return this;
      }
      public Builder ClearConsoleCubeBaseSeed() {
        PrepareBuilder();
        result.hasConsoleCubeBaseSeed = false;
        result.consoleCubeBaseSeed_ = 666;
        return this;
      }
      
      public bool HasNfpDefaultTime {
        get { return result.hasNfpDefaultTime; }
      }
      public int NfpDefaultTime {
        get { return result.NfpDefaultTime; }
        set { SetNfpDefaultTime(value); }
      }
      public Builder SetNfpDefaultTime(int value) {
        PrepareBuilder();
        result.hasNfpDefaultTime = true;
        result.nfpDefaultTime_ = value;
        return this;
      }
      public Builder ClearNfpDefaultTime() {
        PrepareBuilder();
        result.hasNfpDefaultTime = false;
        result.nfpDefaultTime_ = 0;
        return this;
      }
      
      public bool HasNfpGoblinTime {
        get { return result.hasNfpGoblinTime; }
      }
      public int NfpGoblinTime {
        get { return result.NfpGoblinTime; }
        set { SetNfpGoblinTime(value); }
      }
      public Builder SetNfpGoblinTime(int value) {
        PrepareBuilder();
        result.hasNfpGoblinTime = true;
        result.nfpGoblinTime_ = value;
        return this;
      }
      public Builder ClearNfpGoblinTime() {
        PrepareBuilder();
        result.hasNfpGoblinTime = false;
        result.nfpGoblinTime_ = 0;
        return this;
      }
    }
    static ConsoleData() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DeliveredAchievementReward : pb::GeneratedMessage<DeliveredAchievementReward, DeliveredAchievementReward.Builder> {
    private DeliveredAchievementReward() { }
    private static readonly DeliveredAchievementReward defaultInstance = new DeliveredAchievementReward().MakeReadOnly();
    private static readonly string[] _deliveredAchievementRewardFieldNames = new string[] { "achievement_id" };
    private static readonly uint[] _deliveredAchievementRewardFieldTags = new uint[] { 9 };
    public static DeliveredAchievementReward DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DeliveredAchievementReward DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DeliveredAchievementReward ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_DeliveredAchievementReward__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DeliveredAchievementReward, DeliveredAchievementReward.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_DeliveredAchievementReward__FieldAccessorTable; }
    }
    
    public const int AchievementIdFieldNumber = 1;
    private bool hasAchievementId;
    private ulong achievementId_;
    public bool HasAchievementId {
      get { return hasAchievementId; }
    }
    public ulong AchievementId {
      get { return achievementId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAchievementId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _deliveredAchievementRewardFieldNames;
      if (hasAchievementId) {
        output.WriteFixed64(1, field_names[0], AchievementId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAchievementId) {
          size += pb::CodedOutputStream.ComputeFixed64Size(1, AchievementId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DeliveredAchievementReward ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeliveredAchievementReward ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeliveredAchievementReward ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeliveredAchievementReward ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeliveredAchievementReward ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeliveredAchievementReward ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DeliveredAchievementReward ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DeliveredAchievementReward ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DeliveredAchievementReward ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeliveredAchievementReward ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DeliveredAchievementReward MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DeliveredAchievementReward prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DeliveredAchievementReward, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DeliveredAchievementReward cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DeliveredAchievementReward result;
      
      private DeliveredAchievementReward PrepareBuilder() {
        if (resultIsReadOnly) {
          DeliveredAchievementReward original = result;
          result = new DeliveredAchievementReward();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DeliveredAchievementReward MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.DeliveredAchievementReward.Descriptor; }
      }
      
      public override DeliveredAchievementReward DefaultInstanceForType {
        get { return global::D3.Account.DeliveredAchievementReward.DefaultInstance; }
      }
      
      public override DeliveredAchievementReward BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DeliveredAchievementReward) {
          return MergeFrom((DeliveredAchievementReward) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DeliveredAchievementReward other) {
        if (other == global::D3.Account.DeliveredAchievementReward.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAchievementId) {
          AchievementId = other.AchievementId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_deliveredAchievementRewardFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _deliveredAchievementRewardFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasAchievementId = input.ReadFixed64(ref result.achievementId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAchievementId {
        get { return result.hasAchievementId; }
      }
      public ulong AchievementId {
        get { return result.AchievementId; }
        set { SetAchievementId(value); }
      }
      public Builder SetAchievementId(ulong value) {
        PrepareBuilder();
        result.hasAchievementId = true;
        result.achievementId_ = value;
        return this;
      }
      public Builder ClearAchievementId() {
        PrepareBuilder();
        result.hasAchievementId = false;
        result.achievementId_ = 0;
        return this;
      }
    }
    static DeliveredAchievementReward() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DeliveredRewards : pb::GeneratedMessage<DeliveredRewards, DeliveredRewards.Builder> {
    private DeliveredRewards() { }
    private static readonly DeliveredRewards defaultInstance = new DeliveredRewards().MakeReadOnly();
    private static readonly string[] _deliveredRewardsFieldNames = new string[] { "achievement_reward", "entitled_reward_license_bits", "legacy_achievements_to_deliver", "outstanding_reward_license_bits" };
    private static readonly uint[] _deliveredRewardsFieldTags = new uint[] { 10, 16, 33, 24 };
    public static DeliveredRewards DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DeliveredRewards DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DeliveredRewards ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_DeliveredRewards__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DeliveredRewards, DeliveredRewards.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_DeliveredRewards__FieldAccessorTable; }
    }
    
    public const int AchievementRewardFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Account.DeliveredAchievementReward> achievementReward_ = new pbc::PopsicleList<global::D3.Account.DeliveredAchievementReward>();
    public scg::IList<global::D3.Account.DeliveredAchievementReward> AchievementRewardList {
      get { return achievementReward_; }
    }
    public int AchievementRewardCount {
      get { return achievementReward_.Count; }
    }
    public global::D3.Account.DeliveredAchievementReward GetAchievementReward(int index) {
      return achievementReward_[index];
    }
    
    public const int EntitledRewardLicenseBitsFieldNumber = 2;
    private bool hasEntitledRewardLicenseBits;
    private uint entitledRewardLicenseBits_;
    public bool HasEntitledRewardLicenseBits {
      get { return hasEntitledRewardLicenseBits; }
    }
    public uint EntitledRewardLicenseBits {
      get { return entitledRewardLicenseBits_; }
    }
    
    public const int OutstandingRewardLicenseBitsFieldNumber = 3;
    private bool hasOutstandingRewardLicenseBits;
    private uint outstandingRewardLicenseBits_;
    public bool HasOutstandingRewardLicenseBits {
      get { return hasOutstandingRewardLicenseBits; }
    }
    public uint OutstandingRewardLicenseBits {
      get { return outstandingRewardLicenseBits_; }
    }
    
    public const int LegacyAchievementsToDeliverFieldNumber = 4;
    private pbc::PopsicleList<ulong> legacyAchievementsToDeliver_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> LegacyAchievementsToDeliverList {
      get { return pbc::Lists.AsReadOnly(legacyAchievementsToDeliver_); }
    }
    public int LegacyAchievementsToDeliverCount {
      get { return legacyAchievementsToDeliver_.Count; }
    }
    public ulong GetLegacyAchievementsToDeliver(int index) {
      return legacyAchievementsToDeliver_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Account.DeliveredAchievementReward element in AchievementRewardList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _deliveredRewardsFieldNames;
      if (achievementReward_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], achievementReward_);
      }
      if (hasEntitledRewardLicenseBits) {
        output.WriteUInt32(2, field_names[1], EntitledRewardLicenseBits);
      }
      if (hasOutstandingRewardLicenseBits) {
        output.WriteUInt32(3, field_names[3], OutstandingRewardLicenseBits);
      }
      if (legacyAchievementsToDeliver_.Count > 0) {
        output.WriteFixed64Array(4, field_names[2], legacyAchievementsToDeliver_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Account.DeliveredAchievementReward element in AchievementRewardList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasEntitledRewardLicenseBits) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, EntitledRewardLicenseBits);
        }
        if (hasOutstandingRewardLicenseBits) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, OutstandingRewardLicenseBits);
        }
        {
          int dataSize = 0;
          dataSize = 8 * legacyAchievementsToDeliver_.Count;
          size += dataSize;
          size += 1 * legacyAchievementsToDeliver_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DeliveredRewards ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeliveredRewards ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeliveredRewards ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeliveredRewards ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeliveredRewards ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeliveredRewards ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DeliveredRewards ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DeliveredRewards ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DeliveredRewards ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeliveredRewards ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DeliveredRewards MakeReadOnly() {
      achievementReward_.MakeReadOnly();
      legacyAchievementsToDeliver_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DeliveredRewards prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DeliveredRewards, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DeliveredRewards cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DeliveredRewards result;
      
      private DeliveredRewards PrepareBuilder() {
        if (resultIsReadOnly) {
          DeliveredRewards original = result;
          result = new DeliveredRewards();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DeliveredRewards MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.DeliveredRewards.Descriptor; }
      }
      
      public override DeliveredRewards DefaultInstanceForType {
        get { return global::D3.Account.DeliveredRewards.DefaultInstance; }
      }
      
      public override DeliveredRewards BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DeliveredRewards) {
          return MergeFrom((DeliveredRewards) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DeliveredRewards other) {
        if (other == global::D3.Account.DeliveredRewards.DefaultInstance) return this;
        PrepareBuilder();
        if (other.achievementReward_.Count != 0) {
          result.achievementReward_.Add(other.achievementReward_);
        }
        if (other.HasEntitledRewardLicenseBits) {
          EntitledRewardLicenseBits = other.EntitledRewardLicenseBits;
        }
        if (other.HasOutstandingRewardLicenseBits) {
          OutstandingRewardLicenseBits = other.OutstandingRewardLicenseBits;
        }
        if (other.legacyAchievementsToDeliver_.Count != 0) {
          result.legacyAchievementsToDeliver_.Add(other.legacyAchievementsToDeliver_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_deliveredRewardsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _deliveredRewardsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.achievementReward_, global::D3.Account.DeliveredAchievementReward.DefaultInstance, extensionRegistry);
              break;
            }
            case 16: {
              result.hasEntitledRewardLicenseBits = input.ReadUInt32(ref result.entitledRewardLicenseBits_);
              break;
            }
            case 24: {
              result.hasOutstandingRewardLicenseBits = input.ReadUInt32(ref result.outstandingRewardLicenseBits_);
              break;
            }
            case 34:
            case 33: {
              input.ReadFixed64Array(tag, field_name, result.legacyAchievementsToDeliver_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Account.DeliveredAchievementReward> AchievementRewardList {
        get { return PrepareBuilder().achievementReward_; }
      }
      public int AchievementRewardCount {
        get { return result.AchievementRewardCount; }
      }
      public global::D3.Account.DeliveredAchievementReward GetAchievementReward(int index) {
        return result.GetAchievementReward(index);
      }
      public Builder SetAchievementReward(int index, global::D3.Account.DeliveredAchievementReward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achievementReward_[index] = value;
        return this;
      }
      public Builder SetAchievementReward(int index, global::D3.Account.DeliveredAchievementReward.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achievementReward_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAchievementReward(global::D3.Account.DeliveredAchievementReward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achievementReward_.Add(value);
        return this;
      }
      public Builder AddAchievementReward(global::D3.Account.DeliveredAchievementReward.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achievementReward_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAchievementReward(scg::IEnumerable<global::D3.Account.DeliveredAchievementReward> values) {
        PrepareBuilder();
        result.achievementReward_.Add(values);
        return this;
      }
      public Builder ClearAchievementReward() {
        PrepareBuilder();
        result.achievementReward_.Clear();
        return this;
      }
      
      public bool HasEntitledRewardLicenseBits {
        get { return result.hasEntitledRewardLicenseBits; }
      }
      public uint EntitledRewardLicenseBits {
        get { return result.EntitledRewardLicenseBits; }
        set { SetEntitledRewardLicenseBits(value); }
      }
      public Builder SetEntitledRewardLicenseBits(uint value) {
        PrepareBuilder();
        result.hasEntitledRewardLicenseBits = true;
        result.entitledRewardLicenseBits_ = value;
        return this;
      }
      public Builder ClearEntitledRewardLicenseBits() {
        PrepareBuilder();
        result.hasEntitledRewardLicenseBits = false;
        result.entitledRewardLicenseBits_ = 0;
        return this;
      }
      
      public bool HasOutstandingRewardLicenseBits {
        get { return result.hasOutstandingRewardLicenseBits; }
      }
      public uint OutstandingRewardLicenseBits {
        get { return result.OutstandingRewardLicenseBits; }
        set { SetOutstandingRewardLicenseBits(value); }
      }
      public Builder SetOutstandingRewardLicenseBits(uint value) {
        PrepareBuilder();
        result.hasOutstandingRewardLicenseBits = true;
        result.outstandingRewardLicenseBits_ = value;
        return this;
      }
      public Builder ClearOutstandingRewardLicenseBits() {
        PrepareBuilder();
        result.hasOutstandingRewardLicenseBits = false;
        result.outstandingRewardLicenseBits_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> LegacyAchievementsToDeliverList {
        get { return PrepareBuilder().legacyAchievementsToDeliver_; }
      }
      public int LegacyAchievementsToDeliverCount {
        get { return result.LegacyAchievementsToDeliverCount; }
      }
      public ulong GetLegacyAchievementsToDeliver(int index) {
        return result.GetLegacyAchievementsToDeliver(index);
      }
      public Builder SetLegacyAchievementsToDeliver(int index, ulong value) {
        PrepareBuilder();
        result.legacyAchievementsToDeliver_[index] = value;
        return this;
      }
      public Builder AddLegacyAchievementsToDeliver(ulong value) {
        PrepareBuilder();
        result.legacyAchievementsToDeliver_.Add(value);
        return this;
      }
      public Builder AddRangeLegacyAchievementsToDeliver(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.legacyAchievementsToDeliver_.Add(values);
        return this;
      }
      public Builder ClearLegacyAchievementsToDeliver() {
        PrepareBuilder();
        result.legacyAchievementsToDeliver_.Clear();
        return this;
      }
    }
    static DeliveredRewards() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Consumable : pb::GeneratedMessage<Consumable, Consumable.Builder> {
    private Consumable() { }
    private static readonly Consumable defaultInstance = new Consumable().MakeReadOnly();
    private static readonly string[] _consumableFieldNames = new string[] { "consume_time", "data_persist_flags", "license_id", "license_instance_id", "quantity", "revoke_time", "transaction_id", "type" };
    private static readonly uint[] _consumableFieldTags = new uint[] { 40, 64, 16, 8, 32, 48, 24, 56 };
    public static Consumable DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Consumable DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Consumable ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_Consumable__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Consumable, Consumable.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_Consumable__FieldAccessorTable; }
    }
    
    public const int LicenseInstanceIdFieldNumber = 1;
    private bool hasLicenseInstanceId;
    private ulong licenseInstanceId_;
    public bool HasLicenseInstanceId {
      get { return hasLicenseInstanceId; }
    }
    public ulong LicenseInstanceId {
      get { return licenseInstanceId_; }
    }
    
    public const int LicenseIdFieldNumber = 2;
    private bool hasLicenseId;
    private ulong licenseId_;
    public bool HasLicenseId {
      get { return hasLicenseId; }
    }
    public ulong LicenseId {
      get { return licenseId_; }
    }
    
    public const int TransactionIdFieldNumber = 3;
    private bool hasTransactionId;
    private ulong transactionId_;
    public bool HasTransactionId {
      get { return hasTransactionId; }
    }
    public ulong TransactionId {
      get { return transactionId_; }
    }
    
    public const int QuantityFieldNumber = 4;
    private bool hasQuantity;
    private long quantity_;
    public bool HasQuantity {
      get { return hasQuantity; }
    }
    public long Quantity {
      get { return quantity_; }
    }
    
    public const int ConsumeTimeFieldNumber = 5;
    private bool hasConsumeTime;
    private long consumeTime_;
    public bool HasConsumeTime {
      get { return hasConsumeTime; }
    }
    public long ConsumeTime {
      get { return consumeTime_; }
    }
    
    public const int RevokeTimeFieldNumber = 6;
    private bool hasRevokeTime;
    private long revokeTime_;
    public bool HasRevokeTime {
      get { return hasRevokeTime; }
    }
    public long RevokeTime {
      get { return revokeTime_; }
    }
    
    public const int TypeFieldNumber = 7;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int DataPersistFlagsFieldNumber = 8;
    private bool hasDataPersistFlags;
    private uint dataPersistFlags_;
    public bool HasDataPersistFlags {
      get { return hasDataPersistFlags; }
    }
    public uint DataPersistFlags {
      get { return dataPersistFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _consumableFieldNames;
      if (hasLicenseInstanceId) {
        output.WriteUInt64(1, field_names[3], LicenseInstanceId);
      }
      if (hasLicenseId) {
        output.WriteUInt64(2, field_names[2], LicenseId);
      }
      if (hasTransactionId) {
        output.WriteUInt64(3, field_names[6], TransactionId);
      }
      if (hasQuantity) {
        output.WriteInt64(4, field_names[4], Quantity);
      }
      if (hasConsumeTime) {
        output.WriteInt64(5, field_names[0], ConsumeTime);
      }
      if (hasRevokeTime) {
        output.WriteInt64(6, field_names[5], RevokeTime);
      }
      if (hasType) {
        output.WriteInt32(7, field_names[7], Type);
      }
      if (hasDataPersistFlags) {
        output.WriteUInt32(8, field_names[1], DataPersistFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLicenseInstanceId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, LicenseInstanceId);
        }
        if (hasLicenseId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, LicenseId);
        }
        if (hasTransactionId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, TransactionId);
        }
        if (hasQuantity) {
          size += pb::CodedOutputStream.ComputeInt64Size(4, Quantity);
        }
        if (hasConsumeTime) {
          size += pb::CodedOutputStream.ComputeInt64Size(5, ConsumeTime);
        }
        if (hasRevokeTime) {
          size += pb::CodedOutputStream.ComputeInt64Size(6, RevokeTime);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, Type);
        }
        if (hasDataPersistFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, DataPersistFlags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Consumable ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Consumable ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Consumable ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Consumable ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Consumable ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Consumable ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Consumable ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Consumable ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Consumable ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Consumable ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Consumable MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Consumable prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Consumable, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Consumable cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Consumable result;
      
      private Consumable PrepareBuilder() {
        if (resultIsReadOnly) {
          Consumable original = result;
          result = new Consumable();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Consumable MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.Consumable.Descriptor; }
      }
      
      public override Consumable DefaultInstanceForType {
        get { return global::D3.Account.Consumable.DefaultInstance; }
      }
      
      public override Consumable BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Consumable) {
          return MergeFrom((Consumable) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Consumable other) {
        if (other == global::D3.Account.Consumable.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLicenseInstanceId) {
          LicenseInstanceId = other.LicenseInstanceId;
        }
        if (other.HasLicenseId) {
          LicenseId = other.LicenseId;
        }
        if (other.HasTransactionId) {
          TransactionId = other.TransactionId;
        }
        if (other.HasQuantity) {
          Quantity = other.Quantity;
        }
        if (other.HasConsumeTime) {
          ConsumeTime = other.ConsumeTime;
        }
        if (other.HasRevokeTime) {
          RevokeTime = other.RevokeTime;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasDataPersistFlags) {
          DataPersistFlags = other.DataPersistFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_consumableFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _consumableFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLicenseInstanceId = input.ReadUInt64(ref result.licenseInstanceId_);
              break;
            }
            case 16: {
              result.hasLicenseId = input.ReadUInt64(ref result.licenseId_);
              break;
            }
            case 24: {
              result.hasTransactionId = input.ReadUInt64(ref result.transactionId_);
              break;
            }
            case 32: {
              result.hasQuantity = input.ReadInt64(ref result.quantity_);
              break;
            }
            case 40: {
              result.hasConsumeTime = input.ReadInt64(ref result.consumeTime_);
              break;
            }
            case 48: {
              result.hasRevokeTime = input.ReadInt64(ref result.revokeTime_);
              break;
            }
            case 56: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 64: {
              result.hasDataPersistFlags = input.ReadUInt32(ref result.dataPersistFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLicenseInstanceId {
        get { return result.hasLicenseInstanceId; }
      }
      public ulong LicenseInstanceId {
        get { return result.LicenseInstanceId; }
        set { SetLicenseInstanceId(value); }
      }
      public Builder SetLicenseInstanceId(ulong value) {
        PrepareBuilder();
        result.hasLicenseInstanceId = true;
        result.licenseInstanceId_ = value;
        return this;
      }
      public Builder ClearLicenseInstanceId() {
        PrepareBuilder();
        result.hasLicenseInstanceId = false;
        result.licenseInstanceId_ = 0UL;
        return this;
      }
      
      public bool HasLicenseId {
        get { return result.hasLicenseId; }
      }
      public ulong LicenseId {
        get { return result.LicenseId; }
        set { SetLicenseId(value); }
      }
      public Builder SetLicenseId(ulong value) {
        PrepareBuilder();
        result.hasLicenseId = true;
        result.licenseId_ = value;
        return this;
      }
      public Builder ClearLicenseId() {
        PrepareBuilder();
        result.hasLicenseId = false;
        result.licenseId_ = 0UL;
        return this;
      }
      
      public bool HasTransactionId {
        get { return result.hasTransactionId; }
      }
      public ulong TransactionId {
        get { return result.TransactionId; }
        set { SetTransactionId(value); }
      }
      public Builder SetTransactionId(ulong value) {
        PrepareBuilder();
        result.hasTransactionId = true;
        result.transactionId_ = value;
        return this;
      }
      public Builder ClearTransactionId() {
        PrepareBuilder();
        result.hasTransactionId = false;
        result.transactionId_ = 0UL;
        return this;
      }
      
      public bool HasQuantity {
        get { return result.hasQuantity; }
      }
      public long Quantity {
        get { return result.Quantity; }
        set { SetQuantity(value); }
      }
      public Builder SetQuantity(long value) {
        PrepareBuilder();
        result.hasQuantity = true;
        result.quantity_ = value;
        return this;
      }
      public Builder ClearQuantity() {
        PrepareBuilder();
        result.hasQuantity = false;
        result.quantity_ = 0L;
        return this;
      }
      
      public bool HasConsumeTime {
        get { return result.hasConsumeTime; }
      }
      public long ConsumeTime {
        get { return result.ConsumeTime; }
        set { SetConsumeTime(value); }
      }
      public Builder SetConsumeTime(long value) {
        PrepareBuilder();
        result.hasConsumeTime = true;
        result.consumeTime_ = value;
        return this;
      }
      public Builder ClearConsumeTime() {
        PrepareBuilder();
        result.hasConsumeTime = false;
        result.consumeTime_ = 0L;
        return this;
      }
      
      public bool HasRevokeTime {
        get { return result.hasRevokeTime; }
      }
      public long RevokeTime {
        get { return result.RevokeTime; }
        set { SetRevokeTime(value); }
      }
      public Builder SetRevokeTime(long value) {
        PrepareBuilder();
        result.hasRevokeTime = true;
        result.revokeTime_ = value;
        return this;
      }
      public Builder ClearRevokeTime() {
        PrepareBuilder();
        result.hasRevokeTime = false;
        result.revokeTime_ = 0L;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasDataPersistFlags {
        get { return result.hasDataPersistFlags; }
      }
      public uint DataPersistFlags {
        get { return result.DataPersistFlags; }
        set { SetDataPersistFlags(value); }
      }
      public Builder SetDataPersistFlags(uint value) {
        PrepareBuilder();
        result.hasDataPersistFlags = true;
        result.dataPersistFlags_ = value;
        return this;
      }
      public Builder ClearDataPersistFlags() {
        PrepareBuilder();
        result.hasDataPersistFlags = false;
        result.dataPersistFlags_ = 0;
        return this;
      }
    }
    static Consumable() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Consumables : pb::GeneratedMessage<Consumables, Consumables.Builder> {
    private Consumables() { }
    private static readonly Consumables defaultInstance = new Consumables().MakeReadOnly();
    private static readonly string[] _consumablesFieldNames = new string[] { "consumed_licenses" };
    private static readonly uint[] _consumablesFieldTags = new uint[] { 10 };
    public static Consumables DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Consumables DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Consumables ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Account.Account.internal__static_D3_Account_Consumables__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Consumables, Consumables.Builder> InternalFieldAccessors {
      get { return global::D3.Account.Account.internal__static_D3_Account_Consumables__FieldAccessorTable; }
    }
    
    public const int ConsumedLicensesFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Account.Consumable> consumedLicenses_ = new pbc::PopsicleList<global::D3.Account.Consumable>();
    public scg::IList<global::D3.Account.Consumable> ConsumedLicensesList {
      get { return consumedLicenses_; }
    }
    public int ConsumedLicensesCount {
      get { return consumedLicenses_.Count; }
    }
    public global::D3.Account.Consumable GetConsumedLicenses(int index) {
      return consumedLicenses_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _consumablesFieldNames;
      if (consumedLicenses_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], consumedLicenses_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Account.Consumable element in ConsumedLicensesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Consumables ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Consumables ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Consumables ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Consumables ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Consumables ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Consumables ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Consumables ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Consumables ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Consumables ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Consumables ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Consumables MakeReadOnly() {
      consumedLicenses_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Consumables prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Consumables, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Consumables cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Consumables result;
      
      private Consumables PrepareBuilder() {
        if (resultIsReadOnly) {
          Consumables original = result;
          result = new Consumables();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Consumables MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Account.Consumables.Descriptor; }
      }
      
      public override Consumables DefaultInstanceForType {
        get { return global::D3.Account.Consumables.DefaultInstance; }
      }
      
      public override Consumables BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Consumables) {
          return MergeFrom((Consumables) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Consumables other) {
        if (other == global::D3.Account.Consumables.DefaultInstance) return this;
        PrepareBuilder();
        if (other.consumedLicenses_.Count != 0) {
          result.consumedLicenses_.Add(other.consumedLicenses_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_consumablesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _consumablesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.consumedLicenses_, global::D3.Account.Consumable.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Account.Consumable> ConsumedLicensesList {
        get { return PrepareBuilder().consumedLicenses_; }
      }
      public int ConsumedLicensesCount {
        get { return result.ConsumedLicensesCount; }
      }
      public global::D3.Account.Consumable GetConsumedLicenses(int index) {
        return result.GetConsumedLicenses(index);
      }
      public Builder SetConsumedLicenses(int index, global::D3.Account.Consumable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.consumedLicenses_[index] = value;
        return this;
      }
      public Builder SetConsumedLicenses(int index, global::D3.Account.Consumable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.consumedLicenses_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddConsumedLicenses(global::D3.Account.Consumable value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.consumedLicenses_.Add(value);
        return this;
      }
      public Builder AddConsumedLicenses(global::D3.Account.Consumable.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.consumedLicenses_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeConsumedLicenses(scg::IEnumerable<global::D3.Account.Consumable> values) {
        PrepareBuilder();
        result.consumedLicenses_.Add(values);
        return this;
      }
      public Builder ClearConsumedLicenses() {
        PrepareBuilder();
        result.consumedLicenses_.Clear();
        return this;
      }
    }
    static Consumables() {
      object.ReferenceEquals(global::D3.Account.Account.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
