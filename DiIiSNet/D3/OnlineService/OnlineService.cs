// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.OnlineService {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class OnlineService {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_EntityId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.EntityId, global::D3.OnlineService.EntityId.Builder> internal__static_D3_OnlineService_EntityId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_GameId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.GameId, global::D3.OnlineService.GameId.Builder> internal__static_D3_OnlineService_GameId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_ItemId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ItemId, global::D3.OnlineService.ItemId.Builder> internal__static_D3_OnlineService_ItemId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_GameAccountHandle__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.GameAccountHandle, global::D3.OnlineService.GameAccountHandle.Builder> internal__static_D3_OnlineService_GameAccountHandle__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_HeroId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.HeroId, global::D3.OnlineService.HeroId.Builder> internal__static_D3_OnlineService_HeroId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_ChannelId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ChannelId, global::D3.OnlineService.ChannelId.Builder> internal__static_D3_OnlineService_ChannelId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_ChannelId_Host__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ChannelId.Types.Host, global::D3.OnlineService.ChannelId.Types.Host.Builder> internal__static_D3_OnlineService_ChannelId_Host__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_CampaignOrAdventureModeCreateParams__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.CampaignOrAdventureModeCreateParams, global::D3.OnlineService.CampaignOrAdventureModeCreateParams.Builder> internal__static_D3_OnlineService_CampaignOrAdventureModeCreateParams__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_PvPCreateParams__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.PvPCreateParams, global::D3.OnlineService.PvPCreateParams.Builder> internal__static_D3_OnlineService_PvPCreateParams__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_ChallengeCreateParams__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ChallengeCreateParams, global::D3.OnlineService.ChallengeCreateParams.Builder> internal__static_D3_OnlineService_ChallengeCreateParams__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_GameCreateParams__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.GameCreateParams, global::D3.OnlineService.GameCreateParams.Builder> internal__static_D3_OnlineService_GameCreateParams__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_HeroCreateParams__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.HeroCreateParams, global::D3.OnlineService.HeroCreateParams.Builder> internal__static_D3_OnlineService_HeroCreateParams__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_ContentHandle__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ContentHandle, global::D3.OnlineService.ContentHandle.Builder> internal__static_D3_OnlineService_ContentHandle__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_ContentLicense__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ContentLicense, global::D3.OnlineService.ContentLicense.Builder> internal__static_D3_OnlineService_ContentLicense__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_OnlineService_ContentLicenses__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ContentLicenses, global::D3.OnlineService.ContentLicenses.Builder> internal__static_D3_OnlineService_ContentLicenses__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static OnlineService() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChNPbmxpbmVTZXJ2aWNlLnByb3RvEhBEMy5PbmxpbmVTZXJ2aWNlIkAKCEVu" + 
          "dGl0eUlkEhoKB2lkX2hpZ2gYASACKAQ6ATBSBmlkSGlnaBIYCgZpZF9sb3cY" + 
          "AiACKAQ6ATBSBWlkTG93Iv0CCgZHYW1lSWQSLgoPbWF0Y2htYWtlcl9ob3N0" + 
          "GAEgASgEOgEwQgIYAVIObWF0Y2htYWtlckhvc3QSMAoQbWF0Y2htYWtlcl9w" + 
          "cm94eRgCIAEoBDoBMEICGAFSD21hdGNobWFrZXJQcm94eRIqCg1tYXRjaG1h" + 
          "a2VyX2lkGAUgASgNOgEwQgIYAVIMbWF0Y2htYWtlcklkEi4KD2dhbWVzZXJ2" + 
          "ZXJfaG9zdBgDIAEoBDoBMEICGAFSDmdhbWVzZXJ2ZXJIb3N0EjAKEGdhbWVz" + 
          "ZXJ2ZXJfcHJveHkYBCABKAQ6ATBCAhgBUg9nYW1lc2VydmVyUHJveHkSKwoQ" + 
          "Z2FtZV9pbnN0YW5jZV9pZBgGIAEoDToBMFIOZ2FtZUluc3RhbmNlSWQSKgoP" + 
          "bWF0Y2htYWtlcl9ndWlkGAcgASgEOgEwUg5tYXRjaG1ha2VyR3VpZBIqCg9n" + 
          "YW1lc2VydmVyX2d1aWQYCCABKAQ6ATBSDmdhbWVzZXJ2ZXJHdWlkIj4KBkl0" + 
          "ZW1JZBIaCgdpZF9oaWdoGAEgAigEOgEwUgZpZEhpZ2gSGAoGaWRfbG93GAIg" + 
          "AigEOgEwUgVpZExvdyJeChFHYW1lQWNjb3VudEhhbmRsZRIRCgJpZBgBIAIo" + 
          "BzoBMFICaWQSGwoHcHJvZ3JhbRgCIAIoBzoBMFIHcHJvZ3JhbRIZCgZyZWdp" + 
          "b24YAyACKA06ATBSBnJlZ2lvbiIkCgZIZXJvSWQSGgoHaGVyb19pZBgBIAIo" + 
          "BDoBMFIGaGVyb0lkIpkBCglDaGFubmVsSWQSEgoEdHlwZRgBIAEoDVIEdHlw" + 
          "ZRI0CgRob3N0GAIgASgLMiAuRDMuT25saW5lU2VydmljZS5DaGFubmVsSWQu" + 
          "SG9zdFIEaG9zdBIOCgJpZBgDIAEoB1ICaWQaMgoESG9zdBIUCgVsYWJlbBgB" + 
          "IAIoDVIFbGFiZWwSFAoFZXBvY2gYAiACKA1SBWVwb2NoIqMECiNDYW1wYWln" + 
          "bk9yQWR2ZW50dXJlTW9kZUNyZWF0ZVBhcmFtcxITCgNhY3QYASACKBE6ATBS" + 
          "A2FjdBIfCglzbm9fcXVlc3QYAiACKA86Ai0xUghzbm9RdWVzdBImCg1xdWVz" + 
          "dF9zdGVwX2lkGAMgAigFOgItMVILcXVlc3RTdGVwSWQSUgoYcmVzdW1lX2Zy" + 
          "b21fc2F2ZV9oZXJvX2lkGAQgASgLMhouRDMuT25saW5lU2VydmljZS5FbnRp" + 
          "dHlJZFIUcmVzdW1lRnJvbVNhdmVIZXJvSWQSQgoaZGVwcmVjYXRlZF9vcGVu" + 
          "X3RvX2ZyaWVuZHMYBSABKAg6BWZhbHNlUhdkZXByZWNhdGVkT3BlblRvRnJp" + 
          "ZW5kcxJKCiJkZXByZWNhdGVkX29wZW5fdG9fZnJpZW5kc19tZXNzYWdlGAYg" + 
          "ASgJUh5kZXByZWNhdGVkT3BlblRvRnJpZW5kc01lc3NhZ2USJQoOaGFuZGlj" + 
          "YXBfbGV2ZWwYByABKAVSDWhhbmRpY2FwTGV2ZWwSGQoIZ2FtZV90YWcYCCAB" + 
          "KAlSB2dhbWVUYWcSJwoNbW9uc3Rlcl9sZXZlbBgJIAEoBToCLTFSDG1vbnN0" + 
          "ZXJMZXZlbBJPCiRkZXByZWNhdGVkX3dlZWtseV9jaGFsbGVuZ2Vfb3ZlcnJp" + 
          "ZGUYCiABKAVSIWRlcHJlY2F0ZWRXZWVrbHlDaGFsbGVuZ2VPdmVycmlkZSIy" + 
          "Cg9QdlBDcmVhdGVQYXJhbXMSHwoJc25vX3dvcmxkGAEgAigPOgItMVIIc25v" + 
          "V29ybGQiRgoVQ2hhbGxlbmdlQ3JlYXRlUGFyYW1zEi0KEmNoYWxsZW5nZV9v" + 
          "dmVycmlkZRgBIAEoDVIRY2hhbGxlbmdlT3ZlcnJpZGUihQMKEEdhbWVDcmVh" + 
          "dGVQYXJhbXMSGwoJZ2FtZV90eXBlGAEgAigRUghnYW1lVHlwZRIoCg5jcmVh" + 
          "dGlvbl9mbGFncxgCIAIoDToBMFINY3JlYXRpb25GbGFncxJyChpjYW1wYWln" + 
          "bl9vcl9hZHZlbnR1cmVfbW9kZRgDIAEoCzI1LkQzLk9ubGluZVNlcnZpY2Uu" + 
          "Q2FtcGFpZ25PckFkdmVudHVyZU1vZGVDcmVhdGVQYXJhbXNSF2NhbXBhaWdu" + 
          "T3JBZHZlbnR1cmVNb2RlEjMKA3B2cBgEIAEoCzIhLkQzLk9ubGluZVNlcnZp" + 
          "Y2UuUHZQQ3JlYXRlUGFyYW1zUgNwdnASEgoEbmFtZRgFIAEoCVIEbmFtZRIm" + 
          "Cg9vcGVuX3RvX2ZyaWVuZHMYBiABKAhSDW9wZW5Ub0ZyaWVuZHMSRQoJY2hh" + 
          "bGxlbmdlGAcgASgLMicuRDMuT25saW5lU2VydmljZS5DaGFsbGVuZ2VDcmVh" + 
          "dGVQYXJhbXNSCWNoYWxsZW5nZSK5AQoQSGVyb0NyZWF0ZVBhcmFtcxISCgRu" + 
          "YW1lGAEgAigJUgRuYW1lEiEKCmdiaWRfY2xhc3MYAiACKA86Ai0xUglnYmlk" + 
          "Q2xhc3MSJgoLaXNfaGFyZGNvcmUYAyACKAg6BWZhbHNlUgppc0hhcmRjb3Jl" + 
          "EiIKCWlzX2ZlbWFsZRgEIAIoCDoFZmFsc2VSCGlzRmVtYWxlEiIKCWlzX3Nl" + 
          "YXNvbhgFIAIoCDoFZmFsc2VSCGlzU2Vhc29uIlEKDUNvbnRlbnRIYW5kbGUS" + 
          "EgoEaGFzaBgBIAEoCVIEaGFzaBIUCgV1c2FnZRgCIAEoCVIFdXNhZ2USFgoG" + 
          "cmVnaW9uGAMgASgJUgZyZWdpb24ihAEKDkNvbnRlbnRMaWNlbnNlEg4KAmlk" + 
          "GAEgAigFUgJpZBIfCgtleHBpcmVfdGltZRgCIAEoBFIKZXhwaXJlVGltZRIa" + 
          "CghxdWFudGl0eRgDIAEoDVIIcXVhbnRpdHkSJQoOcHJvcGVydHlfZmxhZ3MY" + 
          "BCABKA1SDXByb3BlcnR5RmxhZ3MiTwoPQ29udGVudExpY2Vuc2VzEjwKCGxp" + 
          "Y2Vuc2VzGAEgAygLMiAuRDMuT25saW5lU2VydmljZS5Db250ZW50TGljZW5z" + 
          "ZVIIbGljZW5zZXM=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_OnlineService_EntityId__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_OnlineService_EntityId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.EntityId, global::D3.OnlineService.EntityId.Builder>(internal__static_D3_OnlineService_EntityId__Descriptor,
                new string[] { "IdHigh", "IdLow", });
        internal__static_D3_OnlineService_GameId__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_OnlineService_GameId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.GameId, global::D3.OnlineService.GameId.Builder>(internal__static_D3_OnlineService_GameId__Descriptor,
                new string[] { "MatchmakerHost", "MatchmakerProxy", "MatchmakerId", "GameserverHost", "GameserverProxy", "GameInstanceId", "MatchmakerGuid", "GameserverGuid", });
        internal__static_D3_OnlineService_ItemId__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_OnlineService_ItemId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ItemId, global::D3.OnlineService.ItemId.Builder>(internal__static_D3_OnlineService_ItemId__Descriptor,
                new string[] { "IdHigh", "IdLow", });
        internal__static_D3_OnlineService_GameAccountHandle__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_OnlineService_GameAccountHandle__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.GameAccountHandle, global::D3.OnlineService.GameAccountHandle.Builder>(internal__static_D3_OnlineService_GameAccountHandle__Descriptor,
                new string[] { "Id", "Program", "Region", });
        internal__static_D3_OnlineService_HeroId__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_OnlineService_HeroId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.HeroId, global::D3.OnlineService.HeroId.Builder>(internal__static_D3_OnlineService_HeroId__Descriptor,
                new string[] { "HeroId_", });
        internal__static_D3_OnlineService_ChannelId__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_OnlineService_ChannelId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ChannelId, global::D3.OnlineService.ChannelId.Builder>(internal__static_D3_OnlineService_ChannelId__Descriptor,
                new string[] { "Type", "Host", "Id", });
        internal__static_D3_OnlineService_ChannelId_Host__Descriptor = internal__static_D3_OnlineService_ChannelId__Descriptor.NestedTypes[0];
        internal__static_D3_OnlineService_ChannelId_Host__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ChannelId.Types.Host, global::D3.OnlineService.ChannelId.Types.Host.Builder>(internal__static_D3_OnlineService_ChannelId_Host__Descriptor,
                new string[] { "Label", "Epoch", });
        internal__static_D3_OnlineService_CampaignOrAdventureModeCreateParams__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_OnlineService_CampaignOrAdventureModeCreateParams__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.CampaignOrAdventureModeCreateParams, global::D3.OnlineService.CampaignOrAdventureModeCreateParams.Builder>(internal__static_D3_OnlineService_CampaignOrAdventureModeCreateParams__Descriptor,
                new string[] { "Act", "SnoQuest", "QuestStepId", "ResumeFromSaveHeroId", "DeprecatedOpenToFriends", "DeprecatedOpenToFriendsMessage", "HandicapLevel", "GameTag", "MonsterLevel", "DeprecatedWeeklyChallengeOverride", });
        internal__static_D3_OnlineService_PvPCreateParams__Descriptor = Descriptor.MessageTypes[7];
        internal__static_D3_OnlineService_PvPCreateParams__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.PvPCreateParams, global::D3.OnlineService.PvPCreateParams.Builder>(internal__static_D3_OnlineService_PvPCreateParams__Descriptor,
                new string[] { "SnoWorld", });
        internal__static_D3_OnlineService_ChallengeCreateParams__Descriptor = Descriptor.MessageTypes[8];
        internal__static_D3_OnlineService_ChallengeCreateParams__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ChallengeCreateParams, global::D3.OnlineService.ChallengeCreateParams.Builder>(internal__static_D3_OnlineService_ChallengeCreateParams__Descriptor,
                new string[] { "ChallengeOverride", });
        internal__static_D3_OnlineService_GameCreateParams__Descriptor = Descriptor.MessageTypes[9];
        internal__static_D3_OnlineService_GameCreateParams__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.GameCreateParams, global::D3.OnlineService.GameCreateParams.Builder>(internal__static_D3_OnlineService_GameCreateParams__Descriptor,
                new string[] { "GameType", "CreationFlags", "CampaignOrAdventureMode", "Pvp", "Name", "OpenToFriends", "Challenge", });
        internal__static_D3_OnlineService_HeroCreateParams__Descriptor = Descriptor.MessageTypes[10];
        internal__static_D3_OnlineService_HeroCreateParams__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.HeroCreateParams, global::D3.OnlineService.HeroCreateParams.Builder>(internal__static_D3_OnlineService_HeroCreateParams__Descriptor,
                new string[] { "Name", "GbidClass", "IsHardcore", "IsFemale", "IsSeason", });
        internal__static_D3_OnlineService_ContentHandle__Descriptor = Descriptor.MessageTypes[11];
        internal__static_D3_OnlineService_ContentHandle__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ContentHandle, global::D3.OnlineService.ContentHandle.Builder>(internal__static_D3_OnlineService_ContentHandle__Descriptor,
                new string[] { "Hash", "Usage", "Region", });
        internal__static_D3_OnlineService_ContentLicense__Descriptor = Descriptor.MessageTypes[12];
        internal__static_D3_OnlineService_ContentLicense__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ContentLicense, global::D3.OnlineService.ContentLicense.Builder>(internal__static_D3_OnlineService_ContentLicense__Descriptor,
                new string[] { "Id", "ExpireTime", "Quantity", "PropertyFlags", });
        internal__static_D3_OnlineService_ContentLicenses__Descriptor = Descriptor.MessageTypes[13];
        internal__static_D3_OnlineService_ContentLicenses__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.OnlineService.ContentLicenses, global::D3.OnlineService.ContentLicenses.Builder>(internal__static_D3_OnlineService_ContentLicenses__Descriptor,
                new string[] { "Licenses", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class EntityId : pb::GeneratedMessage<EntityId, EntityId.Builder> {
    private EntityId() { }
    private static readonly EntityId defaultInstance = new EntityId().MakeReadOnly();
    private static readonly string[] _entityIdFieldNames = new string[] { "id_high", "id_low" };
    private static readonly uint[] _entityIdFieldTags = new uint[] { 8, 16 };
    public static EntityId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EntityId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EntityId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_EntityId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EntityId, EntityId.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_EntityId__FieldAccessorTable; }
    }
    
    public const int IdHighFieldNumber = 1;
    private bool hasIdHigh;
    private ulong idHigh_;
    public bool HasIdHigh {
      get { return hasIdHigh; }
    }
    public ulong IdHigh {
      get { return idHigh_; }
    }
    
    public const int IdLowFieldNumber = 2;
    private bool hasIdLow;
    private ulong idLow_;
    public bool HasIdLow {
      get { return hasIdLow; }
    }
    public ulong IdLow {
      get { return idLow_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdHigh) return false;
        if (!hasIdLow) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _entityIdFieldNames;
      if (hasIdHigh) {
        output.WriteUInt64(1, field_names[0], IdHigh);
      }
      if (hasIdLow) {
        output.WriteUInt64(2, field_names[1], IdLow);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIdHigh) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, IdHigh);
        }
        if (hasIdLow) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, IdLow);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EntityId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EntityId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EntityId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EntityId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EntityId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EntityId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EntityId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EntityId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EntityId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EntityId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EntityId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EntityId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<EntityId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EntityId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EntityId result;
      
      private EntityId PrepareBuilder() {
        if (resultIsReadOnly) {
          EntityId original = result;
          result = new EntityId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EntityId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.EntityId.Descriptor; }
      }
      
      public override EntityId DefaultInstanceForType {
        get { return global::D3.OnlineService.EntityId.DefaultInstance; }
      }
      
      public override EntityId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EntityId) {
          return MergeFrom((EntityId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EntityId other) {
        if (other == global::D3.OnlineService.EntityId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdHigh) {
          IdHigh = other.IdHigh;
        }
        if (other.HasIdLow) {
          IdLow = other.IdLow;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_entityIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _entityIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdHigh = input.ReadUInt64(ref result.idHigh_);
              break;
            }
            case 16: {
              result.hasIdLow = input.ReadUInt64(ref result.idLow_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdHigh {
        get { return result.hasIdHigh; }
      }
      public ulong IdHigh {
        get { return result.IdHigh; }
        set { SetIdHigh(value); }
      }
      public Builder SetIdHigh(ulong value) {
        PrepareBuilder();
        result.hasIdHigh = true;
        result.idHigh_ = value;
        return this;
      }
      public Builder ClearIdHigh() {
        PrepareBuilder();
        result.hasIdHigh = false;
        result.idHigh_ = 0UL;
        return this;
      }
      
      public bool HasIdLow {
        get { return result.hasIdLow; }
      }
      public ulong IdLow {
        get { return result.IdLow; }
        set { SetIdLow(value); }
      }
      public Builder SetIdLow(ulong value) {
        PrepareBuilder();
        result.hasIdLow = true;
        result.idLow_ = value;
        return this;
      }
      public Builder ClearIdLow() {
        PrepareBuilder();
        result.hasIdLow = false;
        result.idLow_ = 0UL;
        return this;
      }
    }
    static EntityId() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameId : pb::GeneratedMessage<GameId, GameId.Builder> {
    private GameId() { }
    private static readonly GameId defaultInstance = new GameId().MakeReadOnly();
    private static readonly string[] _gameIdFieldNames = new string[] { "game_instance_id", "gameserver_guid", "gameserver_host", "gameserver_proxy", "matchmaker_guid", "matchmaker_host", "matchmaker_id", "matchmaker_proxy" };
    private static readonly uint[] _gameIdFieldTags = new uint[] { 48, 64, 24, 32, 56, 8, 40, 16 };
    public static GameId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_GameId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameId, GameId.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_GameId__FieldAccessorTable; }
    }
    
    public const int MatchmakerHostFieldNumber = 1;
    private bool hasMatchmakerHost;
    private ulong matchmakerHost_;
    [global::System.ObsoleteAttribute()]
    public bool HasMatchmakerHost {
      get { return hasMatchmakerHost; }
    }
    [global::System.ObsoleteAttribute()]
    public ulong MatchmakerHost {
      get { return matchmakerHost_; }
    }
    
    public const int MatchmakerProxyFieldNumber = 2;
    private bool hasMatchmakerProxy;
    private ulong matchmakerProxy_;
    [global::System.ObsoleteAttribute()]
    public bool HasMatchmakerProxy {
      get { return hasMatchmakerProxy; }
    }
    [global::System.ObsoleteAttribute()]
    public ulong MatchmakerProxy {
      get { return matchmakerProxy_; }
    }
    
    public const int MatchmakerIdFieldNumber = 5;
    private bool hasMatchmakerId;
    private uint matchmakerId_;
    [global::System.ObsoleteAttribute()]
    public bool HasMatchmakerId {
      get { return hasMatchmakerId; }
    }
    [global::System.ObsoleteAttribute()]
    public uint MatchmakerId {
      get { return matchmakerId_; }
    }
    
    public const int GameserverHostFieldNumber = 3;
    private bool hasGameserverHost;
    private ulong gameserverHost_;
    [global::System.ObsoleteAttribute()]
    public bool HasGameserverHost {
      get { return hasGameserverHost; }
    }
    [global::System.ObsoleteAttribute()]
    public ulong GameserverHost {
      get { return gameserverHost_; }
    }
    
    public const int GameserverProxyFieldNumber = 4;
    private bool hasGameserverProxy;
    private ulong gameserverProxy_;
    [global::System.ObsoleteAttribute()]
    public bool HasGameserverProxy {
      get { return hasGameserverProxy; }
    }
    [global::System.ObsoleteAttribute()]
    public ulong GameserverProxy {
      get { return gameserverProxy_; }
    }
    
    public const int GameInstanceIdFieldNumber = 6;
    private bool hasGameInstanceId;
    private uint gameInstanceId_;
    public bool HasGameInstanceId {
      get { return hasGameInstanceId; }
    }
    public uint GameInstanceId {
      get { return gameInstanceId_; }
    }
    
    public const int MatchmakerGuidFieldNumber = 7;
    private bool hasMatchmakerGuid;
    private ulong matchmakerGuid_;
    public bool HasMatchmakerGuid {
      get { return hasMatchmakerGuid; }
    }
    public ulong MatchmakerGuid {
      get { return matchmakerGuid_; }
    }
    
    public const int GameserverGuidFieldNumber = 8;
    private bool hasGameserverGuid;
    private ulong gameserverGuid_;
    public bool HasGameserverGuid {
      get { return hasGameserverGuid; }
    }
    public ulong GameserverGuid {
      get { return gameserverGuid_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameIdFieldNames;
      if (hasMatchmakerHost) {
        output.WriteUInt64(1, field_names[5], MatchmakerHost);
      }
      if (hasMatchmakerProxy) {
        output.WriteUInt64(2, field_names[7], MatchmakerProxy);
      }
      if (hasGameserverHost) {
        output.WriteUInt64(3, field_names[2], GameserverHost);
      }
      if (hasGameserverProxy) {
        output.WriteUInt64(4, field_names[3], GameserverProxy);
      }
      if (hasMatchmakerId) {
        output.WriteUInt32(5, field_names[6], MatchmakerId);
      }
      if (hasGameInstanceId) {
        output.WriteUInt32(6, field_names[0], GameInstanceId);
      }
      if (hasMatchmakerGuid) {
        output.WriteUInt64(7, field_names[4], MatchmakerGuid);
      }
      if (hasGameserverGuid) {
        output.WriteUInt64(8, field_names[1], GameserverGuid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMatchmakerHost) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, MatchmakerHost);
        }
        if (hasMatchmakerProxy) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, MatchmakerProxy);
        }
        if (hasMatchmakerId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, MatchmakerId);
        }
        if (hasGameserverHost) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, GameserverHost);
        }
        if (hasGameserverProxy) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, GameserverProxy);
        }
        if (hasGameInstanceId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, GameInstanceId);
        }
        if (hasMatchmakerGuid) {
          size += pb::CodedOutputStream.ComputeUInt64Size(7, MatchmakerGuid);
        }
        if (hasGameserverGuid) {
          size += pb::CodedOutputStream.ComputeUInt64Size(8, GameserverGuid);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameId result;
      
      private GameId PrepareBuilder() {
        if (resultIsReadOnly) {
          GameId original = result;
          result = new GameId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.GameId.Descriptor; }
      }
      
      public override GameId DefaultInstanceForType {
        get { return global::D3.OnlineService.GameId.DefaultInstance; }
      }
      
      public override GameId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameId) {
          return MergeFrom((GameId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameId other) {
        if (other == global::D3.OnlineService.GameId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMatchmakerHost) {
          MatchmakerHost = other.MatchmakerHost;
        }
        if (other.HasMatchmakerProxy) {
          MatchmakerProxy = other.MatchmakerProxy;
        }
        if (other.HasMatchmakerId) {
          MatchmakerId = other.MatchmakerId;
        }
        if (other.HasGameserverHost) {
          GameserverHost = other.GameserverHost;
        }
        if (other.HasGameserverProxy) {
          GameserverProxy = other.GameserverProxy;
        }
        if (other.HasGameInstanceId) {
          GameInstanceId = other.GameInstanceId;
        }
        if (other.HasMatchmakerGuid) {
          MatchmakerGuid = other.MatchmakerGuid;
        }
        if (other.HasGameserverGuid) {
          GameserverGuid = other.GameserverGuid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMatchmakerHost = input.ReadUInt64(ref result.matchmakerHost_);
              break;
            }
            case 16: {
              result.hasMatchmakerProxy = input.ReadUInt64(ref result.matchmakerProxy_);
              break;
            }
            case 24: {
              result.hasGameserverHost = input.ReadUInt64(ref result.gameserverHost_);
              break;
            }
            case 32: {
              result.hasGameserverProxy = input.ReadUInt64(ref result.gameserverProxy_);
              break;
            }
            case 40: {
              result.hasMatchmakerId = input.ReadUInt32(ref result.matchmakerId_);
              break;
            }
            case 48: {
              result.hasGameInstanceId = input.ReadUInt32(ref result.gameInstanceId_);
              break;
            }
            case 56: {
              result.hasMatchmakerGuid = input.ReadUInt64(ref result.matchmakerGuid_);
              break;
            }
            case 64: {
              result.hasGameserverGuid = input.ReadUInt64(ref result.gameserverGuid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      [global::System.ObsoleteAttribute()]
      public bool HasMatchmakerHost {
        get { return result.hasMatchmakerHost; }
      }
      [global::System.ObsoleteAttribute()]
      public ulong MatchmakerHost {
        get { return result.MatchmakerHost; }
        set { SetMatchmakerHost(value); }
      }
      [global::System.ObsoleteAttribute()]
      public Builder SetMatchmakerHost(ulong value) {
        PrepareBuilder();
        result.hasMatchmakerHost = true;
        result.matchmakerHost_ = value;
        return this;
      }
      [global::System.ObsoleteAttribute()]
      public Builder ClearMatchmakerHost() {
        PrepareBuilder();
        result.hasMatchmakerHost = false;
        result.matchmakerHost_ = 0UL;
        return this;
      }
      
      [global::System.ObsoleteAttribute()]
      public bool HasMatchmakerProxy {
        get { return result.hasMatchmakerProxy; }
      }
      [global::System.ObsoleteAttribute()]
      public ulong MatchmakerProxy {
        get { return result.MatchmakerProxy; }
        set { SetMatchmakerProxy(value); }
      }
      [global::System.ObsoleteAttribute()]
      public Builder SetMatchmakerProxy(ulong value) {
        PrepareBuilder();
        result.hasMatchmakerProxy = true;
        result.matchmakerProxy_ = value;
        return this;
      }
      [global::System.ObsoleteAttribute()]
      public Builder ClearMatchmakerProxy() {
        PrepareBuilder();
        result.hasMatchmakerProxy = false;
        result.matchmakerProxy_ = 0UL;
        return this;
      }
      
      [global::System.ObsoleteAttribute()]
      public bool HasMatchmakerId {
        get { return result.hasMatchmakerId; }
      }
      [global::System.ObsoleteAttribute()]
      public uint MatchmakerId {
        get { return result.MatchmakerId; }
        set { SetMatchmakerId(value); }
      }
      [global::System.ObsoleteAttribute()]
      public Builder SetMatchmakerId(uint value) {
        PrepareBuilder();
        result.hasMatchmakerId = true;
        result.matchmakerId_ = value;
        return this;
      }
      [global::System.ObsoleteAttribute()]
      public Builder ClearMatchmakerId() {
        PrepareBuilder();
        result.hasMatchmakerId = false;
        result.matchmakerId_ = 0;
        return this;
      }
      
      [global::System.ObsoleteAttribute()]
      public bool HasGameserverHost {
        get { return result.hasGameserverHost; }
      }
      [global::System.ObsoleteAttribute()]
      public ulong GameserverHost {
        get { return result.GameserverHost; }
        set { SetGameserverHost(value); }
      }
      [global::System.ObsoleteAttribute()]
      public Builder SetGameserverHost(ulong value) {
        PrepareBuilder();
        result.hasGameserverHost = true;
        result.gameserverHost_ = value;
        return this;
      }
      [global::System.ObsoleteAttribute()]
      public Builder ClearGameserverHost() {
        PrepareBuilder();
        result.hasGameserverHost = false;
        result.gameserverHost_ = 0UL;
        return this;
      }
      
      [global::System.ObsoleteAttribute()]
      public bool HasGameserverProxy {
        get { return result.hasGameserverProxy; }
      }
      [global::System.ObsoleteAttribute()]
      public ulong GameserverProxy {
        get { return result.GameserverProxy; }
        set { SetGameserverProxy(value); }
      }
      [global::System.ObsoleteAttribute()]
      public Builder SetGameserverProxy(ulong value) {
        PrepareBuilder();
        result.hasGameserverProxy = true;
        result.gameserverProxy_ = value;
        return this;
      }
      [global::System.ObsoleteAttribute()]
      public Builder ClearGameserverProxy() {
        PrepareBuilder();
        result.hasGameserverProxy = false;
        result.gameserverProxy_ = 0UL;
        return this;
      }
      
      public bool HasGameInstanceId {
        get { return result.hasGameInstanceId; }
      }
      public uint GameInstanceId {
        get { return result.GameInstanceId; }
        set { SetGameInstanceId(value); }
      }
      public Builder SetGameInstanceId(uint value) {
        PrepareBuilder();
        result.hasGameInstanceId = true;
        result.gameInstanceId_ = value;
        return this;
      }
      public Builder ClearGameInstanceId() {
        PrepareBuilder();
        result.hasGameInstanceId = false;
        result.gameInstanceId_ = 0;
        return this;
      }
      
      public bool HasMatchmakerGuid {
        get { return result.hasMatchmakerGuid; }
      }
      public ulong MatchmakerGuid {
        get { return result.MatchmakerGuid; }
        set { SetMatchmakerGuid(value); }
      }
      public Builder SetMatchmakerGuid(ulong value) {
        PrepareBuilder();
        result.hasMatchmakerGuid = true;
        result.matchmakerGuid_ = value;
        return this;
      }
      public Builder ClearMatchmakerGuid() {
        PrepareBuilder();
        result.hasMatchmakerGuid = false;
        result.matchmakerGuid_ = 0UL;
        return this;
      }
      
      public bool HasGameserverGuid {
        get { return result.hasGameserverGuid; }
      }
      public ulong GameserverGuid {
        get { return result.GameserverGuid; }
        set { SetGameserverGuid(value); }
      }
      public Builder SetGameserverGuid(ulong value) {
        PrepareBuilder();
        result.hasGameserverGuid = true;
        result.gameserverGuid_ = value;
        return this;
      }
      public Builder ClearGameserverGuid() {
        PrepareBuilder();
        result.hasGameserverGuid = false;
        result.gameserverGuid_ = 0UL;
        return this;
      }
    }
    static GameId() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ItemId : pb::GeneratedMessage<ItemId, ItemId.Builder> {
    private ItemId() { }
    private static readonly ItemId defaultInstance = new ItemId().MakeReadOnly();
    private static readonly string[] _itemIdFieldNames = new string[] { "id_high", "id_low" };
    private static readonly uint[] _itemIdFieldTags = new uint[] { 8, 16 };
    public static ItemId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ItemId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ItemId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ItemId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ItemId, ItemId.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ItemId__FieldAccessorTable; }
    }
    
    public const int IdHighFieldNumber = 1;
    private bool hasIdHigh;
    private ulong idHigh_;
    public bool HasIdHigh {
      get { return hasIdHigh; }
    }
    public ulong IdHigh {
      get { return idHigh_; }
    }
    
    public const int IdLowFieldNumber = 2;
    private bool hasIdLow;
    private ulong idLow_;
    public bool HasIdLow {
      get { return hasIdLow; }
    }
    public ulong IdLow {
      get { return idLow_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdHigh) return false;
        if (!hasIdLow) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _itemIdFieldNames;
      if (hasIdHigh) {
        output.WriteUInt64(1, field_names[0], IdHigh);
      }
      if (hasIdLow) {
        output.WriteUInt64(2, field_names[1], IdLow);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIdHigh) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, IdHigh);
        }
        if (hasIdLow) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, IdLow);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ItemId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ItemId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ItemId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ItemId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ItemId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ItemId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ItemId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ItemId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ItemId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ItemId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ItemId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ItemId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ItemId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ItemId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ItemId result;
      
      private ItemId PrepareBuilder() {
        if (resultIsReadOnly) {
          ItemId original = result;
          result = new ItemId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ItemId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.ItemId.Descriptor; }
      }
      
      public override ItemId DefaultInstanceForType {
        get { return global::D3.OnlineService.ItemId.DefaultInstance; }
      }
      
      public override ItemId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ItemId) {
          return MergeFrom((ItemId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ItemId other) {
        if (other == global::D3.OnlineService.ItemId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdHigh) {
          IdHigh = other.IdHigh;
        }
        if (other.HasIdLow) {
          IdLow = other.IdLow;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_itemIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _itemIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdHigh = input.ReadUInt64(ref result.idHigh_);
              break;
            }
            case 16: {
              result.hasIdLow = input.ReadUInt64(ref result.idLow_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdHigh {
        get { return result.hasIdHigh; }
      }
      public ulong IdHigh {
        get { return result.IdHigh; }
        set { SetIdHigh(value); }
      }
      public Builder SetIdHigh(ulong value) {
        PrepareBuilder();
        result.hasIdHigh = true;
        result.idHigh_ = value;
        return this;
      }
      public Builder ClearIdHigh() {
        PrepareBuilder();
        result.hasIdHigh = false;
        result.idHigh_ = 0UL;
        return this;
      }
      
      public bool HasIdLow {
        get { return result.hasIdLow; }
      }
      public ulong IdLow {
        get { return result.IdLow; }
        set { SetIdLow(value); }
      }
      public Builder SetIdLow(ulong value) {
        PrepareBuilder();
        result.hasIdLow = true;
        result.idLow_ = value;
        return this;
      }
      public Builder ClearIdLow() {
        PrepareBuilder();
        result.hasIdLow = false;
        result.idLow_ = 0UL;
        return this;
      }
    }
    static ItemId() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameAccountHandle : pb::GeneratedMessage<GameAccountHandle, GameAccountHandle.Builder> {
    private GameAccountHandle() { }
    private static readonly GameAccountHandle defaultInstance = new GameAccountHandle().MakeReadOnly();
    private static readonly string[] _gameAccountHandleFieldNames = new string[] { "id", "program", "region" };
    private static readonly uint[] _gameAccountHandleFieldTags = new uint[] { 13, 21, 24 };
    public static GameAccountHandle DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameAccountHandle DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameAccountHandle ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_GameAccountHandle__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameAccountHandle, GameAccountHandle.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_GameAccountHandle__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public const int ProgramFieldNumber = 2;
    private bool hasProgram;
    private uint program_;
    public bool HasProgram {
      get { return hasProgram; }
    }
    public uint Program {
      get { return program_; }
    }
    
    public const int RegionFieldNumber = 3;
    private bool hasRegion;
    private uint region_;
    public bool HasRegion {
      get { return hasRegion; }
    }
    public uint Region {
      get { return region_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasProgram) return false;
        if (!hasRegion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameAccountHandleFieldNames;
      if (hasId) {
        output.WriteFixed32(1, field_names[0], Id);
      }
      if (hasProgram) {
        output.WriteFixed32(2, field_names[1], Program);
      }
      if (hasRegion) {
        output.WriteUInt32(3, field_names[2], Region);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, Id);
        }
        if (hasProgram) {
          size += pb::CodedOutputStream.ComputeFixed32Size(2, Program);
        }
        if (hasRegion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Region);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameAccountHandle ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountHandle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountHandle ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameAccountHandle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameAccountHandle ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountHandle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameAccountHandle ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameAccountHandle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameAccountHandle ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameAccountHandle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameAccountHandle MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameAccountHandle prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameAccountHandle, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameAccountHandle cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameAccountHandle result;
      
      private GameAccountHandle PrepareBuilder() {
        if (resultIsReadOnly) {
          GameAccountHandle original = result;
          result = new GameAccountHandle();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameAccountHandle MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.GameAccountHandle.Descriptor; }
      }
      
      public override GameAccountHandle DefaultInstanceForType {
        get { return global::D3.OnlineService.GameAccountHandle.DefaultInstance; }
      }
      
      public override GameAccountHandle BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameAccountHandle) {
          return MergeFrom((GameAccountHandle) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameAccountHandle other) {
        if (other == global::D3.OnlineService.GameAccountHandle.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasProgram) {
          Program = other.Program;
        }
        if (other.HasRegion) {
          Region = other.Region;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameAccountHandleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameAccountHandleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasId = input.ReadFixed32(ref result.id_);
              break;
            }
            case 21: {
              result.hasProgram = input.ReadFixed32(ref result.program_);
              break;
            }
            case 24: {
              result.hasRegion = input.ReadUInt32(ref result.region_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasProgram {
        get { return result.hasProgram; }
      }
      public uint Program {
        get { return result.Program; }
        set { SetProgram(value); }
      }
      public Builder SetProgram(uint value) {
        PrepareBuilder();
        result.hasProgram = true;
        result.program_ = value;
        return this;
      }
      public Builder ClearProgram() {
        PrepareBuilder();
        result.hasProgram = false;
        result.program_ = 0;
        return this;
      }
      
      public bool HasRegion {
        get { return result.hasRegion; }
      }
      public uint Region {
        get { return result.Region; }
        set { SetRegion(value); }
      }
      public Builder SetRegion(uint value) {
        PrepareBuilder();
        result.hasRegion = true;
        result.region_ = value;
        return this;
      }
      public Builder ClearRegion() {
        PrepareBuilder();
        result.hasRegion = false;
        result.region_ = 0;
        return this;
      }
    }
    static GameAccountHandle() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeroId : pb::GeneratedMessage<HeroId, HeroId.Builder> {
    private HeroId() { }
    private static readonly HeroId defaultInstance = new HeroId().MakeReadOnly();
    private static readonly string[] _heroIdFieldNames = new string[] { "hero_id" };
    private static readonly uint[] _heroIdFieldTags = new uint[] { 8 };
    public static HeroId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeroId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_HeroId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroId, HeroId.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_HeroId__FieldAccessorTable; }
    }
    
    public const int HeroId_FieldNumber = 1;
    private bool hasHeroId_;
    private ulong heroId_;
    public bool HasHeroId_ {
      get { return hasHeroId_; }
    }
    public ulong HeroId_ {
      get { return heroId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroId_) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _heroIdFieldNames;
      if (hasHeroId_) {
        output.WriteUInt64(1, field_names[0], HeroId_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroId_) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, HeroId_);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeroId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HeroId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeroId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeroId result;
      
      private HeroId PrepareBuilder() {
        if (resultIsReadOnly) {
          HeroId original = result;
          result = new HeroId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeroId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.HeroId.Descriptor; }
      }
      
      public override HeroId DefaultInstanceForType {
        get { return global::D3.OnlineService.HeroId.DefaultInstance; }
      }
      
      public override HeroId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroId) {
          return MergeFrom((HeroId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroId other) {
        if (other == global::D3.OnlineService.HeroId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId_) {
          HeroId_ = other.HeroId_;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heroIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heroIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHeroId_ = input.ReadUInt64(ref result.heroId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId_ {
        get { return result.hasHeroId_; }
      }
      public ulong HeroId_ {
        get { return result.HeroId_; }
        set { SetHeroId_(value); }
      }
      public Builder SetHeroId_(ulong value) {
        PrepareBuilder();
        result.hasHeroId_ = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId_() {
        PrepareBuilder();
        result.hasHeroId_ = false;
        result.heroId_ = 0UL;
        return this;
      }
    }
    static HeroId() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChannelId : pb::GeneratedMessage<ChannelId, ChannelId.Builder> {
    private ChannelId() { }
    private static readonly ChannelId defaultInstance = new ChannelId().MakeReadOnly();
    private static readonly string[] _channelIdFieldNames = new string[] { "host", "id", "type" };
    private static readonly uint[] _channelIdFieldTags = new uint[] { 18, 29, 8 };
    public static ChannelId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChannelId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChannelId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ChannelId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChannelId, ChannelId.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ChannelId__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Host : pb::GeneratedMessage<Host, Host.Builder> {
        private Host() { }
        private static readonly Host defaultInstance = new Host().MakeReadOnly();
        private static readonly string[] _hostFieldNames = new string[] { "epoch", "label" };
        private static readonly uint[] _hostFieldTags = new uint[] { 16, 8 };
        public static Host DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Host DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Host ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ChannelId_Host__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Host, Host.Builder> InternalFieldAccessors {
          get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ChannelId_Host__FieldAccessorTable; }
        }
        
        public const int LabelFieldNumber = 1;
        private bool hasLabel;
        private uint label_;
        public bool HasLabel {
          get { return hasLabel; }
        }
        public uint Label {
          get { return label_; }
        }
        
        public const int EpochFieldNumber = 2;
        private bool hasEpoch;
        private uint epoch_;
        public bool HasEpoch {
          get { return hasEpoch; }
        }
        public uint Epoch {
          get { return epoch_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasLabel) return false;
            if (!hasEpoch) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _hostFieldNames;
          if (hasLabel) {
            output.WriteUInt32(1, field_names[1], Label);
          }
          if (hasEpoch) {
            output.WriteUInt32(2, field_names[0], Epoch);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasLabel) {
              size += pb::CodedOutputStream.ComputeUInt32Size(1, Label);
            }
            if (hasEpoch) {
              size += pb::CodedOutputStream.ComputeUInt32Size(2, Epoch);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Host ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Host ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Host ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Host ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Host ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Host ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Host ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Host ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Host ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Host ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Host MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Host prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Host, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Host cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Host result;
          
          private Host PrepareBuilder() {
            if (resultIsReadOnly) {
              Host original = result;
              result = new Host();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Host MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::D3.OnlineService.ChannelId.Types.Host.Descriptor; }
          }
          
          public override Host DefaultInstanceForType {
            get { return global::D3.OnlineService.ChannelId.Types.Host.DefaultInstance; }
          }
          
          public override Host BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Host) {
              return MergeFrom((Host) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Host other) {
            if (other == global::D3.OnlineService.ChannelId.Types.Host.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasLabel) {
              Label = other.Label;
            }
            if (other.HasEpoch) {
              Epoch = other.Epoch;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_hostFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _hostFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasLabel = input.ReadUInt32(ref result.label_);
                  break;
                }
                case 16: {
                  result.hasEpoch = input.ReadUInt32(ref result.epoch_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasLabel {
            get { return result.hasLabel; }
          }
          public uint Label {
            get { return result.Label; }
            set { SetLabel(value); }
          }
          public Builder SetLabel(uint value) {
            PrepareBuilder();
            result.hasLabel = true;
            result.label_ = value;
            return this;
          }
          public Builder ClearLabel() {
            PrepareBuilder();
            result.hasLabel = false;
            result.label_ = 0;
            return this;
          }
          
          public bool HasEpoch {
            get { return result.hasEpoch; }
          }
          public uint Epoch {
            get { return result.Epoch; }
            set { SetEpoch(value); }
          }
          public Builder SetEpoch(uint value) {
            PrepareBuilder();
            result.hasEpoch = true;
            result.epoch_ = value;
            return this;
          }
          public Builder ClearEpoch() {
            PrepareBuilder();
            result.hasEpoch = false;
            result.epoch_ = 0;
            return this;
          }
        }
        static Host() {
          object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private uint type_;
    public bool HasType {
      get { return hasType; }
    }
    public uint Type {
      get { return type_; }
    }
    
    public const int HostFieldNumber = 2;
    private bool hasHost;
    private global::D3.OnlineService.ChannelId.Types.Host host_;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::D3.OnlineService.ChannelId.Types.Host Host {
      get { return host_ ?? global::D3.OnlineService.ChannelId.Types.Host.DefaultInstance; }
    }
    
    public const int IdFieldNumber = 3;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasHost) {
          if (!Host.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _channelIdFieldNames;
      if (hasType) {
        output.WriteUInt32(1, field_names[2], Type);
      }
      if (hasHost) {
        output.WriteMessage(2, field_names[0], Host);
      }
      if (hasId) {
        output.WriteFixed32(3, field_names[1], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Type);
        }
        if (hasHost) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Host);
        }
        if (hasId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(3, Id);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChannelId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChannelId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChannelId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChannelId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChannelId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChannelId prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChannelId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChannelId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChannelId result;
      
      private ChannelId PrepareBuilder() {
        if (resultIsReadOnly) {
          ChannelId original = result;
          result = new ChannelId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChannelId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.ChannelId.Descriptor; }
      }
      
      public override ChannelId DefaultInstanceForType {
        get { return global::D3.OnlineService.ChannelId.DefaultInstance; }
      }
      
      public override ChannelId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChannelId) {
          return MergeFrom((ChannelId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChannelId other) {
        if (other == global::D3.OnlineService.ChannelId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasHost) {
          MergeHost(other.Host);
        }
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_channelIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _channelIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadUInt32(ref result.type_);
              break;
            }
            case 18: {
              global::D3.OnlineService.ChannelId.Types.Host.Builder subBuilder = global::D3.OnlineService.ChannelId.Types.Host.CreateBuilder();
              if (result.hasHost) {
                subBuilder.MergeFrom(Host);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Host = subBuilder.BuildPartial();
              break;
            }
            case 29: {
              result.hasId = input.ReadFixed32(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public uint Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(uint value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasHost {
       get { return result.hasHost; }
      }
      public global::D3.OnlineService.ChannelId.Types.Host Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::D3.OnlineService.ChannelId.Types.Host value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::D3.OnlineService.ChannelId.Types.Host.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::D3.OnlineService.ChannelId.Types.Host value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHost &&
            result.host_ != global::D3.OnlineService.ChannelId.Types.Host.DefaultInstance) {
            result.host_ = global::D3.OnlineService.ChannelId.Types.Host.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        PrepareBuilder();
        result.hasHost = false;
        result.host_ = null;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static ChannelId() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CampaignOrAdventureModeCreateParams : pb::GeneratedMessage<CampaignOrAdventureModeCreateParams, CampaignOrAdventureModeCreateParams.Builder> {
    private CampaignOrAdventureModeCreateParams() { }
    private static readonly CampaignOrAdventureModeCreateParams defaultInstance = new CampaignOrAdventureModeCreateParams().MakeReadOnly();
    private static readonly string[] _campaignOrAdventureModeCreateParamsFieldNames = new string[] { "act", "deprecated_open_to_friends", "deprecated_open_to_friends_message", "deprecated_weekly_challenge_override", "game_tag", "handicap_level", "monster_level", "quest_step_id", "resume_from_save_hero_id", "sno_quest" };
    private static readonly uint[] _campaignOrAdventureModeCreateParamsFieldTags = new uint[] { 8, 40, 50, 80, 66, 56, 72, 24, 34, 21 };
    public static CampaignOrAdventureModeCreateParams DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CampaignOrAdventureModeCreateParams DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CampaignOrAdventureModeCreateParams ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_CampaignOrAdventureModeCreateParams__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CampaignOrAdventureModeCreateParams, CampaignOrAdventureModeCreateParams.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_CampaignOrAdventureModeCreateParams__FieldAccessorTable; }
    }
    
    public const int ActFieldNumber = 1;
    private bool hasAct;
    private int act_;
    public bool HasAct {
      get { return hasAct; }
    }
    public int Act {
      get { return act_; }
    }
    
    public const int SnoQuestFieldNumber = 2;
    private bool hasSnoQuest;
    private int snoQuest_ = -1;
    public bool HasSnoQuest {
      get { return hasSnoQuest; }
    }
    public int SnoQuest {
      get { return snoQuest_; }
    }
    
    public const int QuestStepIdFieldNumber = 3;
    private bool hasQuestStepId;
    private int questStepId_ = -1;
    public bool HasQuestStepId {
      get { return hasQuestStepId; }
    }
    public int QuestStepId {
      get { return questStepId_; }
    }
    
    public const int ResumeFromSaveHeroIdFieldNumber = 4;
    private bool hasResumeFromSaveHeroId;
    private global::D3.OnlineService.EntityId resumeFromSaveHeroId_;
    public bool HasResumeFromSaveHeroId {
      get { return hasResumeFromSaveHeroId; }
    }
    public global::D3.OnlineService.EntityId ResumeFromSaveHeroId {
      get { return resumeFromSaveHeroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int DeprecatedOpenToFriendsFieldNumber = 5;
    private bool hasDeprecatedOpenToFriends;
    private bool deprecatedOpenToFriends_;
    public bool HasDeprecatedOpenToFriends {
      get { return hasDeprecatedOpenToFriends; }
    }
    public bool DeprecatedOpenToFriends {
      get { return deprecatedOpenToFriends_; }
    }
    
    public const int DeprecatedOpenToFriendsMessageFieldNumber = 6;
    private bool hasDeprecatedOpenToFriendsMessage;
    private string deprecatedOpenToFriendsMessage_ = "";
    public bool HasDeprecatedOpenToFriendsMessage {
      get { return hasDeprecatedOpenToFriendsMessage; }
    }
    public string DeprecatedOpenToFriendsMessage {
      get { return deprecatedOpenToFriendsMessage_; }
    }
    
    public const int HandicapLevelFieldNumber = 7;
    private bool hasHandicapLevel;
    private int handicapLevel_;
    public bool HasHandicapLevel {
      get { return hasHandicapLevel; }
    }
    public int HandicapLevel {
      get { return handicapLevel_; }
    }
    
    public const int GameTagFieldNumber = 8;
    private bool hasGameTag;
    private string gameTag_ = "";
    public bool HasGameTag {
      get { return hasGameTag; }
    }
    public string GameTag {
      get { return gameTag_; }
    }
    
    public const int MonsterLevelFieldNumber = 9;
    private bool hasMonsterLevel;
    private int monsterLevel_ = -1;
    public bool HasMonsterLevel {
      get { return hasMonsterLevel; }
    }
    public int MonsterLevel {
      get { return monsterLevel_; }
    }
    
    public const int DeprecatedWeeklyChallengeOverrideFieldNumber = 10;
    private bool hasDeprecatedWeeklyChallengeOverride;
    private int deprecatedWeeklyChallengeOverride_;
    public bool HasDeprecatedWeeklyChallengeOverride {
      get { return hasDeprecatedWeeklyChallengeOverride; }
    }
    public int DeprecatedWeeklyChallengeOverride {
      get { return deprecatedWeeklyChallengeOverride_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAct) return false;
        if (!hasSnoQuest) return false;
        if (!hasQuestStepId) return false;
        if (HasResumeFromSaveHeroId) {
          if (!ResumeFromSaveHeroId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _campaignOrAdventureModeCreateParamsFieldNames;
      if (hasAct) {
        output.WriteSInt32(1, field_names[0], Act);
      }
      if (hasSnoQuest) {
        output.WriteSFixed32(2, field_names[9], SnoQuest);
      }
      if (hasQuestStepId) {
        output.WriteInt32(3, field_names[7], QuestStepId);
      }
      if (hasResumeFromSaveHeroId) {
        output.WriteMessage(4, field_names[8], ResumeFromSaveHeroId);
      }
      if (hasDeprecatedOpenToFriends) {
        output.WriteBool(5, field_names[1], DeprecatedOpenToFriends);
      }
      if (hasDeprecatedOpenToFriendsMessage) {
        output.WriteString(6, field_names[2], DeprecatedOpenToFriendsMessage);
      }
      if (hasHandicapLevel) {
        output.WriteInt32(7, field_names[5], HandicapLevel);
      }
      if (hasGameTag) {
        output.WriteString(8, field_names[4], GameTag);
      }
      if (hasMonsterLevel) {
        output.WriteInt32(9, field_names[6], MonsterLevel);
      }
      if (hasDeprecatedWeeklyChallengeOverride) {
        output.WriteInt32(10, field_names[3], DeprecatedWeeklyChallengeOverride);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAct) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, Act);
        }
        if (hasSnoQuest) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(2, SnoQuest);
        }
        if (hasQuestStepId) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, QuestStepId);
        }
        if (hasResumeFromSaveHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, ResumeFromSaveHeroId);
        }
        if (hasDeprecatedOpenToFriends) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, DeprecatedOpenToFriends);
        }
        if (hasDeprecatedOpenToFriendsMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(6, DeprecatedOpenToFriendsMessage);
        }
        if (hasHandicapLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, HandicapLevel);
        }
        if (hasGameTag) {
          size += pb::CodedOutputStream.ComputeStringSize(8, GameTag);
        }
        if (hasMonsterLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, MonsterLevel);
        }
        if (hasDeprecatedWeeklyChallengeOverride) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, DeprecatedWeeklyChallengeOverride);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CampaignOrAdventureModeCreateParams ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CampaignOrAdventureModeCreateParams ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CampaignOrAdventureModeCreateParams ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CampaignOrAdventureModeCreateParams ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CampaignOrAdventureModeCreateParams ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CampaignOrAdventureModeCreateParams ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CampaignOrAdventureModeCreateParams ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CampaignOrAdventureModeCreateParams ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CampaignOrAdventureModeCreateParams ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CampaignOrAdventureModeCreateParams ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CampaignOrAdventureModeCreateParams MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CampaignOrAdventureModeCreateParams prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CampaignOrAdventureModeCreateParams, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CampaignOrAdventureModeCreateParams cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CampaignOrAdventureModeCreateParams result;
      
      private CampaignOrAdventureModeCreateParams PrepareBuilder() {
        if (resultIsReadOnly) {
          CampaignOrAdventureModeCreateParams original = result;
          result = new CampaignOrAdventureModeCreateParams();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CampaignOrAdventureModeCreateParams MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.CampaignOrAdventureModeCreateParams.Descriptor; }
      }
      
      public override CampaignOrAdventureModeCreateParams DefaultInstanceForType {
        get { return global::D3.OnlineService.CampaignOrAdventureModeCreateParams.DefaultInstance; }
      }
      
      public override CampaignOrAdventureModeCreateParams BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CampaignOrAdventureModeCreateParams) {
          return MergeFrom((CampaignOrAdventureModeCreateParams) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CampaignOrAdventureModeCreateParams other) {
        if (other == global::D3.OnlineService.CampaignOrAdventureModeCreateParams.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAct) {
          Act = other.Act;
        }
        if (other.HasSnoQuest) {
          SnoQuest = other.SnoQuest;
        }
        if (other.HasQuestStepId) {
          QuestStepId = other.QuestStepId;
        }
        if (other.HasResumeFromSaveHeroId) {
          MergeResumeFromSaveHeroId(other.ResumeFromSaveHeroId);
        }
        if (other.HasDeprecatedOpenToFriends) {
          DeprecatedOpenToFriends = other.DeprecatedOpenToFriends;
        }
        if (other.HasDeprecatedOpenToFriendsMessage) {
          DeprecatedOpenToFriendsMessage = other.DeprecatedOpenToFriendsMessage;
        }
        if (other.HasHandicapLevel) {
          HandicapLevel = other.HandicapLevel;
        }
        if (other.HasGameTag) {
          GameTag = other.GameTag;
        }
        if (other.HasMonsterLevel) {
          MonsterLevel = other.MonsterLevel;
        }
        if (other.HasDeprecatedWeeklyChallengeOverride) {
          DeprecatedWeeklyChallengeOverride = other.DeprecatedWeeklyChallengeOverride;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_campaignOrAdventureModeCreateParamsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _campaignOrAdventureModeCreateParamsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAct = input.ReadSInt32(ref result.act_);
              break;
            }
            case 21: {
              result.hasSnoQuest = input.ReadSFixed32(ref result.snoQuest_);
              break;
            }
            case 24: {
              result.hasQuestStepId = input.ReadInt32(ref result.questStepId_);
              break;
            }
            case 34: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasResumeFromSaveHeroId) {
                subBuilder.MergeFrom(ResumeFromSaveHeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ResumeFromSaveHeroId = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasDeprecatedOpenToFriends = input.ReadBool(ref result.deprecatedOpenToFriends_);
              break;
            }
            case 50: {
              result.hasDeprecatedOpenToFriendsMessage = input.ReadString(ref result.deprecatedOpenToFriendsMessage_);
              break;
            }
            case 56: {
              result.hasHandicapLevel = input.ReadInt32(ref result.handicapLevel_);
              break;
            }
            case 66: {
              result.hasGameTag = input.ReadString(ref result.gameTag_);
              break;
            }
            case 72: {
              result.hasMonsterLevel = input.ReadInt32(ref result.monsterLevel_);
              break;
            }
            case 80: {
              result.hasDeprecatedWeeklyChallengeOverride = input.ReadInt32(ref result.deprecatedWeeklyChallengeOverride_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAct {
        get { return result.hasAct; }
      }
      public int Act {
        get { return result.Act; }
        set { SetAct(value); }
      }
      public Builder SetAct(int value) {
        PrepareBuilder();
        result.hasAct = true;
        result.act_ = value;
        return this;
      }
      public Builder ClearAct() {
        PrepareBuilder();
        result.hasAct = false;
        result.act_ = 0;
        return this;
      }
      
      public bool HasSnoQuest {
        get { return result.hasSnoQuest; }
      }
      public int SnoQuest {
        get { return result.SnoQuest; }
        set { SetSnoQuest(value); }
      }
      public Builder SetSnoQuest(int value) {
        PrepareBuilder();
        result.hasSnoQuest = true;
        result.snoQuest_ = value;
        return this;
      }
      public Builder ClearSnoQuest() {
        PrepareBuilder();
        result.hasSnoQuest = false;
        result.snoQuest_ = -1;
        return this;
      }
      
      public bool HasQuestStepId {
        get { return result.hasQuestStepId; }
      }
      public int QuestStepId {
        get { return result.QuestStepId; }
        set { SetQuestStepId(value); }
      }
      public Builder SetQuestStepId(int value) {
        PrepareBuilder();
        result.hasQuestStepId = true;
        result.questStepId_ = value;
        return this;
      }
      public Builder ClearQuestStepId() {
        PrepareBuilder();
        result.hasQuestStepId = false;
        result.questStepId_ = -1;
        return this;
      }
      
      public bool HasResumeFromSaveHeroId {
       get { return result.hasResumeFromSaveHeroId; }
      }
      public global::D3.OnlineService.EntityId ResumeFromSaveHeroId {
        get { return result.ResumeFromSaveHeroId; }
        set { SetResumeFromSaveHeroId(value); }
      }
      public Builder SetResumeFromSaveHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResumeFromSaveHeroId = true;
        result.resumeFromSaveHeroId_ = value;
        return this;
      }
      public Builder SetResumeFromSaveHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResumeFromSaveHeroId = true;
        result.resumeFromSaveHeroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResumeFromSaveHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResumeFromSaveHeroId &&
            result.resumeFromSaveHeroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.resumeFromSaveHeroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.resumeFromSaveHeroId_).MergeFrom(value).BuildPartial();
        } else {
          result.resumeFromSaveHeroId_ = value;
        }
        result.hasResumeFromSaveHeroId = true;
        return this;
      }
      public Builder ClearResumeFromSaveHeroId() {
        PrepareBuilder();
        result.hasResumeFromSaveHeroId = false;
        result.resumeFromSaveHeroId_ = null;
        return this;
      }
      
      public bool HasDeprecatedOpenToFriends {
        get { return result.hasDeprecatedOpenToFriends; }
      }
      public bool DeprecatedOpenToFriends {
        get { return result.DeprecatedOpenToFriends; }
        set { SetDeprecatedOpenToFriends(value); }
      }
      public Builder SetDeprecatedOpenToFriends(bool value) {
        PrepareBuilder();
        result.hasDeprecatedOpenToFriends = true;
        result.deprecatedOpenToFriends_ = value;
        return this;
      }
      public Builder ClearDeprecatedOpenToFriends() {
        PrepareBuilder();
        result.hasDeprecatedOpenToFriends = false;
        result.deprecatedOpenToFriends_ = false;
        return this;
      }
      
      public bool HasDeprecatedOpenToFriendsMessage {
        get { return result.hasDeprecatedOpenToFriendsMessage; }
      }
      public string DeprecatedOpenToFriendsMessage {
        get { return result.DeprecatedOpenToFriendsMessage; }
        set { SetDeprecatedOpenToFriendsMessage(value); }
      }
      public Builder SetDeprecatedOpenToFriendsMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeprecatedOpenToFriendsMessage = true;
        result.deprecatedOpenToFriendsMessage_ = value;
        return this;
      }
      public Builder ClearDeprecatedOpenToFriendsMessage() {
        PrepareBuilder();
        result.hasDeprecatedOpenToFriendsMessage = false;
        result.deprecatedOpenToFriendsMessage_ = "";
        return this;
      }
      
      public bool HasHandicapLevel {
        get { return result.hasHandicapLevel; }
      }
      public int HandicapLevel {
        get { return result.HandicapLevel; }
        set { SetHandicapLevel(value); }
      }
      public Builder SetHandicapLevel(int value) {
        PrepareBuilder();
        result.hasHandicapLevel = true;
        result.handicapLevel_ = value;
        return this;
      }
      public Builder ClearHandicapLevel() {
        PrepareBuilder();
        result.hasHandicapLevel = false;
        result.handicapLevel_ = 0;
        return this;
      }
      
      public bool HasGameTag {
        get { return result.hasGameTag; }
      }
      public string GameTag {
        get { return result.GameTag; }
        set { SetGameTag(value); }
      }
      public Builder SetGameTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameTag = true;
        result.gameTag_ = value;
        return this;
      }
      public Builder ClearGameTag() {
        PrepareBuilder();
        result.hasGameTag = false;
        result.gameTag_ = "";
        return this;
      }
      
      public bool HasMonsterLevel {
        get { return result.hasMonsterLevel; }
      }
      public int MonsterLevel {
        get { return result.MonsterLevel; }
        set { SetMonsterLevel(value); }
      }
      public Builder SetMonsterLevel(int value) {
        PrepareBuilder();
        result.hasMonsterLevel = true;
        result.monsterLevel_ = value;
        return this;
      }
      public Builder ClearMonsterLevel() {
        PrepareBuilder();
        result.hasMonsterLevel = false;
        result.monsterLevel_ = -1;
        return this;
      }
      
      public bool HasDeprecatedWeeklyChallengeOverride {
        get { return result.hasDeprecatedWeeklyChallengeOverride; }
      }
      public int DeprecatedWeeklyChallengeOverride {
        get { return result.DeprecatedWeeklyChallengeOverride; }
        set { SetDeprecatedWeeklyChallengeOverride(value); }
      }
      public Builder SetDeprecatedWeeklyChallengeOverride(int value) {
        PrepareBuilder();
        result.hasDeprecatedWeeklyChallengeOverride = true;
        result.deprecatedWeeklyChallengeOverride_ = value;
        return this;
      }
      public Builder ClearDeprecatedWeeklyChallengeOverride() {
        PrepareBuilder();
        result.hasDeprecatedWeeklyChallengeOverride = false;
        result.deprecatedWeeklyChallengeOverride_ = 0;
        return this;
      }
    }
    static CampaignOrAdventureModeCreateParams() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PvPCreateParams : pb::GeneratedMessage<PvPCreateParams, PvPCreateParams.Builder> {
    private PvPCreateParams() { }
    private static readonly PvPCreateParams defaultInstance = new PvPCreateParams().MakeReadOnly();
    private static readonly string[] _pvPCreateParamsFieldNames = new string[] { "sno_world" };
    private static readonly uint[] _pvPCreateParamsFieldTags = new uint[] { 13 };
    public static PvPCreateParams DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PvPCreateParams DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PvPCreateParams ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_PvPCreateParams__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PvPCreateParams, PvPCreateParams.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_PvPCreateParams__FieldAccessorTable; }
    }
    
    public const int SnoWorldFieldNumber = 1;
    private bool hasSnoWorld;
    private int snoWorld_ = -1;
    public bool HasSnoWorld {
      get { return hasSnoWorld; }
    }
    public int SnoWorld {
      get { return snoWorld_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSnoWorld) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pvPCreateParamsFieldNames;
      if (hasSnoWorld) {
        output.WriteSFixed32(1, field_names[0], SnoWorld);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnoWorld) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, SnoWorld);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PvPCreateParams ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PvPCreateParams ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PvPCreateParams ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvPCreateParams ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PvPCreateParams MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PvPCreateParams prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PvPCreateParams, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PvPCreateParams cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PvPCreateParams result;
      
      private PvPCreateParams PrepareBuilder() {
        if (resultIsReadOnly) {
          PvPCreateParams original = result;
          result = new PvPCreateParams();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PvPCreateParams MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.PvPCreateParams.Descriptor; }
      }
      
      public override PvPCreateParams DefaultInstanceForType {
        get { return global::D3.OnlineService.PvPCreateParams.DefaultInstance; }
      }
      
      public override PvPCreateParams BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PvPCreateParams) {
          return MergeFrom((PvPCreateParams) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PvPCreateParams other) {
        if (other == global::D3.OnlineService.PvPCreateParams.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnoWorld) {
          SnoWorld = other.SnoWorld;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pvPCreateParamsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pvPCreateParamsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSnoWorld = input.ReadSFixed32(ref result.snoWorld_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnoWorld {
        get { return result.hasSnoWorld; }
      }
      public int SnoWorld {
        get { return result.SnoWorld; }
        set { SetSnoWorld(value); }
      }
      public Builder SetSnoWorld(int value) {
        PrepareBuilder();
        result.hasSnoWorld = true;
        result.snoWorld_ = value;
        return this;
      }
      public Builder ClearSnoWorld() {
        PrepareBuilder();
        result.hasSnoWorld = false;
        result.snoWorld_ = -1;
        return this;
      }
    }
    static PvPCreateParams() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChallengeCreateParams : pb::GeneratedMessage<ChallengeCreateParams, ChallengeCreateParams.Builder> {
    private ChallengeCreateParams() { }
    private static readonly ChallengeCreateParams defaultInstance = new ChallengeCreateParams().MakeReadOnly();
    private static readonly string[] _challengeCreateParamsFieldNames = new string[] { "challenge_override" };
    private static readonly uint[] _challengeCreateParamsFieldTags = new uint[] { 8 };
    public static ChallengeCreateParams DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChallengeCreateParams DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChallengeCreateParams ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ChallengeCreateParams__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChallengeCreateParams, ChallengeCreateParams.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ChallengeCreateParams__FieldAccessorTable; }
    }
    
    public const int ChallengeOverrideFieldNumber = 1;
    private bool hasChallengeOverride;
    private uint challengeOverride_;
    public bool HasChallengeOverride {
      get { return hasChallengeOverride; }
    }
    public uint ChallengeOverride {
      get { return challengeOverride_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _challengeCreateParamsFieldNames;
      if (hasChallengeOverride) {
        output.WriteUInt32(1, field_names[0], ChallengeOverride);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasChallengeOverride) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, ChallengeOverride);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChallengeCreateParams ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeCreateParams ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeCreateParams ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeCreateParams ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeCreateParams ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeCreateParams ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChallengeCreateParams ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChallengeCreateParams ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChallengeCreateParams ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeCreateParams ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChallengeCreateParams MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChallengeCreateParams prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChallengeCreateParams, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChallengeCreateParams cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChallengeCreateParams result;
      
      private ChallengeCreateParams PrepareBuilder() {
        if (resultIsReadOnly) {
          ChallengeCreateParams original = result;
          result = new ChallengeCreateParams();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChallengeCreateParams MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.ChallengeCreateParams.Descriptor; }
      }
      
      public override ChallengeCreateParams DefaultInstanceForType {
        get { return global::D3.OnlineService.ChallengeCreateParams.DefaultInstance; }
      }
      
      public override ChallengeCreateParams BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChallengeCreateParams) {
          return MergeFrom((ChallengeCreateParams) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChallengeCreateParams other) {
        if (other == global::D3.OnlineService.ChallengeCreateParams.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChallengeOverride) {
          ChallengeOverride = other.ChallengeOverride;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_challengeCreateParamsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _challengeCreateParamsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasChallengeOverride = input.ReadUInt32(ref result.challengeOverride_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChallengeOverride {
        get { return result.hasChallengeOverride; }
      }
      public uint ChallengeOverride {
        get { return result.ChallengeOverride; }
        set { SetChallengeOverride(value); }
      }
      public Builder SetChallengeOverride(uint value) {
        PrepareBuilder();
        result.hasChallengeOverride = true;
        result.challengeOverride_ = value;
        return this;
      }
      public Builder ClearChallengeOverride() {
        PrepareBuilder();
        result.hasChallengeOverride = false;
        result.challengeOverride_ = 0;
        return this;
      }
    }
    static ChallengeCreateParams() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameCreateParams : pb::GeneratedMessage<GameCreateParams, GameCreateParams.Builder> {
    private GameCreateParams() { }
    private static readonly GameCreateParams defaultInstance = new GameCreateParams().MakeReadOnly();
    private static readonly string[] _gameCreateParamsFieldNames = new string[] { "campaign_or_adventure_mode", "challenge", "creation_flags", "game_type", "name", "open_to_friends", "pvp" };
    private static readonly uint[] _gameCreateParamsFieldTags = new uint[] { 26, 58, 16, 8, 42, 48, 34 };
    public static GameCreateParams DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameCreateParams DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameCreateParams ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_GameCreateParams__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameCreateParams, GameCreateParams.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_GameCreateParams__FieldAccessorTable; }
    }
    
    public const int GameTypeFieldNumber = 1;
    private bool hasGameType;
    private int gameType_;
    public bool HasGameType {
      get { return hasGameType; }
    }
    public int GameType {
      get { return gameType_; }
    }
    
    public const int CreationFlagsFieldNumber = 2;
    private bool hasCreationFlags;
    private uint creationFlags_;
    public bool HasCreationFlags {
      get { return hasCreationFlags; }
    }
    public uint CreationFlags {
      get { return creationFlags_; }
    }
    
    public const int CampaignOrAdventureModeFieldNumber = 3;
    private bool hasCampaignOrAdventureMode;
    private global::D3.OnlineService.CampaignOrAdventureModeCreateParams campaignOrAdventureMode_;
    public bool HasCampaignOrAdventureMode {
      get { return hasCampaignOrAdventureMode; }
    }
    public global::D3.OnlineService.CampaignOrAdventureModeCreateParams CampaignOrAdventureMode {
      get { return campaignOrAdventureMode_ ?? global::D3.OnlineService.CampaignOrAdventureModeCreateParams.DefaultInstance; }
    }
    
    public const int PvpFieldNumber = 4;
    private bool hasPvp;
    private global::D3.OnlineService.PvPCreateParams pvp_;
    public bool HasPvp {
      get { return hasPvp; }
    }
    public global::D3.OnlineService.PvPCreateParams Pvp {
      get { return pvp_ ?? global::D3.OnlineService.PvPCreateParams.DefaultInstance; }
    }
    
    public const int NameFieldNumber = 5;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int OpenToFriendsFieldNumber = 6;
    private bool hasOpenToFriends;
    private bool openToFriends_;
    public bool HasOpenToFriends {
      get { return hasOpenToFriends; }
    }
    public bool OpenToFriends {
      get { return openToFriends_; }
    }
    
    public const int ChallengeFieldNumber = 7;
    private bool hasChallenge;
    private global::D3.OnlineService.ChallengeCreateParams challenge_;
    public bool HasChallenge {
      get { return hasChallenge; }
    }
    public global::D3.OnlineService.ChallengeCreateParams Challenge {
      get { return challenge_ ?? global::D3.OnlineService.ChallengeCreateParams.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameType) return false;
        if (!hasCreationFlags) return false;
        if (HasCampaignOrAdventureMode) {
          if (!CampaignOrAdventureMode.IsInitialized) return false;
        }
        if (HasPvp) {
          if (!Pvp.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameCreateParamsFieldNames;
      if (hasGameType) {
        output.WriteSInt32(1, field_names[3], GameType);
      }
      if (hasCreationFlags) {
        output.WriteUInt32(2, field_names[2], CreationFlags);
      }
      if (hasCampaignOrAdventureMode) {
        output.WriteMessage(3, field_names[0], CampaignOrAdventureMode);
      }
      if (hasPvp) {
        output.WriteMessage(4, field_names[6], Pvp);
      }
      if (hasName) {
        output.WriteString(5, field_names[4], Name);
      }
      if (hasOpenToFriends) {
        output.WriteBool(6, field_names[5], OpenToFriends);
      }
      if (hasChallenge) {
        output.WriteMessage(7, field_names[1], Challenge);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGameType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, GameType);
        }
        if (hasCreationFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, CreationFlags);
        }
        if (hasCampaignOrAdventureMode) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, CampaignOrAdventureMode);
        }
        if (hasPvp) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Pvp);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Name);
        }
        if (hasOpenToFriends) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, OpenToFriends);
        }
        if (hasChallenge) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, Challenge);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameCreateParams ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameCreateParams ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameCreateParams ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameCreateParams ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameCreateParams ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameCreateParams MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameCreateParams prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameCreateParams, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameCreateParams cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameCreateParams result;
      
      private GameCreateParams PrepareBuilder() {
        if (resultIsReadOnly) {
          GameCreateParams original = result;
          result = new GameCreateParams();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameCreateParams MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.GameCreateParams.Descriptor; }
      }
      
      public override GameCreateParams DefaultInstanceForType {
        get { return global::D3.OnlineService.GameCreateParams.DefaultInstance; }
      }
      
      public override GameCreateParams BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameCreateParams) {
          return MergeFrom((GameCreateParams) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameCreateParams other) {
        if (other == global::D3.OnlineService.GameCreateParams.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameType) {
          GameType = other.GameType;
        }
        if (other.HasCreationFlags) {
          CreationFlags = other.CreationFlags;
        }
        if (other.HasCampaignOrAdventureMode) {
          MergeCampaignOrAdventureMode(other.CampaignOrAdventureMode);
        }
        if (other.HasPvp) {
          MergePvp(other.Pvp);
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasOpenToFriends) {
          OpenToFriends = other.OpenToFriends;
        }
        if (other.HasChallenge) {
          MergeChallenge(other.Challenge);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameCreateParamsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameCreateParamsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGameType = input.ReadSInt32(ref result.gameType_);
              break;
            }
            case 16: {
              result.hasCreationFlags = input.ReadUInt32(ref result.creationFlags_);
              break;
            }
            case 26: {
              global::D3.OnlineService.CampaignOrAdventureModeCreateParams.Builder subBuilder = global::D3.OnlineService.CampaignOrAdventureModeCreateParams.CreateBuilder();
              if (result.hasCampaignOrAdventureMode) {
                subBuilder.MergeFrom(CampaignOrAdventureMode);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CampaignOrAdventureMode = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::D3.OnlineService.PvPCreateParams.Builder subBuilder = global::D3.OnlineService.PvPCreateParams.CreateBuilder();
              if (result.hasPvp) {
                subBuilder.MergeFrom(Pvp);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Pvp = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 48: {
              result.hasOpenToFriends = input.ReadBool(ref result.openToFriends_);
              break;
            }
            case 58: {
              global::D3.OnlineService.ChallengeCreateParams.Builder subBuilder = global::D3.OnlineService.ChallengeCreateParams.CreateBuilder();
              if (result.hasChallenge) {
                subBuilder.MergeFrom(Challenge);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Challenge = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameType {
        get { return result.hasGameType; }
      }
      public int GameType {
        get { return result.GameType; }
        set { SetGameType(value); }
      }
      public Builder SetGameType(int value) {
        PrepareBuilder();
        result.hasGameType = true;
        result.gameType_ = value;
        return this;
      }
      public Builder ClearGameType() {
        PrepareBuilder();
        result.hasGameType = false;
        result.gameType_ = 0;
        return this;
      }
      
      public bool HasCreationFlags {
        get { return result.hasCreationFlags; }
      }
      public uint CreationFlags {
        get { return result.CreationFlags; }
        set { SetCreationFlags(value); }
      }
      public Builder SetCreationFlags(uint value) {
        PrepareBuilder();
        result.hasCreationFlags = true;
        result.creationFlags_ = value;
        return this;
      }
      public Builder ClearCreationFlags() {
        PrepareBuilder();
        result.hasCreationFlags = false;
        result.creationFlags_ = 0;
        return this;
      }
      
      public bool HasCampaignOrAdventureMode {
       get { return result.hasCampaignOrAdventureMode; }
      }
      public global::D3.OnlineService.CampaignOrAdventureModeCreateParams CampaignOrAdventureMode {
        get { return result.CampaignOrAdventureMode; }
        set { SetCampaignOrAdventureMode(value); }
      }
      public Builder SetCampaignOrAdventureMode(global::D3.OnlineService.CampaignOrAdventureModeCreateParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCampaignOrAdventureMode = true;
        result.campaignOrAdventureMode_ = value;
        return this;
      }
      public Builder SetCampaignOrAdventureMode(global::D3.OnlineService.CampaignOrAdventureModeCreateParams.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCampaignOrAdventureMode = true;
        result.campaignOrAdventureMode_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCampaignOrAdventureMode(global::D3.OnlineService.CampaignOrAdventureModeCreateParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCampaignOrAdventureMode &&
            result.campaignOrAdventureMode_ != global::D3.OnlineService.CampaignOrAdventureModeCreateParams.DefaultInstance) {
            result.campaignOrAdventureMode_ = global::D3.OnlineService.CampaignOrAdventureModeCreateParams.CreateBuilder(result.campaignOrAdventureMode_).MergeFrom(value).BuildPartial();
        } else {
          result.campaignOrAdventureMode_ = value;
        }
        result.hasCampaignOrAdventureMode = true;
        return this;
      }
      public Builder ClearCampaignOrAdventureMode() {
        PrepareBuilder();
        result.hasCampaignOrAdventureMode = false;
        result.campaignOrAdventureMode_ = null;
        return this;
      }
      
      public bool HasPvp {
       get { return result.hasPvp; }
      }
      public global::D3.OnlineService.PvPCreateParams Pvp {
        get { return result.Pvp; }
        set { SetPvp(value); }
      }
      public Builder SetPvp(global::D3.OnlineService.PvPCreateParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPvp = true;
        result.pvp_ = value;
        return this;
      }
      public Builder SetPvp(global::D3.OnlineService.PvPCreateParams.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPvp = true;
        result.pvp_ = builderForValue.Build();
        return this;
      }
      public Builder MergePvp(global::D3.OnlineService.PvPCreateParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPvp &&
            result.pvp_ != global::D3.OnlineService.PvPCreateParams.DefaultInstance) {
            result.pvp_ = global::D3.OnlineService.PvPCreateParams.CreateBuilder(result.pvp_).MergeFrom(value).BuildPartial();
        } else {
          result.pvp_ = value;
        }
        result.hasPvp = true;
        return this;
      }
      public Builder ClearPvp() {
        PrepareBuilder();
        result.hasPvp = false;
        result.pvp_ = null;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasOpenToFriends {
        get { return result.hasOpenToFriends; }
      }
      public bool OpenToFriends {
        get { return result.OpenToFriends; }
        set { SetOpenToFriends(value); }
      }
      public Builder SetOpenToFriends(bool value) {
        PrepareBuilder();
        result.hasOpenToFriends = true;
        result.openToFriends_ = value;
        return this;
      }
      public Builder ClearOpenToFriends() {
        PrepareBuilder();
        result.hasOpenToFriends = false;
        result.openToFriends_ = false;
        return this;
      }
      
      public bool HasChallenge {
       get { return result.hasChallenge; }
      }
      public global::D3.OnlineService.ChallengeCreateParams Challenge {
        get { return result.Challenge; }
        set { SetChallenge(value); }
      }
      public Builder SetChallenge(global::D3.OnlineService.ChallengeCreateParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChallenge = true;
        result.challenge_ = value;
        return this;
      }
      public Builder SetChallenge(global::D3.OnlineService.ChallengeCreateParams.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChallenge = true;
        result.challenge_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChallenge(global::D3.OnlineService.ChallengeCreateParams value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChallenge &&
            result.challenge_ != global::D3.OnlineService.ChallengeCreateParams.DefaultInstance) {
            result.challenge_ = global::D3.OnlineService.ChallengeCreateParams.CreateBuilder(result.challenge_).MergeFrom(value).BuildPartial();
        } else {
          result.challenge_ = value;
        }
        result.hasChallenge = true;
        return this;
      }
      public Builder ClearChallenge() {
        PrepareBuilder();
        result.hasChallenge = false;
        result.challenge_ = null;
        return this;
      }
    }
    static GameCreateParams() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeroCreateParams : pb::GeneratedMessage<HeroCreateParams, HeroCreateParams.Builder> {
    private HeroCreateParams() { }
    private static readonly HeroCreateParams defaultInstance = new HeroCreateParams().MakeReadOnly();
    private static readonly string[] _heroCreateParamsFieldNames = new string[] { "gbid_class", "is_female", "is_hardcore", "is_season", "name" };
    private static readonly uint[] _heroCreateParamsFieldTags = new uint[] { 21, 32, 24, 40, 10 };
    public static HeroCreateParams DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroCreateParams DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeroCreateParams ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_HeroCreateParams__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroCreateParams, HeroCreateParams.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_HeroCreateParams__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int GbidClassFieldNumber = 2;
    private bool hasGbidClass;
    private int gbidClass_ = -1;
    public bool HasGbidClass {
      get { return hasGbidClass; }
    }
    public int GbidClass {
      get { return gbidClass_; }
    }
    
    public const int IsHardcoreFieldNumber = 3;
    private bool hasIsHardcore;
    private bool isHardcore_;
    public bool HasIsHardcore {
      get { return hasIsHardcore; }
    }
    public bool IsHardcore {
      get { return isHardcore_; }
    }
    
    public const int IsFemaleFieldNumber = 4;
    private bool hasIsFemale;
    private bool isFemale_;
    public bool HasIsFemale {
      get { return hasIsFemale; }
    }
    public bool IsFemale {
      get { return isFemale_; }
    }
    
    public const int IsSeasonFieldNumber = 5;
    private bool hasIsSeason;
    private bool isSeason_;
    public bool HasIsSeason {
      get { return hasIsSeason; }
    }
    public bool IsSeason {
      get { return isSeason_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasGbidClass) return false;
        if (!hasIsHardcore) return false;
        if (!hasIsFemale) return false;
        if (!hasIsSeason) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _heroCreateParamsFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[4], Name);
      }
      if (hasGbidClass) {
        output.WriteSFixed32(2, field_names[0], GbidClass);
      }
      if (hasIsHardcore) {
        output.WriteBool(3, field_names[2], IsHardcore);
      }
      if (hasIsFemale) {
        output.WriteBool(4, field_names[1], IsFemale);
      }
      if (hasIsSeason) {
        output.WriteBool(5, field_names[3], IsSeason);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasGbidClass) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(2, GbidClass);
        }
        if (hasIsHardcore) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, IsHardcore);
        }
        if (hasIsFemale) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, IsFemale);
        }
        if (hasIsSeason) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, IsSeason);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroCreateParams ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroCreateParams ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroCreateParams ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroCreateParams ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeroCreateParams MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroCreateParams prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HeroCreateParams, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeroCreateParams cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeroCreateParams result;
      
      private HeroCreateParams PrepareBuilder() {
        if (resultIsReadOnly) {
          HeroCreateParams original = result;
          result = new HeroCreateParams();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeroCreateParams MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.HeroCreateParams.Descriptor; }
      }
      
      public override HeroCreateParams DefaultInstanceForType {
        get { return global::D3.OnlineService.HeroCreateParams.DefaultInstance; }
      }
      
      public override HeroCreateParams BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroCreateParams) {
          return MergeFrom((HeroCreateParams) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroCreateParams other) {
        if (other == global::D3.OnlineService.HeroCreateParams.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasGbidClass) {
          GbidClass = other.GbidClass;
        }
        if (other.HasIsHardcore) {
          IsHardcore = other.IsHardcore;
        }
        if (other.HasIsFemale) {
          IsFemale = other.IsFemale;
        }
        if (other.HasIsSeason) {
          IsSeason = other.IsSeason;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heroCreateParamsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heroCreateParamsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 21: {
              result.hasGbidClass = input.ReadSFixed32(ref result.gbidClass_);
              break;
            }
            case 24: {
              result.hasIsHardcore = input.ReadBool(ref result.isHardcore_);
              break;
            }
            case 32: {
              result.hasIsFemale = input.ReadBool(ref result.isFemale_);
              break;
            }
            case 40: {
              result.hasIsSeason = input.ReadBool(ref result.isSeason_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasGbidClass {
        get { return result.hasGbidClass; }
      }
      public int GbidClass {
        get { return result.GbidClass; }
        set { SetGbidClass(value); }
      }
      public Builder SetGbidClass(int value) {
        PrepareBuilder();
        result.hasGbidClass = true;
        result.gbidClass_ = value;
        return this;
      }
      public Builder ClearGbidClass() {
        PrepareBuilder();
        result.hasGbidClass = false;
        result.gbidClass_ = -1;
        return this;
      }
      
      public bool HasIsHardcore {
        get { return result.hasIsHardcore; }
      }
      public bool IsHardcore {
        get { return result.IsHardcore; }
        set { SetIsHardcore(value); }
      }
      public Builder SetIsHardcore(bool value) {
        PrepareBuilder();
        result.hasIsHardcore = true;
        result.isHardcore_ = value;
        return this;
      }
      public Builder ClearIsHardcore() {
        PrepareBuilder();
        result.hasIsHardcore = false;
        result.isHardcore_ = false;
        return this;
      }
      
      public bool HasIsFemale {
        get { return result.hasIsFemale; }
      }
      public bool IsFemale {
        get { return result.IsFemale; }
        set { SetIsFemale(value); }
      }
      public Builder SetIsFemale(bool value) {
        PrepareBuilder();
        result.hasIsFemale = true;
        result.isFemale_ = value;
        return this;
      }
      public Builder ClearIsFemale() {
        PrepareBuilder();
        result.hasIsFemale = false;
        result.isFemale_ = false;
        return this;
      }
      
      public bool HasIsSeason {
        get { return result.hasIsSeason; }
      }
      public bool IsSeason {
        get { return result.IsSeason; }
        set { SetIsSeason(value); }
      }
      public Builder SetIsSeason(bool value) {
        PrepareBuilder();
        result.hasIsSeason = true;
        result.isSeason_ = value;
        return this;
      }
      public Builder ClearIsSeason() {
        PrepareBuilder();
        result.hasIsSeason = false;
        result.isSeason_ = false;
        return this;
      }
    }
    static HeroCreateParams() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ContentHandle : pb::GeneratedMessage<ContentHandle, ContentHandle.Builder> {
    private ContentHandle() { }
    private static readonly ContentHandle defaultInstance = new ContentHandle().MakeReadOnly();
    private static readonly string[] _contentHandleFieldNames = new string[] { "hash", "region", "usage" };
    private static readonly uint[] _contentHandleFieldTags = new uint[] { 10, 26, 18 };
    public static ContentHandle DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ContentHandle DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ContentHandle ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ContentHandle__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ContentHandle, ContentHandle.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ContentHandle__FieldAccessorTable; }
    }
    
    public const int HashFieldNumber = 1;
    private bool hasHash;
    private string hash_ = "";
    public bool HasHash {
      get { return hasHash; }
    }
    public string Hash {
      get { return hash_; }
    }
    
    public const int UsageFieldNumber = 2;
    private bool hasUsage;
    private string usage_ = "";
    public bool HasUsage {
      get { return hasUsage; }
    }
    public string Usage {
      get { return usage_; }
    }
    
    public const int RegionFieldNumber = 3;
    private bool hasRegion;
    private string region_ = "";
    public bool HasRegion {
      get { return hasRegion; }
    }
    public string Region {
      get { return region_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _contentHandleFieldNames;
      if (hasHash) {
        output.WriteString(1, field_names[0], Hash);
      }
      if (hasUsage) {
        output.WriteString(2, field_names[2], Usage);
      }
      if (hasRegion) {
        output.WriteString(3, field_names[1], Region);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHash) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Hash);
        }
        if (hasUsage) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Usage);
        }
        if (hasRegion) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Region);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ContentHandle ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContentHandle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContentHandle ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContentHandle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContentHandle ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContentHandle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ContentHandle ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ContentHandle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ContentHandle ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContentHandle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ContentHandle MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ContentHandle prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ContentHandle, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ContentHandle cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ContentHandle result;
      
      private ContentHandle PrepareBuilder() {
        if (resultIsReadOnly) {
          ContentHandle original = result;
          result = new ContentHandle();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ContentHandle MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.ContentHandle.Descriptor; }
      }
      
      public override ContentHandle DefaultInstanceForType {
        get { return global::D3.OnlineService.ContentHandle.DefaultInstance; }
      }
      
      public override ContentHandle BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ContentHandle) {
          return MergeFrom((ContentHandle) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ContentHandle other) {
        if (other == global::D3.OnlineService.ContentHandle.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHash) {
          Hash = other.Hash;
        }
        if (other.HasUsage) {
          Usage = other.Usage;
        }
        if (other.HasRegion) {
          Region = other.Region;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_contentHandleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _contentHandleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasHash = input.ReadString(ref result.hash_);
              break;
            }
            case 18: {
              result.hasUsage = input.ReadString(ref result.usage_);
              break;
            }
            case 26: {
              result.hasRegion = input.ReadString(ref result.region_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHash {
        get { return result.hasHash; }
      }
      public string Hash {
        get { return result.Hash; }
        set { SetHash(value); }
      }
      public Builder SetHash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHash = true;
        result.hash_ = value;
        return this;
      }
      public Builder ClearHash() {
        PrepareBuilder();
        result.hasHash = false;
        result.hash_ = "";
        return this;
      }
      
      public bool HasUsage {
        get { return result.hasUsage; }
      }
      public string Usage {
        get { return result.Usage; }
        set { SetUsage(value); }
      }
      public Builder SetUsage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUsage = true;
        result.usage_ = value;
        return this;
      }
      public Builder ClearUsage() {
        PrepareBuilder();
        result.hasUsage = false;
        result.usage_ = "";
        return this;
      }
      
      public bool HasRegion {
        get { return result.hasRegion; }
      }
      public string Region {
        get { return result.Region; }
        set { SetRegion(value); }
      }
      public Builder SetRegion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRegion = true;
        result.region_ = value;
        return this;
      }
      public Builder ClearRegion() {
        PrepareBuilder();
        result.hasRegion = false;
        result.region_ = "";
        return this;
      }
    }
    static ContentHandle() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ContentLicense : pb::GeneratedMessage<ContentLicense, ContentLicense.Builder> {
    private ContentLicense() { }
    private static readonly ContentLicense defaultInstance = new ContentLicense().MakeReadOnly();
    private static readonly string[] _contentLicenseFieldNames = new string[] { "expire_time", "id", "property_flags", "quantity" };
    private static readonly uint[] _contentLicenseFieldTags = new uint[] { 16, 8, 32, 24 };
    public static ContentLicense DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ContentLicense DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ContentLicense ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ContentLicense__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ContentLicense, ContentLicense.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ContentLicense__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int ExpireTimeFieldNumber = 2;
    private bool hasExpireTime;
    private ulong expireTime_;
    public bool HasExpireTime {
      get { return hasExpireTime; }
    }
    public ulong ExpireTime {
      get { return expireTime_; }
    }
    
    public const int QuantityFieldNumber = 3;
    private bool hasQuantity;
    private uint quantity_;
    public bool HasQuantity {
      get { return hasQuantity; }
    }
    public uint Quantity {
      get { return quantity_; }
    }
    
    public const int PropertyFlagsFieldNumber = 4;
    private bool hasPropertyFlags;
    private uint propertyFlags_;
    public bool HasPropertyFlags {
      get { return hasPropertyFlags; }
    }
    public uint PropertyFlags {
      get { return propertyFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _contentLicenseFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (hasExpireTime) {
        output.WriteUInt64(2, field_names[0], ExpireTime);
      }
      if (hasQuantity) {
        output.WriteUInt32(3, field_names[3], Quantity);
      }
      if (hasPropertyFlags) {
        output.WriteUInt32(4, field_names[2], PropertyFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasExpireTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, ExpireTime);
        }
        if (hasQuantity) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Quantity);
        }
        if (hasPropertyFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, PropertyFlags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ContentLicense ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContentLicense ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContentLicense ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContentLicense ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContentLicense ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContentLicense ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ContentLicense ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ContentLicense ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ContentLicense ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContentLicense ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ContentLicense MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ContentLicense prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ContentLicense, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ContentLicense cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ContentLicense result;
      
      private ContentLicense PrepareBuilder() {
        if (resultIsReadOnly) {
          ContentLicense original = result;
          result = new ContentLicense();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ContentLicense MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.ContentLicense.Descriptor; }
      }
      
      public override ContentLicense DefaultInstanceForType {
        get { return global::D3.OnlineService.ContentLicense.DefaultInstance; }
      }
      
      public override ContentLicense BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ContentLicense) {
          return MergeFrom((ContentLicense) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ContentLicense other) {
        if (other == global::D3.OnlineService.ContentLicense.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasExpireTime) {
          ExpireTime = other.ExpireTime;
        }
        if (other.HasQuantity) {
          Quantity = other.Quantity;
        }
        if (other.HasPropertyFlags) {
          PropertyFlags = other.PropertyFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_contentLicenseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _contentLicenseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasExpireTime = input.ReadUInt64(ref result.expireTime_);
              break;
            }
            case 24: {
              result.hasQuantity = input.ReadUInt32(ref result.quantity_);
              break;
            }
            case 32: {
              result.hasPropertyFlags = input.ReadUInt32(ref result.propertyFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasExpireTime {
        get { return result.hasExpireTime; }
      }
      public ulong ExpireTime {
        get { return result.ExpireTime; }
        set { SetExpireTime(value); }
      }
      public Builder SetExpireTime(ulong value) {
        PrepareBuilder();
        result.hasExpireTime = true;
        result.expireTime_ = value;
        return this;
      }
      public Builder ClearExpireTime() {
        PrepareBuilder();
        result.hasExpireTime = false;
        result.expireTime_ = 0UL;
        return this;
      }
      
      public bool HasQuantity {
        get { return result.hasQuantity; }
      }
      public uint Quantity {
        get { return result.Quantity; }
        set { SetQuantity(value); }
      }
      public Builder SetQuantity(uint value) {
        PrepareBuilder();
        result.hasQuantity = true;
        result.quantity_ = value;
        return this;
      }
      public Builder ClearQuantity() {
        PrepareBuilder();
        result.hasQuantity = false;
        result.quantity_ = 0;
        return this;
      }
      
      public bool HasPropertyFlags {
        get { return result.hasPropertyFlags; }
      }
      public uint PropertyFlags {
        get { return result.PropertyFlags; }
        set { SetPropertyFlags(value); }
      }
      public Builder SetPropertyFlags(uint value) {
        PrepareBuilder();
        result.hasPropertyFlags = true;
        result.propertyFlags_ = value;
        return this;
      }
      public Builder ClearPropertyFlags() {
        PrepareBuilder();
        result.hasPropertyFlags = false;
        result.propertyFlags_ = 0;
        return this;
      }
    }
    static ContentLicense() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ContentLicenses : pb::GeneratedMessage<ContentLicenses, ContentLicenses.Builder> {
    private ContentLicenses() { }
    private static readonly ContentLicenses defaultInstance = new ContentLicenses().MakeReadOnly();
    private static readonly string[] _contentLicensesFieldNames = new string[] { "licenses" };
    private static readonly uint[] _contentLicensesFieldTags = new uint[] { 10 };
    public static ContentLicenses DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ContentLicenses DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ContentLicenses ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ContentLicenses__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ContentLicenses, ContentLicenses.Builder> InternalFieldAccessors {
      get { return global::D3.OnlineService.OnlineService.internal__static_D3_OnlineService_ContentLicenses__FieldAccessorTable; }
    }
    
    public const int LicensesFieldNumber = 1;
    private pbc::PopsicleList<global::D3.OnlineService.ContentLicense> licenses_ = new pbc::PopsicleList<global::D3.OnlineService.ContentLicense>();
    public scg::IList<global::D3.OnlineService.ContentLicense> LicensesList {
      get { return licenses_; }
    }
    public int LicensesCount {
      get { return licenses_.Count; }
    }
    public global::D3.OnlineService.ContentLicense GetLicenses(int index) {
      return licenses_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.OnlineService.ContentLicense element in LicensesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _contentLicensesFieldNames;
      if (licenses_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], licenses_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.OnlineService.ContentLicense element in LicensesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ContentLicenses ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContentLicenses ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContentLicenses ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContentLicenses ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContentLicenses ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContentLicenses ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ContentLicenses ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ContentLicenses ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ContentLicenses ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContentLicenses ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ContentLicenses MakeReadOnly() {
      licenses_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ContentLicenses prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ContentLicenses, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ContentLicenses cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ContentLicenses result;
      
      private ContentLicenses PrepareBuilder() {
        if (resultIsReadOnly) {
          ContentLicenses original = result;
          result = new ContentLicenses();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ContentLicenses MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.OnlineService.ContentLicenses.Descriptor; }
      }
      
      public override ContentLicenses DefaultInstanceForType {
        get { return global::D3.OnlineService.ContentLicenses.DefaultInstance; }
      }
      
      public override ContentLicenses BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ContentLicenses) {
          return MergeFrom((ContentLicenses) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ContentLicenses other) {
        if (other == global::D3.OnlineService.ContentLicenses.DefaultInstance) return this;
        PrepareBuilder();
        if (other.licenses_.Count != 0) {
          result.licenses_.Add(other.licenses_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_contentLicensesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _contentLicensesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.licenses_, global::D3.OnlineService.ContentLicense.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.OnlineService.ContentLicense> LicensesList {
        get { return PrepareBuilder().licenses_; }
      }
      public int LicensesCount {
        get { return result.LicensesCount; }
      }
      public global::D3.OnlineService.ContentLicense GetLicenses(int index) {
        return result.GetLicenses(index);
      }
      public Builder SetLicenses(int index, global::D3.OnlineService.ContentLicense value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.licenses_[index] = value;
        return this;
      }
      public Builder SetLicenses(int index, global::D3.OnlineService.ContentLicense.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.licenses_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLicenses(global::D3.OnlineService.ContentLicense value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.licenses_.Add(value);
        return this;
      }
      public Builder AddLicenses(global::D3.OnlineService.ContentLicense.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.licenses_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLicenses(scg::IEnumerable<global::D3.OnlineService.ContentLicense> values) {
        PrepareBuilder();
        result.licenses_.Add(values);
        return this;
      }
      public Builder ClearLicenses() {
        PrepareBuilder();
        result.licenses_.Clear();
        return this;
      }
    }
    static ContentLicenses() {
      object.ReferenceEquals(global::D3.OnlineService.OnlineService.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
