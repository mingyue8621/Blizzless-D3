// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Items {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Items {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Items_RareItemName__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.RareItemName, global::D3.Items.RareItemName.Builder> internal__static_D3_Items_RareItemName__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_Generator__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.Generator, global::D3.Items.Generator.Builder> internal__static_D3_Items_Generator__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_GeneratorList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.GeneratorList, global::D3.Items.GeneratorList.Builder> internal__static_D3_Items_GeneratorList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_EmbeddedGenerator__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.EmbeddedGenerator, global::D3.Items.EmbeddedGenerator.Builder> internal__static_D3_Items_EmbeddedGenerator__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_FriendGiftInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.FriendGiftInfo, global::D3.Items.FriendGiftInfo.Builder> internal__static_D3_Items_FriendGiftInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_SavedItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.SavedItem, global::D3.Items.SavedItem.Builder> internal__static_D3_Items_SavedItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_ItemList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.ItemList, global::D3.Items.ItemList.Builder> internal__static_D3_Items_ItemList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_MailAttachments__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.MailAttachments, global::D3.Items.MailAttachments.Builder> internal__static_D3_Items_MailAttachments__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_Mail__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.Mail, global::D3.Items.Mail.Builder> internal__static_D3_Items_Mail__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_Mails__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.Mails, global::D3.Items.Mails.Builder> internal__static_D3_Items_Mails__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_CurrencyData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.CurrencyData, global::D3.Items.CurrencyData.Builder> internal__static_D3_Items_CurrencyData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Items_CurrencySavedData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Items.CurrencySavedData, global::D3.Items.CurrencySavedData.Builder> internal__static_D3_Items_CurrencySavedData__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Items() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgtJdGVtcy5wcm90bxIIRDMuSXRlbXMaEUdhbWVCYWxhbmNlLnByb3RvGhNP" + 
          "bmxpbmVTZXJ2aWNlLnByb3RvIu8BCgxSYXJlSXRlbU5hbWUSNAoTaXRlbV9u" + 
          "YW1lX2lzX3ByZWZpeBgBIAIoCDoFZmFsc2VSEGl0ZW1OYW1lSXNQcmVmaXgS" + 
          "NQoVc25vX2FmZml4X3N0cmluZ19saXN0GAIgAigPOgItMVISc25vQWZmaXhT" + 
          "dHJpbmdMaXN0EjkKF2FmZml4X3N0cmluZ19saXN0X2luZGV4GAMgAigROgIt" + 
          "MVIUYWZmaXhTdHJpbmdMaXN0SW5kZXgSNwoWaXRlbV9zdHJpbmdfbGlzdF9p" + 
          "bmRleBgEIAIoEToCLTFSE2l0ZW1TdHJpbmdMaXN0SW5kZXgiuAwKCUdlbmVy" + 
          "YXRvchIVCgRzZWVkGAEgAigNOgEwUgRzZWVkEjMKCWdiX2hhbmRsZRgCIAIo" + 
          "CzIWLkQzLkdhbWVCYWxhbmNlLkhhbmRsZVIIZ2JIYW5kbGUSIQoMYmFzZV9h" + 
          "ZmZpeGVzGAMgAygPUgtiYXNlQWZmaXhlcxI8Cg5yYXJlX2l0ZW1fbmFtZRgE" + 
          "IAEoCzIWLkQzLkl0ZW1zLlJhcmVJdGVtTmFtZVIMcmFyZUl0ZW1OYW1lEjwK" + 
          "GGRlcHJlY2F0ZWRfZW5jaGFudF9hZmZpeBgFIAEoDzoCLTFSFmRlcHJlY2F0" + 
          "ZWRFbmNoYW50QWZmaXgSFwoFZmxhZ3MYBiACKA06ATBSBWZsYWdzEh4KCmR1" + 
          "cmFiaWxpdHkYByACKA1SCmR1cmFiaWxpdHkSHQoKc3RhY2tfc2l6ZRgIIAIo" + 
          "BFIJc3RhY2tTaXplEhwKCGR5ZV90eXBlGAkgASgNOgEwUgdkeWVUeXBlEi8K" + 
          "Eml0ZW1fcXVhbGl0eV9sZXZlbBgKIAEoEToBMVIQaXRlbVF1YWxpdHlMZXZl" + 
          "bBIvChJpdGVtX2JpbmRpbmdfbGV2ZWwYCyABKBE6ATBSEGl0ZW1CaW5kaW5n" + 
          "TGV2ZWwSKAoObWF4X2R1cmFiaWxpdHkYDCABKA06ATBSDW1heER1cmFiaWxp" + 
          "dHkSNwoIY29udGVudHMYDSADKAsyGy5EMy5JdGVtcy5FbWJlZGRlZEdlbmVy" + 
          "YXRvclIIY29udGVudHMSNQoVaXRlbV91bmxvY2tfdGltZXN0YW1wGA4gASgE" + 
          "OgEwUhNpdGVtVW5sb2NrVGltZXN0YW1wEkIKHGRlcHJlY2F0ZWRfZW5jaGFu" + 
          "dF9yYW5nZV92YWwYDyABKA06ATBSGWRlcHJlY2F0ZWRFbmNoYW50UmFuZ2VW" + 
          "YWwSMwoUbGVnZW5kYXJ5X2l0ZW1fbGV2ZWwYECABKA06ATBSEmxlZ2VuZGFy" + 
          "eUl0ZW1MZXZlbBInCg10cmFuc21vZ19nYmlkGBEgASgPOgItMVIMdHJhbnNt" + 
          "b2dHYmlkEigKDnNlYXNvbl9jcmVhdGVkGBIgASgNOgEwUg1zZWFzb25DcmVh" + 
          "dGVkEjkKF21heF9kdXJhYmlsaXR5X29yaWdpbmFsGBMgASgNOgEwUhVtYXhE" + 
          "dXJhYmlsaXR5T3JpZ2luYWwSMgoTZW5jaGFudGVkX2FmZml4X29sZBgUIAEo" + 
          "DzoCLTFSEWVuY2hhbnRlZEFmZml4T2xkEjIKE2VuY2hhbnRlZF9hZmZpeF9u" + 
          "ZXcYFSABKA86Ai0xUhFlbmNoYW50ZWRBZmZpeE5ldxI7ChhsZWdlbmRhcnlf" + 
          "YmFzZV9pdGVtX2diaWQYFiABKA86Ai0xUhVsZWdlbmRhcnlCYXNlSXRlbUdi" + 
          "aWQSMwoUZW5jaGFudGVkX2FmZml4X3NlZWQYFyABKA06ATBSEmVuY2hhbnRl" + 
          "ZEFmZml4U2VlZBI1ChVlbmNoYW50ZWRfYWZmaXhfY291bnQYGCABKA06ATBS" + 
          "E2VuY2hhbnRlZEFmZml4Q291bnQSKAoQdHJhZGVfYWNjb3VudF9pZBgZIAMo" + 
          "BFIOdHJhZGVBY2NvdW50SWQSKwoQdHJhZGVfdGlja3NfbGVmdBgaIAEoDToB" + 
          "MFIOdHJhZGVUaWNrc0xlZnQSIAoKamV3ZWxfcmFuaxgbIAEoEToBMFIJamV3" + 
          "ZWxSYW5rEioKEWNvbnNvbGVfbWF4X2xldmVsGBwgASgNUg9jb25zb2xlTWF4" + 
          "TGV2ZWwSMwoSY29uc29sZV9wcm9tb19pdGVtGB0gASgIOgVmYWxzZVIQY29u" + 
          "c29sZVByb21vSXRlbRIhCghoYXJkY29yZRgeIAEoCDoFZmFsc2VSCGhhcmRj" + 
          "b3JlEkQKHWRlcHJlY2F0ZWRfY3JhZnRlZF9pdGVtX2xldmVsGB8gASgNOgEw" + 
          "UhpkZXByZWNhdGVkQ3JhZnRlZEl0ZW1MZXZlbBI4ChdjdWJlX2VuY2hhbnRl" + 
          "ZF9nZW1fdHlwZRggIAEoDToBMFIUY3ViZUVuY2hhbnRlZEdlbVR5cGUSOQoX" + 
          "Y3ViZV9lbmNoYW50ZWRfZ2VtX3JhbmsYISABKBE6Ai0xUhRjdWJlRW5jaGFu" + 
          "dGVkR2VtUmFuayJECg1HZW5lcmF0b3JMaXN0EjMKCmdlbmVyYXRvcnMYASAD" + 
          "KAsyEy5EMy5JdGVtcy5HZW5lcmF0b3JSCmdlbmVyYXRvcnMicAoRRW1iZWRk" + 
          "ZWRHZW5lcmF0b3ISKAoCaWQYASACKAsyGC5EMy5PbmxpbmVTZXJ2aWNlLkl0" + 
          "ZW1JZFICaWQSMQoJZ2VuZXJhdG9yGAIgAigLMhMuRDMuSXRlbXMuR2VuZXJh" + 
          "dG9yUglnZW5lcmF0b3IicAoORnJpZW5kR2lmdEluZm8SMQoTaWRfZnJpZW5k" + 
          "X3JlY2lwaWVudBgBIAIoBDoBMFIRaWRGcmllbmRSZWNpcGllbnQSKwoOcmVj" + 
          "aXBpZW50X25hbWUYAiACKAk6BE5PTkVSDXJlY2lwaWVudE5hbWUivQMKCVNh" + 
          "dmVkSXRlbRIoCgJpZBgBIAIoCzIYLkQzLk9ubGluZVNlcnZpY2UuSXRlbUlk" + 
          "UgJpZBJCCg9vd25lcl9lbnRpdHlfaWQYAiABKAsyGi5EMy5PbmxpbmVTZXJ2" + 
          "aWNlLkVudGl0eUlkUg1vd25lckVudGl0eUlkEjUKCXNvY2tldF9pZBgDIAEo" + 
          "CzIYLkQzLk9ubGluZVNlcnZpY2UuSXRlbUlkUghzb2NrZXRJZBIlCg5oaXJl" + 
          "bGluZ19jbGFzcxgEIAIoEVINaGlyZWxpbmdDbGFzcxIbCglpdGVtX3Nsb3QY" + 
          "BSACKBFSCGl0ZW1TbG90EiEKDHNxdWFyZV9pbmRleBgGIAIoEVILc3F1YXJl" + 
          "SW5kZXgSLQoRdXNlZF9zb2NrZXRfY291bnQYByACKA06ATBSD3VzZWRTb2Nr" + 
          "ZXRDb3VudBIxCglnZW5lcmF0b3IYCCABKAsyEy5EMy5JdGVtcy5HZW5lcmF0" + 
          "b3JSCWdlbmVyYXRvchJCChBmcmllbmRfZ2lmdF9pbmZvGAkgASgLMhguRDMu" + 
          "SXRlbXMuRnJpZW5kR2lmdEluZm9SDmZyaWVuZEdpZnRJbmZvIjUKCEl0ZW1M" + 
          "aXN0EikKBWl0ZW1zGAEgAygLMhMuRDMuSXRlbXMuU2F2ZWRJdGVtUgVpdGVt" + 
          "cyI7Cg9NYWlsQXR0YWNobWVudHMSKAoFaXRlbXMYASABKAsyEi5EMy5JdGVt" + 
          "cy5JdGVtTGlzdFIFaXRlbXMisgMKBE1haWwSOQoKYWNjb3VudF90bxgBIAIo" + 
          "CzIaLkQzLk9ubGluZVNlcnZpY2UuRW50aXR5SWRSCWFjY291bnRUbxI9Cgxh" + 
          "Y2NvdW50X2Zyb20YAiACKAsyGi5EMy5PbmxpbmVTZXJ2aWNlLkVudGl0eUlk" + 
          "UgthY2NvdW50RnJvbRIXCgdtYWlsX2lkGAMgAigEUgZtYWlsSWQSFAoFdGl0" + 
          "bGUYBCABKAlSBXRpdGxlEhIKBGJvZHkYBSABKAlSBGJvZHkSFgoGc3RhdHVz" + 
          "GAYgASgNUgZzdGF0dXMSGwoJc2VuZF90aW1lGAcgASgNUghzZW5kVGltZRI7" + 
          "CgthdHRhY2htZW50cxgIIAEoCzIZLkQzLkl0ZW1zLk1haWxBdHRhY2htZW50" + 
          "c1ILYXR0YWNobWVudHMSIQoMcGFydGl0aW9uX2lkGAkgASgNUgtwYXJ0aXRp" + 
          "b25JZBIlCg5zZWFzb25fY3JlYXRlZBgKIAEoDVINc2Vhc29uQ3JlYXRlZBIb" + 
          "CglleHBpcmVfYXQYCyABKARSCGV4cGlyZUF0EhQKBWZsYWdzGAwgASgNUgVm" + 
          "bGFncyI2CgVNYWlscxItCgptYWlsc19wcm9wGAEgAygLMg4uRDMuSXRlbXMu" + 
          "TWFpbFIJbWFpbHNQcm9wIpQBCgxDdXJyZW5jeURhdGESJwoPZ2JpZF9kZXBy" + 
          "ZWNhdGVkGAEgASgPUg5nYmlkRGVwcmVjYXRlZBIXCgVjb3VudBgCIAIoAzoB" + 
          "MFIFY291bnQSEQoCaWQYAyABKA06ATBSAmlkEi8KEmRhdGFfcGVyc2lzdF9m" + 
          "bGFncxgEIAEoDToBMFIQZGF0YVBlcnNpc3RGbGFncyJHChFDdXJyZW5jeVNh" + 
          "dmVkRGF0YRIyCghjdXJyZW5jeRgBIAMoCzIWLkQzLkl0ZW1zLkN1cnJlbmN5" + 
          "RGF0YVIIY3VycmVuY3k=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Items_RareItemName__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Items_RareItemName__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.RareItemName, global::D3.Items.RareItemName.Builder>(internal__static_D3_Items_RareItemName__Descriptor,
                new string[] { "ItemNameIsPrefix", "SnoAffixStringList", "AffixStringListIndex", "ItemStringListIndex", });
        internal__static_D3_Items_Generator__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Items_Generator__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.Generator, global::D3.Items.Generator.Builder>(internal__static_D3_Items_Generator__Descriptor,
                new string[] { "Seed", "GbHandle", "BaseAffixes", "RareItemName", "DeprecatedEnchantAffix", "Flags", "Durability", "StackSize", "DyeType", "ItemQualityLevel", "ItemBindingLevel", "MaxDurability", "Contents", "ItemUnlockTimestamp", "DeprecatedEnchantRangeVal", "LegendaryItemLevel", "TransmogGbid", "SeasonCreated", "MaxDurabilityOriginal", "EnchantedAffixOld", "EnchantedAffixNew", "LegendaryBaseItemGbid", "EnchantedAffixSeed", "EnchantedAffixCount", "TradeAccountId", "TradeTicksLeft", "JewelRank", "ConsoleMaxLevel", "ConsolePromoItem", "Hardcore", "DeprecatedCraftedItemLevel", "CubeEnchantedGemType", "CubeEnchantedGemRank", });
        internal__static_D3_Items_GeneratorList__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_Items_GeneratorList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.GeneratorList, global::D3.Items.GeneratorList.Builder>(internal__static_D3_Items_GeneratorList__Descriptor,
                new string[] { "Generators", });
        internal__static_D3_Items_EmbeddedGenerator__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_Items_EmbeddedGenerator__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.EmbeddedGenerator, global::D3.Items.EmbeddedGenerator.Builder>(internal__static_D3_Items_EmbeddedGenerator__Descriptor,
                new string[] { "Id", "Generator", });
        internal__static_D3_Items_FriendGiftInfo__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_Items_FriendGiftInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.FriendGiftInfo, global::D3.Items.FriendGiftInfo.Builder>(internal__static_D3_Items_FriendGiftInfo__Descriptor,
                new string[] { "IdFriendRecipient", "RecipientName", });
        internal__static_D3_Items_SavedItem__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_Items_SavedItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.SavedItem, global::D3.Items.SavedItem.Builder>(internal__static_D3_Items_SavedItem__Descriptor,
                new string[] { "Id", "OwnerEntityId", "SocketId", "HirelingClass", "ItemSlot", "SquareIndex", "UsedSocketCount", "Generator", "FriendGiftInfo", });
        internal__static_D3_Items_ItemList__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_Items_ItemList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.ItemList, global::D3.Items.ItemList.Builder>(internal__static_D3_Items_ItemList__Descriptor,
                new string[] { "Items", });
        internal__static_D3_Items_MailAttachments__Descriptor = Descriptor.MessageTypes[7];
        internal__static_D3_Items_MailAttachments__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.MailAttachments, global::D3.Items.MailAttachments.Builder>(internal__static_D3_Items_MailAttachments__Descriptor,
                new string[] { "Items", });
        internal__static_D3_Items_Mail__Descriptor = Descriptor.MessageTypes[8];
        internal__static_D3_Items_Mail__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.Mail, global::D3.Items.Mail.Builder>(internal__static_D3_Items_Mail__Descriptor,
                new string[] { "AccountTo", "AccountFrom", "MailId", "Title", "Body", "Status", "SendTime", "Attachments", "PartitionId", "SeasonCreated", "ExpireAt", "Flags", });
        internal__static_D3_Items_Mails__Descriptor = Descriptor.MessageTypes[9];
        internal__static_D3_Items_Mails__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.Mails, global::D3.Items.Mails.Builder>(internal__static_D3_Items_Mails__Descriptor,
                new string[] { "MailsProp", });
        internal__static_D3_Items_CurrencyData__Descriptor = Descriptor.MessageTypes[10];
        internal__static_D3_Items_CurrencyData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.CurrencyData, global::D3.Items.CurrencyData.Builder>(internal__static_D3_Items_CurrencyData__Descriptor,
                new string[] { "GbidDeprecated", "Count", "Id", "DataPersistFlags", });
        internal__static_D3_Items_CurrencySavedData__Descriptor = Descriptor.MessageTypes[11];
        internal__static_D3_Items_CurrencySavedData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Items.CurrencySavedData, global::D3.Items.CurrencySavedData.Builder>(internal__static_D3_Items_CurrencySavedData__Descriptor,
                new string[] { "Currency", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::D3.GameBalance.GameBalance.RegisterAllExtensions(registry);
        global::D3.OnlineService.OnlineService.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.GameBalance.GameBalance.Descriptor, 
          global::D3.OnlineService.OnlineService.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RareItemName : pb::GeneratedMessage<RareItemName, RareItemName.Builder> {
    private RareItemName() { }
    private static readonly RareItemName defaultInstance = new RareItemName().MakeReadOnly();
    private static readonly string[] _rareItemNameFieldNames = new string[] { "affix_string_list_index", "item_name_is_prefix", "item_string_list_index", "sno_affix_string_list" };
    private static readonly uint[] _rareItemNameFieldTags = new uint[] { 24, 8, 32, 21 };
    public static RareItemName DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RareItemName DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RareItemName ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_RareItemName__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RareItemName, RareItemName.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_RareItemName__FieldAccessorTable; }
    }
    
    public const int ItemNameIsPrefixFieldNumber = 1;
    private bool hasItemNameIsPrefix;
    private bool itemNameIsPrefix_;
    public bool HasItemNameIsPrefix {
      get { return hasItemNameIsPrefix; }
    }
    public bool ItemNameIsPrefix {
      get { return itemNameIsPrefix_; }
    }
    
    public const int SnoAffixStringListFieldNumber = 2;
    private bool hasSnoAffixStringList;
    private int snoAffixStringList_ = -1;
    public bool HasSnoAffixStringList {
      get { return hasSnoAffixStringList; }
    }
    public int SnoAffixStringList {
      get { return snoAffixStringList_; }
    }
    
    public const int AffixStringListIndexFieldNumber = 3;
    private bool hasAffixStringListIndex;
    private int affixStringListIndex_ = -1;
    public bool HasAffixStringListIndex {
      get { return hasAffixStringListIndex; }
    }
    public int AffixStringListIndex {
      get { return affixStringListIndex_; }
    }
    
    public const int ItemStringListIndexFieldNumber = 4;
    private bool hasItemStringListIndex;
    private int itemStringListIndex_ = -1;
    public bool HasItemStringListIndex {
      get { return hasItemStringListIndex; }
    }
    public int ItemStringListIndex {
      get { return itemStringListIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemNameIsPrefix) return false;
        if (!hasSnoAffixStringList) return false;
        if (!hasAffixStringListIndex) return false;
        if (!hasItemStringListIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rareItemNameFieldNames;
      if (hasItemNameIsPrefix) {
        output.WriteBool(1, field_names[1], ItemNameIsPrefix);
      }
      if (hasSnoAffixStringList) {
        output.WriteSFixed32(2, field_names[3], SnoAffixStringList);
      }
      if (hasAffixStringListIndex) {
        output.WriteSInt32(3, field_names[0], AffixStringListIndex);
      }
      if (hasItemStringListIndex) {
        output.WriteSInt32(4, field_names[2], ItemStringListIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasItemNameIsPrefix) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, ItemNameIsPrefix);
        }
        if (hasSnoAffixStringList) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(2, SnoAffixStringList);
        }
        if (hasAffixStringListIndex) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, AffixStringListIndex);
        }
        if (hasItemStringListIndex) {
          size += pb::CodedOutputStream.ComputeSInt32Size(4, ItemStringListIndex);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RareItemName ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RareItemName ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RareItemName ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RareItemName ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RareItemName ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RareItemName ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RareItemName ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RareItemName ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RareItemName ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RareItemName ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RareItemName MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RareItemName prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RareItemName, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RareItemName cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RareItemName result;
      
      private RareItemName PrepareBuilder() {
        if (resultIsReadOnly) {
          RareItemName original = result;
          result = new RareItemName();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RareItemName MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.RareItemName.Descriptor; }
      }
      
      public override RareItemName DefaultInstanceForType {
        get { return global::D3.Items.RareItemName.DefaultInstance; }
      }
      
      public override RareItemName BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RareItemName) {
          return MergeFrom((RareItemName) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RareItemName other) {
        if (other == global::D3.Items.RareItemName.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemNameIsPrefix) {
          ItemNameIsPrefix = other.ItemNameIsPrefix;
        }
        if (other.HasSnoAffixStringList) {
          SnoAffixStringList = other.SnoAffixStringList;
        }
        if (other.HasAffixStringListIndex) {
          AffixStringListIndex = other.AffixStringListIndex;
        }
        if (other.HasItemStringListIndex) {
          ItemStringListIndex = other.ItemStringListIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rareItemNameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rareItemNameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemNameIsPrefix = input.ReadBool(ref result.itemNameIsPrefix_);
              break;
            }
            case 21: {
              result.hasSnoAffixStringList = input.ReadSFixed32(ref result.snoAffixStringList_);
              break;
            }
            case 24: {
              result.hasAffixStringListIndex = input.ReadSInt32(ref result.affixStringListIndex_);
              break;
            }
            case 32: {
              result.hasItemStringListIndex = input.ReadSInt32(ref result.itemStringListIndex_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemNameIsPrefix {
        get { return result.hasItemNameIsPrefix; }
      }
      public bool ItemNameIsPrefix {
        get { return result.ItemNameIsPrefix; }
        set { SetItemNameIsPrefix(value); }
      }
      public Builder SetItemNameIsPrefix(bool value) {
        PrepareBuilder();
        result.hasItemNameIsPrefix = true;
        result.itemNameIsPrefix_ = value;
        return this;
      }
      public Builder ClearItemNameIsPrefix() {
        PrepareBuilder();
        result.hasItemNameIsPrefix = false;
        result.itemNameIsPrefix_ = false;
        return this;
      }
      
      public bool HasSnoAffixStringList {
        get { return result.hasSnoAffixStringList; }
      }
      public int SnoAffixStringList {
        get { return result.SnoAffixStringList; }
        set { SetSnoAffixStringList(value); }
      }
      public Builder SetSnoAffixStringList(int value) {
        PrepareBuilder();
        result.hasSnoAffixStringList = true;
        result.snoAffixStringList_ = value;
        return this;
      }
      public Builder ClearSnoAffixStringList() {
        PrepareBuilder();
        result.hasSnoAffixStringList = false;
        result.snoAffixStringList_ = -1;
        return this;
      }
      
      public bool HasAffixStringListIndex {
        get { return result.hasAffixStringListIndex; }
      }
      public int AffixStringListIndex {
        get { return result.AffixStringListIndex; }
        set { SetAffixStringListIndex(value); }
      }
      public Builder SetAffixStringListIndex(int value) {
        PrepareBuilder();
        result.hasAffixStringListIndex = true;
        result.affixStringListIndex_ = value;
        return this;
      }
      public Builder ClearAffixStringListIndex() {
        PrepareBuilder();
        result.hasAffixStringListIndex = false;
        result.affixStringListIndex_ = -1;
        return this;
      }
      
      public bool HasItemStringListIndex {
        get { return result.hasItemStringListIndex; }
      }
      public int ItemStringListIndex {
        get { return result.ItemStringListIndex; }
        set { SetItemStringListIndex(value); }
      }
      public Builder SetItemStringListIndex(int value) {
        PrepareBuilder();
        result.hasItemStringListIndex = true;
        result.itemStringListIndex_ = value;
        return this;
      }
      public Builder ClearItemStringListIndex() {
        PrepareBuilder();
        result.hasItemStringListIndex = false;
        result.itemStringListIndex_ = -1;
        return this;
      }
    }
    static RareItemName() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Generator : pb::GeneratedMessage<Generator, Generator.Builder> {
    private Generator() { }
    private static readonly Generator defaultInstance = new Generator().MakeReadOnly();
    private static readonly string[] _generatorFieldNames = new string[] { "base_affixes", "console_max_level", "console_promo_item", "contents", "cube_enchanted_gem_rank", "cube_enchanted_gem_type", "deprecated_crafted_item_level", "deprecated_enchant_affix", "deprecated_enchant_range_val", "durability", "dye_type", "enchanted_affix_count", "enchanted_affix_new", "enchanted_affix_old", "enchanted_affix_seed", "flags", "gb_handle", "hardcore", "item_binding_level", "item_quality_level", "item_unlock_timestamp", "jewel_rank", "legendary_base_item_gbid", "legendary_item_level", "max_durability", "max_durability_original", "rare_item_name", "season_created", "seed", "stack_size", "trade_account_id", "trade_ticks_left", "transmog_gbid" };
    private static readonly uint[] _generatorFieldTags = new uint[] { 29, 224, 232, 106, 264, 256, 248, 45, 120, 56, 72, 192, 173, 165, 184, 48, 18, 240, 88, 80, 112, 216, 181, 128, 96, 152, 34, 144, 8, 64, 200, 208, 141 };
    public static Generator DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Generator DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Generator ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_Generator__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Generator, Generator.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_Generator__FieldAccessorTable; }
    }
    
    public const int SeedFieldNumber = 1;
    private bool hasSeed;
    private uint seed_;
    public bool HasSeed {
      get { return hasSeed; }
    }
    public uint Seed {
      get { return seed_; }
    }
    
    public const int GbHandleFieldNumber = 2;
    private bool hasGbHandle;
    private global::D3.GameBalance.Handle gbHandle_;
    public bool HasGbHandle {
      get { return hasGbHandle; }
    }
    public global::D3.GameBalance.Handle GbHandle {
      get { return gbHandle_ ?? global::D3.GameBalance.Handle.DefaultInstance; }
    }
    
    public const int BaseAffixesFieldNumber = 3;
    private pbc::PopsicleList<int> baseAffixes_ = new pbc::PopsicleList<int>();
    public scg::IList<int> BaseAffixesList {
      get { return pbc::Lists.AsReadOnly(baseAffixes_); }
    }
    public int BaseAffixesCount {
      get { return baseAffixes_.Count; }
    }
    public int GetBaseAffixes(int index) {
      return baseAffixes_[index];
    }
    
    public const int RareItemNameFieldNumber = 4;
    private bool hasRareItemName;
    private global::D3.Items.RareItemName rareItemName_;
    public bool HasRareItemName {
      get { return hasRareItemName; }
    }
    public global::D3.Items.RareItemName RareItemName {
      get { return rareItemName_ ?? global::D3.Items.RareItemName.DefaultInstance; }
    }
    
    public const int DeprecatedEnchantAffixFieldNumber = 5;
    private bool hasDeprecatedEnchantAffix;
    private int deprecatedEnchantAffix_ = -1;
    public bool HasDeprecatedEnchantAffix {
      get { return hasDeprecatedEnchantAffix; }
    }
    public int DeprecatedEnchantAffix {
      get { return deprecatedEnchantAffix_; }
    }
    
    public const int FlagsFieldNumber = 6;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public uint Flags {
      get { return flags_; }
    }
    
    public const int DurabilityFieldNumber = 7;
    private bool hasDurability;
    private uint durability_;
    public bool HasDurability {
      get { return hasDurability; }
    }
    public uint Durability {
      get { return durability_; }
    }
    
    public const int StackSizeFieldNumber = 8;
    private bool hasStackSize;
    private ulong stackSize_;
    public bool HasStackSize {
      get { return hasStackSize; }
    }
    public ulong StackSize {
      get { return stackSize_; }
    }
    
    public const int DyeTypeFieldNumber = 9;
    private bool hasDyeType;
    private uint dyeType_;
    public bool HasDyeType {
      get { return hasDyeType; }
    }
    public uint DyeType {
      get { return dyeType_; }
    }
    
    public const int ItemQualityLevelFieldNumber = 10;
    private bool hasItemQualityLevel;
    private int itemQualityLevel_ = 1;
    public bool HasItemQualityLevel {
      get { return hasItemQualityLevel; }
    }
    public int ItemQualityLevel {
      get { return itemQualityLevel_; }
    }
    
    public const int ItemBindingLevelFieldNumber = 11;
    private bool hasItemBindingLevel;
    private int itemBindingLevel_;
    public bool HasItemBindingLevel {
      get { return hasItemBindingLevel; }
    }
    public int ItemBindingLevel {
      get { return itemBindingLevel_; }
    }
    
    public const int MaxDurabilityFieldNumber = 12;
    private bool hasMaxDurability;
    private uint maxDurability_;
    public bool HasMaxDurability {
      get { return hasMaxDurability; }
    }
    public uint MaxDurability {
      get { return maxDurability_; }
    }
    
    public const int ContentsFieldNumber = 13;
    private pbc::PopsicleList<global::D3.Items.EmbeddedGenerator> contents_ = new pbc::PopsicleList<global::D3.Items.EmbeddedGenerator>();
    public scg::IList<global::D3.Items.EmbeddedGenerator> ContentsList {
      get { return contents_; }
    }
    public int ContentsCount {
      get { return contents_.Count; }
    }
    public global::D3.Items.EmbeddedGenerator GetContents(int index) {
      return contents_[index];
    }
    
    public const int ItemUnlockTimestampFieldNumber = 14;
    private bool hasItemUnlockTimestamp;
    private ulong itemUnlockTimestamp_;
    public bool HasItemUnlockTimestamp {
      get { return hasItemUnlockTimestamp; }
    }
    public ulong ItemUnlockTimestamp {
      get { return itemUnlockTimestamp_; }
    }
    
    public const int DeprecatedEnchantRangeValFieldNumber = 15;
    private bool hasDeprecatedEnchantRangeVal;
    private uint deprecatedEnchantRangeVal_;
    public bool HasDeprecatedEnchantRangeVal {
      get { return hasDeprecatedEnchantRangeVal; }
    }
    public uint DeprecatedEnchantRangeVal {
      get { return deprecatedEnchantRangeVal_; }
    }
    
    public const int LegendaryItemLevelFieldNumber = 16;
    private bool hasLegendaryItemLevel;
    private uint legendaryItemLevel_;
    public bool HasLegendaryItemLevel {
      get { return hasLegendaryItemLevel; }
    }
    public uint LegendaryItemLevel {
      get { return legendaryItemLevel_; }
    }
    
    public const int TransmogGbidFieldNumber = 17;
    private bool hasTransmogGbid;
    private int transmogGbid_ = -1;
    public bool HasTransmogGbid {
      get { return hasTransmogGbid; }
    }
    public int TransmogGbid {
      get { return transmogGbid_; }
    }
    
    public const int SeasonCreatedFieldNumber = 18;
    private bool hasSeasonCreated;
    private uint seasonCreated_;
    public bool HasSeasonCreated {
      get { return hasSeasonCreated; }
    }
    public uint SeasonCreated {
      get { return seasonCreated_; }
    }
    
    public const int MaxDurabilityOriginalFieldNumber = 19;
    private bool hasMaxDurabilityOriginal;
    private uint maxDurabilityOriginal_;
    public bool HasMaxDurabilityOriginal {
      get { return hasMaxDurabilityOriginal; }
    }
    public uint MaxDurabilityOriginal {
      get { return maxDurabilityOriginal_; }
    }
    
    public const int EnchantedAffixOldFieldNumber = 20;
    private bool hasEnchantedAffixOld;
    private int enchantedAffixOld_ = -1;
    public bool HasEnchantedAffixOld {
      get { return hasEnchantedAffixOld; }
    }
    public int EnchantedAffixOld {
      get { return enchantedAffixOld_; }
    }
    
    public const int EnchantedAffixNewFieldNumber = 21;
    private bool hasEnchantedAffixNew;
    private int enchantedAffixNew_ = -1;
    public bool HasEnchantedAffixNew {
      get { return hasEnchantedAffixNew; }
    }
    public int EnchantedAffixNew {
      get { return enchantedAffixNew_; }
    }
    
    public const int LegendaryBaseItemGbidFieldNumber = 22;
    private bool hasLegendaryBaseItemGbid;
    private int legendaryBaseItemGbid_ = -1;
    public bool HasLegendaryBaseItemGbid {
      get { return hasLegendaryBaseItemGbid; }
    }
    public int LegendaryBaseItemGbid {
      get { return legendaryBaseItemGbid_; }
    }
    
    public const int EnchantedAffixSeedFieldNumber = 23;
    private bool hasEnchantedAffixSeed;
    private uint enchantedAffixSeed_;
    public bool HasEnchantedAffixSeed {
      get { return hasEnchantedAffixSeed; }
    }
    public uint EnchantedAffixSeed {
      get { return enchantedAffixSeed_; }
    }
    
    public const int EnchantedAffixCountFieldNumber = 24;
    private bool hasEnchantedAffixCount;
    private uint enchantedAffixCount_;
    public bool HasEnchantedAffixCount {
      get { return hasEnchantedAffixCount; }
    }
    public uint EnchantedAffixCount {
      get { return enchantedAffixCount_; }
    }
    
    public const int TradeAccountIdFieldNumber = 25;
    private pbc::PopsicleList<ulong> tradeAccountId_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> TradeAccountIdList {
      get { return pbc::Lists.AsReadOnly(tradeAccountId_); }
    }
    public int TradeAccountIdCount {
      get { return tradeAccountId_.Count; }
    }
    public ulong GetTradeAccountId(int index) {
      return tradeAccountId_[index];
    }
    
    public const int TradeTicksLeftFieldNumber = 26;
    private bool hasTradeTicksLeft;
    private uint tradeTicksLeft_;
    public bool HasTradeTicksLeft {
      get { return hasTradeTicksLeft; }
    }
    public uint TradeTicksLeft {
      get { return tradeTicksLeft_; }
    }
    
    public const int JewelRankFieldNumber = 27;
    private bool hasJewelRank;
    private int jewelRank_;
    public bool HasJewelRank {
      get { return hasJewelRank; }
    }
    public int JewelRank {
      get { return jewelRank_; }
    }
    
    public const int ConsoleMaxLevelFieldNumber = 28;
    private bool hasConsoleMaxLevel;
    private uint consoleMaxLevel_;
    public bool HasConsoleMaxLevel {
      get { return hasConsoleMaxLevel; }
    }
    public uint ConsoleMaxLevel {
      get { return consoleMaxLevel_; }
    }
    
    public const int ConsolePromoItemFieldNumber = 29;
    private bool hasConsolePromoItem;
    private bool consolePromoItem_;
    public bool HasConsolePromoItem {
      get { return hasConsolePromoItem; }
    }
    public bool ConsolePromoItem {
      get { return consolePromoItem_; }
    }
    
    public const int HardcoreFieldNumber = 30;
    private bool hasHardcore;
    private bool hardcore_;
    public bool HasHardcore {
      get { return hasHardcore; }
    }
    public bool Hardcore {
      get { return hardcore_; }
    }
    
    public const int DeprecatedCraftedItemLevelFieldNumber = 31;
    private bool hasDeprecatedCraftedItemLevel;
    private uint deprecatedCraftedItemLevel_;
    public bool HasDeprecatedCraftedItemLevel {
      get { return hasDeprecatedCraftedItemLevel; }
    }
    public uint DeprecatedCraftedItemLevel {
      get { return deprecatedCraftedItemLevel_; }
    }
    
    public const int CubeEnchantedGemTypeFieldNumber = 32;
    private bool hasCubeEnchantedGemType;
    private uint cubeEnchantedGemType_;
    public bool HasCubeEnchantedGemType {
      get { return hasCubeEnchantedGemType; }
    }
    public uint CubeEnchantedGemType {
      get { return cubeEnchantedGemType_; }
    }
    
    public const int CubeEnchantedGemRankFieldNumber = 33;
    private bool hasCubeEnchantedGemRank;
    private int cubeEnchantedGemRank_ = -1;
    public bool HasCubeEnchantedGemRank {
      get { return hasCubeEnchantedGemRank; }
    }
    public int CubeEnchantedGemRank {
      get { return cubeEnchantedGemRank_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSeed) return false;
        if (!hasGbHandle) return false;
        if (!hasFlags) return false;
        if (!hasDurability) return false;
        if (!hasStackSize) return false;
        if (!GbHandle.IsInitialized) return false;
        if (HasRareItemName) {
          if (!RareItemName.IsInitialized) return false;
        }
        foreach (global::D3.Items.EmbeddedGenerator element in ContentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _generatorFieldNames;
      if (hasSeed) {
        output.WriteUInt32(1, field_names[28], Seed);
      }
      if (hasGbHandle) {
        output.WriteMessage(2, field_names[16], GbHandle);
      }
      if (baseAffixes_.Count > 0) {
        output.WriteSFixed32Array(3, field_names[0], baseAffixes_);
      }
      if (hasRareItemName) {
        output.WriteMessage(4, field_names[26], RareItemName);
      }
      if (hasDeprecatedEnchantAffix) {
        output.WriteSFixed32(5, field_names[7], DeprecatedEnchantAffix);
      }
      if (hasFlags) {
        output.WriteUInt32(6, field_names[15], Flags);
      }
      if (hasDurability) {
        output.WriteUInt32(7, field_names[9], Durability);
      }
      if (hasStackSize) {
        output.WriteUInt64(8, field_names[29], StackSize);
      }
      if (hasDyeType) {
        output.WriteUInt32(9, field_names[10], DyeType);
      }
      if (hasItemQualityLevel) {
        output.WriteSInt32(10, field_names[19], ItemQualityLevel);
      }
      if (hasItemBindingLevel) {
        output.WriteSInt32(11, field_names[18], ItemBindingLevel);
      }
      if (hasMaxDurability) {
        output.WriteUInt32(12, field_names[24], MaxDurability);
      }
      if (contents_.Count > 0) {
        output.WriteMessageArray(13, field_names[3], contents_);
      }
      if (hasItemUnlockTimestamp) {
        output.WriteUInt64(14, field_names[20], ItemUnlockTimestamp);
      }
      if (hasDeprecatedEnchantRangeVal) {
        output.WriteUInt32(15, field_names[8], DeprecatedEnchantRangeVal);
      }
      if (hasLegendaryItemLevel) {
        output.WriteUInt32(16, field_names[23], LegendaryItemLevel);
      }
      if (hasTransmogGbid) {
        output.WriteSFixed32(17, field_names[32], TransmogGbid);
      }
      if (hasSeasonCreated) {
        output.WriteUInt32(18, field_names[27], SeasonCreated);
      }
      if (hasMaxDurabilityOriginal) {
        output.WriteUInt32(19, field_names[25], MaxDurabilityOriginal);
      }
      if (hasEnchantedAffixOld) {
        output.WriteSFixed32(20, field_names[13], EnchantedAffixOld);
      }
      if (hasEnchantedAffixNew) {
        output.WriteSFixed32(21, field_names[12], EnchantedAffixNew);
      }
      if (hasLegendaryBaseItemGbid) {
        output.WriteSFixed32(22, field_names[22], LegendaryBaseItemGbid);
      }
      if (hasEnchantedAffixSeed) {
        output.WriteUInt32(23, field_names[14], EnchantedAffixSeed);
      }
      if (hasEnchantedAffixCount) {
        output.WriteUInt32(24, field_names[11], EnchantedAffixCount);
      }
      if (tradeAccountId_.Count > 0) {
        output.WriteUInt64Array(25, field_names[30], tradeAccountId_);
      }
      if (hasTradeTicksLeft) {
        output.WriteUInt32(26, field_names[31], TradeTicksLeft);
      }
      if (hasJewelRank) {
        output.WriteSInt32(27, field_names[21], JewelRank);
      }
      if (hasConsoleMaxLevel) {
        output.WriteUInt32(28, field_names[1], ConsoleMaxLevel);
      }
      if (hasConsolePromoItem) {
        output.WriteBool(29, field_names[2], ConsolePromoItem);
      }
      if (hasHardcore) {
        output.WriteBool(30, field_names[17], Hardcore);
      }
      if (hasDeprecatedCraftedItemLevel) {
        output.WriteUInt32(31, field_names[6], DeprecatedCraftedItemLevel);
      }
      if (hasCubeEnchantedGemType) {
        output.WriteUInt32(32, field_names[5], CubeEnchantedGemType);
      }
      if (hasCubeEnchantedGemRank) {
        output.WriteSInt32(33, field_names[4], CubeEnchantedGemRank);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSeed) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Seed);
        }
        if (hasGbHandle) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, GbHandle);
        }
        {
          int dataSize = 0;
          dataSize = 4 * baseAffixes_.Count;
          size += dataSize;
          size += 1 * baseAffixes_.Count;
        }
        if (hasRareItemName) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, RareItemName);
        }
        if (hasDeprecatedEnchantAffix) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(5, DeprecatedEnchantAffix);
        }
        if (hasFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, Flags);
        }
        if (hasDurability) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, Durability);
        }
        if (hasStackSize) {
          size += pb::CodedOutputStream.ComputeUInt64Size(8, StackSize);
        }
        if (hasDyeType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(9, DyeType);
        }
        if (hasItemQualityLevel) {
          size += pb::CodedOutputStream.ComputeSInt32Size(10, ItemQualityLevel);
        }
        if (hasItemBindingLevel) {
          size += pb::CodedOutputStream.ComputeSInt32Size(11, ItemBindingLevel);
        }
        if (hasMaxDurability) {
          size += pb::CodedOutputStream.ComputeUInt32Size(12, MaxDurability);
        }
        foreach (global::D3.Items.EmbeddedGenerator element in ContentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, element);
        }
        if (hasItemUnlockTimestamp) {
          size += pb::CodedOutputStream.ComputeUInt64Size(14, ItemUnlockTimestamp);
        }
        if (hasDeprecatedEnchantRangeVal) {
          size += pb::CodedOutputStream.ComputeUInt32Size(15, DeprecatedEnchantRangeVal);
        }
        if (hasLegendaryItemLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(16, LegendaryItemLevel);
        }
        if (hasTransmogGbid) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(17, TransmogGbid);
        }
        if (hasSeasonCreated) {
          size += pb::CodedOutputStream.ComputeUInt32Size(18, SeasonCreated);
        }
        if (hasMaxDurabilityOriginal) {
          size += pb::CodedOutputStream.ComputeUInt32Size(19, MaxDurabilityOriginal);
        }
        if (hasEnchantedAffixOld) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(20, EnchantedAffixOld);
        }
        if (hasEnchantedAffixNew) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(21, EnchantedAffixNew);
        }
        if (hasLegendaryBaseItemGbid) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(22, LegendaryBaseItemGbid);
        }
        if (hasEnchantedAffixSeed) {
          size += pb::CodedOutputStream.ComputeUInt32Size(23, EnchantedAffixSeed);
        }
        if (hasEnchantedAffixCount) {
          size += pb::CodedOutputStream.ComputeUInt32Size(24, EnchantedAffixCount);
        }
        {
          int dataSize = 0;
          foreach (ulong element in TradeAccountIdList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 2 * tradeAccountId_.Count;
        }
        if (hasTradeTicksLeft) {
          size += pb::CodedOutputStream.ComputeUInt32Size(26, TradeTicksLeft);
        }
        if (hasJewelRank) {
          size += pb::CodedOutputStream.ComputeSInt32Size(27, JewelRank);
        }
        if (hasConsoleMaxLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(28, ConsoleMaxLevel);
        }
        if (hasConsolePromoItem) {
          size += pb::CodedOutputStream.ComputeBoolSize(29, ConsolePromoItem);
        }
        if (hasHardcore) {
          size += pb::CodedOutputStream.ComputeBoolSize(30, Hardcore);
        }
        if (hasDeprecatedCraftedItemLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(31, DeprecatedCraftedItemLevel);
        }
        if (hasCubeEnchantedGemType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(32, CubeEnchantedGemType);
        }
        if (hasCubeEnchantedGemRank) {
          size += pb::CodedOutputStream.ComputeSInt32Size(33, CubeEnchantedGemRank);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Generator ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Generator ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Generator ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Generator ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Generator ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Generator ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Generator ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Generator ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Generator ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Generator ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Generator MakeReadOnly() {
      baseAffixes_.MakeReadOnly();
      contents_.MakeReadOnly();
      tradeAccountId_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Generator prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Generator, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Generator cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Generator result;
      
      private Generator PrepareBuilder() {
        if (resultIsReadOnly) {
          Generator original = result;
          result = new Generator();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Generator MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.Generator.Descriptor; }
      }
      
      public override Generator DefaultInstanceForType {
        get { return global::D3.Items.Generator.DefaultInstance; }
      }
      
      public override Generator BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Generator) {
          return MergeFrom((Generator) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Generator other) {
        if (other == global::D3.Items.Generator.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSeed) {
          Seed = other.Seed;
        }
        if (other.HasGbHandle) {
          MergeGbHandle(other.GbHandle);
        }
        if (other.baseAffixes_.Count != 0) {
          result.baseAffixes_.Add(other.baseAffixes_);
        }
        if (other.HasRareItemName) {
          MergeRareItemName(other.RareItemName);
        }
        if (other.HasDeprecatedEnchantAffix) {
          DeprecatedEnchantAffix = other.DeprecatedEnchantAffix;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        if (other.HasDurability) {
          Durability = other.Durability;
        }
        if (other.HasStackSize) {
          StackSize = other.StackSize;
        }
        if (other.HasDyeType) {
          DyeType = other.DyeType;
        }
        if (other.HasItemQualityLevel) {
          ItemQualityLevel = other.ItemQualityLevel;
        }
        if (other.HasItemBindingLevel) {
          ItemBindingLevel = other.ItemBindingLevel;
        }
        if (other.HasMaxDurability) {
          MaxDurability = other.MaxDurability;
        }
        if (other.contents_.Count != 0) {
          result.contents_.Add(other.contents_);
        }
        if (other.HasItemUnlockTimestamp) {
          ItemUnlockTimestamp = other.ItemUnlockTimestamp;
        }
        if (other.HasDeprecatedEnchantRangeVal) {
          DeprecatedEnchantRangeVal = other.DeprecatedEnchantRangeVal;
        }
        if (other.HasLegendaryItemLevel) {
          LegendaryItemLevel = other.LegendaryItemLevel;
        }
        if (other.HasTransmogGbid) {
          TransmogGbid = other.TransmogGbid;
        }
        if (other.HasSeasonCreated) {
          SeasonCreated = other.SeasonCreated;
        }
        if (other.HasMaxDurabilityOriginal) {
          MaxDurabilityOriginal = other.MaxDurabilityOriginal;
        }
        if (other.HasEnchantedAffixOld) {
          EnchantedAffixOld = other.EnchantedAffixOld;
        }
        if (other.HasEnchantedAffixNew) {
          EnchantedAffixNew = other.EnchantedAffixNew;
        }
        if (other.HasLegendaryBaseItemGbid) {
          LegendaryBaseItemGbid = other.LegendaryBaseItemGbid;
        }
        if (other.HasEnchantedAffixSeed) {
          EnchantedAffixSeed = other.EnchantedAffixSeed;
        }
        if (other.HasEnchantedAffixCount) {
          EnchantedAffixCount = other.EnchantedAffixCount;
        }
        if (other.tradeAccountId_.Count != 0) {
          result.tradeAccountId_.Add(other.tradeAccountId_);
        }
        if (other.HasTradeTicksLeft) {
          TradeTicksLeft = other.TradeTicksLeft;
        }
        if (other.HasJewelRank) {
          JewelRank = other.JewelRank;
        }
        if (other.HasConsoleMaxLevel) {
          ConsoleMaxLevel = other.ConsoleMaxLevel;
        }
        if (other.HasConsolePromoItem) {
          ConsolePromoItem = other.ConsolePromoItem;
        }
        if (other.HasHardcore) {
          Hardcore = other.Hardcore;
        }
        if (other.HasDeprecatedCraftedItemLevel) {
          DeprecatedCraftedItemLevel = other.DeprecatedCraftedItemLevel;
        }
        if (other.HasCubeEnchantedGemType) {
          CubeEnchantedGemType = other.CubeEnchantedGemType;
        }
        if (other.HasCubeEnchantedGemRank) {
          CubeEnchantedGemRank = other.CubeEnchantedGemRank;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_generatorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _generatorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSeed = input.ReadUInt32(ref result.seed_);
              break;
            }
            case 18: {
              global::D3.GameBalance.Handle.Builder subBuilder = global::D3.GameBalance.Handle.CreateBuilder();
              if (result.hasGbHandle) {
                subBuilder.MergeFrom(GbHandle);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GbHandle = subBuilder.BuildPartial();
              break;
            }
            case 26:
            case 29: {
              input.ReadSFixed32Array(tag, field_name, result.baseAffixes_);
              break;
            }
            case 34: {
              global::D3.Items.RareItemName.Builder subBuilder = global::D3.Items.RareItemName.CreateBuilder();
              if (result.hasRareItemName) {
                subBuilder.MergeFrom(RareItemName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RareItemName = subBuilder.BuildPartial();
              break;
            }
            case 45: {
              result.hasDeprecatedEnchantAffix = input.ReadSFixed32(ref result.deprecatedEnchantAffix_);
              break;
            }
            case 48: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
            case 56: {
              result.hasDurability = input.ReadUInt32(ref result.durability_);
              break;
            }
            case 64: {
              result.hasStackSize = input.ReadUInt64(ref result.stackSize_);
              break;
            }
            case 72: {
              result.hasDyeType = input.ReadUInt32(ref result.dyeType_);
              break;
            }
            case 80: {
              result.hasItemQualityLevel = input.ReadSInt32(ref result.itemQualityLevel_);
              break;
            }
            case 88: {
              result.hasItemBindingLevel = input.ReadSInt32(ref result.itemBindingLevel_);
              break;
            }
            case 96: {
              result.hasMaxDurability = input.ReadUInt32(ref result.maxDurability_);
              break;
            }
            case 106: {
              input.ReadMessageArray(tag, field_name, result.contents_, global::D3.Items.EmbeddedGenerator.DefaultInstance, extensionRegistry);
              break;
            }
            case 112: {
              result.hasItemUnlockTimestamp = input.ReadUInt64(ref result.itemUnlockTimestamp_);
              break;
            }
            case 120: {
              result.hasDeprecatedEnchantRangeVal = input.ReadUInt32(ref result.deprecatedEnchantRangeVal_);
              break;
            }
            case 128: {
              result.hasLegendaryItemLevel = input.ReadUInt32(ref result.legendaryItemLevel_);
              break;
            }
            case 141: {
              result.hasTransmogGbid = input.ReadSFixed32(ref result.transmogGbid_);
              break;
            }
            case 144: {
              result.hasSeasonCreated = input.ReadUInt32(ref result.seasonCreated_);
              break;
            }
            case 152: {
              result.hasMaxDurabilityOriginal = input.ReadUInt32(ref result.maxDurabilityOriginal_);
              break;
            }
            case 165: {
              result.hasEnchantedAffixOld = input.ReadSFixed32(ref result.enchantedAffixOld_);
              break;
            }
            case 173: {
              result.hasEnchantedAffixNew = input.ReadSFixed32(ref result.enchantedAffixNew_);
              break;
            }
            case 181: {
              result.hasLegendaryBaseItemGbid = input.ReadSFixed32(ref result.legendaryBaseItemGbid_);
              break;
            }
            case 184: {
              result.hasEnchantedAffixSeed = input.ReadUInt32(ref result.enchantedAffixSeed_);
              break;
            }
            case 192: {
              result.hasEnchantedAffixCount = input.ReadUInt32(ref result.enchantedAffixCount_);
              break;
            }
            case 202:
            case 200: {
              input.ReadUInt64Array(tag, field_name, result.tradeAccountId_);
              break;
            }
            case 208: {
              result.hasTradeTicksLeft = input.ReadUInt32(ref result.tradeTicksLeft_);
              break;
            }
            case 216: {
              result.hasJewelRank = input.ReadSInt32(ref result.jewelRank_);
              break;
            }
            case 224: {
              result.hasConsoleMaxLevel = input.ReadUInt32(ref result.consoleMaxLevel_);
              break;
            }
            case 232: {
              result.hasConsolePromoItem = input.ReadBool(ref result.consolePromoItem_);
              break;
            }
            case 240: {
              result.hasHardcore = input.ReadBool(ref result.hardcore_);
              break;
            }
            case 248: {
              result.hasDeprecatedCraftedItemLevel = input.ReadUInt32(ref result.deprecatedCraftedItemLevel_);
              break;
            }
            case 256: {
              result.hasCubeEnchantedGemType = input.ReadUInt32(ref result.cubeEnchantedGemType_);
              break;
            }
            case 264: {
              result.hasCubeEnchantedGemRank = input.ReadSInt32(ref result.cubeEnchantedGemRank_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSeed {
        get { return result.hasSeed; }
      }
      public uint Seed {
        get { return result.Seed; }
        set { SetSeed(value); }
      }
      public Builder SetSeed(uint value) {
        PrepareBuilder();
        result.hasSeed = true;
        result.seed_ = value;
        return this;
      }
      public Builder ClearSeed() {
        PrepareBuilder();
        result.hasSeed = false;
        result.seed_ = 0;
        return this;
      }
      
      public bool HasGbHandle {
       get { return result.hasGbHandle; }
      }
      public global::D3.GameBalance.Handle GbHandle {
        get { return result.GbHandle; }
        set { SetGbHandle(value); }
      }
      public Builder SetGbHandle(global::D3.GameBalance.Handle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGbHandle = true;
        result.gbHandle_ = value;
        return this;
      }
      public Builder SetGbHandle(global::D3.GameBalance.Handle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGbHandle = true;
        result.gbHandle_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGbHandle(global::D3.GameBalance.Handle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGbHandle &&
            result.gbHandle_ != global::D3.GameBalance.Handle.DefaultInstance) {
            result.gbHandle_ = global::D3.GameBalance.Handle.CreateBuilder(result.gbHandle_).MergeFrom(value).BuildPartial();
        } else {
          result.gbHandle_ = value;
        }
        result.hasGbHandle = true;
        return this;
      }
      public Builder ClearGbHandle() {
        PrepareBuilder();
        result.hasGbHandle = false;
        result.gbHandle_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<int> BaseAffixesList {
        get { return PrepareBuilder().baseAffixes_; }
      }
      public int BaseAffixesCount {
        get { return result.BaseAffixesCount; }
      }
      public int GetBaseAffixes(int index) {
        return result.GetBaseAffixes(index);
      }
      public Builder SetBaseAffixes(int index, int value) {
        PrepareBuilder();
        result.baseAffixes_[index] = value;
        return this;
      }
      public Builder AddBaseAffixes(int value) {
        PrepareBuilder();
        result.baseAffixes_.Add(value);
        return this;
      }
      public Builder AddRangeBaseAffixes(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.baseAffixes_.Add(values);
        return this;
      }
      public Builder ClearBaseAffixes() {
        PrepareBuilder();
        result.baseAffixes_.Clear();
        return this;
      }
      
      public bool HasRareItemName {
       get { return result.hasRareItemName; }
      }
      public global::D3.Items.RareItemName RareItemName {
        get { return result.RareItemName; }
        set { SetRareItemName(value); }
      }
      public Builder SetRareItemName(global::D3.Items.RareItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRareItemName = true;
        result.rareItemName_ = value;
        return this;
      }
      public Builder SetRareItemName(global::D3.Items.RareItemName.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRareItemName = true;
        result.rareItemName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRareItemName(global::D3.Items.RareItemName value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRareItemName &&
            result.rareItemName_ != global::D3.Items.RareItemName.DefaultInstance) {
            result.rareItemName_ = global::D3.Items.RareItemName.CreateBuilder(result.rareItemName_).MergeFrom(value).BuildPartial();
        } else {
          result.rareItemName_ = value;
        }
        result.hasRareItemName = true;
        return this;
      }
      public Builder ClearRareItemName() {
        PrepareBuilder();
        result.hasRareItemName = false;
        result.rareItemName_ = null;
        return this;
      }
      
      public bool HasDeprecatedEnchantAffix {
        get { return result.hasDeprecatedEnchantAffix; }
      }
      public int DeprecatedEnchantAffix {
        get { return result.DeprecatedEnchantAffix; }
        set { SetDeprecatedEnchantAffix(value); }
      }
      public Builder SetDeprecatedEnchantAffix(int value) {
        PrepareBuilder();
        result.hasDeprecatedEnchantAffix = true;
        result.deprecatedEnchantAffix_ = value;
        return this;
      }
      public Builder ClearDeprecatedEnchantAffix() {
        PrepareBuilder();
        result.hasDeprecatedEnchantAffix = false;
        result.deprecatedEnchantAffix_ = -1;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(uint value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
      
      public bool HasDurability {
        get { return result.hasDurability; }
      }
      public uint Durability {
        get { return result.Durability; }
        set { SetDurability(value); }
      }
      public Builder SetDurability(uint value) {
        PrepareBuilder();
        result.hasDurability = true;
        result.durability_ = value;
        return this;
      }
      public Builder ClearDurability() {
        PrepareBuilder();
        result.hasDurability = false;
        result.durability_ = 0;
        return this;
      }
      
      public bool HasStackSize {
        get { return result.hasStackSize; }
      }
      public ulong StackSize {
        get { return result.StackSize; }
        set { SetStackSize(value); }
      }
      public Builder SetStackSize(ulong value) {
        PrepareBuilder();
        result.hasStackSize = true;
        result.stackSize_ = value;
        return this;
      }
      public Builder ClearStackSize() {
        PrepareBuilder();
        result.hasStackSize = false;
        result.stackSize_ = 0UL;
        return this;
      }
      
      public bool HasDyeType {
        get { return result.hasDyeType; }
      }
      public uint DyeType {
        get { return result.DyeType; }
        set { SetDyeType(value); }
      }
      public Builder SetDyeType(uint value) {
        PrepareBuilder();
        result.hasDyeType = true;
        result.dyeType_ = value;
        return this;
      }
      public Builder ClearDyeType() {
        PrepareBuilder();
        result.hasDyeType = false;
        result.dyeType_ = 0;
        return this;
      }
      
      public bool HasItemQualityLevel {
        get { return result.hasItemQualityLevel; }
      }
      public int ItemQualityLevel {
        get { return result.ItemQualityLevel; }
        set { SetItemQualityLevel(value); }
      }
      public Builder SetItemQualityLevel(int value) {
        PrepareBuilder();
        result.hasItemQualityLevel = true;
        result.itemQualityLevel_ = value;
        return this;
      }
      public Builder ClearItemQualityLevel() {
        PrepareBuilder();
        result.hasItemQualityLevel = false;
        result.itemQualityLevel_ = 1;
        return this;
      }
      
      public bool HasItemBindingLevel {
        get { return result.hasItemBindingLevel; }
      }
      public int ItemBindingLevel {
        get { return result.ItemBindingLevel; }
        set { SetItemBindingLevel(value); }
      }
      public Builder SetItemBindingLevel(int value) {
        PrepareBuilder();
        result.hasItemBindingLevel = true;
        result.itemBindingLevel_ = value;
        return this;
      }
      public Builder ClearItemBindingLevel() {
        PrepareBuilder();
        result.hasItemBindingLevel = false;
        result.itemBindingLevel_ = 0;
        return this;
      }
      
      public bool HasMaxDurability {
        get { return result.hasMaxDurability; }
      }
      public uint MaxDurability {
        get { return result.MaxDurability; }
        set { SetMaxDurability(value); }
      }
      public Builder SetMaxDurability(uint value) {
        PrepareBuilder();
        result.hasMaxDurability = true;
        result.maxDurability_ = value;
        return this;
      }
      public Builder ClearMaxDurability() {
        PrepareBuilder();
        result.hasMaxDurability = false;
        result.maxDurability_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Items.EmbeddedGenerator> ContentsList {
        get { return PrepareBuilder().contents_; }
      }
      public int ContentsCount {
        get { return result.ContentsCount; }
      }
      public global::D3.Items.EmbeddedGenerator GetContents(int index) {
        return result.GetContents(index);
      }
      public Builder SetContents(int index, global::D3.Items.EmbeddedGenerator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contents_[index] = value;
        return this;
      }
      public Builder SetContents(int index, global::D3.Items.EmbeddedGenerator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contents_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddContents(global::D3.Items.EmbeddedGenerator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contents_.Add(value);
        return this;
      }
      public Builder AddContents(global::D3.Items.EmbeddedGenerator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contents_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeContents(scg::IEnumerable<global::D3.Items.EmbeddedGenerator> values) {
        PrepareBuilder();
        result.contents_.Add(values);
        return this;
      }
      public Builder ClearContents() {
        PrepareBuilder();
        result.contents_.Clear();
        return this;
      }
      
      public bool HasItemUnlockTimestamp {
        get { return result.hasItemUnlockTimestamp; }
      }
      public ulong ItemUnlockTimestamp {
        get { return result.ItemUnlockTimestamp; }
        set { SetItemUnlockTimestamp(value); }
      }
      public Builder SetItemUnlockTimestamp(ulong value) {
        PrepareBuilder();
        result.hasItemUnlockTimestamp = true;
        result.itemUnlockTimestamp_ = value;
        return this;
      }
      public Builder ClearItemUnlockTimestamp() {
        PrepareBuilder();
        result.hasItemUnlockTimestamp = false;
        result.itemUnlockTimestamp_ = 0UL;
        return this;
      }
      
      public bool HasDeprecatedEnchantRangeVal {
        get { return result.hasDeprecatedEnchantRangeVal; }
      }
      public uint DeprecatedEnchantRangeVal {
        get { return result.DeprecatedEnchantRangeVal; }
        set { SetDeprecatedEnchantRangeVal(value); }
      }
      public Builder SetDeprecatedEnchantRangeVal(uint value) {
        PrepareBuilder();
        result.hasDeprecatedEnchantRangeVal = true;
        result.deprecatedEnchantRangeVal_ = value;
        return this;
      }
      public Builder ClearDeprecatedEnchantRangeVal() {
        PrepareBuilder();
        result.hasDeprecatedEnchantRangeVal = false;
        result.deprecatedEnchantRangeVal_ = 0;
        return this;
      }
      
      public bool HasLegendaryItemLevel {
        get { return result.hasLegendaryItemLevel; }
      }
      public uint LegendaryItemLevel {
        get { return result.LegendaryItemLevel; }
        set { SetLegendaryItemLevel(value); }
      }
      public Builder SetLegendaryItemLevel(uint value) {
        PrepareBuilder();
        result.hasLegendaryItemLevel = true;
        result.legendaryItemLevel_ = value;
        return this;
      }
      public Builder ClearLegendaryItemLevel() {
        PrepareBuilder();
        result.hasLegendaryItemLevel = false;
        result.legendaryItemLevel_ = 0;
        return this;
      }
      
      public bool HasTransmogGbid {
        get { return result.hasTransmogGbid; }
      }
      public int TransmogGbid {
        get { return result.TransmogGbid; }
        set { SetTransmogGbid(value); }
      }
      public Builder SetTransmogGbid(int value) {
        PrepareBuilder();
        result.hasTransmogGbid = true;
        result.transmogGbid_ = value;
        return this;
      }
      public Builder ClearTransmogGbid() {
        PrepareBuilder();
        result.hasTransmogGbid = false;
        result.transmogGbid_ = -1;
        return this;
      }
      
      public bool HasSeasonCreated {
        get { return result.hasSeasonCreated; }
      }
      public uint SeasonCreated {
        get { return result.SeasonCreated; }
        set { SetSeasonCreated(value); }
      }
      public Builder SetSeasonCreated(uint value) {
        PrepareBuilder();
        result.hasSeasonCreated = true;
        result.seasonCreated_ = value;
        return this;
      }
      public Builder ClearSeasonCreated() {
        PrepareBuilder();
        result.hasSeasonCreated = false;
        result.seasonCreated_ = 0;
        return this;
      }
      
      public bool HasMaxDurabilityOriginal {
        get { return result.hasMaxDurabilityOriginal; }
      }
      public uint MaxDurabilityOriginal {
        get { return result.MaxDurabilityOriginal; }
        set { SetMaxDurabilityOriginal(value); }
      }
      public Builder SetMaxDurabilityOriginal(uint value) {
        PrepareBuilder();
        result.hasMaxDurabilityOriginal = true;
        result.maxDurabilityOriginal_ = value;
        return this;
      }
      public Builder ClearMaxDurabilityOriginal() {
        PrepareBuilder();
        result.hasMaxDurabilityOriginal = false;
        result.maxDurabilityOriginal_ = 0;
        return this;
      }
      
      public bool HasEnchantedAffixOld {
        get { return result.hasEnchantedAffixOld; }
      }
      public int EnchantedAffixOld {
        get { return result.EnchantedAffixOld; }
        set { SetEnchantedAffixOld(value); }
      }
      public Builder SetEnchantedAffixOld(int value) {
        PrepareBuilder();
        result.hasEnchantedAffixOld = true;
        result.enchantedAffixOld_ = value;
        return this;
      }
      public Builder ClearEnchantedAffixOld() {
        PrepareBuilder();
        result.hasEnchantedAffixOld = false;
        result.enchantedAffixOld_ = -1;
        return this;
      }
      
      public bool HasEnchantedAffixNew {
        get { return result.hasEnchantedAffixNew; }
      }
      public int EnchantedAffixNew {
        get { return result.EnchantedAffixNew; }
        set { SetEnchantedAffixNew(value); }
      }
      public Builder SetEnchantedAffixNew(int value) {
        PrepareBuilder();
        result.hasEnchantedAffixNew = true;
        result.enchantedAffixNew_ = value;
        return this;
      }
      public Builder ClearEnchantedAffixNew() {
        PrepareBuilder();
        result.hasEnchantedAffixNew = false;
        result.enchantedAffixNew_ = -1;
        return this;
      }
      
      public bool HasLegendaryBaseItemGbid {
        get { return result.hasLegendaryBaseItemGbid; }
      }
      public int LegendaryBaseItemGbid {
        get { return result.LegendaryBaseItemGbid; }
        set { SetLegendaryBaseItemGbid(value); }
      }
      public Builder SetLegendaryBaseItemGbid(int value) {
        PrepareBuilder();
        result.hasLegendaryBaseItemGbid = true;
        result.legendaryBaseItemGbid_ = value;
        return this;
      }
      public Builder ClearLegendaryBaseItemGbid() {
        PrepareBuilder();
        result.hasLegendaryBaseItemGbid = false;
        result.legendaryBaseItemGbid_ = -1;
        return this;
      }
      
      public bool HasEnchantedAffixSeed {
        get { return result.hasEnchantedAffixSeed; }
      }
      public uint EnchantedAffixSeed {
        get { return result.EnchantedAffixSeed; }
        set { SetEnchantedAffixSeed(value); }
      }
      public Builder SetEnchantedAffixSeed(uint value) {
        PrepareBuilder();
        result.hasEnchantedAffixSeed = true;
        result.enchantedAffixSeed_ = value;
        return this;
      }
      public Builder ClearEnchantedAffixSeed() {
        PrepareBuilder();
        result.hasEnchantedAffixSeed = false;
        result.enchantedAffixSeed_ = 0;
        return this;
      }
      
      public bool HasEnchantedAffixCount {
        get { return result.hasEnchantedAffixCount; }
      }
      public uint EnchantedAffixCount {
        get { return result.EnchantedAffixCount; }
        set { SetEnchantedAffixCount(value); }
      }
      public Builder SetEnchantedAffixCount(uint value) {
        PrepareBuilder();
        result.hasEnchantedAffixCount = true;
        result.enchantedAffixCount_ = value;
        return this;
      }
      public Builder ClearEnchantedAffixCount() {
        PrepareBuilder();
        result.hasEnchantedAffixCount = false;
        result.enchantedAffixCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> TradeAccountIdList {
        get { return PrepareBuilder().tradeAccountId_; }
      }
      public int TradeAccountIdCount {
        get { return result.TradeAccountIdCount; }
      }
      public ulong GetTradeAccountId(int index) {
        return result.GetTradeAccountId(index);
      }
      public Builder SetTradeAccountId(int index, ulong value) {
        PrepareBuilder();
        result.tradeAccountId_[index] = value;
        return this;
      }
      public Builder AddTradeAccountId(ulong value) {
        PrepareBuilder();
        result.tradeAccountId_.Add(value);
        return this;
      }
      public Builder AddRangeTradeAccountId(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.tradeAccountId_.Add(values);
        return this;
      }
      public Builder ClearTradeAccountId() {
        PrepareBuilder();
        result.tradeAccountId_.Clear();
        return this;
      }
      
      public bool HasTradeTicksLeft {
        get { return result.hasTradeTicksLeft; }
      }
      public uint TradeTicksLeft {
        get { return result.TradeTicksLeft; }
        set { SetTradeTicksLeft(value); }
      }
      public Builder SetTradeTicksLeft(uint value) {
        PrepareBuilder();
        result.hasTradeTicksLeft = true;
        result.tradeTicksLeft_ = value;
        return this;
      }
      public Builder ClearTradeTicksLeft() {
        PrepareBuilder();
        result.hasTradeTicksLeft = false;
        result.tradeTicksLeft_ = 0;
        return this;
      }
      
      public bool HasJewelRank {
        get { return result.hasJewelRank; }
      }
      public int JewelRank {
        get { return result.JewelRank; }
        set { SetJewelRank(value); }
      }
      public Builder SetJewelRank(int value) {
        PrepareBuilder();
        result.hasJewelRank = true;
        result.jewelRank_ = value;
        return this;
      }
      public Builder ClearJewelRank() {
        PrepareBuilder();
        result.hasJewelRank = false;
        result.jewelRank_ = 0;
        return this;
      }
      
      public bool HasConsoleMaxLevel {
        get { return result.hasConsoleMaxLevel; }
      }
      public uint ConsoleMaxLevel {
        get { return result.ConsoleMaxLevel; }
        set { SetConsoleMaxLevel(value); }
      }
      public Builder SetConsoleMaxLevel(uint value) {
        PrepareBuilder();
        result.hasConsoleMaxLevel = true;
        result.consoleMaxLevel_ = value;
        return this;
      }
      public Builder ClearConsoleMaxLevel() {
        PrepareBuilder();
        result.hasConsoleMaxLevel = false;
        result.consoleMaxLevel_ = 0;
        return this;
      }
      
      public bool HasConsolePromoItem {
        get { return result.hasConsolePromoItem; }
      }
      public bool ConsolePromoItem {
        get { return result.ConsolePromoItem; }
        set { SetConsolePromoItem(value); }
      }
      public Builder SetConsolePromoItem(bool value) {
        PrepareBuilder();
        result.hasConsolePromoItem = true;
        result.consolePromoItem_ = value;
        return this;
      }
      public Builder ClearConsolePromoItem() {
        PrepareBuilder();
        result.hasConsolePromoItem = false;
        result.consolePromoItem_ = false;
        return this;
      }
      
      public bool HasHardcore {
        get { return result.hasHardcore; }
      }
      public bool Hardcore {
        get { return result.Hardcore; }
        set { SetHardcore(value); }
      }
      public Builder SetHardcore(bool value) {
        PrepareBuilder();
        result.hasHardcore = true;
        result.hardcore_ = value;
        return this;
      }
      public Builder ClearHardcore() {
        PrepareBuilder();
        result.hasHardcore = false;
        result.hardcore_ = false;
        return this;
      }
      
      public bool HasDeprecatedCraftedItemLevel {
        get { return result.hasDeprecatedCraftedItemLevel; }
      }
      public uint DeprecatedCraftedItemLevel {
        get { return result.DeprecatedCraftedItemLevel; }
        set { SetDeprecatedCraftedItemLevel(value); }
      }
      public Builder SetDeprecatedCraftedItemLevel(uint value) {
        PrepareBuilder();
        result.hasDeprecatedCraftedItemLevel = true;
        result.deprecatedCraftedItemLevel_ = value;
        return this;
      }
      public Builder ClearDeprecatedCraftedItemLevel() {
        PrepareBuilder();
        result.hasDeprecatedCraftedItemLevel = false;
        result.deprecatedCraftedItemLevel_ = 0;
        return this;
      }
      
      public bool HasCubeEnchantedGemType {
        get { return result.hasCubeEnchantedGemType; }
      }
      public uint CubeEnchantedGemType {
        get { return result.CubeEnchantedGemType; }
        set { SetCubeEnchantedGemType(value); }
      }
      public Builder SetCubeEnchantedGemType(uint value) {
        PrepareBuilder();
        result.hasCubeEnchantedGemType = true;
        result.cubeEnchantedGemType_ = value;
        return this;
      }
      public Builder ClearCubeEnchantedGemType() {
        PrepareBuilder();
        result.hasCubeEnchantedGemType = false;
        result.cubeEnchantedGemType_ = 0;
        return this;
      }
      
      public bool HasCubeEnchantedGemRank {
        get { return result.hasCubeEnchantedGemRank; }
      }
      public int CubeEnchantedGemRank {
        get { return result.CubeEnchantedGemRank; }
        set { SetCubeEnchantedGemRank(value); }
      }
      public Builder SetCubeEnchantedGemRank(int value) {
        PrepareBuilder();
        result.hasCubeEnchantedGemRank = true;
        result.cubeEnchantedGemRank_ = value;
        return this;
      }
      public Builder ClearCubeEnchantedGemRank() {
        PrepareBuilder();
        result.hasCubeEnchantedGemRank = false;
        result.cubeEnchantedGemRank_ = -1;
        return this;
      }
    }
    static Generator() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GeneratorList : pb::GeneratedMessage<GeneratorList, GeneratorList.Builder> {
    private GeneratorList() { }
    private static readonly GeneratorList defaultInstance = new GeneratorList().MakeReadOnly();
    private static readonly string[] _generatorListFieldNames = new string[] { "generators" };
    private static readonly uint[] _generatorListFieldTags = new uint[] { 10 };
    public static GeneratorList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GeneratorList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GeneratorList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_GeneratorList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GeneratorList, GeneratorList.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_GeneratorList__FieldAccessorTable; }
    }
    
    public const int GeneratorsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Items.Generator> generators_ = new pbc::PopsicleList<global::D3.Items.Generator>();
    public scg::IList<global::D3.Items.Generator> GeneratorsList {
      get { return generators_; }
    }
    public int GeneratorsCount {
      get { return generators_.Count; }
    }
    public global::D3.Items.Generator GetGenerators(int index) {
      return generators_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Items.Generator element in GeneratorsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _generatorListFieldNames;
      if (generators_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], generators_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Items.Generator element in GeneratorsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GeneratorList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GeneratorList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GeneratorList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GeneratorList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GeneratorList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GeneratorList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GeneratorList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GeneratorList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GeneratorList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GeneratorList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GeneratorList MakeReadOnly() {
      generators_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GeneratorList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GeneratorList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GeneratorList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GeneratorList result;
      
      private GeneratorList PrepareBuilder() {
        if (resultIsReadOnly) {
          GeneratorList original = result;
          result = new GeneratorList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GeneratorList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.GeneratorList.Descriptor; }
      }
      
      public override GeneratorList DefaultInstanceForType {
        get { return global::D3.Items.GeneratorList.DefaultInstance; }
      }
      
      public override GeneratorList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GeneratorList) {
          return MergeFrom((GeneratorList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GeneratorList other) {
        if (other == global::D3.Items.GeneratorList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.generators_.Count != 0) {
          result.generators_.Add(other.generators_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_generatorListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _generatorListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.generators_, global::D3.Items.Generator.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Items.Generator> GeneratorsList {
        get { return PrepareBuilder().generators_; }
      }
      public int GeneratorsCount {
        get { return result.GeneratorsCount; }
      }
      public global::D3.Items.Generator GetGenerators(int index) {
        return result.GetGenerators(index);
      }
      public Builder SetGenerators(int index, global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.generators_[index] = value;
        return this;
      }
      public Builder SetGenerators(int index, global::D3.Items.Generator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.generators_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGenerators(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.generators_.Add(value);
        return this;
      }
      public Builder AddGenerators(global::D3.Items.Generator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.generators_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGenerators(scg::IEnumerable<global::D3.Items.Generator> values) {
        PrepareBuilder();
        result.generators_.Add(values);
        return this;
      }
      public Builder ClearGenerators() {
        PrepareBuilder();
        result.generators_.Clear();
        return this;
      }
    }
    static GeneratorList() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class EmbeddedGenerator : pb::GeneratedMessage<EmbeddedGenerator, EmbeddedGenerator.Builder> {
    private EmbeddedGenerator() { }
    private static readonly EmbeddedGenerator defaultInstance = new EmbeddedGenerator().MakeReadOnly();
    private static readonly string[] _embeddedGeneratorFieldNames = new string[] { "generator", "id" };
    private static readonly uint[] _embeddedGeneratorFieldTags = new uint[] { 18, 10 };
    public static EmbeddedGenerator DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EmbeddedGenerator DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EmbeddedGenerator ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_EmbeddedGenerator__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EmbeddedGenerator, EmbeddedGenerator.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_EmbeddedGenerator__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private global::D3.OnlineService.ItemId id_;
    public bool HasId {
      get { return hasId; }
    }
    public global::D3.OnlineService.ItemId Id {
      get { return id_ ?? global::D3.OnlineService.ItemId.DefaultInstance; }
    }
    
    public const int GeneratorFieldNumber = 2;
    private bool hasGenerator;
    private global::D3.Items.Generator generator_;
    public bool HasGenerator {
      get { return hasGenerator; }
    }
    public global::D3.Items.Generator Generator {
      get { return generator_ ?? global::D3.Items.Generator.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasGenerator) return false;
        if (!Id.IsInitialized) return false;
        if (!Generator.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _embeddedGeneratorFieldNames;
      if (hasId) {
        output.WriteMessage(1, field_names[1], Id);
      }
      if (hasGenerator) {
        output.WriteMessage(2, field_names[0], Generator);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Id);
        }
        if (hasGenerator) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Generator);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EmbeddedGenerator ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EmbeddedGenerator ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EmbeddedGenerator ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EmbeddedGenerator ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EmbeddedGenerator ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EmbeddedGenerator ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EmbeddedGenerator ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EmbeddedGenerator ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EmbeddedGenerator ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EmbeddedGenerator ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EmbeddedGenerator MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EmbeddedGenerator prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<EmbeddedGenerator, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EmbeddedGenerator cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EmbeddedGenerator result;
      
      private EmbeddedGenerator PrepareBuilder() {
        if (resultIsReadOnly) {
          EmbeddedGenerator original = result;
          result = new EmbeddedGenerator();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EmbeddedGenerator MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.EmbeddedGenerator.Descriptor; }
      }
      
      public override EmbeddedGenerator DefaultInstanceForType {
        get { return global::D3.Items.EmbeddedGenerator.DefaultInstance; }
      }
      
      public override EmbeddedGenerator BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EmbeddedGenerator) {
          return MergeFrom((EmbeddedGenerator) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EmbeddedGenerator other) {
        if (other == global::D3.Items.EmbeddedGenerator.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          MergeId(other.Id);
        }
        if (other.HasGenerator) {
          MergeGenerator(other.Generator);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_embeddedGeneratorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _embeddedGeneratorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.ItemId.Builder subBuilder = global::D3.OnlineService.ItemId.CreateBuilder();
              if (result.hasId) {
                subBuilder.MergeFrom(Id);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Id = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.Items.Generator.Builder subBuilder = global::D3.Items.Generator.CreateBuilder();
              if (result.hasGenerator) {
                subBuilder.MergeFrom(Generator);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Generator = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
       get { return result.hasId; }
      }
      public global::D3.OnlineService.ItemId Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder SetId(global::D3.OnlineService.ItemId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = builderForValue.Build();
        return this;
      }
      public Builder MergeId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasId &&
            result.id_ != global::D3.OnlineService.ItemId.DefaultInstance) {
            result.id_ = global::D3.OnlineService.ItemId.CreateBuilder(result.id_).MergeFrom(value).BuildPartial();
        } else {
          result.id_ = value;
        }
        result.hasId = true;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = null;
        return this;
      }
      
      public bool HasGenerator {
       get { return result.hasGenerator; }
      }
      public global::D3.Items.Generator Generator {
        get { return result.Generator; }
        set { SetGenerator(value); }
      }
      public Builder SetGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGenerator = true;
        result.generator_ = value;
        return this;
      }
      public Builder SetGenerator(global::D3.Items.Generator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGenerator = true;
        result.generator_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGenerator &&
            result.generator_ != global::D3.Items.Generator.DefaultInstance) {
            result.generator_ = global::D3.Items.Generator.CreateBuilder(result.generator_).MergeFrom(value).BuildPartial();
        } else {
          result.generator_ = value;
        }
        result.hasGenerator = true;
        return this;
      }
      public Builder ClearGenerator() {
        PrepareBuilder();
        result.hasGenerator = false;
        result.generator_ = null;
        return this;
      }
    }
    static EmbeddedGenerator() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FriendGiftInfo : pb::GeneratedMessage<FriendGiftInfo, FriendGiftInfo.Builder> {
    private FriendGiftInfo() { }
    private static readonly FriendGiftInfo defaultInstance = new FriendGiftInfo().MakeReadOnly();
    private static readonly string[] _friendGiftInfoFieldNames = new string[] { "id_friend_recipient", "recipient_name" };
    private static readonly uint[] _friendGiftInfoFieldTags = new uint[] { 8, 18 };
    public static FriendGiftInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FriendGiftInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FriendGiftInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_FriendGiftInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FriendGiftInfo, FriendGiftInfo.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_FriendGiftInfo__FieldAccessorTable; }
    }
    
    public const int IdFriendRecipientFieldNumber = 1;
    private bool hasIdFriendRecipient;
    private ulong idFriendRecipient_;
    public bool HasIdFriendRecipient {
      get { return hasIdFriendRecipient; }
    }
    public ulong IdFriendRecipient {
      get { return idFriendRecipient_; }
    }
    
    public const int RecipientNameFieldNumber = 2;
    private bool hasRecipientName;
    private string recipientName_ = "NONE";
    public bool HasRecipientName {
      get { return hasRecipientName; }
    }
    public string RecipientName {
      get { return recipientName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdFriendRecipient) return false;
        if (!hasRecipientName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _friendGiftInfoFieldNames;
      if (hasIdFriendRecipient) {
        output.WriteUInt64(1, field_names[0], IdFriendRecipient);
      }
      if (hasRecipientName) {
        output.WriteString(2, field_names[1], RecipientName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIdFriendRecipient) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, IdFriendRecipient);
        }
        if (hasRecipientName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, RecipientName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FriendGiftInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FriendGiftInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FriendGiftInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FriendGiftInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FriendGiftInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FriendGiftInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FriendGiftInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FriendGiftInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FriendGiftInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FriendGiftInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FriendGiftInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FriendGiftInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FriendGiftInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FriendGiftInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FriendGiftInfo result;
      
      private FriendGiftInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          FriendGiftInfo original = result;
          result = new FriendGiftInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FriendGiftInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.FriendGiftInfo.Descriptor; }
      }
      
      public override FriendGiftInfo DefaultInstanceForType {
        get { return global::D3.Items.FriendGiftInfo.DefaultInstance; }
      }
      
      public override FriendGiftInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FriendGiftInfo) {
          return MergeFrom((FriendGiftInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FriendGiftInfo other) {
        if (other == global::D3.Items.FriendGiftInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdFriendRecipient) {
          IdFriendRecipient = other.IdFriendRecipient;
        }
        if (other.HasRecipientName) {
          RecipientName = other.RecipientName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_friendGiftInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _friendGiftInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdFriendRecipient = input.ReadUInt64(ref result.idFriendRecipient_);
              break;
            }
            case 18: {
              result.hasRecipientName = input.ReadString(ref result.recipientName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdFriendRecipient {
        get { return result.hasIdFriendRecipient; }
      }
      public ulong IdFriendRecipient {
        get { return result.IdFriendRecipient; }
        set { SetIdFriendRecipient(value); }
      }
      public Builder SetIdFriendRecipient(ulong value) {
        PrepareBuilder();
        result.hasIdFriendRecipient = true;
        result.idFriendRecipient_ = value;
        return this;
      }
      public Builder ClearIdFriendRecipient() {
        PrepareBuilder();
        result.hasIdFriendRecipient = false;
        result.idFriendRecipient_ = 0UL;
        return this;
      }
      
      public bool HasRecipientName {
        get { return result.hasRecipientName; }
      }
      public string RecipientName {
        get { return result.RecipientName; }
        set { SetRecipientName(value); }
      }
      public Builder SetRecipientName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRecipientName = true;
        result.recipientName_ = value;
        return this;
      }
      public Builder ClearRecipientName() {
        PrepareBuilder();
        result.hasRecipientName = false;
        result.recipientName_ = "NONE";
        return this;
      }
    }
    static FriendGiftInfo() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SavedItem : pb::GeneratedMessage<SavedItem, SavedItem.Builder> {
    private SavedItem() { }
    private static readonly SavedItem defaultInstance = new SavedItem().MakeReadOnly();
    private static readonly string[] _savedItemFieldNames = new string[] { "friend_gift_info", "generator", "hireling_class", "id", "item_slot", "owner_entity_id", "socket_id", "square_index", "used_socket_count" };
    private static readonly uint[] _savedItemFieldTags = new uint[] { 74, 66, 32, 10, 40, 18, 26, 48, 56 };
    public static SavedItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SavedItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SavedItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_SavedItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SavedItem, SavedItem.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_SavedItem__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private global::D3.OnlineService.ItemId id_;
    public bool HasId {
      get { return hasId; }
    }
    public global::D3.OnlineService.ItemId Id {
      get { return id_ ?? global::D3.OnlineService.ItemId.DefaultInstance; }
    }
    
    public const int OwnerEntityIdFieldNumber = 2;
    private bool hasOwnerEntityId;
    private global::D3.OnlineService.EntityId ownerEntityId_;
    public bool HasOwnerEntityId {
      get { return hasOwnerEntityId; }
    }
    public global::D3.OnlineService.EntityId OwnerEntityId {
      get { return ownerEntityId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int SocketIdFieldNumber = 3;
    private bool hasSocketId;
    private global::D3.OnlineService.ItemId socketId_;
    public bool HasSocketId {
      get { return hasSocketId; }
    }
    public global::D3.OnlineService.ItemId SocketId {
      get { return socketId_ ?? global::D3.OnlineService.ItemId.DefaultInstance; }
    }
    
    public const int HirelingClassFieldNumber = 4;
    private bool hasHirelingClass;
    private int hirelingClass_;
    public bool HasHirelingClass {
      get { return hasHirelingClass; }
    }
    public int HirelingClass {
      get { return hirelingClass_; }
    }
    
    public const int ItemSlotFieldNumber = 5;
    private bool hasItemSlot;
    private int itemSlot_;
    public bool HasItemSlot {
      get { return hasItemSlot; }
    }
    public int ItemSlot {
      get { return itemSlot_; }
    }
    
    public const int SquareIndexFieldNumber = 6;
    private bool hasSquareIndex;
    private int squareIndex_;
    public bool HasSquareIndex {
      get { return hasSquareIndex; }
    }
    public int SquareIndex {
      get { return squareIndex_; }
    }
    
    public const int UsedSocketCountFieldNumber = 7;
    private bool hasUsedSocketCount;
    private uint usedSocketCount_;
    public bool HasUsedSocketCount {
      get { return hasUsedSocketCount; }
    }
    public uint UsedSocketCount {
      get { return usedSocketCount_; }
    }
    
    public const int GeneratorFieldNumber = 8;
    private bool hasGenerator;
    private global::D3.Items.Generator generator_;
    public bool HasGenerator {
      get { return hasGenerator; }
    }
    public global::D3.Items.Generator Generator {
      get { return generator_ ?? global::D3.Items.Generator.DefaultInstance; }
    }
    
    public const int FriendGiftInfoFieldNumber = 9;
    private bool hasFriendGiftInfo;
    private global::D3.Items.FriendGiftInfo friendGiftInfo_;
    public bool HasFriendGiftInfo {
      get { return hasFriendGiftInfo; }
    }
    public global::D3.Items.FriendGiftInfo FriendGiftInfo {
      get { return friendGiftInfo_ ?? global::D3.Items.FriendGiftInfo.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasHirelingClass) return false;
        if (!hasItemSlot) return false;
        if (!hasSquareIndex) return false;
        if (!hasUsedSocketCount) return false;
        if (!Id.IsInitialized) return false;
        if (HasOwnerEntityId) {
          if (!OwnerEntityId.IsInitialized) return false;
        }
        if (HasSocketId) {
          if (!SocketId.IsInitialized) return false;
        }
        if (HasGenerator) {
          if (!Generator.IsInitialized) return false;
        }
        if (HasFriendGiftInfo) {
          if (!FriendGiftInfo.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _savedItemFieldNames;
      if (hasId) {
        output.WriteMessage(1, field_names[3], Id);
      }
      if (hasOwnerEntityId) {
        output.WriteMessage(2, field_names[5], OwnerEntityId);
      }
      if (hasSocketId) {
        output.WriteMessage(3, field_names[6], SocketId);
      }
      if (hasHirelingClass) {
        output.WriteSInt32(4, field_names[2], HirelingClass);
      }
      if (hasItemSlot) {
        output.WriteSInt32(5, field_names[4], ItemSlot);
      }
      if (hasSquareIndex) {
        output.WriteSInt32(6, field_names[7], SquareIndex);
      }
      if (hasUsedSocketCount) {
        output.WriteUInt32(7, field_names[8], UsedSocketCount);
      }
      if (hasGenerator) {
        output.WriteMessage(8, field_names[1], Generator);
      }
      if (hasFriendGiftInfo) {
        output.WriteMessage(9, field_names[0], FriendGiftInfo);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Id);
        }
        if (hasOwnerEntityId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, OwnerEntityId);
        }
        if (hasSocketId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, SocketId);
        }
        if (hasHirelingClass) {
          size += pb::CodedOutputStream.ComputeSInt32Size(4, HirelingClass);
        }
        if (hasItemSlot) {
          size += pb::CodedOutputStream.ComputeSInt32Size(5, ItemSlot);
        }
        if (hasSquareIndex) {
          size += pb::CodedOutputStream.ComputeSInt32Size(6, SquareIndex);
        }
        if (hasUsedSocketCount) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, UsedSocketCount);
        }
        if (hasGenerator) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, Generator);
        }
        if (hasFriendGiftInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, FriendGiftInfo);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SavedItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SavedItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SavedItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SavedItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SavedItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SavedItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SavedItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SavedItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SavedItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SavedItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SavedItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SavedItem result;
      
      private SavedItem PrepareBuilder() {
        if (resultIsReadOnly) {
          SavedItem original = result;
          result = new SavedItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SavedItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.SavedItem.Descriptor; }
      }
      
      public override SavedItem DefaultInstanceForType {
        get { return global::D3.Items.SavedItem.DefaultInstance; }
      }
      
      public override SavedItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SavedItem) {
          return MergeFrom((SavedItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SavedItem other) {
        if (other == global::D3.Items.SavedItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          MergeId(other.Id);
        }
        if (other.HasOwnerEntityId) {
          MergeOwnerEntityId(other.OwnerEntityId);
        }
        if (other.HasSocketId) {
          MergeSocketId(other.SocketId);
        }
        if (other.HasHirelingClass) {
          HirelingClass = other.HirelingClass;
        }
        if (other.HasItemSlot) {
          ItemSlot = other.ItemSlot;
        }
        if (other.HasSquareIndex) {
          SquareIndex = other.SquareIndex;
        }
        if (other.HasUsedSocketCount) {
          UsedSocketCount = other.UsedSocketCount;
        }
        if (other.HasGenerator) {
          MergeGenerator(other.Generator);
        }
        if (other.HasFriendGiftInfo) {
          MergeFriendGiftInfo(other.FriendGiftInfo);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_savedItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _savedItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.ItemId.Builder subBuilder = global::D3.OnlineService.ItemId.CreateBuilder();
              if (result.hasId) {
                subBuilder.MergeFrom(Id);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Id = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasOwnerEntityId) {
                subBuilder.MergeFrom(OwnerEntityId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OwnerEntityId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::D3.OnlineService.ItemId.Builder subBuilder = global::D3.OnlineService.ItemId.CreateBuilder();
              if (result.hasSocketId) {
                subBuilder.MergeFrom(SocketId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SocketId = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasHirelingClass = input.ReadSInt32(ref result.hirelingClass_);
              break;
            }
            case 40: {
              result.hasItemSlot = input.ReadSInt32(ref result.itemSlot_);
              break;
            }
            case 48: {
              result.hasSquareIndex = input.ReadSInt32(ref result.squareIndex_);
              break;
            }
            case 56: {
              result.hasUsedSocketCount = input.ReadUInt32(ref result.usedSocketCount_);
              break;
            }
            case 66: {
              global::D3.Items.Generator.Builder subBuilder = global::D3.Items.Generator.CreateBuilder();
              if (result.hasGenerator) {
                subBuilder.MergeFrom(Generator);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Generator = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::D3.Items.FriendGiftInfo.Builder subBuilder = global::D3.Items.FriendGiftInfo.CreateBuilder();
              if (result.hasFriendGiftInfo) {
                subBuilder.MergeFrom(FriendGiftInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FriendGiftInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
       get { return result.hasId; }
      }
      public global::D3.OnlineService.ItemId Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder SetId(global::D3.OnlineService.ItemId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = builderForValue.Build();
        return this;
      }
      public Builder MergeId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasId &&
            result.id_ != global::D3.OnlineService.ItemId.DefaultInstance) {
            result.id_ = global::D3.OnlineService.ItemId.CreateBuilder(result.id_).MergeFrom(value).BuildPartial();
        } else {
          result.id_ = value;
        }
        result.hasId = true;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = null;
        return this;
      }
      
      public bool HasOwnerEntityId {
       get { return result.hasOwnerEntityId; }
      }
      public global::D3.OnlineService.EntityId OwnerEntityId {
        get { return result.OwnerEntityId; }
        set { SetOwnerEntityId(value); }
      }
      public Builder SetOwnerEntityId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOwnerEntityId = true;
        result.ownerEntityId_ = value;
        return this;
      }
      public Builder SetOwnerEntityId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOwnerEntityId = true;
        result.ownerEntityId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOwnerEntityId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOwnerEntityId &&
            result.ownerEntityId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.ownerEntityId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.ownerEntityId_).MergeFrom(value).BuildPartial();
        } else {
          result.ownerEntityId_ = value;
        }
        result.hasOwnerEntityId = true;
        return this;
      }
      public Builder ClearOwnerEntityId() {
        PrepareBuilder();
        result.hasOwnerEntityId = false;
        result.ownerEntityId_ = null;
        return this;
      }
      
      public bool HasSocketId {
       get { return result.hasSocketId; }
      }
      public global::D3.OnlineService.ItemId SocketId {
        get { return result.SocketId; }
        set { SetSocketId(value); }
      }
      public Builder SetSocketId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSocketId = true;
        result.socketId_ = value;
        return this;
      }
      public Builder SetSocketId(global::D3.OnlineService.ItemId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSocketId = true;
        result.socketId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSocketId(global::D3.OnlineService.ItemId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSocketId &&
            result.socketId_ != global::D3.OnlineService.ItemId.DefaultInstance) {
            result.socketId_ = global::D3.OnlineService.ItemId.CreateBuilder(result.socketId_).MergeFrom(value).BuildPartial();
        } else {
          result.socketId_ = value;
        }
        result.hasSocketId = true;
        return this;
      }
      public Builder ClearSocketId() {
        PrepareBuilder();
        result.hasSocketId = false;
        result.socketId_ = null;
        return this;
      }
      
      public bool HasHirelingClass {
        get { return result.hasHirelingClass; }
      }
      public int HirelingClass {
        get { return result.HirelingClass; }
        set { SetHirelingClass(value); }
      }
      public Builder SetHirelingClass(int value) {
        PrepareBuilder();
        result.hasHirelingClass = true;
        result.hirelingClass_ = value;
        return this;
      }
      public Builder ClearHirelingClass() {
        PrepareBuilder();
        result.hasHirelingClass = false;
        result.hirelingClass_ = 0;
        return this;
      }
      
      public bool HasItemSlot {
        get { return result.hasItemSlot; }
      }
      public int ItemSlot {
        get { return result.ItemSlot; }
        set { SetItemSlot(value); }
      }
      public Builder SetItemSlot(int value) {
        PrepareBuilder();
        result.hasItemSlot = true;
        result.itemSlot_ = value;
        return this;
      }
      public Builder ClearItemSlot() {
        PrepareBuilder();
        result.hasItemSlot = false;
        result.itemSlot_ = 0;
        return this;
      }
      
      public bool HasSquareIndex {
        get { return result.hasSquareIndex; }
      }
      public int SquareIndex {
        get { return result.SquareIndex; }
        set { SetSquareIndex(value); }
      }
      public Builder SetSquareIndex(int value) {
        PrepareBuilder();
        result.hasSquareIndex = true;
        result.squareIndex_ = value;
        return this;
      }
      public Builder ClearSquareIndex() {
        PrepareBuilder();
        result.hasSquareIndex = false;
        result.squareIndex_ = 0;
        return this;
      }
      
      public bool HasUsedSocketCount {
        get { return result.hasUsedSocketCount; }
      }
      public uint UsedSocketCount {
        get { return result.UsedSocketCount; }
        set { SetUsedSocketCount(value); }
      }
      public Builder SetUsedSocketCount(uint value) {
        PrepareBuilder();
        result.hasUsedSocketCount = true;
        result.usedSocketCount_ = value;
        return this;
      }
      public Builder ClearUsedSocketCount() {
        PrepareBuilder();
        result.hasUsedSocketCount = false;
        result.usedSocketCount_ = 0;
        return this;
      }
      
      public bool HasGenerator {
       get { return result.hasGenerator; }
      }
      public global::D3.Items.Generator Generator {
        get { return result.Generator; }
        set { SetGenerator(value); }
      }
      public Builder SetGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGenerator = true;
        result.generator_ = value;
        return this;
      }
      public Builder SetGenerator(global::D3.Items.Generator.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGenerator = true;
        result.generator_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGenerator(global::D3.Items.Generator value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGenerator &&
            result.generator_ != global::D3.Items.Generator.DefaultInstance) {
            result.generator_ = global::D3.Items.Generator.CreateBuilder(result.generator_).MergeFrom(value).BuildPartial();
        } else {
          result.generator_ = value;
        }
        result.hasGenerator = true;
        return this;
      }
      public Builder ClearGenerator() {
        PrepareBuilder();
        result.hasGenerator = false;
        result.generator_ = null;
        return this;
      }
      
      public bool HasFriendGiftInfo {
       get { return result.hasFriendGiftInfo; }
      }
      public global::D3.Items.FriendGiftInfo FriendGiftInfo {
        get { return result.FriendGiftInfo; }
        set { SetFriendGiftInfo(value); }
      }
      public Builder SetFriendGiftInfo(global::D3.Items.FriendGiftInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFriendGiftInfo = true;
        result.friendGiftInfo_ = value;
        return this;
      }
      public Builder SetFriendGiftInfo(global::D3.Items.FriendGiftInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFriendGiftInfo = true;
        result.friendGiftInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFriendGiftInfo(global::D3.Items.FriendGiftInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFriendGiftInfo &&
            result.friendGiftInfo_ != global::D3.Items.FriendGiftInfo.DefaultInstance) {
            result.friendGiftInfo_ = global::D3.Items.FriendGiftInfo.CreateBuilder(result.friendGiftInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.friendGiftInfo_ = value;
        }
        result.hasFriendGiftInfo = true;
        return this;
      }
      public Builder ClearFriendGiftInfo() {
        PrepareBuilder();
        result.hasFriendGiftInfo = false;
        result.friendGiftInfo_ = null;
        return this;
      }
    }
    static SavedItem() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ItemList : pb::GeneratedMessage<ItemList, ItemList.Builder> {
    private ItemList() { }
    private static readonly ItemList defaultInstance = new ItemList().MakeReadOnly();
    private static readonly string[] _itemListFieldNames = new string[] { "items" };
    private static readonly uint[] _itemListFieldTags = new uint[] { 10 };
    public static ItemList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ItemList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ItemList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_ItemList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ItemList, ItemList.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_ItemList__FieldAccessorTable; }
    }
    
    public const int ItemsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Items.SavedItem> items_ = new pbc::PopsicleList<global::D3.Items.SavedItem>();
    public scg::IList<global::D3.Items.SavedItem> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::D3.Items.SavedItem GetItems(int index) {
      return items_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Items.SavedItem element in ItemsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _itemListFieldNames;
      if (items_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], items_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Items.SavedItem element in ItemsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ItemList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ItemList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ItemList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ItemList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ItemList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ItemList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ItemList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ItemList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ItemList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ItemList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ItemList MakeReadOnly() {
      items_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ItemList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ItemList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ItemList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ItemList result;
      
      private ItemList PrepareBuilder() {
        if (resultIsReadOnly) {
          ItemList original = result;
          result = new ItemList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ItemList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.ItemList.Descriptor; }
      }
      
      public override ItemList DefaultInstanceForType {
        get { return global::D3.Items.ItemList.DefaultInstance; }
      }
      
      public override ItemList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ItemList) {
          return MergeFrom((ItemList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ItemList other) {
        if (other == global::D3.Items.ItemList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_itemListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _itemListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.items_, global::D3.Items.SavedItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Items.SavedItem> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::D3.Items.SavedItem GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::D3.Items.SavedItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::D3.Items.SavedItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::D3.Items.SavedItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::D3.Items.SavedItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::D3.Items.SavedItem> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
    }
    static ItemList() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MailAttachments : pb::GeneratedMessage<MailAttachments, MailAttachments.Builder> {
    private MailAttachments() { }
    private static readonly MailAttachments defaultInstance = new MailAttachments().MakeReadOnly();
    private static readonly string[] _mailAttachmentsFieldNames = new string[] { "items" };
    private static readonly uint[] _mailAttachmentsFieldTags = new uint[] { 10 };
    public static MailAttachments DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MailAttachments DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MailAttachments ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_MailAttachments__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MailAttachments, MailAttachments.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_MailAttachments__FieldAccessorTable; }
    }
    
    public const int ItemsFieldNumber = 1;
    private bool hasItems;
    private global::D3.Items.ItemList items_;
    public bool HasItems {
      get { return hasItems; }
    }
    public global::D3.Items.ItemList Items {
      get { return items_ ?? global::D3.Items.ItemList.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasItems) {
          if (!Items.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mailAttachmentsFieldNames;
      if (hasItems) {
        output.WriteMessage(1, field_names[0], Items);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasItems) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Items);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MailAttachments ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MailAttachments ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MailAttachments ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MailAttachments ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MailAttachments ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MailAttachments ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MailAttachments ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MailAttachments ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MailAttachments ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MailAttachments ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MailAttachments MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MailAttachments prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MailAttachments, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MailAttachments cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MailAttachments result;
      
      private MailAttachments PrepareBuilder() {
        if (resultIsReadOnly) {
          MailAttachments original = result;
          result = new MailAttachments();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MailAttachments MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.MailAttachments.Descriptor; }
      }
      
      public override MailAttachments DefaultInstanceForType {
        get { return global::D3.Items.MailAttachments.DefaultInstance; }
      }
      
      public override MailAttachments BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MailAttachments) {
          return MergeFrom((MailAttachments) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MailAttachments other) {
        if (other == global::D3.Items.MailAttachments.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItems) {
          MergeItems(other.Items);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mailAttachmentsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mailAttachmentsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.Items.ItemList.Builder subBuilder = global::D3.Items.ItemList.CreateBuilder();
              if (result.hasItems) {
                subBuilder.MergeFrom(Items);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Items = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItems {
       get { return result.hasItems; }
      }
      public global::D3.Items.ItemList Items {
        get { return result.Items; }
        set { SetItems(value); }
      }
      public Builder SetItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItems = true;
        result.items_ = value;
        return this;
      }
      public Builder SetItems(global::D3.Items.ItemList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItems = true;
        result.items_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItems(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItems &&
            result.items_ != global::D3.Items.ItemList.DefaultInstance) {
            result.items_ = global::D3.Items.ItemList.CreateBuilder(result.items_).MergeFrom(value).BuildPartial();
        } else {
          result.items_ = value;
        }
        result.hasItems = true;
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.hasItems = false;
        result.items_ = null;
        return this;
      }
    }
    static MailAttachments() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Mail : pb::GeneratedMessage<Mail, Mail.Builder> {
    private Mail() { }
    private static readonly Mail defaultInstance = new Mail().MakeReadOnly();
    private static readonly string[] _mailFieldNames = new string[] { "account_from", "account_to", "attachments", "body", "expire_at", "flags", "mail_id", "partition_id", "season_created", "send_time", "status", "title" };
    private static readonly uint[] _mailFieldTags = new uint[] { 18, 10, 66, 42, 88, 96, 24, 72, 80, 56, 48, 34 };
    public static Mail DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Mail DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Mail ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_Mail__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Mail, Mail.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_Mail__FieldAccessorTable; }
    }
    
    public const int AccountToFieldNumber = 1;
    private bool hasAccountTo;
    private global::D3.OnlineService.EntityId accountTo_;
    public bool HasAccountTo {
      get { return hasAccountTo; }
    }
    public global::D3.OnlineService.EntityId AccountTo {
      get { return accountTo_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int AccountFromFieldNumber = 2;
    private bool hasAccountFrom;
    private global::D3.OnlineService.EntityId accountFrom_;
    public bool HasAccountFrom {
      get { return hasAccountFrom; }
    }
    public global::D3.OnlineService.EntityId AccountFrom {
      get { return accountFrom_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int MailIdFieldNumber = 3;
    private bool hasMailId;
    private ulong mailId_;
    public bool HasMailId {
      get { return hasMailId; }
    }
    public ulong MailId {
      get { return mailId_; }
    }
    
    public const int TitleFieldNumber = 4;
    private bool hasTitle;
    private string title_ = "";
    public bool HasTitle {
      get { return hasTitle; }
    }
    public string Title {
      get { return title_; }
    }
    
    public const int BodyFieldNumber = 5;
    private bool hasBody;
    private string body_ = "";
    public bool HasBody {
      get { return hasBody; }
    }
    public string Body {
      get { return body_; }
    }
    
    public const int StatusFieldNumber = 6;
    private bool hasStatus;
    private uint status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public uint Status {
      get { return status_; }
    }
    
    public const int SendTimeFieldNumber = 7;
    private bool hasSendTime;
    private uint sendTime_;
    public bool HasSendTime {
      get { return hasSendTime; }
    }
    public uint SendTime {
      get { return sendTime_; }
    }
    
    public const int AttachmentsFieldNumber = 8;
    private bool hasAttachments;
    private global::D3.Items.MailAttachments attachments_;
    public bool HasAttachments {
      get { return hasAttachments; }
    }
    public global::D3.Items.MailAttachments Attachments {
      get { return attachments_ ?? global::D3.Items.MailAttachments.DefaultInstance; }
    }
    
    public const int PartitionIdFieldNumber = 9;
    private bool hasPartitionId;
    private uint partitionId_;
    public bool HasPartitionId {
      get { return hasPartitionId; }
    }
    public uint PartitionId {
      get { return partitionId_; }
    }
    
    public const int SeasonCreatedFieldNumber = 10;
    private bool hasSeasonCreated;
    private uint seasonCreated_;
    public bool HasSeasonCreated {
      get { return hasSeasonCreated; }
    }
    public uint SeasonCreated {
      get { return seasonCreated_; }
    }
    
    public const int ExpireAtFieldNumber = 11;
    private bool hasExpireAt;
    private ulong expireAt_;
    public bool HasExpireAt {
      get { return hasExpireAt; }
    }
    public ulong ExpireAt {
      get { return expireAt_; }
    }
    
    public const int FlagsFieldNumber = 12;
    private bool hasFlags;
    private uint flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public uint Flags {
      get { return flags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountTo) return false;
        if (!hasAccountFrom) return false;
        if (!hasMailId) return false;
        if (!AccountTo.IsInitialized) return false;
        if (!AccountFrom.IsInitialized) return false;
        if (HasAttachments) {
          if (!Attachments.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mailFieldNames;
      if (hasAccountTo) {
        output.WriteMessage(1, field_names[1], AccountTo);
      }
      if (hasAccountFrom) {
        output.WriteMessage(2, field_names[0], AccountFrom);
      }
      if (hasMailId) {
        output.WriteUInt64(3, field_names[6], MailId);
      }
      if (hasTitle) {
        output.WriteString(4, field_names[11], Title);
      }
      if (hasBody) {
        output.WriteString(5, field_names[3], Body);
      }
      if (hasStatus) {
        output.WriteUInt32(6, field_names[10], Status);
      }
      if (hasSendTime) {
        output.WriteUInt32(7, field_names[9], SendTime);
      }
      if (hasAttachments) {
        output.WriteMessage(8, field_names[2], Attachments);
      }
      if (hasPartitionId) {
        output.WriteUInt32(9, field_names[7], PartitionId);
      }
      if (hasSeasonCreated) {
        output.WriteUInt32(10, field_names[8], SeasonCreated);
      }
      if (hasExpireAt) {
        output.WriteUInt64(11, field_names[4], ExpireAt);
      }
      if (hasFlags) {
        output.WriteUInt32(12, field_names[5], Flags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountTo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AccountTo);
        }
        if (hasAccountFrom) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, AccountFrom);
        }
        if (hasMailId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, MailId);
        }
        if (hasTitle) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Title);
        }
        if (hasBody) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Body);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, Status);
        }
        if (hasSendTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, SendTime);
        }
        if (hasAttachments) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, Attachments);
        }
        if (hasPartitionId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(9, PartitionId);
        }
        if (hasSeasonCreated) {
          size += pb::CodedOutputStream.ComputeUInt32Size(10, SeasonCreated);
        }
        if (hasExpireAt) {
          size += pb::CodedOutputStream.ComputeUInt64Size(11, ExpireAt);
        }
        if (hasFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(12, Flags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Mail ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Mail ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Mail ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Mail ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Mail ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Mail ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Mail ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Mail ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Mail ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Mail ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Mail MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Mail prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Mail, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Mail cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Mail result;
      
      private Mail PrepareBuilder() {
        if (resultIsReadOnly) {
          Mail original = result;
          result = new Mail();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Mail MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.Mail.Descriptor; }
      }
      
      public override Mail DefaultInstanceForType {
        get { return global::D3.Items.Mail.DefaultInstance; }
      }
      
      public override Mail BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Mail) {
          return MergeFrom((Mail) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Mail other) {
        if (other == global::D3.Items.Mail.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountTo) {
          MergeAccountTo(other.AccountTo);
        }
        if (other.HasAccountFrom) {
          MergeAccountFrom(other.AccountFrom);
        }
        if (other.HasMailId) {
          MailId = other.MailId;
        }
        if (other.HasTitle) {
          Title = other.Title;
        }
        if (other.HasBody) {
          Body = other.Body;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasSendTime) {
          SendTime = other.SendTime;
        }
        if (other.HasAttachments) {
          MergeAttachments(other.Attachments);
        }
        if (other.HasPartitionId) {
          PartitionId = other.PartitionId;
        }
        if (other.HasSeasonCreated) {
          SeasonCreated = other.SeasonCreated;
        }
        if (other.HasExpireAt) {
          ExpireAt = other.ExpireAt;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mailFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mailFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountTo) {
                subBuilder.MergeFrom(AccountTo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountTo = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasAccountFrom) {
                subBuilder.MergeFrom(AccountFrom);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AccountFrom = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasMailId = input.ReadUInt64(ref result.mailId_);
              break;
            }
            case 34: {
              result.hasTitle = input.ReadString(ref result.title_);
              break;
            }
            case 42: {
              result.hasBody = input.ReadString(ref result.body_);
              break;
            }
            case 48: {
              result.hasStatus = input.ReadUInt32(ref result.status_);
              break;
            }
            case 56: {
              result.hasSendTime = input.ReadUInt32(ref result.sendTime_);
              break;
            }
            case 66: {
              global::D3.Items.MailAttachments.Builder subBuilder = global::D3.Items.MailAttachments.CreateBuilder();
              if (result.hasAttachments) {
                subBuilder.MergeFrom(Attachments);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Attachments = subBuilder.BuildPartial();
              break;
            }
            case 72: {
              result.hasPartitionId = input.ReadUInt32(ref result.partitionId_);
              break;
            }
            case 80: {
              result.hasSeasonCreated = input.ReadUInt32(ref result.seasonCreated_);
              break;
            }
            case 88: {
              result.hasExpireAt = input.ReadUInt64(ref result.expireAt_);
              break;
            }
            case 96: {
              result.hasFlags = input.ReadUInt32(ref result.flags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountTo {
       get { return result.hasAccountTo; }
      }
      public global::D3.OnlineService.EntityId AccountTo {
        get { return result.AccountTo; }
        set { SetAccountTo(value); }
      }
      public Builder SetAccountTo(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountTo = true;
        result.accountTo_ = value;
        return this;
      }
      public Builder SetAccountTo(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountTo = true;
        result.accountTo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountTo(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountTo &&
            result.accountTo_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountTo_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountTo_).MergeFrom(value).BuildPartial();
        } else {
          result.accountTo_ = value;
        }
        result.hasAccountTo = true;
        return this;
      }
      public Builder ClearAccountTo() {
        PrepareBuilder();
        result.hasAccountTo = false;
        result.accountTo_ = null;
        return this;
      }
      
      public bool HasAccountFrom {
       get { return result.hasAccountFrom; }
      }
      public global::D3.OnlineService.EntityId AccountFrom {
        get { return result.AccountFrom; }
        set { SetAccountFrom(value); }
      }
      public Builder SetAccountFrom(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountFrom = true;
        result.accountFrom_ = value;
        return this;
      }
      public Builder SetAccountFrom(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountFrom = true;
        result.accountFrom_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountFrom(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountFrom &&
            result.accountFrom_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.accountFrom_ = global::D3.OnlineService.EntityId.CreateBuilder(result.accountFrom_).MergeFrom(value).BuildPartial();
        } else {
          result.accountFrom_ = value;
        }
        result.hasAccountFrom = true;
        return this;
      }
      public Builder ClearAccountFrom() {
        PrepareBuilder();
        result.hasAccountFrom = false;
        result.accountFrom_ = null;
        return this;
      }
      
      public bool HasMailId {
        get { return result.hasMailId; }
      }
      public ulong MailId {
        get { return result.MailId; }
        set { SetMailId(value); }
      }
      public Builder SetMailId(ulong value) {
        PrepareBuilder();
        result.hasMailId = true;
        result.mailId_ = value;
        return this;
      }
      public Builder ClearMailId() {
        PrepareBuilder();
        result.hasMailId = false;
        result.mailId_ = 0UL;
        return this;
      }
      
      public bool HasTitle {
        get { return result.hasTitle; }
      }
      public string Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.hasTitle = false;
        result.title_ = "";
        return this;
      }
      
      public bool HasBody {
        get { return result.hasBody; }
      }
      public string Body {
        get { return result.Body; }
        set { SetBody(value); }
      }
      public Builder SetBody(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBody = true;
        result.body_ = value;
        return this;
      }
      public Builder ClearBody() {
        PrepareBuilder();
        result.hasBody = false;
        result.body_ = "";
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public uint Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(uint value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasSendTime {
        get { return result.hasSendTime; }
      }
      public uint SendTime {
        get { return result.SendTime; }
        set { SetSendTime(value); }
      }
      public Builder SetSendTime(uint value) {
        PrepareBuilder();
        result.hasSendTime = true;
        result.sendTime_ = value;
        return this;
      }
      public Builder ClearSendTime() {
        PrepareBuilder();
        result.hasSendTime = false;
        result.sendTime_ = 0;
        return this;
      }
      
      public bool HasAttachments {
       get { return result.hasAttachments; }
      }
      public global::D3.Items.MailAttachments Attachments {
        get { return result.Attachments; }
        set { SetAttachments(value); }
      }
      public Builder SetAttachments(global::D3.Items.MailAttachments value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAttachments = true;
        result.attachments_ = value;
        return this;
      }
      public Builder SetAttachments(global::D3.Items.MailAttachments.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAttachments = true;
        result.attachments_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAttachments(global::D3.Items.MailAttachments value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAttachments &&
            result.attachments_ != global::D3.Items.MailAttachments.DefaultInstance) {
            result.attachments_ = global::D3.Items.MailAttachments.CreateBuilder(result.attachments_).MergeFrom(value).BuildPartial();
        } else {
          result.attachments_ = value;
        }
        result.hasAttachments = true;
        return this;
      }
      public Builder ClearAttachments() {
        PrepareBuilder();
        result.hasAttachments = false;
        result.attachments_ = null;
        return this;
      }
      
      public bool HasPartitionId {
        get { return result.hasPartitionId; }
      }
      public uint PartitionId {
        get { return result.PartitionId; }
        set { SetPartitionId(value); }
      }
      public Builder SetPartitionId(uint value) {
        PrepareBuilder();
        result.hasPartitionId = true;
        result.partitionId_ = value;
        return this;
      }
      public Builder ClearPartitionId() {
        PrepareBuilder();
        result.hasPartitionId = false;
        result.partitionId_ = 0;
        return this;
      }
      
      public bool HasSeasonCreated {
        get { return result.hasSeasonCreated; }
      }
      public uint SeasonCreated {
        get { return result.SeasonCreated; }
        set { SetSeasonCreated(value); }
      }
      public Builder SetSeasonCreated(uint value) {
        PrepareBuilder();
        result.hasSeasonCreated = true;
        result.seasonCreated_ = value;
        return this;
      }
      public Builder ClearSeasonCreated() {
        PrepareBuilder();
        result.hasSeasonCreated = false;
        result.seasonCreated_ = 0;
        return this;
      }
      
      public bool HasExpireAt {
        get { return result.hasExpireAt; }
      }
      public ulong ExpireAt {
        get { return result.ExpireAt; }
        set { SetExpireAt(value); }
      }
      public Builder SetExpireAt(ulong value) {
        PrepareBuilder();
        result.hasExpireAt = true;
        result.expireAt_ = value;
        return this;
      }
      public Builder ClearExpireAt() {
        PrepareBuilder();
        result.hasExpireAt = false;
        result.expireAt_ = 0UL;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public uint Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(uint value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
    }
    static Mail() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Mails : pb::GeneratedMessage<Mails, Mails.Builder> {
    private Mails() { }
    private static readonly Mails defaultInstance = new Mails().MakeReadOnly();
    private static readonly string[] _mailsFieldNames = new string[] { "mails_prop" };
    private static readonly uint[] _mailsFieldTags = new uint[] { 10 };
    public static Mails DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Mails DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Mails ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_Mails__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Mails, Mails.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_Mails__FieldAccessorTable; }
    }
    
    public const int MailsPropFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Items.Mail> mailsProp_ = new pbc::PopsicleList<global::D3.Items.Mail>();
    public scg::IList<global::D3.Items.Mail> MailsPropList {
      get { return mailsProp_; }
    }
    public int MailsPropCount {
      get { return mailsProp_.Count; }
    }
    public global::D3.Items.Mail GetMailsProp(int index) {
      return mailsProp_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Items.Mail element in MailsPropList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mailsFieldNames;
      if (mailsProp_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], mailsProp_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Items.Mail element in MailsPropList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Mails ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Mails ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Mails ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Mails ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Mails ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Mails ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Mails ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Mails ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Mails ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Mails ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Mails MakeReadOnly() {
      mailsProp_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Mails prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Mails, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Mails cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Mails result;
      
      private Mails PrepareBuilder() {
        if (resultIsReadOnly) {
          Mails original = result;
          result = new Mails();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Mails MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.Mails.Descriptor; }
      }
      
      public override Mails DefaultInstanceForType {
        get { return global::D3.Items.Mails.DefaultInstance; }
      }
      
      public override Mails BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Mails) {
          return MergeFrom((Mails) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Mails other) {
        if (other == global::D3.Items.Mails.DefaultInstance) return this;
        PrepareBuilder();
        if (other.mailsProp_.Count != 0) {
          result.mailsProp_.Add(other.mailsProp_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mailsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mailsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.mailsProp_, global::D3.Items.Mail.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Items.Mail> MailsPropList {
        get { return PrepareBuilder().mailsProp_; }
      }
      public int MailsPropCount {
        get { return result.MailsPropCount; }
      }
      public global::D3.Items.Mail GetMailsProp(int index) {
        return result.GetMailsProp(index);
      }
      public Builder SetMailsProp(int index, global::D3.Items.Mail value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mailsProp_[index] = value;
        return this;
      }
      public Builder SetMailsProp(int index, global::D3.Items.Mail.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mailsProp_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMailsProp(global::D3.Items.Mail value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mailsProp_.Add(value);
        return this;
      }
      public Builder AddMailsProp(global::D3.Items.Mail.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mailsProp_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMailsProp(scg::IEnumerable<global::D3.Items.Mail> values) {
        PrepareBuilder();
        result.mailsProp_.Add(values);
        return this;
      }
      public Builder ClearMailsProp() {
        PrepareBuilder();
        result.mailsProp_.Clear();
        return this;
      }
    }
    static Mails() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CurrencyData : pb::GeneratedMessage<CurrencyData, CurrencyData.Builder> {
    private CurrencyData() { }
    private static readonly CurrencyData defaultInstance = new CurrencyData().MakeReadOnly();
    private static readonly string[] _currencyDataFieldNames = new string[] { "count", "data_persist_flags", "gbid_deprecated", "id" };
    private static readonly uint[] _currencyDataFieldTags = new uint[] { 16, 32, 13, 24 };
    public static CurrencyData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CurrencyData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CurrencyData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_CurrencyData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CurrencyData, CurrencyData.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_CurrencyData__FieldAccessorTable; }
    }
    
    public const int GbidDeprecatedFieldNumber = 1;
    private bool hasGbidDeprecated;
    private int gbidDeprecated_;
    public bool HasGbidDeprecated {
      get { return hasGbidDeprecated; }
    }
    public int GbidDeprecated {
      get { return gbidDeprecated_; }
    }
    
    public const int CountFieldNumber = 2;
    private bool hasCount;
    private long count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public long Count {
      get { return count_; }
    }
    
    public const int IdFieldNumber = 3;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public const int DataPersistFlagsFieldNumber = 4;
    private bool hasDataPersistFlags;
    private uint dataPersistFlags_;
    public bool HasDataPersistFlags {
      get { return hasDataPersistFlags; }
    }
    public uint DataPersistFlags {
      get { return dataPersistFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCount) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _currencyDataFieldNames;
      if (hasGbidDeprecated) {
        output.WriteSFixed32(1, field_names[2], GbidDeprecated);
      }
      if (hasCount) {
        output.WriteInt64(2, field_names[0], Count);
      }
      if (hasId) {
        output.WriteUInt32(3, field_names[3], Id);
      }
      if (hasDataPersistFlags) {
        output.WriteUInt32(4, field_names[1], DataPersistFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGbidDeprecated) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, GbidDeprecated);
        }
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, Count);
        }
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Id);
        }
        if (hasDataPersistFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, DataPersistFlags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CurrencyData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CurrencyData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CurrencyData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CurrencyData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CurrencyData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CurrencyData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CurrencyData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CurrencyData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CurrencyData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CurrencyData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CurrencyData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CurrencyData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CurrencyData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CurrencyData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CurrencyData result;
      
      private CurrencyData PrepareBuilder() {
        if (resultIsReadOnly) {
          CurrencyData original = result;
          result = new CurrencyData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CurrencyData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.CurrencyData.Descriptor; }
      }
      
      public override CurrencyData DefaultInstanceForType {
        get { return global::D3.Items.CurrencyData.DefaultInstance; }
      }
      
      public override CurrencyData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CurrencyData) {
          return MergeFrom((CurrencyData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CurrencyData other) {
        if (other == global::D3.Items.CurrencyData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGbidDeprecated) {
          GbidDeprecated = other.GbidDeprecated;
        }
        if (other.HasCount) {
          Count = other.Count;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasDataPersistFlags) {
          DataPersistFlags = other.DataPersistFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_currencyDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _currencyDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasGbidDeprecated = input.ReadSFixed32(ref result.gbidDeprecated_);
              break;
            }
            case 16: {
              result.hasCount = input.ReadInt64(ref result.count_);
              break;
            }
            case 24: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 32: {
              result.hasDataPersistFlags = input.ReadUInt32(ref result.dataPersistFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGbidDeprecated {
        get { return result.hasGbidDeprecated; }
      }
      public int GbidDeprecated {
        get { return result.GbidDeprecated; }
        set { SetGbidDeprecated(value); }
      }
      public Builder SetGbidDeprecated(int value) {
        PrepareBuilder();
        result.hasGbidDeprecated = true;
        result.gbidDeprecated_ = value;
        return this;
      }
      public Builder ClearGbidDeprecated() {
        PrepareBuilder();
        result.hasGbidDeprecated = false;
        result.gbidDeprecated_ = 0;
        return this;
      }
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public long Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(long value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0L;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasDataPersistFlags {
        get { return result.hasDataPersistFlags; }
      }
      public uint DataPersistFlags {
        get { return result.DataPersistFlags; }
        set { SetDataPersistFlags(value); }
      }
      public Builder SetDataPersistFlags(uint value) {
        PrepareBuilder();
        result.hasDataPersistFlags = true;
        result.dataPersistFlags_ = value;
        return this;
      }
      public Builder ClearDataPersistFlags() {
        PrepareBuilder();
        result.hasDataPersistFlags = false;
        result.dataPersistFlags_ = 0;
        return this;
      }
    }
    static CurrencyData() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CurrencySavedData : pb::GeneratedMessage<CurrencySavedData, CurrencySavedData.Builder> {
    private CurrencySavedData() { }
    private static readonly CurrencySavedData defaultInstance = new CurrencySavedData().MakeReadOnly();
    private static readonly string[] _currencySavedDataFieldNames = new string[] { "currency" };
    private static readonly uint[] _currencySavedDataFieldTags = new uint[] { 10 };
    public static CurrencySavedData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CurrencySavedData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CurrencySavedData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Items.Items.internal__static_D3_Items_CurrencySavedData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CurrencySavedData, CurrencySavedData.Builder> InternalFieldAccessors {
      get { return global::D3.Items.Items.internal__static_D3_Items_CurrencySavedData__FieldAccessorTable; }
    }
    
    public const int CurrencyFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Items.CurrencyData> currency_ = new pbc::PopsicleList<global::D3.Items.CurrencyData>();
    public scg::IList<global::D3.Items.CurrencyData> CurrencyList {
      get { return currency_; }
    }
    public int CurrencyCount {
      get { return currency_.Count; }
    }
    public global::D3.Items.CurrencyData GetCurrency(int index) {
      return currency_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Items.CurrencyData element in CurrencyList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _currencySavedDataFieldNames;
      if (currency_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], currency_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Items.CurrencyData element in CurrencyList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CurrencySavedData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CurrencySavedData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CurrencySavedData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CurrencySavedData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CurrencySavedData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CurrencySavedData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CurrencySavedData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CurrencySavedData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CurrencySavedData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CurrencySavedData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CurrencySavedData MakeReadOnly() {
      currency_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CurrencySavedData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CurrencySavedData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CurrencySavedData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CurrencySavedData result;
      
      private CurrencySavedData PrepareBuilder() {
        if (resultIsReadOnly) {
          CurrencySavedData original = result;
          result = new CurrencySavedData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CurrencySavedData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Items.CurrencySavedData.Descriptor; }
      }
      
      public override CurrencySavedData DefaultInstanceForType {
        get { return global::D3.Items.CurrencySavedData.DefaultInstance; }
      }
      
      public override CurrencySavedData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CurrencySavedData) {
          return MergeFrom((CurrencySavedData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CurrencySavedData other) {
        if (other == global::D3.Items.CurrencySavedData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.currency_.Count != 0) {
          result.currency_.Add(other.currency_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_currencySavedDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _currencySavedDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.currency_, global::D3.Items.CurrencyData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Items.CurrencyData> CurrencyList {
        get { return PrepareBuilder().currency_; }
      }
      public int CurrencyCount {
        get { return result.CurrencyCount; }
      }
      public global::D3.Items.CurrencyData GetCurrency(int index) {
        return result.GetCurrency(index);
      }
      public Builder SetCurrency(int index, global::D3.Items.CurrencyData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.currency_[index] = value;
        return this;
      }
      public Builder SetCurrency(int index, global::D3.Items.CurrencyData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.currency_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCurrency(global::D3.Items.CurrencyData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.currency_.Add(value);
        return this;
      }
      public Builder AddCurrency(global::D3.Items.CurrencyData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.currency_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCurrency(scg::IEnumerable<global::D3.Items.CurrencyData> values) {
        PrepareBuilder();
        result.currency_.Add(values);
        return this;
      }
      public Builder ClearCurrency() {
        PrepareBuilder();
        result.currency_.Clear();
        return this;
      }
    }
    static CurrencySavedData() {
      object.ReferenceEquals(global::D3.Items.Items.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
