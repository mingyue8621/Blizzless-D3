// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Profile {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Profile {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_D3_Profile_ClassInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.ClassInfo, global::D3.Profile.ClassInfo.Builder> internal__static_D3_Profile_ClassInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_SkillWithRune__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.SkillWithRune, global::D3.Profile.SkillWithRune.Builder> internal__static_D3_Profile_SkillWithRune__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_SkillsWithRunes__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.SkillsWithRunes, global::D3.Profile.SkillsWithRunes.Builder> internal__static_D3_Profile_SkillsWithRunes__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_PassiveSkills__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.PassiveSkills, global::D3.Profile.PassiveSkills.Builder> internal__static_D3_Profile_PassiveSkills__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_ParagonPointAllocation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.ParagonPointAllocation, global::D3.Profile.ParagonPointAllocation.Builder> internal__static_D3_Profile_ParagonPointAllocation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_ParagonPointAllocations__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.ParagonPointAllocations, global::D3.Profile.ParagonPointAllocations.Builder> internal__static_D3_Profile_ParagonPointAllocations__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_LegendaryPowers__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.LegendaryPowers, global::D3.Profile.LegendaryPowers.Builder> internal__static_D3_Profile_LegendaryPowers__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_KillerInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.KillerInfo, global::D3.Profile.KillerInfo.Builder> internal__static_D3_Profile_KillerInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_HeroProfile__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.HeroProfile, global::D3.Profile.HeroProfile.Builder> internal__static_D3_Profile_HeroProfile__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_HeroProfileList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.HeroProfileList, global::D3.Profile.HeroProfileList.Builder> internal__static_D3_Profile_HeroProfileList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_HeroMiniProfile__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.HeroMiniProfile, global::D3.Profile.HeroMiniProfile.Builder> internal__static_D3_Profile_HeroMiniProfile__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_AccountProfile__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.AccountProfile, global::D3.Profile.AccountProfile.Builder> internal__static_D3_Profile_AccountProfile__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_PvpMatchPlayer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.PvpMatchPlayer, global::D3.Profile.PvpMatchPlayer.Builder> internal__static_D3_Profile_PvpMatchPlayer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_PvpMatchPlayers__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.PvpMatchPlayers, global::D3.Profile.PvpMatchPlayers.Builder> internal__static_D3_Profile_PvpMatchPlayers__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_PvpMatch__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.PvpMatch, global::D3.Profile.PvpMatch.Builder> internal__static_D3_Profile_PvpMatch__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_PvpMatchList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.PvpMatchList, global::D3.Profile.PvpMatchList.Builder> internal__static_D3_Profile_PvpMatchList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_D3_Profile_PvpTeam__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::D3.Profile.PvpTeam, global::D3.Profile.PvpTeam.Builder> internal__static_D3_Profile_PvpTeam__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Profile() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg1Qcm9maWxlLnByb3RvEgpEMy5Qcm9maWxlGgtJdGVtcy5wcm90bxoTT25s" + 
          "aW5lU2VydmljZS5wcm90bxoQSGVyb0NvbW1vbi5wcm90byK5AQoJQ2xhc3NJ" + 
          "bmZvEh0KCHBsYXl0aW1lGAEgASgEOgEwUghwbGF5dGltZRImCg1oaWdoZXN0" + 
          "X2xldmVsGAIgASgNOgEwUgxoaWdoZXN0TGV2ZWwSRQodZGVwcmVjYXRlZF9o" + 
          "aWdoZXN0X2RpZmZpY3VsdHkYAyABKA06ATBSG2RlcHJlY2F0ZWRIaWdoZXN0" + 
          "RGlmZmljdWx0eRIeCglwdnBfZ2FtZXMYBCABKA06ATBSCHB2cEdhbWVzIkoK" + 
          "DVNraWxsV2l0aFJ1bmUSGAoFc2tpbGwYASACKA86Ai0xUgVza2lsbBIfCgly" + 
          "dW5lX3R5cGUYAiABKBE6Ai0xUghydW5lVHlwZSJCCg9Ta2lsbHNXaXRoUnVu" + 
          "ZXMSLwoFcnVuZXMYASADKAsyGS5EMy5Qcm9maWxlLlNraWxsV2l0aFJ1bmVS" + 
          "BXJ1bmVzIi4KDVBhc3NpdmVTa2lsbHMSHQoKc25vX3RyYWl0cxgBIAMoD1IJ" + 
          "c25vVHJhaXRzIkQKFlBhcmFnb25Qb2ludEFsbG9jYXRpb24SEgoEc2xvdBgB" + 
          "IAEoB1IEc2xvdBIWCgZwb2ludHMYAiABKA1SBnBvaW50cyJZChdQYXJhZ29u" + 
          "UG9pbnRBbGxvY2F0aW9ucxI+CghjYXRlZ29yeRgBIAMoCzIiLkQzLlByb2Zp" + 
          "bGUuUGFyYWdvblBvaW50QWxsb2NhdGlvblIIY2F0ZWdvcnkiRQoPTGVnZW5k" + 
          "YXJ5UG93ZXJzEjIKFWdiaWRfbGVnZW5kYXJ5X3Bvd2VycxgBIAMoD1ITZ2Jp" + 
          "ZExlZ2VuZGFyeVBvd2VycyJvCgpLaWxsZXJJbmZvEiEKCnNub19raWxsZXIY" + 
          "ASABKAU6Ai0xUglzbm9LaWxsZXISFgoGcmFyaXR5GAIgASgNUgZyYXJpdHkS" + 
          "JgoPcmFyZV9uYW1lX2diaWRzGAMgAygFUg1yYXJlTmFtZUdiaWRzIuQLCgtI" + 
          "ZXJvUHJvZmlsZRInCg9tb25zdGVyc19raWxsZWQYASABKARSDm1vbnN0ZXJz" + 
          "S2lsbGVkEiMKDWVsaXRlc19raWxsZWQYAiABKARSDGVsaXRlc0tpbGxlZBIl" + 
          "Cg5nb2xkX2NvbGxlY3RlZBgDIAEoBFINZ29sZENvbGxlY3RlZBIjCg1oaWdo" + 
          "ZXN0X2xldmVsGAQgASgNUgxoaWdoZXN0TGV2ZWwSQgodZGVwcmVjYXRlZF9o" + 
          "aWdoZXN0X2RpZmZpY3VsdHkYBSABKA1SG2RlcHJlY2F0ZWRIaWdoZXN0RGlm" + 
          "ZmljdWx0eRIfCgtjcmVhdGVfdGltZRgGIAEoDVIKY3JlYXRlVGltZRIhCgho" + 
          "YXJkY29yZRgHIAEoCDoFZmFsc2VSCGhhcmRjb3JlEhoKCHN0cmVuZ3RoGAgg" + 
          "ASgNUghzdHJlbmd0aBIcCglkZXh0ZXJpdHkYCSABKA1SCWRleHRlcml0eRIi" + 
          "CgxpbnRlbGxpZ2VuY2UYCiABKA1SDGludGVsbGlnZW5jZRIaCgh2aXRhbGl0" + 
          "eRgLIAEoDVIIdml0YWxpdHkSKQoQZGVwcmVjYXRlZF9hcm1vchgMIAEoDVIP" + 
          "ZGVwcmVjYXRlZEFybW9yEhAKA2RwcxgNIAEoAlIDZHBzEiMKDXJlc2lzdF9h" + 
          "cmNhbmUYDiABKA1SDHJlc2lzdEFyY2FuZRIfCgtyZXNpc3RfZmlyZRgPIAEo" + 
          "DVIKcmVzaXN0RmlyZRIpChByZXNpc3RfbGlnaHRuaW5nGBAgASgNUg9yZXNp" + 
          "c3RMaWdodG5pbmcSIwoNcmVzaXN0X3BvaXNvbhgRIAEoDVIMcmVzaXN0UG9p" + 
          "c29uEh8KC3Jlc2lzdF9jb2xkGBIgASgNUgpyZXNpc3RDb2xkEjAKCWVxdWlw" + 
          "bWVudBgTIAEoCzISLkQzLkl0ZW1zLkl0ZW1MaXN0UgllcXVpcG1lbnQSRwoR" + 
          "c25vX2FjdGl2ZV9za2lsbHMYFCABKAsyGy5EMy5Qcm9maWxlLlNraWxsc1dp" + 
          "dGhSdW5lc1IPc25vQWN0aXZlU2tpbGxzEjgKCnNub190cmFpdHMYFSABKAsy" + 
          "GS5EMy5Qcm9maWxlLlBhc3NpdmVTa2lsbHNSCXNub1RyYWl0cxIdCgpkZWF0" + 
          "aF90aW1lGBYgASgNUglkZWF0aFRpbWUSNwoLa2lsbGVyX2luZm8YFyABKAsy" + 
          "Fi5EMy5Qcm9maWxlLktpbGxlckluZm9SCmtpbGxlckluZm8SKgoRc25vX2tp" + 
          "bGxfbG9jYXRpb24YGCABKA1SD3Nub0tpbGxMb2NhdGlvbhIzCgdoZXJvX2lk" + 
          "GBsgASgLMhouRDMuT25saW5lU2VydmljZS5FbnRpdHlJZFIGaGVyb0lkEjwK" + 
          "GmRlcHJlY2F0ZWRfZGFtYWdlX2luY3JlYXNlGBwgASgCUhhkZXByZWNhdGVk" + 
          "RGFtYWdlSW5jcmVhc2USNAoWZGVwcmVjYXRlZF9jcml0X2NoYW5jZRgdIAEo" + 
          "AlIUZGVwcmVjYXRlZENyaXRDaGFuY2USPgobZGVwcmVjYXRlZF9kYW1hZ2Vf" + 
          "cmVkdWN0aW9uGB4gASgCUhlkZXByZWNhdGVkRGFtYWdlUmVkdWN0aW9uEicK" + 
          "D2RlcHJlY2F0ZWRfbGlmZRgfIAEoDVIOZGVwcmVjYXRlZExpZmUSGwoJcHZw" + 
          "X2dsb3J5GCMgASgNUghwdnBHbG9yeRIZCghwdnBfd2lucxgkIAEoDVIHcHZw" + 
          "V2lucxIjCg1wdnBfdGFrZWRvd25zGCUgASgNUgxwdnBUYWtlZG93bnMSHQoK" + 
          "cHZwX2RhbWFnZRgmIAEoBFIJcHZwRGFtYWdlEhwKCXRvdWdobmVzcxgnIAEo" + 
          "AlIJdG91Z2huZXNzEhgKB2hlYWxpbmcYKCABKAJSB2hlYWxpbmcSRgoQbGVn" + 
          "ZW5kYXJ5X3Bvd2VycxgpIAEoCzIbLkQzLlByb2ZpbGUuTGVnZW5kYXJ5UG93" + 
          "ZXJzUg9sZWdlbmRhcnlQb3dlcnMiQAoPSGVyb1Byb2ZpbGVMaXN0Ei0KBWhl" + 
          "cm9zGAEgAygLMhcuRDMuUHJvZmlsZS5IZXJvUHJvZmlsZVIFaGVyb3Mi+wEK" + 
          "D0hlcm9NaW5pUHJvZmlsZRIXCgdoZXJvX2lkGAEgAigNUgZoZXJvSWQSGwoJ" + 
          "aGVyb19uYW1lGAIgAigJUghoZXJvTmFtZRImCg9oZXJvX2diaWRfY2xhc3MY" + 
          "AyACKA9SDWhlcm9HYmlkQ2xhc3MSHQoKaGVyb19mbGFncxgEIAIoDVIJaGVy" + 
          "b0ZsYWdzEh0KCmhlcm9fbGV2ZWwYBSACKA1SCWhlcm9MZXZlbBJMChVoZXJv" + 
          "X3Zpc3VhbF9lcXVpcG1lbnQYBiACKAsyGC5EMy5IZXJvLlZpc3VhbEVxdWlw" + 
          "bWVudFITaGVyb1Zpc3VhbEVxdWlwbWVudCKTDwoOQWNjb3VudFByb2ZpbGUS" + 
          "QgodZGVwcmVjYXRlZF9oaWdoZXN0X2RpZmZpY3VsdHkYASABKA1SG2RlcHJl" + 
          "Y2F0ZWRIaWdoZXN0RGlmZmljdWx0eRI5ChloaWdoZXN0X2Jvc3NfZGlmZmlj" + 
          "dWx0eV8xGAIgASgNUhZoaWdoZXN0Qm9zc0RpZmZpY3VsdHkxEjkKGWhpZ2hl" + 
          "c3RfYm9zc19kaWZmaWN1bHR5XzIYAyABKA1SFmhpZ2hlc3RCb3NzRGlmZmlj" + 
          "dWx0eTISOQoZaGlnaGVzdF9ib3NzX2RpZmZpY3VsdHlfMxgEIAEoDVIWaGln" + 
          "aGVzdEJvc3NEaWZmaWN1bHR5MxI5ChloaWdoZXN0X2Jvc3NfZGlmZmljdWx0" + 
          "eV80GAUgASgNUhZoaWdoZXN0Qm9zc0RpZmZpY3VsdHk0EioKD21vbnN0ZXJz" + 
          "X2tpbGxlZBgGIAEoBDoBMFIObW9uc3RlcnNLaWxsZWQSJgoNZWxpdGVzX2tp" + 
          "bGxlZBgHIAEoBDoBMFIMZWxpdGVzS2lsbGVkEigKDmdvbGRfY29sbGVjdGVk" + 
          "GAggASgEOgEwUg1nb2xkQ29sbGVjdGVkEjQKFmhpZ2hlc3RfaGFyZGNvcmVf" + 
          "bGV2ZWwYCSABKARSFGhpZ2hlc3RIYXJkY29yZUxldmVsEjgKGGhhcmRjb3Jl" + 
          "X21vbnN0ZXJzX2tpbGxlZBgKIAEoBFIWaGFyZGNvcmVNb25zdGVyc0tpbGxl" + 
          "ZBI+Cg9jbGFzc19iYXJiYXJpYW4YCyABKAsyFS5EMy5Qcm9maWxlLkNsYXNz" + 
          "SW5mb1IOY2xhc3NCYXJiYXJpYW4SQgoRY2xhc3NfZGVtb25odW50ZXIYDCAB" + 
          "KAsyFS5EMy5Qcm9maWxlLkNsYXNzSW5mb1IQY2xhc3NEZW1vbmh1bnRlchI0" + 
          "CgpjbGFzc19tb25rGA0gASgLMhUuRDMuUHJvZmlsZS5DbGFzc0luZm9SCWNs" + 
          "YXNzTW9uaxJCChFjbGFzc193aXRjaGRvY3RvchgOIAEoCzIVLkQzLlByb2Zp" + 
          "bGUuQ2xhc3NJbmZvUhBjbGFzc1dpdGNoZG9jdG9yEjgKDGNsYXNzX3dpemFy" + 
          "ZBgPIAEoCzIVLkQzLlByb2ZpbGUuQ2xhc3NJbmZvUgtjbGFzc1dpemFyZBI8" + 
          "Cg5jbGFzc19jcnVzYWRlchgQIAEoCzIVLkQzLlByb2ZpbGUuQ2xhc3NJbmZv" + 
          "Ug1jbGFzc0NydXNhZGVyEkIKEWNsYXNzX25lY3JvbWFuY2VyGBEgASgLMhUu" + 
          "RDMuUHJvZmlsZS5DbGFzc0luZm9SEGNsYXNzTmVjcm9tYW5jZXISGQoIcHZw" + 
          "X3dpbnMYEiABKA1SB3B2cFdpbnMSIwoNcHZwX3Rha2Vkb3ducxgTIAEoDVIM" + 
          "cHZwVGFrZWRvd25zEh0KCnB2cF9kYW1hZ2UYFCABKARSCXB2cERhbWFnZRIe" + 
          "CglzZWFzb25faWQYFSABKA06ATBSCHNlYXNvbklkEjkKGWhpZ2hlc3RfYm9z" + 
          "c19kaWZmaWN1bHR5XzUYFiABKA1SFmhpZ2hlc3RCb3NzRGlmZmljdWx0eTUS" + 
          "TgokZGVwcmVjYXRlZF9iZXN0X2xhZGRlcl9wYXJhZ29uX2xldmVsGBcgASgN" + 
          "UiBkZXByZWNhdGVkQmVzdExhZGRlclBhcmFnb25MZXZlbBImCg1wYXJhZ29u" + 
          "X2xldmVsGBggASgNOgEwUgxwYXJhZ29uTGV2ZWwSKQoPcGFyYWdvbl94cF9u" + 
          "ZXh0GBkgASgEOgEwUg1wYXJhZ29uWHBOZXh0EhgKB3NlYXNvbnMYGiADKA1S" + 
          "B3NlYXNvbnMSNwoWcGFyYWdvbl9sZXZlbF9oYXJkY29yZRgbIAEoDToBMFIU" + 
          "cGFyYWdvbkxldmVsSGFyZGNvcmUSOgoYcGFyYWdvbl94cF9uZXh0X2hhcmRj" + 
          "b3JlGBwgASgEOgEwUhVwYXJhZ29uWHBOZXh0SGFyZGNvcmUSMAoSYm91bnRp" + 
          "ZXNfY29tcGxldGVkGB0gASgNOgEwUhFib3VudGllc0NvbXBsZXRlZBIxChNs" + 
          "b290X3J1bnNfY29tcGxldGVkGB4gASgNOgEwUhFsb290UnVuc0NvbXBsZXRl" + 
          "ZBImCg1oaWdoZXN0X2xldmVsGB8gASgEOgEwUgxoaWdoZXN0TGV2ZWwSNwoW" + 
          "Ymxvb2Rfc2hhcmRzX2NvbGxlY3RlZBggIAEoBDoBMFIUYmxvb2RTaGFyZHND" + 
          "b2xsZWN0ZWQSMwoGaGVyb2VzGCIgAygLMhsuRDMuUHJvZmlsZS5IZXJvTWlu" + 
          "aVByb2ZpbGVSBmhlcm9lcxI/ChxsZWFkZXJib2FyZF9lcmFzX3dpdGhfc2Nv" + 
          "cmVzGCMgAygNUhlsZWFkZXJib2FyZEVyYXNXaXRoU2NvcmVzEioKEW51bV9m" + 
          "YWxsZW5faGVyb2VzGCQgASgNUg9udW1GYWxsZW5IZXJvZXMSLgoTc2Vhc29u" + 
          "X2pvdXJuZXlfcmFuaxglIAEoBFIRc2Vhc29uSm91cm5leVJhbmsSJQoOZGVs" + 
          "ZXRlZF9oZXJvZXMYJiADKA1SDWRlbGV0ZWRIZXJvZXMicgoOUHZwTWF0Y2hQ" + 
          "bGF5ZXISHQoKYWNjb3VudF9pZBgBIAEoBFIJYWNjb3VudElkEh0KCmdiaWRf" + 
          "Y2xhc3MYAiABKA1SCWdiaWRDbGFzcxIiCglpc19mZW1hbGUYAyABKAg6BWZh" + 
          "bHNlUghpc0ZlbWFsZSJ3Cg9QdnBNYXRjaFBsYXllcnMSMQoGdGVhbV8wGAEg" + 
          "AygLMhouRDMuUHJvZmlsZS5QdnBNYXRjaFBsYXllclIFdGVhbTASMQoGdGVh" + 
          "bV8xGAIgAygLMhouRDMuUHJvZmlsZS5QdnBNYXRjaFBsYXllclIFdGVhbTEi" + 
          "7gEKCFB2cE1hdGNoEhQKBWFyZW5hGAEgASgNUgVhcmVuYRI1CgdwbGF5ZXJz" + 
          "GAIgASgLMhsuRDMuUHJvZmlsZS5QdnBNYXRjaFBsYXllcnNSB3BsYXllcnMS" + 
          "IAoMc2NvcmVfdGVhbV8wGAMgASgNUgpzY29yZVRlYW0wEiAKDHNjb3JlX3Rl" + 
          "YW1fMRgEIAEoDVIKc2NvcmVUZWFtMRIbCglwbGF5X3RpbWUYBSABKA1SCHBs" + 
          "YXlUaW1lEhcKB2hlcm9faWQYBiABKA1SBmhlcm9JZBIbCglnYW1lX21vZGUY" + 
          "ByABKA1SCGdhbWVNb2RlIj4KDFB2cE1hdGNoTGlzdBIuCgdtYXRjaGVzGAEg" + 
          "AygLMhQuRDMuUHJvZmlsZS5QdnBNYXRjaFIHbWF0Y2hlcyKDAgoHUHZwVGVh" + 
          "bRIXCgd0ZWFtX2lkGAEgASgEUgZ0ZWFtSWQSFgoGcmF0aW5nGAIgASgCUgZy" + 
          "YXRpbmcSJwoPcmF0aW5nX3ZhcmlhbmNlGAMgASgCUg5yYXRpbmdWYXJpYW5j" + 
          "ZRIcCglib290c3RyYXAYBCABKAJSCWJvb3RzdHJhcBIhCgxnYW1lc19wbGF5" + 
          "ZWQYBSABKAVSC2dhbWVzUGxheWVkEh8KC2xhc3RfcGxheWVkGAYgASgNUgps" + 
          "YXN0UGxheWVkEh8KC251bV9tZW1iZXJzGAcgASgFUgpudW1NZW1iZXJzEhsK" + 
          "CWdhbWVfbW9kZRgIIAEoBVIIZ2FtZU1vZGU=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_D3_Profile_ClassInfo__Descriptor = Descriptor.MessageTypes[0];
        internal__static_D3_Profile_ClassInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.ClassInfo, global::D3.Profile.ClassInfo.Builder>(internal__static_D3_Profile_ClassInfo__Descriptor,
                new string[] { "Playtime", "HighestLevel", "DeprecatedHighestDifficulty", "PvpGames", });
        internal__static_D3_Profile_SkillWithRune__Descriptor = Descriptor.MessageTypes[1];
        internal__static_D3_Profile_SkillWithRune__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.SkillWithRune, global::D3.Profile.SkillWithRune.Builder>(internal__static_D3_Profile_SkillWithRune__Descriptor,
                new string[] { "Skill", "RuneType", });
        internal__static_D3_Profile_SkillsWithRunes__Descriptor = Descriptor.MessageTypes[2];
        internal__static_D3_Profile_SkillsWithRunes__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.SkillsWithRunes, global::D3.Profile.SkillsWithRunes.Builder>(internal__static_D3_Profile_SkillsWithRunes__Descriptor,
                new string[] { "Runes", });
        internal__static_D3_Profile_PassiveSkills__Descriptor = Descriptor.MessageTypes[3];
        internal__static_D3_Profile_PassiveSkills__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.PassiveSkills, global::D3.Profile.PassiveSkills.Builder>(internal__static_D3_Profile_PassiveSkills__Descriptor,
                new string[] { "SnoTraits", });
        internal__static_D3_Profile_ParagonPointAllocation__Descriptor = Descriptor.MessageTypes[4];
        internal__static_D3_Profile_ParagonPointAllocation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.ParagonPointAllocation, global::D3.Profile.ParagonPointAllocation.Builder>(internal__static_D3_Profile_ParagonPointAllocation__Descriptor,
                new string[] { "Slot", "Points", });
        internal__static_D3_Profile_ParagonPointAllocations__Descriptor = Descriptor.MessageTypes[5];
        internal__static_D3_Profile_ParagonPointAllocations__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.ParagonPointAllocations, global::D3.Profile.ParagonPointAllocations.Builder>(internal__static_D3_Profile_ParagonPointAllocations__Descriptor,
                new string[] { "Category", });
        internal__static_D3_Profile_LegendaryPowers__Descriptor = Descriptor.MessageTypes[6];
        internal__static_D3_Profile_LegendaryPowers__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.LegendaryPowers, global::D3.Profile.LegendaryPowers.Builder>(internal__static_D3_Profile_LegendaryPowers__Descriptor,
                new string[] { "GbidLegendaryPowers", });
        internal__static_D3_Profile_KillerInfo__Descriptor = Descriptor.MessageTypes[7];
        internal__static_D3_Profile_KillerInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.KillerInfo, global::D3.Profile.KillerInfo.Builder>(internal__static_D3_Profile_KillerInfo__Descriptor,
                new string[] { "SnoKiller", "Rarity", "RareNameGbids", });
        internal__static_D3_Profile_HeroProfile__Descriptor = Descriptor.MessageTypes[8];
        internal__static_D3_Profile_HeroProfile__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.HeroProfile, global::D3.Profile.HeroProfile.Builder>(internal__static_D3_Profile_HeroProfile__Descriptor,
                new string[] { "MonstersKilled", "ElitesKilled", "GoldCollected", "HighestLevel", "DeprecatedHighestDifficulty", "CreateTime", "Hardcore", "Strength", "Dexterity", "Intelligence", "Vitality", "DeprecatedArmor", "Dps", "ResistArcane", "ResistFire", "ResistLightning", "ResistPoison", "ResistCold", "Equipment", "SnoActiveSkills", "SnoTraits", "DeathTime", "KillerInfo", "SnoKillLocation", "HeroId", "DeprecatedDamageIncrease", "DeprecatedCritChance", "DeprecatedDamageReduction", "DeprecatedLife", "PvpGlory", "PvpWins", "PvpTakedowns", "PvpDamage", "Toughness", "Healing", "LegendaryPowers", });
        internal__static_D3_Profile_HeroProfileList__Descriptor = Descriptor.MessageTypes[9];
        internal__static_D3_Profile_HeroProfileList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.HeroProfileList, global::D3.Profile.HeroProfileList.Builder>(internal__static_D3_Profile_HeroProfileList__Descriptor,
                new string[] { "Heros", });
        internal__static_D3_Profile_HeroMiniProfile__Descriptor = Descriptor.MessageTypes[10];
        internal__static_D3_Profile_HeroMiniProfile__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.HeroMiniProfile, global::D3.Profile.HeroMiniProfile.Builder>(internal__static_D3_Profile_HeroMiniProfile__Descriptor,
                new string[] { "HeroId", "HeroName", "HeroGbidClass", "HeroFlags", "HeroLevel", "HeroVisualEquipment", });
        internal__static_D3_Profile_AccountProfile__Descriptor = Descriptor.MessageTypes[11];
        internal__static_D3_Profile_AccountProfile__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.AccountProfile, global::D3.Profile.AccountProfile.Builder>(internal__static_D3_Profile_AccountProfile__Descriptor,
                new string[] { "DeprecatedHighestDifficulty", "HighestBossDifficulty1", "HighestBossDifficulty2", "HighestBossDifficulty3", "HighestBossDifficulty4", "MonstersKilled", "ElitesKilled", "GoldCollected", "HighestHardcoreLevel", "HardcoreMonstersKilled", "ClassBarbarian", "ClassDemonhunter", "ClassMonk", "ClassWitchdoctor", "ClassWizard", "ClassCrusader", "ClassNecromancer", "PvpWins", "PvpTakedowns", "PvpDamage", "SeasonId", "HighestBossDifficulty5", "DeprecatedBestLadderParagonLevel", "ParagonLevel", "ParagonXpNext", "Seasons", "ParagonLevelHardcore", "ParagonXpNextHardcore", "BountiesCompleted", "LootRunsCompleted", "HighestLevel", "BloodShardsCollected", "Heroes", "LeaderboardErasWithScores", "NumFallenHeroes", "SeasonJourneyRank", "DeletedHeroes", });
        internal__static_D3_Profile_PvpMatchPlayer__Descriptor = Descriptor.MessageTypes[12];
        internal__static_D3_Profile_PvpMatchPlayer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.PvpMatchPlayer, global::D3.Profile.PvpMatchPlayer.Builder>(internal__static_D3_Profile_PvpMatchPlayer__Descriptor,
                new string[] { "AccountId", "GbidClass", "IsFemale", });
        internal__static_D3_Profile_PvpMatchPlayers__Descriptor = Descriptor.MessageTypes[13];
        internal__static_D3_Profile_PvpMatchPlayers__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.PvpMatchPlayers, global::D3.Profile.PvpMatchPlayers.Builder>(internal__static_D3_Profile_PvpMatchPlayers__Descriptor,
                new string[] { "Team0", "Team1", });
        internal__static_D3_Profile_PvpMatch__Descriptor = Descriptor.MessageTypes[14];
        internal__static_D3_Profile_PvpMatch__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.PvpMatch, global::D3.Profile.PvpMatch.Builder>(internal__static_D3_Profile_PvpMatch__Descriptor,
                new string[] { "Arena", "Players", "ScoreTeam0", "ScoreTeam1", "PlayTime", "HeroId", "GameMode", });
        internal__static_D3_Profile_PvpMatchList__Descriptor = Descriptor.MessageTypes[15];
        internal__static_D3_Profile_PvpMatchList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.PvpMatchList, global::D3.Profile.PvpMatchList.Builder>(internal__static_D3_Profile_PvpMatchList__Descriptor,
                new string[] { "Matches", });
        internal__static_D3_Profile_PvpTeam__Descriptor = Descriptor.MessageTypes[16];
        internal__static_D3_Profile_PvpTeam__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::D3.Profile.PvpTeam, global::D3.Profile.PvpTeam.Builder>(internal__static_D3_Profile_PvpTeam__Descriptor,
                new string[] { "TeamId", "Rating", "RatingVariance", "Bootstrap", "GamesPlayed", "LastPlayed", "NumMembers", "GameMode", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::D3.Items.Items.RegisterAllExtensions(registry);
        global::D3.OnlineService.OnlineService.RegisterAllExtensions(registry);
        global::D3.Hero.HeroCommon.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::D3.Items.Items.Descriptor, 
          global::D3.OnlineService.OnlineService.Descriptor, 
          global::D3.Hero.HeroCommon.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ClassInfo : pb::GeneratedMessage<ClassInfo, ClassInfo.Builder> {
    private ClassInfo() { }
    private static readonly ClassInfo defaultInstance = new ClassInfo().MakeReadOnly();
    private static readonly string[] _classInfoFieldNames = new string[] { "deprecated_highest_difficulty", "highest_level", "playtime", "pvp_games" };
    private static readonly uint[] _classInfoFieldTags = new uint[] { 24, 16, 8, 32 };
    public static ClassInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClassInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ClassInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_ClassInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClassInfo, ClassInfo.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_ClassInfo__FieldAccessorTable; }
    }
    
    public const int PlaytimeFieldNumber = 1;
    private bool hasPlaytime;
    private ulong playtime_;
    public bool HasPlaytime {
      get { return hasPlaytime; }
    }
    public ulong Playtime {
      get { return playtime_; }
    }
    
    public const int HighestLevelFieldNumber = 2;
    private bool hasHighestLevel;
    private uint highestLevel_;
    public bool HasHighestLevel {
      get { return hasHighestLevel; }
    }
    public uint HighestLevel {
      get { return highestLevel_; }
    }
    
    public const int DeprecatedHighestDifficultyFieldNumber = 3;
    private bool hasDeprecatedHighestDifficulty;
    private uint deprecatedHighestDifficulty_;
    public bool HasDeprecatedHighestDifficulty {
      get { return hasDeprecatedHighestDifficulty; }
    }
    public uint DeprecatedHighestDifficulty {
      get { return deprecatedHighestDifficulty_; }
    }
    
    public const int PvpGamesFieldNumber = 4;
    private bool hasPvpGames;
    private uint pvpGames_;
    public bool HasPvpGames {
      get { return hasPvpGames; }
    }
    public uint PvpGames {
      get { return pvpGames_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _classInfoFieldNames;
      if (hasPlaytime) {
        output.WriteUInt64(1, field_names[2], Playtime);
      }
      if (hasHighestLevel) {
        output.WriteUInt32(2, field_names[1], HighestLevel);
      }
      if (hasDeprecatedHighestDifficulty) {
        output.WriteUInt32(3, field_names[0], DeprecatedHighestDifficulty);
      }
      if (hasPvpGames) {
        output.WriteUInt32(4, field_names[3], PvpGames);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlaytime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, Playtime);
        }
        if (hasHighestLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, HighestLevel);
        }
        if (hasDeprecatedHighestDifficulty) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, DeprecatedHighestDifficulty);
        }
        if (hasPvpGames) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, PvpGames);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClassInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClassInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClassInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClassInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClassInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClassInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClassInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClassInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClassInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClassInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ClassInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClassInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ClassInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ClassInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ClassInfo result;
      
      private ClassInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ClassInfo original = result;
          result = new ClassInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ClassInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.ClassInfo.Descriptor; }
      }
      
      public override ClassInfo DefaultInstanceForType {
        get { return global::D3.Profile.ClassInfo.DefaultInstance; }
      }
      
      public override ClassInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClassInfo) {
          return MergeFrom((ClassInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClassInfo other) {
        if (other == global::D3.Profile.ClassInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlaytime) {
          Playtime = other.Playtime;
        }
        if (other.HasHighestLevel) {
          HighestLevel = other.HighestLevel;
        }
        if (other.HasDeprecatedHighestDifficulty) {
          DeprecatedHighestDifficulty = other.DeprecatedHighestDifficulty;
        }
        if (other.HasPvpGames) {
          PvpGames = other.PvpGames;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_classInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _classInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlaytime = input.ReadUInt64(ref result.playtime_);
              break;
            }
            case 16: {
              result.hasHighestLevel = input.ReadUInt32(ref result.highestLevel_);
              break;
            }
            case 24: {
              result.hasDeprecatedHighestDifficulty = input.ReadUInt32(ref result.deprecatedHighestDifficulty_);
              break;
            }
            case 32: {
              result.hasPvpGames = input.ReadUInt32(ref result.pvpGames_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlaytime {
        get { return result.hasPlaytime; }
      }
      public ulong Playtime {
        get { return result.Playtime; }
        set { SetPlaytime(value); }
      }
      public Builder SetPlaytime(ulong value) {
        PrepareBuilder();
        result.hasPlaytime = true;
        result.playtime_ = value;
        return this;
      }
      public Builder ClearPlaytime() {
        PrepareBuilder();
        result.hasPlaytime = false;
        result.playtime_ = 0UL;
        return this;
      }
      
      public bool HasHighestLevel {
        get { return result.hasHighestLevel; }
      }
      public uint HighestLevel {
        get { return result.HighestLevel; }
        set { SetHighestLevel(value); }
      }
      public Builder SetHighestLevel(uint value) {
        PrepareBuilder();
        result.hasHighestLevel = true;
        result.highestLevel_ = value;
        return this;
      }
      public Builder ClearHighestLevel() {
        PrepareBuilder();
        result.hasHighestLevel = false;
        result.highestLevel_ = 0;
        return this;
      }
      
      public bool HasDeprecatedHighestDifficulty {
        get { return result.hasDeprecatedHighestDifficulty; }
      }
      public uint DeprecatedHighestDifficulty {
        get { return result.DeprecatedHighestDifficulty; }
        set { SetDeprecatedHighestDifficulty(value); }
      }
      public Builder SetDeprecatedHighestDifficulty(uint value) {
        PrepareBuilder();
        result.hasDeprecatedHighestDifficulty = true;
        result.deprecatedHighestDifficulty_ = value;
        return this;
      }
      public Builder ClearDeprecatedHighestDifficulty() {
        PrepareBuilder();
        result.hasDeprecatedHighestDifficulty = false;
        result.deprecatedHighestDifficulty_ = 0;
        return this;
      }
      
      public bool HasPvpGames {
        get { return result.hasPvpGames; }
      }
      public uint PvpGames {
        get { return result.PvpGames; }
        set { SetPvpGames(value); }
      }
      public Builder SetPvpGames(uint value) {
        PrepareBuilder();
        result.hasPvpGames = true;
        result.pvpGames_ = value;
        return this;
      }
      public Builder ClearPvpGames() {
        PrepareBuilder();
        result.hasPvpGames = false;
        result.pvpGames_ = 0;
        return this;
      }
    }
    static ClassInfo() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SkillWithRune : pb::GeneratedMessage<SkillWithRune, SkillWithRune.Builder> {
    private SkillWithRune() { }
    private static readonly SkillWithRune defaultInstance = new SkillWithRune().MakeReadOnly();
    private static readonly string[] _skillWithRuneFieldNames = new string[] { "rune_type", "skill" };
    private static readonly uint[] _skillWithRuneFieldTags = new uint[] { 16, 13 };
    public static SkillWithRune DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SkillWithRune DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SkillWithRune ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_SkillWithRune__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SkillWithRune, SkillWithRune.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_SkillWithRune__FieldAccessorTable; }
    }
    
    public const int SkillFieldNumber = 1;
    private bool hasSkill;
    private int skill_ = -1;
    public bool HasSkill {
      get { return hasSkill; }
    }
    public int Skill {
      get { return skill_; }
    }
    
    public const int RuneTypeFieldNumber = 2;
    private bool hasRuneType;
    private int runeType_ = -1;
    public bool HasRuneType {
      get { return hasRuneType; }
    }
    public int RuneType {
      get { return runeType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSkill) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _skillWithRuneFieldNames;
      if (hasSkill) {
        output.WriteSFixed32(1, field_names[1], Skill);
      }
      if (hasRuneType) {
        output.WriteSInt32(2, field_names[0], RuneType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSkill) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(1, Skill);
        }
        if (hasRuneType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, RuneType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SkillWithRune ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SkillWithRune ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SkillWithRune ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SkillWithRune ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillWithRune ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SkillWithRune MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SkillWithRune prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SkillWithRune, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SkillWithRune cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SkillWithRune result;
      
      private SkillWithRune PrepareBuilder() {
        if (resultIsReadOnly) {
          SkillWithRune original = result;
          result = new SkillWithRune();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SkillWithRune MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.SkillWithRune.Descriptor; }
      }
      
      public override SkillWithRune DefaultInstanceForType {
        get { return global::D3.Profile.SkillWithRune.DefaultInstance; }
      }
      
      public override SkillWithRune BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SkillWithRune) {
          return MergeFrom((SkillWithRune) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SkillWithRune other) {
        if (other == global::D3.Profile.SkillWithRune.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSkill) {
          Skill = other.Skill;
        }
        if (other.HasRuneType) {
          RuneType = other.RuneType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_skillWithRuneFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _skillWithRuneFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSkill = input.ReadSFixed32(ref result.skill_);
              break;
            }
            case 16: {
              result.hasRuneType = input.ReadSInt32(ref result.runeType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSkill {
        get { return result.hasSkill; }
      }
      public int Skill {
        get { return result.Skill; }
        set { SetSkill(value); }
      }
      public Builder SetSkill(int value) {
        PrepareBuilder();
        result.hasSkill = true;
        result.skill_ = value;
        return this;
      }
      public Builder ClearSkill() {
        PrepareBuilder();
        result.hasSkill = false;
        result.skill_ = -1;
        return this;
      }
      
      public bool HasRuneType {
        get { return result.hasRuneType; }
      }
      public int RuneType {
        get { return result.RuneType; }
        set { SetRuneType(value); }
      }
      public Builder SetRuneType(int value) {
        PrepareBuilder();
        result.hasRuneType = true;
        result.runeType_ = value;
        return this;
      }
      public Builder ClearRuneType() {
        PrepareBuilder();
        result.hasRuneType = false;
        result.runeType_ = -1;
        return this;
      }
    }
    static SkillWithRune() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SkillsWithRunes : pb::GeneratedMessage<SkillsWithRunes, SkillsWithRunes.Builder> {
    private SkillsWithRunes() { }
    private static readonly SkillsWithRunes defaultInstance = new SkillsWithRunes().MakeReadOnly();
    private static readonly string[] _skillsWithRunesFieldNames = new string[] { "runes" };
    private static readonly uint[] _skillsWithRunesFieldTags = new uint[] { 10 };
    public static SkillsWithRunes DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SkillsWithRunes DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SkillsWithRunes ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_SkillsWithRunes__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SkillsWithRunes, SkillsWithRunes.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_SkillsWithRunes__FieldAccessorTable; }
    }
    
    public const int RunesFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Profile.SkillWithRune> runes_ = new pbc::PopsicleList<global::D3.Profile.SkillWithRune>();
    public scg::IList<global::D3.Profile.SkillWithRune> RunesList {
      get { return runes_; }
    }
    public int RunesCount {
      get { return runes_.Count; }
    }
    public global::D3.Profile.SkillWithRune GetRunes(int index) {
      return runes_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Profile.SkillWithRune element in RunesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _skillsWithRunesFieldNames;
      if (runes_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], runes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Profile.SkillWithRune element in RunesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SkillsWithRunes ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillsWithRunes ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillsWithRunes ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillsWithRunes ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillsWithRunes ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillsWithRunes ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SkillsWithRunes ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SkillsWithRunes ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SkillsWithRunes ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillsWithRunes ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SkillsWithRunes MakeReadOnly() {
      runes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SkillsWithRunes prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SkillsWithRunes, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SkillsWithRunes cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SkillsWithRunes result;
      
      private SkillsWithRunes PrepareBuilder() {
        if (resultIsReadOnly) {
          SkillsWithRunes original = result;
          result = new SkillsWithRunes();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SkillsWithRunes MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.SkillsWithRunes.Descriptor; }
      }
      
      public override SkillsWithRunes DefaultInstanceForType {
        get { return global::D3.Profile.SkillsWithRunes.DefaultInstance; }
      }
      
      public override SkillsWithRunes BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SkillsWithRunes) {
          return MergeFrom((SkillsWithRunes) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SkillsWithRunes other) {
        if (other == global::D3.Profile.SkillsWithRunes.DefaultInstance) return this;
        PrepareBuilder();
        if (other.runes_.Count != 0) {
          result.runes_.Add(other.runes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_skillsWithRunesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _skillsWithRunesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.runes_, global::D3.Profile.SkillWithRune.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Profile.SkillWithRune> RunesList {
        get { return PrepareBuilder().runes_; }
      }
      public int RunesCount {
        get { return result.RunesCount; }
      }
      public global::D3.Profile.SkillWithRune GetRunes(int index) {
        return result.GetRunes(index);
      }
      public Builder SetRunes(int index, global::D3.Profile.SkillWithRune value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.runes_[index] = value;
        return this;
      }
      public Builder SetRunes(int index, global::D3.Profile.SkillWithRune.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.runes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRunes(global::D3.Profile.SkillWithRune value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.runes_.Add(value);
        return this;
      }
      public Builder AddRunes(global::D3.Profile.SkillWithRune.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.runes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRunes(scg::IEnumerable<global::D3.Profile.SkillWithRune> values) {
        PrepareBuilder();
        result.runes_.Add(values);
        return this;
      }
      public Builder ClearRunes() {
        PrepareBuilder();
        result.runes_.Clear();
        return this;
      }
    }
    static SkillsWithRunes() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PassiveSkills : pb::GeneratedMessage<PassiveSkills, PassiveSkills.Builder> {
    private PassiveSkills() { }
    private static readonly PassiveSkills defaultInstance = new PassiveSkills().MakeReadOnly();
    private static readonly string[] _passiveSkillsFieldNames = new string[] { "sno_traits" };
    private static readonly uint[] _passiveSkillsFieldTags = new uint[] { 13 };
    public static PassiveSkills DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PassiveSkills DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PassiveSkills ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_PassiveSkills__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PassiveSkills, PassiveSkills.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_PassiveSkills__FieldAccessorTable; }
    }
    
    public const int SnoTraitsFieldNumber = 1;
    private pbc::PopsicleList<int> snoTraits_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SnoTraitsList {
      get { return pbc::Lists.AsReadOnly(snoTraits_); }
    }
    public int SnoTraitsCount {
      get { return snoTraits_.Count; }
    }
    public int GetSnoTraits(int index) {
      return snoTraits_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _passiveSkillsFieldNames;
      if (snoTraits_.Count > 0) {
        output.WriteSFixed32Array(1, field_names[0], snoTraits_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          dataSize = 4 * snoTraits_.Count;
          size += dataSize;
          size += 1 * snoTraits_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PassiveSkills ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PassiveSkills ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PassiveSkills ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PassiveSkills ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PassiveSkills ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PassiveSkills ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PassiveSkills ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PassiveSkills ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PassiveSkills ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PassiveSkills ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PassiveSkills MakeReadOnly() {
      snoTraits_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PassiveSkills prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PassiveSkills, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PassiveSkills cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PassiveSkills result;
      
      private PassiveSkills PrepareBuilder() {
        if (resultIsReadOnly) {
          PassiveSkills original = result;
          result = new PassiveSkills();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PassiveSkills MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.PassiveSkills.Descriptor; }
      }
      
      public override PassiveSkills DefaultInstanceForType {
        get { return global::D3.Profile.PassiveSkills.DefaultInstance; }
      }
      
      public override PassiveSkills BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PassiveSkills) {
          return MergeFrom((PassiveSkills) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PassiveSkills other) {
        if (other == global::D3.Profile.PassiveSkills.DefaultInstance) return this;
        PrepareBuilder();
        if (other.snoTraits_.Count != 0) {
          result.snoTraits_.Add(other.snoTraits_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_passiveSkillsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _passiveSkillsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 13: {
              input.ReadSFixed32Array(tag, field_name, result.snoTraits_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<int> SnoTraitsList {
        get { return PrepareBuilder().snoTraits_; }
      }
      public int SnoTraitsCount {
        get { return result.SnoTraitsCount; }
      }
      public int GetSnoTraits(int index) {
        return result.GetSnoTraits(index);
      }
      public Builder SetSnoTraits(int index, int value) {
        PrepareBuilder();
        result.snoTraits_[index] = value;
        return this;
      }
      public Builder AddSnoTraits(int value) {
        PrepareBuilder();
        result.snoTraits_.Add(value);
        return this;
      }
      public Builder AddRangeSnoTraits(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.snoTraits_.Add(values);
        return this;
      }
      public Builder ClearSnoTraits() {
        PrepareBuilder();
        result.snoTraits_.Clear();
        return this;
      }
    }
    static PassiveSkills() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ParagonPointAllocation : pb::GeneratedMessage<ParagonPointAllocation, ParagonPointAllocation.Builder> {
    private ParagonPointAllocation() { }
    private static readonly ParagonPointAllocation defaultInstance = new ParagonPointAllocation().MakeReadOnly();
    private static readonly string[] _paragonPointAllocationFieldNames = new string[] { "points", "slot" };
    private static readonly uint[] _paragonPointAllocationFieldTags = new uint[] { 16, 13 };
    public static ParagonPointAllocation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ParagonPointAllocation DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ParagonPointAllocation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_ParagonPointAllocation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ParagonPointAllocation, ParagonPointAllocation.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_ParagonPointAllocation__FieldAccessorTable; }
    }
    
    public const int SlotFieldNumber = 1;
    private bool hasSlot;
    private uint slot_;
    public bool HasSlot {
      get { return hasSlot; }
    }
    public uint Slot {
      get { return slot_; }
    }
    
    public const int PointsFieldNumber = 2;
    private bool hasPoints;
    private uint points_;
    public bool HasPoints {
      get { return hasPoints; }
    }
    public uint Points {
      get { return points_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _paragonPointAllocationFieldNames;
      if (hasSlot) {
        output.WriteFixed32(1, field_names[1], Slot);
      }
      if (hasPoints) {
        output.WriteUInt32(2, field_names[0], Points);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSlot) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, Slot);
        }
        if (hasPoints) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Points);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ParagonPointAllocation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ParagonPointAllocation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ParagonPointAllocation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ParagonPointAllocation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ParagonPointAllocation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ParagonPointAllocation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ParagonPointAllocation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ParagonPointAllocation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ParagonPointAllocation ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ParagonPointAllocation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ParagonPointAllocation MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ParagonPointAllocation prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ParagonPointAllocation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ParagonPointAllocation cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ParagonPointAllocation result;
      
      private ParagonPointAllocation PrepareBuilder() {
        if (resultIsReadOnly) {
          ParagonPointAllocation original = result;
          result = new ParagonPointAllocation();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ParagonPointAllocation MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.ParagonPointAllocation.Descriptor; }
      }
      
      public override ParagonPointAllocation DefaultInstanceForType {
        get { return global::D3.Profile.ParagonPointAllocation.DefaultInstance; }
      }
      
      public override ParagonPointAllocation BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ParagonPointAllocation) {
          return MergeFrom((ParagonPointAllocation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ParagonPointAllocation other) {
        if (other == global::D3.Profile.ParagonPointAllocation.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSlot) {
          Slot = other.Slot;
        }
        if (other.HasPoints) {
          Points = other.Points;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_paragonPointAllocationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _paragonPointAllocationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasSlot = input.ReadFixed32(ref result.slot_);
              break;
            }
            case 16: {
              result.hasPoints = input.ReadUInt32(ref result.points_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSlot {
        get { return result.hasSlot; }
      }
      public uint Slot {
        get { return result.Slot; }
        set { SetSlot(value); }
      }
      public Builder SetSlot(uint value) {
        PrepareBuilder();
        result.hasSlot = true;
        result.slot_ = value;
        return this;
      }
      public Builder ClearSlot() {
        PrepareBuilder();
        result.hasSlot = false;
        result.slot_ = 0;
        return this;
      }
      
      public bool HasPoints {
        get { return result.hasPoints; }
      }
      public uint Points {
        get { return result.Points; }
        set { SetPoints(value); }
      }
      public Builder SetPoints(uint value) {
        PrepareBuilder();
        result.hasPoints = true;
        result.points_ = value;
        return this;
      }
      public Builder ClearPoints() {
        PrepareBuilder();
        result.hasPoints = false;
        result.points_ = 0;
        return this;
      }
    }
    static ParagonPointAllocation() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ParagonPointAllocations : pb::GeneratedMessage<ParagonPointAllocations, ParagonPointAllocations.Builder> {
    private ParagonPointAllocations() { }
    private static readonly ParagonPointAllocations defaultInstance = new ParagonPointAllocations().MakeReadOnly();
    private static readonly string[] _paragonPointAllocationsFieldNames = new string[] { "category" };
    private static readonly uint[] _paragonPointAllocationsFieldTags = new uint[] { 10 };
    public static ParagonPointAllocations DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ParagonPointAllocations DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ParagonPointAllocations ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_ParagonPointAllocations__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ParagonPointAllocations, ParagonPointAllocations.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_ParagonPointAllocations__FieldAccessorTable; }
    }
    
    public const int CategoryFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Profile.ParagonPointAllocation> category_ = new pbc::PopsicleList<global::D3.Profile.ParagonPointAllocation>();
    public scg::IList<global::D3.Profile.ParagonPointAllocation> CategoryList {
      get { return category_; }
    }
    public int CategoryCount {
      get { return category_.Count; }
    }
    public global::D3.Profile.ParagonPointAllocation GetCategory(int index) {
      return category_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _paragonPointAllocationsFieldNames;
      if (category_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], category_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Profile.ParagonPointAllocation element in CategoryList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ParagonPointAllocations ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ParagonPointAllocations ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ParagonPointAllocations ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ParagonPointAllocations ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ParagonPointAllocations ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ParagonPointAllocations ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ParagonPointAllocations ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ParagonPointAllocations ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ParagonPointAllocations ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ParagonPointAllocations ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ParagonPointAllocations MakeReadOnly() {
      category_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ParagonPointAllocations prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ParagonPointAllocations, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ParagonPointAllocations cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ParagonPointAllocations result;
      
      private ParagonPointAllocations PrepareBuilder() {
        if (resultIsReadOnly) {
          ParagonPointAllocations original = result;
          result = new ParagonPointAllocations();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ParagonPointAllocations MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.ParagonPointAllocations.Descriptor; }
      }
      
      public override ParagonPointAllocations DefaultInstanceForType {
        get { return global::D3.Profile.ParagonPointAllocations.DefaultInstance; }
      }
      
      public override ParagonPointAllocations BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ParagonPointAllocations) {
          return MergeFrom((ParagonPointAllocations) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ParagonPointAllocations other) {
        if (other == global::D3.Profile.ParagonPointAllocations.DefaultInstance) return this;
        PrepareBuilder();
        if (other.category_.Count != 0) {
          result.category_.Add(other.category_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_paragonPointAllocationsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _paragonPointAllocationsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.category_, global::D3.Profile.ParagonPointAllocation.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Profile.ParagonPointAllocation> CategoryList {
        get { return PrepareBuilder().category_; }
      }
      public int CategoryCount {
        get { return result.CategoryCount; }
      }
      public global::D3.Profile.ParagonPointAllocation GetCategory(int index) {
        return result.GetCategory(index);
      }
      public Builder SetCategory(int index, global::D3.Profile.ParagonPointAllocation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.category_[index] = value;
        return this;
      }
      public Builder SetCategory(int index, global::D3.Profile.ParagonPointAllocation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.category_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCategory(global::D3.Profile.ParagonPointAllocation value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.category_.Add(value);
        return this;
      }
      public Builder AddCategory(global::D3.Profile.ParagonPointAllocation.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.category_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCategory(scg::IEnumerable<global::D3.Profile.ParagonPointAllocation> values) {
        PrepareBuilder();
        result.category_.Add(values);
        return this;
      }
      public Builder ClearCategory() {
        PrepareBuilder();
        result.category_.Clear();
        return this;
      }
    }
    static ParagonPointAllocations() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LegendaryPowers : pb::GeneratedMessage<LegendaryPowers, LegendaryPowers.Builder> {
    private LegendaryPowers() { }
    private static readonly LegendaryPowers defaultInstance = new LegendaryPowers().MakeReadOnly();
    private static readonly string[] _legendaryPowersFieldNames = new string[] { "gbid_legendary_powers" };
    private static readonly uint[] _legendaryPowersFieldTags = new uint[] { 13 };
    public static LegendaryPowers DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LegendaryPowers DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LegendaryPowers ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_LegendaryPowers__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LegendaryPowers, LegendaryPowers.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_LegendaryPowers__FieldAccessorTable; }
    }
    
    public const int GbidLegendaryPowersFieldNumber = 1;
    private pbc::PopsicleList<int> gbidLegendaryPowers_ = new pbc::PopsicleList<int>();
    public scg::IList<int> GbidLegendaryPowersList {
      get { return pbc::Lists.AsReadOnly(gbidLegendaryPowers_); }
    }
    public int GbidLegendaryPowersCount {
      get { return gbidLegendaryPowers_.Count; }
    }
    public int GetGbidLegendaryPowers(int index) {
      return gbidLegendaryPowers_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _legendaryPowersFieldNames;
      if (gbidLegendaryPowers_.Count > 0) {
        output.WriteSFixed32Array(1, field_names[0], gbidLegendaryPowers_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          dataSize = 4 * gbidLegendaryPowers_.Count;
          size += dataSize;
          size += 1 * gbidLegendaryPowers_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LegendaryPowers ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LegendaryPowers ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LegendaryPowers ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LegendaryPowers ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LegendaryPowers ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LegendaryPowers ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LegendaryPowers ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LegendaryPowers ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LegendaryPowers ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LegendaryPowers ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LegendaryPowers MakeReadOnly() {
      gbidLegendaryPowers_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LegendaryPowers prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LegendaryPowers, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LegendaryPowers cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LegendaryPowers result;
      
      private LegendaryPowers PrepareBuilder() {
        if (resultIsReadOnly) {
          LegendaryPowers original = result;
          result = new LegendaryPowers();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LegendaryPowers MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.LegendaryPowers.Descriptor; }
      }
      
      public override LegendaryPowers DefaultInstanceForType {
        get { return global::D3.Profile.LegendaryPowers.DefaultInstance; }
      }
      
      public override LegendaryPowers BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LegendaryPowers) {
          return MergeFrom((LegendaryPowers) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LegendaryPowers other) {
        if (other == global::D3.Profile.LegendaryPowers.DefaultInstance) return this;
        PrepareBuilder();
        if (other.gbidLegendaryPowers_.Count != 0) {
          result.gbidLegendaryPowers_.Add(other.gbidLegendaryPowers_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_legendaryPowersFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _legendaryPowersFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 13: {
              input.ReadSFixed32Array(tag, field_name, result.gbidLegendaryPowers_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<int> GbidLegendaryPowersList {
        get { return PrepareBuilder().gbidLegendaryPowers_; }
      }
      public int GbidLegendaryPowersCount {
        get { return result.GbidLegendaryPowersCount; }
      }
      public int GetGbidLegendaryPowers(int index) {
        return result.GetGbidLegendaryPowers(index);
      }
      public Builder SetGbidLegendaryPowers(int index, int value) {
        PrepareBuilder();
        result.gbidLegendaryPowers_[index] = value;
        return this;
      }
      public Builder AddGbidLegendaryPowers(int value) {
        PrepareBuilder();
        result.gbidLegendaryPowers_.Add(value);
        return this;
      }
      public Builder AddRangeGbidLegendaryPowers(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.gbidLegendaryPowers_.Add(values);
        return this;
      }
      public Builder ClearGbidLegendaryPowers() {
        PrepareBuilder();
        result.gbidLegendaryPowers_.Clear();
        return this;
      }
    }
    static LegendaryPowers() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class KillerInfo : pb::GeneratedMessage<KillerInfo, KillerInfo.Builder> {
    private KillerInfo() { }
    private static readonly KillerInfo defaultInstance = new KillerInfo().MakeReadOnly();
    private static readonly string[] _killerInfoFieldNames = new string[] { "rare_name_gbids", "rarity", "sno_killer" };
    private static readonly uint[] _killerInfoFieldTags = new uint[] { 24, 16, 8 };
    public static KillerInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override KillerInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override KillerInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_KillerInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<KillerInfo, KillerInfo.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_KillerInfo__FieldAccessorTable; }
    }
    
    public const int SnoKillerFieldNumber = 1;
    private bool hasSnoKiller;
    private int snoKiller_ = -1;
    public bool HasSnoKiller {
      get { return hasSnoKiller; }
    }
    public int SnoKiller {
      get { return snoKiller_; }
    }
    
    public const int RarityFieldNumber = 2;
    private bool hasRarity;
    private uint rarity_;
    public bool HasRarity {
      get { return hasRarity; }
    }
    public uint Rarity {
      get { return rarity_; }
    }
    
    public const int RareNameGbidsFieldNumber = 3;
    private pbc::PopsicleList<int> rareNameGbids_ = new pbc::PopsicleList<int>();
    public scg::IList<int> RareNameGbidsList {
      get { return pbc::Lists.AsReadOnly(rareNameGbids_); }
    }
    public int RareNameGbidsCount {
      get { return rareNameGbids_.Count; }
    }
    public int GetRareNameGbids(int index) {
      return rareNameGbids_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _killerInfoFieldNames;
      if (hasSnoKiller) {
        output.WriteInt32(1, field_names[2], SnoKiller);
      }
      if (hasRarity) {
        output.WriteUInt32(2, field_names[1], Rarity);
      }
      if (rareNameGbids_.Count > 0) {
        output.WriteInt32Array(3, field_names[0], rareNameGbids_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSnoKiller) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, SnoKiller);
        }
        if (hasRarity) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Rarity);
        }
        {
          int dataSize = 0;
          foreach (int element in RareNameGbidsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * rareNameGbids_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static KillerInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KillerInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KillerInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KillerInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KillerInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KillerInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static KillerInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static KillerInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static KillerInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KillerInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private KillerInfo MakeReadOnly() {
      rareNameGbids_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(KillerInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<KillerInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(KillerInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private KillerInfo result;
      
      private KillerInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          KillerInfo original = result;
          result = new KillerInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override KillerInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.KillerInfo.Descriptor; }
      }
      
      public override KillerInfo DefaultInstanceForType {
        get { return global::D3.Profile.KillerInfo.DefaultInstance; }
      }
      
      public override KillerInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is KillerInfo) {
          return MergeFrom((KillerInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(KillerInfo other) {
        if (other == global::D3.Profile.KillerInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSnoKiller) {
          SnoKiller = other.SnoKiller;
        }
        if (other.HasRarity) {
          Rarity = other.Rarity;
        }
        if (other.rareNameGbids_.Count != 0) {
          result.rareNameGbids_.Add(other.rareNameGbids_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_killerInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _killerInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSnoKiller = input.ReadInt32(ref result.snoKiller_);
              break;
            }
            case 16: {
              result.hasRarity = input.ReadUInt32(ref result.rarity_);
              break;
            }
            case 26:
            case 24: {
              input.ReadInt32Array(tag, field_name, result.rareNameGbids_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSnoKiller {
        get { return result.hasSnoKiller; }
      }
      public int SnoKiller {
        get { return result.SnoKiller; }
        set { SetSnoKiller(value); }
      }
      public Builder SetSnoKiller(int value) {
        PrepareBuilder();
        result.hasSnoKiller = true;
        result.snoKiller_ = value;
        return this;
      }
      public Builder ClearSnoKiller() {
        PrepareBuilder();
        result.hasSnoKiller = false;
        result.snoKiller_ = -1;
        return this;
      }
      
      public bool HasRarity {
        get { return result.hasRarity; }
      }
      public uint Rarity {
        get { return result.Rarity; }
        set { SetRarity(value); }
      }
      public Builder SetRarity(uint value) {
        PrepareBuilder();
        result.hasRarity = true;
        result.rarity_ = value;
        return this;
      }
      public Builder ClearRarity() {
        PrepareBuilder();
        result.hasRarity = false;
        result.rarity_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> RareNameGbidsList {
        get { return PrepareBuilder().rareNameGbids_; }
      }
      public int RareNameGbidsCount {
        get { return result.RareNameGbidsCount; }
      }
      public int GetRareNameGbids(int index) {
        return result.GetRareNameGbids(index);
      }
      public Builder SetRareNameGbids(int index, int value) {
        PrepareBuilder();
        result.rareNameGbids_[index] = value;
        return this;
      }
      public Builder AddRareNameGbids(int value) {
        PrepareBuilder();
        result.rareNameGbids_.Add(value);
        return this;
      }
      public Builder AddRangeRareNameGbids(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.rareNameGbids_.Add(values);
        return this;
      }
      public Builder ClearRareNameGbids() {
        PrepareBuilder();
        result.rareNameGbids_.Clear();
        return this;
      }
    }
    static KillerInfo() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeroProfile : pb::GeneratedMessage<HeroProfile, HeroProfile.Builder> {
    private HeroProfile() { }
    private static readonly HeroProfile defaultInstance = new HeroProfile().MakeReadOnly();
    private static readonly string[] _heroProfileFieldNames = new string[] { "create_time", "death_time", "deprecated_armor", "deprecated_crit_chance", "deprecated_damage_increase", "deprecated_damage_reduction", "deprecated_highest_difficulty", "deprecated_life", "dexterity", "dps", "elites_killed", "equipment", "gold_collected", "hardcore", "healing", "hero_id", "highest_level", "intelligence", "killer_info", "legendary_powers", "monsters_killed", "pvp_damage", "pvp_glory", "pvp_takedowns", "pvp_wins", "resist_arcane", "resist_cold", "resist_fire", "resist_lightning", "resist_poison", "sno_active_skills", "sno_kill_location", "sno_traits", "strength", "toughness", "vitality" };
    private static readonly uint[] _heroProfileFieldTags = new uint[] { 48, 176, 96, 237, 229, 245, 40, 248, 72, 109, 16, 154, 24, 56, 325, 218, 32, 80, 186, 330, 8, 304, 280, 296, 288, 112, 144, 120, 128, 136, 162, 192, 170, 64, 317, 88 };
    public static HeroProfile DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroProfile DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeroProfile ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_HeroProfile__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroProfile, HeroProfile.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_HeroProfile__FieldAccessorTable; }
    }
    
    public const int MonstersKilledFieldNumber = 1;
    private bool hasMonstersKilled;
    private ulong monstersKilled_;
    public bool HasMonstersKilled {
      get { return hasMonstersKilled; }
    }
    public ulong MonstersKilled {
      get { return monstersKilled_; }
    }
    
    public const int ElitesKilledFieldNumber = 2;
    private bool hasElitesKilled;
    private ulong elitesKilled_;
    public bool HasElitesKilled {
      get { return hasElitesKilled; }
    }
    public ulong ElitesKilled {
      get { return elitesKilled_; }
    }
    
    public const int GoldCollectedFieldNumber = 3;
    private bool hasGoldCollected;
    private ulong goldCollected_;
    public bool HasGoldCollected {
      get { return hasGoldCollected; }
    }
    public ulong GoldCollected {
      get { return goldCollected_; }
    }
    
    public const int HighestLevelFieldNumber = 4;
    private bool hasHighestLevel;
    private uint highestLevel_;
    public bool HasHighestLevel {
      get { return hasHighestLevel; }
    }
    public uint HighestLevel {
      get { return highestLevel_; }
    }
    
    public const int DeprecatedHighestDifficultyFieldNumber = 5;
    private bool hasDeprecatedHighestDifficulty;
    private uint deprecatedHighestDifficulty_;
    public bool HasDeprecatedHighestDifficulty {
      get { return hasDeprecatedHighestDifficulty; }
    }
    public uint DeprecatedHighestDifficulty {
      get { return deprecatedHighestDifficulty_; }
    }
    
    public const int CreateTimeFieldNumber = 6;
    private bool hasCreateTime;
    private uint createTime_;
    public bool HasCreateTime {
      get { return hasCreateTime; }
    }
    public uint CreateTime {
      get { return createTime_; }
    }
    
    public const int HardcoreFieldNumber = 7;
    private bool hasHardcore;
    private bool hardcore_;
    public bool HasHardcore {
      get { return hasHardcore; }
    }
    public bool Hardcore {
      get { return hardcore_; }
    }
    
    public const int StrengthFieldNumber = 8;
    private bool hasStrength;
    private uint strength_;
    public bool HasStrength {
      get { return hasStrength; }
    }
    public uint Strength {
      get { return strength_; }
    }
    
    public const int DexterityFieldNumber = 9;
    private bool hasDexterity;
    private uint dexterity_;
    public bool HasDexterity {
      get { return hasDexterity; }
    }
    public uint Dexterity {
      get { return dexterity_; }
    }
    
    public const int IntelligenceFieldNumber = 10;
    private bool hasIntelligence;
    private uint intelligence_;
    public bool HasIntelligence {
      get { return hasIntelligence; }
    }
    public uint Intelligence {
      get { return intelligence_; }
    }
    
    public const int VitalityFieldNumber = 11;
    private bool hasVitality;
    private uint vitality_;
    public bool HasVitality {
      get { return hasVitality; }
    }
    public uint Vitality {
      get { return vitality_; }
    }
    
    public const int DeprecatedArmorFieldNumber = 12;
    private bool hasDeprecatedArmor;
    private uint deprecatedArmor_;
    public bool HasDeprecatedArmor {
      get { return hasDeprecatedArmor; }
    }
    public uint DeprecatedArmor {
      get { return deprecatedArmor_; }
    }
    
    public const int DpsFieldNumber = 13;
    private bool hasDps;
    private float dps_;
    public bool HasDps {
      get { return hasDps; }
    }
    public float Dps {
      get { return dps_; }
    }
    
    public const int ResistArcaneFieldNumber = 14;
    private bool hasResistArcane;
    private uint resistArcane_;
    public bool HasResistArcane {
      get { return hasResistArcane; }
    }
    public uint ResistArcane {
      get { return resistArcane_; }
    }
    
    public const int ResistFireFieldNumber = 15;
    private bool hasResistFire;
    private uint resistFire_;
    public bool HasResistFire {
      get { return hasResistFire; }
    }
    public uint ResistFire {
      get { return resistFire_; }
    }
    
    public const int ResistLightningFieldNumber = 16;
    private bool hasResistLightning;
    private uint resistLightning_;
    public bool HasResistLightning {
      get { return hasResistLightning; }
    }
    public uint ResistLightning {
      get { return resistLightning_; }
    }
    
    public const int ResistPoisonFieldNumber = 17;
    private bool hasResistPoison;
    private uint resistPoison_;
    public bool HasResistPoison {
      get { return hasResistPoison; }
    }
    public uint ResistPoison {
      get { return resistPoison_; }
    }
    
    public const int ResistColdFieldNumber = 18;
    private bool hasResistCold;
    private uint resistCold_;
    public bool HasResistCold {
      get { return hasResistCold; }
    }
    public uint ResistCold {
      get { return resistCold_; }
    }
    
    public const int EquipmentFieldNumber = 19;
    private bool hasEquipment;
    private global::D3.Items.ItemList equipment_;
    public bool HasEquipment {
      get { return hasEquipment; }
    }
    public global::D3.Items.ItemList Equipment {
      get { return equipment_ ?? global::D3.Items.ItemList.DefaultInstance; }
    }
    
    public const int SnoActiveSkillsFieldNumber = 20;
    private bool hasSnoActiveSkills;
    private global::D3.Profile.SkillsWithRunes snoActiveSkills_;
    public bool HasSnoActiveSkills {
      get { return hasSnoActiveSkills; }
    }
    public global::D3.Profile.SkillsWithRunes SnoActiveSkills {
      get { return snoActiveSkills_ ?? global::D3.Profile.SkillsWithRunes.DefaultInstance; }
    }
    
    public const int SnoTraitsFieldNumber = 21;
    private bool hasSnoTraits;
    private global::D3.Profile.PassiveSkills snoTraits_;
    public bool HasSnoTraits {
      get { return hasSnoTraits; }
    }
    public global::D3.Profile.PassiveSkills SnoTraits {
      get { return snoTraits_ ?? global::D3.Profile.PassiveSkills.DefaultInstance; }
    }
    
    public const int DeathTimeFieldNumber = 22;
    private bool hasDeathTime;
    private uint deathTime_;
    public bool HasDeathTime {
      get { return hasDeathTime; }
    }
    public uint DeathTime {
      get { return deathTime_; }
    }
    
    public const int KillerInfoFieldNumber = 23;
    private bool hasKillerInfo;
    private global::D3.Profile.KillerInfo killerInfo_;
    public bool HasKillerInfo {
      get { return hasKillerInfo; }
    }
    public global::D3.Profile.KillerInfo KillerInfo {
      get { return killerInfo_ ?? global::D3.Profile.KillerInfo.DefaultInstance; }
    }
    
    public const int SnoKillLocationFieldNumber = 24;
    private bool hasSnoKillLocation;
    private uint snoKillLocation_;
    public bool HasSnoKillLocation {
      get { return hasSnoKillLocation; }
    }
    public uint SnoKillLocation {
      get { return snoKillLocation_; }
    }
    
    public const int HeroIdFieldNumber = 27;
    private bool hasHeroId;
    private global::D3.OnlineService.EntityId heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public global::D3.OnlineService.EntityId HeroId {
      get { return heroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int DeprecatedDamageIncreaseFieldNumber = 28;
    private bool hasDeprecatedDamageIncrease;
    private float deprecatedDamageIncrease_;
    public bool HasDeprecatedDamageIncrease {
      get { return hasDeprecatedDamageIncrease; }
    }
    public float DeprecatedDamageIncrease {
      get { return deprecatedDamageIncrease_; }
    }
    
    public const int DeprecatedCritChanceFieldNumber = 29;
    private bool hasDeprecatedCritChance;
    private float deprecatedCritChance_;
    public bool HasDeprecatedCritChance {
      get { return hasDeprecatedCritChance; }
    }
    public float DeprecatedCritChance {
      get { return deprecatedCritChance_; }
    }
    
    public const int DeprecatedDamageReductionFieldNumber = 30;
    private bool hasDeprecatedDamageReduction;
    private float deprecatedDamageReduction_;
    public bool HasDeprecatedDamageReduction {
      get { return hasDeprecatedDamageReduction; }
    }
    public float DeprecatedDamageReduction {
      get { return deprecatedDamageReduction_; }
    }
    
    public const int DeprecatedLifeFieldNumber = 31;
    private bool hasDeprecatedLife;
    private uint deprecatedLife_;
    public bool HasDeprecatedLife {
      get { return hasDeprecatedLife; }
    }
    public uint DeprecatedLife {
      get { return deprecatedLife_; }
    }
    
    public const int PvpGloryFieldNumber = 35;
    private bool hasPvpGlory;
    private uint pvpGlory_;
    public bool HasPvpGlory {
      get { return hasPvpGlory; }
    }
    public uint PvpGlory {
      get { return pvpGlory_; }
    }
    
    public const int PvpWinsFieldNumber = 36;
    private bool hasPvpWins;
    private uint pvpWins_;
    public bool HasPvpWins {
      get { return hasPvpWins; }
    }
    public uint PvpWins {
      get { return pvpWins_; }
    }
    
    public const int PvpTakedownsFieldNumber = 37;
    private bool hasPvpTakedowns;
    private uint pvpTakedowns_;
    public bool HasPvpTakedowns {
      get { return hasPvpTakedowns; }
    }
    public uint PvpTakedowns {
      get { return pvpTakedowns_; }
    }
    
    public const int PvpDamageFieldNumber = 38;
    private bool hasPvpDamage;
    private ulong pvpDamage_;
    public bool HasPvpDamage {
      get { return hasPvpDamage; }
    }
    public ulong PvpDamage {
      get { return pvpDamage_; }
    }
    
    public const int ToughnessFieldNumber = 39;
    private bool hasToughness;
    private float toughness_;
    public bool HasToughness {
      get { return hasToughness; }
    }
    public float Toughness {
      get { return toughness_; }
    }
    
    public const int HealingFieldNumber = 40;
    private bool hasHealing;
    private float healing_;
    public bool HasHealing {
      get { return hasHealing; }
    }
    public float Healing {
      get { return healing_; }
    }
    
    public const int LegendaryPowersFieldNumber = 41;
    private bool hasLegendaryPowers;
    private global::D3.Profile.LegendaryPowers legendaryPowers_;
    public bool HasLegendaryPowers {
      get { return hasLegendaryPowers; }
    }
    public global::D3.Profile.LegendaryPowers LegendaryPowers {
      get { return legendaryPowers_ ?? global::D3.Profile.LegendaryPowers.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasEquipment) {
          if (!Equipment.IsInitialized) return false;
        }
        if (HasSnoActiveSkills) {
          if (!SnoActiveSkills.IsInitialized) return false;
        }
        if (HasHeroId) {
          if (!HeroId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _heroProfileFieldNames;
      if (hasMonstersKilled) {
        output.WriteUInt64(1, field_names[20], MonstersKilled);
      }
      if (hasElitesKilled) {
        output.WriteUInt64(2, field_names[10], ElitesKilled);
      }
      if (hasGoldCollected) {
        output.WriteUInt64(3, field_names[12], GoldCollected);
      }
      if (hasHighestLevel) {
        output.WriteUInt32(4, field_names[16], HighestLevel);
      }
      if (hasDeprecatedHighestDifficulty) {
        output.WriteUInt32(5, field_names[6], DeprecatedHighestDifficulty);
      }
      if (hasCreateTime) {
        output.WriteUInt32(6, field_names[0], CreateTime);
      }
      if (hasHardcore) {
        output.WriteBool(7, field_names[13], Hardcore);
      }
      if (hasStrength) {
        output.WriteUInt32(8, field_names[33], Strength);
      }
      if (hasDexterity) {
        output.WriteUInt32(9, field_names[8], Dexterity);
      }
      if (hasIntelligence) {
        output.WriteUInt32(10, field_names[17], Intelligence);
      }
      if (hasVitality) {
        output.WriteUInt32(11, field_names[35], Vitality);
      }
      if (hasDeprecatedArmor) {
        output.WriteUInt32(12, field_names[2], DeprecatedArmor);
      }
      if (hasDps) {
        output.WriteFloat(13, field_names[9], Dps);
      }
      if (hasResistArcane) {
        output.WriteUInt32(14, field_names[25], ResistArcane);
      }
      if (hasResistFire) {
        output.WriteUInt32(15, field_names[27], ResistFire);
      }
      if (hasResistLightning) {
        output.WriteUInt32(16, field_names[28], ResistLightning);
      }
      if (hasResistPoison) {
        output.WriteUInt32(17, field_names[29], ResistPoison);
      }
      if (hasResistCold) {
        output.WriteUInt32(18, field_names[26], ResistCold);
      }
      if (hasEquipment) {
        output.WriteMessage(19, field_names[11], Equipment);
      }
      if (hasSnoActiveSkills) {
        output.WriteMessage(20, field_names[30], SnoActiveSkills);
      }
      if (hasSnoTraits) {
        output.WriteMessage(21, field_names[32], SnoTraits);
      }
      if (hasDeathTime) {
        output.WriteUInt32(22, field_names[1], DeathTime);
      }
      if (hasKillerInfo) {
        output.WriteMessage(23, field_names[18], KillerInfo);
      }
      if (hasSnoKillLocation) {
        output.WriteUInt32(24, field_names[31], SnoKillLocation);
      }
      if (hasHeroId) {
        output.WriteMessage(27, field_names[15], HeroId);
      }
      if (hasDeprecatedDamageIncrease) {
        output.WriteFloat(28, field_names[4], DeprecatedDamageIncrease);
      }
      if (hasDeprecatedCritChance) {
        output.WriteFloat(29, field_names[3], DeprecatedCritChance);
      }
      if (hasDeprecatedDamageReduction) {
        output.WriteFloat(30, field_names[5], DeprecatedDamageReduction);
      }
      if (hasDeprecatedLife) {
        output.WriteUInt32(31, field_names[7], DeprecatedLife);
      }
      if (hasPvpGlory) {
        output.WriteUInt32(35, field_names[22], PvpGlory);
      }
      if (hasPvpWins) {
        output.WriteUInt32(36, field_names[24], PvpWins);
      }
      if (hasPvpTakedowns) {
        output.WriteUInt32(37, field_names[23], PvpTakedowns);
      }
      if (hasPvpDamage) {
        output.WriteUInt64(38, field_names[21], PvpDamage);
      }
      if (hasToughness) {
        output.WriteFloat(39, field_names[34], Toughness);
      }
      if (hasHealing) {
        output.WriteFloat(40, field_names[14], Healing);
      }
      if (hasLegendaryPowers) {
        output.WriteMessage(41, field_names[19], LegendaryPowers);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMonstersKilled) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, MonstersKilled);
        }
        if (hasElitesKilled) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, ElitesKilled);
        }
        if (hasGoldCollected) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, GoldCollected);
        }
        if (hasHighestLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, HighestLevel);
        }
        if (hasDeprecatedHighestDifficulty) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, DeprecatedHighestDifficulty);
        }
        if (hasCreateTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, CreateTime);
        }
        if (hasHardcore) {
          size += pb::CodedOutputStream.ComputeBoolSize(7, Hardcore);
        }
        if (hasStrength) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, Strength);
        }
        if (hasDexterity) {
          size += pb::CodedOutputStream.ComputeUInt32Size(9, Dexterity);
        }
        if (hasIntelligence) {
          size += pb::CodedOutputStream.ComputeUInt32Size(10, Intelligence);
        }
        if (hasVitality) {
          size += pb::CodedOutputStream.ComputeUInt32Size(11, Vitality);
        }
        if (hasDeprecatedArmor) {
          size += pb::CodedOutputStream.ComputeUInt32Size(12, DeprecatedArmor);
        }
        if (hasDps) {
          size += pb::CodedOutputStream.ComputeFloatSize(13, Dps);
        }
        if (hasResistArcane) {
          size += pb::CodedOutputStream.ComputeUInt32Size(14, ResistArcane);
        }
        if (hasResistFire) {
          size += pb::CodedOutputStream.ComputeUInt32Size(15, ResistFire);
        }
        if (hasResistLightning) {
          size += pb::CodedOutputStream.ComputeUInt32Size(16, ResistLightning);
        }
        if (hasResistPoison) {
          size += pb::CodedOutputStream.ComputeUInt32Size(17, ResistPoison);
        }
        if (hasResistCold) {
          size += pb::CodedOutputStream.ComputeUInt32Size(18, ResistCold);
        }
        if (hasEquipment) {
          size += pb::CodedOutputStream.ComputeMessageSize(19, Equipment);
        }
        if (hasSnoActiveSkills) {
          size += pb::CodedOutputStream.ComputeMessageSize(20, SnoActiveSkills);
        }
        if (hasSnoTraits) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, SnoTraits);
        }
        if (hasDeathTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(22, DeathTime);
        }
        if (hasKillerInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(23, KillerInfo);
        }
        if (hasSnoKillLocation) {
          size += pb::CodedOutputStream.ComputeUInt32Size(24, SnoKillLocation);
        }
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(27, HeroId);
        }
        if (hasDeprecatedDamageIncrease) {
          size += pb::CodedOutputStream.ComputeFloatSize(28, DeprecatedDamageIncrease);
        }
        if (hasDeprecatedCritChance) {
          size += pb::CodedOutputStream.ComputeFloatSize(29, DeprecatedCritChance);
        }
        if (hasDeprecatedDamageReduction) {
          size += pb::CodedOutputStream.ComputeFloatSize(30, DeprecatedDamageReduction);
        }
        if (hasDeprecatedLife) {
          size += pb::CodedOutputStream.ComputeUInt32Size(31, DeprecatedLife);
        }
        if (hasPvpGlory) {
          size += pb::CodedOutputStream.ComputeUInt32Size(35, PvpGlory);
        }
        if (hasPvpWins) {
          size += pb::CodedOutputStream.ComputeUInt32Size(36, PvpWins);
        }
        if (hasPvpTakedowns) {
          size += pb::CodedOutputStream.ComputeUInt32Size(37, PvpTakedowns);
        }
        if (hasPvpDamage) {
          size += pb::CodedOutputStream.ComputeUInt64Size(38, PvpDamage);
        }
        if (hasToughness) {
          size += pb::CodedOutputStream.ComputeFloatSize(39, Toughness);
        }
        if (hasHealing) {
          size += pb::CodedOutputStream.ComputeFloatSize(40, Healing);
        }
        if (hasLegendaryPowers) {
          size += pb::CodedOutputStream.ComputeMessageSize(41, LegendaryPowers);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroProfile ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroProfile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroProfile ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroProfile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroProfile ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroProfile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroProfile ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroProfile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroProfile ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroProfile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeroProfile MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroProfile prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HeroProfile, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeroProfile cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeroProfile result;
      
      private HeroProfile PrepareBuilder() {
        if (resultIsReadOnly) {
          HeroProfile original = result;
          result = new HeroProfile();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeroProfile MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.HeroProfile.Descriptor; }
      }
      
      public override HeroProfile DefaultInstanceForType {
        get { return global::D3.Profile.HeroProfile.DefaultInstance; }
      }
      
      public override HeroProfile BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroProfile) {
          return MergeFrom((HeroProfile) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroProfile other) {
        if (other == global::D3.Profile.HeroProfile.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMonstersKilled) {
          MonstersKilled = other.MonstersKilled;
        }
        if (other.HasElitesKilled) {
          ElitesKilled = other.ElitesKilled;
        }
        if (other.HasGoldCollected) {
          GoldCollected = other.GoldCollected;
        }
        if (other.HasHighestLevel) {
          HighestLevel = other.HighestLevel;
        }
        if (other.HasDeprecatedHighestDifficulty) {
          DeprecatedHighestDifficulty = other.DeprecatedHighestDifficulty;
        }
        if (other.HasCreateTime) {
          CreateTime = other.CreateTime;
        }
        if (other.HasHardcore) {
          Hardcore = other.Hardcore;
        }
        if (other.HasStrength) {
          Strength = other.Strength;
        }
        if (other.HasDexterity) {
          Dexterity = other.Dexterity;
        }
        if (other.HasIntelligence) {
          Intelligence = other.Intelligence;
        }
        if (other.HasVitality) {
          Vitality = other.Vitality;
        }
        if (other.HasDeprecatedArmor) {
          DeprecatedArmor = other.DeprecatedArmor;
        }
        if (other.HasDps) {
          Dps = other.Dps;
        }
        if (other.HasResistArcane) {
          ResistArcane = other.ResistArcane;
        }
        if (other.HasResistFire) {
          ResistFire = other.ResistFire;
        }
        if (other.HasResistLightning) {
          ResistLightning = other.ResistLightning;
        }
        if (other.HasResistPoison) {
          ResistPoison = other.ResistPoison;
        }
        if (other.HasResistCold) {
          ResistCold = other.ResistCold;
        }
        if (other.HasEquipment) {
          MergeEquipment(other.Equipment);
        }
        if (other.HasSnoActiveSkills) {
          MergeSnoActiveSkills(other.SnoActiveSkills);
        }
        if (other.HasSnoTraits) {
          MergeSnoTraits(other.SnoTraits);
        }
        if (other.HasDeathTime) {
          DeathTime = other.DeathTime;
        }
        if (other.HasKillerInfo) {
          MergeKillerInfo(other.KillerInfo);
        }
        if (other.HasSnoKillLocation) {
          SnoKillLocation = other.SnoKillLocation;
        }
        if (other.HasHeroId) {
          MergeHeroId(other.HeroId);
        }
        if (other.HasDeprecatedDamageIncrease) {
          DeprecatedDamageIncrease = other.DeprecatedDamageIncrease;
        }
        if (other.HasDeprecatedCritChance) {
          DeprecatedCritChance = other.DeprecatedCritChance;
        }
        if (other.HasDeprecatedDamageReduction) {
          DeprecatedDamageReduction = other.DeprecatedDamageReduction;
        }
        if (other.HasDeprecatedLife) {
          DeprecatedLife = other.DeprecatedLife;
        }
        if (other.HasPvpGlory) {
          PvpGlory = other.PvpGlory;
        }
        if (other.HasPvpWins) {
          PvpWins = other.PvpWins;
        }
        if (other.HasPvpTakedowns) {
          PvpTakedowns = other.PvpTakedowns;
        }
        if (other.HasPvpDamage) {
          PvpDamage = other.PvpDamage;
        }
        if (other.HasToughness) {
          Toughness = other.Toughness;
        }
        if (other.HasHealing) {
          Healing = other.Healing;
        }
        if (other.HasLegendaryPowers) {
          MergeLegendaryPowers(other.LegendaryPowers);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heroProfileFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heroProfileFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMonstersKilled = input.ReadUInt64(ref result.monstersKilled_);
              break;
            }
            case 16: {
              result.hasElitesKilled = input.ReadUInt64(ref result.elitesKilled_);
              break;
            }
            case 24: {
              result.hasGoldCollected = input.ReadUInt64(ref result.goldCollected_);
              break;
            }
            case 32: {
              result.hasHighestLevel = input.ReadUInt32(ref result.highestLevel_);
              break;
            }
            case 40: {
              result.hasDeprecatedHighestDifficulty = input.ReadUInt32(ref result.deprecatedHighestDifficulty_);
              break;
            }
            case 48: {
              result.hasCreateTime = input.ReadUInt32(ref result.createTime_);
              break;
            }
            case 56: {
              result.hasHardcore = input.ReadBool(ref result.hardcore_);
              break;
            }
            case 64: {
              result.hasStrength = input.ReadUInt32(ref result.strength_);
              break;
            }
            case 72: {
              result.hasDexterity = input.ReadUInt32(ref result.dexterity_);
              break;
            }
            case 80: {
              result.hasIntelligence = input.ReadUInt32(ref result.intelligence_);
              break;
            }
            case 88: {
              result.hasVitality = input.ReadUInt32(ref result.vitality_);
              break;
            }
            case 96: {
              result.hasDeprecatedArmor = input.ReadUInt32(ref result.deprecatedArmor_);
              break;
            }
            case 109: {
              result.hasDps = input.ReadFloat(ref result.dps_);
              break;
            }
            case 112: {
              result.hasResistArcane = input.ReadUInt32(ref result.resistArcane_);
              break;
            }
            case 120: {
              result.hasResistFire = input.ReadUInt32(ref result.resistFire_);
              break;
            }
            case 128: {
              result.hasResistLightning = input.ReadUInt32(ref result.resistLightning_);
              break;
            }
            case 136: {
              result.hasResistPoison = input.ReadUInt32(ref result.resistPoison_);
              break;
            }
            case 144: {
              result.hasResistCold = input.ReadUInt32(ref result.resistCold_);
              break;
            }
            case 154: {
              global::D3.Items.ItemList.Builder subBuilder = global::D3.Items.ItemList.CreateBuilder();
              if (result.hasEquipment) {
                subBuilder.MergeFrom(Equipment);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Equipment = subBuilder.BuildPartial();
              break;
            }
            case 162: {
              global::D3.Profile.SkillsWithRunes.Builder subBuilder = global::D3.Profile.SkillsWithRunes.CreateBuilder();
              if (result.hasSnoActiveSkills) {
                subBuilder.MergeFrom(SnoActiveSkills);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SnoActiveSkills = subBuilder.BuildPartial();
              break;
            }
            case 170: {
              global::D3.Profile.PassiveSkills.Builder subBuilder = global::D3.Profile.PassiveSkills.CreateBuilder();
              if (result.hasSnoTraits) {
                subBuilder.MergeFrom(SnoTraits);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SnoTraits = subBuilder.BuildPartial();
              break;
            }
            case 176: {
              result.hasDeathTime = input.ReadUInt32(ref result.deathTime_);
              break;
            }
            case 186: {
              global::D3.Profile.KillerInfo.Builder subBuilder = global::D3.Profile.KillerInfo.CreateBuilder();
              if (result.hasKillerInfo) {
                subBuilder.MergeFrom(KillerInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              KillerInfo = subBuilder.BuildPartial();
              break;
            }
            case 192: {
              result.hasSnoKillLocation = input.ReadUInt32(ref result.snoKillLocation_);
              break;
            }
            case 218: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasHeroId) {
                subBuilder.MergeFrom(HeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroId = subBuilder.BuildPartial();
              break;
            }
            case 229: {
              result.hasDeprecatedDamageIncrease = input.ReadFloat(ref result.deprecatedDamageIncrease_);
              break;
            }
            case 237: {
              result.hasDeprecatedCritChance = input.ReadFloat(ref result.deprecatedCritChance_);
              break;
            }
            case 245: {
              result.hasDeprecatedDamageReduction = input.ReadFloat(ref result.deprecatedDamageReduction_);
              break;
            }
            case 248: {
              result.hasDeprecatedLife = input.ReadUInt32(ref result.deprecatedLife_);
              break;
            }
            case 280: {
              result.hasPvpGlory = input.ReadUInt32(ref result.pvpGlory_);
              break;
            }
            case 288: {
              result.hasPvpWins = input.ReadUInt32(ref result.pvpWins_);
              break;
            }
            case 296: {
              result.hasPvpTakedowns = input.ReadUInt32(ref result.pvpTakedowns_);
              break;
            }
            case 304: {
              result.hasPvpDamage = input.ReadUInt64(ref result.pvpDamage_);
              break;
            }
            case 317: {
              result.hasToughness = input.ReadFloat(ref result.toughness_);
              break;
            }
            case 325: {
              result.hasHealing = input.ReadFloat(ref result.healing_);
              break;
            }
            case 330: {
              global::D3.Profile.LegendaryPowers.Builder subBuilder = global::D3.Profile.LegendaryPowers.CreateBuilder();
              if (result.hasLegendaryPowers) {
                subBuilder.MergeFrom(LegendaryPowers);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LegendaryPowers = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMonstersKilled {
        get { return result.hasMonstersKilled; }
      }
      public ulong MonstersKilled {
        get { return result.MonstersKilled; }
        set { SetMonstersKilled(value); }
      }
      public Builder SetMonstersKilled(ulong value) {
        PrepareBuilder();
        result.hasMonstersKilled = true;
        result.monstersKilled_ = value;
        return this;
      }
      public Builder ClearMonstersKilled() {
        PrepareBuilder();
        result.hasMonstersKilled = false;
        result.monstersKilled_ = 0UL;
        return this;
      }
      
      public bool HasElitesKilled {
        get { return result.hasElitesKilled; }
      }
      public ulong ElitesKilled {
        get { return result.ElitesKilled; }
        set { SetElitesKilled(value); }
      }
      public Builder SetElitesKilled(ulong value) {
        PrepareBuilder();
        result.hasElitesKilled = true;
        result.elitesKilled_ = value;
        return this;
      }
      public Builder ClearElitesKilled() {
        PrepareBuilder();
        result.hasElitesKilled = false;
        result.elitesKilled_ = 0UL;
        return this;
      }
      
      public bool HasGoldCollected {
        get { return result.hasGoldCollected; }
      }
      public ulong GoldCollected {
        get { return result.GoldCollected; }
        set { SetGoldCollected(value); }
      }
      public Builder SetGoldCollected(ulong value) {
        PrepareBuilder();
        result.hasGoldCollected = true;
        result.goldCollected_ = value;
        return this;
      }
      public Builder ClearGoldCollected() {
        PrepareBuilder();
        result.hasGoldCollected = false;
        result.goldCollected_ = 0UL;
        return this;
      }
      
      public bool HasHighestLevel {
        get { return result.hasHighestLevel; }
      }
      public uint HighestLevel {
        get { return result.HighestLevel; }
        set { SetHighestLevel(value); }
      }
      public Builder SetHighestLevel(uint value) {
        PrepareBuilder();
        result.hasHighestLevel = true;
        result.highestLevel_ = value;
        return this;
      }
      public Builder ClearHighestLevel() {
        PrepareBuilder();
        result.hasHighestLevel = false;
        result.highestLevel_ = 0;
        return this;
      }
      
      public bool HasDeprecatedHighestDifficulty {
        get { return result.hasDeprecatedHighestDifficulty; }
      }
      public uint DeprecatedHighestDifficulty {
        get { return result.DeprecatedHighestDifficulty; }
        set { SetDeprecatedHighestDifficulty(value); }
      }
      public Builder SetDeprecatedHighestDifficulty(uint value) {
        PrepareBuilder();
        result.hasDeprecatedHighestDifficulty = true;
        result.deprecatedHighestDifficulty_ = value;
        return this;
      }
      public Builder ClearDeprecatedHighestDifficulty() {
        PrepareBuilder();
        result.hasDeprecatedHighestDifficulty = false;
        result.deprecatedHighestDifficulty_ = 0;
        return this;
      }
      
      public bool HasCreateTime {
        get { return result.hasCreateTime; }
      }
      public uint CreateTime {
        get { return result.CreateTime; }
        set { SetCreateTime(value); }
      }
      public Builder SetCreateTime(uint value) {
        PrepareBuilder();
        result.hasCreateTime = true;
        result.createTime_ = value;
        return this;
      }
      public Builder ClearCreateTime() {
        PrepareBuilder();
        result.hasCreateTime = false;
        result.createTime_ = 0;
        return this;
      }
      
      public bool HasHardcore {
        get { return result.hasHardcore; }
      }
      public bool Hardcore {
        get { return result.Hardcore; }
        set { SetHardcore(value); }
      }
      public Builder SetHardcore(bool value) {
        PrepareBuilder();
        result.hasHardcore = true;
        result.hardcore_ = value;
        return this;
      }
      public Builder ClearHardcore() {
        PrepareBuilder();
        result.hasHardcore = false;
        result.hardcore_ = false;
        return this;
      }
      
      public bool HasStrength {
        get { return result.hasStrength; }
      }
      public uint Strength {
        get { return result.Strength; }
        set { SetStrength(value); }
      }
      public Builder SetStrength(uint value) {
        PrepareBuilder();
        result.hasStrength = true;
        result.strength_ = value;
        return this;
      }
      public Builder ClearStrength() {
        PrepareBuilder();
        result.hasStrength = false;
        result.strength_ = 0;
        return this;
      }
      
      public bool HasDexterity {
        get { return result.hasDexterity; }
      }
      public uint Dexterity {
        get { return result.Dexterity; }
        set { SetDexterity(value); }
      }
      public Builder SetDexterity(uint value) {
        PrepareBuilder();
        result.hasDexterity = true;
        result.dexterity_ = value;
        return this;
      }
      public Builder ClearDexterity() {
        PrepareBuilder();
        result.hasDexterity = false;
        result.dexterity_ = 0;
        return this;
      }
      
      public bool HasIntelligence {
        get { return result.hasIntelligence; }
      }
      public uint Intelligence {
        get { return result.Intelligence; }
        set { SetIntelligence(value); }
      }
      public Builder SetIntelligence(uint value) {
        PrepareBuilder();
        result.hasIntelligence = true;
        result.intelligence_ = value;
        return this;
      }
      public Builder ClearIntelligence() {
        PrepareBuilder();
        result.hasIntelligence = false;
        result.intelligence_ = 0;
        return this;
      }
      
      public bool HasVitality {
        get { return result.hasVitality; }
      }
      public uint Vitality {
        get { return result.Vitality; }
        set { SetVitality(value); }
      }
      public Builder SetVitality(uint value) {
        PrepareBuilder();
        result.hasVitality = true;
        result.vitality_ = value;
        return this;
      }
      public Builder ClearVitality() {
        PrepareBuilder();
        result.hasVitality = false;
        result.vitality_ = 0;
        return this;
      }
      
      public bool HasDeprecatedArmor {
        get { return result.hasDeprecatedArmor; }
      }
      public uint DeprecatedArmor {
        get { return result.DeprecatedArmor; }
        set { SetDeprecatedArmor(value); }
      }
      public Builder SetDeprecatedArmor(uint value) {
        PrepareBuilder();
        result.hasDeprecatedArmor = true;
        result.deprecatedArmor_ = value;
        return this;
      }
      public Builder ClearDeprecatedArmor() {
        PrepareBuilder();
        result.hasDeprecatedArmor = false;
        result.deprecatedArmor_ = 0;
        return this;
      }
      
      public bool HasDps {
        get { return result.hasDps; }
      }
      public float Dps {
        get { return result.Dps; }
        set { SetDps(value); }
      }
      public Builder SetDps(float value) {
        PrepareBuilder();
        result.hasDps = true;
        result.dps_ = value;
        return this;
      }
      public Builder ClearDps() {
        PrepareBuilder();
        result.hasDps = false;
        result.dps_ = 0F;
        return this;
      }
      
      public bool HasResistArcane {
        get { return result.hasResistArcane; }
      }
      public uint ResistArcane {
        get { return result.ResistArcane; }
        set { SetResistArcane(value); }
      }
      public Builder SetResistArcane(uint value) {
        PrepareBuilder();
        result.hasResistArcane = true;
        result.resistArcane_ = value;
        return this;
      }
      public Builder ClearResistArcane() {
        PrepareBuilder();
        result.hasResistArcane = false;
        result.resistArcane_ = 0;
        return this;
      }
      
      public bool HasResistFire {
        get { return result.hasResistFire; }
      }
      public uint ResistFire {
        get { return result.ResistFire; }
        set { SetResistFire(value); }
      }
      public Builder SetResistFire(uint value) {
        PrepareBuilder();
        result.hasResistFire = true;
        result.resistFire_ = value;
        return this;
      }
      public Builder ClearResistFire() {
        PrepareBuilder();
        result.hasResistFire = false;
        result.resistFire_ = 0;
        return this;
      }
      
      public bool HasResistLightning {
        get { return result.hasResistLightning; }
      }
      public uint ResistLightning {
        get { return result.ResistLightning; }
        set { SetResistLightning(value); }
      }
      public Builder SetResistLightning(uint value) {
        PrepareBuilder();
        result.hasResistLightning = true;
        result.resistLightning_ = value;
        return this;
      }
      public Builder ClearResistLightning() {
        PrepareBuilder();
        result.hasResistLightning = false;
        result.resistLightning_ = 0;
        return this;
      }
      
      public bool HasResistPoison {
        get { return result.hasResistPoison; }
      }
      public uint ResistPoison {
        get { return result.ResistPoison; }
        set { SetResistPoison(value); }
      }
      public Builder SetResistPoison(uint value) {
        PrepareBuilder();
        result.hasResistPoison = true;
        result.resistPoison_ = value;
        return this;
      }
      public Builder ClearResistPoison() {
        PrepareBuilder();
        result.hasResistPoison = false;
        result.resistPoison_ = 0;
        return this;
      }
      
      public bool HasResistCold {
        get { return result.hasResistCold; }
      }
      public uint ResistCold {
        get { return result.ResistCold; }
        set { SetResistCold(value); }
      }
      public Builder SetResistCold(uint value) {
        PrepareBuilder();
        result.hasResistCold = true;
        result.resistCold_ = value;
        return this;
      }
      public Builder ClearResistCold() {
        PrepareBuilder();
        result.hasResistCold = false;
        result.resistCold_ = 0;
        return this;
      }
      
      public bool HasEquipment {
       get { return result.hasEquipment; }
      }
      public global::D3.Items.ItemList Equipment {
        get { return result.Equipment; }
        set { SetEquipment(value); }
      }
      public Builder SetEquipment(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEquipment = true;
        result.equipment_ = value;
        return this;
      }
      public Builder SetEquipment(global::D3.Items.ItemList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEquipment = true;
        result.equipment_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEquipment(global::D3.Items.ItemList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEquipment &&
            result.equipment_ != global::D3.Items.ItemList.DefaultInstance) {
            result.equipment_ = global::D3.Items.ItemList.CreateBuilder(result.equipment_).MergeFrom(value).BuildPartial();
        } else {
          result.equipment_ = value;
        }
        result.hasEquipment = true;
        return this;
      }
      public Builder ClearEquipment() {
        PrepareBuilder();
        result.hasEquipment = false;
        result.equipment_ = null;
        return this;
      }
      
      public bool HasSnoActiveSkills {
       get { return result.hasSnoActiveSkills; }
      }
      public global::D3.Profile.SkillsWithRunes SnoActiveSkills {
        get { return result.SnoActiveSkills; }
        set { SetSnoActiveSkills(value); }
      }
      public Builder SetSnoActiveSkills(global::D3.Profile.SkillsWithRunes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSnoActiveSkills = true;
        result.snoActiveSkills_ = value;
        return this;
      }
      public Builder SetSnoActiveSkills(global::D3.Profile.SkillsWithRunes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSnoActiveSkills = true;
        result.snoActiveSkills_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSnoActiveSkills(global::D3.Profile.SkillsWithRunes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSnoActiveSkills &&
            result.snoActiveSkills_ != global::D3.Profile.SkillsWithRunes.DefaultInstance) {
            result.snoActiveSkills_ = global::D3.Profile.SkillsWithRunes.CreateBuilder(result.snoActiveSkills_).MergeFrom(value).BuildPartial();
        } else {
          result.snoActiveSkills_ = value;
        }
        result.hasSnoActiveSkills = true;
        return this;
      }
      public Builder ClearSnoActiveSkills() {
        PrepareBuilder();
        result.hasSnoActiveSkills = false;
        result.snoActiveSkills_ = null;
        return this;
      }
      
      public bool HasSnoTraits {
       get { return result.hasSnoTraits; }
      }
      public global::D3.Profile.PassiveSkills SnoTraits {
        get { return result.SnoTraits; }
        set { SetSnoTraits(value); }
      }
      public Builder SetSnoTraits(global::D3.Profile.PassiveSkills value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSnoTraits = true;
        result.snoTraits_ = value;
        return this;
      }
      public Builder SetSnoTraits(global::D3.Profile.PassiveSkills.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSnoTraits = true;
        result.snoTraits_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSnoTraits(global::D3.Profile.PassiveSkills value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSnoTraits &&
            result.snoTraits_ != global::D3.Profile.PassiveSkills.DefaultInstance) {
            result.snoTraits_ = global::D3.Profile.PassiveSkills.CreateBuilder(result.snoTraits_).MergeFrom(value).BuildPartial();
        } else {
          result.snoTraits_ = value;
        }
        result.hasSnoTraits = true;
        return this;
      }
      public Builder ClearSnoTraits() {
        PrepareBuilder();
        result.hasSnoTraits = false;
        result.snoTraits_ = null;
        return this;
      }
      
      public bool HasDeathTime {
        get { return result.hasDeathTime; }
      }
      public uint DeathTime {
        get { return result.DeathTime; }
        set { SetDeathTime(value); }
      }
      public Builder SetDeathTime(uint value) {
        PrepareBuilder();
        result.hasDeathTime = true;
        result.deathTime_ = value;
        return this;
      }
      public Builder ClearDeathTime() {
        PrepareBuilder();
        result.hasDeathTime = false;
        result.deathTime_ = 0;
        return this;
      }
      
      public bool HasKillerInfo {
       get { return result.hasKillerInfo; }
      }
      public global::D3.Profile.KillerInfo KillerInfo {
        get { return result.KillerInfo; }
        set { SetKillerInfo(value); }
      }
      public Builder SetKillerInfo(global::D3.Profile.KillerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKillerInfo = true;
        result.killerInfo_ = value;
        return this;
      }
      public Builder SetKillerInfo(global::D3.Profile.KillerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasKillerInfo = true;
        result.killerInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeKillerInfo(global::D3.Profile.KillerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasKillerInfo &&
            result.killerInfo_ != global::D3.Profile.KillerInfo.DefaultInstance) {
            result.killerInfo_ = global::D3.Profile.KillerInfo.CreateBuilder(result.killerInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.killerInfo_ = value;
        }
        result.hasKillerInfo = true;
        return this;
      }
      public Builder ClearKillerInfo() {
        PrepareBuilder();
        result.hasKillerInfo = false;
        result.killerInfo_ = null;
        return this;
      }
      
      public bool HasSnoKillLocation {
        get { return result.hasSnoKillLocation; }
      }
      public uint SnoKillLocation {
        get { return result.SnoKillLocation; }
        set { SetSnoKillLocation(value); }
      }
      public Builder SetSnoKillLocation(uint value) {
        PrepareBuilder();
        result.hasSnoKillLocation = true;
        result.snoKillLocation_ = value;
        return this;
      }
      public Builder ClearSnoKillLocation() {
        PrepareBuilder();
        result.hasSnoKillLocation = false;
        result.snoKillLocation_ = 0;
        return this;
      }
      
      public bool HasHeroId {
       get { return result.hasHeroId; }
      }
      public global::D3.OnlineService.EntityId HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroId &&
            result.heroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.heroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.heroId_).MergeFrom(value).BuildPartial();
        } else {
          result.heroId_ = value;
        }
        result.hasHeroId = true;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = null;
        return this;
      }
      
      public bool HasDeprecatedDamageIncrease {
        get { return result.hasDeprecatedDamageIncrease; }
      }
      public float DeprecatedDamageIncrease {
        get { return result.DeprecatedDamageIncrease; }
        set { SetDeprecatedDamageIncrease(value); }
      }
      public Builder SetDeprecatedDamageIncrease(float value) {
        PrepareBuilder();
        result.hasDeprecatedDamageIncrease = true;
        result.deprecatedDamageIncrease_ = value;
        return this;
      }
      public Builder ClearDeprecatedDamageIncrease() {
        PrepareBuilder();
        result.hasDeprecatedDamageIncrease = false;
        result.deprecatedDamageIncrease_ = 0F;
        return this;
      }
      
      public bool HasDeprecatedCritChance {
        get { return result.hasDeprecatedCritChance; }
      }
      public float DeprecatedCritChance {
        get { return result.DeprecatedCritChance; }
        set { SetDeprecatedCritChance(value); }
      }
      public Builder SetDeprecatedCritChance(float value) {
        PrepareBuilder();
        result.hasDeprecatedCritChance = true;
        result.deprecatedCritChance_ = value;
        return this;
      }
      public Builder ClearDeprecatedCritChance() {
        PrepareBuilder();
        result.hasDeprecatedCritChance = false;
        result.deprecatedCritChance_ = 0F;
        return this;
      }
      
      public bool HasDeprecatedDamageReduction {
        get { return result.hasDeprecatedDamageReduction; }
      }
      public float DeprecatedDamageReduction {
        get { return result.DeprecatedDamageReduction; }
        set { SetDeprecatedDamageReduction(value); }
      }
      public Builder SetDeprecatedDamageReduction(float value) {
        PrepareBuilder();
        result.hasDeprecatedDamageReduction = true;
        result.deprecatedDamageReduction_ = value;
        return this;
      }
      public Builder ClearDeprecatedDamageReduction() {
        PrepareBuilder();
        result.hasDeprecatedDamageReduction = false;
        result.deprecatedDamageReduction_ = 0F;
        return this;
      }
      
      public bool HasDeprecatedLife {
        get { return result.hasDeprecatedLife; }
      }
      public uint DeprecatedLife {
        get { return result.DeprecatedLife; }
        set { SetDeprecatedLife(value); }
      }
      public Builder SetDeprecatedLife(uint value) {
        PrepareBuilder();
        result.hasDeprecatedLife = true;
        result.deprecatedLife_ = value;
        return this;
      }
      public Builder ClearDeprecatedLife() {
        PrepareBuilder();
        result.hasDeprecatedLife = false;
        result.deprecatedLife_ = 0;
        return this;
      }
      
      public bool HasPvpGlory {
        get { return result.hasPvpGlory; }
      }
      public uint PvpGlory {
        get { return result.PvpGlory; }
        set { SetPvpGlory(value); }
      }
      public Builder SetPvpGlory(uint value) {
        PrepareBuilder();
        result.hasPvpGlory = true;
        result.pvpGlory_ = value;
        return this;
      }
      public Builder ClearPvpGlory() {
        PrepareBuilder();
        result.hasPvpGlory = false;
        result.pvpGlory_ = 0;
        return this;
      }
      
      public bool HasPvpWins {
        get { return result.hasPvpWins; }
      }
      public uint PvpWins {
        get { return result.PvpWins; }
        set { SetPvpWins(value); }
      }
      public Builder SetPvpWins(uint value) {
        PrepareBuilder();
        result.hasPvpWins = true;
        result.pvpWins_ = value;
        return this;
      }
      public Builder ClearPvpWins() {
        PrepareBuilder();
        result.hasPvpWins = false;
        result.pvpWins_ = 0;
        return this;
      }
      
      public bool HasPvpTakedowns {
        get { return result.hasPvpTakedowns; }
      }
      public uint PvpTakedowns {
        get { return result.PvpTakedowns; }
        set { SetPvpTakedowns(value); }
      }
      public Builder SetPvpTakedowns(uint value) {
        PrepareBuilder();
        result.hasPvpTakedowns = true;
        result.pvpTakedowns_ = value;
        return this;
      }
      public Builder ClearPvpTakedowns() {
        PrepareBuilder();
        result.hasPvpTakedowns = false;
        result.pvpTakedowns_ = 0;
        return this;
      }
      
      public bool HasPvpDamage {
        get { return result.hasPvpDamage; }
      }
      public ulong PvpDamage {
        get { return result.PvpDamage; }
        set { SetPvpDamage(value); }
      }
      public Builder SetPvpDamage(ulong value) {
        PrepareBuilder();
        result.hasPvpDamage = true;
        result.pvpDamage_ = value;
        return this;
      }
      public Builder ClearPvpDamage() {
        PrepareBuilder();
        result.hasPvpDamage = false;
        result.pvpDamage_ = 0UL;
        return this;
      }
      
      public bool HasToughness {
        get { return result.hasToughness; }
      }
      public float Toughness {
        get { return result.Toughness; }
        set { SetToughness(value); }
      }
      public Builder SetToughness(float value) {
        PrepareBuilder();
        result.hasToughness = true;
        result.toughness_ = value;
        return this;
      }
      public Builder ClearToughness() {
        PrepareBuilder();
        result.hasToughness = false;
        result.toughness_ = 0F;
        return this;
      }
      
      public bool HasHealing {
        get { return result.hasHealing; }
      }
      public float Healing {
        get { return result.Healing; }
        set { SetHealing(value); }
      }
      public Builder SetHealing(float value) {
        PrepareBuilder();
        result.hasHealing = true;
        result.healing_ = value;
        return this;
      }
      public Builder ClearHealing() {
        PrepareBuilder();
        result.hasHealing = false;
        result.healing_ = 0F;
        return this;
      }
      
      public bool HasLegendaryPowers {
       get { return result.hasLegendaryPowers; }
      }
      public global::D3.Profile.LegendaryPowers LegendaryPowers {
        get { return result.LegendaryPowers; }
        set { SetLegendaryPowers(value); }
      }
      public Builder SetLegendaryPowers(global::D3.Profile.LegendaryPowers value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLegendaryPowers = true;
        result.legendaryPowers_ = value;
        return this;
      }
      public Builder SetLegendaryPowers(global::D3.Profile.LegendaryPowers.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLegendaryPowers = true;
        result.legendaryPowers_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLegendaryPowers(global::D3.Profile.LegendaryPowers value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLegendaryPowers &&
            result.legendaryPowers_ != global::D3.Profile.LegendaryPowers.DefaultInstance) {
            result.legendaryPowers_ = global::D3.Profile.LegendaryPowers.CreateBuilder(result.legendaryPowers_).MergeFrom(value).BuildPartial();
        } else {
          result.legendaryPowers_ = value;
        }
        result.hasLegendaryPowers = true;
        return this;
      }
      public Builder ClearLegendaryPowers() {
        PrepareBuilder();
        result.hasLegendaryPowers = false;
        result.legendaryPowers_ = null;
        return this;
      }
    }
    static HeroProfile() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeroProfileList : pb::GeneratedMessage<HeroProfileList, HeroProfileList.Builder> {
    private HeroProfileList() { }
    private static readonly HeroProfileList defaultInstance = new HeroProfileList().MakeReadOnly();
    private static readonly string[] _heroProfileListFieldNames = new string[] { "heros" };
    private static readonly uint[] _heroProfileListFieldTags = new uint[] { 10 };
    public static HeroProfileList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroProfileList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeroProfileList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_HeroProfileList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroProfileList, HeroProfileList.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_HeroProfileList__FieldAccessorTable; }
    }
    
    public const int HerosFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Profile.HeroProfile> heros_ = new pbc::PopsicleList<global::D3.Profile.HeroProfile>();
    public scg::IList<global::D3.Profile.HeroProfile> HerosList {
      get { return heros_; }
    }
    public int HerosCount {
      get { return heros_.Count; }
    }
    public global::D3.Profile.HeroProfile GetHeros(int index) {
      return heros_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Profile.HeroProfile element in HerosList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _heroProfileListFieldNames;
      if (heros_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], heros_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Profile.HeroProfile element in HerosList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroProfileList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroProfileList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroProfileList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroProfileList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroProfileList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroProfileList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroProfileList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroProfileList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroProfileList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroProfileList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeroProfileList MakeReadOnly() {
      heros_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroProfileList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HeroProfileList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeroProfileList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeroProfileList result;
      
      private HeroProfileList PrepareBuilder() {
        if (resultIsReadOnly) {
          HeroProfileList original = result;
          result = new HeroProfileList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeroProfileList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.HeroProfileList.Descriptor; }
      }
      
      public override HeroProfileList DefaultInstanceForType {
        get { return global::D3.Profile.HeroProfileList.DefaultInstance; }
      }
      
      public override HeroProfileList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroProfileList) {
          return MergeFrom((HeroProfileList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroProfileList other) {
        if (other == global::D3.Profile.HeroProfileList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.heros_.Count != 0) {
          result.heros_.Add(other.heros_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heroProfileListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heroProfileListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.heros_, global::D3.Profile.HeroProfile.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Profile.HeroProfile> HerosList {
        get { return PrepareBuilder().heros_; }
      }
      public int HerosCount {
        get { return result.HerosCount; }
      }
      public global::D3.Profile.HeroProfile GetHeros(int index) {
        return result.GetHeros(index);
      }
      public Builder SetHeros(int index, global::D3.Profile.HeroProfile value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.heros_[index] = value;
        return this;
      }
      public Builder SetHeros(int index, global::D3.Profile.HeroProfile.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.heros_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddHeros(global::D3.Profile.HeroProfile value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.heros_.Add(value);
        return this;
      }
      public Builder AddHeros(global::D3.Profile.HeroProfile.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.heros_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeHeros(scg::IEnumerable<global::D3.Profile.HeroProfile> values) {
        PrepareBuilder();
        result.heros_.Add(values);
        return this;
      }
      public Builder ClearHeros() {
        PrepareBuilder();
        result.heros_.Clear();
        return this;
      }
    }
    static HeroProfileList() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HeroMiniProfile : pb::GeneratedMessage<HeroMiniProfile, HeroMiniProfile.Builder> {
    private HeroMiniProfile() { }
    private static readonly HeroMiniProfile defaultInstance = new HeroMiniProfile().MakeReadOnly();
    private static readonly string[] _heroMiniProfileFieldNames = new string[] { "hero_flags", "hero_gbid_class", "hero_id", "hero_level", "hero_name", "hero_visual_equipment" };
    private static readonly uint[] _heroMiniProfileFieldTags = new uint[] { 32, 29, 8, 40, 18, 50 };
    public static HeroMiniProfile DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HeroMiniProfile DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HeroMiniProfile ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_HeroMiniProfile__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HeroMiniProfile, HeroMiniProfile.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_HeroMiniProfile__FieldAccessorTable; }
    }
    
    public const int HeroIdFieldNumber = 1;
    private bool hasHeroId;
    private uint heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public uint HeroId {
      get { return heroId_; }
    }
    
    public const int HeroNameFieldNumber = 2;
    private bool hasHeroName;
    private string heroName_ = "";
    public bool HasHeroName {
      get { return hasHeroName; }
    }
    public string HeroName {
      get { return heroName_; }
    }
    
    public const int HeroGbidClassFieldNumber = 3;
    private bool hasHeroGbidClass;
    private int heroGbidClass_;
    public bool HasHeroGbidClass {
      get { return hasHeroGbidClass; }
    }
    public int HeroGbidClass {
      get { return heroGbidClass_; }
    }
    
    public const int HeroFlagsFieldNumber = 4;
    private bool hasHeroFlags;
    private uint heroFlags_;
    public bool HasHeroFlags {
      get { return hasHeroFlags; }
    }
    public uint HeroFlags {
      get { return heroFlags_; }
    }
    
    public const int HeroLevelFieldNumber = 5;
    private bool hasHeroLevel;
    private uint heroLevel_;
    public bool HasHeroLevel {
      get { return hasHeroLevel; }
    }
    public uint HeroLevel {
      get { return heroLevel_; }
    }
    
    public const int HeroVisualEquipmentFieldNumber = 6;
    private bool hasHeroVisualEquipment;
    private global::D3.Hero.VisualEquipment heroVisualEquipment_;
    public bool HasHeroVisualEquipment {
      get { return hasHeroVisualEquipment; }
    }
    public global::D3.Hero.VisualEquipment HeroVisualEquipment {
      get { return heroVisualEquipment_ ?? global::D3.Hero.VisualEquipment.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroId) return false;
        if (!hasHeroName) return false;
        if (!hasHeroGbidClass) return false;
        if (!hasHeroFlags) return false;
        if (!hasHeroLevel) return false;
        if (!hasHeroVisualEquipment) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _heroMiniProfileFieldNames;
      if (hasHeroId) {
        output.WriteUInt32(1, field_names[2], HeroId);
      }
      if (hasHeroName) {
        output.WriteString(2, field_names[4], HeroName);
      }
      if (hasHeroGbidClass) {
        output.WriteSFixed32(3, field_names[1], HeroGbidClass);
      }
      if (hasHeroFlags) {
        output.WriteUInt32(4, field_names[0], HeroFlags);
      }
      if (hasHeroLevel) {
        output.WriteUInt32(5, field_names[3], HeroLevel);
      }
      if (hasHeroVisualEquipment) {
        output.WriteMessage(6, field_names[5], HeroVisualEquipment);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, HeroId);
        }
        if (hasHeroName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, HeroName);
        }
        if (hasHeroGbidClass) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(3, HeroGbidClass);
        }
        if (hasHeroFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, HeroFlags);
        }
        if (hasHeroLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, HeroLevel);
        }
        if (hasHeroVisualEquipment) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, HeroVisualEquipment);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HeroMiniProfile ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroMiniProfile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroMiniProfile ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HeroMiniProfile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HeroMiniProfile ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroMiniProfile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HeroMiniProfile ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HeroMiniProfile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HeroMiniProfile ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HeroMiniProfile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HeroMiniProfile MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HeroMiniProfile prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HeroMiniProfile, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HeroMiniProfile cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HeroMiniProfile result;
      
      private HeroMiniProfile PrepareBuilder() {
        if (resultIsReadOnly) {
          HeroMiniProfile original = result;
          result = new HeroMiniProfile();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HeroMiniProfile MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.HeroMiniProfile.Descriptor; }
      }
      
      public override HeroMiniProfile DefaultInstanceForType {
        get { return global::D3.Profile.HeroMiniProfile.DefaultInstance; }
      }
      
      public override HeroMiniProfile BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HeroMiniProfile) {
          return MergeFrom((HeroMiniProfile) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HeroMiniProfile other) {
        if (other == global::D3.Profile.HeroMiniProfile.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        if (other.HasHeroName) {
          HeroName = other.HeroName;
        }
        if (other.HasHeroGbidClass) {
          HeroGbidClass = other.HeroGbidClass;
        }
        if (other.HasHeroFlags) {
          HeroFlags = other.HeroFlags;
        }
        if (other.HasHeroLevel) {
          HeroLevel = other.HeroLevel;
        }
        if (other.HasHeroVisualEquipment) {
          MergeHeroVisualEquipment(other.HeroVisualEquipment);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_heroMiniProfileFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _heroMiniProfileFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHeroId = input.ReadUInt32(ref result.heroId_);
              break;
            }
            case 18: {
              result.hasHeroName = input.ReadString(ref result.heroName_);
              break;
            }
            case 29: {
              result.hasHeroGbidClass = input.ReadSFixed32(ref result.heroGbidClass_);
              break;
            }
            case 32: {
              result.hasHeroFlags = input.ReadUInt32(ref result.heroFlags_);
              break;
            }
            case 40: {
              result.hasHeroLevel = input.ReadUInt32(ref result.heroLevel_);
              break;
            }
            case 50: {
              global::D3.Hero.VisualEquipment.Builder subBuilder = global::D3.Hero.VisualEquipment.CreateBuilder();
              if (result.hasHeroVisualEquipment) {
                subBuilder.MergeFrom(HeroVisualEquipment);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroVisualEquipment = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public uint HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(uint value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0;
        return this;
      }
      
      public bool HasHeroName {
        get { return result.hasHeroName; }
      }
      public string HeroName {
        get { return result.HeroName; }
        set { SetHeroName(value); }
      }
      public Builder SetHeroName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroName = true;
        result.heroName_ = value;
        return this;
      }
      public Builder ClearHeroName() {
        PrepareBuilder();
        result.hasHeroName = false;
        result.heroName_ = "";
        return this;
      }
      
      public bool HasHeroGbidClass {
        get { return result.hasHeroGbidClass; }
      }
      public int HeroGbidClass {
        get { return result.HeroGbidClass; }
        set { SetHeroGbidClass(value); }
      }
      public Builder SetHeroGbidClass(int value) {
        PrepareBuilder();
        result.hasHeroGbidClass = true;
        result.heroGbidClass_ = value;
        return this;
      }
      public Builder ClearHeroGbidClass() {
        PrepareBuilder();
        result.hasHeroGbidClass = false;
        result.heroGbidClass_ = 0;
        return this;
      }
      
      public bool HasHeroFlags {
        get { return result.hasHeroFlags; }
      }
      public uint HeroFlags {
        get { return result.HeroFlags; }
        set { SetHeroFlags(value); }
      }
      public Builder SetHeroFlags(uint value) {
        PrepareBuilder();
        result.hasHeroFlags = true;
        result.heroFlags_ = value;
        return this;
      }
      public Builder ClearHeroFlags() {
        PrepareBuilder();
        result.hasHeroFlags = false;
        result.heroFlags_ = 0;
        return this;
      }
      
      public bool HasHeroLevel {
        get { return result.hasHeroLevel; }
      }
      public uint HeroLevel {
        get { return result.HeroLevel; }
        set { SetHeroLevel(value); }
      }
      public Builder SetHeroLevel(uint value) {
        PrepareBuilder();
        result.hasHeroLevel = true;
        result.heroLevel_ = value;
        return this;
      }
      public Builder ClearHeroLevel() {
        PrepareBuilder();
        result.hasHeroLevel = false;
        result.heroLevel_ = 0;
        return this;
      }
      
      public bool HasHeroVisualEquipment {
       get { return result.hasHeroVisualEquipment; }
      }
      public global::D3.Hero.VisualEquipment HeroVisualEquipment {
        get { return result.HeroVisualEquipment; }
        set { SetHeroVisualEquipment(value); }
      }
      public Builder SetHeroVisualEquipment(global::D3.Hero.VisualEquipment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroVisualEquipment = true;
        result.heroVisualEquipment_ = value;
        return this;
      }
      public Builder SetHeroVisualEquipment(global::D3.Hero.VisualEquipment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroVisualEquipment = true;
        result.heroVisualEquipment_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroVisualEquipment(global::D3.Hero.VisualEquipment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroVisualEquipment &&
            result.heroVisualEquipment_ != global::D3.Hero.VisualEquipment.DefaultInstance) {
            result.heroVisualEquipment_ = global::D3.Hero.VisualEquipment.CreateBuilder(result.heroVisualEquipment_).MergeFrom(value).BuildPartial();
        } else {
          result.heroVisualEquipment_ = value;
        }
        result.hasHeroVisualEquipment = true;
        return this;
      }
      public Builder ClearHeroVisualEquipment() {
        PrepareBuilder();
        result.hasHeroVisualEquipment = false;
        result.heroVisualEquipment_ = null;
        return this;
      }
    }
    static HeroMiniProfile() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AccountProfile : pb::GeneratedMessage<AccountProfile, AccountProfile.Builder> {
    private AccountProfile() { }
    private static readonly AccountProfile defaultInstance = new AccountProfile().MakeReadOnly();
    private static readonly string[] _accountProfileFieldNames = new string[] { "blood_shards_collected", "bounties_completed", "class_barbarian", "class_crusader", "class_demonhunter", "class_monk", "class_necromancer", "class_witchdoctor", "class_wizard", "deleted_heroes", "deprecated_best_ladder_paragon_level", "deprecated_highest_difficulty", "elites_killed", "gold_collected", "hardcore_monsters_killed", "heroes", "highest_boss_difficulty_1", "highest_boss_difficulty_2", "highest_boss_difficulty_3", "highest_boss_difficulty_4", "highest_boss_difficulty_5", "highest_hardcore_level", "highest_level", "leaderboard_eras_with_scores", "loot_runs_completed", "monsters_killed", "num_fallen_heroes", "paragon_level", "paragon_level_hardcore", "paragon_xp_next", "paragon_xp_next_hardcore", "pvp_damage", "pvp_takedowns", "pvp_wins", "season_id", "season_journey_rank", "seasons" };
    private static readonly uint[] _accountProfileFieldTags = new uint[] { 256, 232, 90, 130, 98, 106, 138, 114, 122, 304, 184, 8, 56, 64, 80, 274, 16, 24, 32, 40, 176, 72, 248, 280, 240, 48, 288, 192, 216, 200, 224, 160, 152, 144, 168, 296, 208 };
    public static AccountProfile DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AccountProfile DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AccountProfile ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_AccountProfile__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AccountProfile, AccountProfile.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_AccountProfile__FieldAccessorTable; }
    }
    
    public const int DeprecatedHighestDifficultyFieldNumber = 1;
    private bool hasDeprecatedHighestDifficulty;
    private uint deprecatedHighestDifficulty_;
    public bool HasDeprecatedHighestDifficulty {
      get { return hasDeprecatedHighestDifficulty; }
    }
    public uint DeprecatedHighestDifficulty {
      get { return deprecatedHighestDifficulty_; }
    }
    
    public const int HighestBossDifficulty1FieldNumber = 2;
    private bool hasHighestBossDifficulty1;
    private uint highestBossDifficulty1_;
    public bool HasHighestBossDifficulty1 {
      get { return hasHighestBossDifficulty1; }
    }
    public uint HighestBossDifficulty1 {
      get { return highestBossDifficulty1_; }
    }
    
    public const int HighestBossDifficulty2FieldNumber = 3;
    private bool hasHighestBossDifficulty2;
    private uint highestBossDifficulty2_;
    public bool HasHighestBossDifficulty2 {
      get { return hasHighestBossDifficulty2; }
    }
    public uint HighestBossDifficulty2 {
      get { return highestBossDifficulty2_; }
    }
    
    public const int HighestBossDifficulty3FieldNumber = 4;
    private bool hasHighestBossDifficulty3;
    private uint highestBossDifficulty3_;
    public bool HasHighestBossDifficulty3 {
      get { return hasHighestBossDifficulty3; }
    }
    public uint HighestBossDifficulty3 {
      get { return highestBossDifficulty3_; }
    }
    
    public const int HighestBossDifficulty4FieldNumber = 5;
    private bool hasHighestBossDifficulty4;
    private uint highestBossDifficulty4_;
    public bool HasHighestBossDifficulty4 {
      get { return hasHighestBossDifficulty4; }
    }
    public uint HighestBossDifficulty4 {
      get { return highestBossDifficulty4_; }
    }
    
    public const int MonstersKilledFieldNumber = 6;
    private bool hasMonstersKilled;
    private ulong monstersKilled_;
    public bool HasMonstersKilled {
      get { return hasMonstersKilled; }
    }
    public ulong MonstersKilled {
      get { return monstersKilled_; }
    }
    
    public const int ElitesKilledFieldNumber = 7;
    private bool hasElitesKilled;
    private ulong elitesKilled_;
    public bool HasElitesKilled {
      get { return hasElitesKilled; }
    }
    public ulong ElitesKilled {
      get { return elitesKilled_; }
    }
    
    public const int GoldCollectedFieldNumber = 8;
    private bool hasGoldCollected;
    private ulong goldCollected_;
    public bool HasGoldCollected {
      get { return hasGoldCollected; }
    }
    public ulong GoldCollected {
      get { return goldCollected_; }
    }
    
    public const int HighestHardcoreLevelFieldNumber = 9;
    private bool hasHighestHardcoreLevel;
    private ulong highestHardcoreLevel_;
    public bool HasHighestHardcoreLevel {
      get { return hasHighestHardcoreLevel; }
    }
    public ulong HighestHardcoreLevel {
      get { return highestHardcoreLevel_; }
    }
    
    public const int HardcoreMonstersKilledFieldNumber = 10;
    private bool hasHardcoreMonstersKilled;
    private ulong hardcoreMonstersKilled_;
    public bool HasHardcoreMonstersKilled {
      get { return hasHardcoreMonstersKilled; }
    }
    public ulong HardcoreMonstersKilled {
      get { return hardcoreMonstersKilled_; }
    }
    
    public const int ClassBarbarianFieldNumber = 11;
    private bool hasClassBarbarian;
    private global::D3.Profile.ClassInfo classBarbarian_;
    public bool HasClassBarbarian {
      get { return hasClassBarbarian; }
    }
    public global::D3.Profile.ClassInfo ClassBarbarian {
      get { return classBarbarian_ ?? global::D3.Profile.ClassInfo.DefaultInstance; }
    }
    
    public const int ClassDemonhunterFieldNumber = 12;
    private bool hasClassDemonhunter;
    private global::D3.Profile.ClassInfo classDemonhunter_;
    public bool HasClassDemonhunter {
      get { return hasClassDemonhunter; }
    }
    public global::D3.Profile.ClassInfo ClassDemonhunter {
      get { return classDemonhunter_ ?? global::D3.Profile.ClassInfo.DefaultInstance; }
    }
    
    public const int ClassMonkFieldNumber = 13;
    private bool hasClassMonk;
    private global::D3.Profile.ClassInfo classMonk_;
    public bool HasClassMonk {
      get { return hasClassMonk; }
    }
    public global::D3.Profile.ClassInfo ClassMonk {
      get { return classMonk_ ?? global::D3.Profile.ClassInfo.DefaultInstance; }
    }
    
    public const int ClassWitchdoctorFieldNumber = 14;
    private bool hasClassWitchdoctor;
    private global::D3.Profile.ClassInfo classWitchdoctor_;
    public bool HasClassWitchdoctor {
      get { return hasClassWitchdoctor; }
    }
    public global::D3.Profile.ClassInfo ClassWitchdoctor {
      get { return classWitchdoctor_ ?? global::D3.Profile.ClassInfo.DefaultInstance; }
    }
    
    public const int ClassWizardFieldNumber = 15;
    private bool hasClassWizard;
    private global::D3.Profile.ClassInfo classWizard_;
    public bool HasClassWizard {
      get { return hasClassWizard; }
    }
    public global::D3.Profile.ClassInfo ClassWizard {
      get { return classWizard_ ?? global::D3.Profile.ClassInfo.DefaultInstance; }
    }
    
    public const int ClassCrusaderFieldNumber = 16;
    private bool hasClassCrusader;
    private global::D3.Profile.ClassInfo classCrusader_;
    public bool HasClassCrusader {
      get { return hasClassCrusader; }
    }
    public global::D3.Profile.ClassInfo ClassCrusader {
      get { return classCrusader_ ?? global::D3.Profile.ClassInfo.DefaultInstance; }
    }
    
    public const int ClassNecromancerFieldNumber = 17;
    private bool hasClassNecromancer;
    private global::D3.Profile.ClassInfo classNecromancer_;
    public bool HasClassNecromancer {
      get { return hasClassNecromancer; }
    }
    public global::D3.Profile.ClassInfo ClassNecromancer {
      get { return classNecromancer_ ?? global::D3.Profile.ClassInfo.DefaultInstance; }
    }
    
    public const int PvpWinsFieldNumber = 18;
    private bool hasPvpWins;
    private uint pvpWins_;
    public bool HasPvpWins {
      get { return hasPvpWins; }
    }
    public uint PvpWins {
      get { return pvpWins_; }
    }
    
    public const int PvpTakedownsFieldNumber = 19;
    private bool hasPvpTakedowns;
    private uint pvpTakedowns_;
    public bool HasPvpTakedowns {
      get { return hasPvpTakedowns; }
    }
    public uint PvpTakedowns {
      get { return pvpTakedowns_; }
    }
    
    public const int PvpDamageFieldNumber = 20;
    private bool hasPvpDamage;
    private ulong pvpDamage_;
    public bool HasPvpDamage {
      get { return hasPvpDamage; }
    }
    public ulong PvpDamage {
      get { return pvpDamage_; }
    }
    
    public const int SeasonIdFieldNumber = 21;
    private bool hasSeasonId;
    private uint seasonId_;
    public bool HasSeasonId {
      get { return hasSeasonId; }
    }
    public uint SeasonId {
      get { return seasonId_; }
    }
    
    public const int HighestBossDifficulty5FieldNumber = 22;
    private bool hasHighestBossDifficulty5;
    private uint highestBossDifficulty5_;
    public bool HasHighestBossDifficulty5 {
      get { return hasHighestBossDifficulty5; }
    }
    public uint HighestBossDifficulty5 {
      get { return highestBossDifficulty5_; }
    }
    
    public const int DeprecatedBestLadderParagonLevelFieldNumber = 23;
    private bool hasDeprecatedBestLadderParagonLevel;
    private uint deprecatedBestLadderParagonLevel_;
    public bool HasDeprecatedBestLadderParagonLevel {
      get { return hasDeprecatedBestLadderParagonLevel; }
    }
    public uint DeprecatedBestLadderParagonLevel {
      get { return deprecatedBestLadderParagonLevel_; }
    }
    
    public const int ParagonLevelFieldNumber = 24;
    private bool hasParagonLevel;
    private uint paragonLevel_;
    public bool HasParagonLevel {
      get { return hasParagonLevel; }
    }
    public uint ParagonLevel {
      get { return paragonLevel_; }
    }
    
    public const int ParagonXpNextFieldNumber = 25;
    private bool hasParagonXpNext;
    private ulong paragonXpNext_;
    public bool HasParagonXpNext {
      get { return hasParagonXpNext; }
    }
    public ulong ParagonXpNext {
      get { return paragonXpNext_; }
    }
    
    public const int SeasonsFieldNumber = 26;
    private pbc::PopsicleList<uint> seasons_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> SeasonsList {
      get { return pbc::Lists.AsReadOnly(seasons_); }
    }
    public int SeasonsCount {
      get { return seasons_.Count; }
    }
    public uint GetSeasons(int index) {
      return seasons_[index];
    }
    
    public const int ParagonLevelHardcoreFieldNumber = 27;
    private bool hasParagonLevelHardcore;
    private uint paragonLevelHardcore_;
    public bool HasParagonLevelHardcore {
      get { return hasParagonLevelHardcore; }
    }
    public uint ParagonLevelHardcore {
      get { return paragonLevelHardcore_; }
    }
    
    public const int ParagonXpNextHardcoreFieldNumber = 28;
    private bool hasParagonXpNextHardcore;
    private ulong paragonXpNextHardcore_;
    public bool HasParagonXpNextHardcore {
      get { return hasParagonXpNextHardcore; }
    }
    public ulong ParagonXpNextHardcore {
      get { return paragonXpNextHardcore_; }
    }
    
    public const int BountiesCompletedFieldNumber = 29;
    private bool hasBountiesCompleted;
    private uint bountiesCompleted_;
    public bool HasBountiesCompleted {
      get { return hasBountiesCompleted; }
    }
    public uint BountiesCompleted {
      get { return bountiesCompleted_; }
    }
    
    public const int LootRunsCompletedFieldNumber = 30;
    private bool hasLootRunsCompleted;
    private uint lootRunsCompleted_;
    public bool HasLootRunsCompleted {
      get { return hasLootRunsCompleted; }
    }
    public uint LootRunsCompleted {
      get { return lootRunsCompleted_; }
    }
    
    public const int HighestLevelFieldNumber = 31;
    private bool hasHighestLevel;
    private ulong highestLevel_;
    public bool HasHighestLevel {
      get { return hasHighestLevel; }
    }
    public ulong HighestLevel {
      get { return highestLevel_; }
    }
    
    public const int BloodShardsCollectedFieldNumber = 32;
    private bool hasBloodShardsCollected;
    private ulong bloodShardsCollected_;
    public bool HasBloodShardsCollected {
      get { return hasBloodShardsCollected; }
    }
    public ulong BloodShardsCollected {
      get { return bloodShardsCollected_; }
    }
    
    public const int HeroesFieldNumber = 34;
    private pbc::PopsicleList<global::D3.Profile.HeroMiniProfile> heroes_ = new pbc::PopsicleList<global::D3.Profile.HeroMiniProfile>();
    public scg::IList<global::D3.Profile.HeroMiniProfile> HeroesList {
      get { return heroes_; }
    }
    public int HeroesCount {
      get { return heroes_.Count; }
    }
    public global::D3.Profile.HeroMiniProfile GetHeroes(int index) {
      return heroes_[index];
    }
    
    public const int LeaderboardErasWithScoresFieldNumber = 35;
    private pbc::PopsicleList<uint> leaderboardErasWithScores_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> LeaderboardErasWithScoresList {
      get { return pbc::Lists.AsReadOnly(leaderboardErasWithScores_); }
    }
    public int LeaderboardErasWithScoresCount {
      get { return leaderboardErasWithScores_.Count; }
    }
    public uint GetLeaderboardErasWithScores(int index) {
      return leaderboardErasWithScores_[index];
    }
    
    public const int NumFallenHeroesFieldNumber = 36;
    private bool hasNumFallenHeroes;
    private uint numFallenHeroes_;
    public bool HasNumFallenHeroes {
      get { return hasNumFallenHeroes; }
    }
    public uint NumFallenHeroes {
      get { return numFallenHeroes_; }
    }
    
    public const int SeasonJourneyRankFieldNumber = 37;
    private bool hasSeasonJourneyRank;
    private ulong seasonJourneyRank_;
    public bool HasSeasonJourneyRank {
      get { return hasSeasonJourneyRank; }
    }
    public ulong SeasonJourneyRank {
      get { return seasonJourneyRank_; }
    }
    
    public const int DeletedHeroesFieldNumber = 38;
    private pbc::PopsicleList<uint> deletedHeroes_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> DeletedHeroesList {
      get { return pbc::Lists.AsReadOnly(deletedHeroes_); }
    }
    public int DeletedHeroesCount {
      get { return deletedHeroes_.Count; }
    }
    public uint GetDeletedHeroes(int index) {
      return deletedHeroes_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Profile.HeroMiniProfile element in HeroesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _accountProfileFieldNames;
      if (hasDeprecatedHighestDifficulty) {
        output.WriteUInt32(1, field_names[11], DeprecatedHighestDifficulty);
      }
      if (hasHighestBossDifficulty1) {
        output.WriteUInt32(2, field_names[16], HighestBossDifficulty1);
      }
      if (hasHighestBossDifficulty2) {
        output.WriteUInt32(3, field_names[17], HighestBossDifficulty2);
      }
      if (hasHighestBossDifficulty3) {
        output.WriteUInt32(4, field_names[18], HighestBossDifficulty3);
      }
      if (hasHighestBossDifficulty4) {
        output.WriteUInt32(5, field_names[19], HighestBossDifficulty4);
      }
      if (hasMonstersKilled) {
        output.WriteUInt64(6, field_names[25], MonstersKilled);
      }
      if (hasElitesKilled) {
        output.WriteUInt64(7, field_names[12], ElitesKilled);
      }
      if (hasGoldCollected) {
        output.WriteUInt64(8, field_names[13], GoldCollected);
      }
      if (hasHighestHardcoreLevel) {
        output.WriteUInt64(9, field_names[21], HighestHardcoreLevel);
      }
      if (hasHardcoreMonstersKilled) {
        output.WriteUInt64(10, field_names[14], HardcoreMonstersKilled);
      }
      if (hasClassBarbarian) {
        output.WriteMessage(11, field_names[2], ClassBarbarian);
      }
      if (hasClassDemonhunter) {
        output.WriteMessage(12, field_names[4], ClassDemonhunter);
      }
      if (hasClassMonk) {
        output.WriteMessage(13, field_names[5], ClassMonk);
      }
      if (hasClassWitchdoctor) {
        output.WriteMessage(14, field_names[7], ClassWitchdoctor);
      }
      if (hasClassWizard) {
        output.WriteMessage(15, field_names[8], ClassWizard);
      }
      if (hasClassCrusader) {
        output.WriteMessage(16, field_names[3], ClassCrusader);
      }
      if (hasClassNecromancer) {
        output.WriteMessage(17, field_names[6], ClassNecromancer);
      }
      if (hasPvpWins) {
        output.WriteUInt32(18, field_names[33], PvpWins);
      }
      if (hasPvpTakedowns) {
        output.WriteUInt32(19, field_names[32], PvpTakedowns);
      }
      if (hasPvpDamage) {
        output.WriteUInt64(20, field_names[31], PvpDamage);
      }
      if (hasSeasonId) {
        output.WriteUInt32(21, field_names[34], SeasonId);
      }
      if (hasHighestBossDifficulty5) {
        output.WriteUInt32(22, field_names[20], HighestBossDifficulty5);
      }
      if (hasDeprecatedBestLadderParagonLevel) {
        output.WriteUInt32(23, field_names[10], DeprecatedBestLadderParagonLevel);
      }
      if (hasParagonLevel) {
        output.WriteUInt32(24, field_names[27], ParagonLevel);
      }
      if (hasParagonXpNext) {
        output.WriteUInt64(25, field_names[29], ParagonXpNext);
      }
      if (seasons_.Count > 0) {
        output.WriteUInt32Array(26, field_names[36], seasons_);
      }
      if (hasParagonLevelHardcore) {
        output.WriteUInt32(27, field_names[28], ParagonLevelHardcore);
      }
      if (hasParagonXpNextHardcore) {
        output.WriteUInt64(28, field_names[30], ParagonXpNextHardcore);
      }
      if (hasBountiesCompleted) {
        output.WriteUInt32(29, field_names[1], BountiesCompleted);
      }
      if (hasLootRunsCompleted) {
        output.WriteUInt32(30, field_names[24], LootRunsCompleted);
      }
      if (hasHighestLevel) {
        output.WriteUInt64(31, field_names[22], HighestLevel);
      }
      if (hasBloodShardsCollected) {
        output.WriteUInt64(32, field_names[0], BloodShardsCollected);
      }
      if (heroes_.Count > 0) {
        output.WriteMessageArray(34, field_names[15], heroes_);
      }
      if (leaderboardErasWithScores_.Count > 0) {
        output.WriteUInt32Array(35, field_names[23], leaderboardErasWithScores_);
      }
      if (hasNumFallenHeroes) {
        output.WriteUInt32(36, field_names[26], NumFallenHeroes);
      }
      if (hasSeasonJourneyRank) {
        output.WriteUInt64(37, field_names[35], SeasonJourneyRank);
      }
      if (deletedHeroes_.Count > 0) {
        output.WriteUInt32Array(38, field_names[9], deletedHeroes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDeprecatedHighestDifficulty) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, DeprecatedHighestDifficulty);
        }
        if (hasHighestBossDifficulty1) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, HighestBossDifficulty1);
        }
        if (hasHighestBossDifficulty2) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, HighestBossDifficulty2);
        }
        if (hasHighestBossDifficulty3) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, HighestBossDifficulty3);
        }
        if (hasHighestBossDifficulty4) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, HighestBossDifficulty4);
        }
        if (hasMonstersKilled) {
          size += pb::CodedOutputStream.ComputeUInt64Size(6, MonstersKilled);
        }
        if (hasElitesKilled) {
          size += pb::CodedOutputStream.ComputeUInt64Size(7, ElitesKilled);
        }
        if (hasGoldCollected) {
          size += pb::CodedOutputStream.ComputeUInt64Size(8, GoldCollected);
        }
        if (hasHighestHardcoreLevel) {
          size += pb::CodedOutputStream.ComputeUInt64Size(9, HighestHardcoreLevel);
        }
        if (hasHardcoreMonstersKilled) {
          size += pb::CodedOutputStream.ComputeUInt64Size(10, HardcoreMonstersKilled);
        }
        if (hasClassBarbarian) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, ClassBarbarian);
        }
        if (hasClassDemonhunter) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, ClassDemonhunter);
        }
        if (hasClassMonk) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, ClassMonk);
        }
        if (hasClassWitchdoctor) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, ClassWitchdoctor);
        }
        if (hasClassWizard) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, ClassWizard);
        }
        if (hasClassCrusader) {
          size += pb::CodedOutputStream.ComputeMessageSize(16, ClassCrusader);
        }
        if (hasClassNecromancer) {
          size += pb::CodedOutputStream.ComputeMessageSize(17, ClassNecromancer);
        }
        if (hasPvpWins) {
          size += pb::CodedOutputStream.ComputeUInt32Size(18, PvpWins);
        }
        if (hasPvpTakedowns) {
          size += pb::CodedOutputStream.ComputeUInt32Size(19, PvpTakedowns);
        }
        if (hasPvpDamage) {
          size += pb::CodedOutputStream.ComputeUInt64Size(20, PvpDamage);
        }
        if (hasSeasonId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(21, SeasonId);
        }
        if (hasHighestBossDifficulty5) {
          size += pb::CodedOutputStream.ComputeUInt32Size(22, HighestBossDifficulty5);
        }
        if (hasDeprecatedBestLadderParagonLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(23, DeprecatedBestLadderParagonLevel);
        }
        if (hasParagonLevel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(24, ParagonLevel);
        }
        if (hasParagonXpNext) {
          size += pb::CodedOutputStream.ComputeUInt64Size(25, ParagonXpNext);
        }
        {
          int dataSize = 0;
          foreach (uint element in SeasonsList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 2 * seasons_.Count;
        }
        if (hasParagonLevelHardcore) {
          size += pb::CodedOutputStream.ComputeUInt32Size(27, ParagonLevelHardcore);
        }
        if (hasParagonXpNextHardcore) {
          size += pb::CodedOutputStream.ComputeUInt64Size(28, ParagonXpNextHardcore);
        }
        if (hasBountiesCompleted) {
          size += pb::CodedOutputStream.ComputeUInt32Size(29, BountiesCompleted);
        }
        if (hasLootRunsCompleted) {
          size += pb::CodedOutputStream.ComputeUInt32Size(30, LootRunsCompleted);
        }
        if (hasHighestLevel) {
          size += pb::CodedOutputStream.ComputeUInt64Size(31, HighestLevel);
        }
        if (hasBloodShardsCollected) {
          size += pb::CodedOutputStream.ComputeUInt64Size(32, BloodShardsCollected);
        }
        foreach (global::D3.Profile.HeroMiniProfile element in HeroesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(34, element);
        }
        {
          int dataSize = 0;
          foreach (uint element in LeaderboardErasWithScoresList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 2 * leaderboardErasWithScores_.Count;
        }
        if (hasNumFallenHeroes) {
          size += pb::CodedOutputStream.ComputeUInt32Size(36, NumFallenHeroes);
        }
        if (hasSeasonJourneyRank) {
          size += pb::CodedOutputStream.ComputeUInt64Size(37, SeasonJourneyRank);
        }
        {
          int dataSize = 0;
          foreach (uint element in DeletedHeroesList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 2 * deletedHeroes_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AccountProfile ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountProfile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountProfile ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AccountProfile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AccountProfile ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountProfile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AccountProfile ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AccountProfile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AccountProfile ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AccountProfile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AccountProfile MakeReadOnly() {
      seasons_.MakeReadOnly();
      heroes_.MakeReadOnly();
      leaderboardErasWithScores_.MakeReadOnly();
      deletedHeroes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AccountProfile prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AccountProfile, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AccountProfile cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AccountProfile result;
      
      private AccountProfile PrepareBuilder() {
        if (resultIsReadOnly) {
          AccountProfile original = result;
          result = new AccountProfile();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AccountProfile MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.AccountProfile.Descriptor; }
      }
      
      public override AccountProfile DefaultInstanceForType {
        get { return global::D3.Profile.AccountProfile.DefaultInstance; }
      }
      
      public override AccountProfile BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AccountProfile) {
          return MergeFrom((AccountProfile) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AccountProfile other) {
        if (other == global::D3.Profile.AccountProfile.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDeprecatedHighestDifficulty) {
          DeprecatedHighestDifficulty = other.DeprecatedHighestDifficulty;
        }
        if (other.HasHighestBossDifficulty1) {
          HighestBossDifficulty1 = other.HighestBossDifficulty1;
        }
        if (other.HasHighestBossDifficulty2) {
          HighestBossDifficulty2 = other.HighestBossDifficulty2;
        }
        if (other.HasHighestBossDifficulty3) {
          HighestBossDifficulty3 = other.HighestBossDifficulty3;
        }
        if (other.HasHighestBossDifficulty4) {
          HighestBossDifficulty4 = other.HighestBossDifficulty4;
        }
        if (other.HasMonstersKilled) {
          MonstersKilled = other.MonstersKilled;
        }
        if (other.HasElitesKilled) {
          ElitesKilled = other.ElitesKilled;
        }
        if (other.HasGoldCollected) {
          GoldCollected = other.GoldCollected;
        }
        if (other.HasHighestHardcoreLevel) {
          HighestHardcoreLevel = other.HighestHardcoreLevel;
        }
        if (other.HasHardcoreMonstersKilled) {
          HardcoreMonstersKilled = other.HardcoreMonstersKilled;
        }
        if (other.HasClassBarbarian) {
          MergeClassBarbarian(other.ClassBarbarian);
        }
        if (other.HasClassDemonhunter) {
          MergeClassDemonhunter(other.ClassDemonhunter);
        }
        if (other.HasClassMonk) {
          MergeClassMonk(other.ClassMonk);
        }
        if (other.HasClassWitchdoctor) {
          MergeClassWitchdoctor(other.ClassWitchdoctor);
        }
        if (other.HasClassWizard) {
          MergeClassWizard(other.ClassWizard);
        }
        if (other.HasClassCrusader) {
          MergeClassCrusader(other.ClassCrusader);
        }
        if (other.HasClassNecromancer) {
          MergeClassNecromancer(other.ClassNecromancer);
        }
        if (other.HasPvpWins) {
          PvpWins = other.PvpWins;
        }
        if (other.HasPvpTakedowns) {
          PvpTakedowns = other.PvpTakedowns;
        }
        if (other.HasPvpDamage) {
          PvpDamage = other.PvpDamage;
        }
        if (other.HasSeasonId) {
          SeasonId = other.SeasonId;
        }
        if (other.HasHighestBossDifficulty5) {
          HighestBossDifficulty5 = other.HighestBossDifficulty5;
        }
        if (other.HasDeprecatedBestLadderParagonLevel) {
          DeprecatedBestLadderParagonLevel = other.DeprecatedBestLadderParagonLevel;
        }
        if (other.HasParagonLevel) {
          ParagonLevel = other.ParagonLevel;
        }
        if (other.HasParagonXpNext) {
          ParagonXpNext = other.ParagonXpNext;
        }
        if (other.seasons_.Count != 0) {
          result.seasons_.Add(other.seasons_);
        }
        if (other.HasParagonLevelHardcore) {
          ParagonLevelHardcore = other.ParagonLevelHardcore;
        }
        if (other.HasParagonXpNextHardcore) {
          ParagonXpNextHardcore = other.ParagonXpNextHardcore;
        }
        if (other.HasBountiesCompleted) {
          BountiesCompleted = other.BountiesCompleted;
        }
        if (other.HasLootRunsCompleted) {
          LootRunsCompleted = other.LootRunsCompleted;
        }
        if (other.HasHighestLevel) {
          HighestLevel = other.HighestLevel;
        }
        if (other.HasBloodShardsCollected) {
          BloodShardsCollected = other.BloodShardsCollected;
        }
        if (other.heroes_.Count != 0) {
          result.heroes_.Add(other.heroes_);
        }
        if (other.leaderboardErasWithScores_.Count != 0) {
          result.leaderboardErasWithScores_.Add(other.leaderboardErasWithScores_);
        }
        if (other.HasNumFallenHeroes) {
          NumFallenHeroes = other.NumFallenHeroes;
        }
        if (other.HasSeasonJourneyRank) {
          SeasonJourneyRank = other.SeasonJourneyRank;
        }
        if (other.deletedHeroes_.Count != 0) {
          result.deletedHeroes_.Add(other.deletedHeroes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_accountProfileFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _accountProfileFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDeprecatedHighestDifficulty = input.ReadUInt32(ref result.deprecatedHighestDifficulty_);
              break;
            }
            case 16: {
              result.hasHighestBossDifficulty1 = input.ReadUInt32(ref result.highestBossDifficulty1_);
              break;
            }
            case 24: {
              result.hasHighestBossDifficulty2 = input.ReadUInt32(ref result.highestBossDifficulty2_);
              break;
            }
            case 32: {
              result.hasHighestBossDifficulty3 = input.ReadUInt32(ref result.highestBossDifficulty3_);
              break;
            }
            case 40: {
              result.hasHighestBossDifficulty4 = input.ReadUInt32(ref result.highestBossDifficulty4_);
              break;
            }
            case 48: {
              result.hasMonstersKilled = input.ReadUInt64(ref result.monstersKilled_);
              break;
            }
            case 56: {
              result.hasElitesKilled = input.ReadUInt64(ref result.elitesKilled_);
              break;
            }
            case 64: {
              result.hasGoldCollected = input.ReadUInt64(ref result.goldCollected_);
              break;
            }
            case 72: {
              result.hasHighestHardcoreLevel = input.ReadUInt64(ref result.highestHardcoreLevel_);
              break;
            }
            case 80: {
              result.hasHardcoreMonstersKilled = input.ReadUInt64(ref result.hardcoreMonstersKilled_);
              break;
            }
            case 90: {
              global::D3.Profile.ClassInfo.Builder subBuilder = global::D3.Profile.ClassInfo.CreateBuilder();
              if (result.hasClassBarbarian) {
                subBuilder.MergeFrom(ClassBarbarian);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClassBarbarian = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::D3.Profile.ClassInfo.Builder subBuilder = global::D3.Profile.ClassInfo.CreateBuilder();
              if (result.hasClassDemonhunter) {
                subBuilder.MergeFrom(ClassDemonhunter);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClassDemonhunter = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              global::D3.Profile.ClassInfo.Builder subBuilder = global::D3.Profile.ClassInfo.CreateBuilder();
              if (result.hasClassMonk) {
                subBuilder.MergeFrom(ClassMonk);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClassMonk = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              global::D3.Profile.ClassInfo.Builder subBuilder = global::D3.Profile.ClassInfo.CreateBuilder();
              if (result.hasClassWitchdoctor) {
                subBuilder.MergeFrom(ClassWitchdoctor);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClassWitchdoctor = subBuilder.BuildPartial();
              break;
            }
            case 122: {
              global::D3.Profile.ClassInfo.Builder subBuilder = global::D3.Profile.ClassInfo.CreateBuilder();
              if (result.hasClassWizard) {
                subBuilder.MergeFrom(ClassWizard);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClassWizard = subBuilder.BuildPartial();
              break;
            }
            case 130: {
              global::D3.Profile.ClassInfo.Builder subBuilder = global::D3.Profile.ClassInfo.CreateBuilder();
              if (result.hasClassCrusader) {
                subBuilder.MergeFrom(ClassCrusader);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClassCrusader = subBuilder.BuildPartial();
              break;
            }
            case 138: {
              global::D3.Profile.ClassInfo.Builder subBuilder = global::D3.Profile.ClassInfo.CreateBuilder();
              if (result.hasClassNecromancer) {
                subBuilder.MergeFrom(ClassNecromancer);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClassNecromancer = subBuilder.BuildPartial();
              break;
            }
            case 144: {
              result.hasPvpWins = input.ReadUInt32(ref result.pvpWins_);
              break;
            }
            case 152: {
              result.hasPvpTakedowns = input.ReadUInt32(ref result.pvpTakedowns_);
              break;
            }
            case 160: {
              result.hasPvpDamage = input.ReadUInt64(ref result.pvpDamage_);
              break;
            }
            case 168: {
              result.hasSeasonId = input.ReadUInt32(ref result.seasonId_);
              break;
            }
            case 176: {
              result.hasHighestBossDifficulty5 = input.ReadUInt32(ref result.highestBossDifficulty5_);
              break;
            }
            case 184: {
              result.hasDeprecatedBestLadderParagonLevel = input.ReadUInt32(ref result.deprecatedBestLadderParagonLevel_);
              break;
            }
            case 192: {
              result.hasParagonLevel = input.ReadUInt32(ref result.paragonLevel_);
              break;
            }
            case 200: {
              result.hasParagonXpNext = input.ReadUInt64(ref result.paragonXpNext_);
              break;
            }
            case 210:
            case 208: {
              input.ReadUInt32Array(tag, field_name, result.seasons_);
              break;
            }
            case 216: {
              result.hasParagonLevelHardcore = input.ReadUInt32(ref result.paragonLevelHardcore_);
              break;
            }
            case 224: {
              result.hasParagonXpNextHardcore = input.ReadUInt64(ref result.paragonXpNextHardcore_);
              break;
            }
            case 232: {
              result.hasBountiesCompleted = input.ReadUInt32(ref result.bountiesCompleted_);
              break;
            }
            case 240: {
              result.hasLootRunsCompleted = input.ReadUInt32(ref result.lootRunsCompleted_);
              break;
            }
            case 248: {
              result.hasHighestLevel = input.ReadUInt64(ref result.highestLevel_);
              break;
            }
            case 256: {
              result.hasBloodShardsCollected = input.ReadUInt64(ref result.bloodShardsCollected_);
              break;
            }
            case 274: {
              input.ReadMessageArray(tag, field_name, result.heroes_, global::D3.Profile.HeroMiniProfile.DefaultInstance, extensionRegistry);
              break;
            }
            case 282:
            case 280: {
              input.ReadUInt32Array(tag, field_name, result.leaderboardErasWithScores_);
              break;
            }
            case 288: {
              result.hasNumFallenHeroes = input.ReadUInt32(ref result.numFallenHeroes_);
              break;
            }
            case 296: {
              result.hasSeasonJourneyRank = input.ReadUInt64(ref result.seasonJourneyRank_);
              break;
            }
            case 306:
            case 304: {
              input.ReadUInt32Array(tag, field_name, result.deletedHeroes_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDeprecatedHighestDifficulty {
        get { return result.hasDeprecatedHighestDifficulty; }
      }
      public uint DeprecatedHighestDifficulty {
        get { return result.DeprecatedHighestDifficulty; }
        set { SetDeprecatedHighestDifficulty(value); }
      }
      public Builder SetDeprecatedHighestDifficulty(uint value) {
        PrepareBuilder();
        result.hasDeprecatedHighestDifficulty = true;
        result.deprecatedHighestDifficulty_ = value;
        return this;
      }
      public Builder ClearDeprecatedHighestDifficulty() {
        PrepareBuilder();
        result.hasDeprecatedHighestDifficulty = false;
        result.deprecatedHighestDifficulty_ = 0;
        return this;
      }
      
      public bool HasHighestBossDifficulty1 {
        get { return result.hasHighestBossDifficulty1; }
      }
      public uint HighestBossDifficulty1 {
        get { return result.HighestBossDifficulty1; }
        set { SetHighestBossDifficulty1(value); }
      }
      public Builder SetHighestBossDifficulty1(uint value) {
        PrepareBuilder();
        result.hasHighestBossDifficulty1 = true;
        result.highestBossDifficulty1_ = value;
        return this;
      }
      public Builder ClearHighestBossDifficulty1() {
        PrepareBuilder();
        result.hasHighestBossDifficulty1 = false;
        result.highestBossDifficulty1_ = 0;
        return this;
      }
      
      public bool HasHighestBossDifficulty2 {
        get { return result.hasHighestBossDifficulty2; }
      }
      public uint HighestBossDifficulty2 {
        get { return result.HighestBossDifficulty2; }
        set { SetHighestBossDifficulty2(value); }
      }
      public Builder SetHighestBossDifficulty2(uint value) {
        PrepareBuilder();
        result.hasHighestBossDifficulty2 = true;
        result.highestBossDifficulty2_ = value;
        return this;
      }
      public Builder ClearHighestBossDifficulty2() {
        PrepareBuilder();
        result.hasHighestBossDifficulty2 = false;
        result.highestBossDifficulty2_ = 0;
        return this;
      }
      
      public bool HasHighestBossDifficulty3 {
        get { return result.hasHighestBossDifficulty3; }
      }
      public uint HighestBossDifficulty3 {
        get { return result.HighestBossDifficulty3; }
        set { SetHighestBossDifficulty3(value); }
      }
      public Builder SetHighestBossDifficulty3(uint value) {
        PrepareBuilder();
        result.hasHighestBossDifficulty3 = true;
        result.highestBossDifficulty3_ = value;
        return this;
      }
      public Builder ClearHighestBossDifficulty3() {
        PrepareBuilder();
        result.hasHighestBossDifficulty3 = false;
        result.highestBossDifficulty3_ = 0;
        return this;
      }
      
      public bool HasHighestBossDifficulty4 {
        get { return result.hasHighestBossDifficulty4; }
      }
      public uint HighestBossDifficulty4 {
        get { return result.HighestBossDifficulty4; }
        set { SetHighestBossDifficulty4(value); }
      }
      public Builder SetHighestBossDifficulty4(uint value) {
        PrepareBuilder();
        result.hasHighestBossDifficulty4 = true;
        result.highestBossDifficulty4_ = value;
        return this;
      }
      public Builder ClearHighestBossDifficulty4() {
        PrepareBuilder();
        result.hasHighestBossDifficulty4 = false;
        result.highestBossDifficulty4_ = 0;
        return this;
      }
      
      public bool HasMonstersKilled {
        get { return result.hasMonstersKilled; }
      }
      public ulong MonstersKilled {
        get { return result.MonstersKilled; }
        set { SetMonstersKilled(value); }
      }
      public Builder SetMonstersKilled(ulong value) {
        PrepareBuilder();
        result.hasMonstersKilled = true;
        result.monstersKilled_ = value;
        return this;
      }
      public Builder ClearMonstersKilled() {
        PrepareBuilder();
        result.hasMonstersKilled = false;
        result.monstersKilled_ = 0UL;
        return this;
      }
      
      public bool HasElitesKilled {
        get { return result.hasElitesKilled; }
      }
      public ulong ElitesKilled {
        get { return result.ElitesKilled; }
        set { SetElitesKilled(value); }
      }
      public Builder SetElitesKilled(ulong value) {
        PrepareBuilder();
        result.hasElitesKilled = true;
        result.elitesKilled_ = value;
        return this;
      }
      public Builder ClearElitesKilled() {
        PrepareBuilder();
        result.hasElitesKilled = false;
        result.elitesKilled_ = 0UL;
        return this;
      }
      
      public bool HasGoldCollected {
        get { return result.hasGoldCollected; }
      }
      public ulong GoldCollected {
        get { return result.GoldCollected; }
        set { SetGoldCollected(value); }
      }
      public Builder SetGoldCollected(ulong value) {
        PrepareBuilder();
        result.hasGoldCollected = true;
        result.goldCollected_ = value;
        return this;
      }
      public Builder ClearGoldCollected() {
        PrepareBuilder();
        result.hasGoldCollected = false;
        result.goldCollected_ = 0UL;
        return this;
      }
      
      public bool HasHighestHardcoreLevel {
        get { return result.hasHighestHardcoreLevel; }
      }
      public ulong HighestHardcoreLevel {
        get { return result.HighestHardcoreLevel; }
        set { SetHighestHardcoreLevel(value); }
      }
      public Builder SetHighestHardcoreLevel(ulong value) {
        PrepareBuilder();
        result.hasHighestHardcoreLevel = true;
        result.highestHardcoreLevel_ = value;
        return this;
      }
      public Builder ClearHighestHardcoreLevel() {
        PrepareBuilder();
        result.hasHighestHardcoreLevel = false;
        result.highestHardcoreLevel_ = 0UL;
        return this;
      }
      
      public bool HasHardcoreMonstersKilled {
        get { return result.hasHardcoreMonstersKilled; }
      }
      public ulong HardcoreMonstersKilled {
        get { return result.HardcoreMonstersKilled; }
        set { SetHardcoreMonstersKilled(value); }
      }
      public Builder SetHardcoreMonstersKilled(ulong value) {
        PrepareBuilder();
        result.hasHardcoreMonstersKilled = true;
        result.hardcoreMonstersKilled_ = value;
        return this;
      }
      public Builder ClearHardcoreMonstersKilled() {
        PrepareBuilder();
        result.hasHardcoreMonstersKilled = false;
        result.hardcoreMonstersKilled_ = 0UL;
        return this;
      }
      
      public bool HasClassBarbarian {
       get { return result.hasClassBarbarian; }
      }
      public global::D3.Profile.ClassInfo ClassBarbarian {
        get { return result.ClassBarbarian; }
        set { SetClassBarbarian(value); }
      }
      public Builder SetClassBarbarian(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassBarbarian = true;
        result.classBarbarian_ = value;
        return this;
      }
      public Builder SetClassBarbarian(global::D3.Profile.ClassInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClassBarbarian = true;
        result.classBarbarian_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClassBarbarian(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClassBarbarian &&
            result.classBarbarian_ != global::D3.Profile.ClassInfo.DefaultInstance) {
            result.classBarbarian_ = global::D3.Profile.ClassInfo.CreateBuilder(result.classBarbarian_).MergeFrom(value).BuildPartial();
        } else {
          result.classBarbarian_ = value;
        }
        result.hasClassBarbarian = true;
        return this;
      }
      public Builder ClearClassBarbarian() {
        PrepareBuilder();
        result.hasClassBarbarian = false;
        result.classBarbarian_ = null;
        return this;
      }
      
      public bool HasClassDemonhunter {
       get { return result.hasClassDemonhunter; }
      }
      public global::D3.Profile.ClassInfo ClassDemonhunter {
        get { return result.ClassDemonhunter; }
        set { SetClassDemonhunter(value); }
      }
      public Builder SetClassDemonhunter(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassDemonhunter = true;
        result.classDemonhunter_ = value;
        return this;
      }
      public Builder SetClassDemonhunter(global::D3.Profile.ClassInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClassDemonhunter = true;
        result.classDemonhunter_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClassDemonhunter(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClassDemonhunter &&
            result.classDemonhunter_ != global::D3.Profile.ClassInfo.DefaultInstance) {
            result.classDemonhunter_ = global::D3.Profile.ClassInfo.CreateBuilder(result.classDemonhunter_).MergeFrom(value).BuildPartial();
        } else {
          result.classDemonhunter_ = value;
        }
        result.hasClassDemonhunter = true;
        return this;
      }
      public Builder ClearClassDemonhunter() {
        PrepareBuilder();
        result.hasClassDemonhunter = false;
        result.classDemonhunter_ = null;
        return this;
      }
      
      public bool HasClassMonk {
       get { return result.hasClassMonk; }
      }
      public global::D3.Profile.ClassInfo ClassMonk {
        get { return result.ClassMonk; }
        set { SetClassMonk(value); }
      }
      public Builder SetClassMonk(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassMonk = true;
        result.classMonk_ = value;
        return this;
      }
      public Builder SetClassMonk(global::D3.Profile.ClassInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClassMonk = true;
        result.classMonk_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClassMonk(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClassMonk &&
            result.classMonk_ != global::D3.Profile.ClassInfo.DefaultInstance) {
            result.classMonk_ = global::D3.Profile.ClassInfo.CreateBuilder(result.classMonk_).MergeFrom(value).BuildPartial();
        } else {
          result.classMonk_ = value;
        }
        result.hasClassMonk = true;
        return this;
      }
      public Builder ClearClassMonk() {
        PrepareBuilder();
        result.hasClassMonk = false;
        result.classMonk_ = null;
        return this;
      }
      
      public bool HasClassWitchdoctor {
       get { return result.hasClassWitchdoctor; }
      }
      public global::D3.Profile.ClassInfo ClassWitchdoctor {
        get { return result.ClassWitchdoctor; }
        set { SetClassWitchdoctor(value); }
      }
      public Builder SetClassWitchdoctor(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassWitchdoctor = true;
        result.classWitchdoctor_ = value;
        return this;
      }
      public Builder SetClassWitchdoctor(global::D3.Profile.ClassInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClassWitchdoctor = true;
        result.classWitchdoctor_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClassWitchdoctor(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClassWitchdoctor &&
            result.classWitchdoctor_ != global::D3.Profile.ClassInfo.DefaultInstance) {
            result.classWitchdoctor_ = global::D3.Profile.ClassInfo.CreateBuilder(result.classWitchdoctor_).MergeFrom(value).BuildPartial();
        } else {
          result.classWitchdoctor_ = value;
        }
        result.hasClassWitchdoctor = true;
        return this;
      }
      public Builder ClearClassWitchdoctor() {
        PrepareBuilder();
        result.hasClassWitchdoctor = false;
        result.classWitchdoctor_ = null;
        return this;
      }
      
      public bool HasClassWizard {
       get { return result.hasClassWizard; }
      }
      public global::D3.Profile.ClassInfo ClassWizard {
        get { return result.ClassWizard; }
        set { SetClassWizard(value); }
      }
      public Builder SetClassWizard(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassWizard = true;
        result.classWizard_ = value;
        return this;
      }
      public Builder SetClassWizard(global::D3.Profile.ClassInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClassWizard = true;
        result.classWizard_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClassWizard(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClassWizard &&
            result.classWizard_ != global::D3.Profile.ClassInfo.DefaultInstance) {
            result.classWizard_ = global::D3.Profile.ClassInfo.CreateBuilder(result.classWizard_).MergeFrom(value).BuildPartial();
        } else {
          result.classWizard_ = value;
        }
        result.hasClassWizard = true;
        return this;
      }
      public Builder ClearClassWizard() {
        PrepareBuilder();
        result.hasClassWizard = false;
        result.classWizard_ = null;
        return this;
      }
      
      public bool HasClassCrusader {
       get { return result.hasClassCrusader; }
      }
      public global::D3.Profile.ClassInfo ClassCrusader {
        get { return result.ClassCrusader; }
        set { SetClassCrusader(value); }
      }
      public Builder SetClassCrusader(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassCrusader = true;
        result.classCrusader_ = value;
        return this;
      }
      public Builder SetClassCrusader(global::D3.Profile.ClassInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClassCrusader = true;
        result.classCrusader_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClassCrusader(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClassCrusader &&
            result.classCrusader_ != global::D3.Profile.ClassInfo.DefaultInstance) {
            result.classCrusader_ = global::D3.Profile.ClassInfo.CreateBuilder(result.classCrusader_).MergeFrom(value).BuildPartial();
        } else {
          result.classCrusader_ = value;
        }
        result.hasClassCrusader = true;
        return this;
      }
      public Builder ClearClassCrusader() {
        PrepareBuilder();
        result.hasClassCrusader = false;
        result.classCrusader_ = null;
        return this;
      }
      
      public bool HasClassNecromancer {
       get { return result.hasClassNecromancer; }
      }
      public global::D3.Profile.ClassInfo ClassNecromancer {
        get { return result.ClassNecromancer; }
        set { SetClassNecromancer(value); }
      }
      public Builder SetClassNecromancer(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassNecromancer = true;
        result.classNecromancer_ = value;
        return this;
      }
      public Builder SetClassNecromancer(global::D3.Profile.ClassInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClassNecromancer = true;
        result.classNecromancer_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClassNecromancer(global::D3.Profile.ClassInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClassNecromancer &&
            result.classNecromancer_ != global::D3.Profile.ClassInfo.DefaultInstance) {
            result.classNecromancer_ = global::D3.Profile.ClassInfo.CreateBuilder(result.classNecromancer_).MergeFrom(value).BuildPartial();
        } else {
          result.classNecromancer_ = value;
        }
        result.hasClassNecromancer = true;
        return this;
      }
      public Builder ClearClassNecromancer() {
        PrepareBuilder();
        result.hasClassNecromancer = false;
        result.classNecromancer_ = null;
        return this;
      }
      
      public bool HasPvpWins {
        get { return result.hasPvpWins; }
      }
      public uint PvpWins {
        get { return result.PvpWins; }
        set { SetPvpWins(value); }
      }
      public Builder SetPvpWins(uint value) {
        PrepareBuilder();
        result.hasPvpWins = true;
        result.pvpWins_ = value;
        return this;
      }
      public Builder ClearPvpWins() {
        PrepareBuilder();
        result.hasPvpWins = false;
        result.pvpWins_ = 0;
        return this;
      }
      
      public bool HasPvpTakedowns {
        get { return result.hasPvpTakedowns; }
      }
      public uint PvpTakedowns {
        get { return result.PvpTakedowns; }
        set { SetPvpTakedowns(value); }
      }
      public Builder SetPvpTakedowns(uint value) {
        PrepareBuilder();
        result.hasPvpTakedowns = true;
        result.pvpTakedowns_ = value;
        return this;
      }
      public Builder ClearPvpTakedowns() {
        PrepareBuilder();
        result.hasPvpTakedowns = false;
        result.pvpTakedowns_ = 0;
        return this;
      }
      
      public bool HasPvpDamage {
        get { return result.hasPvpDamage; }
      }
      public ulong PvpDamage {
        get { return result.PvpDamage; }
        set { SetPvpDamage(value); }
      }
      public Builder SetPvpDamage(ulong value) {
        PrepareBuilder();
        result.hasPvpDamage = true;
        result.pvpDamage_ = value;
        return this;
      }
      public Builder ClearPvpDamage() {
        PrepareBuilder();
        result.hasPvpDamage = false;
        result.pvpDamage_ = 0UL;
        return this;
      }
      
      public bool HasSeasonId {
        get { return result.hasSeasonId; }
      }
      public uint SeasonId {
        get { return result.SeasonId; }
        set { SetSeasonId(value); }
      }
      public Builder SetSeasonId(uint value) {
        PrepareBuilder();
        result.hasSeasonId = true;
        result.seasonId_ = value;
        return this;
      }
      public Builder ClearSeasonId() {
        PrepareBuilder();
        result.hasSeasonId = false;
        result.seasonId_ = 0;
        return this;
      }
      
      public bool HasHighestBossDifficulty5 {
        get { return result.hasHighestBossDifficulty5; }
      }
      public uint HighestBossDifficulty5 {
        get { return result.HighestBossDifficulty5; }
        set { SetHighestBossDifficulty5(value); }
      }
      public Builder SetHighestBossDifficulty5(uint value) {
        PrepareBuilder();
        result.hasHighestBossDifficulty5 = true;
        result.highestBossDifficulty5_ = value;
        return this;
      }
      public Builder ClearHighestBossDifficulty5() {
        PrepareBuilder();
        result.hasHighestBossDifficulty5 = false;
        result.highestBossDifficulty5_ = 0;
        return this;
      }
      
      public bool HasDeprecatedBestLadderParagonLevel {
        get { return result.hasDeprecatedBestLadderParagonLevel; }
      }
      public uint DeprecatedBestLadderParagonLevel {
        get { return result.DeprecatedBestLadderParagonLevel; }
        set { SetDeprecatedBestLadderParagonLevel(value); }
      }
      public Builder SetDeprecatedBestLadderParagonLevel(uint value) {
        PrepareBuilder();
        result.hasDeprecatedBestLadderParagonLevel = true;
        result.deprecatedBestLadderParagonLevel_ = value;
        return this;
      }
      public Builder ClearDeprecatedBestLadderParagonLevel() {
        PrepareBuilder();
        result.hasDeprecatedBestLadderParagonLevel = false;
        result.deprecatedBestLadderParagonLevel_ = 0;
        return this;
      }
      
      public bool HasParagonLevel {
        get { return result.hasParagonLevel; }
      }
      public uint ParagonLevel {
        get { return result.ParagonLevel; }
        set { SetParagonLevel(value); }
      }
      public Builder SetParagonLevel(uint value) {
        PrepareBuilder();
        result.hasParagonLevel = true;
        result.paragonLevel_ = value;
        return this;
      }
      public Builder ClearParagonLevel() {
        PrepareBuilder();
        result.hasParagonLevel = false;
        result.paragonLevel_ = 0;
        return this;
      }
      
      public bool HasParagonXpNext {
        get { return result.hasParagonXpNext; }
      }
      public ulong ParagonXpNext {
        get { return result.ParagonXpNext; }
        set { SetParagonXpNext(value); }
      }
      public Builder SetParagonXpNext(ulong value) {
        PrepareBuilder();
        result.hasParagonXpNext = true;
        result.paragonXpNext_ = value;
        return this;
      }
      public Builder ClearParagonXpNext() {
        PrepareBuilder();
        result.hasParagonXpNext = false;
        result.paragonXpNext_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<uint> SeasonsList {
        get { return PrepareBuilder().seasons_; }
      }
      public int SeasonsCount {
        get { return result.SeasonsCount; }
      }
      public uint GetSeasons(int index) {
        return result.GetSeasons(index);
      }
      public Builder SetSeasons(int index, uint value) {
        PrepareBuilder();
        result.seasons_[index] = value;
        return this;
      }
      public Builder AddSeasons(uint value) {
        PrepareBuilder();
        result.seasons_.Add(value);
        return this;
      }
      public Builder AddRangeSeasons(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.seasons_.Add(values);
        return this;
      }
      public Builder ClearSeasons() {
        PrepareBuilder();
        result.seasons_.Clear();
        return this;
      }
      
      public bool HasParagonLevelHardcore {
        get { return result.hasParagonLevelHardcore; }
      }
      public uint ParagonLevelHardcore {
        get { return result.ParagonLevelHardcore; }
        set { SetParagonLevelHardcore(value); }
      }
      public Builder SetParagonLevelHardcore(uint value) {
        PrepareBuilder();
        result.hasParagonLevelHardcore = true;
        result.paragonLevelHardcore_ = value;
        return this;
      }
      public Builder ClearParagonLevelHardcore() {
        PrepareBuilder();
        result.hasParagonLevelHardcore = false;
        result.paragonLevelHardcore_ = 0;
        return this;
      }
      
      public bool HasParagonXpNextHardcore {
        get { return result.hasParagonXpNextHardcore; }
      }
      public ulong ParagonXpNextHardcore {
        get { return result.ParagonXpNextHardcore; }
        set { SetParagonXpNextHardcore(value); }
      }
      public Builder SetParagonXpNextHardcore(ulong value) {
        PrepareBuilder();
        result.hasParagonXpNextHardcore = true;
        result.paragonXpNextHardcore_ = value;
        return this;
      }
      public Builder ClearParagonXpNextHardcore() {
        PrepareBuilder();
        result.hasParagonXpNextHardcore = false;
        result.paragonXpNextHardcore_ = 0UL;
        return this;
      }
      
      public bool HasBountiesCompleted {
        get { return result.hasBountiesCompleted; }
      }
      public uint BountiesCompleted {
        get { return result.BountiesCompleted; }
        set { SetBountiesCompleted(value); }
      }
      public Builder SetBountiesCompleted(uint value) {
        PrepareBuilder();
        result.hasBountiesCompleted = true;
        result.bountiesCompleted_ = value;
        return this;
      }
      public Builder ClearBountiesCompleted() {
        PrepareBuilder();
        result.hasBountiesCompleted = false;
        result.bountiesCompleted_ = 0;
        return this;
      }
      
      public bool HasLootRunsCompleted {
        get { return result.hasLootRunsCompleted; }
      }
      public uint LootRunsCompleted {
        get { return result.LootRunsCompleted; }
        set { SetLootRunsCompleted(value); }
      }
      public Builder SetLootRunsCompleted(uint value) {
        PrepareBuilder();
        result.hasLootRunsCompleted = true;
        result.lootRunsCompleted_ = value;
        return this;
      }
      public Builder ClearLootRunsCompleted() {
        PrepareBuilder();
        result.hasLootRunsCompleted = false;
        result.lootRunsCompleted_ = 0;
        return this;
      }
      
      public bool HasHighestLevel {
        get { return result.hasHighestLevel; }
      }
      public ulong HighestLevel {
        get { return result.HighestLevel; }
        set { SetHighestLevel(value); }
      }
      public Builder SetHighestLevel(ulong value) {
        PrepareBuilder();
        result.hasHighestLevel = true;
        result.highestLevel_ = value;
        return this;
      }
      public Builder ClearHighestLevel() {
        PrepareBuilder();
        result.hasHighestLevel = false;
        result.highestLevel_ = 0UL;
        return this;
      }
      
      public bool HasBloodShardsCollected {
        get { return result.hasBloodShardsCollected; }
      }
      public ulong BloodShardsCollected {
        get { return result.BloodShardsCollected; }
        set { SetBloodShardsCollected(value); }
      }
      public Builder SetBloodShardsCollected(ulong value) {
        PrepareBuilder();
        result.hasBloodShardsCollected = true;
        result.bloodShardsCollected_ = value;
        return this;
      }
      public Builder ClearBloodShardsCollected() {
        PrepareBuilder();
        result.hasBloodShardsCollected = false;
        result.bloodShardsCollected_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Profile.HeroMiniProfile> HeroesList {
        get { return PrepareBuilder().heroes_; }
      }
      public int HeroesCount {
        get { return result.HeroesCount; }
      }
      public global::D3.Profile.HeroMiniProfile GetHeroes(int index) {
        return result.GetHeroes(index);
      }
      public Builder SetHeroes(int index, global::D3.Profile.HeroMiniProfile value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.heroes_[index] = value;
        return this;
      }
      public Builder SetHeroes(int index, global::D3.Profile.HeroMiniProfile.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.heroes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddHeroes(global::D3.Profile.HeroMiniProfile value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.heroes_.Add(value);
        return this;
      }
      public Builder AddHeroes(global::D3.Profile.HeroMiniProfile.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.heroes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeHeroes(scg::IEnumerable<global::D3.Profile.HeroMiniProfile> values) {
        PrepareBuilder();
        result.heroes_.Add(values);
        return this;
      }
      public Builder ClearHeroes() {
        PrepareBuilder();
        result.heroes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<uint> LeaderboardErasWithScoresList {
        get { return PrepareBuilder().leaderboardErasWithScores_; }
      }
      public int LeaderboardErasWithScoresCount {
        get { return result.LeaderboardErasWithScoresCount; }
      }
      public uint GetLeaderboardErasWithScores(int index) {
        return result.GetLeaderboardErasWithScores(index);
      }
      public Builder SetLeaderboardErasWithScores(int index, uint value) {
        PrepareBuilder();
        result.leaderboardErasWithScores_[index] = value;
        return this;
      }
      public Builder AddLeaderboardErasWithScores(uint value) {
        PrepareBuilder();
        result.leaderboardErasWithScores_.Add(value);
        return this;
      }
      public Builder AddRangeLeaderboardErasWithScores(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.leaderboardErasWithScores_.Add(values);
        return this;
      }
      public Builder ClearLeaderboardErasWithScores() {
        PrepareBuilder();
        result.leaderboardErasWithScores_.Clear();
        return this;
      }
      
      public bool HasNumFallenHeroes {
        get { return result.hasNumFallenHeroes; }
      }
      public uint NumFallenHeroes {
        get { return result.NumFallenHeroes; }
        set { SetNumFallenHeroes(value); }
      }
      public Builder SetNumFallenHeroes(uint value) {
        PrepareBuilder();
        result.hasNumFallenHeroes = true;
        result.numFallenHeroes_ = value;
        return this;
      }
      public Builder ClearNumFallenHeroes() {
        PrepareBuilder();
        result.hasNumFallenHeroes = false;
        result.numFallenHeroes_ = 0;
        return this;
      }
      
      public bool HasSeasonJourneyRank {
        get { return result.hasSeasonJourneyRank; }
      }
      public ulong SeasonJourneyRank {
        get { return result.SeasonJourneyRank; }
        set { SetSeasonJourneyRank(value); }
      }
      public Builder SetSeasonJourneyRank(ulong value) {
        PrepareBuilder();
        result.hasSeasonJourneyRank = true;
        result.seasonJourneyRank_ = value;
        return this;
      }
      public Builder ClearSeasonJourneyRank() {
        PrepareBuilder();
        result.hasSeasonJourneyRank = false;
        result.seasonJourneyRank_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<uint> DeletedHeroesList {
        get { return PrepareBuilder().deletedHeroes_; }
      }
      public int DeletedHeroesCount {
        get { return result.DeletedHeroesCount; }
      }
      public uint GetDeletedHeroes(int index) {
        return result.GetDeletedHeroes(index);
      }
      public Builder SetDeletedHeroes(int index, uint value) {
        PrepareBuilder();
        result.deletedHeroes_[index] = value;
        return this;
      }
      public Builder AddDeletedHeroes(uint value) {
        PrepareBuilder();
        result.deletedHeroes_.Add(value);
        return this;
      }
      public Builder AddRangeDeletedHeroes(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.deletedHeroes_.Add(values);
        return this;
      }
      public Builder ClearDeletedHeroes() {
        PrepareBuilder();
        result.deletedHeroes_.Clear();
        return this;
      }
    }
    static AccountProfile() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PvpMatchPlayer : pb::GeneratedMessage<PvpMatchPlayer, PvpMatchPlayer.Builder> {
    private PvpMatchPlayer() { }
    private static readonly PvpMatchPlayer defaultInstance = new PvpMatchPlayer().MakeReadOnly();
    private static readonly string[] _pvpMatchPlayerFieldNames = new string[] { "account_id", "gbid_class", "is_female" };
    private static readonly uint[] _pvpMatchPlayerFieldTags = new uint[] { 8, 16, 24 };
    public static PvpMatchPlayer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PvpMatchPlayer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PvpMatchPlayer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_PvpMatchPlayer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PvpMatchPlayer, PvpMatchPlayer.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_PvpMatchPlayer__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private ulong accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public ulong AccountId {
      get { return accountId_; }
    }
    
    public const int GbidClassFieldNumber = 2;
    private bool hasGbidClass;
    private uint gbidClass_;
    public bool HasGbidClass {
      get { return hasGbidClass; }
    }
    public uint GbidClass {
      get { return gbidClass_; }
    }
    
    public const int IsFemaleFieldNumber = 3;
    private bool hasIsFemale;
    private bool isFemale_;
    public bool HasIsFemale {
      get { return hasIsFemale; }
    }
    public bool IsFemale {
      get { return isFemale_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pvpMatchPlayerFieldNames;
      if (hasAccountId) {
        output.WriteUInt64(1, field_names[0], AccountId);
      }
      if (hasGbidClass) {
        output.WriteUInt32(2, field_names[1], GbidClass);
      }
      if (hasIsFemale) {
        output.WriteBool(3, field_names[2], IsFemale);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, AccountId);
        }
        if (hasGbidClass) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, GbidClass);
        }
        if (hasIsFemale) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, IsFemale);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PvpMatchPlayer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpMatchPlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpMatchPlayer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpMatchPlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpMatchPlayer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpMatchPlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PvpMatchPlayer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PvpMatchPlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PvpMatchPlayer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpMatchPlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PvpMatchPlayer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PvpMatchPlayer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PvpMatchPlayer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PvpMatchPlayer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PvpMatchPlayer result;
      
      private PvpMatchPlayer PrepareBuilder() {
        if (resultIsReadOnly) {
          PvpMatchPlayer original = result;
          result = new PvpMatchPlayer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PvpMatchPlayer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.PvpMatchPlayer.Descriptor; }
      }
      
      public override PvpMatchPlayer DefaultInstanceForType {
        get { return global::D3.Profile.PvpMatchPlayer.DefaultInstance; }
      }
      
      public override PvpMatchPlayer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PvpMatchPlayer) {
          return MergeFrom((PvpMatchPlayer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PvpMatchPlayer other) {
        if (other == global::D3.Profile.PvpMatchPlayer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        if (other.HasGbidClass) {
          GbidClass = other.GbidClass;
        }
        if (other.HasIsFemale) {
          IsFemale = other.IsFemale;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pvpMatchPlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pvpMatchPlayerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAccountId = input.ReadUInt64(ref result.accountId_);
              break;
            }
            case 16: {
              result.hasGbidClass = input.ReadUInt32(ref result.gbidClass_);
              break;
            }
            case 24: {
              result.hasIsFemale = input.ReadBool(ref result.isFemale_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
        get { return result.hasAccountId; }
      }
      public ulong AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(ulong value) {
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = 0UL;
        return this;
      }
      
      public bool HasGbidClass {
        get { return result.hasGbidClass; }
      }
      public uint GbidClass {
        get { return result.GbidClass; }
        set { SetGbidClass(value); }
      }
      public Builder SetGbidClass(uint value) {
        PrepareBuilder();
        result.hasGbidClass = true;
        result.gbidClass_ = value;
        return this;
      }
      public Builder ClearGbidClass() {
        PrepareBuilder();
        result.hasGbidClass = false;
        result.gbidClass_ = 0;
        return this;
      }
      
      public bool HasIsFemale {
        get { return result.hasIsFemale; }
      }
      public bool IsFemale {
        get { return result.IsFemale; }
        set { SetIsFemale(value); }
      }
      public Builder SetIsFemale(bool value) {
        PrepareBuilder();
        result.hasIsFemale = true;
        result.isFemale_ = value;
        return this;
      }
      public Builder ClearIsFemale() {
        PrepareBuilder();
        result.hasIsFemale = false;
        result.isFemale_ = false;
        return this;
      }
    }
    static PvpMatchPlayer() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PvpMatchPlayers : pb::GeneratedMessage<PvpMatchPlayers, PvpMatchPlayers.Builder> {
    private PvpMatchPlayers() { }
    private static readonly PvpMatchPlayers defaultInstance = new PvpMatchPlayers().MakeReadOnly();
    private static readonly string[] _pvpMatchPlayersFieldNames = new string[] { "team_0", "team_1" };
    private static readonly uint[] _pvpMatchPlayersFieldTags = new uint[] { 10, 18 };
    public static PvpMatchPlayers DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PvpMatchPlayers DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PvpMatchPlayers ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_PvpMatchPlayers__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PvpMatchPlayers, PvpMatchPlayers.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_PvpMatchPlayers__FieldAccessorTable; }
    }
    
    public const int Team0FieldNumber = 1;
    private pbc::PopsicleList<global::D3.Profile.PvpMatchPlayer> team0_ = new pbc::PopsicleList<global::D3.Profile.PvpMatchPlayer>();
    public scg::IList<global::D3.Profile.PvpMatchPlayer> Team0List {
      get { return team0_; }
    }
    public int Team0Count {
      get { return team0_.Count; }
    }
    public global::D3.Profile.PvpMatchPlayer GetTeam0(int index) {
      return team0_[index];
    }
    
    public const int Team1FieldNumber = 2;
    private pbc::PopsicleList<global::D3.Profile.PvpMatchPlayer> team1_ = new pbc::PopsicleList<global::D3.Profile.PvpMatchPlayer>();
    public scg::IList<global::D3.Profile.PvpMatchPlayer> Team1List {
      get { return team1_; }
    }
    public int Team1Count {
      get { return team1_.Count; }
    }
    public global::D3.Profile.PvpMatchPlayer GetTeam1(int index) {
      return team1_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pvpMatchPlayersFieldNames;
      if (team0_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], team0_);
      }
      if (team1_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], team1_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Profile.PvpMatchPlayer element in Team0List) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        foreach (global::D3.Profile.PvpMatchPlayer element in Team1List) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PvpMatchPlayers ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpMatchPlayers ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpMatchPlayers ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpMatchPlayers ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpMatchPlayers ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpMatchPlayers ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PvpMatchPlayers ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PvpMatchPlayers ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PvpMatchPlayers ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpMatchPlayers ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PvpMatchPlayers MakeReadOnly() {
      team0_.MakeReadOnly();
      team1_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PvpMatchPlayers prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PvpMatchPlayers, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PvpMatchPlayers cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PvpMatchPlayers result;
      
      private PvpMatchPlayers PrepareBuilder() {
        if (resultIsReadOnly) {
          PvpMatchPlayers original = result;
          result = new PvpMatchPlayers();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PvpMatchPlayers MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.PvpMatchPlayers.Descriptor; }
      }
      
      public override PvpMatchPlayers DefaultInstanceForType {
        get { return global::D3.Profile.PvpMatchPlayers.DefaultInstance; }
      }
      
      public override PvpMatchPlayers BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PvpMatchPlayers) {
          return MergeFrom((PvpMatchPlayers) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PvpMatchPlayers other) {
        if (other == global::D3.Profile.PvpMatchPlayers.DefaultInstance) return this;
        PrepareBuilder();
        if (other.team0_.Count != 0) {
          result.team0_.Add(other.team0_);
        }
        if (other.team1_.Count != 0) {
          result.team1_.Add(other.team1_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pvpMatchPlayersFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pvpMatchPlayersFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.team0_, global::D3.Profile.PvpMatchPlayer.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.team1_, global::D3.Profile.PvpMatchPlayer.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Profile.PvpMatchPlayer> Team0List {
        get { return PrepareBuilder().team0_; }
      }
      public int Team0Count {
        get { return result.Team0Count; }
      }
      public global::D3.Profile.PvpMatchPlayer GetTeam0(int index) {
        return result.GetTeam0(index);
      }
      public Builder SetTeam0(int index, global::D3.Profile.PvpMatchPlayer value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.team0_[index] = value;
        return this;
      }
      public Builder SetTeam0(int index, global::D3.Profile.PvpMatchPlayer.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.team0_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTeam0(global::D3.Profile.PvpMatchPlayer value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.team0_.Add(value);
        return this;
      }
      public Builder AddTeam0(global::D3.Profile.PvpMatchPlayer.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.team0_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTeam0(scg::IEnumerable<global::D3.Profile.PvpMatchPlayer> values) {
        PrepareBuilder();
        result.team0_.Add(values);
        return this;
      }
      public Builder ClearTeam0() {
        PrepareBuilder();
        result.team0_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::D3.Profile.PvpMatchPlayer> Team1List {
        get { return PrepareBuilder().team1_; }
      }
      public int Team1Count {
        get { return result.Team1Count; }
      }
      public global::D3.Profile.PvpMatchPlayer GetTeam1(int index) {
        return result.GetTeam1(index);
      }
      public Builder SetTeam1(int index, global::D3.Profile.PvpMatchPlayer value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.team1_[index] = value;
        return this;
      }
      public Builder SetTeam1(int index, global::D3.Profile.PvpMatchPlayer.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.team1_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTeam1(global::D3.Profile.PvpMatchPlayer value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.team1_.Add(value);
        return this;
      }
      public Builder AddTeam1(global::D3.Profile.PvpMatchPlayer.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.team1_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTeam1(scg::IEnumerable<global::D3.Profile.PvpMatchPlayer> values) {
        PrepareBuilder();
        result.team1_.Add(values);
        return this;
      }
      public Builder ClearTeam1() {
        PrepareBuilder();
        result.team1_.Clear();
        return this;
      }
    }
    static PvpMatchPlayers() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PvpMatch : pb::GeneratedMessage<PvpMatch, PvpMatch.Builder> {
    private PvpMatch() { }
    private static readonly PvpMatch defaultInstance = new PvpMatch().MakeReadOnly();
    private static readonly string[] _pvpMatchFieldNames = new string[] { "arena", "game_mode", "hero_id", "play_time", "players", "score_team_0", "score_team_1" };
    private static readonly uint[] _pvpMatchFieldTags = new uint[] { 8, 56, 48, 40, 18, 24, 32 };
    public static PvpMatch DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PvpMatch DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PvpMatch ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_PvpMatch__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PvpMatch, PvpMatch.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_PvpMatch__FieldAccessorTable; }
    }
    
    public const int ArenaFieldNumber = 1;
    private bool hasArena;
    private uint arena_;
    public bool HasArena {
      get { return hasArena; }
    }
    public uint Arena {
      get { return arena_; }
    }
    
    public const int PlayersFieldNumber = 2;
    private bool hasPlayers;
    private global::D3.Profile.PvpMatchPlayers players_;
    public bool HasPlayers {
      get { return hasPlayers; }
    }
    public global::D3.Profile.PvpMatchPlayers Players {
      get { return players_ ?? global::D3.Profile.PvpMatchPlayers.DefaultInstance; }
    }
    
    public const int ScoreTeam0FieldNumber = 3;
    private bool hasScoreTeam0;
    private uint scoreTeam0_;
    public bool HasScoreTeam0 {
      get { return hasScoreTeam0; }
    }
    public uint ScoreTeam0 {
      get { return scoreTeam0_; }
    }
    
    public const int ScoreTeam1FieldNumber = 4;
    private bool hasScoreTeam1;
    private uint scoreTeam1_;
    public bool HasScoreTeam1 {
      get { return hasScoreTeam1; }
    }
    public uint ScoreTeam1 {
      get { return scoreTeam1_; }
    }
    
    public const int PlayTimeFieldNumber = 5;
    private bool hasPlayTime;
    private uint playTime_;
    public bool HasPlayTime {
      get { return hasPlayTime; }
    }
    public uint PlayTime {
      get { return playTime_; }
    }
    
    public const int HeroIdFieldNumber = 6;
    private bool hasHeroId;
    private uint heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public uint HeroId {
      get { return heroId_; }
    }
    
    public const int GameModeFieldNumber = 7;
    private bool hasGameMode;
    private uint gameMode_;
    public bool HasGameMode {
      get { return hasGameMode; }
    }
    public uint GameMode {
      get { return gameMode_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pvpMatchFieldNames;
      if (hasArena) {
        output.WriteUInt32(1, field_names[0], Arena);
      }
      if (hasPlayers) {
        output.WriteMessage(2, field_names[4], Players);
      }
      if (hasScoreTeam0) {
        output.WriteUInt32(3, field_names[5], ScoreTeam0);
      }
      if (hasScoreTeam1) {
        output.WriteUInt32(4, field_names[6], ScoreTeam1);
      }
      if (hasPlayTime) {
        output.WriteUInt32(5, field_names[3], PlayTime);
      }
      if (hasHeroId) {
        output.WriteUInt32(6, field_names[2], HeroId);
      }
      if (hasGameMode) {
        output.WriteUInt32(7, field_names[1], GameMode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasArena) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Arena);
        }
        if (hasPlayers) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Players);
        }
        if (hasScoreTeam0) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, ScoreTeam0);
        }
        if (hasScoreTeam1) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, ScoreTeam1);
        }
        if (hasPlayTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, PlayTime);
        }
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, HeroId);
        }
        if (hasGameMode) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, GameMode);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PvpMatch ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpMatch ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpMatch ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpMatch ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpMatch ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpMatch ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PvpMatch ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PvpMatch ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PvpMatch ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpMatch ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PvpMatch MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PvpMatch prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PvpMatch, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PvpMatch cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PvpMatch result;
      
      private PvpMatch PrepareBuilder() {
        if (resultIsReadOnly) {
          PvpMatch original = result;
          result = new PvpMatch();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PvpMatch MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.PvpMatch.Descriptor; }
      }
      
      public override PvpMatch DefaultInstanceForType {
        get { return global::D3.Profile.PvpMatch.DefaultInstance; }
      }
      
      public override PvpMatch BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PvpMatch) {
          return MergeFrom((PvpMatch) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PvpMatch other) {
        if (other == global::D3.Profile.PvpMatch.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasArena) {
          Arena = other.Arena;
        }
        if (other.HasPlayers) {
          MergePlayers(other.Players);
        }
        if (other.HasScoreTeam0) {
          ScoreTeam0 = other.ScoreTeam0;
        }
        if (other.HasScoreTeam1) {
          ScoreTeam1 = other.ScoreTeam1;
        }
        if (other.HasPlayTime) {
          PlayTime = other.PlayTime;
        }
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        if (other.HasGameMode) {
          GameMode = other.GameMode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pvpMatchFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pvpMatchFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasArena = input.ReadUInt32(ref result.arena_);
              break;
            }
            case 18: {
              global::D3.Profile.PvpMatchPlayers.Builder subBuilder = global::D3.Profile.PvpMatchPlayers.CreateBuilder();
              if (result.hasPlayers) {
                subBuilder.MergeFrom(Players);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Players = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasScoreTeam0 = input.ReadUInt32(ref result.scoreTeam0_);
              break;
            }
            case 32: {
              result.hasScoreTeam1 = input.ReadUInt32(ref result.scoreTeam1_);
              break;
            }
            case 40: {
              result.hasPlayTime = input.ReadUInt32(ref result.playTime_);
              break;
            }
            case 48: {
              result.hasHeroId = input.ReadUInt32(ref result.heroId_);
              break;
            }
            case 56: {
              result.hasGameMode = input.ReadUInt32(ref result.gameMode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasArena {
        get { return result.hasArena; }
      }
      public uint Arena {
        get { return result.Arena; }
        set { SetArena(value); }
      }
      public Builder SetArena(uint value) {
        PrepareBuilder();
        result.hasArena = true;
        result.arena_ = value;
        return this;
      }
      public Builder ClearArena() {
        PrepareBuilder();
        result.hasArena = false;
        result.arena_ = 0;
        return this;
      }
      
      public bool HasPlayers {
       get { return result.hasPlayers; }
      }
      public global::D3.Profile.PvpMatchPlayers Players {
        get { return result.Players; }
        set { SetPlayers(value); }
      }
      public Builder SetPlayers(global::D3.Profile.PvpMatchPlayers value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayers = true;
        result.players_ = value;
        return this;
      }
      public Builder SetPlayers(global::D3.Profile.PvpMatchPlayers.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayers = true;
        result.players_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayers(global::D3.Profile.PvpMatchPlayers value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayers &&
            result.players_ != global::D3.Profile.PvpMatchPlayers.DefaultInstance) {
            result.players_ = global::D3.Profile.PvpMatchPlayers.CreateBuilder(result.players_).MergeFrom(value).BuildPartial();
        } else {
          result.players_ = value;
        }
        result.hasPlayers = true;
        return this;
      }
      public Builder ClearPlayers() {
        PrepareBuilder();
        result.hasPlayers = false;
        result.players_ = null;
        return this;
      }
      
      public bool HasScoreTeam0 {
        get { return result.hasScoreTeam0; }
      }
      public uint ScoreTeam0 {
        get { return result.ScoreTeam0; }
        set { SetScoreTeam0(value); }
      }
      public Builder SetScoreTeam0(uint value) {
        PrepareBuilder();
        result.hasScoreTeam0 = true;
        result.scoreTeam0_ = value;
        return this;
      }
      public Builder ClearScoreTeam0() {
        PrepareBuilder();
        result.hasScoreTeam0 = false;
        result.scoreTeam0_ = 0;
        return this;
      }
      
      public bool HasScoreTeam1 {
        get { return result.hasScoreTeam1; }
      }
      public uint ScoreTeam1 {
        get { return result.ScoreTeam1; }
        set { SetScoreTeam1(value); }
      }
      public Builder SetScoreTeam1(uint value) {
        PrepareBuilder();
        result.hasScoreTeam1 = true;
        result.scoreTeam1_ = value;
        return this;
      }
      public Builder ClearScoreTeam1() {
        PrepareBuilder();
        result.hasScoreTeam1 = false;
        result.scoreTeam1_ = 0;
        return this;
      }
      
      public bool HasPlayTime {
        get { return result.hasPlayTime; }
      }
      public uint PlayTime {
        get { return result.PlayTime; }
        set { SetPlayTime(value); }
      }
      public Builder SetPlayTime(uint value) {
        PrepareBuilder();
        result.hasPlayTime = true;
        result.playTime_ = value;
        return this;
      }
      public Builder ClearPlayTime() {
        PrepareBuilder();
        result.hasPlayTime = false;
        result.playTime_ = 0;
        return this;
      }
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public uint HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(uint value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0;
        return this;
      }
      
      public bool HasGameMode {
        get { return result.hasGameMode; }
      }
      public uint GameMode {
        get { return result.GameMode; }
        set { SetGameMode(value); }
      }
      public Builder SetGameMode(uint value) {
        PrepareBuilder();
        result.hasGameMode = true;
        result.gameMode_ = value;
        return this;
      }
      public Builder ClearGameMode() {
        PrepareBuilder();
        result.hasGameMode = false;
        result.gameMode_ = 0;
        return this;
      }
    }
    static PvpMatch() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PvpMatchList : pb::GeneratedMessage<PvpMatchList, PvpMatchList.Builder> {
    private PvpMatchList() { }
    private static readonly PvpMatchList defaultInstance = new PvpMatchList().MakeReadOnly();
    private static readonly string[] _pvpMatchListFieldNames = new string[] { "matches" };
    private static readonly uint[] _pvpMatchListFieldTags = new uint[] { 10 };
    public static PvpMatchList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PvpMatchList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PvpMatchList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_PvpMatchList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PvpMatchList, PvpMatchList.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_PvpMatchList__FieldAccessorTable; }
    }
    
    public const int MatchesFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Profile.PvpMatch> matches_ = new pbc::PopsicleList<global::D3.Profile.PvpMatch>();
    public scg::IList<global::D3.Profile.PvpMatch> MatchesList {
      get { return matches_; }
    }
    public int MatchesCount {
      get { return matches_.Count; }
    }
    public global::D3.Profile.PvpMatch GetMatches(int index) {
      return matches_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pvpMatchListFieldNames;
      if (matches_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], matches_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Profile.PvpMatch element in MatchesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PvpMatchList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpMatchList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpMatchList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpMatchList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpMatchList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpMatchList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PvpMatchList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PvpMatchList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PvpMatchList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpMatchList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PvpMatchList MakeReadOnly() {
      matches_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PvpMatchList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PvpMatchList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PvpMatchList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PvpMatchList result;
      
      private PvpMatchList PrepareBuilder() {
        if (resultIsReadOnly) {
          PvpMatchList original = result;
          result = new PvpMatchList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PvpMatchList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.PvpMatchList.Descriptor; }
      }
      
      public override PvpMatchList DefaultInstanceForType {
        get { return global::D3.Profile.PvpMatchList.DefaultInstance; }
      }
      
      public override PvpMatchList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PvpMatchList) {
          return MergeFrom((PvpMatchList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PvpMatchList other) {
        if (other == global::D3.Profile.PvpMatchList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.matches_.Count != 0) {
          result.matches_.Add(other.matches_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pvpMatchListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pvpMatchListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.matches_, global::D3.Profile.PvpMatch.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Profile.PvpMatch> MatchesList {
        get { return PrepareBuilder().matches_; }
      }
      public int MatchesCount {
        get { return result.MatchesCount; }
      }
      public global::D3.Profile.PvpMatch GetMatches(int index) {
        return result.GetMatches(index);
      }
      public Builder SetMatches(int index, global::D3.Profile.PvpMatch value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.matches_[index] = value;
        return this;
      }
      public Builder SetMatches(int index, global::D3.Profile.PvpMatch.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.matches_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMatches(global::D3.Profile.PvpMatch value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.matches_.Add(value);
        return this;
      }
      public Builder AddMatches(global::D3.Profile.PvpMatch.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.matches_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMatches(scg::IEnumerable<global::D3.Profile.PvpMatch> values) {
        PrepareBuilder();
        result.matches_.Add(values);
        return this;
      }
      public Builder ClearMatches() {
        PrepareBuilder();
        result.matches_.Clear();
        return this;
      }
    }
    static PvpMatchList() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PvpTeam : pb::GeneratedMessage<PvpTeam, PvpTeam.Builder> {
    private PvpTeam() { }
    private static readonly PvpTeam defaultInstance = new PvpTeam().MakeReadOnly();
    private static readonly string[] _pvpTeamFieldNames = new string[] { "bootstrap", "game_mode", "games_played", "last_played", "num_members", "rating", "rating_variance", "team_id" };
    private static readonly uint[] _pvpTeamFieldTags = new uint[] { 37, 64, 40, 48, 56, 21, 29, 8 };
    public static PvpTeam DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PvpTeam DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PvpTeam ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_PvpTeam__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PvpTeam, PvpTeam.Builder> InternalFieldAccessors {
      get { return global::D3.Profile.Profile.internal__static_D3_Profile_PvpTeam__FieldAccessorTable; }
    }
    
    public const int TeamIdFieldNumber = 1;
    private bool hasTeamId;
    private ulong teamId_;
    public bool HasTeamId {
      get { return hasTeamId; }
    }
    public ulong TeamId {
      get { return teamId_; }
    }
    
    public const int RatingFieldNumber = 2;
    private bool hasRating;
    private float rating_;
    public bool HasRating {
      get { return hasRating; }
    }
    public float Rating {
      get { return rating_; }
    }
    
    public const int RatingVarianceFieldNumber = 3;
    private bool hasRatingVariance;
    private float ratingVariance_;
    public bool HasRatingVariance {
      get { return hasRatingVariance; }
    }
    public float RatingVariance {
      get { return ratingVariance_; }
    }
    
    public const int BootstrapFieldNumber = 4;
    private bool hasBootstrap;
    private float bootstrap_;
    public bool HasBootstrap {
      get { return hasBootstrap; }
    }
    public float Bootstrap {
      get { return bootstrap_; }
    }
    
    public const int GamesPlayedFieldNumber = 5;
    private bool hasGamesPlayed;
    private int gamesPlayed_;
    public bool HasGamesPlayed {
      get { return hasGamesPlayed; }
    }
    public int GamesPlayed {
      get { return gamesPlayed_; }
    }
    
    public const int LastPlayedFieldNumber = 6;
    private bool hasLastPlayed;
    private uint lastPlayed_;
    public bool HasLastPlayed {
      get { return hasLastPlayed; }
    }
    public uint LastPlayed {
      get { return lastPlayed_; }
    }
    
    public const int NumMembersFieldNumber = 7;
    private bool hasNumMembers;
    private int numMembers_;
    public bool HasNumMembers {
      get { return hasNumMembers; }
    }
    public int NumMembers {
      get { return numMembers_; }
    }
    
    public const int GameModeFieldNumber = 8;
    private bool hasGameMode;
    private int gameMode_;
    public bool HasGameMode {
      get { return hasGameMode; }
    }
    public int GameMode {
      get { return gameMode_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pvpTeamFieldNames;
      if (hasTeamId) {
        output.WriteUInt64(1, field_names[7], TeamId);
      }
      if (hasRating) {
        output.WriteFloat(2, field_names[5], Rating);
      }
      if (hasRatingVariance) {
        output.WriteFloat(3, field_names[6], RatingVariance);
      }
      if (hasBootstrap) {
        output.WriteFloat(4, field_names[0], Bootstrap);
      }
      if (hasGamesPlayed) {
        output.WriteInt32(5, field_names[2], GamesPlayed);
      }
      if (hasLastPlayed) {
        output.WriteUInt32(6, field_names[3], LastPlayed);
      }
      if (hasNumMembers) {
        output.WriteInt32(7, field_names[4], NumMembers);
      }
      if (hasGameMode) {
        output.WriteInt32(8, field_names[1], GameMode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTeamId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, TeamId);
        }
        if (hasRating) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, Rating);
        }
        if (hasRatingVariance) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, RatingVariance);
        }
        if (hasBootstrap) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, Bootstrap);
        }
        if (hasGamesPlayed) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, GamesPlayed);
        }
        if (hasLastPlayed) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, LastPlayed);
        }
        if (hasNumMembers) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, NumMembers);
        }
        if (hasGameMode) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, GameMode);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PvpTeam ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpTeam ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpTeam ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PvpTeam ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PvpTeam ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpTeam ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PvpTeam ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PvpTeam ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PvpTeam ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PvpTeam ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PvpTeam MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PvpTeam prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PvpTeam, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PvpTeam cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PvpTeam result;
      
      private PvpTeam PrepareBuilder() {
        if (resultIsReadOnly) {
          PvpTeam original = result;
          result = new PvpTeam();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PvpTeam MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Profile.PvpTeam.Descriptor; }
      }
      
      public override PvpTeam DefaultInstanceForType {
        get { return global::D3.Profile.PvpTeam.DefaultInstance; }
      }
      
      public override PvpTeam BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PvpTeam) {
          return MergeFrom((PvpTeam) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PvpTeam other) {
        if (other == global::D3.Profile.PvpTeam.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTeamId) {
          TeamId = other.TeamId;
        }
        if (other.HasRating) {
          Rating = other.Rating;
        }
        if (other.HasRatingVariance) {
          RatingVariance = other.RatingVariance;
        }
        if (other.HasBootstrap) {
          Bootstrap = other.Bootstrap;
        }
        if (other.HasGamesPlayed) {
          GamesPlayed = other.GamesPlayed;
        }
        if (other.HasLastPlayed) {
          LastPlayed = other.LastPlayed;
        }
        if (other.HasNumMembers) {
          NumMembers = other.NumMembers;
        }
        if (other.HasGameMode) {
          GameMode = other.GameMode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pvpTeamFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pvpTeamFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTeamId = input.ReadUInt64(ref result.teamId_);
              break;
            }
            case 21: {
              result.hasRating = input.ReadFloat(ref result.rating_);
              break;
            }
            case 29: {
              result.hasRatingVariance = input.ReadFloat(ref result.ratingVariance_);
              break;
            }
            case 37: {
              result.hasBootstrap = input.ReadFloat(ref result.bootstrap_);
              break;
            }
            case 40: {
              result.hasGamesPlayed = input.ReadInt32(ref result.gamesPlayed_);
              break;
            }
            case 48: {
              result.hasLastPlayed = input.ReadUInt32(ref result.lastPlayed_);
              break;
            }
            case 56: {
              result.hasNumMembers = input.ReadInt32(ref result.numMembers_);
              break;
            }
            case 64: {
              result.hasGameMode = input.ReadInt32(ref result.gameMode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTeamId {
        get { return result.hasTeamId; }
      }
      public ulong TeamId {
        get { return result.TeamId; }
        set { SetTeamId(value); }
      }
      public Builder SetTeamId(ulong value) {
        PrepareBuilder();
        result.hasTeamId = true;
        result.teamId_ = value;
        return this;
      }
      public Builder ClearTeamId() {
        PrepareBuilder();
        result.hasTeamId = false;
        result.teamId_ = 0UL;
        return this;
      }
      
      public bool HasRating {
        get { return result.hasRating; }
      }
      public float Rating {
        get { return result.Rating; }
        set { SetRating(value); }
      }
      public Builder SetRating(float value) {
        PrepareBuilder();
        result.hasRating = true;
        result.rating_ = value;
        return this;
      }
      public Builder ClearRating() {
        PrepareBuilder();
        result.hasRating = false;
        result.rating_ = 0F;
        return this;
      }
      
      public bool HasRatingVariance {
        get { return result.hasRatingVariance; }
      }
      public float RatingVariance {
        get { return result.RatingVariance; }
        set { SetRatingVariance(value); }
      }
      public Builder SetRatingVariance(float value) {
        PrepareBuilder();
        result.hasRatingVariance = true;
        result.ratingVariance_ = value;
        return this;
      }
      public Builder ClearRatingVariance() {
        PrepareBuilder();
        result.hasRatingVariance = false;
        result.ratingVariance_ = 0F;
        return this;
      }
      
      public bool HasBootstrap {
        get { return result.hasBootstrap; }
      }
      public float Bootstrap {
        get { return result.Bootstrap; }
        set { SetBootstrap(value); }
      }
      public Builder SetBootstrap(float value) {
        PrepareBuilder();
        result.hasBootstrap = true;
        result.bootstrap_ = value;
        return this;
      }
      public Builder ClearBootstrap() {
        PrepareBuilder();
        result.hasBootstrap = false;
        result.bootstrap_ = 0F;
        return this;
      }
      
      public bool HasGamesPlayed {
        get { return result.hasGamesPlayed; }
      }
      public int GamesPlayed {
        get { return result.GamesPlayed; }
        set { SetGamesPlayed(value); }
      }
      public Builder SetGamesPlayed(int value) {
        PrepareBuilder();
        result.hasGamesPlayed = true;
        result.gamesPlayed_ = value;
        return this;
      }
      public Builder ClearGamesPlayed() {
        PrepareBuilder();
        result.hasGamesPlayed = false;
        result.gamesPlayed_ = 0;
        return this;
      }
      
      public bool HasLastPlayed {
        get { return result.hasLastPlayed; }
      }
      public uint LastPlayed {
        get { return result.LastPlayed; }
        set { SetLastPlayed(value); }
      }
      public Builder SetLastPlayed(uint value) {
        PrepareBuilder();
        result.hasLastPlayed = true;
        result.lastPlayed_ = value;
        return this;
      }
      public Builder ClearLastPlayed() {
        PrepareBuilder();
        result.hasLastPlayed = false;
        result.lastPlayed_ = 0;
        return this;
      }
      
      public bool HasNumMembers {
        get { return result.hasNumMembers; }
      }
      public int NumMembers {
        get { return result.NumMembers; }
        set { SetNumMembers(value); }
      }
      public Builder SetNumMembers(int value) {
        PrepareBuilder();
        result.hasNumMembers = true;
        result.numMembers_ = value;
        return this;
      }
      public Builder ClearNumMembers() {
        PrepareBuilder();
        result.hasNumMembers = false;
        result.numMembers_ = 0;
        return this;
      }
      
      public bool HasGameMode {
        get { return result.hasGameMode; }
      }
      public int GameMode {
        get { return result.GameMode; }
        set { SetGameMode(value); }
      }
      public Builder SetGameMode(int value) {
        PrepareBuilder();
        result.hasGameMode = true;
        result.gameMode_ = value;
        return this;
      }
      public Builder ClearGameMode() {
        PrepareBuilder();
        result.hasGameMode = false;
        result.gameMode_ = 0;
        return this;
      }
    }
    static PvpTeam() {
      object.ReferenceEquals(global::D3.Profile.Profile.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
