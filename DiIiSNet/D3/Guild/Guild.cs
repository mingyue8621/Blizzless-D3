// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace D3.Guild {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class Guild {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_D3_Guild_Rank__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.Rank, global::D3.Guild.Rank.Builder> internal__static_D3_Guild_Rank__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_RankList__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.RankList, global::D3.Guild.RankList.Builder> internal__static_D3_Guild_RankList__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_Member__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.Member, global::D3.Guild.Member.Builder> internal__static_D3_Guild_Member__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_MemberList__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.MemberList, global::D3.Guild.MemberList.Builder> internal__static_D3_Guild_MemberList__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_News__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.News, global::D3.Guild.News.Builder> internal__static_D3_Guild_News__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_NewsList__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.NewsList, global::D3.Guild.NewsList.Builder> internal__static_D3_Guild_NewsList__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_NewsPost__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.NewsPost, global::D3.Guild.NewsPost.Builder> internal__static_D3_Guild_NewsPost__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_Invite__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.Invite, global::D3.Guild.Invite.Builder> internal__static_D3_Guild_Invite__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_InviteList__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.InviteList, global::D3.Guild.InviteList.Builder> internal__static_D3_Guild_InviteList__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_AchievementNews__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.AchievementNews, global::D3.Guild.AchievementNews.Builder> internal__static_D3_Guild_AchievementNews__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_HardcoreDeathNews__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.HardcoreDeathNews, global::D3.Guild.HardcoreDeathNews.Builder> internal__static_D3_Guild_HardcoreDeathNews__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_KickedNews__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.KickedNews, global::D3.Guild.KickedNews.Builder> internal__static_D3_Guild_KickedNews__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_Guild__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.Guild, global::D3.Guild.Guild.Builder> internal__static_D3_Guild_Guild__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_GuildList__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GuildList, global::D3.Guild.GuildList.Builder> internal__static_D3_Guild_GuildList__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_InviteInfo__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.InviteInfo, global::D3.Guild.InviteInfo.Builder> internal__static_D3_Guild_InviteInfo__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_InviteInfoList__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.InviteInfoList, global::D3.Guild.InviteInfoList.Builder> internal__static_D3_Guild_InviteInfoList__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_GuildInfo__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GuildInfo, global::D3.Guild.GuildInfo.Builder> internal__static_D3_Guild_GuildInfo__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_GuildInfoList__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GuildInfoList, global::D3.Guild.GuildInfoList.Builder> internal__static_D3_Guild_GuildInfoList__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_GuildSearchResult__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GuildSearchResult, global::D3.Guild.GuildSearchResult.Builder> internal__static_D3_Guild_GuildSearchResult__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_GuildSearchResultList__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GuildSearchResultList, global::D3.Guild.GuildSearchResultList.Builder> internal__static_D3_Guild_GuildSearchResultList__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_SearchAttributes__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.SearchAttributes, global::D3.Guild.SearchAttributes.Builder> internal__static_D3_Guild_SearchAttributes__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_SearchAttributesList__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.SearchAttributesList, global::D3.Guild.SearchAttributesList.Builder> internal__static_D3_Guild_SearchAttributesList__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_GroupRosterResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GroupRosterResponse, global::D3.Guild.GroupRosterResponse.Builder> internal__static_D3_Guild_GroupRosterResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_GuildSummary__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GuildSummary, global::D3.Guild.GuildSummary.Builder> internal__static_D3_Guild_GuildSummary__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_GroupMembership__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GroupMembership, global::D3.Guild.GroupMembership.Builder> internal__static_D3_Guild_GroupMembership__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_ExtendedInfo__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.ExtendedInfo, global::D3.Guild.ExtendedInfo.Builder> internal__static_D3_Guild_ExtendedInfo__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_D3_Guild_GuildAccountRestrictions__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GuildAccountRestrictions, global::D3.Guild.GuildAccountRestrictions.Builder> internal__static_D3_Guild_GuildAccountRestrictions__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static Guild() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "CgtHdWlsZC5wcm90bxIIRDMuR3VpbGQaE09ubGluZVNlcnZpY2UucHJvdG8i" + 
            "dAoEUmFuaxIXCgdyYW5rX2lkGAEgAigNUgZyYW5rSWQSHQoKcmFua19vcmRl" + 
            "chgCIAIoDVIJcmFua09yZGVyEhIKBG5hbWUYAyACKAlSBG5hbWUSIAoLcGVy" + 
            "bWlzc2lvbnMYBCACKA1SC3Blcm1pc3Npb25zIjAKCFJhbmtMaXN0EiQKBXJh" + 
            "bmtzGAEgAygLMg4uRDMuR3VpbGQuUmFua1IFcmFua3MioAEKBk1lbWJlchId" + 
            "CgphY2NvdW50X2lkGAEgAigEUglhY2NvdW50SWQSFwoHcmFua19pZBgCIAIo" + 
            "DVIGcmFua0lkEhIKBG5vdGUYAyACKAlSBG5vdGUSGwoJbmV3c190aW1lGAQg" + 
            "AigEUghuZXdzVGltZRItChJhY2hpZXZlbWVudF9wb2ludHMYBSACKA1SEWFj" + 
            "aGlldmVtZW50UG9pbnRzIjgKCk1lbWJlckxpc3QSKgoHbWVtYmVycxgBIAMo" + 
            "CzIQLkQzLkd1aWxkLk1lbWJlclIHbWVtYmVycyK0AQoETmV3cxIXCgduZXdz" + 
            "X2lkGAEgAigEUgZuZXdzSWQSHQoKYWNjb3VudF9pZBgCIAIoBFIJYWNjb3Vu" + 
            "dElkEhsKCW5ld3NfdHlwZRgDIAIoDVIIbmV3c1R5cGUSGwoJbmV3c190aW1l" + 
            "GAQgAigEUghuZXdzVGltZRIbCgluZXdzX2RhdGEYBSABKAxSCG5ld3NEYXRh" + 
            "Eh0KCm5ld3NfZmxhZ3MYBiABKA1SCW5ld3NGbGFncyI2CghOZXdzTGlzdBIq" + 
            "CghOZXdzUHJvcBgBIAMoCzIOLkQzLkd1aWxkLk5ld3NSCE5ld3NQcm9wIjoK" + 
            "CE5ld3NQb3N0EhoKCGhlYWRsaW5lGAEgAigJUghoZWFkbGluZRISCgRib2R5" + 
            "GAIgAigJUgRib2R5IqkBCgZJbnZpdGUSHQoKYWNjb3VudF9pZBgBIAIoBFIJ" + 
            "YWNjb3VudElkEh0KCmludml0ZXJfaWQYAiACKARSCWludml0ZXJJZBIfCgtp" + 
            "bnZpdGVfdGltZRgDIAIoDVIKaW52aXRlVGltZRIfCgtpbnZpdGVfdHlwZRgE" + 
            "IAIoDVIKaW52aXRlVHlwZRIfCgtleHBpcmVfdGltZRgFIAIoDVIKZXhwaXJl" + 
            "VGltZSI4CgpJbnZpdGVMaXN0EioKB2ludml0ZXMYASADKAsyEC5EMy5HdWls" + 
            "ZC5JbnZpdGVSB2ludml0ZXMiOAoPQWNoaWV2ZW1lbnROZXdzEiUKDmFjaGll" + 
            "dmVtZW50X2lkGAEgAigEUg1hY2hpZXZlbWVudElkIv8BChFIYXJkY29yZURl" + 
            "YXRoTmV3cxIzCgdoZXJvX2lkGAEgAigLMhouRDMuT25saW5lU2VydmljZS5F" + 
            "bnRpdHlJZFIGaGVyb0lkEhsKCWhlcm9fbmFtZRgCIAIoCVIIaGVyb05hbWUS" + 
            "HQoKaGVyb19sZXZlbBgDIAIoEVIJaGVyb0xldmVsEioKEWhlcm9fcGxheWVy" + 
            "X2ZsYWdzGAQgAigNUg9oZXJvUGxheWVyRmxhZ3MSHQoKaGVyb19jbGFzcxgF" + 
            "IAIoD1IJaGVyb0NsYXNzEi4KE2hlcm9fc2Vjb25kc19wbGF5ZWQYBiACKARS" + 
            "EWhlcm9TZWNvbmRzUGxheWVkIikKCktpY2tlZE5ld3MSGwoJa2lja2VyX2lk" + 
            "GAEgAigEUghraWNrZXJJZCLjBgoFR3VpbGQSGQoIZ3VpbGRfaWQYASACKARS" + 
            "B2d1aWxkSWQSGAoHY3JlYXRvchgCIAEoBFIHY3JlYXRvchIfCgtjcmVhdGVf" + 
            "dGltZRgDIAEoDVIKY3JlYXRlVGltZRISCgRuYW1lGAQgASgJUgRuYW1lEhIK" + 
            "BG1vdGQYBSABKAlSBG1vdGQSJgoEbmV3cxgGIAEoCzISLkQzLkd1aWxkLk5l" + 
            "d3NMaXN0UgRuZXdzEigKBXJhbmtzGAcgASgLMhIuRDMuR3VpbGQuUmFua0xp" + 
            "c3RSBXJhbmtzEi4KB21lbWJlcnMYCCABKAsyFC5EMy5HdWlsZC5NZW1iZXJM" + 
            "aXN0UgdtZW1iZXJzEiMKDXRvdGFsX21lbWJlcnMYCSABKA1SDHRvdGFsTWVt" + 
            "YmVycxIQCgN0YWcYCyABKAlSA3RhZxIaCghjYXRlZ29yeRgMIAEoDVIIY2F0" + 
            "ZWdvcnkSLwoTcmVxdWlyZXNfaW52aXRhdGlvbhgNIAEoCFIScmVxdWlyZXNJ" + 
            "bnZpdGF0aW9uEiAKC2Rlc2NyaXB0aW9uGA4gASgJUgtkZXNjcmlwdGlvbhIa" + 
            "CghsYW5ndWFnZRgPIAEoDVIIbGFuZ3VhZ2USLgoHaW52aXRlcxgQIAEoCzIU" + 
            "LkQzLkd1aWxkLkludml0ZUxpc3RSB2ludml0ZXMSHgoKc2VhcmNoYWJsZRgR" + 
            "IAEoCFIKc2VhcmNoYWJsZRIrChFhbGxvd19zdWdnZXN0aW9ucxgSIAEoCFIQ" + 
            "YWxsb3dTdWdnZXN0aW9ucxInCg9zZWFyY2hfY2F0ZWdvcnkYEyABKA1SDnNl" + 
            "YXJjaENhdGVnb3J5EjEKFW1vdGRfbGFzdF91cGRhdGVfdGltZRgUIAEoDVIS" + 
            "bW90ZExhc3RVcGRhdGVUaW1lEjcKGG1vdGRfbGFzdF91cGRhdGVfYWNjb3Vu" + 
            "dBgVIAEoBFIVbW90ZExhc3RVcGRhdGVBY2NvdW50Ej8KHGRlc2NyaXB0aW9u" + 
            "X2xhc3RfdXBkYXRlX3RpbWUYFiABKA1SGWRlc2NyaXB0aW9uTGFzdFVwZGF0" + 
            "ZVRpbWUSRQofZGVzY3JpcHRpb25fbGFzdF91cGRhdGVfYWNjb3VudBgXIAEo" + 
            "BFIcZGVzY3JpcHRpb25MYXN0VXBkYXRlQWNjb3VudCIoCglHdWlsZExpc3QS" + 
            "GwoJZ3VpbGRfaWRzGAEgAygEUghndWlsZElkcyLgAQoKSW52aXRlSW5mbxIZ" + 
            "CghndWlsZF9pZBgBIAIoBFIHZ3VpbGRJZBIdCgpndWlsZF9uYW1lGAIgAigJ" + 
            "UglndWlsZE5hbWUSHQoKaW52aXRlcl9pZBgDIAIoBFIJaW52aXRlcklkEhoK" + 
            "CGNhdGVnb3J5GAQgAigNUghjYXRlZ29yeRIfCgtpbnZpdGVfdHlwZRgFIAIo" + 
            "DVIKaW52aXRlVHlwZRIfCgtleHBpcmVfdGltZRgGIAIoDVIKZXhwaXJlVGlt" + 
            "ZRIbCglndWlsZF90YWcYByABKAlSCGd1aWxkVGFnIkAKDkludml0ZUluZm9M" + 
            "aXN0Ei4KB2ludml0ZXMYASADKAsyFC5EMy5HdWlsZC5JbnZpdGVJbmZvUgdp" + 
            "bnZpdGVzIs4DCglHdWlsZEluZm8SGQoIZ3VpbGRfaWQYASACKARSB2d1aWxk" + 
            "SWQSJQoOZ3VpbGRfY2F0ZWdvcnkYAiACKA1SDWd1aWxkQ2F0ZWdvcnkSEgoE" + 
            "bmFtZRgDIAEoCVIEbmFtZRIQCgN0YWcYCiABKAlSA3RhZxInCg9yZXF1aXJl" + 
            "c19pbnZpdGUYCyABKAhSDnJlcXVpcmVzSW52aXRlEisKEG1lbWJlcl9uZXdz" + 
            "X3RpbWUYBCABKAQ6ATBSDm1lbWJlck5ld3NUaW1lEiYKDXRvdGFsX21lbWJl" + 
            "cnMYBSABKA06ATBSDHRvdGFsTWVtYmVycxIpCg9ndWlsZF9sZWFkZXJfaWQY" + 
            "BiABKAQ6ATBSDWd1aWxkTGVhZGVySWQSMAoUdmFsaWRhdGVkX21lbWJlcl9p" + 
            "ZHMYByADKARSEnZhbGlkYXRlZE1lbWJlcklkcxIXCgdyYW5rX2lkGAggASgN" + 
            "UgZyYW5rSWQSHgoKc2VhcmNoYWJsZRgJIAEoCFIKc2VhcmNoYWJsZRIrChFh" + 
            "bGxvd19zdWdnZXN0aW9ucxgNIAEoCFIQYWxsb3dTdWdnZXN0aW9ucxIYCgdk" + 
            "ZWxldGVkGAwgASgIUgdkZWxldGVkIjwKDUd1aWxkSW5mb0xpc3QSKwoGZ3Vp" + 
            "bGRzGAEgAygLMhMuRDMuR3VpbGQuR3VpbGRJbmZvUgZndWlsZHMinQMKEUd1" + 
            "aWxkU2VhcmNoUmVzdWx0EhkKCGd1aWxkX2lkGAEgAigEUgdndWlsZElkEh0K" + 
            "Cmd1aWxkX25hbWUYAiACKAlSCWd1aWxkTmFtZRIbCglndWlsZF90YWcYAyAB" + 
            "KAlSCGd1aWxkVGFnEicKD3NlYXJjaF9jYXRlZ29yeRgEIAEoDVIOc2VhcmNo" + 
            "Q2F0ZWdvcnkSGgoIY2F0ZWdvcnkYBSACKA1SCGNhdGVnb3J5EhoKCGxhbmd1" + 
            "YWdlGAYgAigNUghsYW5ndWFnZRInCg9yZXF1aXJlc19pbnZpdGUYByACKAhS" + 
            "DnJlcXVpcmVzSW52aXRlEiMKDXRvdGFsX21lbWJlcnMYCCACKA1SDHRvdGFs" + 
            "TWVtYmVycxIpCg9tZW1iZXJzX2luX2NoYXQYCSABKA06ATBSDW1lbWJlcnNJ" + 
            "bkNoYXQSIwoNbGFzdF9hY3Rpdml0eRgKIAIoBFIMbGFzdEFjdGl2aXR5EjIK" + 
            "FWxhc3Rfb2ZmaWNlcl9hY3Rpdml0eRgLIAIoBFITbGFzdE9mZmljZXJBY3Rp" + 
            "dml0eSJOChVHdWlsZFNlYXJjaFJlc3VsdExpc3QSNQoHcmVzdWx0cxgBIAMo" + 
            "CzIbLkQzLkd1aWxkLkd1aWxkU2VhcmNoUmVzdWx0UgdyZXN1bHRzItcDChBT" + 
            "ZWFyY2hBdHRyaWJ1dGVzEhkKCGd1aWxkX2lkGAEgAigEUgdndWlsZElkEh0K" + 
            "Cmd1aWxkX25hbWUYAiABKAlSCWd1aWxkTmFtZRIbCglndWlsZF90YWcYAyAB" + 
            "KAlSCGd1aWxkVGFnEhoKCGNhdGVnb3J5GAQgASgNUghjYXRlZ29yeRIaCghs" + 
            "YW5ndWFnZRgFIAEoDVIIbGFuZ3VhZ2USIwoNdG90YWxfbWVtYmVycxgGIAEo" + 
            "DVIMdG90YWxNZW1iZXJzEiYKD21lbWJlcnNfaW5fY2hhdBgHIAEoDVINbWVt" + 
            "YmVyc0luQ2hhdBIjCg1sYXN0X2FjdGl2aXR5GAggASgEUgxsYXN0QWN0aXZp" + 
            "dHkSMgoVbGFzdF9vZmZpY2VyX2FjdGl2aXR5GAkgASgEUhNsYXN0T2ZmaWNl" + 
            "ckFjdGl2aXR5EicKD3NlYXJjaF9jYXRlZ29yeRgKIAEoDVIOc2VhcmNoQ2F0" + 
            "ZWdvcnkSJwoPcmVxdWlyZXNfaW52aXRlGAsgASgIUg5yZXF1aXJlc0ludml0" + 
            "ZRIeCgpzZWFyY2hhYmxlGAwgASgIUgpzZWFyY2hhYmxlEhwKCWRpc2JhbmRl" + 
            "ZBgNIAEoCFIJZGlzYmFuZGVkIkwKFFNlYXJjaEF0dHJpYnV0ZXNMaXN0EjQK" + 
            "B3Jlc3VsdHMYASADKAsyGi5EMy5HdWlsZC5TZWFyY2hBdHRyaWJ1dGVzUgdy" + 
            "ZXN1bHRzIpEBChNHcm91cFJvc3RlclJlc3BvbnNlEi4KB21lbWJlcnMYASAC" + 
            "KAsyFC5EMy5HdWlsZC5NZW1iZXJMaXN0UgdtZW1iZXJzEiMKDXRvdGFsX21l" + 
            "bWJlcnMYAiACKA1SDHRvdGFsTWVtYmVycxIlCg5hY3RpdmVfbWVtYmVycxgD" + 
            "IAIoDVINYWN0aXZlTWVtYmVycyKGAQoMR3VpbGRTdW1tYXJ5EhkKCGd1aWxk" + 
            "X2lkGAEgAigEUgdndWlsZElkEh0KCmd1aWxkX25hbWUYAiACKAlSCWd1aWxk" + 
            "TmFtZRIbCglndWlsZF90YWcYAyACKAlSCGd1aWxkVGFnEh8KC2d1aWxkX2Zs" + 
            "YWdzGAQgAigNUgpndWlsZEZsYWdzIiwKD0dyb3VwTWVtYmVyc2hpcBIZCghn" + 
            "dWlsZF9pZBgBIAMoBFIHZ3VpbGRJZCKEAQoMRXh0ZW5kZWRJbmZvEhkKCGd1" + 
            "aWxkX2lkGAEgAigEUgdndWlsZElkEiAKC2Rlc2NyaXB0aW9uGAIgAigJUgtk" + 
            "ZXNjcmlwdGlvbhIbCglsZWFkZXJfaWQYAyACKARSCGxlYWRlcklkEhoKCG9m" + 
            "ZmljZXJzGAQgAygEUghvZmZpY2VycyLtAgoYR3VpbGRBY2NvdW50UmVzdHJp" + 
            "Y3Rpb25zEh0KCmFjY291bnRfaWQYASACKARSCWFjY291bnRJZBIsChJudW1f" + 
            "Z3JvdXBzX2NyZWF0ZWQYAiACKA1SEG51bUdyb3Vwc0NyZWF0ZWQSMgoVcmVj" + 
            "ZW50X2dyb3Vwc19jcmVhdGVkGAMgAigCUhNyZWNlbnRHcm91cHNDcmVhdGVk" + 
            "EjkKGXJlY2VudF9ncm91cHNfbGFzdF91cGRhdGUYBCACKARSFnJlY2VudEdy" + 
            "b3Vwc0xhc3RVcGRhdGUSKgoRbnVtX2NsYW5zX2NyZWF0ZWQYBSACKA1SD251" + 
            "bUNsYW5zQ3JlYXRlZBIwChRyZWNlbnRfY2xhbnNfY3JlYXRlZBgGIAIoAlIS" + 
            "cmVjZW50Q2xhbnNDcmVhdGVkEjcKGHJlY2VudF9jbGFuc19sYXN0X3VwZGF0" + 
            "ZRgHIAIoBFIVcmVjZW50Q2xhbnNMYXN0VXBkYXRl");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_D3_Guild_Rank__Descriptor = Descriptor.MessageTypes[0];
          internal__static_D3_Guild_Rank__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.Rank, global::D3.Guild.Rank.Builder>(internal__static_D3_Guild_Rank__Descriptor,
                  new string[] { "RankId", "RankOrder", "Name", "Permissions", });
          internal__static_D3_Guild_RankList__Descriptor = Descriptor.MessageTypes[1];
          internal__static_D3_Guild_RankList__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.RankList, global::D3.Guild.RankList.Builder>(internal__static_D3_Guild_RankList__Descriptor,
                  new string[] { "Ranks", });
          internal__static_D3_Guild_Member__Descriptor = Descriptor.MessageTypes[2];
          internal__static_D3_Guild_Member__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.Member, global::D3.Guild.Member.Builder>(internal__static_D3_Guild_Member__Descriptor,
                  new string[] { "AccountId", "RankId", "Note", "NewsTime", "AchievementPoints", });
          internal__static_D3_Guild_MemberList__Descriptor = Descriptor.MessageTypes[3];
          internal__static_D3_Guild_MemberList__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.MemberList, global::D3.Guild.MemberList.Builder>(internal__static_D3_Guild_MemberList__Descriptor,
                  new string[] { "Members", });
          internal__static_D3_Guild_News__Descriptor = Descriptor.MessageTypes[4];
          internal__static_D3_Guild_News__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.News, global::D3.Guild.News.Builder>(internal__static_D3_Guild_News__Descriptor,
                  new string[] { "NewsId", "AccountId", "NewsType", "NewsTime", "NewsData", "NewsFlags", });
          internal__static_D3_Guild_NewsList__Descriptor = Descriptor.MessageTypes[5];
          internal__static_D3_Guild_NewsList__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.NewsList, global::D3.Guild.NewsList.Builder>(internal__static_D3_Guild_NewsList__Descriptor,
                  new string[] { "NewsProp", });
          internal__static_D3_Guild_NewsPost__Descriptor = Descriptor.MessageTypes[6];
          internal__static_D3_Guild_NewsPost__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.NewsPost, global::D3.Guild.NewsPost.Builder>(internal__static_D3_Guild_NewsPost__Descriptor,
                  new string[] { "Headline", "Body", });
          internal__static_D3_Guild_Invite__Descriptor = Descriptor.MessageTypes[7];
          internal__static_D3_Guild_Invite__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.Invite, global::D3.Guild.Invite.Builder>(internal__static_D3_Guild_Invite__Descriptor,
                  new string[] { "AccountId", "InviterId", "InviteTime", "InviteType", "ExpireTime", });
          internal__static_D3_Guild_InviteList__Descriptor = Descriptor.MessageTypes[8];
          internal__static_D3_Guild_InviteList__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.InviteList, global::D3.Guild.InviteList.Builder>(internal__static_D3_Guild_InviteList__Descriptor,
                  new string[] { "Invites", });
          internal__static_D3_Guild_AchievementNews__Descriptor = Descriptor.MessageTypes[9];
          internal__static_D3_Guild_AchievementNews__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.AchievementNews, global::D3.Guild.AchievementNews.Builder>(internal__static_D3_Guild_AchievementNews__Descriptor,
                  new string[] { "AchievementId", });
          internal__static_D3_Guild_HardcoreDeathNews__Descriptor = Descriptor.MessageTypes[10];
          internal__static_D3_Guild_HardcoreDeathNews__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.HardcoreDeathNews, global::D3.Guild.HardcoreDeathNews.Builder>(internal__static_D3_Guild_HardcoreDeathNews__Descriptor,
                  new string[] { "HeroId", "HeroName", "HeroLevel", "HeroPlayerFlags", "HeroClass", "HeroSecondsPlayed", });
          internal__static_D3_Guild_KickedNews__Descriptor = Descriptor.MessageTypes[11];
          internal__static_D3_Guild_KickedNews__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.KickedNews, global::D3.Guild.KickedNews.Builder>(internal__static_D3_Guild_KickedNews__Descriptor,
                  new string[] { "KickerId", });
          internal__static_D3_Guild_Guild__Descriptor = Descriptor.MessageTypes[12];
          internal__static_D3_Guild_Guild__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.Guild, global::D3.Guild.Guild.Builder>(internal__static_D3_Guild_Guild__Descriptor,
                  new string[] { "GuildId", "Creator", "CreateTime", "Name", "Motd", "News", "Ranks", "Members", "TotalMembers", "Tag", "Category", "RequiresInvitation", "Description", "Language", "Invites", "Searchable", "AllowSuggestions", "SearchCategory", "MotdLastUpdateTime", "MotdLastUpdateAccount", "DescriptionLastUpdateTime", "DescriptionLastUpdateAccount", });
          internal__static_D3_Guild_GuildList__Descriptor = Descriptor.MessageTypes[13];
          internal__static_D3_Guild_GuildList__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GuildList, global::D3.Guild.GuildList.Builder>(internal__static_D3_Guild_GuildList__Descriptor,
                  new string[] { "GuildIds", });
          internal__static_D3_Guild_InviteInfo__Descriptor = Descriptor.MessageTypes[14];
          internal__static_D3_Guild_InviteInfo__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.InviteInfo, global::D3.Guild.InviteInfo.Builder>(internal__static_D3_Guild_InviteInfo__Descriptor,
                  new string[] { "GuildId", "GuildName", "InviterId", "Category", "InviteType", "ExpireTime", "GuildTag", });
          internal__static_D3_Guild_InviteInfoList__Descriptor = Descriptor.MessageTypes[15];
          internal__static_D3_Guild_InviteInfoList__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.InviteInfoList, global::D3.Guild.InviteInfoList.Builder>(internal__static_D3_Guild_InviteInfoList__Descriptor,
                  new string[] { "Invites", });
          internal__static_D3_Guild_GuildInfo__Descriptor = Descriptor.MessageTypes[16];
          internal__static_D3_Guild_GuildInfo__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GuildInfo, global::D3.Guild.GuildInfo.Builder>(internal__static_D3_Guild_GuildInfo__Descriptor,
                  new string[] { "GuildId", "GuildCategory", "Name", "Tag", "RequiresInvite", "MemberNewsTime", "TotalMembers", "GuildLeaderId", "ValidatedMemberIds", "RankId", "Searchable", "AllowSuggestions", "Deleted", });
          internal__static_D3_Guild_GuildInfoList__Descriptor = Descriptor.MessageTypes[17];
          internal__static_D3_Guild_GuildInfoList__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GuildInfoList, global::D3.Guild.GuildInfoList.Builder>(internal__static_D3_Guild_GuildInfoList__Descriptor,
                  new string[] { "Guilds", });
          internal__static_D3_Guild_GuildSearchResult__Descriptor = Descriptor.MessageTypes[18];
          internal__static_D3_Guild_GuildSearchResult__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GuildSearchResult, global::D3.Guild.GuildSearchResult.Builder>(internal__static_D3_Guild_GuildSearchResult__Descriptor,
                  new string[] { "GuildId", "GuildName", "GuildTag", "SearchCategory", "Category", "Language", "RequiresInvite", "TotalMembers", "MembersInChat", "LastActivity", "LastOfficerActivity", });
          internal__static_D3_Guild_GuildSearchResultList__Descriptor = Descriptor.MessageTypes[19];
          internal__static_D3_Guild_GuildSearchResultList__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GuildSearchResultList, global::D3.Guild.GuildSearchResultList.Builder>(internal__static_D3_Guild_GuildSearchResultList__Descriptor,
                  new string[] { "Results", });
          internal__static_D3_Guild_SearchAttributes__Descriptor = Descriptor.MessageTypes[20];
          internal__static_D3_Guild_SearchAttributes__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.SearchAttributes, global::D3.Guild.SearchAttributes.Builder>(internal__static_D3_Guild_SearchAttributes__Descriptor,
                  new string[] { "GuildId", "GuildName", "GuildTag", "Category", "Language", "TotalMembers", "MembersInChat", "LastActivity", "LastOfficerActivity", "SearchCategory", "RequiresInvite", "Searchable", "Disbanded", });
          internal__static_D3_Guild_SearchAttributesList__Descriptor = Descriptor.MessageTypes[21];
          internal__static_D3_Guild_SearchAttributesList__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.SearchAttributesList, global::D3.Guild.SearchAttributesList.Builder>(internal__static_D3_Guild_SearchAttributesList__Descriptor,
                  new string[] { "Results", });
          internal__static_D3_Guild_GroupRosterResponse__Descriptor = Descriptor.MessageTypes[22];
          internal__static_D3_Guild_GroupRosterResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GroupRosterResponse, global::D3.Guild.GroupRosterResponse.Builder>(internal__static_D3_Guild_GroupRosterResponse__Descriptor,
                  new string[] { "Members", "TotalMembers", "ActiveMembers", });
          internal__static_D3_Guild_GuildSummary__Descriptor = Descriptor.MessageTypes[23];
          internal__static_D3_Guild_GuildSummary__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GuildSummary, global::D3.Guild.GuildSummary.Builder>(internal__static_D3_Guild_GuildSummary__Descriptor,
                  new string[] { "GuildId", "GuildName", "GuildTag", "GuildFlags", });
          internal__static_D3_Guild_GroupMembership__Descriptor = Descriptor.MessageTypes[24];
          internal__static_D3_Guild_GroupMembership__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GroupMembership, global::D3.Guild.GroupMembership.Builder>(internal__static_D3_Guild_GroupMembership__Descriptor,
                  new string[] { "GuildId", });
          internal__static_D3_Guild_ExtendedInfo__Descriptor = Descriptor.MessageTypes[25];
          internal__static_D3_Guild_ExtendedInfo__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.ExtendedInfo, global::D3.Guild.ExtendedInfo.Builder>(internal__static_D3_Guild_ExtendedInfo__Descriptor,
                  new string[] { "GuildId", "Description", "LeaderId", "Officers", });
          internal__static_D3_Guild_GuildAccountRestrictions__Descriptor = Descriptor.MessageTypes[26];
          internal__static_D3_Guild_GuildAccountRestrictions__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::D3.Guild.GuildAccountRestrictions, global::D3.Guild.GuildAccountRestrictions.Builder>(internal__static_D3_Guild_GuildAccountRestrictions__Descriptor,
                  new string[] { "AccountId", "NumGroupsCreated", "RecentGroupsCreated", "RecentGroupsLastUpdate", "NumClansCreated", "RecentClansCreated", "RecentClansLastUpdate", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::D3.OnlineService.OnlineService.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::D3.OnlineService.OnlineService.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Rank : pb::GeneratedMessage<Rank, Rank.Builder> {
    private Rank() { }
    private static readonly Rank defaultInstance = new Rank().MakeReadOnly();
    private static readonly string[] _rankFieldNames = new string[] { "name", "permissions", "rank_id", "rank_order" };
    private static readonly uint[] _rankFieldTags = new uint[] { 26, 32, 8, 16 };
    public static Rank DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Rank DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Rank ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_Rank__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Rank, Rank.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_Rank__FieldAccessorTable; }
    }
    
    public const int RankIdFieldNumber = 1;
    private bool hasRankId;
    private uint rankId_;
    public bool HasRankId {
      get { return hasRankId; }
    }
    public uint RankId {
      get { return rankId_; }
    }
    
    public const int RankOrderFieldNumber = 2;
    private bool hasRankOrder;
    private uint rankOrder_;
    public bool HasRankOrder {
      get { return hasRankOrder; }
    }
    public uint RankOrder {
      get { return rankOrder_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int PermissionsFieldNumber = 4;
    private bool hasPermissions;
    private uint permissions_;
    public bool HasPermissions {
      get { return hasPermissions; }
    }
    public uint Permissions {
      get { return permissions_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRankId) return false;
        if (!hasRankOrder) return false;
        if (!hasName) return false;
        if (!hasPermissions) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rankFieldNames;
      if (hasRankId) {
        output.WriteUInt32(1, field_names[2], RankId);
      }
      if (hasRankOrder) {
        output.WriteUInt32(2, field_names[3], RankOrder);
      }
      if (hasName) {
        output.WriteString(3, field_names[0], Name);
      }
      if (hasPermissions) {
        output.WriteUInt32(4, field_names[1], Permissions);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRankId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, RankId);
        }
        if (hasRankOrder) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, RankOrder);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Name);
        }
        if (hasPermissions) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, Permissions);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Rank ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Rank ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Rank ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Rank ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Rank ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Rank ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Rank ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Rank ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Rank ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Rank ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Rank MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Rank prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Rank, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Rank cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Rank result;
      
      private Rank PrepareBuilder() {
        if (resultIsReadOnly) {
          Rank original = result;
          result = new Rank();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Rank MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.Rank.Descriptor; }
      }
      
      public override Rank DefaultInstanceForType {
        get { return global::D3.Guild.Rank.DefaultInstance; }
      }
      
      public override Rank BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Rank) {
          return MergeFrom((Rank) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Rank other) {
        if (other == global::D3.Guild.Rank.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRankId) {
          RankId = other.RankId;
        }
        if (other.HasRankOrder) {
          RankOrder = other.RankOrder;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasPermissions) {
          Permissions = other.Permissions;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rankFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rankFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRankId = input.ReadUInt32(ref result.rankId_);
              break;
            }
            case 16: {
              result.hasRankOrder = input.ReadUInt32(ref result.rankOrder_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 32: {
              result.hasPermissions = input.ReadUInt32(ref result.permissions_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRankId {
        get { return result.hasRankId; }
      }
      public uint RankId {
        get { return result.RankId; }
        set { SetRankId(value); }
      }
      public Builder SetRankId(uint value) {
        PrepareBuilder();
        result.hasRankId = true;
        result.rankId_ = value;
        return this;
      }
      public Builder ClearRankId() {
        PrepareBuilder();
        result.hasRankId = false;
        result.rankId_ = 0;
        return this;
      }
      
      public bool HasRankOrder {
        get { return result.hasRankOrder; }
      }
      public uint RankOrder {
        get { return result.RankOrder; }
        set { SetRankOrder(value); }
      }
      public Builder SetRankOrder(uint value) {
        PrepareBuilder();
        result.hasRankOrder = true;
        result.rankOrder_ = value;
        return this;
      }
      public Builder ClearRankOrder() {
        PrepareBuilder();
        result.hasRankOrder = false;
        result.rankOrder_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasPermissions {
        get { return result.hasPermissions; }
      }
      public uint Permissions {
        get { return result.Permissions; }
        set { SetPermissions(value); }
      }
      public Builder SetPermissions(uint value) {
        PrepareBuilder();
        result.hasPermissions = true;
        result.permissions_ = value;
        return this;
      }
      public Builder ClearPermissions() {
        PrepareBuilder();
        result.hasPermissions = false;
        result.permissions_ = 0;
        return this;
      }
    }
    static Rank() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RankList : pb::GeneratedMessage<RankList, RankList.Builder> {
    private RankList() { }
    private static readonly RankList defaultInstance = new RankList().MakeReadOnly();
    private static readonly string[] _rankListFieldNames = new string[] { "ranks" };
    private static readonly uint[] _rankListFieldTags = new uint[] { 10 };
    public static RankList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RankList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RankList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_RankList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RankList, RankList.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_RankList__FieldAccessorTable; }
    }
    
    public const int RanksFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Guild.Rank> ranks_ = new pbc::PopsicleList<global::D3.Guild.Rank>();
    public scg::IList<global::D3.Guild.Rank> RanksList {
      get { return ranks_; }
    }
    public int RanksCount {
      get { return ranks_.Count; }
    }
    public global::D3.Guild.Rank GetRanks(int index) {
      return ranks_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Guild.Rank element in RanksList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rankListFieldNames;
      if (ranks_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], ranks_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Guild.Rank element in RanksList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RankList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RankList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RankList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RankList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RankList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RankList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RankList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RankList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RankList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RankList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RankList MakeReadOnly() {
      ranks_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RankList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RankList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RankList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RankList result;
      
      private RankList PrepareBuilder() {
        if (resultIsReadOnly) {
          RankList original = result;
          result = new RankList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RankList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.RankList.Descriptor; }
      }
      
      public override RankList DefaultInstanceForType {
        get { return global::D3.Guild.RankList.DefaultInstance; }
      }
      
      public override RankList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RankList) {
          return MergeFrom((RankList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RankList other) {
        if (other == global::D3.Guild.RankList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.ranks_.Count != 0) {
          result.ranks_.Add(other.ranks_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rankListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rankListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.ranks_, global::D3.Guild.Rank.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Guild.Rank> RanksList {
        get { return PrepareBuilder().ranks_; }
      }
      public int RanksCount {
        get { return result.RanksCount; }
      }
      public global::D3.Guild.Rank GetRanks(int index) {
        return result.GetRanks(index);
      }
      public Builder SetRanks(int index, global::D3.Guild.Rank value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ranks_[index] = value;
        return this;
      }
      public Builder SetRanks(int index, global::D3.Guild.Rank.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ranks_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRanks(global::D3.Guild.Rank value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ranks_.Add(value);
        return this;
      }
      public Builder AddRanks(global::D3.Guild.Rank.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ranks_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRanks(scg::IEnumerable<global::D3.Guild.Rank> values) {
        PrepareBuilder();
        result.ranks_.Add(values);
        return this;
      }
      public Builder ClearRanks() {
        PrepareBuilder();
        result.ranks_.Clear();
        return this;
      }
    }
    static RankList() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Member : pb::GeneratedMessage<Member, Member.Builder> {
    private Member() { }
    private static readonly Member defaultInstance = new Member().MakeReadOnly();
    private static readonly string[] _memberFieldNames = new string[] { "account_id", "achievement_points", "news_time", "note", "rank_id" };
    private static readonly uint[] _memberFieldTags = new uint[] { 8, 40, 32, 26, 16 };
    public static Member DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Member DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Member ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_Member__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Member, Member.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_Member__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private ulong accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public ulong AccountId {
      get { return accountId_; }
    }
    
    public const int RankIdFieldNumber = 2;
    private bool hasRankId;
    private uint rankId_;
    public bool HasRankId {
      get { return hasRankId; }
    }
    public uint RankId {
      get { return rankId_; }
    }
    
    public const int NoteFieldNumber = 3;
    private bool hasNote;
    private string note_ = "";
    public bool HasNote {
      get { return hasNote; }
    }
    public string Note {
      get { return note_; }
    }
    
    public const int NewsTimeFieldNumber = 4;
    private bool hasNewsTime;
    private ulong newsTime_;
    public bool HasNewsTime {
      get { return hasNewsTime; }
    }
    public ulong NewsTime {
      get { return newsTime_; }
    }
    
    public const int AchievementPointsFieldNumber = 5;
    private bool hasAchievementPoints;
    private uint achievementPoints_;
    public bool HasAchievementPoints {
      get { return hasAchievementPoints; }
    }
    public uint AchievementPoints {
      get { return achievementPoints_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasRankId) return false;
        if (!hasNote) return false;
        if (!hasNewsTime) return false;
        if (!hasAchievementPoints) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _memberFieldNames;
      if (hasAccountId) {
        output.WriteUInt64(1, field_names[0], AccountId);
      }
      if (hasRankId) {
        output.WriteUInt32(2, field_names[4], RankId);
      }
      if (hasNote) {
        output.WriteString(3, field_names[3], Note);
      }
      if (hasNewsTime) {
        output.WriteUInt64(4, field_names[2], NewsTime);
      }
      if (hasAchievementPoints) {
        output.WriteUInt32(5, field_names[1], AchievementPoints);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, AccountId);
        }
        if (hasRankId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, RankId);
        }
        if (hasNote) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Note);
        }
        if (hasNewsTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, NewsTime);
        }
        if (hasAchievementPoints) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, AchievementPoints);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Member ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Member ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Member ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Member ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Member ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Member ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Member ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Member ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Member ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Member ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Member MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Member prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Member, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Member cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Member result;
      
      private Member PrepareBuilder() {
        if (resultIsReadOnly) {
          Member original = result;
          result = new Member();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Member MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.Member.Descriptor; }
      }
      
      public override Member DefaultInstanceForType {
        get { return global::D3.Guild.Member.DefaultInstance; }
      }
      
      public override Member BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Member) {
          return MergeFrom((Member) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Member other) {
        if (other == global::D3.Guild.Member.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        if (other.HasRankId) {
          RankId = other.RankId;
        }
        if (other.HasNote) {
          Note = other.Note;
        }
        if (other.HasNewsTime) {
          NewsTime = other.NewsTime;
        }
        if (other.HasAchievementPoints) {
          AchievementPoints = other.AchievementPoints;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_memberFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _memberFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAccountId = input.ReadUInt64(ref result.accountId_);
              break;
            }
            case 16: {
              result.hasRankId = input.ReadUInt32(ref result.rankId_);
              break;
            }
            case 26: {
              result.hasNote = input.ReadString(ref result.note_);
              break;
            }
            case 32: {
              result.hasNewsTime = input.ReadUInt64(ref result.newsTime_);
              break;
            }
            case 40: {
              result.hasAchievementPoints = input.ReadUInt32(ref result.achievementPoints_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
        get { return result.hasAccountId; }
      }
      public ulong AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(ulong value) {
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = 0UL;
        return this;
      }
      
      public bool HasRankId {
        get { return result.hasRankId; }
      }
      public uint RankId {
        get { return result.RankId; }
        set { SetRankId(value); }
      }
      public Builder SetRankId(uint value) {
        PrepareBuilder();
        result.hasRankId = true;
        result.rankId_ = value;
        return this;
      }
      public Builder ClearRankId() {
        PrepareBuilder();
        result.hasRankId = false;
        result.rankId_ = 0;
        return this;
      }
      
      public bool HasNote {
        get { return result.hasNote; }
      }
      public string Note {
        get { return result.Note; }
        set { SetNote(value); }
      }
      public Builder SetNote(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNote = true;
        result.note_ = value;
        return this;
      }
      public Builder ClearNote() {
        PrepareBuilder();
        result.hasNote = false;
        result.note_ = "";
        return this;
      }
      
      public bool HasNewsTime {
        get { return result.hasNewsTime; }
      }
      public ulong NewsTime {
        get { return result.NewsTime; }
        set { SetNewsTime(value); }
      }
      public Builder SetNewsTime(ulong value) {
        PrepareBuilder();
        result.hasNewsTime = true;
        result.newsTime_ = value;
        return this;
      }
      public Builder ClearNewsTime() {
        PrepareBuilder();
        result.hasNewsTime = false;
        result.newsTime_ = 0UL;
        return this;
      }
      
      public bool HasAchievementPoints {
        get { return result.hasAchievementPoints; }
      }
      public uint AchievementPoints {
        get { return result.AchievementPoints; }
        set { SetAchievementPoints(value); }
      }
      public Builder SetAchievementPoints(uint value) {
        PrepareBuilder();
        result.hasAchievementPoints = true;
        result.achievementPoints_ = value;
        return this;
      }
      public Builder ClearAchievementPoints() {
        PrepareBuilder();
        result.hasAchievementPoints = false;
        result.achievementPoints_ = 0;
        return this;
      }
    }
    static Member() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MemberList : pb::GeneratedMessage<MemberList, MemberList.Builder> {
    private MemberList() { }
    private static readonly MemberList defaultInstance = new MemberList().MakeReadOnly();
    private static readonly string[] _memberListFieldNames = new string[] { "members" };
    private static readonly uint[] _memberListFieldTags = new uint[] { 10 };
    public static MemberList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MemberList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MemberList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_MemberList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MemberList, MemberList.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_MemberList__FieldAccessorTable; }
    }
    
    public const int MembersFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Guild.Member> members_ = new pbc::PopsicleList<global::D3.Guild.Member>();
    public scg::IList<global::D3.Guild.Member> MembersList {
      get { return members_; }
    }
    public int MembersCount {
      get { return members_.Count; }
    }
    public global::D3.Guild.Member GetMembers(int index) {
      return members_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Guild.Member element in MembersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _memberListFieldNames;
      if (members_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], members_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Guild.Member element in MembersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MemberList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MemberList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MemberList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MemberList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MemberList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MemberList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MemberList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MemberList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MemberList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MemberList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MemberList MakeReadOnly() {
      members_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MemberList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MemberList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MemberList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MemberList result;
      
      private MemberList PrepareBuilder() {
        if (resultIsReadOnly) {
          MemberList original = result;
          result = new MemberList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MemberList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.MemberList.Descriptor; }
      }
      
      public override MemberList DefaultInstanceForType {
        get { return global::D3.Guild.MemberList.DefaultInstance; }
      }
      
      public override MemberList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MemberList) {
          return MergeFrom((MemberList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MemberList other) {
        if (other == global::D3.Guild.MemberList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.members_.Count != 0) {
          result.members_.Add(other.members_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_memberListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _memberListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.members_, global::D3.Guild.Member.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Guild.Member> MembersList {
        get { return PrepareBuilder().members_; }
      }
      public int MembersCount {
        get { return result.MembersCount; }
      }
      public global::D3.Guild.Member GetMembers(int index) {
        return result.GetMembers(index);
      }
      public Builder SetMembers(int index, global::D3.Guild.Member value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_[index] = value;
        return this;
      }
      public Builder SetMembers(int index, global::D3.Guild.Member.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMembers(global::D3.Guild.Member value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_.Add(value);
        return this;
      }
      public Builder AddMembers(global::D3.Guild.Member.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMembers(scg::IEnumerable<global::D3.Guild.Member> values) {
        PrepareBuilder();
        result.members_.Add(values);
        return this;
      }
      public Builder ClearMembers() {
        PrepareBuilder();
        result.members_.Clear();
        return this;
      }
    }
    static MemberList() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class News : pb::GeneratedMessage<News, News.Builder> {
    private News() { }
    private static readonly News defaultInstance = new News().MakeReadOnly();
    private static readonly string[] _newsFieldNames = new string[] { "account_id", "news_data", "news_flags", "news_id", "news_time", "news_type" };
    private static readonly uint[] _newsFieldTags = new uint[] { 16, 42, 48, 8, 32, 24 };
    public static News DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override News DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override News ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_News__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<News, News.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_News__FieldAccessorTable; }
    }
    
    public const int NewsIdFieldNumber = 1;
    private bool hasNewsId;
    private ulong newsId_;
    public bool HasNewsId {
      get { return hasNewsId; }
    }
    public ulong NewsId {
      get { return newsId_; }
    }
    
    public const int AccountIdFieldNumber = 2;
    private bool hasAccountId;
    private ulong accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public ulong AccountId {
      get { return accountId_; }
    }
    
    public const int NewsTypeFieldNumber = 3;
    private bool hasNewsType;
    private uint newsType_;
    public bool HasNewsType {
      get { return hasNewsType; }
    }
    public uint NewsType {
      get { return newsType_; }
    }
    
    public const int NewsTimeFieldNumber = 4;
    private bool hasNewsTime;
    private ulong newsTime_;
    public bool HasNewsTime {
      get { return hasNewsTime; }
    }
    public ulong NewsTime {
      get { return newsTime_; }
    }
    
    public const int NewsDataFieldNumber = 5;
    private bool hasNewsData;
    private pb::ByteString newsData_ = pb::ByteString.Empty;
    public bool HasNewsData {
      get { return hasNewsData; }
    }
    public pb::ByteString NewsData {
      get { return newsData_; }
    }
    
    public const int NewsFlagsFieldNumber = 6;
    private bool hasNewsFlags;
    private uint newsFlags_;
    public bool HasNewsFlags {
      get { return hasNewsFlags; }
    }
    public uint NewsFlags {
      get { return newsFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasNewsId) return false;
        if (!hasAccountId) return false;
        if (!hasNewsType) return false;
        if (!hasNewsTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newsFieldNames;
      if (hasNewsId) {
        output.WriteUInt64(1, field_names[3], NewsId);
      }
      if (hasAccountId) {
        output.WriteUInt64(2, field_names[0], AccountId);
      }
      if (hasNewsType) {
        output.WriteUInt32(3, field_names[5], NewsType);
      }
      if (hasNewsTime) {
        output.WriteUInt64(4, field_names[4], NewsTime);
      }
      if (hasNewsData) {
        output.WriteBytes(5, field_names[1], NewsData);
      }
      if (hasNewsFlags) {
        output.WriteUInt32(6, field_names[2], NewsFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasNewsId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, NewsId);
        }
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, AccountId);
        }
        if (hasNewsType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, NewsType);
        }
        if (hasNewsTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, NewsTime);
        }
        if (hasNewsData) {
          size += pb::CodedOutputStream.ComputeBytesSize(5, NewsData);
        }
        if (hasNewsFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, NewsFlags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static News ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static News ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static News ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static News ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static News ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static News ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static News ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static News ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static News ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static News ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private News MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(News prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<News, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(News cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private News result;
      
      private News PrepareBuilder() {
        if (resultIsReadOnly) {
          News original = result;
          result = new News();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override News MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.News.Descriptor; }
      }
      
      public override News DefaultInstanceForType {
        get { return global::D3.Guild.News.DefaultInstance; }
      }
      
      public override News BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is News) {
          return MergeFrom((News) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(News other) {
        if (other == global::D3.Guild.News.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNewsId) {
          NewsId = other.NewsId;
        }
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        if (other.HasNewsType) {
          NewsType = other.NewsType;
        }
        if (other.HasNewsTime) {
          NewsTime = other.NewsTime;
        }
        if (other.HasNewsData) {
          NewsData = other.NewsData;
        }
        if (other.HasNewsFlags) {
          NewsFlags = other.NewsFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasNewsId = input.ReadUInt64(ref result.newsId_);
              break;
            }
            case 16: {
              result.hasAccountId = input.ReadUInt64(ref result.accountId_);
              break;
            }
            case 24: {
              result.hasNewsType = input.ReadUInt32(ref result.newsType_);
              break;
            }
            case 32: {
              result.hasNewsTime = input.ReadUInt64(ref result.newsTime_);
              break;
            }
            case 42: {
              result.hasNewsData = input.ReadBytes(ref result.newsData_);
              break;
            }
            case 48: {
              result.hasNewsFlags = input.ReadUInt32(ref result.newsFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNewsId {
        get { return result.hasNewsId; }
      }
      public ulong NewsId {
        get { return result.NewsId; }
        set { SetNewsId(value); }
      }
      public Builder SetNewsId(ulong value) {
        PrepareBuilder();
        result.hasNewsId = true;
        result.newsId_ = value;
        return this;
      }
      public Builder ClearNewsId() {
        PrepareBuilder();
        result.hasNewsId = false;
        result.newsId_ = 0UL;
        return this;
      }
      
      public bool HasAccountId {
        get { return result.hasAccountId; }
      }
      public ulong AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(ulong value) {
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = 0UL;
        return this;
      }
      
      public bool HasNewsType {
        get { return result.hasNewsType; }
      }
      public uint NewsType {
        get { return result.NewsType; }
        set { SetNewsType(value); }
      }
      public Builder SetNewsType(uint value) {
        PrepareBuilder();
        result.hasNewsType = true;
        result.newsType_ = value;
        return this;
      }
      public Builder ClearNewsType() {
        PrepareBuilder();
        result.hasNewsType = false;
        result.newsType_ = 0;
        return this;
      }
      
      public bool HasNewsTime {
        get { return result.hasNewsTime; }
      }
      public ulong NewsTime {
        get { return result.NewsTime; }
        set { SetNewsTime(value); }
      }
      public Builder SetNewsTime(ulong value) {
        PrepareBuilder();
        result.hasNewsTime = true;
        result.newsTime_ = value;
        return this;
      }
      public Builder ClearNewsTime() {
        PrepareBuilder();
        result.hasNewsTime = false;
        result.newsTime_ = 0UL;
        return this;
      }
      
      public bool HasNewsData {
        get { return result.hasNewsData; }
      }
      public pb::ByteString NewsData {
        get { return result.NewsData; }
        set { SetNewsData(value); }
      }
      public Builder SetNewsData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewsData = true;
        result.newsData_ = value;
        return this;
      }
      public Builder ClearNewsData() {
        PrepareBuilder();
        result.hasNewsData = false;
        result.newsData_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasNewsFlags {
        get { return result.hasNewsFlags; }
      }
      public uint NewsFlags {
        get { return result.NewsFlags; }
        set { SetNewsFlags(value); }
      }
      public Builder SetNewsFlags(uint value) {
        PrepareBuilder();
        result.hasNewsFlags = true;
        result.newsFlags_ = value;
        return this;
      }
      public Builder ClearNewsFlags() {
        PrepareBuilder();
        result.hasNewsFlags = false;
        result.newsFlags_ = 0;
        return this;
      }
    }
    static News() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class NewsList : pb::GeneratedMessage<NewsList, NewsList.Builder> {
    private NewsList() { }
    private static readonly NewsList defaultInstance = new NewsList().MakeReadOnly();
    private static readonly string[] _newsListFieldNames = new string[] { "NewsProp" };
    private static readonly uint[] _newsListFieldTags = new uint[] { 10 };
    public static NewsList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewsList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewsList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_NewsList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewsList, NewsList.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_NewsList__FieldAccessorTable; }
    }
    
    public const int NewsPropFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Guild.News> newsProp_ = new pbc::PopsicleList<global::D3.Guild.News>();
    public scg::IList<global::D3.Guild.News> NewsPropList {
      get { return newsProp_; }
    }
    public int NewsPropCount {
      get { return newsProp_.Count; }
    }
    public global::D3.Guild.News GetNewsProp(int index) {
      return newsProp_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Guild.News element in NewsPropList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newsListFieldNames;
      if (newsProp_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], newsProp_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Guild.News element in NewsPropList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewsList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewsList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewsList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewsList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewsList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewsList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewsList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewsList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewsList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewsList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewsList MakeReadOnly() {
      newsProp_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewsList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<NewsList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewsList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewsList result;
      
      private NewsList PrepareBuilder() {
        if (resultIsReadOnly) {
          NewsList original = result;
          result = new NewsList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewsList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.NewsList.Descriptor; }
      }
      
      public override NewsList DefaultInstanceForType {
        get { return global::D3.Guild.NewsList.DefaultInstance; }
      }
      
      public override NewsList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewsList) {
          return MergeFrom((NewsList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewsList other) {
        if (other == global::D3.Guild.NewsList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.newsProp_.Count != 0) {
          result.newsProp_.Add(other.newsProp_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newsListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newsListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.newsProp_, global::D3.Guild.News.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Guild.News> NewsPropList {
        get { return PrepareBuilder().newsProp_; }
      }
      public int NewsPropCount {
        get { return result.NewsPropCount; }
      }
      public global::D3.Guild.News GetNewsProp(int index) {
        return result.GetNewsProp(index);
      }
      public Builder SetNewsProp(int index, global::D3.Guild.News value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.newsProp_[index] = value;
        return this;
      }
      public Builder SetNewsProp(int index, global::D3.Guild.News.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.newsProp_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddNewsProp(global::D3.Guild.News value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.newsProp_.Add(value);
        return this;
      }
      public Builder AddNewsProp(global::D3.Guild.News.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.newsProp_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeNewsProp(scg::IEnumerable<global::D3.Guild.News> values) {
        PrepareBuilder();
        result.newsProp_.Add(values);
        return this;
      }
      public Builder ClearNewsProp() {
        PrepareBuilder();
        result.newsProp_.Clear();
        return this;
      }
    }
    static NewsList() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class NewsPost : pb::GeneratedMessage<NewsPost, NewsPost.Builder> {
    private NewsPost() { }
    private static readonly NewsPost defaultInstance = new NewsPost().MakeReadOnly();
    private static readonly string[] _newsPostFieldNames = new string[] { "body", "headline" };
    private static readonly uint[] _newsPostFieldTags = new uint[] { 18, 10 };
    public static NewsPost DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewsPost DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewsPost ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_NewsPost__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewsPost, NewsPost.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_NewsPost__FieldAccessorTable; }
    }
    
    public const int HeadlineFieldNumber = 1;
    private bool hasHeadline;
    private string headline_ = "";
    public bool HasHeadline {
      get { return hasHeadline; }
    }
    public string Headline {
      get { return headline_; }
    }
    
    public const int BodyFieldNumber = 2;
    private bool hasBody;
    private string body_ = "";
    public bool HasBody {
      get { return hasBody; }
    }
    public string Body {
      get { return body_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeadline) return false;
        if (!hasBody) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newsPostFieldNames;
      if (hasHeadline) {
        output.WriteString(1, field_names[1], Headline);
      }
      if (hasBody) {
        output.WriteString(2, field_names[0], Body);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeadline) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Headline);
        }
        if (hasBody) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Body);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewsPost ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewsPost ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewsPost ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewsPost ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewsPost ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewsPost ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewsPost ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewsPost ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewsPost ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewsPost ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewsPost MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewsPost prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<NewsPost, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewsPost cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewsPost result;
      
      private NewsPost PrepareBuilder() {
        if (resultIsReadOnly) {
          NewsPost original = result;
          result = new NewsPost();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewsPost MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.NewsPost.Descriptor; }
      }
      
      public override NewsPost DefaultInstanceForType {
        get { return global::D3.Guild.NewsPost.DefaultInstance; }
      }
      
      public override NewsPost BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewsPost) {
          return MergeFrom((NewsPost) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewsPost other) {
        if (other == global::D3.Guild.NewsPost.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeadline) {
          Headline = other.Headline;
        }
        if (other.HasBody) {
          Body = other.Body;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newsPostFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newsPostFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasHeadline = input.ReadString(ref result.headline_);
              break;
            }
            case 18: {
              result.hasBody = input.ReadString(ref result.body_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeadline {
        get { return result.hasHeadline; }
      }
      public string Headline {
        get { return result.Headline; }
        set { SetHeadline(value); }
      }
      public Builder SetHeadline(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeadline = true;
        result.headline_ = value;
        return this;
      }
      public Builder ClearHeadline() {
        PrepareBuilder();
        result.hasHeadline = false;
        result.headline_ = "";
        return this;
      }
      
      public bool HasBody {
        get { return result.hasBody; }
      }
      public string Body {
        get { return result.Body; }
        set { SetBody(value); }
      }
      public Builder SetBody(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBody = true;
        result.body_ = value;
        return this;
      }
      public Builder ClearBody() {
        PrepareBuilder();
        result.hasBody = false;
        result.body_ = "";
        return this;
      }
    }
    static NewsPost() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Invite : pb::GeneratedMessage<Invite, Invite.Builder> {
    private Invite() { }
    private static readonly Invite defaultInstance = new Invite().MakeReadOnly();
    private static readonly string[] _inviteFieldNames = new string[] { "account_id", "expire_time", "invite_time", "invite_type", "inviter_id" };
    private static readonly uint[] _inviteFieldTags = new uint[] { 8, 40, 24, 32, 16 };
    public static Invite DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Invite DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Invite ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_Invite__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Invite, Invite.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_Invite__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private ulong accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public ulong AccountId {
      get { return accountId_; }
    }
    
    public const int InviterIdFieldNumber = 2;
    private bool hasInviterId;
    private ulong inviterId_;
    public bool HasInviterId {
      get { return hasInviterId; }
    }
    public ulong InviterId {
      get { return inviterId_; }
    }
    
    public const int InviteTimeFieldNumber = 3;
    private bool hasInviteTime;
    private uint inviteTime_;
    public bool HasInviteTime {
      get { return hasInviteTime; }
    }
    public uint InviteTime {
      get { return inviteTime_; }
    }
    
    public const int InviteTypeFieldNumber = 4;
    private bool hasInviteType;
    private uint inviteType_;
    public bool HasInviteType {
      get { return hasInviteType; }
    }
    public uint InviteType {
      get { return inviteType_; }
    }
    
    public const int ExpireTimeFieldNumber = 5;
    private bool hasExpireTime;
    private uint expireTime_;
    public bool HasExpireTime {
      get { return hasExpireTime; }
    }
    public uint ExpireTime {
      get { return expireTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasInviterId) return false;
        if (!hasInviteTime) return false;
        if (!hasInviteType) return false;
        if (!hasExpireTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _inviteFieldNames;
      if (hasAccountId) {
        output.WriteUInt64(1, field_names[0], AccountId);
      }
      if (hasInviterId) {
        output.WriteUInt64(2, field_names[4], InviterId);
      }
      if (hasInviteTime) {
        output.WriteUInt32(3, field_names[2], InviteTime);
      }
      if (hasInviteType) {
        output.WriteUInt32(4, field_names[3], InviteType);
      }
      if (hasExpireTime) {
        output.WriteUInt32(5, field_names[1], ExpireTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, AccountId);
        }
        if (hasInviterId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, InviterId);
        }
        if (hasInviteTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, InviteTime);
        }
        if (hasInviteType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, InviteType);
        }
        if (hasExpireTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, ExpireTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Invite ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Invite ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Invite ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Invite ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Invite ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Invite ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Invite ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Invite ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Invite ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Invite ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Invite MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Invite prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Invite, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Invite cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Invite result;
      
      private Invite PrepareBuilder() {
        if (resultIsReadOnly) {
          Invite original = result;
          result = new Invite();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Invite MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.Invite.Descriptor; }
      }
      
      public override Invite DefaultInstanceForType {
        get { return global::D3.Guild.Invite.DefaultInstance; }
      }
      
      public override Invite BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Invite) {
          return MergeFrom((Invite) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Invite other) {
        if (other == global::D3.Guild.Invite.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        if (other.HasInviterId) {
          InviterId = other.InviterId;
        }
        if (other.HasInviteTime) {
          InviteTime = other.InviteTime;
        }
        if (other.HasInviteType) {
          InviteType = other.InviteType;
        }
        if (other.HasExpireTime) {
          ExpireTime = other.ExpireTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_inviteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _inviteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAccountId = input.ReadUInt64(ref result.accountId_);
              break;
            }
            case 16: {
              result.hasInviterId = input.ReadUInt64(ref result.inviterId_);
              break;
            }
            case 24: {
              result.hasInviteTime = input.ReadUInt32(ref result.inviteTime_);
              break;
            }
            case 32: {
              result.hasInviteType = input.ReadUInt32(ref result.inviteType_);
              break;
            }
            case 40: {
              result.hasExpireTime = input.ReadUInt32(ref result.expireTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
        get { return result.hasAccountId; }
      }
      public ulong AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(ulong value) {
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = 0UL;
        return this;
      }
      
      public bool HasInviterId {
        get { return result.hasInviterId; }
      }
      public ulong InviterId {
        get { return result.InviterId; }
        set { SetInviterId(value); }
      }
      public Builder SetInviterId(ulong value) {
        PrepareBuilder();
        result.hasInviterId = true;
        result.inviterId_ = value;
        return this;
      }
      public Builder ClearInviterId() {
        PrepareBuilder();
        result.hasInviterId = false;
        result.inviterId_ = 0UL;
        return this;
      }
      
      public bool HasInviteTime {
        get { return result.hasInviteTime; }
      }
      public uint InviteTime {
        get { return result.InviteTime; }
        set { SetInviteTime(value); }
      }
      public Builder SetInviteTime(uint value) {
        PrepareBuilder();
        result.hasInviteTime = true;
        result.inviteTime_ = value;
        return this;
      }
      public Builder ClearInviteTime() {
        PrepareBuilder();
        result.hasInviteTime = false;
        result.inviteTime_ = 0;
        return this;
      }
      
      public bool HasInviteType {
        get { return result.hasInviteType; }
      }
      public uint InviteType {
        get { return result.InviteType; }
        set { SetInviteType(value); }
      }
      public Builder SetInviteType(uint value) {
        PrepareBuilder();
        result.hasInviteType = true;
        result.inviteType_ = value;
        return this;
      }
      public Builder ClearInviteType() {
        PrepareBuilder();
        result.hasInviteType = false;
        result.inviteType_ = 0;
        return this;
      }
      
      public bool HasExpireTime {
        get { return result.hasExpireTime; }
      }
      public uint ExpireTime {
        get { return result.ExpireTime; }
        set { SetExpireTime(value); }
      }
      public Builder SetExpireTime(uint value) {
        PrepareBuilder();
        result.hasExpireTime = true;
        result.expireTime_ = value;
        return this;
      }
      public Builder ClearExpireTime() {
        PrepareBuilder();
        result.hasExpireTime = false;
        result.expireTime_ = 0;
        return this;
      }
    }
    static Invite() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class InviteList : pb::GeneratedMessage<InviteList, InviteList.Builder> {
    private InviteList() { }
    private static readonly InviteList defaultInstance = new InviteList().MakeReadOnly();
    private static readonly string[] _inviteListFieldNames = new string[] { "invites" };
    private static readonly uint[] _inviteListFieldTags = new uint[] { 10 };
    public static InviteList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InviteList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override InviteList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_InviteList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InviteList, InviteList.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_InviteList__FieldAccessorTable; }
    }
    
    public const int InvitesFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Guild.Invite> invites_ = new pbc::PopsicleList<global::D3.Guild.Invite>();
    public scg::IList<global::D3.Guild.Invite> InvitesList {
      get { return invites_; }
    }
    public int InvitesCount {
      get { return invites_.Count; }
    }
    public global::D3.Guild.Invite GetInvites(int index) {
      return invites_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Guild.Invite element in InvitesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _inviteListFieldNames;
      if (invites_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], invites_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Guild.Invite element in InvitesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InviteList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InviteList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InviteList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InviteList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InviteList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InviteList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InviteList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InviteList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InviteList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InviteList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private InviteList MakeReadOnly() {
      invites_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InviteList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<InviteList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(InviteList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private InviteList result;
      
      private InviteList PrepareBuilder() {
        if (resultIsReadOnly) {
          InviteList original = result;
          result = new InviteList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override InviteList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.InviteList.Descriptor; }
      }
      
      public override InviteList DefaultInstanceForType {
        get { return global::D3.Guild.InviteList.DefaultInstance; }
      }
      
      public override InviteList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InviteList) {
          return MergeFrom((InviteList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InviteList other) {
        if (other == global::D3.Guild.InviteList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.invites_.Count != 0) {
          result.invites_.Add(other.invites_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_inviteListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _inviteListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.invites_, global::D3.Guild.Invite.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Guild.Invite> InvitesList {
        get { return PrepareBuilder().invites_; }
      }
      public int InvitesCount {
        get { return result.InvitesCount; }
      }
      public global::D3.Guild.Invite GetInvites(int index) {
        return result.GetInvites(index);
      }
      public Builder SetInvites(int index, global::D3.Guild.Invite value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.invites_[index] = value;
        return this;
      }
      public Builder SetInvites(int index, global::D3.Guild.Invite.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.invites_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddInvites(global::D3.Guild.Invite value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.invites_.Add(value);
        return this;
      }
      public Builder AddInvites(global::D3.Guild.Invite.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.invites_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeInvites(scg::IEnumerable<global::D3.Guild.Invite> values) {
        PrepareBuilder();
        result.invites_.Add(values);
        return this;
      }
      public Builder ClearInvites() {
        PrepareBuilder();
        result.invites_.Clear();
        return this;
      }
    }
    static InviteList() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AchievementNews : pb::GeneratedMessage<AchievementNews, AchievementNews.Builder> {
    private AchievementNews() { }
    private static readonly AchievementNews defaultInstance = new AchievementNews().MakeReadOnly();
    private static readonly string[] _achievementNewsFieldNames = new string[] { "achievement_id" };
    private static readonly uint[] _achievementNewsFieldTags = new uint[] { 8 };
    public static AchievementNews DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AchievementNews DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AchievementNews ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_AchievementNews__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AchievementNews, AchievementNews.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_AchievementNews__FieldAccessorTable; }
    }
    
    public const int AchievementIdFieldNumber = 1;
    private bool hasAchievementId;
    private ulong achievementId_;
    public bool HasAchievementId {
      get { return hasAchievementId; }
    }
    public ulong AchievementId {
      get { return achievementId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAchievementId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _achievementNewsFieldNames;
      if (hasAchievementId) {
        output.WriteUInt64(1, field_names[0], AchievementId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAchievementId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, AchievementId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AchievementNews ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementNews ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementNews ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AchievementNews ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AchievementNews ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementNews ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AchievementNews ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AchievementNews ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AchievementNews ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AchievementNews ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AchievementNews MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AchievementNews prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AchievementNews, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AchievementNews cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AchievementNews result;
      
      private AchievementNews PrepareBuilder() {
        if (resultIsReadOnly) {
          AchievementNews original = result;
          result = new AchievementNews();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AchievementNews MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.AchievementNews.Descriptor; }
      }
      
      public override AchievementNews DefaultInstanceForType {
        get { return global::D3.Guild.AchievementNews.DefaultInstance; }
      }
      
      public override AchievementNews BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AchievementNews) {
          return MergeFrom((AchievementNews) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AchievementNews other) {
        if (other == global::D3.Guild.AchievementNews.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAchievementId) {
          AchievementId = other.AchievementId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_achievementNewsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _achievementNewsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAchievementId = input.ReadUInt64(ref result.achievementId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAchievementId {
        get { return result.hasAchievementId; }
      }
      public ulong AchievementId {
        get { return result.AchievementId; }
        set { SetAchievementId(value); }
      }
      public Builder SetAchievementId(ulong value) {
        PrepareBuilder();
        result.hasAchievementId = true;
        result.achievementId_ = value;
        return this;
      }
      public Builder ClearAchievementId() {
        PrepareBuilder();
        result.hasAchievementId = false;
        result.achievementId_ = 0UL;
        return this;
      }
    }
    static AchievementNews() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HardcoreDeathNews : pb::GeneratedMessage<HardcoreDeathNews, HardcoreDeathNews.Builder> {
    private HardcoreDeathNews() { }
    private static readonly HardcoreDeathNews defaultInstance = new HardcoreDeathNews().MakeReadOnly();
    private static readonly string[] _hardcoreDeathNewsFieldNames = new string[] { "hero_class", "hero_id", "hero_level", "hero_name", "hero_player_flags", "hero_seconds_played" };
    private static readonly uint[] _hardcoreDeathNewsFieldTags = new uint[] { 45, 10, 24, 18, 32, 48 };
    public static HardcoreDeathNews DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HardcoreDeathNews DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HardcoreDeathNews ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_HardcoreDeathNews__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HardcoreDeathNews, HardcoreDeathNews.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_HardcoreDeathNews__FieldAccessorTable; }
    }
    
    public const int HeroIdFieldNumber = 1;
    private bool hasHeroId;
    private global::D3.OnlineService.EntityId heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public global::D3.OnlineService.EntityId HeroId {
      get { return heroId_ ?? global::D3.OnlineService.EntityId.DefaultInstance; }
    }
    
    public const int HeroNameFieldNumber = 2;
    private bool hasHeroName;
    private string heroName_ = "";
    public bool HasHeroName {
      get { return hasHeroName; }
    }
    public string HeroName {
      get { return heroName_; }
    }
    
    public const int HeroLevelFieldNumber = 3;
    private bool hasHeroLevel;
    private int heroLevel_;
    public bool HasHeroLevel {
      get { return hasHeroLevel; }
    }
    public int HeroLevel {
      get { return heroLevel_; }
    }
    
    public const int HeroPlayerFlagsFieldNumber = 4;
    private bool hasHeroPlayerFlags;
    private uint heroPlayerFlags_;
    public bool HasHeroPlayerFlags {
      get { return hasHeroPlayerFlags; }
    }
    public uint HeroPlayerFlags {
      get { return heroPlayerFlags_; }
    }
    
    public const int HeroClassFieldNumber = 5;
    private bool hasHeroClass;
    private int heroClass_;
    public bool HasHeroClass {
      get { return hasHeroClass; }
    }
    public int HeroClass {
      get { return heroClass_; }
    }
    
    public const int HeroSecondsPlayedFieldNumber = 6;
    private bool hasHeroSecondsPlayed;
    private ulong heroSecondsPlayed_;
    public bool HasHeroSecondsPlayed {
      get { return hasHeroSecondsPlayed; }
    }
    public ulong HeroSecondsPlayed {
      get { return heroSecondsPlayed_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeroId) return false;
        if (!hasHeroName) return false;
        if (!hasHeroLevel) return false;
        if (!hasHeroPlayerFlags) return false;
        if (!hasHeroClass) return false;
        if (!hasHeroSecondsPlayed) return false;
        if (!HeroId.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _hardcoreDeathNewsFieldNames;
      if (hasHeroId) {
        output.WriteMessage(1, field_names[1], HeroId);
      }
      if (hasHeroName) {
        output.WriteString(2, field_names[3], HeroName);
      }
      if (hasHeroLevel) {
        output.WriteSInt32(3, field_names[2], HeroLevel);
      }
      if (hasHeroPlayerFlags) {
        output.WriteUInt32(4, field_names[4], HeroPlayerFlags);
      }
      if (hasHeroClass) {
        output.WriteSFixed32(5, field_names[0], HeroClass);
      }
      if (hasHeroSecondsPlayed) {
        output.WriteUInt64(6, field_names[5], HeroSecondsPlayed);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, HeroId);
        }
        if (hasHeroName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, HeroName);
        }
        if (hasHeroLevel) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, HeroLevel);
        }
        if (hasHeroPlayerFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, HeroPlayerFlags);
        }
        if (hasHeroClass) {
          size += pb::CodedOutputStream.ComputeSFixed32Size(5, HeroClass);
        }
        if (hasHeroSecondsPlayed) {
          size += pb::CodedOutputStream.ComputeUInt64Size(6, HeroSecondsPlayed);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HardcoreDeathNews ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HardcoreDeathNews ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HardcoreDeathNews ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HardcoreDeathNews ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HardcoreDeathNews ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HardcoreDeathNews ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HardcoreDeathNews ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HardcoreDeathNews ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HardcoreDeathNews ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HardcoreDeathNews ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HardcoreDeathNews MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HardcoreDeathNews prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HardcoreDeathNews, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HardcoreDeathNews cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HardcoreDeathNews result;
      
      private HardcoreDeathNews PrepareBuilder() {
        if (resultIsReadOnly) {
          HardcoreDeathNews original = result;
          result = new HardcoreDeathNews();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HardcoreDeathNews MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.HardcoreDeathNews.Descriptor; }
      }
      
      public override HardcoreDeathNews DefaultInstanceForType {
        get { return global::D3.Guild.HardcoreDeathNews.DefaultInstance; }
      }
      
      public override HardcoreDeathNews BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HardcoreDeathNews) {
          return MergeFrom((HardcoreDeathNews) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HardcoreDeathNews other) {
        if (other == global::D3.Guild.HardcoreDeathNews.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeroId) {
          MergeHeroId(other.HeroId);
        }
        if (other.HasHeroName) {
          HeroName = other.HeroName;
        }
        if (other.HasHeroLevel) {
          HeroLevel = other.HeroLevel;
        }
        if (other.HasHeroPlayerFlags) {
          HeroPlayerFlags = other.HeroPlayerFlags;
        }
        if (other.HasHeroClass) {
          HeroClass = other.HeroClass;
        }
        if (other.HasHeroSecondsPlayed) {
          HeroSecondsPlayed = other.HeroSecondsPlayed;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_hardcoreDeathNewsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _hardcoreDeathNewsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.OnlineService.EntityId.Builder subBuilder = global::D3.OnlineService.EntityId.CreateBuilder();
              if (result.hasHeroId) {
                subBuilder.MergeFrom(HeroId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HeroId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasHeroName = input.ReadString(ref result.heroName_);
              break;
            }
            case 24: {
              result.hasHeroLevel = input.ReadSInt32(ref result.heroLevel_);
              break;
            }
            case 32: {
              result.hasHeroPlayerFlags = input.ReadUInt32(ref result.heroPlayerFlags_);
              break;
            }
            case 45: {
              result.hasHeroClass = input.ReadSFixed32(ref result.heroClass_);
              break;
            }
            case 48: {
              result.hasHeroSecondsPlayed = input.ReadUInt64(ref result.heroSecondsPlayed_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeroId {
       get { return result.hasHeroId; }
      }
      public global::D3.OnlineService.EntityId HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder SetHeroId(global::D3.OnlineService.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeroId(global::D3.OnlineService.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeroId &&
            result.heroId_ != global::D3.OnlineService.EntityId.DefaultInstance) {
            result.heroId_ = global::D3.OnlineService.EntityId.CreateBuilder(result.heroId_).MergeFrom(value).BuildPartial();
        } else {
          result.heroId_ = value;
        }
        result.hasHeroId = true;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = null;
        return this;
      }
      
      public bool HasHeroName {
        get { return result.hasHeroName; }
      }
      public string HeroName {
        get { return result.HeroName; }
        set { SetHeroName(value); }
      }
      public Builder SetHeroName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeroName = true;
        result.heroName_ = value;
        return this;
      }
      public Builder ClearHeroName() {
        PrepareBuilder();
        result.hasHeroName = false;
        result.heroName_ = "";
        return this;
      }
      
      public bool HasHeroLevel {
        get { return result.hasHeroLevel; }
      }
      public int HeroLevel {
        get { return result.HeroLevel; }
        set { SetHeroLevel(value); }
      }
      public Builder SetHeroLevel(int value) {
        PrepareBuilder();
        result.hasHeroLevel = true;
        result.heroLevel_ = value;
        return this;
      }
      public Builder ClearHeroLevel() {
        PrepareBuilder();
        result.hasHeroLevel = false;
        result.heroLevel_ = 0;
        return this;
      }
      
      public bool HasHeroPlayerFlags {
        get { return result.hasHeroPlayerFlags; }
      }
      public uint HeroPlayerFlags {
        get { return result.HeroPlayerFlags; }
        set { SetHeroPlayerFlags(value); }
      }
      public Builder SetHeroPlayerFlags(uint value) {
        PrepareBuilder();
        result.hasHeroPlayerFlags = true;
        result.heroPlayerFlags_ = value;
        return this;
      }
      public Builder ClearHeroPlayerFlags() {
        PrepareBuilder();
        result.hasHeroPlayerFlags = false;
        result.heroPlayerFlags_ = 0;
        return this;
      }
      
      public bool HasHeroClass {
        get { return result.hasHeroClass; }
      }
      public int HeroClass {
        get { return result.HeroClass; }
        set { SetHeroClass(value); }
      }
      public Builder SetHeroClass(int value) {
        PrepareBuilder();
        result.hasHeroClass = true;
        result.heroClass_ = value;
        return this;
      }
      public Builder ClearHeroClass() {
        PrepareBuilder();
        result.hasHeroClass = false;
        result.heroClass_ = 0;
        return this;
      }
      
      public bool HasHeroSecondsPlayed {
        get { return result.hasHeroSecondsPlayed; }
      }
      public ulong HeroSecondsPlayed {
        get { return result.HeroSecondsPlayed; }
        set { SetHeroSecondsPlayed(value); }
      }
      public Builder SetHeroSecondsPlayed(ulong value) {
        PrepareBuilder();
        result.hasHeroSecondsPlayed = true;
        result.heroSecondsPlayed_ = value;
        return this;
      }
      public Builder ClearHeroSecondsPlayed() {
        PrepareBuilder();
        result.hasHeroSecondsPlayed = false;
        result.heroSecondsPlayed_ = 0UL;
        return this;
      }
    }
    static HardcoreDeathNews() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class KickedNews : pb::GeneratedMessage<KickedNews, KickedNews.Builder> {
    private KickedNews() { }
    private static readonly KickedNews defaultInstance = new KickedNews().MakeReadOnly();
    private static readonly string[] _kickedNewsFieldNames = new string[] { "kicker_id" };
    private static readonly uint[] _kickedNewsFieldTags = new uint[] { 8 };
    public static KickedNews DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override KickedNews DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override KickedNews ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_KickedNews__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<KickedNews, KickedNews.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_KickedNews__FieldAccessorTable; }
    }
    
    public const int KickerIdFieldNumber = 1;
    private bool hasKickerId;
    private ulong kickerId_;
    public bool HasKickerId {
      get { return hasKickerId; }
    }
    public ulong KickerId {
      get { return kickerId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKickerId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _kickedNewsFieldNames;
      if (hasKickerId) {
        output.WriteUInt64(1, field_names[0], KickerId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasKickerId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, KickerId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static KickedNews ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KickedNews ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KickedNews ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KickedNews ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KickedNews ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KickedNews ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static KickedNews ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static KickedNews ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static KickedNews ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KickedNews ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private KickedNews MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(KickedNews prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<KickedNews, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(KickedNews cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private KickedNews result;
      
      private KickedNews PrepareBuilder() {
        if (resultIsReadOnly) {
          KickedNews original = result;
          result = new KickedNews();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override KickedNews MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.KickedNews.Descriptor; }
      }
      
      public override KickedNews DefaultInstanceForType {
        get { return global::D3.Guild.KickedNews.DefaultInstance; }
      }
      
      public override KickedNews BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is KickedNews) {
          return MergeFrom((KickedNews) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(KickedNews other) {
        if (other == global::D3.Guild.KickedNews.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKickerId) {
          KickerId = other.KickerId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_kickedNewsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _kickedNewsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasKickerId = input.ReadUInt64(ref result.kickerId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKickerId {
        get { return result.hasKickerId; }
      }
      public ulong KickerId {
        get { return result.KickerId; }
        set { SetKickerId(value); }
      }
      public Builder SetKickerId(ulong value) {
        PrepareBuilder();
        result.hasKickerId = true;
        result.kickerId_ = value;
        return this;
      }
      public Builder ClearKickerId() {
        PrepareBuilder();
        result.hasKickerId = false;
        result.kickerId_ = 0UL;
        return this;
      }
    }
    static KickedNews() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Guild : pb::GeneratedMessage<Guild, Guild.Builder> {
    private Guild() { }
    private static readonly Guild defaultInstance = new Guild().MakeReadOnly();
    private static readonly string[] _guildFieldNames = new string[] { "allow_suggestions", "category", "create_time", "creator", "description", "description_last_update_account", "description_last_update_time", "guild_id", "invites", "language", "members", "motd", "motd_last_update_account", "motd_last_update_time", "name", "news", "ranks", "requires_invitation", "search_category", "searchable", "tag", "total_members" };
    private static readonly uint[] _guildFieldTags = new uint[] { 144, 96, 24, 16, 114, 184, 176, 8, 130, 120, 66, 42, 168, 160, 34, 50, 58, 104, 152, 136, 90, 72 };
    public static Guild DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Guild DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Guild ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_Guild__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Guild, Guild.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_Guild__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int CreatorFieldNumber = 2;
    private bool hasCreator;
    private ulong creator_;
    public bool HasCreator {
      get { return hasCreator; }
    }
    public ulong Creator {
      get { return creator_; }
    }
    
    public const int CreateTimeFieldNumber = 3;
    private bool hasCreateTime;
    private uint createTime_;
    public bool HasCreateTime {
      get { return hasCreateTime; }
    }
    public uint CreateTime {
      get { return createTime_; }
    }
    
    public const int NameFieldNumber = 4;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int MotdFieldNumber = 5;
    private bool hasMotd;
    private string motd_ = "";
    public bool HasMotd {
      get { return hasMotd; }
    }
    public string Motd {
      get { return motd_; }
    }
    
    public const int NewsFieldNumber = 6;
    private bool hasNews;
    private global::D3.Guild.NewsList news_;
    public bool HasNews {
      get { return hasNews; }
    }
    public global::D3.Guild.NewsList News {
      get { return news_ ?? global::D3.Guild.NewsList.DefaultInstance; }
    }
    
    public const int RanksFieldNumber = 7;
    private bool hasRanks;
    private global::D3.Guild.RankList ranks_;
    public bool HasRanks {
      get { return hasRanks; }
    }
    public global::D3.Guild.RankList Ranks {
      get { return ranks_ ?? global::D3.Guild.RankList.DefaultInstance; }
    }
    
    public const int MembersFieldNumber = 8;
    private bool hasMembers;
    private global::D3.Guild.MemberList members_;
    public bool HasMembers {
      get { return hasMembers; }
    }
    public global::D3.Guild.MemberList Members {
      get { return members_ ?? global::D3.Guild.MemberList.DefaultInstance; }
    }
    
    public const int TotalMembersFieldNumber = 9;
    private bool hasTotalMembers;
    private uint totalMembers_;
    public bool HasTotalMembers {
      get { return hasTotalMembers; }
    }
    public uint TotalMembers {
      get { return totalMembers_; }
    }
    
    public const int TagFieldNumber = 11;
    private bool hasTag;
    private string tag_ = "";
    public bool HasTag {
      get { return hasTag; }
    }
    public string Tag {
      get { return tag_; }
    }
    
    public const int CategoryFieldNumber = 12;
    private bool hasCategory;
    private uint category_;
    public bool HasCategory {
      get { return hasCategory; }
    }
    public uint Category {
      get { return category_; }
    }
    
    public const int RequiresInvitationFieldNumber = 13;
    private bool hasRequiresInvitation;
    private bool requiresInvitation_;
    public bool HasRequiresInvitation {
      get { return hasRequiresInvitation; }
    }
    public bool RequiresInvitation {
      get { return requiresInvitation_; }
    }
    
    public const int DescriptionFieldNumber = 14;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public const int LanguageFieldNumber = 15;
    private bool hasLanguage;
    private uint language_;
    public bool HasLanguage {
      get { return hasLanguage; }
    }
    public uint Language {
      get { return language_; }
    }
    
    public const int InvitesFieldNumber = 16;
    private bool hasInvites;
    private global::D3.Guild.InviteList invites_;
    public bool HasInvites {
      get { return hasInvites; }
    }
    public global::D3.Guild.InviteList Invites {
      get { return invites_ ?? global::D3.Guild.InviteList.DefaultInstance; }
    }
    
    public const int SearchableFieldNumber = 17;
    private bool hasSearchable;
    private bool searchable_;
    public bool HasSearchable {
      get { return hasSearchable; }
    }
    public bool Searchable {
      get { return searchable_; }
    }
    
    public const int AllowSuggestionsFieldNumber = 18;
    private bool hasAllowSuggestions;
    private bool allowSuggestions_;
    public bool HasAllowSuggestions {
      get { return hasAllowSuggestions; }
    }
    public bool AllowSuggestions {
      get { return allowSuggestions_; }
    }
    
    public const int SearchCategoryFieldNumber = 19;
    private bool hasSearchCategory;
    private uint searchCategory_;
    public bool HasSearchCategory {
      get { return hasSearchCategory; }
    }
    public uint SearchCategory {
      get { return searchCategory_; }
    }
    
    public const int MotdLastUpdateTimeFieldNumber = 20;
    private bool hasMotdLastUpdateTime;
    private uint motdLastUpdateTime_;
    public bool HasMotdLastUpdateTime {
      get { return hasMotdLastUpdateTime; }
    }
    public uint MotdLastUpdateTime {
      get { return motdLastUpdateTime_; }
    }
    
    public const int MotdLastUpdateAccountFieldNumber = 21;
    private bool hasMotdLastUpdateAccount;
    private ulong motdLastUpdateAccount_;
    public bool HasMotdLastUpdateAccount {
      get { return hasMotdLastUpdateAccount; }
    }
    public ulong MotdLastUpdateAccount {
      get { return motdLastUpdateAccount_; }
    }
    
    public const int DescriptionLastUpdateTimeFieldNumber = 22;
    private bool hasDescriptionLastUpdateTime;
    private uint descriptionLastUpdateTime_;
    public bool HasDescriptionLastUpdateTime {
      get { return hasDescriptionLastUpdateTime; }
    }
    public uint DescriptionLastUpdateTime {
      get { return descriptionLastUpdateTime_; }
    }
    
    public const int DescriptionLastUpdateAccountFieldNumber = 23;
    private bool hasDescriptionLastUpdateAccount;
    private ulong descriptionLastUpdateAccount_;
    public bool HasDescriptionLastUpdateAccount {
      get { return hasDescriptionLastUpdateAccount; }
    }
    public ulong DescriptionLastUpdateAccount {
      get { return descriptionLastUpdateAccount_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (HasNews) {
          if (!News.IsInitialized) return false;
        }
        if (HasRanks) {
          if (!Ranks.IsInitialized) return false;
        }
        if (HasMembers) {
          if (!Members.IsInitialized) return false;
        }
        if (HasInvites) {
          if (!Invites.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[7], GuildId);
      }
      if (hasCreator) {
        output.WriteUInt64(2, field_names[3], Creator);
      }
      if (hasCreateTime) {
        output.WriteUInt32(3, field_names[2], CreateTime);
      }
      if (hasName) {
        output.WriteString(4, field_names[14], Name);
      }
      if (hasMotd) {
        output.WriteString(5, field_names[11], Motd);
      }
      if (hasNews) {
        output.WriteMessage(6, field_names[15], News);
      }
      if (hasRanks) {
        output.WriteMessage(7, field_names[16], Ranks);
      }
      if (hasMembers) {
        output.WriteMessage(8, field_names[10], Members);
      }
      if (hasTotalMembers) {
        output.WriteUInt32(9, field_names[21], TotalMembers);
      }
      if (hasTag) {
        output.WriteString(11, field_names[20], Tag);
      }
      if (hasCategory) {
        output.WriteUInt32(12, field_names[1], Category);
      }
      if (hasRequiresInvitation) {
        output.WriteBool(13, field_names[17], RequiresInvitation);
      }
      if (hasDescription) {
        output.WriteString(14, field_names[4], Description);
      }
      if (hasLanguage) {
        output.WriteUInt32(15, field_names[9], Language);
      }
      if (hasInvites) {
        output.WriteMessage(16, field_names[8], Invites);
      }
      if (hasSearchable) {
        output.WriteBool(17, field_names[19], Searchable);
      }
      if (hasAllowSuggestions) {
        output.WriteBool(18, field_names[0], AllowSuggestions);
      }
      if (hasSearchCategory) {
        output.WriteUInt32(19, field_names[18], SearchCategory);
      }
      if (hasMotdLastUpdateTime) {
        output.WriteUInt32(20, field_names[13], MotdLastUpdateTime);
      }
      if (hasMotdLastUpdateAccount) {
        output.WriteUInt64(21, field_names[12], MotdLastUpdateAccount);
      }
      if (hasDescriptionLastUpdateTime) {
        output.WriteUInt32(22, field_names[6], DescriptionLastUpdateTime);
      }
      if (hasDescriptionLastUpdateAccount) {
        output.WriteUInt64(23, field_names[5], DescriptionLastUpdateAccount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasCreator) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, Creator);
        }
        if (hasCreateTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, CreateTime);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Name);
        }
        if (hasMotd) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Motd);
        }
        if (hasNews) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, News);
        }
        if (hasRanks) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, Ranks);
        }
        if (hasMembers) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, Members);
        }
        if (hasTotalMembers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(9, TotalMembers);
        }
        if (hasTag) {
          size += pb::CodedOutputStream.ComputeStringSize(11, Tag);
        }
        if (hasCategory) {
          size += pb::CodedOutputStream.ComputeUInt32Size(12, Category);
        }
        if (hasRequiresInvitation) {
          size += pb::CodedOutputStream.ComputeBoolSize(13, RequiresInvitation);
        }
        if (hasDescription) {
          size += pb::CodedOutputStream.ComputeStringSize(14, Description);
        }
        if (hasLanguage) {
          size += pb::CodedOutputStream.ComputeUInt32Size(15, Language);
        }
        if (hasInvites) {
          size += pb::CodedOutputStream.ComputeMessageSize(16, Invites);
        }
        if (hasSearchable) {
          size += pb::CodedOutputStream.ComputeBoolSize(17, Searchable);
        }
        if (hasAllowSuggestions) {
          size += pb::CodedOutputStream.ComputeBoolSize(18, AllowSuggestions);
        }
        if (hasSearchCategory) {
          size += pb::CodedOutputStream.ComputeUInt32Size(19, SearchCategory);
        }
        if (hasMotdLastUpdateTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(20, MotdLastUpdateTime);
        }
        if (hasMotdLastUpdateAccount) {
          size += pb::CodedOutputStream.ComputeUInt64Size(21, MotdLastUpdateAccount);
        }
        if (hasDescriptionLastUpdateTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(22, DescriptionLastUpdateTime);
        }
        if (hasDescriptionLastUpdateAccount) {
          size += pb::CodedOutputStream.ComputeUInt64Size(23, DescriptionLastUpdateAccount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Guild ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Guild ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Guild ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Guild ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Guild ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Guild ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Guild ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Guild ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Guild ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Guild ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Guild MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Guild prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Guild, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Guild cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Guild result;
      
      private Guild PrepareBuilder() {
        if (resultIsReadOnly) {
          Guild original = result;
          result = new Guild();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Guild MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.Guild.Descriptor; }
      }
      
      public override Guild DefaultInstanceForType {
        get { return global::D3.Guild.Guild.DefaultInstance; }
      }
      
      public override Guild BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Guild) {
          return MergeFrom((Guild) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Guild other) {
        if (other == global::D3.Guild.Guild.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasCreator) {
          Creator = other.Creator;
        }
        if (other.HasCreateTime) {
          CreateTime = other.CreateTime;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasMotd) {
          Motd = other.Motd;
        }
        if (other.HasNews) {
          MergeNews(other.News);
        }
        if (other.HasRanks) {
          MergeRanks(other.Ranks);
        }
        if (other.HasMembers) {
          MergeMembers(other.Members);
        }
        if (other.HasTotalMembers) {
          TotalMembers = other.TotalMembers;
        }
        if (other.HasTag) {
          Tag = other.Tag;
        }
        if (other.HasCategory) {
          Category = other.Category;
        }
        if (other.HasRequiresInvitation) {
          RequiresInvitation = other.RequiresInvitation;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        if (other.HasLanguage) {
          Language = other.Language;
        }
        if (other.HasInvites) {
          MergeInvites(other.Invites);
        }
        if (other.HasSearchable) {
          Searchable = other.Searchable;
        }
        if (other.HasAllowSuggestions) {
          AllowSuggestions = other.AllowSuggestions;
        }
        if (other.HasSearchCategory) {
          SearchCategory = other.SearchCategory;
        }
        if (other.HasMotdLastUpdateTime) {
          MotdLastUpdateTime = other.MotdLastUpdateTime;
        }
        if (other.HasMotdLastUpdateAccount) {
          MotdLastUpdateAccount = other.MotdLastUpdateAccount;
        }
        if (other.HasDescriptionLastUpdateTime) {
          DescriptionLastUpdateTime = other.DescriptionLastUpdateTime;
        }
        if (other.HasDescriptionLastUpdateAccount) {
          DescriptionLastUpdateAccount = other.DescriptionLastUpdateAccount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasCreator = input.ReadUInt64(ref result.creator_);
              break;
            }
            case 24: {
              result.hasCreateTime = input.ReadUInt32(ref result.createTime_);
              break;
            }
            case 34: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 42: {
              result.hasMotd = input.ReadString(ref result.motd_);
              break;
            }
            case 50: {
              global::D3.Guild.NewsList.Builder subBuilder = global::D3.Guild.NewsList.CreateBuilder();
              if (result.hasNews) {
                subBuilder.MergeFrom(News);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              News = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::D3.Guild.RankList.Builder subBuilder = global::D3.Guild.RankList.CreateBuilder();
              if (result.hasRanks) {
                subBuilder.MergeFrom(Ranks);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Ranks = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::D3.Guild.MemberList.Builder subBuilder = global::D3.Guild.MemberList.CreateBuilder();
              if (result.hasMembers) {
                subBuilder.MergeFrom(Members);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Members = subBuilder.BuildPartial();
              break;
            }
            case 72: {
              result.hasTotalMembers = input.ReadUInt32(ref result.totalMembers_);
              break;
            }
            case 90: {
              result.hasTag = input.ReadString(ref result.tag_);
              break;
            }
            case 96: {
              result.hasCategory = input.ReadUInt32(ref result.category_);
              break;
            }
            case 104: {
              result.hasRequiresInvitation = input.ReadBool(ref result.requiresInvitation_);
              break;
            }
            case 114: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
            case 120: {
              result.hasLanguage = input.ReadUInt32(ref result.language_);
              break;
            }
            case 130: {
              global::D3.Guild.InviteList.Builder subBuilder = global::D3.Guild.InviteList.CreateBuilder();
              if (result.hasInvites) {
                subBuilder.MergeFrom(Invites);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Invites = subBuilder.BuildPartial();
              break;
            }
            case 136: {
              result.hasSearchable = input.ReadBool(ref result.searchable_);
              break;
            }
            case 144: {
              result.hasAllowSuggestions = input.ReadBool(ref result.allowSuggestions_);
              break;
            }
            case 152: {
              result.hasSearchCategory = input.ReadUInt32(ref result.searchCategory_);
              break;
            }
            case 160: {
              result.hasMotdLastUpdateTime = input.ReadUInt32(ref result.motdLastUpdateTime_);
              break;
            }
            case 168: {
              result.hasMotdLastUpdateAccount = input.ReadUInt64(ref result.motdLastUpdateAccount_);
              break;
            }
            case 176: {
              result.hasDescriptionLastUpdateTime = input.ReadUInt32(ref result.descriptionLastUpdateTime_);
              break;
            }
            case 184: {
              result.hasDescriptionLastUpdateAccount = input.ReadUInt64(ref result.descriptionLastUpdateAccount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasCreator {
        get { return result.hasCreator; }
      }
      public ulong Creator {
        get { return result.Creator; }
        set { SetCreator(value); }
      }
      public Builder SetCreator(ulong value) {
        PrepareBuilder();
        result.hasCreator = true;
        result.creator_ = value;
        return this;
      }
      public Builder ClearCreator() {
        PrepareBuilder();
        result.hasCreator = false;
        result.creator_ = 0UL;
        return this;
      }
      
      public bool HasCreateTime {
        get { return result.hasCreateTime; }
      }
      public uint CreateTime {
        get { return result.CreateTime; }
        set { SetCreateTime(value); }
      }
      public Builder SetCreateTime(uint value) {
        PrepareBuilder();
        result.hasCreateTime = true;
        result.createTime_ = value;
        return this;
      }
      public Builder ClearCreateTime() {
        PrepareBuilder();
        result.hasCreateTime = false;
        result.createTime_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasMotd {
        get { return result.hasMotd; }
      }
      public string Motd {
        get { return result.Motd; }
        set { SetMotd(value); }
      }
      public Builder SetMotd(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMotd = true;
        result.motd_ = value;
        return this;
      }
      public Builder ClearMotd() {
        PrepareBuilder();
        result.hasMotd = false;
        result.motd_ = "";
        return this;
      }
      
      public bool HasNews {
       get { return result.hasNews; }
      }
      public global::D3.Guild.NewsList News {
        get { return result.News; }
        set { SetNews(value); }
      }
      public Builder SetNews(global::D3.Guild.NewsList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNews = true;
        result.news_ = value;
        return this;
      }
      public Builder SetNews(global::D3.Guild.NewsList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNews = true;
        result.news_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNews(global::D3.Guild.NewsList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNews &&
            result.news_ != global::D3.Guild.NewsList.DefaultInstance) {
            result.news_ = global::D3.Guild.NewsList.CreateBuilder(result.news_).MergeFrom(value).BuildPartial();
        } else {
          result.news_ = value;
        }
        result.hasNews = true;
        return this;
      }
      public Builder ClearNews() {
        PrepareBuilder();
        result.hasNews = false;
        result.news_ = null;
        return this;
      }
      
      public bool HasRanks {
       get { return result.hasRanks; }
      }
      public global::D3.Guild.RankList Ranks {
        get { return result.Ranks; }
        set { SetRanks(value); }
      }
      public Builder SetRanks(global::D3.Guild.RankList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRanks = true;
        result.ranks_ = value;
        return this;
      }
      public Builder SetRanks(global::D3.Guild.RankList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRanks = true;
        result.ranks_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRanks(global::D3.Guild.RankList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRanks &&
            result.ranks_ != global::D3.Guild.RankList.DefaultInstance) {
            result.ranks_ = global::D3.Guild.RankList.CreateBuilder(result.ranks_).MergeFrom(value).BuildPartial();
        } else {
          result.ranks_ = value;
        }
        result.hasRanks = true;
        return this;
      }
      public Builder ClearRanks() {
        PrepareBuilder();
        result.hasRanks = false;
        result.ranks_ = null;
        return this;
      }
      
      public bool HasMembers {
       get { return result.hasMembers; }
      }
      public global::D3.Guild.MemberList Members {
        get { return result.Members; }
        set { SetMembers(value); }
      }
      public Builder SetMembers(global::D3.Guild.MemberList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMembers = true;
        result.members_ = value;
        return this;
      }
      public Builder SetMembers(global::D3.Guild.MemberList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMembers = true;
        result.members_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMembers(global::D3.Guild.MemberList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMembers &&
            result.members_ != global::D3.Guild.MemberList.DefaultInstance) {
            result.members_ = global::D3.Guild.MemberList.CreateBuilder(result.members_).MergeFrom(value).BuildPartial();
        } else {
          result.members_ = value;
        }
        result.hasMembers = true;
        return this;
      }
      public Builder ClearMembers() {
        PrepareBuilder();
        result.hasMembers = false;
        result.members_ = null;
        return this;
      }
      
      public bool HasTotalMembers {
        get { return result.hasTotalMembers; }
      }
      public uint TotalMembers {
        get { return result.TotalMembers; }
        set { SetTotalMembers(value); }
      }
      public Builder SetTotalMembers(uint value) {
        PrepareBuilder();
        result.hasTotalMembers = true;
        result.totalMembers_ = value;
        return this;
      }
      public Builder ClearTotalMembers() {
        PrepareBuilder();
        result.hasTotalMembers = false;
        result.totalMembers_ = 0;
        return this;
      }
      
      public bool HasTag {
        get { return result.hasTag; }
      }
      public string Tag {
        get { return result.Tag; }
        set { SetTag(value); }
      }
      public Builder SetTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTag = true;
        result.tag_ = value;
        return this;
      }
      public Builder ClearTag() {
        PrepareBuilder();
        result.hasTag = false;
        result.tag_ = "";
        return this;
      }
      
      public bool HasCategory {
        get { return result.hasCategory; }
      }
      public uint Category {
        get { return result.Category; }
        set { SetCategory(value); }
      }
      public Builder SetCategory(uint value) {
        PrepareBuilder();
        result.hasCategory = true;
        result.category_ = value;
        return this;
      }
      public Builder ClearCategory() {
        PrepareBuilder();
        result.hasCategory = false;
        result.category_ = 0;
        return this;
      }
      
      public bool HasRequiresInvitation {
        get { return result.hasRequiresInvitation; }
      }
      public bool RequiresInvitation {
        get { return result.RequiresInvitation; }
        set { SetRequiresInvitation(value); }
      }
      public Builder SetRequiresInvitation(bool value) {
        PrepareBuilder();
        result.hasRequiresInvitation = true;
        result.requiresInvitation_ = value;
        return this;
      }
      public Builder ClearRequiresInvitation() {
        PrepareBuilder();
        result.hasRequiresInvitation = false;
        result.requiresInvitation_ = false;
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
      
      public bool HasLanguage {
        get { return result.hasLanguage; }
      }
      public uint Language {
        get { return result.Language; }
        set { SetLanguage(value); }
      }
      public Builder SetLanguage(uint value) {
        PrepareBuilder();
        result.hasLanguage = true;
        result.language_ = value;
        return this;
      }
      public Builder ClearLanguage() {
        PrepareBuilder();
        result.hasLanguage = false;
        result.language_ = 0;
        return this;
      }
      
      public bool HasInvites {
       get { return result.hasInvites; }
      }
      public global::D3.Guild.InviteList Invites {
        get { return result.Invites; }
        set { SetInvites(value); }
      }
      public Builder SetInvites(global::D3.Guild.InviteList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvites = true;
        result.invites_ = value;
        return this;
      }
      public Builder SetInvites(global::D3.Guild.InviteList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasInvites = true;
        result.invites_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInvites(global::D3.Guild.InviteList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasInvites &&
            result.invites_ != global::D3.Guild.InviteList.DefaultInstance) {
            result.invites_ = global::D3.Guild.InviteList.CreateBuilder(result.invites_).MergeFrom(value).BuildPartial();
        } else {
          result.invites_ = value;
        }
        result.hasInvites = true;
        return this;
      }
      public Builder ClearInvites() {
        PrepareBuilder();
        result.hasInvites = false;
        result.invites_ = null;
        return this;
      }
      
      public bool HasSearchable {
        get { return result.hasSearchable; }
      }
      public bool Searchable {
        get { return result.Searchable; }
        set { SetSearchable(value); }
      }
      public Builder SetSearchable(bool value) {
        PrepareBuilder();
        result.hasSearchable = true;
        result.searchable_ = value;
        return this;
      }
      public Builder ClearSearchable() {
        PrepareBuilder();
        result.hasSearchable = false;
        result.searchable_ = false;
        return this;
      }
      
      public bool HasAllowSuggestions {
        get { return result.hasAllowSuggestions; }
      }
      public bool AllowSuggestions {
        get { return result.AllowSuggestions; }
        set { SetAllowSuggestions(value); }
      }
      public Builder SetAllowSuggestions(bool value) {
        PrepareBuilder();
        result.hasAllowSuggestions = true;
        result.allowSuggestions_ = value;
        return this;
      }
      public Builder ClearAllowSuggestions() {
        PrepareBuilder();
        result.hasAllowSuggestions = false;
        result.allowSuggestions_ = false;
        return this;
      }
      
      public bool HasSearchCategory {
        get { return result.hasSearchCategory; }
      }
      public uint SearchCategory {
        get { return result.SearchCategory; }
        set { SetSearchCategory(value); }
      }
      public Builder SetSearchCategory(uint value) {
        PrepareBuilder();
        result.hasSearchCategory = true;
        result.searchCategory_ = value;
        return this;
      }
      public Builder ClearSearchCategory() {
        PrepareBuilder();
        result.hasSearchCategory = false;
        result.searchCategory_ = 0;
        return this;
      }
      
      public bool HasMotdLastUpdateTime {
        get { return result.hasMotdLastUpdateTime; }
      }
      public uint MotdLastUpdateTime {
        get { return result.MotdLastUpdateTime; }
        set { SetMotdLastUpdateTime(value); }
      }
      public Builder SetMotdLastUpdateTime(uint value) {
        PrepareBuilder();
        result.hasMotdLastUpdateTime = true;
        result.motdLastUpdateTime_ = value;
        return this;
      }
      public Builder ClearMotdLastUpdateTime() {
        PrepareBuilder();
        result.hasMotdLastUpdateTime = false;
        result.motdLastUpdateTime_ = 0;
        return this;
      }
      
      public bool HasMotdLastUpdateAccount {
        get { return result.hasMotdLastUpdateAccount; }
      }
      public ulong MotdLastUpdateAccount {
        get { return result.MotdLastUpdateAccount; }
        set { SetMotdLastUpdateAccount(value); }
      }
      public Builder SetMotdLastUpdateAccount(ulong value) {
        PrepareBuilder();
        result.hasMotdLastUpdateAccount = true;
        result.motdLastUpdateAccount_ = value;
        return this;
      }
      public Builder ClearMotdLastUpdateAccount() {
        PrepareBuilder();
        result.hasMotdLastUpdateAccount = false;
        result.motdLastUpdateAccount_ = 0UL;
        return this;
      }
      
      public bool HasDescriptionLastUpdateTime {
        get { return result.hasDescriptionLastUpdateTime; }
      }
      public uint DescriptionLastUpdateTime {
        get { return result.DescriptionLastUpdateTime; }
        set { SetDescriptionLastUpdateTime(value); }
      }
      public Builder SetDescriptionLastUpdateTime(uint value) {
        PrepareBuilder();
        result.hasDescriptionLastUpdateTime = true;
        result.descriptionLastUpdateTime_ = value;
        return this;
      }
      public Builder ClearDescriptionLastUpdateTime() {
        PrepareBuilder();
        result.hasDescriptionLastUpdateTime = false;
        result.descriptionLastUpdateTime_ = 0;
        return this;
      }
      
      public bool HasDescriptionLastUpdateAccount {
        get { return result.hasDescriptionLastUpdateAccount; }
      }
      public ulong DescriptionLastUpdateAccount {
        get { return result.DescriptionLastUpdateAccount; }
        set { SetDescriptionLastUpdateAccount(value); }
      }
      public Builder SetDescriptionLastUpdateAccount(ulong value) {
        PrepareBuilder();
        result.hasDescriptionLastUpdateAccount = true;
        result.descriptionLastUpdateAccount_ = value;
        return this;
      }
      public Builder ClearDescriptionLastUpdateAccount() {
        PrepareBuilder();
        result.hasDescriptionLastUpdateAccount = false;
        result.descriptionLastUpdateAccount_ = 0UL;
        return this;
      }
    }
    static Guild() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildList : pb::GeneratedMessage<GuildList, GuildList.Builder> {
    private GuildList() { }
    private static readonly GuildList defaultInstance = new GuildList().MakeReadOnly();
    private static readonly string[] _guildListFieldNames = new string[] { "guild_ids" };
    private static readonly uint[] _guildListFieldTags = new uint[] { 8 };
    public static GuildList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GuildList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildList, GuildList.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GuildList__FieldAccessorTable; }
    }
    
    public const int GuildIdsFieldNumber = 1;
    private pbc::PopsicleList<ulong> guildIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> GuildIdsList {
      get { return pbc::Lists.AsReadOnly(guildIds_); }
    }
    public int GuildIdsCount {
      get { return guildIds_.Count; }
    }
    public ulong GetGuildIds(int index) {
      return guildIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildListFieldNames;
      if (guildIds_.Count > 0) {
        output.WriteUInt64Array(1, field_names[0], guildIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (ulong element in GuildIdsList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * guildIds_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildList MakeReadOnly() {
      guildIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildList result;
      
      private GuildList PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildList original = result;
          result = new GuildList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.GuildList.Descriptor; }
      }
      
      public override GuildList DefaultInstanceForType {
        get { return global::D3.Guild.GuildList.DefaultInstance; }
      }
      
      public override GuildList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildList) {
          return MergeFrom((GuildList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildList other) {
        if (other == global::D3.Guild.GuildList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.guildIds_.Count != 0) {
          result.guildIds_.Add(other.guildIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt64Array(tag, field_name, result.guildIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<ulong> GuildIdsList {
        get { return PrepareBuilder().guildIds_; }
      }
      public int GuildIdsCount {
        get { return result.GuildIdsCount; }
      }
      public ulong GetGuildIds(int index) {
        return result.GetGuildIds(index);
      }
      public Builder SetGuildIds(int index, ulong value) {
        PrepareBuilder();
        result.guildIds_[index] = value;
        return this;
      }
      public Builder AddGuildIds(ulong value) {
        PrepareBuilder();
        result.guildIds_.Add(value);
        return this;
      }
      public Builder AddRangeGuildIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.guildIds_.Add(values);
        return this;
      }
      public Builder ClearGuildIds() {
        PrepareBuilder();
        result.guildIds_.Clear();
        return this;
      }
    }
    static GuildList() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class InviteInfo : pb::GeneratedMessage<InviteInfo, InviteInfo.Builder> {
    private InviteInfo() { }
    private static readonly InviteInfo defaultInstance = new InviteInfo().MakeReadOnly();
    private static readonly string[] _inviteInfoFieldNames = new string[] { "category", "expire_time", "guild_id", "guild_name", "guild_tag", "invite_type", "inviter_id" };
    private static readonly uint[] _inviteInfoFieldTags = new uint[] { 32, 48, 8, 18, 58, 40, 24 };
    public static InviteInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InviteInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override InviteInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_InviteInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InviteInfo, InviteInfo.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_InviteInfo__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int GuildNameFieldNumber = 2;
    private bool hasGuildName;
    private string guildName_ = "";
    public bool HasGuildName {
      get { return hasGuildName; }
    }
    public string GuildName {
      get { return guildName_; }
    }
    
    public const int InviterIdFieldNumber = 3;
    private bool hasInviterId;
    private ulong inviterId_;
    public bool HasInviterId {
      get { return hasInviterId; }
    }
    public ulong InviterId {
      get { return inviterId_; }
    }
    
    public const int CategoryFieldNumber = 4;
    private bool hasCategory;
    private uint category_;
    public bool HasCategory {
      get { return hasCategory; }
    }
    public uint Category {
      get { return category_; }
    }
    
    public const int InviteTypeFieldNumber = 5;
    private bool hasInviteType;
    private uint inviteType_;
    public bool HasInviteType {
      get { return hasInviteType; }
    }
    public uint InviteType {
      get { return inviteType_; }
    }
    
    public const int ExpireTimeFieldNumber = 6;
    private bool hasExpireTime;
    private uint expireTime_;
    public bool HasExpireTime {
      get { return hasExpireTime; }
    }
    public uint ExpireTime {
      get { return expireTime_; }
    }
    
    public const int GuildTagFieldNumber = 7;
    private bool hasGuildTag;
    private string guildTag_ = "";
    public bool HasGuildTag {
      get { return hasGuildTag; }
    }
    public string GuildTag {
      get { return guildTag_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasGuildName) return false;
        if (!hasInviterId) return false;
        if (!hasCategory) return false;
        if (!hasInviteType) return false;
        if (!hasExpireTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _inviteInfoFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[2], GuildId);
      }
      if (hasGuildName) {
        output.WriteString(2, field_names[3], GuildName);
      }
      if (hasInviterId) {
        output.WriteUInt64(3, field_names[6], InviterId);
      }
      if (hasCategory) {
        output.WriteUInt32(4, field_names[0], Category);
      }
      if (hasInviteType) {
        output.WriteUInt32(5, field_names[5], InviteType);
      }
      if (hasExpireTime) {
        output.WriteUInt32(6, field_names[1], ExpireTime);
      }
      if (hasGuildTag) {
        output.WriteString(7, field_names[4], GuildTag);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasGuildName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, GuildName);
        }
        if (hasInviterId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, InviterId);
        }
        if (hasCategory) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, Category);
        }
        if (hasInviteType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, InviteType);
        }
        if (hasExpireTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, ExpireTime);
        }
        if (hasGuildTag) {
          size += pb::CodedOutputStream.ComputeStringSize(7, GuildTag);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InviteInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InviteInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InviteInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InviteInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InviteInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InviteInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InviteInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InviteInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InviteInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InviteInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private InviteInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InviteInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<InviteInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(InviteInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private InviteInfo result;
      
      private InviteInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          InviteInfo original = result;
          result = new InviteInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override InviteInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.InviteInfo.Descriptor; }
      }
      
      public override InviteInfo DefaultInstanceForType {
        get { return global::D3.Guild.InviteInfo.DefaultInstance; }
      }
      
      public override InviteInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InviteInfo) {
          return MergeFrom((InviteInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InviteInfo other) {
        if (other == global::D3.Guild.InviteInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasGuildName) {
          GuildName = other.GuildName;
        }
        if (other.HasInviterId) {
          InviterId = other.InviterId;
        }
        if (other.HasCategory) {
          Category = other.Category;
        }
        if (other.HasInviteType) {
          InviteType = other.InviteType;
        }
        if (other.HasExpireTime) {
          ExpireTime = other.ExpireTime;
        }
        if (other.HasGuildTag) {
          GuildTag = other.GuildTag;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_inviteInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _inviteInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 18: {
              result.hasGuildName = input.ReadString(ref result.guildName_);
              break;
            }
            case 24: {
              result.hasInviterId = input.ReadUInt64(ref result.inviterId_);
              break;
            }
            case 32: {
              result.hasCategory = input.ReadUInt32(ref result.category_);
              break;
            }
            case 40: {
              result.hasInviteType = input.ReadUInt32(ref result.inviteType_);
              break;
            }
            case 48: {
              result.hasExpireTime = input.ReadUInt32(ref result.expireTime_);
              break;
            }
            case 58: {
              result.hasGuildTag = input.ReadString(ref result.guildTag_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasGuildName {
        get { return result.hasGuildName; }
      }
      public string GuildName {
        get { return result.GuildName; }
        set { SetGuildName(value); }
      }
      public Builder SetGuildName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildName = true;
        result.guildName_ = value;
        return this;
      }
      public Builder ClearGuildName() {
        PrepareBuilder();
        result.hasGuildName = false;
        result.guildName_ = "";
        return this;
      }
      
      public bool HasInviterId {
        get { return result.hasInviterId; }
      }
      public ulong InviterId {
        get { return result.InviterId; }
        set { SetInviterId(value); }
      }
      public Builder SetInviterId(ulong value) {
        PrepareBuilder();
        result.hasInviterId = true;
        result.inviterId_ = value;
        return this;
      }
      public Builder ClearInviterId() {
        PrepareBuilder();
        result.hasInviterId = false;
        result.inviterId_ = 0UL;
        return this;
      }
      
      public bool HasCategory {
        get { return result.hasCategory; }
      }
      public uint Category {
        get { return result.Category; }
        set { SetCategory(value); }
      }
      public Builder SetCategory(uint value) {
        PrepareBuilder();
        result.hasCategory = true;
        result.category_ = value;
        return this;
      }
      public Builder ClearCategory() {
        PrepareBuilder();
        result.hasCategory = false;
        result.category_ = 0;
        return this;
      }
      
      public bool HasInviteType {
        get { return result.hasInviteType; }
      }
      public uint InviteType {
        get { return result.InviteType; }
        set { SetInviteType(value); }
      }
      public Builder SetInviteType(uint value) {
        PrepareBuilder();
        result.hasInviteType = true;
        result.inviteType_ = value;
        return this;
      }
      public Builder ClearInviteType() {
        PrepareBuilder();
        result.hasInviteType = false;
        result.inviteType_ = 0;
        return this;
      }
      
      public bool HasExpireTime {
        get { return result.hasExpireTime; }
      }
      public uint ExpireTime {
        get { return result.ExpireTime; }
        set { SetExpireTime(value); }
      }
      public Builder SetExpireTime(uint value) {
        PrepareBuilder();
        result.hasExpireTime = true;
        result.expireTime_ = value;
        return this;
      }
      public Builder ClearExpireTime() {
        PrepareBuilder();
        result.hasExpireTime = false;
        result.expireTime_ = 0;
        return this;
      }
      
      public bool HasGuildTag {
        get { return result.hasGuildTag; }
      }
      public string GuildTag {
        get { return result.GuildTag; }
        set { SetGuildTag(value); }
      }
      public Builder SetGuildTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildTag = true;
        result.guildTag_ = value;
        return this;
      }
      public Builder ClearGuildTag() {
        PrepareBuilder();
        result.hasGuildTag = false;
        result.guildTag_ = "";
        return this;
      }
    }
    static InviteInfo() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class InviteInfoList : pb::GeneratedMessage<InviteInfoList, InviteInfoList.Builder> {
    private InviteInfoList() { }
    private static readonly InviteInfoList defaultInstance = new InviteInfoList().MakeReadOnly();
    private static readonly string[] _inviteInfoListFieldNames = new string[] { "invites" };
    private static readonly uint[] _inviteInfoListFieldTags = new uint[] { 10 };
    public static InviteInfoList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override InviteInfoList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override InviteInfoList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_InviteInfoList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<InviteInfoList, InviteInfoList.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_InviteInfoList__FieldAccessorTable; }
    }
    
    public const int InvitesFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Guild.InviteInfo> invites_ = new pbc::PopsicleList<global::D3.Guild.InviteInfo>();
    public scg::IList<global::D3.Guild.InviteInfo> InvitesList {
      get { return invites_; }
    }
    public int InvitesCount {
      get { return invites_.Count; }
    }
    public global::D3.Guild.InviteInfo GetInvites(int index) {
      return invites_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Guild.InviteInfo element in InvitesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _inviteInfoListFieldNames;
      if (invites_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], invites_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Guild.InviteInfo element in InvitesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static InviteInfoList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InviteInfoList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InviteInfoList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static InviteInfoList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static InviteInfoList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InviteInfoList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static InviteInfoList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static InviteInfoList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static InviteInfoList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static InviteInfoList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private InviteInfoList MakeReadOnly() {
      invites_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(InviteInfoList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<InviteInfoList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(InviteInfoList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private InviteInfoList result;
      
      private InviteInfoList PrepareBuilder() {
        if (resultIsReadOnly) {
          InviteInfoList original = result;
          result = new InviteInfoList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override InviteInfoList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.InviteInfoList.Descriptor; }
      }
      
      public override InviteInfoList DefaultInstanceForType {
        get { return global::D3.Guild.InviteInfoList.DefaultInstance; }
      }
      
      public override InviteInfoList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is InviteInfoList) {
          return MergeFrom((InviteInfoList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(InviteInfoList other) {
        if (other == global::D3.Guild.InviteInfoList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.invites_.Count != 0) {
          result.invites_.Add(other.invites_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_inviteInfoListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _inviteInfoListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.invites_, global::D3.Guild.InviteInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Guild.InviteInfo> InvitesList {
        get { return PrepareBuilder().invites_; }
      }
      public int InvitesCount {
        get { return result.InvitesCount; }
      }
      public global::D3.Guild.InviteInfo GetInvites(int index) {
        return result.GetInvites(index);
      }
      public Builder SetInvites(int index, global::D3.Guild.InviteInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.invites_[index] = value;
        return this;
      }
      public Builder SetInvites(int index, global::D3.Guild.InviteInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.invites_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddInvites(global::D3.Guild.InviteInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.invites_.Add(value);
        return this;
      }
      public Builder AddInvites(global::D3.Guild.InviteInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.invites_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeInvites(scg::IEnumerable<global::D3.Guild.InviteInfo> values) {
        PrepareBuilder();
        result.invites_.Add(values);
        return this;
      }
      public Builder ClearInvites() {
        PrepareBuilder();
        result.invites_.Clear();
        return this;
      }
    }
    static InviteInfoList() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildInfo : pb::GeneratedMessage<GuildInfo, GuildInfo.Builder> {
    private GuildInfo() { }
    private static readonly GuildInfo defaultInstance = new GuildInfo().MakeReadOnly();
    private static readonly string[] _guildInfoFieldNames = new string[] { "allow_suggestions", "deleted", "guild_category", "guild_id", "guild_leader_id", "member_news_time", "name", "rank_id", "requires_invite", "searchable", "tag", "total_members", "validated_member_ids" };
    private static readonly uint[] _guildInfoFieldTags = new uint[] { 104, 96, 16, 8, 48, 32, 26, 64, 88, 72, 82, 40, 56 };
    public static GuildInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GuildInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildInfo, GuildInfo.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GuildInfo__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int GuildCategoryFieldNumber = 2;
    private bool hasGuildCategory;
    private uint guildCategory_;
    public bool HasGuildCategory {
      get { return hasGuildCategory; }
    }
    public uint GuildCategory {
      get { return guildCategory_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int TagFieldNumber = 10;
    private bool hasTag;
    private string tag_ = "";
    public bool HasTag {
      get { return hasTag; }
    }
    public string Tag {
      get { return tag_; }
    }
    
    public const int RequiresInviteFieldNumber = 11;
    private bool hasRequiresInvite;
    private bool requiresInvite_;
    public bool HasRequiresInvite {
      get { return hasRequiresInvite; }
    }
    public bool RequiresInvite {
      get { return requiresInvite_; }
    }
    
    public const int MemberNewsTimeFieldNumber = 4;
    private bool hasMemberNewsTime;
    private ulong memberNewsTime_;
    public bool HasMemberNewsTime {
      get { return hasMemberNewsTime; }
    }
    public ulong MemberNewsTime {
      get { return memberNewsTime_; }
    }
    
    public const int TotalMembersFieldNumber = 5;
    private bool hasTotalMembers;
    private uint totalMembers_;
    public bool HasTotalMembers {
      get { return hasTotalMembers; }
    }
    public uint TotalMembers {
      get { return totalMembers_; }
    }
    
    public const int GuildLeaderIdFieldNumber = 6;
    private bool hasGuildLeaderId;
    private ulong guildLeaderId_;
    public bool HasGuildLeaderId {
      get { return hasGuildLeaderId; }
    }
    public ulong GuildLeaderId {
      get { return guildLeaderId_; }
    }
    
    public const int ValidatedMemberIdsFieldNumber = 7;
    private pbc::PopsicleList<ulong> validatedMemberIds_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> ValidatedMemberIdsList {
      get { return pbc::Lists.AsReadOnly(validatedMemberIds_); }
    }
    public int ValidatedMemberIdsCount {
      get { return validatedMemberIds_.Count; }
    }
    public ulong GetValidatedMemberIds(int index) {
      return validatedMemberIds_[index];
    }
    
    public const int RankIdFieldNumber = 8;
    private bool hasRankId;
    private uint rankId_;
    public bool HasRankId {
      get { return hasRankId; }
    }
    public uint RankId {
      get { return rankId_; }
    }
    
    public const int SearchableFieldNumber = 9;
    private bool hasSearchable;
    private bool searchable_;
    public bool HasSearchable {
      get { return hasSearchable; }
    }
    public bool Searchable {
      get { return searchable_; }
    }
    
    public const int AllowSuggestionsFieldNumber = 13;
    private bool hasAllowSuggestions;
    private bool allowSuggestions_;
    public bool HasAllowSuggestions {
      get { return hasAllowSuggestions; }
    }
    public bool AllowSuggestions {
      get { return allowSuggestions_; }
    }
    
    public const int DeletedFieldNumber = 12;
    private bool hasDeleted;
    private bool deleted_;
    public bool HasDeleted {
      get { return hasDeleted; }
    }
    public bool Deleted {
      get { return deleted_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasGuildCategory) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildInfoFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[3], GuildId);
      }
      if (hasGuildCategory) {
        output.WriteUInt32(2, field_names[2], GuildCategory);
      }
      if (hasName) {
        output.WriteString(3, field_names[6], Name);
      }
      if (hasMemberNewsTime) {
        output.WriteUInt64(4, field_names[5], MemberNewsTime);
      }
      if (hasTotalMembers) {
        output.WriteUInt32(5, field_names[11], TotalMembers);
      }
      if (hasGuildLeaderId) {
        output.WriteUInt64(6, field_names[4], GuildLeaderId);
      }
      if (validatedMemberIds_.Count > 0) {
        output.WriteUInt64Array(7, field_names[12], validatedMemberIds_);
      }
      if (hasRankId) {
        output.WriteUInt32(8, field_names[7], RankId);
      }
      if (hasSearchable) {
        output.WriteBool(9, field_names[9], Searchable);
      }
      if (hasTag) {
        output.WriteString(10, field_names[10], Tag);
      }
      if (hasRequiresInvite) {
        output.WriteBool(11, field_names[8], RequiresInvite);
      }
      if (hasDeleted) {
        output.WriteBool(12, field_names[1], Deleted);
      }
      if (hasAllowSuggestions) {
        output.WriteBool(13, field_names[0], AllowSuggestions);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasGuildCategory) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, GuildCategory);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Name);
        }
        if (hasTag) {
          size += pb::CodedOutputStream.ComputeStringSize(10, Tag);
        }
        if (hasRequiresInvite) {
          size += pb::CodedOutputStream.ComputeBoolSize(11, RequiresInvite);
        }
        if (hasMemberNewsTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, MemberNewsTime);
        }
        if (hasTotalMembers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, TotalMembers);
        }
        if (hasGuildLeaderId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(6, GuildLeaderId);
        }
        {
          int dataSize = 0;
          foreach (ulong element in ValidatedMemberIdsList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * validatedMemberIds_.Count;
        }
        if (hasRankId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, RankId);
        }
        if (hasSearchable) {
          size += pb::CodedOutputStream.ComputeBoolSize(9, Searchable);
        }
        if (hasAllowSuggestions) {
          size += pb::CodedOutputStream.ComputeBoolSize(13, AllowSuggestions);
        }
        if (hasDeleted) {
          size += pb::CodedOutputStream.ComputeBoolSize(12, Deleted);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildInfo MakeReadOnly() {
      validatedMemberIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildInfo result;
      
      private GuildInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildInfo original = result;
          result = new GuildInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.GuildInfo.Descriptor; }
      }
      
      public override GuildInfo DefaultInstanceForType {
        get { return global::D3.Guild.GuildInfo.DefaultInstance; }
      }
      
      public override GuildInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildInfo) {
          return MergeFrom((GuildInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildInfo other) {
        if (other == global::D3.Guild.GuildInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasGuildCategory) {
          GuildCategory = other.GuildCategory;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasTag) {
          Tag = other.Tag;
        }
        if (other.HasRequiresInvite) {
          RequiresInvite = other.RequiresInvite;
        }
        if (other.HasMemberNewsTime) {
          MemberNewsTime = other.MemberNewsTime;
        }
        if (other.HasTotalMembers) {
          TotalMembers = other.TotalMembers;
        }
        if (other.HasGuildLeaderId) {
          GuildLeaderId = other.GuildLeaderId;
        }
        if (other.validatedMemberIds_.Count != 0) {
          result.validatedMemberIds_.Add(other.validatedMemberIds_);
        }
        if (other.HasRankId) {
          RankId = other.RankId;
        }
        if (other.HasSearchable) {
          Searchable = other.Searchable;
        }
        if (other.HasAllowSuggestions) {
          AllowSuggestions = other.AllowSuggestions;
        }
        if (other.HasDeleted) {
          Deleted = other.Deleted;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 16: {
              result.hasGuildCategory = input.ReadUInt32(ref result.guildCategory_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 32: {
              result.hasMemberNewsTime = input.ReadUInt64(ref result.memberNewsTime_);
              break;
            }
            case 40: {
              result.hasTotalMembers = input.ReadUInt32(ref result.totalMembers_);
              break;
            }
            case 48: {
              result.hasGuildLeaderId = input.ReadUInt64(ref result.guildLeaderId_);
              break;
            }
            case 58:
            case 56: {
              input.ReadUInt64Array(tag, field_name, result.validatedMemberIds_);
              break;
            }
            case 64: {
              result.hasRankId = input.ReadUInt32(ref result.rankId_);
              break;
            }
            case 72: {
              result.hasSearchable = input.ReadBool(ref result.searchable_);
              break;
            }
            case 82: {
              result.hasTag = input.ReadString(ref result.tag_);
              break;
            }
            case 88: {
              result.hasRequiresInvite = input.ReadBool(ref result.requiresInvite_);
              break;
            }
            case 96: {
              result.hasDeleted = input.ReadBool(ref result.deleted_);
              break;
            }
            case 104: {
              result.hasAllowSuggestions = input.ReadBool(ref result.allowSuggestions_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasGuildCategory {
        get { return result.hasGuildCategory; }
      }
      public uint GuildCategory {
        get { return result.GuildCategory; }
        set { SetGuildCategory(value); }
      }
      public Builder SetGuildCategory(uint value) {
        PrepareBuilder();
        result.hasGuildCategory = true;
        result.guildCategory_ = value;
        return this;
      }
      public Builder ClearGuildCategory() {
        PrepareBuilder();
        result.hasGuildCategory = false;
        result.guildCategory_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasTag {
        get { return result.hasTag; }
      }
      public string Tag {
        get { return result.Tag; }
        set { SetTag(value); }
      }
      public Builder SetTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTag = true;
        result.tag_ = value;
        return this;
      }
      public Builder ClearTag() {
        PrepareBuilder();
        result.hasTag = false;
        result.tag_ = "";
        return this;
      }
      
      public bool HasRequiresInvite {
        get { return result.hasRequiresInvite; }
      }
      public bool RequiresInvite {
        get { return result.RequiresInvite; }
        set { SetRequiresInvite(value); }
      }
      public Builder SetRequiresInvite(bool value) {
        PrepareBuilder();
        result.hasRequiresInvite = true;
        result.requiresInvite_ = value;
        return this;
      }
      public Builder ClearRequiresInvite() {
        PrepareBuilder();
        result.hasRequiresInvite = false;
        result.requiresInvite_ = false;
        return this;
      }
      
      public bool HasMemberNewsTime {
        get { return result.hasMemberNewsTime; }
      }
      public ulong MemberNewsTime {
        get { return result.MemberNewsTime; }
        set { SetMemberNewsTime(value); }
      }
      public Builder SetMemberNewsTime(ulong value) {
        PrepareBuilder();
        result.hasMemberNewsTime = true;
        result.memberNewsTime_ = value;
        return this;
      }
      public Builder ClearMemberNewsTime() {
        PrepareBuilder();
        result.hasMemberNewsTime = false;
        result.memberNewsTime_ = 0UL;
        return this;
      }
      
      public bool HasTotalMembers {
        get { return result.hasTotalMembers; }
      }
      public uint TotalMembers {
        get { return result.TotalMembers; }
        set { SetTotalMembers(value); }
      }
      public Builder SetTotalMembers(uint value) {
        PrepareBuilder();
        result.hasTotalMembers = true;
        result.totalMembers_ = value;
        return this;
      }
      public Builder ClearTotalMembers() {
        PrepareBuilder();
        result.hasTotalMembers = false;
        result.totalMembers_ = 0;
        return this;
      }
      
      public bool HasGuildLeaderId {
        get { return result.hasGuildLeaderId; }
      }
      public ulong GuildLeaderId {
        get { return result.GuildLeaderId; }
        set { SetGuildLeaderId(value); }
      }
      public Builder SetGuildLeaderId(ulong value) {
        PrepareBuilder();
        result.hasGuildLeaderId = true;
        result.guildLeaderId_ = value;
        return this;
      }
      public Builder ClearGuildLeaderId() {
        PrepareBuilder();
        result.hasGuildLeaderId = false;
        result.guildLeaderId_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> ValidatedMemberIdsList {
        get { return PrepareBuilder().validatedMemberIds_; }
      }
      public int ValidatedMemberIdsCount {
        get { return result.ValidatedMemberIdsCount; }
      }
      public ulong GetValidatedMemberIds(int index) {
        return result.GetValidatedMemberIds(index);
      }
      public Builder SetValidatedMemberIds(int index, ulong value) {
        PrepareBuilder();
        result.validatedMemberIds_[index] = value;
        return this;
      }
      public Builder AddValidatedMemberIds(ulong value) {
        PrepareBuilder();
        result.validatedMemberIds_.Add(value);
        return this;
      }
      public Builder AddRangeValidatedMemberIds(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.validatedMemberIds_.Add(values);
        return this;
      }
      public Builder ClearValidatedMemberIds() {
        PrepareBuilder();
        result.validatedMemberIds_.Clear();
        return this;
      }
      
      public bool HasRankId {
        get { return result.hasRankId; }
      }
      public uint RankId {
        get { return result.RankId; }
        set { SetRankId(value); }
      }
      public Builder SetRankId(uint value) {
        PrepareBuilder();
        result.hasRankId = true;
        result.rankId_ = value;
        return this;
      }
      public Builder ClearRankId() {
        PrepareBuilder();
        result.hasRankId = false;
        result.rankId_ = 0;
        return this;
      }
      
      public bool HasSearchable {
        get { return result.hasSearchable; }
      }
      public bool Searchable {
        get { return result.Searchable; }
        set { SetSearchable(value); }
      }
      public Builder SetSearchable(bool value) {
        PrepareBuilder();
        result.hasSearchable = true;
        result.searchable_ = value;
        return this;
      }
      public Builder ClearSearchable() {
        PrepareBuilder();
        result.hasSearchable = false;
        result.searchable_ = false;
        return this;
      }
      
      public bool HasAllowSuggestions {
        get { return result.hasAllowSuggestions; }
      }
      public bool AllowSuggestions {
        get { return result.AllowSuggestions; }
        set { SetAllowSuggestions(value); }
      }
      public Builder SetAllowSuggestions(bool value) {
        PrepareBuilder();
        result.hasAllowSuggestions = true;
        result.allowSuggestions_ = value;
        return this;
      }
      public Builder ClearAllowSuggestions() {
        PrepareBuilder();
        result.hasAllowSuggestions = false;
        result.allowSuggestions_ = false;
        return this;
      }
      
      public bool HasDeleted {
        get { return result.hasDeleted; }
      }
      public bool Deleted {
        get { return result.Deleted; }
        set { SetDeleted(value); }
      }
      public Builder SetDeleted(bool value) {
        PrepareBuilder();
        result.hasDeleted = true;
        result.deleted_ = value;
        return this;
      }
      public Builder ClearDeleted() {
        PrepareBuilder();
        result.hasDeleted = false;
        result.deleted_ = false;
        return this;
      }
    }
    static GuildInfo() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildInfoList : pb::GeneratedMessage<GuildInfoList, GuildInfoList.Builder> {
    private GuildInfoList() { }
    private static readonly GuildInfoList defaultInstance = new GuildInfoList().MakeReadOnly();
    private static readonly string[] _guildInfoListFieldNames = new string[] { "guilds" };
    private static readonly uint[] _guildInfoListFieldTags = new uint[] { 10 };
    public static GuildInfoList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildInfoList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildInfoList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GuildInfoList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildInfoList, GuildInfoList.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GuildInfoList__FieldAccessorTable; }
    }
    
    public const int GuildsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Guild.GuildInfo> guilds_ = new pbc::PopsicleList<global::D3.Guild.GuildInfo>();
    public scg::IList<global::D3.Guild.GuildInfo> GuildsList {
      get { return guilds_; }
    }
    public int GuildsCount {
      get { return guilds_.Count; }
    }
    public global::D3.Guild.GuildInfo GetGuilds(int index) {
      return guilds_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Guild.GuildInfo element in GuildsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildInfoListFieldNames;
      if (guilds_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], guilds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Guild.GuildInfo element in GuildsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildInfoList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInfoList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInfoList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildInfoList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildInfoList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInfoList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildInfoList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildInfoList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildInfoList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildInfoList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildInfoList MakeReadOnly() {
      guilds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildInfoList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildInfoList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildInfoList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildInfoList result;
      
      private GuildInfoList PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildInfoList original = result;
          result = new GuildInfoList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildInfoList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.GuildInfoList.Descriptor; }
      }
      
      public override GuildInfoList DefaultInstanceForType {
        get { return global::D3.Guild.GuildInfoList.DefaultInstance; }
      }
      
      public override GuildInfoList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildInfoList) {
          return MergeFrom((GuildInfoList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildInfoList other) {
        if (other == global::D3.Guild.GuildInfoList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.guilds_.Count != 0) {
          result.guilds_.Add(other.guilds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildInfoListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildInfoListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.guilds_, global::D3.Guild.GuildInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Guild.GuildInfo> GuildsList {
        get { return PrepareBuilder().guilds_; }
      }
      public int GuildsCount {
        get { return result.GuildsCount; }
      }
      public global::D3.Guild.GuildInfo GetGuilds(int index) {
        return result.GetGuilds(index);
      }
      public Builder SetGuilds(int index, global::D3.Guild.GuildInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.guilds_[index] = value;
        return this;
      }
      public Builder SetGuilds(int index, global::D3.Guild.GuildInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.guilds_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGuilds(global::D3.Guild.GuildInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.guilds_.Add(value);
        return this;
      }
      public Builder AddGuilds(global::D3.Guild.GuildInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.guilds_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGuilds(scg::IEnumerable<global::D3.Guild.GuildInfo> values) {
        PrepareBuilder();
        result.guilds_.Add(values);
        return this;
      }
      public Builder ClearGuilds() {
        PrepareBuilder();
        result.guilds_.Clear();
        return this;
      }
    }
    static GuildInfoList() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildSearchResult : pb::GeneratedMessage<GuildSearchResult, GuildSearchResult.Builder> {
    private GuildSearchResult() { }
    private static readonly GuildSearchResult defaultInstance = new GuildSearchResult().MakeReadOnly();
    private static readonly string[] _guildSearchResultFieldNames = new string[] { "category", "guild_id", "guild_name", "guild_tag", "language", "last_activity", "last_officer_activity", "members_in_chat", "requires_invite", "search_category", "total_members" };
    private static readonly uint[] _guildSearchResultFieldTags = new uint[] { 40, 8, 18, 26, 48, 80, 88, 72, 56, 32, 64 };
    public static GuildSearchResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildSearchResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildSearchResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GuildSearchResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildSearchResult, GuildSearchResult.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GuildSearchResult__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int GuildNameFieldNumber = 2;
    private bool hasGuildName;
    private string guildName_ = "";
    public bool HasGuildName {
      get { return hasGuildName; }
    }
    public string GuildName {
      get { return guildName_; }
    }
    
    public const int GuildTagFieldNumber = 3;
    private bool hasGuildTag;
    private string guildTag_ = "";
    public bool HasGuildTag {
      get { return hasGuildTag; }
    }
    public string GuildTag {
      get { return guildTag_; }
    }
    
    public const int SearchCategoryFieldNumber = 4;
    private bool hasSearchCategory;
    private uint searchCategory_;
    public bool HasSearchCategory {
      get { return hasSearchCategory; }
    }
    public uint SearchCategory {
      get { return searchCategory_; }
    }
    
    public const int CategoryFieldNumber = 5;
    private bool hasCategory;
    private uint category_;
    public bool HasCategory {
      get { return hasCategory; }
    }
    public uint Category {
      get { return category_; }
    }
    
    public const int LanguageFieldNumber = 6;
    private bool hasLanguage;
    private uint language_;
    public bool HasLanguage {
      get { return hasLanguage; }
    }
    public uint Language {
      get { return language_; }
    }
    
    public const int RequiresInviteFieldNumber = 7;
    private bool hasRequiresInvite;
    private bool requiresInvite_;
    public bool HasRequiresInvite {
      get { return hasRequiresInvite; }
    }
    public bool RequiresInvite {
      get { return requiresInvite_; }
    }
    
    public const int TotalMembersFieldNumber = 8;
    private bool hasTotalMembers;
    private uint totalMembers_;
    public bool HasTotalMembers {
      get { return hasTotalMembers; }
    }
    public uint TotalMembers {
      get { return totalMembers_; }
    }
    
    public const int MembersInChatFieldNumber = 9;
    private bool hasMembersInChat;
    private uint membersInChat_;
    public bool HasMembersInChat {
      get { return hasMembersInChat; }
    }
    public uint MembersInChat {
      get { return membersInChat_; }
    }
    
    public const int LastActivityFieldNumber = 10;
    private bool hasLastActivity;
    private ulong lastActivity_;
    public bool HasLastActivity {
      get { return hasLastActivity; }
    }
    public ulong LastActivity {
      get { return lastActivity_; }
    }
    
    public const int LastOfficerActivityFieldNumber = 11;
    private bool hasLastOfficerActivity;
    private ulong lastOfficerActivity_;
    public bool HasLastOfficerActivity {
      get { return hasLastOfficerActivity; }
    }
    public ulong LastOfficerActivity {
      get { return lastOfficerActivity_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasGuildName) return false;
        if (!hasCategory) return false;
        if (!hasLanguage) return false;
        if (!hasRequiresInvite) return false;
        if (!hasTotalMembers) return false;
        if (!hasLastActivity) return false;
        if (!hasLastOfficerActivity) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildSearchResultFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[1], GuildId);
      }
      if (hasGuildName) {
        output.WriteString(2, field_names[2], GuildName);
      }
      if (hasGuildTag) {
        output.WriteString(3, field_names[3], GuildTag);
      }
      if (hasSearchCategory) {
        output.WriteUInt32(4, field_names[9], SearchCategory);
      }
      if (hasCategory) {
        output.WriteUInt32(5, field_names[0], Category);
      }
      if (hasLanguage) {
        output.WriteUInt32(6, field_names[4], Language);
      }
      if (hasRequiresInvite) {
        output.WriteBool(7, field_names[8], RequiresInvite);
      }
      if (hasTotalMembers) {
        output.WriteUInt32(8, field_names[10], TotalMembers);
      }
      if (hasMembersInChat) {
        output.WriteUInt32(9, field_names[7], MembersInChat);
      }
      if (hasLastActivity) {
        output.WriteUInt64(10, field_names[5], LastActivity);
      }
      if (hasLastOfficerActivity) {
        output.WriteUInt64(11, field_names[6], LastOfficerActivity);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasGuildName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, GuildName);
        }
        if (hasGuildTag) {
          size += pb::CodedOutputStream.ComputeStringSize(3, GuildTag);
        }
        if (hasSearchCategory) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, SearchCategory);
        }
        if (hasCategory) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, Category);
        }
        if (hasLanguage) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, Language);
        }
        if (hasRequiresInvite) {
          size += pb::CodedOutputStream.ComputeBoolSize(7, RequiresInvite);
        }
        if (hasTotalMembers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, TotalMembers);
        }
        if (hasMembersInChat) {
          size += pb::CodedOutputStream.ComputeUInt32Size(9, MembersInChat);
        }
        if (hasLastActivity) {
          size += pb::CodedOutputStream.ComputeUInt64Size(10, LastActivity);
        }
        if (hasLastOfficerActivity) {
          size += pb::CodedOutputStream.ComputeUInt64Size(11, LastOfficerActivity);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildSearchResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSearchResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSearchResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSearchResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSearchResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSearchResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildSearchResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildSearchResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildSearchResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSearchResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildSearchResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildSearchResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildSearchResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildSearchResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildSearchResult result;
      
      private GuildSearchResult PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildSearchResult original = result;
          result = new GuildSearchResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildSearchResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.GuildSearchResult.Descriptor; }
      }
      
      public override GuildSearchResult DefaultInstanceForType {
        get { return global::D3.Guild.GuildSearchResult.DefaultInstance; }
      }
      
      public override GuildSearchResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildSearchResult) {
          return MergeFrom((GuildSearchResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildSearchResult other) {
        if (other == global::D3.Guild.GuildSearchResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasGuildName) {
          GuildName = other.GuildName;
        }
        if (other.HasGuildTag) {
          GuildTag = other.GuildTag;
        }
        if (other.HasSearchCategory) {
          SearchCategory = other.SearchCategory;
        }
        if (other.HasCategory) {
          Category = other.Category;
        }
        if (other.HasLanguage) {
          Language = other.Language;
        }
        if (other.HasRequiresInvite) {
          RequiresInvite = other.RequiresInvite;
        }
        if (other.HasTotalMembers) {
          TotalMembers = other.TotalMembers;
        }
        if (other.HasMembersInChat) {
          MembersInChat = other.MembersInChat;
        }
        if (other.HasLastActivity) {
          LastActivity = other.LastActivity;
        }
        if (other.HasLastOfficerActivity) {
          LastOfficerActivity = other.LastOfficerActivity;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildSearchResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildSearchResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 18: {
              result.hasGuildName = input.ReadString(ref result.guildName_);
              break;
            }
            case 26: {
              result.hasGuildTag = input.ReadString(ref result.guildTag_);
              break;
            }
            case 32: {
              result.hasSearchCategory = input.ReadUInt32(ref result.searchCategory_);
              break;
            }
            case 40: {
              result.hasCategory = input.ReadUInt32(ref result.category_);
              break;
            }
            case 48: {
              result.hasLanguage = input.ReadUInt32(ref result.language_);
              break;
            }
            case 56: {
              result.hasRequiresInvite = input.ReadBool(ref result.requiresInvite_);
              break;
            }
            case 64: {
              result.hasTotalMembers = input.ReadUInt32(ref result.totalMembers_);
              break;
            }
            case 72: {
              result.hasMembersInChat = input.ReadUInt32(ref result.membersInChat_);
              break;
            }
            case 80: {
              result.hasLastActivity = input.ReadUInt64(ref result.lastActivity_);
              break;
            }
            case 88: {
              result.hasLastOfficerActivity = input.ReadUInt64(ref result.lastOfficerActivity_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasGuildName {
        get { return result.hasGuildName; }
      }
      public string GuildName {
        get { return result.GuildName; }
        set { SetGuildName(value); }
      }
      public Builder SetGuildName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildName = true;
        result.guildName_ = value;
        return this;
      }
      public Builder ClearGuildName() {
        PrepareBuilder();
        result.hasGuildName = false;
        result.guildName_ = "";
        return this;
      }
      
      public bool HasGuildTag {
        get { return result.hasGuildTag; }
      }
      public string GuildTag {
        get { return result.GuildTag; }
        set { SetGuildTag(value); }
      }
      public Builder SetGuildTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildTag = true;
        result.guildTag_ = value;
        return this;
      }
      public Builder ClearGuildTag() {
        PrepareBuilder();
        result.hasGuildTag = false;
        result.guildTag_ = "";
        return this;
      }
      
      public bool HasSearchCategory {
        get { return result.hasSearchCategory; }
      }
      public uint SearchCategory {
        get { return result.SearchCategory; }
        set { SetSearchCategory(value); }
      }
      public Builder SetSearchCategory(uint value) {
        PrepareBuilder();
        result.hasSearchCategory = true;
        result.searchCategory_ = value;
        return this;
      }
      public Builder ClearSearchCategory() {
        PrepareBuilder();
        result.hasSearchCategory = false;
        result.searchCategory_ = 0;
        return this;
      }
      
      public bool HasCategory {
        get { return result.hasCategory; }
      }
      public uint Category {
        get { return result.Category; }
        set { SetCategory(value); }
      }
      public Builder SetCategory(uint value) {
        PrepareBuilder();
        result.hasCategory = true;
        result.category_ = value;
        return this;
      }
      public Builder ClearCategory() {
        PrepareBuilder();
        result.hasCategory = false;
        result.category_ = 0;
        return this;
      }
      
      public bool HasLanguage {
        get { return result.hasLanguage; }
      }
      public uint Language {
        get { return result.Language; }
        set { SetLanguage(value); }
      }
      public Builder SetLanguage(uint value) {
        PrepareBuilder();
        result.hasLanguage = true;
        result.language_ = value;
        return this;
      }
      public Builder ClearLanguage() {
        PrepareBuilder();
        result.hasLanguage = false;
        result.language_ = 0;
        return this;
      }
      
      public bool HasRequiresInvite {
        get { return result.hasRequiresInvite; }
      }
      public bool RequiresInvite {
        get { return result.RequiresInvite; }
        set { SetRequiresInvite(value); }
      }
      public Builder SetRequiresInvite(bool value) {
        PrepareBuilder();
        result.hasRequiresInvite = true;
        result.requiresInvite_ = value;
        return this;
      }
      public Builder ClearRequiresInvite() {
        PrepareBuilder();
        result.hasRequiresInvite = false;
        result.requiresInvite_ = false;
        return this;
      }
      
      public bool HasTotalMembers {
        get { return result.hasTotalMembers; }
      }
      public uint TotalMembers {
        get { return result.TotalMembers; }
        set { SetTotalMembers(value); }
      }
      public Builder SetTotalMembers(uint value) {
        PrepareBuilder();
        result.hasTotalMembers = true;
        result.totalMembers_ = value;
        return this;
      }
      public Builder ClearTotalMembers() {
        PrepareBuilder();
        result.hasTotalMembers = false;
        result.totalMembers_ = 0;
        return this;
      }
      
      public bool HasMembersInChat {
        get { return result.hasMembersInChat; }
      }
      public uint MembersInChat {
        get { return result.MembersInChat; }
        set { SetMembersInChat(value); }
      }
      public Builder SetMembersInChat(uint value) {
        PrepareBuilder();
        result.hasMembersInChat = true;
        result.membersInChat_ = value;
        return this;
      }
      public Builder ClearMembersInChat() {
        PrepareBuilder();
        result.hasMembersInChat = false;
        result.membersInChat_ = 0;
        return this;
      }
      
      public bool HasLastActivity {
        get { return result.hasLastActivity; }
      }
      public ulong LastActivity {
        get { return result.LastActivity; }
        set { SetLastActivity(value); }
      }
      public Builder SetLastActivity(ulong value) {
        PrepareBuilder();
        result.hasLastActivity = true;
        result.lastActivity_ = value;
        return this;
      }
      public Builder ClearLastActivity() {
        PrepareBuilder();
        result.hasLastActivity = false;
        result.lastActivity_ = 0UL;
        return this;
      }
      
      public bool HasLastOfficerActivity {
        get { return result.hasLastOfficerActivity; }
      }
      public ulong LastOfficerActivity {
        get { return result.LastOfficerActivity; }
        set { SetLastOfficerActivity(value); }
      }
      public Builder SetLastOfficerActivity(ulong value) {
        PrepareBuilder();
        result.hasLastOfficerActivity = true;
        result.lastOfficerActivity_ = value;
        return this;
      }
      public Builder ClearLastOfficerActivity() {
        PrepareBuilder();
        result.hasLastOfficerActivity = false;
        result.lastOfficerActivity_ = 0UL;
        return this;
      }
    }
    static GuildSearchResult() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildSearchResultList : pb::GeneratedMessage<GuildSearchResultList, GuildSearchResultList.Builder> {
    private GuildSearchResultList() { }
    private static readonly GuildSearchResultList defaultInstance = new GuildSearchResultList().MakeReadOnly();
    private static readonly string[] _guildSearchResultListFieldNames = new string[] { "results" };
    private static readonly uint[] _guildSearchResultListFieldTags = new uint[] { 10 };
    public static GuildSearchResultList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildSearchResultList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildSearchResultList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GuildSearchResultList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildSearchResultList, GuildSearchResultList.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GuildSearchResultList__FieldAccessorTable; }
    }
    
    public const int ResultsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Guild.GuildSearchResult> results_ = new pbc::PopsicleList<global::D3.Guild.GuildSearchResult>();
    public scg::IList<global::D3.Guild.GuildSearchResult> ResultsList {
      get { return results_; }
    }
    public int ResultsCount {
      get { return results_.Count; }
    }
    public global::D3.Guild.GuildSearchResult GetResults(int index) {
      return results_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Guild.GuildSearchResult element in ResultsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildSearchResultListFieldNames;
      if (results_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], results_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Guild.GuildSearchResult element in ResultsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildSearchResultList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSearchResultList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSearchResultList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSearchResultList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSearchResultList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSearchResultList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildSearchResultList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildSearchResultList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildSearchResultList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSearchResultList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildSearchResultList MakeReadOnly() {
      results_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildSearchResultList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildSearchResultList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildSearchResultList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildSearchResultList result;
      
      private GuildSearchResultList PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildSearchResultList original = result;
          result = new GuildSearchResultList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildSearchResultList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.GuildSearchResultList.Descriptor; }
      }
      
      public override GuildSearchResultList DefaultInstanceForType {
        get { return global::D3.Guild.GuildSearchResultList.DefaultInstance; }
      }
      
      public override GuildSearchResultList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildSearchResultList) {
          return MergeFrom((GuildSearchResultList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildSearchResultList other) {
        if (other == global::D3.Guild.GuildSearchResultList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.results_.Count != 0) {
          result.results_.Add(other.results_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildSearchResultListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildSearchResultListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.results_, global::D3.Guild.GuildSearchResult.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Guild.GuildSearchResult> ResultsList {
        get { return PrepareBuilder().results_; }
      }
      public int ResultsCount {
        get { return result.ResultsCount; }
      }
      public global::D3.Guild.GuildSearchResult GetResults(int index) {
        return result.GetResults(index);
      }
      public Builder SetResults(int index, global::D3.Guild.GuildSearchResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.results_[index] = value;
        return this;
      }
      public Builder SetResults(int index, global::D3.Guild.GuildSearchResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.results_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddResults(global::D3.Guild.GuildSearchResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.results_.Add(value);
        return this;
      }
      public Builder AddResults(global::D3.Guild.GuildSearchResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.results_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeResults(scg::IEnumerable<global::D3.Guild.GuildSearchResult> values) {
        PrepareBuilder();
        result.results_.Add(values);
        return this;
      }
      public Builder ClearResults() {
        PrepareBuilder();
        result.results_.Clear();
        return this;
      }
    }
    static GuildSearchResultList() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SearchAttributes : pb::GeneratedMessage<SearchAttributes, SearchAttributes.Builder> {
    private SearchAttributes() { }
    private static readonly SearchAttributes defaultInstance = new SearchAttributes().MakeReadOnly();
    private static readonly string[] _searchAttributesFieldNames = new string[] { "category", "disbanded", "guild_id", "guild_name", "guild_tag", "language", "last_activity", "last_officer_activity", "members_in_chat", "requires_invite", "search_category", "searchable", "total_members" };
    private static readonly uint[] _searchAttributesFieldTags = new uint[] { 32, 104, 8, 18, 26, 40, 64, 72, 56, 88, 80, 96, 48 };
    public static SearchAttributes DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SearchAttributes DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SearchAttributes ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_SearchAttributes__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SearchAttributes, SearchAttributes.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_SearchAttributes__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int GuildNameFieldNumber = 2;
    private bool hasGuildName;
    private string guildName_ = "";
    public bool HasGuildName {
      get { return hasGuildName; }
    }
    public string GuildName {
      get { return guildName_; }
    }
    
    public const int GuildTagFieldNumber = 3;
    private bool hasGuildTag;
    private string guildTag_ = "";
    public bool HasGuildTag {
      get { return hasGuildTag; }
    }
    public string GuildTag {
      get { return guildTag_; }
    }
    
    public const int CategoryFieldNumber = 4;
    private bool hasCategory;
    private uint category_;
    public bool HasCategory {
      get { return hasCategory; }
    }
    public uint Category {
      get { return category_; }
    }
    
    public const int LanguageFieldNumber = 5;
    private bool hasLanguage;
    private uint language_;
    public bool HasLanguage {
      get { return hasLanguage; }
    }
    public uint Language {
      get { return language_; }
    }
    
    public const int TotalMembersFieldNumber = 6;
    private bool hasTotalMembers;
    private uint totalMembers_;
    public bool HasTotalMembers {
      get { return hasTotalMembers; }
    }
    public uint TotalMembers {
      get { return totalMembers_; }
    }
    
    public const int MembersInChatFieldNumber = 7;
    private bool hasMembersInChat;
    private uint membersInChat_;
    public bool HasMembersInChat {
      get { return hasMembersInChat; }
    }
    public uint MembersInChat {
      get { return membersInChat_; }
    }
    
    public const int LastActivityFieldNumber = 8;
    private bool hasLastActivity;
    private ulong lastActivity_;
    public bool HasLastActivity {
      get { return hasLastActivity; }
    }
    public ulong LastActivity {
      get { return lastActivity_; }
    }
    
    public const int LastOfficerActivityFieldNumber = 9;
    private bool hasLastOfficerActivity;
    private ulong lastOfficerActivity_;
    public bool HasLastOfficerActivity {
      get { return hasLastOfficerActivity; }
    }
    public ulong LastOfficerActivity {
      get { return lastOfficerActivity_; }
    }
    
    public const int SearchCategoryFieldNumber = 10;
    private bool hasSearchCategory;
    private uint searchCategory_;
    public bool HasSearchCategory {
      get { return hasSearchCategory; }
    }
    public uint SearchCategory {
      get { return searchCategory_; }
    }
    
    public const int RequiresInviteFieldNumber = 11;
    private bool hasRequiresInvite;
    private bool requiresInvite_;
    public bool HasRequiresInvite {
      get { return hasRequiresInvite; }
    }
    public bool RequiresInvite {
      get { return requiresInvite_; }
    }
    
    public const int SearchableFieldNumber = 12;
    private bool hasSearchable;
    private bool searchable_;
    public bool HasSearchable {
      get { return hasSearchable; }
    }
    public bool Searchable {
      get { return searchable_; }
    }
    
    public const int DisbandedFieldNumber = 13;
    private bool hasDisbanded;
    private bool disbanded_;
    public bool HasDisbanded {
      get { return hasDisbanded; }
    }
    public bool Disbanded {
      get { return disbanded_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _searchAttributesFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[2], GuildId);
      }
      if (hasGuildName) {
        output.WriteString(2, field_names[3], GuildName);
      }
      if (hasGuildTag) {
        output.WriteString(3, field_names[4], GuildTag);
      }
      if (hasCategory) {
        output.WriteUInt32(4, field_names[0], Category);
      }
      if (hasLanguage) {
        output.WriteUInt32(5, field_names[5], Language);
      }
      if (hasTotalMembers) {
        output.WriteUInt32(6, field_names[12], TotalMembers);
      }
      if (hasMembersInChat) {
        output.WriteUInt32(7, field_names[8], MembersInChat);
      }
      if (hasLastActivity) {
        output.WriteUInt64(8, field_names[6], LastActivity);
      }
      if (hasLastOfficerActivity) {
        output.WriteUInt64(9, field_names[7], LastOfficerActivity);
      }
      if (hasSearchCategory) {
        output.WriteUInt32(10, field_names[10], SearchCategory);
      }
      if (hasRequiresInvite) {
        output.WriteBool(11, field_names[9], RequiresInvite);
      }
      if (hasSearchable) {
        output.WriteBool(12, field_names[11], Searchable);
      }
      if (hasDisbanded) {
        output.WriteBool(13, field_names[1], Disbanded);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasGuildName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, GuildName);
        }
        if (hasGuildTag) {
          size += pb::CodedOutputStream.ComputeStringSize(3, GuildTag);
        }
        if (hasCategory) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, Category);
        }
        if (hasLanguage) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, Language);
        }
        if (hasTotalMembers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, TotalMembers);
        }
        if (hasMembersInChat) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, MembersInChat);
        }
        if (hasLastActivity) {
          size += pb::CodedOutputStream.ComputeUInt64Size(8, LastActivity);
        }
        if (hasLastOfficerActivity) {
          size += pb::CodedOutputStream.ComputeUInt64Size(9, LastOfficerActivity);
        }
        if (hasSearchCategory) {
          size += pb::CodedOutputStream.ComputeUInt32Size(10, SearchCategory);
        }
        if (hasRequiresInvite) {
          size += pb::CodedOutputStream.ComputeBoolSize(11, RequiresInvite);
        }
        if (hasSearchable) {
          size += pb::CodedOutputStream.ComputeBoolSize(12, Searchable);
        }
        if (hasDisbanded) {
          size += pb::CodedOutputStream.ComputeBoolSize(13, Disbanded);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SearchAttributes ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SearchAttributes ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SearchAttributes ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SearchAttributes ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SearchAttributes ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SearchAttributes ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SearchAttributes ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SearchAttributes ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SearchAttributes ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SearchAttributes ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SearchAttributes MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SearchAttributes prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SearchAttributes, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SearchAttributes cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SearchAttributes result;
      
      private SearchAttributes PrepareBuilder() {
        if (resultIsReadOnly) {
          SearchAttributes original = result;
          result = new SearchAttributes();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SearchAttributes MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.SearchAttributes.Descriptor; }
      }
      
      public override SearchAttributes DefaultInstanceForType {
        get { return global::D3.Guild.SearchAttributes.DefaultInstance; }
      }
      
      public override SearchAttributes BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SearchAttributes) {
          return MergeFrom((SearchAttributes) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SearchAttributes other) {
        if (other == global::D3.Guild.SearchAttributes.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasGuildName) {
          GuildName = other.GuildName;
        }
        if (other.HasGuildTag) {
          GuildTag = other.GuildTag;
        }
        if (other.HasCategory) {
          Category = other.Category;
        }
        if (other.HasLanguage) {
          Language = other.Language;
        }
        if (other.HasTotalMembers) {
          TotalMembers = other.TotalMembers;
        }
        if (other.HasMembersInChat) {
          MembersInChat = other.MembersInChat;
        }
        if (other.HasLastActivity) {
          LastActivity = other.LastActivity;
        }
        if (other.HasLastOfficerActivity) {
          LastOfficerActivity = other.LastOfficerActivity;
        }
        if (other.HasSearchCategory) {
          SearchCategory = other.SearchCategory;
        }
        if (other.HasRequiresInvite) {
          RequiresInvite = other.RequiresInvite;
        }
        if (other.HasSearchable) {
          Searchable = other.Searchable;
        }
        if (other.HasDisbanded) {
          Disbanded = other.Disbanded;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_searchAttributesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _searchAttributesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 18: {
              result.hasGuildName = input.ReadString(ref result.guildName_);
              break;
            }
            case 26: {
              result.hasGuildTag = input.ReadString(ref result.guildTag_);
              break;
            }
            case 32: {
              result.hasCategory = input.ReadUInt32(ref result.category_);
              break;
            }
            case 40: {
              result.hasLanguage = input.ReadUInt32(ref result.language_);
              break;
            }
            case 48: {
              result.hasTotalMembers = input.ReadUInt32(ref result.totalMembers_);
              break;
            }
            case 56: {
              result.hasMembersInChat = input.ReadUInt32(ref result.membersInChat_);
              break;
            }
            case 64: {
              result.hasLastActivity = input.ReadUInt64(ref result.lastActivity_);
              break;
            }
            case 72: {
              result.hasLastOfficerActivity = input.ReadUInt64(ref result.lastOfficerActivity_);
              break;
            }
            case 80: {
              result.hasSearchCategory = input.ReadUInt32(ref result.searchCategory_);
              break;
            }
            case 88: {
              result.hasRequiresInvite = input.ReadBool(ref result.requiresInvite_);
              break;
            }
            case 96: {
              result.hasSearchable = input.ReadBool(ref result.searchable_);
              break;
            }
            case 104: {
              result.hasDisbanded = input.ReadBool(ref result.disbanded_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasGuildName {
        get { return result.hasGuildName; }
      }
      public string GuildName {
        get { return result.GuildName; }
        set { SetGuildName(value); }
      }
      public Builder SetGuildName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildName = true;
        result.guildName_ = value;
        return this;
      }
      public Builder ClearGuildName() {
        PrepareBuilder();
        result.hasGuildName = false;
        result.guildName_ = "";
        return this;
      }
      
      public bool HasGuildTag {
        get { return result.hasGuildTag; }
      }
      public string GuildTag {
        get { return result.GuildTag; }
        set { SetGuildTag(value); }
      }
      public Builder SetGuildTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildTag = true;
        result.guildTag_ = value;
        return this;
      }
      public Builder ClearGuildTag() {
        PrepareBuilder();
        result.hasGuildTag = false;
        result.guildTag_ = "";
        return this;
      }
      
      public bool HasCategory {
        get { return result.hasCategory; }
      }
      public uint Category {
        get { return result.Category; }
        set { SetCategory(value); }
      }
      public Builder SetCategory(uint value) {
        PrepareBuilder();
        result.hasCategory = true;
        result.category_ = value;
        return this;
      }
      public Builder ClearCategory() {
        PrepareBuilder();
        result.hasCategory = false;
        result.category_ = 0;
        return this;
      }
      
      public bool HasLanguage {
        get { return result.hasLanguage; }
      }
      public uint Language {
        get { return result.Language; }
        set { SetLanguage(value); }
      }
      public Builder SetLanguage(uint value) {
        PrepareBuilder();
        result.hasLanguage = true;
        result.language_ = value;
        return this;
      }
      public Builder ClearLanguage() {
        PrepareBuilder();
        result.hasLanguage = false;
        result.language_ = 0;
        return this;
      }
      
      public bool HasTotalMembers {
        get { return result.hasTotalMembers; }
      }
      public uint TotalMembers {
        get { return result.TotalMembers; }
        set { SetTotalMembers(value); }
      }
      public Builder SetTotalMembers(uint value) {
        PrepareBuilder();
        result.hasTotalMembers = true;
        result.totalMembers_ = value;
        return this;
      }
      public Builder ClearTotalMembers() {
        PrepareBuilder();
        result.hasTotalMembers = false;
        result.totalMembers_ = 0;
        return this;
      }
      
      public bool HasMembersInChat {
        get { return result.hasMembersInChat; }
      }
      public uint MembersInChat {
        get { return result.MembersInChat; }
        set { SetMembersInChat(value); }
      }
      public Builder SetMembersInChat(uint value) {
        PrepareBuilder();
        result.hasMembersInChat = true;
        result.membersInChat_ = value;
        return this;
      }
      public Builder ClearMembersInChat() {
        PrepareBuilder();
        result.hasMembersInChat = false;
        result.membersInChat_ = 0;
        return this;
      }
      
      public bool HasLastActivity {
        get { return result.hasLastActivity; }
      }
      public ulong LastActivity {
        get { return result.LastActivity; }
        set { SetLastActivity(value); }
      }
      public Builder SetLastActivity(ulong value) {
        PrepareBuilder();
        result.hasLastActivity = true;
        result.lastActivity_ = value;
        return this;
      }
      public Builder ClearLastActivity() {
        PrepareBuilder();
        result.hasLastActivity = false;
        result.lastActivity_ = 0UL;
        return this;
      }
      
      public bool HasLastOfficerActivity {
        get { return result.hasLastOfficerActivity; }
      }
      public ulong LastOfficerActivity {
        get { return result.LastOfficerActivity; }
        set { SetLastOfficerActivity(value); }
      }
      public Builder SetLastOfficerActivity(ulong value) {
        PrepareBuilder();
        result.hasLastOfficerActivity = true;
        result.lastOfficerActivity_ = value;
        return this;
      }
      public Builder ClearLastOfficerActivity() {
        PrepareBuilder();
        result.hasLastOfficerActivity = false;
        result.lastOfficerActivity_ = 0UL;
        return this;
      }
      
      public bool HasSearchCategory {
        get { return result.hasSearchCategory; }
      }
      public uint SearchCategory {
        get { return result.SearchCategory; }
        set { SetSearchCategory(value); }
      }
      public Builder SetSearchCategory(uint value) {
        PrepareBuilder();
        result.hasSearchCategory = true;
        result.searchCategory_ = value;
        return this;
      }
      public Builder ClearSearchCategory() {
        PrepareBuilder();
        result.hasSearchCategory = false;
        result.searchCategory_ = 0;
        return this;
      }
      
      public bool HasRequiresInvite {
        get { return result.hasRequiresInvite; }
      }
      public bool RequiresInvite {
        get { return result.RequiresInvite; }
        set { SetRequiresInvite(value); }
      }
      public Builder SetRequiresInvite(bool value) {
        PrepareBuilder();
        result.hasRequiresInvite = true;
        result.requiresInvite_ = value;
        return this;
      }
      public Builder ClearRequiresInvite() {
        PrepareBuilder();
        result.hasRequiresInvite = false;
        result.requiresInvite_ = false;
        return this;
      }
      
      public bool HasSearchable {
        get { return result.hasSearchable; }
      }
      public bool Searchable {
        get { return result.Searchable; }
        set { SetSearchable(value); }
      }
      public Builder SetSearchable(bool value) {
        PrepareBuilder();
        result.hasSearchable = true;
        result.searchable_ = value;
        return this;
      }
      public Builder ClearSearchable() {
        PrepareBuilder();
        result.hasSearchable = false;
        result.searchable_ = false;
        return this;
      }
      
      public bool HasDisbanded {
        get { return result.hasDisbanded; }
      }
      public bool Disbanded {
        get { return result.Disbanded; }
        set { SetDisbanded(value); }
      }
      public Builder SetDisbanded(bool value) {
        PrepareBuilder();
        result.hasDisbanded = true;
        result.disbanded_ = value;
        return this;
      }
      public Builder ClearDisbanded() {
        PrepareBuilder();
        result.hasDisbanded = false;
        result.disbanded_ = false;
        return this;
      }
    }
    static SearchAttributes() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SearchAttributesList : pb::GeneratedMessage<SearchAttributesList, SearchAttributesList.Builder> {
    private SearchAttributesList() { }
    private static readonly SearchAttributesList defaultInstance = new SearchAttributesList().MakeReadOnly();
    private static readonly string[] _searchAttributesListFieldNames = new string[] { "results" };
    private static readonly uint[] _searchAttributesListFieldTags = new uint[] { 10 };
    public static SearchAttributesList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SearchAttributesList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SearchAttributesList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_SearchAttributesList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SearchAttributesList, SearchAttributesList.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_SearchAttributesList__FieldAccessorTable; }
    }
    
    public const int ResultsFieldNumber = 1;
    private pbc::PopsicleList<global::D3.Guild.SearchAttributes> results_ = new pbc::PopsicleList<global::D3.Guild.SearchAttributes>();
    public scg::IList<global::D3.Guild.SearchAttributes> ResultsList {
      get { return results_; }
    }
    public int ResultsCount {
      get { return results_.Count; }
    }
    public global::D3.Guild.SearchAttributes GetResults(int index) {
      return results_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::D3.Guild.SearchAttributes element in ResultsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _searchAttributesListFieldNames;
      if (results_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], results_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::D3.Guild.SearchAttributes element in ResultsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SearchAttributesList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SearchAttributesList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SearchAttributesList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SearchAttributesList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SearchAttributesList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SearchAttributesList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SearchAttributesList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SearchAttributesList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SearchAttributesList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SearchAttributesList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SearchAttributesList MakeReadOnly() {
      results_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SearchAttributesList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SearchAttributesList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SearchAttributesList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SearchAttributesList result;
      
      private SearchAttributesList PrepareBuilder() {
        if (resultIsReadOnly) {
          SearchAttributesList original = result;
          result = new SearchAttributesList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SearchAttributesList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.SearchAttributesList.Descriptor; }
      }
      
      public override SearchAttributesList DefaultInstanceForType {
        get { return global::D3.Guild.SearchAttributesList.DefaultInstance; }
      }
      
      public override SearchAttributesList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SearchAttributesList) {
          return MergeFrom((SearchAttributesList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SearchAttributesList other) {
        if (other == global::D3.Guild.SearchAttributesList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.results_.Count != 0) {
          result.results_.Add(other.results_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_searchAttributesListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _searchAttributesListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.results_, global::D3.Guild.SearchAttributes.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::D3.Guild.SearchAttributes> ResultsList {
        get { return PrepareBuilder().results_; }
      }
      public int ResultsCount {
        get { return result.ResultsCount; }
      }
      public global::D3.Guild.SearchAttributes GetResults(int index) {
        return result.GetResults(index);
      }
      public Builder SetResults(int index, global::D3.Guild.SearchAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.results_[index] = value;
        return this;
      }
      public Builder SetResults(int index, global::D3.Guild.SearchAttributes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.results_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddResults(global::D3.Guild.SearchAttributes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.results_.Add(value);
        return this;
      }
      public Builder AddResults(global::D3.Guild.SearchAttributes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.results_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeResults(scg::IEnumerable<global::D3.Guild.SearchAttributes> values) {
        PrepareBuilder();
        result.results_.Add(values);
        return this;
      }
      public Builder ClearResults() {
        PrepareBuilder();
        result.results_.Clear();
        return this;
      }
    }
    static SearchAttributesList() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GroupRosterResponse : pb::GeneratedMessage<GroupRosterResponse, GroupRosterResponse.Builder> {
    private GroupRosterResponse() { }
    private static readonly GroupRosterResponse defaultInstance = new GroupRosterResponse().MakeReadOnly();
    private static readonly string[] _groupRosterResponseFieldNames = new string[] { "active_members", "members", "total_members" };
    private static readonly uint[] _groupRosterResponseFieldTags = new uint[] { 24, 10, 16 };
    public static GroupRosterResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GroupRosterResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GroupRosterResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GroupRosterResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GroupRosterResponse, GroupRosterResponse.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GroupRosterResponse__FieldAccessorTable; }
    }
    
    public const int MembersFieldNumber = 1;
    private bool hasMembers;
    private global::D3.Guild.MemberList members_;
    public bool HasMembers {
      get { return hasMembers; }
    }
    public global::D3.Guild.MemberList Members {
      get { return members_ ?? global::D3.Guild.MemberList.DefaultInstance; }
    }
    
    public const int TotalMembersFieldNumber = 2;
    private bool hasTotalMembers;
    private uint totalMembers_;
    public bool HasTotalMembers {
      get { return hasTotalMembers; }
    }
    public uint TotalMembers {
      get { return totalMembers_; }
    }
    
    public const int ActiveMembersFieldNumber = 3;
    private bool hasActiveMembers;
    private uint activeMembers_;
    public bool HasActiveMembers {
      get { return hasActiveMembers; }
    }
    public uint ActiveMembers {
      get { return activeMembers_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMembers) return false;
        if (!hasTotalMembers) return false;
        if (!hasActiveMembers) return false;
        if (!Members.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _groupRosterResponseFieldNames;
      if (hasMembers) {
        output.WriteMessage(1, field_names[1], Members);
      }
      if (hasTotalMembers) {
        output.WriteUInt32(2, field_names[2], TotalMembers);
      }
      if (hasActiveMembers) {
        output.WriteUInt32(3, field_names[0], ActiveMembers);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMembers) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Members);
        }
        if (hasTotalMembers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, TotalMembers);
        }
        if (hasActiveMembers) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, ActiveMembers);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GroupRosterResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GroupRosterResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GroupRosterResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GroupRosterResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GroupRosterResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GroupRosterResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GroupRosterResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GroupRosterResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GroupRosterResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GroupRosterResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GroupRosterResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GroupRosterResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GroupRosterResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GroupRosterResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GroupRosterResponse result;
      
      private GroupRosterResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GroupRosterResponse original = result;
          result = new GroupRosterResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GroupRosterResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.GroupRosterResponse.Descriptor; }
      }
      
      public override GroupRosterResponse DefaultInstanceForType {
        get { return global::D3.Guild.GroupRosterResponse.DefaultInstance; }
      }
      
      public override GroupRosterResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GroupRosterResponse) {
          return MergeFrom((GroupRosterResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GroupRosterResponse other) {
        if (other == global::D3.Guild.GroupRosterResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMembers) {
          MergeMembers(other.Members);
        }
        if (other.HasTotalMembers) {
          TotalMembers = other.TotalMembers;
        }
        if (other.HasActiveMembers) {
          ActiveMembers = other.ActiveMembers;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_groupRosterResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _groupRosterResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::D3.Guild.MemberList.Builder subBuilder = global::D3.Guild.MemberList.CreateBuilder();
              if (result.hasMembers) {
                subBuilder.MergeFrom(Members);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Members = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasTotalMembers = input.ReadUInt32(ref result.totalMembers_);
              break;
            }
            case 24: {
              result.hasActiveMembers = input.ReadUInt32(ref result.activeMembers_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMembers {
       get { return result.hasMembers; }
      }
      public global::D3.Guild.MemberList Members {
        get { return result.Members; }
        set { SetMembers(value); }
      }
      public Builder SetMembers(global::D3.Guild.MemberList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMembers = true;
        result.members_ = value;
        return this;
      }
      public Builder SetMembers(global::D3.Guild.MemberList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMembers = true;
        result.members_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMembers(global::D3.Guild.MemberList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMembers &&
            result.members_ != global::D3.Guild.MemberList.DefaultInstance) {
            result.members_ = global::D3.Guild.MemberList.CreateBuilder(result.members_).MergeFrom(value).BuildPartial();
        } else {
          result.members_ = value;
        }
        result.hasMembers = true;
        return this;
      }
      public Builder ClearMembers() {
        PrepareBuilder();
        result.hasMembers = false;
        result.members_ = null;
        return this;
      }
      
      public bool HasTotalMembers {
        get { return result.hasTotalMembers; }
      }
      public uint TotalMembers {
        get { return result.TotalMembers; }
        set { SetTotalMembers(value); }
      }
      public Builder SetTotalMembers(uint value) {
        PrepareBuilder();
        result.hasTotalMembers = true;
        result.totalMembers_ = value;
        return this;
      }
      public Builder ClearTotalMembers() {
        PrepareBuilder();
        result.hasTotalMembers = false;
        result.totalMembers_ = 0;
        return this;
      }
      
      public bool HasActiveMembers {
        get { return result.hasActiveMembers; }
      }
      public uint ActiveMembers {
        get { return result.ActiveMembers; }
        set { SetActiveMembers(value); }
      }
      public Builder SetActiveMembers(uint value) {
        PrepareBuilder();
        result.hasActiveMembers = true;
        result.activeMembers_ = value;
        return this;
      }
      public Builder ClearActiveMembers() {
        PrepareBuilder();
        result.hasActiveMembers = false;
        result.activeMembers_ = 0;
        return this;
      }
    }
    static GroupRosterResponse() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildSummary : pb::GeneratedMessage<GuildSummary, GuildSummary.Builder> {
    private GuildSummary() { }
    private static readonly GuildSummary defaultInstance = new GuildSummary().MakeReadOnly();
    private static readonly string[] _guildSummaryFieldNames = new string[] { "guild_flags", "guild_id", "guild_name", "guild_tag" };
    private static readonly uint[] _guildSummaryFieldTags = new uint[] { 32, 8, 18, 26 };
    public static GuildSummary DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildSummary DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildSummary ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GuildSummary__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildSummary, GuildSummary.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GuildSummary__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int GuildNameFieldNumber = 2;
    private bool hasGuildName;
    private string guildName_ = "";
    public bool HasGuildName {
      get { return hasGuildName; }
    }
    public string GuildName {
      get { return guildName_; }
    }
    
    public const int GuildTagFieldNumber = 3;
    private bool hasGuildTag;
    private string guildTag_ = "";
    public bool HasGuildTag {
      get { return hasGuildTag; }
    }
    public string GuildTag {
      get { return guildTag_; }
    }
    
    public const int GuildFlagsFieldNumber = 4;
    private bool hasGuildFlags;
    private uint guildFlags_;
    public bool HasGuildFlags {
      get { return hasGuildFlags; }
    }
    public uint GuildFlags {
      get { return guildFlags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasGuildName) return false;
        if (!hasGuildTag) return false;
        if (!hasGuildFlags) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildSummaryFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[1], GuildId);
      }
      if (hasGuildName) {
        output.WriteString(2, field_names[2], GuildName);
      }
      if (hasGuildTag) {
        output.WriteString(3, field_names[3], GuildTag);
      }
      if (hasGuildFlags) {
        output.WriteUInt32(4, field_names[0], GuildFlags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasGuildName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, GuildName);
        }
        if (hasGuildTag) {
          size += pb::CodedOutputStream.ComputeStringSize(3, GuildTag);
        }
        if (hasGuildFlags) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, GuildFlags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildSummary ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSummary ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSummary ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildSummary ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildSummary ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSummary ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildSummary ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildSummary ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildSummary ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildSummary ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildSummary MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildSummary prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildSummary, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildSummary cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildSummary result;
      
      private GuildSummary PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildSummary original = result;
          result = new GuildSummary();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildSummary MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.GuildSummary.Descriptor; }
      }
      
      public override GuildSummary DefaultInstanceForType {
        get { return global::D3.Guild.GuildSummary.DefaultInstance; }
      }
      
      public override GuildSummary BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildSummary) {
          return MergeFrom((GuildSummary) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildSummary other) {
        if (other == global::D3.Guild.GuildSummary.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasGuildName) {
          GuildName = other.GuildName;
        }
        if (other.HasGuildTag) {
          GuildTag = other.GuildTag;
        }
        if (other.HasGuildFlags) {
          GuildFlags = other.GuildFlags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildSummaryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildSummaryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 18: {
              result.hasGuildName = input.ReadString(ref result.guildName_);
              break;
            }
            case 26: {
              result.hasGuildTag = input.ReadString(ref result.guildTag_);
              break;
            }
            case 32: {
              result.hasGuildFlags = input.ReadUInt32(ref result.guildFlags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasGuildName {
        get { return result.hasGuildName; }
      }
      public string GuildName {
        get { return result.GuildName; }
        set { SetGuildName(value); }
      }
      public Builder SetGuildName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildName = true;
        result.guildName_ = value;
        return this;
      }
      public Builder ClearGuildName() {
        PrepareBuilder();
        result.hasGuildName = false;
        result.guildName_ = "";
        return this;
      }
      
      public bool HasGuildTag {
        get { return result.hasGuildTag; }
      }
      public string GuildTag {
        get { return result.GuildTag; }
        set { SetGuildTag(value); }
      }
      public Builder SetGuildTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildTag = true;
        result.guildTag_ = value;
        return this;
      }
      public Builder ClearGuildTag() {
        PrepareBuilder();
        result.hasGuildTag = false;
        result.guildTag_ = "";
        return this;
      }
      
      public bool HasGuildFlags {
        get { return result.hasGuildFlags; }
      }
      public uint GuildFlags {
        get { return result.GuildFlags; }
        set { SetGuildFlags(value); }
      }
      public Builder SetGuildFlags(uint value) {
        PrepareBuilder();
        result.hasGuildFlags = true;
        result.guildFlags_ = value;
        return this;
      }
      public Builder ClearGuildFlags() {
        PrepareBuilder();
        result.hasGuildFlags = false;
        result.guildFlags_ = 0;
        return this;
      }
    }
    static GuildSummary() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GroupMembership : pb::GeneratedMessage<GroupMembership, GroupMembership.Builder> {
    private GroupMembership() { }
    private static readonly GroupMembership defaultInstance = new GroupMembership().MakeReadOnly();
    private static readonly string[] _groupMembershipFieldNames = new string[] { "guild_id" };
    private static readonly uint[] _groupMembershipFieldTags = new uint[] { 8 };
    public static GroupMembership DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GroupMembership DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GroupMembership ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GroupMembership__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GroupMembership, GroupMembership.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GroupMembership__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private pbc::PopsicleList<ulong> guildId_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> GuildIdList {
      get { return pbc::Lists.AsReadOnly(guildId_); }
    }
    public int GuildIdCount {
      get { return guildId_.Count; }
    }
    public ulong GetGuildId(int index) {
      return guildId_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _groupMembershipFieldNames;
      if (guildId_.Count > 0) {
        output.WriteUInt64Array(1, field_names[0], guildId_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (ulong element in GuildIdList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * guildId_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GroupMembership ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GroupMembership ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GroupMembership ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GroupMembership ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GroupMembership ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GroupMembership ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GroupMembership ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GroupMembership ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GroupMembership ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GroupMembership ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GroupMembership MakeReadOnly() {
      guildId_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GroupMembership prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GroupMembership, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GroupMembership cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GroupMembership result;
      
      private GroupMembership PrepareBuilder() {
        if (resultIsReadOnly) {
          GroupMembership original = result;
          result = new GroupMembership();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GroupMembership MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.GroupMembership.Descriptor; }
      }
      
      public override GroupMembership DefaultInstanceForType {
        get { return global::D3.Guild.GroupMembership.DefaultInstance; }
      }
      
      public override GroupMembership BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GroupMembership) {
          return MergeFrom((GroupMembership) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GroupMembership other) {
        if (other == global::D3.Guild.GroupMembership.DefaultInstance) return this;
        PrepareBuilder();
        if (other.guildId_.Count != 0) {
          result.guildId_.Add(other.guildId_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_groupMembershipFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _groupMembershipFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt64Array(tag, field_name, result.guildId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<ulong> GuildIdList {
        get { return PrepareBuilder().guildId_; }
      }
      public int GuildIdCount {
        get { return result.GuildIdCount; }
      }
      public ulong GetGuildId(int index) {
        return result.GetGuildId(index);
      }
      public Builder SetGuildId(int index, ulong value) {
        PrepareBuilder();
        result.guildId_[index] = value;
        return this;
      }
      public Builder AddGuildId(ulong value) {
        PrepareBuilder();
        result.guildId_.Add(value);
        return this;
      }
      public Builder AddRangeGuildId(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.guildId_.Add(values);
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.guildId_.Clear();
        return this;
      }
    }
    static GroupMembership() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ExtendedInfo : pb::GeneratedMessage<ExtendedInfo, ExtendedInfo.Builder> {
    private ExtendedInfo() { }
    private static readonly ExtendedInfo defaultInstance = new ExtendedInfo().MakeReadOnly();
    private static readonly string[] _extendedInfoFieldNames = new string[] { "description", "guild_id", "leader_id", "officers" };
    private static readonly uint[] _extendedInfoFieldTags = new uint[] { 18, 8, 24, 32 };
    public static ExtendedInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ExtendedInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ExtendedInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_ExtendedInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ExtendedInfo, ExtendedInfo.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_ExtendedInfo__FieldAccessorTable; }
    }
    
    public const int GuildIdFieldNumber = 1;
    private bool hasGuildId;
    private ulong guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public ulong GuildId {
      get { return guildId_; }
    }
    
    public const int DescriptionFieldNumber = 2;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public const int LeaderIdFieldNumber = 3;
    private bool hasLeaderId;
    private ulong leaderId_;
    public bool HasLeaderId {
      get { return hasLeaderId; }
    }
    public ulong LeaderId {
      get { return leaderId_; }
    }
    
    public const int OfficersFieldNumber = 4;
    private pbc::PopsicleList<ulong> officers_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> OfficersList {
      get { return pbc::Lists.AsReadOnly(officers_); }
    }
    public int OfficersCount {
      get { return officers_.Count; }
    }
    public ulong GetOfficers(int index) {
      return officers_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGuildId) return false;
        if (!hasDescription) return false;
        if (!hasLeaderId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _extendedInfoFieldNames;
      if (hasGuildId) {
        output.WriteUInt64(1, field_names[1], GuildId);
      }
      if (hasDescription) {
        output.WriteString(2, field_names[0], Description);
      }
      if (hasLeaderId) {
        output.WriteUInt64(3, field_names[2], LeaderId);
      }
      if (officers_.Count > 0) {
        output.WriteUInt64Array(4, field_names[3], officers_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, GuildId);
        }
        if (hasDescription) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Description);
        }
        if (hasLeaderId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, LeaderId);
        }
        {
          int dataSize = 0;
          foreach (ulong element in OfficersList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * officers_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ExtendedInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExtendedInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExtendedInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExtendedInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExtendedInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExtendedInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExtendedInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExtendedInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExtendedInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExtendedInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ExtendedInfo MakeReadOnly() {
      officers_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExtendedInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ExtendedInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ExtendedInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ExtendedInfo result;
      
      private ExtendedInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ExtendedInfo original = result;
          result = new ExtendedInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ExtendedInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.ExtendedInfo.Descriptor; }
      }
      
      public override ExtendedInfo DefaultInstanceForType {
        get { return global::D3.Guild.ExtendedInfo.DefaultInstance; }
      }
      
      public override ExtendedInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExtendedInfo) {
          return MergeFrom((ExtendedInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ExtendedInfo other) {
        if (other == global::D3.Guild.ExtendedInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuildId) {
          GuildId = other.GuildId;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        if (other.HasLeaderId) {
          LeaderId = other.LeaderId;
        }
        if (other.officers_.Count != 0) {
          result.officers_.Add(other.officers_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_extendedInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _extendedInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuildId = input.ReadUInt64(ref result.guildId_);
              break;
            }
            case 18: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
            case 24: {
              result.hasLeaderId = input.ReadUInt64(ref result.leaderId_);
              break;
            }
            case 34:
            case 32: {
              input.ReadUInt64Array(tag, field_name, result.officers_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuildId {
        get { return result.hasGuildId; }
      }
      public ulong GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(ulong value) {
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = 0UL;
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
      
      public bool HasLeaderId {
        get { return result.hasLeaderId; }
      }
      public ulong LeaderId {
        get { return result.LeaderId; }
        set { SetLeaderId(value); }
      }
      public Builder SetLeaderId(ulong value) {
        PrepareBuilder();
        result.hasLeaderId = true;
        result.leaderId_ = value;
        return this;
      }
      public Builder ClearLeaderId() {
        PrepareBuilder();
        result.hasLeaderId = false;
        result.leaderId_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<ulong> OfficersList {
        get { return PrepareBuilder().officers_; }
      }
      public int OfficersCount {
        get { return result.OfficersCount; }
      }
      public ulong GetOfficers(int index) {
        return result.GetOfficers(index);
      }
      public Builder SetOfficers(int index, ulong value) {
        PrepareBuilder();
        result.officers_[index] = value;
        return this;
      }
      public Builder AddOfficers(ulong value) {
        PrepareBuilder();
        result.officers_.Add(value);
        return this;
      }
      public Builder AddRangeOfficers(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.officers_.Add(values);
        return this;
      }
      public Builder ClearOfficers() {
        PrepareBuilder();
        result.officers_.Clear();
        return this;
      }
    }
    static ExtendedInfo() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GuildAccountRestrictions : pb::GeneratedMessage<GuildAccountRestrictions, GuildAccountRestrictions.Builder> {
    private GuildAccountRestrictions() { }
    private static readonly GuildAccountRestrictions defaultInstance = new GuildAccountRestrictions().MakeReadOnly();
    private static readonly string[] _guildAccountRestrictionsFieldNames = new string[] { "account_id", "num_clans_created", "num_groups_created", "recent_clans_created", "recent_clans_last_update", "recent_groups_created", "recent_groups_last_update" };
    private static readonly uint[] _guildAccountRestrictionsFieldTags = new uint[] { 8, 40, 16, 53, 56, 29, 32 };
    public static GuildAccountRestrictions DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GuildAccountRestrictions DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GuildAccountRestrictions ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GuildAccountRestrictions__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GuildAccountRestrictions, GuildAccountRestrictions.Builder> InternalFieldAccessors {
      get { return global::D3.Guild.Proto.Guild.internal__static_D3_Guild_GuildAccountRestrictions__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private ulong accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public ulong AccountId {
      get { return accountId_; }
    }
    
    public const int NumGroupsCreatedFieldNumber = 2;
    private bool hasNumGroupsCreated;
    private uint numGroupsCreated_;
    public bool HasNumGroupsCreated {
      get { return hasNumGroupsCreated; }
    }
    public uint NumGroupsCreated {
      get { return numGroupsCreated_; }
    }
    
    public const int RecentGroupsCreatedFieldNumber = 3;
    private bool hasRecentGroupsCreated;
    private float recentGroupsCreated_;
    public bool HasRecentGroupsCreated {
      get { return hasRecentGroupsCreated; }
    }
    public float RecentGroupsCreated {
      get { return recentGroupsCreated_; }
    }
    
    public const int RecentGroupsLastUpdateFieldNumber = 4;
    private bool hasRecentGroupsLastUpdate;
    private ulong recentGroupsLastUpdate_;
    public bool HasRecentGroupsLastUpdate {
      get { return hasRecentGroupsLastUpdate; }
    }
    public ulong RecentGroupsLastUpdate {
      get { return recentGroupsLastUpdate_; }
    }
    
    public const int NumClansCreatedFieldNumber = 5;
    private bool hasNumClansCreated;
    private uint numClansCreated_;
    public bool HasNumClansCreated {
      get { return hasNumClansCreated; }
    }
    public uint NumClansCreated {
      get { return numClansCreated_; }
    }
    
    public const int RecentClansCreatedFieldNumber = 6;
    private bool hasRecentClansCreated;
    private float recentClansCreated_;
    public bool HasRecentClansCreated {
      get { return hasRecentClansCreated; }
    }
    public float RecentClansCreated {
      get { return recentClansCreated_; }
    }
    
    public const int RecentClansLastUpdateFieldNumber = 7;
    private bool hasRecentClansLastUpdate;
    private ulong recentClansLastUpdate_;
    public bool HasRecentClansLastUpdate {
      get { return hasRecentClansLastUpdate; }
    }
    public ulong RecentClansLastUpdate {
      get { return recentClansLastUpdate_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasNumGroupsCreated) return false;
        if (!hasRecentGroupsCreated) return false;
        if (!hasRecentGroupsLastUpdate) return false;
        if (!hasNumClansCreated) return false;
        if (!hasRecentClansCreated) return false;
        if (!hasRecentClansLastUpdate) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _guildAccountRestrictionsFieldNames;
      if (hasAccountId) {
        output.WriteUInt64(1, field_names[0], AccountId);
      }
      if (hasNumGroupsCreated) {
        output.WriteUInt32(2, field_names[2], NumGroupsCreated);
      }
      if (hasRecentGroupsCreated) {
        output.WriteFloat(3, field_names[5], RecentGroupsCreated);
      }
      if (hasRecentGroupsLastUpdate) {
        output.WriteUInt64(4, field_names[6], RecentGroupsLastUpdate);
      }
      if (hasNumClansCreated) {
        output.WriteUInt32(5, field_names[1], NumClansCreated);
      }
      if (hasRecentClansCreated) {
        output.WriteFloat(6, field_names[3], RecentClansCreated);
      }
      if (hasRecentClansLastUpdate) {
        output.WriteUInt64(7, field_names[4], RecentClansLastUpdate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccountId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, AccountId);
        }
        if (hasNumGroupsCreated) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, NumGroupsCreated);
        }
        if (hasRecentGroupsCreated) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, RecentGroupsCreated);
        }
        if (hasRecentGroupsLastUpdate) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, RecentGroupsLastUpdate);
        }
        if (hasNumClansCreated) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, NumClansCreated);
        }
        if (hasRecentClansCreated) {
          size += pb::CodedOutputStream.ComputeFloatSize(6, RecentClansCreated);
        }
        if (hasRecentClansLastUpdate) {
          size += pb::CodedOutputStream.ComputeUInt64Size(7, RecentClansLastUpdate);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GuildAccountRestrictions ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildAccountRestrictions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildAccountRestrictions ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GuildAccountRestrictions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GuildAccountRestrictions ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildAccountRestrictions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GuildAccountRestrictions ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GuildAccountRestrictions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GuildAccountRestrictions ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GuildAccountRestrictions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GuildAccountRestrictions MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GuildAccountRestrictions prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GuildAccountRestrictions, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GuildAccountRestrictions cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GuildAccountRestrictions result;
      
      private GuildAccountRestrictions PrepareBuilder() {
        if (resultIsReadOnly) {
          GuildAccountRestrictions original = result;
          result = new GuildAccountRestrictions();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GuildAccountRestrictions MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::D3.Guild.GuildAccountRestrictions.Descriptor; }
      }
      
      public override GuildAccountRestrictions DefaultInstanceForType {
        get { return global::D3.Guild.GuildAccountRestrictions.DefaultInstance; }
      }
      
      public override GuildAccountRestrictions BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GuildAccountRestrictions) {
          return MergeFrom((GuildAccountRestrictions) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GuildAccountRestrictions other) {
        if (other == global::D3.Guild.GuildAccountRestrictions.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        if (other.HasNumGroupsCreated) {
          NumGroupsCreated = other.NumGroupsCreated;
        }
        if (other.HasRecentGroupsCreated) {
          RecentGroupsCreated = other.RecentGroupsCreated;
        }
        if (other.HasRecentGroupsLastUpdate) {
          RecentGroupsLastUpdate = other.RecentGroupsLastUpdate;
        }
        if (other.HasNumClansCreated) {
          NumClansCreated = other.NumClansCreated;
        }
        if (other.HasRecentClansCreated) {
          RecentClansCreated = other.RecentClansCreated;
        }
        if (other.HasRecentClansLastUpdate) {
          RecentClansLastUpdate = other.RecentClansLastUpdate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_guildAccountRestrictionsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _guildAccountRestrictionsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAccountId = input.ReadUInt64(ref result.accountId_);
              break;
            }
            case 16: {
              result.hasNumGroupsCreated = input.ReadUInt32(ref result.numGroupsCreated_);
              break;
            }
            case 29: {
              result.hasRecentGroupsCreated = input.ReadFloat(ref result.recentGroupsCreated_);
              break;
            }
            case 32: {
              result.hasRecentGroupsLastUpdate = input.ReadUInt64(ref result.recentGroupsLastUpdate_);
              break;
            }
            case 40: {
              result.hasNumClansCreated = input.ReadUInt32(ref result.numClansCreated_);
              break;
            }
            case 53: {
              result.hasRecentClansCreated = input.ReadFloat(ref result.recentClansCreated_);
              break;
            }
            case 56: {
              result.hasRecentClansLastUpdate = input.ReadUInt64(ref result.recentClansLastUpdate_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
        get { return result.hasAccountId; }
      }
      public ulong AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(ulong value) {
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = 0UL;
        return this;
      }
      
      public bool HasNumGroupsCreated {
        get { return result.hasNumGroupsCreated; }
      }
      public uint NumGroupsCreated {
        get { return result.NumGroupsCreated; }
        set { SetNumGroupsCreated(value); }
      }
      public Builder SetNumGroupsCreated(uint value) {
        PrepareBuilder();
        result.hasNumGroupsCreated = true;
        result.numGroupsCreated_ = value;
        return this;
      }
      public Builder ClearNumGroupsCreated() {
        PrepareBuilder();
        result.hasNumGroupsCreated = false;
        result.numGroupsCreated_ = 0;
        return this;
      }
      
      public bool HasRecentGroupsCreated {
        get { return result.hasRecentGroupsCreated; }
      }
      public float RecentGroupsCreated {
        get { return result.RecentGroupsCreated; }
        set { SetRecentGroupsCreated(value); }
      }
      public Builder SetRecentGroupsCreated(float value) {
        PrepareBuilder();
        result.hasRecentGroupsCreated = true;
        result.recentGroupsCreated_ = value;
        return this;
      }
      public Builder ClearRecentGroupsCreated() {
        PrepareBuilder();
        result.hasRecentGroupsCreated = false;
        result.recentGroupsCreated_ = 0F;
        return this;
      }
      
      public bool HasRecentGroupsLastUpdate {
        get { return result.hasRecentGroupsLastUpdate; }
      }
      public ulong RecentGroupsLastUpdate {
        get { return result.RecentGroupsLastUpdate; }
        set { SetRecentGroupsLastUpdate(value); }
      }
      public Builder SetRecentGroupsLastUpdate(ulong value) {
        PrepareBuilder();
        result.hasRecentGroupsLastUpdate = true;
        result.recentGroupsLastUpdate_ = value;
        return this;
      }
      public Builder ClearRecentGroupsLastUpdate() {
        PrepareBuilder();
        result.hasRecentGroupsLastUpdate = false;
        result.recentGroupsLastUpdate_ = 0UL;
        return this;
      }
      
      public bool HasNumClansCreated {
        get { return result.hasNumClansCreated; }
      }
      public uint NumClansCreated {
        get { return result.NumClansCreated; }
        set { SetNumClansCreated(value); }
      }
      public Builder SetNumClansCreated(uint value) {
        PrepareBuilder();
        result.hasNumClansCreated = true;
        result.numClansCreated_ = value;
        return this;
      }
      public Builder ClearNumClansCreated() {
        PrepareBuilder();
        result.hasNumClansCreated = false;
        result.numClansCreated_ = 0;
        return this;
      }
      
      public bool HasRecentClansCreated {
        get { return result.hasRecentClansCreated; }
      }
      public float RecentClansCreated {
        get { return result.RecentClansCreated; }
        set { SetRecentClansCreated(value); }
      }
      public Builder SetRecentClansCreated(float value) {
        PrepareBuilder();
        result.hasRecentClansCreated = true;
        result.recentClansCreated_ = value;
        return this;
      }
      public Builder ClearRecentClansCreated() {
        PrepareBuilder();
        result.hasRecentClansCreated = false;
        result.recentClansCreated_ = 0F;
        return this;
      }
      
      public bool HasRecentClansLastUpdate {
        get { return result.hasRecentClansLastUpdate; }
      }
      public ulong RecentClansLastUpdate {
        get { return result.RecentClansLastUpdate; }
        set { SetRecentClansLastUpdate(value); }
      }
      public Builder SetRecentClansLastUpdate(ulong value) {
        PrepareBuilder();
        result.hasRecentClansLastUpdate = true;
        result.recentClansLastUpdate_ = value;
        return this;
      }
      public Builder ClearRecentClansLastUpdate() {
        PrepareBuilder();
        result.hasRecentClansLastUpdate = false;
        result.recentClansLastUpdate_ = 0UL;
        return this;
      }
    }
    static GuildAccountRestrictions() {
      object.ReferenceEquals(global::D3.Guild.Proto.Guild.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
