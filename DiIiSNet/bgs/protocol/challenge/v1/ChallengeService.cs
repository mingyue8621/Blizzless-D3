// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bgs.protocol.challenge.v1 {
  
  namespace Proto {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class ChallengeService {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_challenge_v1_Challenge__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.Challenge, global::bgs.protocol.challenge.v1.Challenge.Builder> internal__static_bgs_protocol_challenge_v1_Challenge__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_challenge_v1_ChallengePickedRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengePickedRequest, global::bgs.protocol.challenge.v1.ChallengePickedRequest.Builder> internal__static_bgs_protocol_challenge_v1_ChallengePickedRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_challenge_v1_ChallengePickedResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengePickedResponse, global::bgs.protocol.challenge.v1.ChallengePickedResponse.Builder> internal__static_bgs_protocol_challenge_v1_ChallengePickedResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_challenge_v1_ChallengeAnsweredRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengeAnsweredRequest, global::bgs.protocol.challenge.v1.ChallengeAnsweredRequest.Builder> internal__static_bgs_protocol_challenge_v1_ChallengeAnsweredRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_challenge_v1_ChallengeAnsweredResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengeAnsweredResponse, global::bgs.protocol.challenge.v1.ChallengeAnsweredResponse.Builder> internal__static_bgs_protocol_challenge_v1_ChallengeAnsweredResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_challenge_v1_ChallengeCancelledRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengeCancelledRequest, global::bgs.protocol.challenge.v1.ChallengeCancelledRequest.Builder> internal__static_bgs_protocol_challenge_v1_ChallengeCancelledRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_challenge_v1_SendChallengeToUserRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.SendChallengeToUserRequest, global::bgs.protocol.challenge.v1.SendChallengeToUserRequest.Builder> internal__static_bgs_protocol_challenge_v1_SendChallengeToUserRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_challenge_v1_SendChallengeToUserResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.SendChallengeToUserResponse, global::bgs.protocol.challenge.v1.SendChallengeToUserResponse.Builder> internal__static_bgs_protocol_challenge_v1_SendChallengeToUserResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_challenge_v1_ChallengeUserRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengeUserRequest, global::bgs.protocol.challenge.v1.ChallengeUserRequest.Builder> internal__static_bgs_protocol_challenge_v1_ChallengeUserRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_challenge_v1_ChallengeResultRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengeResultRequest, global::bgs.protocol.challenge.v1.ChallengeResultRequest.Builder> internal__static_bgs_protocol_challenge_v1_ChallengeResultRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_challenge_v1_ChallengeExternalRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengeExternalRequest, global::bgs.protocol.challenge.v1.ChallengeExternalRequest.Builder> internal__static_bgs_protocol_challenge_v1_ChallengeExternalRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_challenge_v1_ChallengeExternalResult__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengeExternalResult, global::bgs.protocol.challenge.v1.ChallengeExternalResult.Builder> internal__static_bgs_protocol_challenge_v1_ChallengeExternalResult__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static ChallengeService() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "CiliZ3MvbG93L3BiL2NsaWVudC9jaGFsbGVuZ2Vfc2VydmljZS5wcm90bxIZ" + 
            "YmdzLnByb3RvY29sLmNoYWxsZW5nZS52MRonYmdzL2xvdy9wYi9jbGllbnQv" + 
            "YXR0cmlidXRlX3R5cGVzLnByb3RvGiRiZ3MvbG93L3BiL2NsaWVudC9lbnRp" + 
            "dHlfdHlwZXMucHJvdG8aIWJncy9sb3cvcGIvY2xpZW50L3JwY190eXBlcy5w" + 
            "cm90byJtCglDaGFsbGVuZ2USEgoEdHlwZRgBIAIoB1IEdHlwZRISCgRpbmZv" + 
            "GAIgASgJUgRpbmZvEh4KBmFuc3dlchgDIAEoCUIGgvkrAggBUgZhbnN3ZXIS" + 
            "GAoHcmV0cmllcxgEIAEoDVIHcmV0cmllcyKDAQoWQ2hhbGxlbmdlUGlja2Vk" + 
            "UmVxdWVzdBIcCgljaGFsbGVuZ2UYASACKAdSCWNoYWxsZW5nZRIOCgJpZBgC" + 
            "IAEoDVICaWQSOwoWbmV3X2NoYWxsZW5nZV9wcm90b2NvbBgDIAEoCDoFZmFs" + 
            "c2VSFG5ld0NoYWxsZW5nZVByb3RvY29sIjUKF0NoYWxsZW5nZVBpY2tlZFJl" + 
            "c3BvbnNlEhoKBGRhdGEYASABKAxCBoL5KwIIAVIEZGF0YSJmChhDaGFsbGVu" + 
            "Z2VBbnN3ZXJlZFJlcXVlc3QSHgoGYW5zd2VyGAEgAigJQgaC+SsCCAFSBmFu" + 
            "c3dlchIaCgRkYXRhGAIgASgMQgaC+SsCCAFSBGRhdGESDgoCaWQYAyABKA1S" + 
            "AmlkInwKGUNoYWxsZW5nZUFuc3dlcmVkUmVzcG9uc2USGgoEZGF0YRgBIAEo" + 
            "DEIGgvkrAggBUgRkYXRhEhkKCGRvX3JldHJ5GAIgASgIUgdkb1JldHJ5EigK" + 
            "EHJlY29yZF9ub3RfZm91bmQYAyABKAhSDnJlY29yZE5vdEZvdW5kIisKGUNo" + 
            "YWxsZW5nZUNhbmNlbGxlZFJlcXVlc3QSDgoCaWQYASABKA1SAmlkIqUDChpT" + 
            "ZW5kQ2hhbGxlbmdlVG9Vc2VyUmVxdWVzdBIwCgdwZWVyX2lkGAEgASgLMhcu" + 
            "YmdzLnByb3RvY29sLlByb2Nlc3NJZFIGcGVlcklkEj4KD2dhbWVfYWNjb3Vu" + 
            "dF9pZBgCIAEoCzIWLmJncy5wcm90b2NvbC5FbnRpdHlJZFINZ2FtZUFjY291" + 
            "bnRJZBJECgpjaGFsbGVuZ2VzGAMgAygLMiQuYmdzLnByb3RvY29sLmNoYWxs" + 
            "ZW5nZS52MS5DaGFsbGVuZ2VSCmNoYWxsZW5nZXMSGAoHY29udGV4dBgEIAIo" + 
            "B1IHY29udGV4dBIYCgd0aW1lb3V0GAUgASgEUgd0aW1lb3V0EjcKCmF0dHJp" + 
            "YnV0ZXMYBiADKAsyFy5iZ3MucHJvdG9jb2wuQXR0cmlidXRlUgphdHRyaWJ1" + 
            "dGVzEisKBGhvc3QYByABKAsyFy5iZ3MucHJvdG9jb2wuUHJvY2Vzc0lkUgRo" + 
            "b3N0EjUKCmFjY291bnRfaWQYCCABKAsyFi5iZ3MucHJvdG9jb2wuRW50aXR5" + 
            "SWRSCWFjY291bnRJZCItChtTZW5kQ2hhbGxlbmdlVG9Vc2VyUmVzcG9uc2US" + 
            "DgoCaWQYASABKA1SAmlkIpsCChRDaGFsbGVuZ2VVc2VyUmVxdWVzdBJECgpj" + 
            "aGFsbGVuZ2VzGAEgAygLMiQuYmdzLnByb3RvY29sLmNoYWxsZW5nZS52MS5D" + 
            "aGFsbGVuZ2VSCmNoYWxsZW5nZXMSGAoHY29udGV4dBgCIAIoB1IHY29udGV4" + 
            "dBIOCgJpZBgDIAEoDVICaWQSGgoIZGVhZGxpbmUYBCABKARSCGRlYWRsaW5l" + 
            "EjcKCmF0dHJpYnV0ZXMYBSADKAsyFy5iZ3MucHJvdG9jb2wuQXR0cmlidXRl" + 
            "UgphdHRyaWJ1dGVzEj4KD2dhbWVfYWNjb3VudF9pZBgGIAEoCzIWLmJncy5w" + 
            "cm90b2NvbC5FbnRpdHlJZFINZ2FtZUFjY291bnRJZCJ3ChZDaGFsbGVuZ2VS" + 
            "ZXN1bHRSZXF1ZXN0Eg4KAmlkGAEgASgNUgJpZBISCgR0eXBlGAIgASgHUgR0" + 
            "eXBlEhkKCGVycm9yX2lkGAMgASgNUgdlcnJvcklkEh4KBmFuc3dlchgEIAEo" + 
            "DEIGgvkrAggBUgZhbnN3ZXIifAoYQ2hhbGxlbmdlRXh0ZXJuYWxSZXF1ZXN0" + 
            "EiMKDXJlcXVlc3RfdG9rZW4YASABKAlSDHJlcXVlc3RUb2tlbhIhCgxwYXls" + 
            "b2FkX3R5cGUYAiABKAlSC3BheWxvYWRUeXBlEhgKB3BheWxvYWQYAyABKAxS" + 
            "B3BheWxvYWQiXAoXQ2hhbGxlbmdlRXh0ZXJuYWxSZXN1bHQSIwoNcmVxdWVz" + 
            "dF90b2tlbhgBIAEoCVIMcmVxdWVzdFRva2VuEhwKBnBhc3NlZBgCIAEoCDoE" + 
            "dHJ1ZVIGcGFzc2VkMs8EChBDaGFsbGVuZ2VTZXJ2aWNlEoABCg9DaGFsbGVu" + 
            "Z2VQaWNrZWQSMS5iZ3MucHJvdG9jb2wuY2hhbGxlbmdlLnYxLkNoYWxsZW5n" + 
            "ZVBpY2tlZFJlcXVlc3QaMi5iZ3MucHJvdG9jb2wuY2hhbGxlbmdlLnYxLkNo" + 
            "YWxsZW5nZVBpY2tlZFJlc3BvbnNlIgaC+SsCCAEShgEKEUNoYWxsZW5nZUFu" + 
            "c3dlcmVkEjMuYmdzLnByb3RvY29sLmNoYWxsZW5nZS52MS5DaGFsbGVuZ2VB" + 
            "bnN3ZXJlZFJlcXVlc3QaNC5iZ3MucHJvdG9jb2wuY2hhbGxlbmdlLnYxLkNo" + 
            "YWxsZW5nZUFuc3dlcmVkUmVzcG9uc2UiBoL5KwIIAhJoChJDaGFsbGVuZ2VD" + 
            "YW5jZWxsZWQSNC5iZ3MucHJvdG9jb2wuY2hhbGxlbmdlLnYxLkNoYWxsZW5n" + 
            "ZUNhbmNlbGxlZFJlcXVlc3QaFC5iZ3MucHJvdG9jb2wuTm9EYXRhIgaC+SsC" + 
            "CAMSjAEKE1NlbmRDaGFsbGVuZ2VUb1VzZXISNS5iZ3MucHJvdG9jb2wuY2hh" + 
            "bGxlbmdlLnYxLlNlbmRDaGFsbGVuZ2VUb1VzZXJSZXF1ZXN0GjYuYmdzLnBy" + 
            "b3RvY29sLmNoYWxsZW5nZS52MS5TZW5kQ2hhbGxlbmdlVG9Vc2VyUmVzcG9u" + 
            "c2UiBoL5KwIIBBo2gvkrKgooYm5ldC5wcm90b2NvbC5jaGFsbGVuZ2UuQ2hh" + 
            "bGxlbmdlU2VydmljZYr5KwQIARABMv0DChFDaGFsbGVuZ2VMaXN0ZW5lchJl" + 
            "Cg9PbkNoYWxsZW5nZVVzZXISLy5iZ3MucHJvdG9jb2wuY2hhbGxlbmdlLnYx" + 
            "LkNoYWxsZW5nZVVzZXJSZXF1ZXN0GhkuYmdzLnByb3RvY29sLk5PX1JFU1BP" + 
            "TlNFIgaC+SsCCAESaQoRT25DaGFsbGVuZ2VSZXN1bHQSMS5iZ3MucHJvdG9j" + 
            "b2wuY2hhbGxlbmdlLnYxLkNoYWxsZW5nZVJlc3VsdFJlcXVlc3QaGS5iZ3Mu" + 
            "cHJvdG9jb2wuTk9fUkVTUE9OU0UiBoL5KwIIAhJtChNPbkV4dGVybmFsQ2hh" + 
            "bGxlbmdlEjMuYmdzLnByb3RvY29sLmNoYWxsZW5nZS52MS5DaGFsbGVuZ2VF" + 
            "eHRlcm5hbFJlcXVlc3QaGS5iZ3MucHJvdG9jb2wuTk9fUkVTUE9OU0UiBoL5" + 
            "KwIIAxJyChlPbkV4dGVybmFsQ2hhbGxlbmdlUmVzdWx0EjIuYmdzLnByb3Rv" + 
            "Y29sLmNoYWxsZW5nZS52MS5DaGFsbGVuZ2VFeHRlcm5hbFJlc3VsdBoZLmJn" + 
            "cy5wcm90b2NvbC5OT19SRVNQT05TRSIGgvkrAggEGjOC+SspCidibmV0LnBy" + 
            "b3RvY29sLmNoYWxsZW5nZS5DaGFsbGVuZ2VOb3RpZnmK+SsCCAFCOwoaYm5l" + 
            "dC5wcm90b2NvbC5jaGFsbGVuZ2UudjFCFUNoYWxsZW5nZVNlcnZpY2VQcm90" + 
            "b0gCgAEAiAEB");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_bgs_protocol_challenge_v1_Challenge__Descriptor = Descriptor.MessageTypes[0];
          internal__static_bgs_protocol_challenge_v1_Challenge__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.Challenge, global::bgs.protocol.challenge.v1.Challenge.Builder>(internal__static_bgs_protocol_challenge_v1_Challenge__Descriptor,
                  new string[] { "Type", "Info", "Answer", "Retries", });
          internal__static_bgs_protocol_challenge_v1_ChallengePickedRequest__Descriptor = Descriptor.MessageTypes[1];
          internal__static_bgs_protocol_challenge_v1_ChallengePickedRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengePickedRequest, global::bgs.protocol.challenge.v1.ChallengePickedRequest.Builder>(internal__static_bgs_protocol_challenge_v1_ChallengePickedRequest__Descriptor,
                  new string[] { "Challenge", "Id", "NewChallengeProtocol", });
          internal__static_bgs_protocol_challenge_v1_ChallengePickedResponse__Descriptor = Descriptor.MessageTypes[2];
          internal__static_bgs_protocol_challenge_v1_ChallengePickedResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengePickedResponse, global::bgs.protocol.challenge.v1.ChallengePickedResponse.Builder>(internal__static_bgs_protocol_challenge_v1_ChallengePickedResponse__Descriptor,
                  new string[] { "Data", });
          internal__static_bgs_protocol_challenge_v1_ChallengeAnsweredRequest__Descriptor = Descriptor.MessageTypes[3];
          internal__static_bgs_protocol_challenge_v1_ChallengeAnsweredRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengeAnsweredRequest, global::bgs.protocol.challenge.v1.ChallengeAnsweredRequest.Builder>(internal__static_bgs_protocol_challenge_v1_ChallengeAnsweredRequest__Descriptor,
                  new string[] { "Answer", "Data", "Id", });
          internal__static_bgs_protocol_challenge_v1_ChallengeAnsweredResponse__Descriptor = Descriptor.MessageTypes[4];
          internal__static_bgs_protocol_challenge_v1_ChallengeAnsweredResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengeAnsweredResponse, global::bgs.protocol.challenge.v1.ChallengeAnsweredResponse.Builder>(internal__static_bgs_protocol_challenge_v1_ChallengeAnsweredResponse__Descriptor,
                  new string[] { "Data", "DoRetry", "RecordNotFound", });
          internal__static_bgs_protocol_challenge_v1_ChallengeCancelledRequest__Descriptor = Descriptor.MessageTypes[5];
          internal__static_bgs_protocol_challenge_v1_ChallengeCancelledRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengeCancelledRequest, global::bgs.protocol.challenge.v1.ChallengeCancelledRequest.Builder>(internal__static_bgs_protocol_challenge_v1_ChallengeCancelledRequest__Descriptor,
                  new string[] { "Id", });
          internal__static_bgs_protocol_challenge_v1_SendChallengeToUserRequest__Descriptor = Descriptor.MessageTypes[6];
          internal__static_bgs_protocol_challenge_v1_SendChallengeToUserRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.SendChallengeToUserRequest, global::bgs.protocol.challenge.v1.SendChallengeToUserRequest.Builder>(internal__static_bgs_protocol_challenge_v1_SendChallengeToUserRequest__Descriptor,
                  new string[] { "PeerId", "GameAccountId", "Challenges", "Context", "Timeout", "Attributes", "Host", "AccountId", });
          internal__static_bgs_protocol_challenge_v1_SendChallengeToUserResponse__Descriptor = Descriptor.MessageTypes[7];
          internal__static_bgs_protocol_challenge_v1_SendChallengeToUserResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.SendChallengeToUserResponse, global::bgs.protocol.challenge.v1.SendChallengeToUserResponse.Builder>(internal__static_bgs_protocol_challenge_v1_SendChallengeToUserResponse__Descriptor,
                  new string[] { "Id", });
          internal__static_bgs_protocol_challenge_v1_ChallengeUserRequest__Descriptor = Descriptor.MessageTypes[8];
          internal__static_bgs_protocol_challenge_v1_ChallengeUserRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengeUserRequest, global::bgs.protocol.challenge.v1.ChallengeUserRequest.Builder>(internal__static_bgs_protocol_challenge_v1_ChallengeUserRequest__Descriptor,
                  new string[] { "Challenges", "Context", "Id", "Deadline", "Attributes", "GameAccountId", });
          internal__static_bgs_protocol_challenge_v1_ChallengeResultRequest__Descriptor = Descriptor.MessageTypes[9];
          internal__static_bgs_protocol_challenge_v1_ChallengeResultRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengeResultRequest, global::bgs.protocol.challenge.v1.ChallengeResultRequest.Builder>(internal__static_bgs_protocol_challenge_v1_ChallengeResultRequest__Descriptor,
                  new string[] { "Id", "Type", "ErrorId", "Answer", });
          internal__static_bgs_protocol_challenge_v1_ChallengeExternalRequest__Descriptor = Descriptor.MessageTypes[10];
          internal__static_bgs_protocol_challenge_v1_ChallengeExternalRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengeExternalRequest, global::bgs.protocol.challenge.v1.ChallengeExternalRequest.Builder>(internal__static_bgs_protocol_challenge_v1_ChallengeExternalRequest__Descriptor,
                  new string[] { "RequestToken", "PayloadType", "Payload", });
          internal__static_bgs_protocol_challenge_v1_ChallengeExternalResult__Descriptor = Descriptor.MessageTypes[11];
          internal__static_bgs_protocol_challenge_v1_ChallengeExternalResult__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.challenge.v1.ChallengeExternalResult, global::bgs.protocol.challenge.v1.ChallengeExternalResult.Builder>(internal__static_bgs_protocol_challenge_v1_ChallengeExternalResult__Descriptor,
                  new string[] { "RequestToken", "Passed", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::bgs.protocol.AttributeTypes.RegisterAllExtensions(registry);
          global::bgs.protocol.EntityTypes.RegisterAllExtensions(registry);
          global::bgs.protocol.RpcTypes.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::bgs.protocol.AttributeTypes.Descriptor, 
            global::bgs.protocol.EntityTypes.Descriptor, 
            global::bgs.protocol.RpcTypes.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Challenge : pb::GeneratedMessage<Challenge, Challenge.Builder> {
    private Challenge() { }
    private static readonly Challenge defaultInstance = new Challenge().MakeReadOnly();
    public static Challenge DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Challenge DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Challenge ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_Challenge__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Challenge, Challenge.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_Challenge__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private uint type_;
    public bool HasType {
      get { return hasType; }
    }
    public uint Type {
      get { return type_; }
    }
    
    public const int InfoFieldNumber = 2;
    private bool hasInfo;
    private string info_ = "";
    public bool HasInfo {
      get { return hasInfo; }
    }
    public string Info {
      get { return info_; }
    }
    
    public const int AnswerFieldNumber = 3;
    private bool hasAnswer;
    private string answer_ = "";
    public bool HasAnswer {
      get { return hasAnswer; }
    }
    public string Answer {
      get { return answer_; }
    }
    
    public const int RetriesFieldNumber = 4;
    private bool hasRetries;
    private uint retries_;
    public bool HasRetries {
      get { return hasRetries; }
    }
    public uint Retries {
      get { return retries_; }
    }
    
    public static Challenge ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Challenge ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Challenge ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Challenge ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Challenge ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Challenge ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Challenge ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Challenge ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Challenge ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Challenge ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Challenge MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Challenge prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Challenge, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Challenge cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Challenge result;
      
      private Challenge PrepareBuilder() {
        if (resultIsReadOnly) {
          Challenge original = result;
          result = new Challenge();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Challenge MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.challenge.v1.Challenge.Descriptor; }
      }
      
      public override Challenge DefaultInstanceForType {
        get { return global::bgs.protocol.challenge.v1.Challenge.DefaultInstance; }
      }
      
      public override Challenge BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public uint Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(uint value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasInfo {
        get { return result.hasInfo; }
      }
      public string Info {
        get { return result.Info; }
        set { SetInfo(value); }
      }
      public Builder SetInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = value;
        return this;
      }
      public Builder ClearInfo() {
        PrepareBuilder();
        result.hasInfo = false;
        result.info_ = "";
        return this;
      }
      
      public bool HasAnswer {
        get { return result.hasAnswer; }
      }
      public string Answer {
        get { return result.Answer; }
        set { SetAnswer(value); }
      }
      public Builder SetAnswer(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAnswer = true;
        result.answer_ = value;
        return this;
      }
      public Builder ClearAnswer() {
        PrepareBuilder();
        result.hasAnswer = false;
        result.answer_ = "";
        return this;
      }
      
      public bool HasRetries {
        get { return result.hasRetries; }
      }
      public uint Retries {
        get { return result.Retries; }
        set { SetRetries(value); }
      }
      public Builder SetRetries(uint value) {
        PrepareBuilder();
        result.hasRetries = true;
        result.retries_ = value;
        return this;
      }
      public Builder ClearRetries() {
        PrepareBuilder();
        result.hasRetries = false;
        result.retries_ = 0;
        return this;
      }
    }
    static Challenge() {
      object.ReferenceEquals(global::bgs.protocol.challenge.v1.Proto.ChallengeService.Descriptor, null);
    }
  }
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChallengePickedRequest : pb::GeneratedMessage<ChallengePickedRequest, ChallengePickedRequest.Builder> {
    private ChallengePickedRequest() { }
    private static readonly ChallengePickedRequest defaultInstance = new ChallengePickedRequest().MakeReadOnly();
    public static ChallengePickedRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChallengePickedRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChallengePickedRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengePickedRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChallengePickedRequest, ChallengePickedRequest.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengePickedRequest__FieldAccessorTable; }
    }
    
    public const int ChallengeFieldNumber = 1;
    private bool hasChallenge;
    private uint challenge_;
    public bool HasChallenge {
      get { return hasChallenge; }
    }
    public uint Challenge {
      get { return challenge_; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public const int NewChallengeProtocolFieldNumber = 3;
    private bool hasNewChallengeProtocol;
    private bool newChallengeProtocol_;
    public bool HasNewChallengeProtocol {
      get { return hasNewChallengeProtocol; }
    }
    public bool NewChallengeProtocol {
      get { return newChallengeProtocol_; }
    }
    
    public static ChallengePickedRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengePickedRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengePickedRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengePickedRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengePickedRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengePickedRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChallengePickedRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChallengePickedRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChallengePickedRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengePickedRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChallengePickedRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChallengePickedRequest prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChallengePickedRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChallengePickedRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChallengePickedRequest result;
      
      private ChallengePickedRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ChallengePickedRequest original = result;
          result = new ChallengePickedRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChallengePickedRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.challenge.v1.ChallengePickedRequest.Descriptor; }
      }
      
      public override ChallengePickedRequest DefaultInstanceForType {
        get { return global::bgs.protocol.challenge.v1.ChallengePickedRequest.DefaultInstance; }
      }
      
      public override ChallengePickedRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      
      public bool HasChallenge {
        get { return result.hasChallenge; }
      }
      public uint Challenge {
        get { return result.Challenge; }
        set { SetChallenge(value); }
      }
      public Builder SetChallenge(uint value) {
        PrepareBuilder();
        result.hasChallenge = true;
        result.challenge_ = value;
        return this;
      }
      public Builder ClearChallenge() {
        PrepareBuilder();
        result.hasChallenge = false;
        result.challenge_ = 0;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasNewChallengeProtocol {
        get { return result.hasNewChallengeProtocol; }
      }
      public bool NewChallengeProtocol {
        get { return result.NewChallengeProtocol; }
        set { SetNewChallengeProtocol(value); }
      }
      public Builder SetNewChallengeProtocol(bool value) {
        PrepareBuilder();
        result.hasNewChallengeProtocol = true;
        result.newChallengeProtocol_ = value;
        return this;
      }
      public Builder ClearNewChallengeProtocol() {
        PrepareBuilder();
        result.hasNewChallengeProtocol = false;
        result.newChallengeProtocol_ = false;
        return this;
      }
    }
    static ChallengePickedRequest() {
      object.ReferenceEquals(global::bgs.protocol.challenge.v1.Proto.ChallengeService.Descriptor, null);
    }
  }
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChallengePickedResponse : pb::GeneratedMessage<ChallengePickedResponse, ChallengePickedResponse.Builder> {
    private ChallengePickedResponse() { }
    private static readonly ChallengePickedResponse defaultInstance = new ChallengePickedResponse().MakeReadOnly();
    public static ChallengePickedResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChallengePickedResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChallengePickedResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengePickedResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChallengePickedResponse, ChallengePickedResponse.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengePickedResponse__FieldAccessorTable; }
    }
    
    public const int DataFieldNumber = 1;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public static ChallengePickedResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengePickedResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengePickedResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengePickedResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengePickedResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengePickedResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChallengePickedResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChallengePickedResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChallengePickedResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengePickedResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChallengePickedResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChallengePickedResponse prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChallengePickedResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChallengePickedResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChallengePickedResponse result;
      
      private ChallengePickedResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ChallengePickedResponse original = result;
          result = new ChallengePickedResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChallengePickedResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.challenge.v1.ChallengePickedResponse.Descriptor; }
      }
      
      public override ChallengePickedResponse DefaultInstanceForType {
        get { return global::bgs.protocol.challenge.v1.ChallengePickedResponse.DefaultInstance; }
      }
      
      public override ChallengePickedResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      
      public bool HasData {
        get { return result.hasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
    }
    static ChallengePickedResponse() {
      object.ReferenceEquals(global::bgs.protocol.challenge.v1.Proto.ChallengeService.Descriptor, null);
    }
  }
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChallengeAnsweredRequest : pb::GeneratedMessage<ChallengeAnsweredRequest, ChallengeAnsweredRequest.Builder> {
    private ChallengeAnsweredRequest() { }
    private static readonly ChallengeAnsweredRequest defaultInstance = new ChallengeAnsweredRequest().MakeReadOnly();
    public static ChallengeAnsweredRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChallengeAnsweredRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChallengeAnsweredRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengeAnsweredRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChallengeAnsweredRequest, ChallengeAnsweredRequest.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengeAnsweredRequest__FieldAccessorTable; }
    }
    
    public const int AnswerFieldNumber = 1;
    private bool hasAnswer;
    private string answer_ = "";
    public bool HasAnswer {
      get { return hasAnswer; }
    }
    public string Answer {
      get { return answer_; }
    }
    
    public const int DataFieldNumber = 2;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public const int IdFieldNumber = 3;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public static ChallengeAnsweredRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeAnsweredRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChallengeAnsweredRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChallengeAnsweredRequest prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChallengeAnsweredRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChallengeAnsweredRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChallengeAnsweredRequest result;
      
      private ChallengeAnsweredRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ChallengeAnsweredRequest original = result;
          result = new ChallengeAnsweredRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChallengeAnsweredRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.challenge.v1.ChallengeAnsweredRequest.Descriptor; }
      }
      
      public override ChallengeAnsweredRequest DefaultInstanceForType {
        get { return global::bgs.protocol.challenge.v1.ChallengeAnsweredRequest.DefaultInstance; }
      }
      
      public override ChallengeAnsweredRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      
      public bool HasAnswer {
        get { return result.hasAnswer; }
      }
      public string Answer {
        get { return result.Answer; }
        set { SetAnswer(value); }
      }
      public Builder SetAnswer(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAnswer = true;
        result.answer_ = value;
        return this;
      }
      public Builder ClearAnswer() {
        PrepareBuilder();
        result.hasAnswer = false;
        result.answer_ = "";
        return this;
      }
      
      public bool HasData {
        get { return result.hasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static ChallengeAnsweredRequest() {
      object.ReferenceEquals(global::bgs.protocol.challenge.v1.Proto.ChallengeService.Descriptor, null);
    }
  }
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChallengeAnsweredResponse : pb::GeneratedMessage<ChallengeAnsweredResponse, ChallengeAnsweredResponse.Builder> {
    private ChallengeAnsweredResponse() { }
    private static readonly ChallengeAnsweredResponse defaultInstance = new ChallengeAnsweredResponse().MakeReadOnly();
    public static ChallengeAnsweredResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChallengeAnsweredResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChallengeAnsweredResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengeAnsweredResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChallengeAnsweredResponse, ChallengeAnsweredResponse.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengeAnsweredResponse__FieldAccessorTable; }
    }
    
    public const int DataFieldNumber = 1;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public const int DoRetryFieldNumber = 2;
    private bool hasDoRetry;
    private bool doRetry_;
    public bool HasDoRetry {
      get { return hasDoRetry; }
    }
    public bool DoRetry {
      get { return doRetry_; }
    }
    
    public const int RecordNotFoundFieldNumber = 3;
    private bool hasRecordNotFound;
    private bool recordNotFound_;
    public bool HasRecordNotFound {
      get { return hasRecordNotFound; }
    }
    public bool RecordNotFound {
      get { return recordNotFound_; }
    }
    
    public static ChallengeAnsweredResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeAnsweredResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeAnsweredResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeAnsweredResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeAnsweredResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeAnsweredResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChallengeAnsweredResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChallengeAnsweredResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChallengeAnsweredResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeAnsweredResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChallengeAnsweredResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChallengeAnsweredResponse prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChallengeAnsweredResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChallengeAnsweredResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChallengeAnsweredResponse result;
      
      private ChallengeAnsweredResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ChallengeAnsweredResponse original = result;
          result = new ChallengeAnsweredResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChallengeAnsweredResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.challenge.v1.ChallengeAnsweredResponse.Descriptor; }
      }
      
      public override ChallengeAnsweredResponse DefaultInstanceForType {
        get { return global::bgs.protocol.challenge.v1.ChallengeAnsweredResponse.DefaultInstance; }
      }
      
      public override ChallengeAnsweredResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      
      public bool HasData {
        get { return result.hasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasDoRetry {
        get { return result.hasDoRetry; }
      }
      public bool DoRetry {
        get { return result.DoRetry; }
        set { SetDoRetry(value); }
      }
      public Builder SetDoRetry(bool value) {
        PrepareBuilder();
        result.hasDoRetry = true;
        result.doRetry_ = value;
        return this;
      }
      public Builder ClearDoRetry() {
        PrepareBuilder();
        result.hasDoRetry = false;
        result.doRetry_ = false;
        return this;
      }
      
      public bool HasRecordNotFound {
        get { return result.hasRecordNotFound; }
      }
      public bool RecordNotFound {
        get { return result.RecordNotFound; }
        set { SetRecordNotFound(value); }
      }
      public Builder SetRecordNotFound(bool value) {
        PrepareBuilder();
        result.hasRecordNotFound = true;
        result.recordNotFound_ = value;
        return this;
      }
      public Builder ClearRecordNotFound() {
        PrepareBuilder();
        result.hasRecordNotFound = false;
        result.recordNotFound_ = false;
        return this;
      }
    }
    static ChallengeAnsweredResponse() {
      object.ReferenceEquals(global::bgs.protocol.challenge.v1.Proto.ChallengeService.Descriptor, null);
    }
  }
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChallengeCancelledRequest : pb::GeneratedMessage<ChallengeCancelledRequest, ChallengeCancelledRequest.Builder> {
    private ChallengeCancelledRequest() { }
    private static readonly ChallengeCancelledRequest defaultInstance = new ChallengeCancelledRequest().MakeReadOnly();
    public static ChallengeCancelledRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChallengeCancelledRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChallengeCancelledRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengeCancelledRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChallengeCancelledRequest, ChallengeCancelledRequest.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengeCancelledRequest__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public static ChallengeCancelledRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeCancelledRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeCancelledRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeCancelledRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeCancelledRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeCancelledRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChallengeCancelledRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChallengeCancelledRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChallengeCancelledRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeCancelledRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChallengeCancelledRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChallengeCancelledRequest prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChallengeCancelledRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChallengeCancelledRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChallengeCancelledRequest result;
      
      private ChallengeCancelledRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ChallengeCancelledRequest original = result;
          result = new ChallengeCancelledRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChallengeCancelledRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.challenge.v1.ChallengeCancelledRequest.Descriptor; }
      }
      
      public override ChallengeCancelledRequest DefaultInstanceForType {
        get { return global::bgs.protocol.challenge.v1.ChallengeCancelledRequest.DefaultInstance; }
      }
      
      public override ChallengeCancelledRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static ChallengeCancelledRequest() {
      object.ReferenceEquals(global::bgs.protocol.challenge.v1.Proto.ChallengeService.Descriptor, null);
    }
  }
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SendChallengeToUserRequest : pb::GeneratedMessage<SendChallengeToUserRequest, SendChallengeToUserRequest.Builder> {
    private SendChallengeToUserRequest() { }
    private static readonly SendChallengeToUserRequest defaultInstance = new SendChallengeToUserRequest().MakeReadOnly();
    public static SendChallengeToUserRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SendChallengeToUserRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SendChallengeToUserRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_SendChallengeToUserRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SendChallengeToUserRequest, SendChallengeToUserRequest.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_SendChallengeToUserRequest__FieldAccessorTable; }
    }
    
    public const int PeerIdFieldNumber = 1;
    private bool hasPeerId;
    private global::bgs.protocol.ProcessId peerId_;
    public bool HasPeerId {
      get { return hasPeerId; }
    }
    public global::bgs.protocol.ProcessId PeerId {
      get { return peerId_ ?? global::bgs.protocol.ProcessId.DefaultInstance; }
    }
    
    public const int GameAccountIdFieldNumber = 2;
    private bool hasGameAccountId;
    private global::bgs.protocol.EntityId gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::bgs.protocol.EntityId GameAccountId {
      get { return gameAccountId_ ?? global::bgs.protocol.EntityId.DefaultInstance; }
    }
    
    public const int ChallengesFieldNumber = 3;
    private pbc::PopsicleList<global::bgs.protocol.challenge.v1.Challenge> challenges_ = new pbc::PopsicleList<global::bgs.protocol.challenge.v1.Challenge>();
    public scg::IList<global::bgs.protocol.challenge.v1.Challenge> ChallengesList {
      get { return challenges_; }
    }
    public int ChallengesCount {
      get { return challenges_.Count; }
    }
    public global::bgs.protocol.challenge.v1.Challenge GetChallenges(int index) {
      return challenges_[index];
    }
    
    public const int ContextFieldNumber = 4;
    private bool hasContext;
    private uint context_;
    public bool HasContext {
      get { return hasContext; }
    }
    public uint Context {
      get { return context_; }
    }
    
    public const int TimeoutFieldNumber = 5;
    private bool hasTimeout;
    private ulong timeout_;
    public bool HasTimeout {
      get { return hasTimeout; }
    }
    public ulong Timeout {
      get { return timeout_; }
    }
    
    public const int AttributesFieldNumber = 6;
    private pbc::PopsicleList<global::bgs.protocol.Attribute> attributes_ = new pbc::PopsicleList<global::bgs.protocol.Attribute>();
    public scg::IList<global::bgs.protocol.Attribute> AttributesList {
      get { return attributes_; }
    }
    public int AttributesCount {
      get { return attributes_.Count; }
    }
    public global::bgs.protocol.Attribute GetAttributes(int index) {
      return attributes_[index];
    }
    
    public const int HostFieldNumber = 7;
    private bool hasHost;
    private global::bgs.protocol.ProcessId host_;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bgs.protocol.ProcessId Host {
      get { return host_ ?? global::bgs.protocol.ProcessId.DefaultInstance; }
    }
    
    public const int AccountIdFieldNumber = 8;
    private bool hasAccountId;
    private global::bgs.protocol.EntityId accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public global::bgs.protocol.EntityId AccountId {
      get { return accountId_ ?? global::bgs.protocol.EntityId.DefaultInstance; }
    }
    
    public static SendChallengeToUserRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendChallengeToUserRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SendChallengeToUserRequest MakeReadOnly() {
      challenges_.MakeReadOnly();
      attributes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SendChallengeToUserRequest prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SendChallengeToUserRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SendChallengeToUserRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SendChallengeToUserRequest result;
      
      private SendChallengeToUserRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          SendChallengeToUserRequest original = result;
          result = new SendChallengeToUserRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SendChallengeToUserRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.challenge.v1.SendChallengeToUserRequest.Descriptor; }
      }
      
      public override SendChallengeToUserRequest DefaultInstanceForType {
        get { return global::bgs.protocol.challenge.v1.SendChallengeToUserRequest.DefaultInstance; }
      }
      
      public override SendChallengeToUserRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      
      public bool HasPeerId {
       get { return result.hasPeerId; }
      }
      public global::bgs.protocol.ProcessId PeerId {
        get { return result.PeerId; }
        set { SetPeerId(value); }
      }
      public Builder SetPeerId(global::bgs.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPeerId = true;
        result.peerId_ = value;
        return this;
      }
      public Builder SetPeerId(global::bgs.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPeerId = true;
        result.peerId_ = builderForValue.Build();
        return this;
      }
      public Builder MergePeerId(global::bgs.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPeerId &&
            result.peerId_ != global::bgs.protocol.ProcessId.DefaultInstance) {
            result.peerId_ = global::bgs.protocol.ProcessId.CreateBuilder(result.peerId_).MergeFrom(value).BuildPartial();
        } else {
          result.peerId_ = value;
        }
        result.hasPeerId = true;
        return this;
      }
      public Builder ClearPeerId() {
        PrepareBuilder();
        result.hasPeerId = false;
        result.peerId_ = null;
        return this;
      }
      
      public bool HasGameAccountId {
       get { return result.hasGameAccountId; }
      }
      public global::bgs.protocol.EntityId GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::bgs.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::bgs.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::bgs.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccountId &&
            result.gameAccountId_ != global::bgs.protocol.EntityId.DefaultInstance) {
            result.gameAccountId_ = global::bgs.protocol.EntityId.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::bgs.protocol.challenge.v1.Challenge> ChallengesList {
        get { return PrepareBuilder().challenges_; }
      }
      public int ChallengesCount {
        get { return result.ChallengesCount; }
      }
      public global::bgs.protocol.challenge.v1.Challenge GetChallenges(int index) {
        return result.GetChallenges(index);
      }
      public Builder SetChallenges(int index, global::bgs.protocol.challenge.v1.Challenge value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.challenges_[index] = value;
        return this;
      }
      public Builder SetChallenges(int index, global::bgs.protocol.challenge.v1.Challenge.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.challenges_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddChallenges(global::bgs.protocol.challenge.v1.Challenge value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.challenges_.Add(value);
        return this;
      }
      public Builder AddChallenges(global::bgs.protocol.challenge.v1.Challenge.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.challenges_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeChallenges(scg::IEnumerable<global::bgs.protocol.challenge.v1.Challenge> values) {
        PrepareBuilder();
        result.challenges_.Add(values);
        return this;
      }
      public Builder ClearChallenges() {
        PrepareBuilder();
        result.challenges_.Clear();
        return this;
      }
      
      public bool HasContext {
        get { return result.hasContext; }
      }
      public uint Context {
        get { return result.Context; }
        set { SetContext(value); }
      }
      public Builder SetContext(uint value) {
        PrepareBuilder();
        result.hasContext = true;
        result.context_ = value;
        return this;
      }
      public Builder ClearContext() {
        PrepareBuilder();
        result.hasContext = false;
        result.context_ = 0;
        return this;
      }
      
      public bool HasTimeout {
        get { return result.hasTimeout; }
      }
      public ulong Timeout {
        get { return result.Timeout; }
        set { SetTimeout(value); }
      }
      public Builder SetTimeout(ulong value) {
        PrepareBuilder();
        result.hasTimeout = true;
        result.timeout_ = value;
        return this;
      }
      public Builder ClearTimeout() {
        PrepareBuilder();
        result.hasTimeout = false;
        result.timeout_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::bgs.protocol.Attribute> AttributesList {
        get { return PrepareBuilder().attributes_; }
      }
      public int AttributesCount {
        get { return result.AttributesCount; }
      }
      public global::bgs.protocol.Attribute GetAttributes(int index) {
        return result.GetAttributes(index);
      }
      public Builder SetAttributes(int index, global::bgs.protocol.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_[index] = value;
        return this;
      }
      public Builder SetAttributes(int index, global::bgs.protocol.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttributes(global::bgs.protocol.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_.Add(value);
        return this;
      }
      public Builder AddAttributes(global::bgs.protocol.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttributes(scg::IEnumerable<global::bgs.protocol.Attribute> values) {
        PrepareBuilder();
        result.attributes_.Add(values);
        return this;
      }
      public Builder ClearAttributes() {
        PrepareBuilder();
        result.attributes_.Clear();
        return this;
      }
      
      public bool HasHost {
       get { return result.hasHost; }
      }
      public global::bgs.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bgs.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bgs.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bgs.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHost &&
            result.host_ != global::bgs.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bgs.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        PrepareBuilder();
        result.hasHost = false;
        result.host_ = null;
        return this;
      }
      
      public bool HasAccountId {
       get { return result.hasAccountId; }
      }
      public global::bgs.protocol.EntityId AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(global::bgs.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder SetAccountId(global::bgs.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccountId(global::bgs.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccountId &&
            result.accountId_ != global::bgs.protocol.EntityId.DefaultInstance) {
            result.accountId_ = global::bgs.protocol.EntityId.CreateBuilder(result.accountId_).MergeFrom(value).BuildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = null;
        return this;
      }
    }
    static SendChallengeToUserRequest() {
      object.ReferenceEquals(global::bgs.protocol.challenge.v1.Proto.ChallengeService.Descriptor, null);
    }
  }
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SendChallengeToUserResponse : pb::GeneratedMessage<SendChallengeToUserResponse, SendChallengeToUserResponse.Builder> {
    private SendChallengeToUserResponse() { }
    private static readonly SendChallengeToUserResponse defaultInstance = new SendChallengeToUserResponse().MakeReadOnly();
    public static SendChallengeToUserResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SendChallengeToUserResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SendChallengeToUserResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_SendChallengeToUserResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SendChallengeToUserResponse, SendChallengeToUserResponse.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_SendChallengeToUserResponse__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public static SendChallengeToUserResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendChallengeToUserResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SendChallengeToUserResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SendChallengeToUserResponse prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SendChallengeToUserResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SendChallengeToUserResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SendChallengeToUserResponse result;
      
      private SendChallengeToUserResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          SendChallengeToUserResponse original = result;
          result = new SendChallengeToUserResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SendChallengeToUserResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.challenge.v1.SendChallengeToUserResponse.Descriptor; }
      }
      
      public override SendChallengeToUserResponse DefaultInstanceForType {
        get { return global::bgs.protocol.challenge.v1.SendChallengeToUserResponse.DefaultInstance; }
      }
      
      public override SendChallengeToUserResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static SendChallengeToUserResponse() {
      object.ReferenceEquals(global::bgs.protocol.challenge.v1.Proto.ChallengeService.Descriptor, null);
    }
  }
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChallengeUserRequest : pb::GeneratedMessage<ChallengeUserRequest, ChallengeUserRequest.Builder> {
    private ChallengeUserRequest() { }
    private static readonly ChallengeUserRequest defaultInstance = new ChallengeUserRequest().MakeReadOnly();
    public static ChallengeUserRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChallengeUserRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChallengeUserRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengeUserRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChallengeUserRequest, ChallengeUserRequest.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengeUserRequest__FieldAccessorTable; }
    }
    
    public const int ChallengesFieldNumber = 1;
    private pbc::PopsicleList<global::bgs.protocol.challenge.v1.Challenge> challenges_ = new pbc::PopsicleList<global::bgs.protocol.challenge.v1.Challenge>();
    public scg::IList<global::bgs.protocol.challenge.v1.Challenge> ChallengesList {
      get { return challenges_; }
    }
    public int ChallengesCount {
      get { return challenges_.Count; }
    }
    public global::bgs.protocol.challenge.v1.Challenge GetChallenges(int index) {
      return challenges_[index];
    }
    
    public const int ContextFieldNumber = 2;
    private bool hasContext;
    private uint context_;
    public bool HasContext {
      get { return hasContext; }
    }
    public uint Context {
      get { return context_; }
    }
    
    public const int IdFieldNumber = 3;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public const int DeadlineFieldNumber = 4;
    private bool hasDeadline;
    private ulong deadline_;
    public bool HasDeadline {
      get { return hasDeadline; }
    }
    public ulong Deadline {
      get { return deadline_; }
    }
    
    public const int AttributesFieldNumber = 5;
    private pbc::PopsicleList<global::bgs.protocol.Attribute> attributes_ = new pbc::PopsicleList<global::bgs.protocol.Attribute>();
    public scg::IList<global::bgs.protocol.Attribute> AttributesList {
      get { return attributes_; }
    }
    public int AttributesCount {
      get { return attributes_.Count; }
    }
    public global::bgs.protocol.Attribute GetAttributes(int index) {
      return attributes_[index];
    }
    
    public const int GameAccountIdFieldNumber = 6;
    private bool hasGameAccountId;
    private global::bgs.protocol.EntityId gameAccountId_;
    public bool HasGameAccountId {
      get { return hasGameAccountId; }
    }
    public global::bgs.protocol.EntityId GameAccountId {
      get { return gameAccountId_ ?? global::bgs.protocol.EntityId.DefaultInstance; }
    }
    
    public static ChallengeUserRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeUserRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeUserRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeUserRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeUserRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeUserRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChallengeUserRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChallengeUserRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChallengeUserRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeUserRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChallengeUserRequest MakeReadOnly() {
      challenges_.MakeReadOnly();
      attributes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChallengeUserRequest prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChallengeUserRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChallengeUserRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChallengeUserRequest result;
      
      private ChallengeUserRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ChallengeUserRequest original = result;
          result = new ChallengeUserRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChallengeUserRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.challenge.v1.ChallengeUserRequest.Descriptor; }
      }
      
      public override ChallengeUserRequest DefaultInstanceForType {
        get { return global::bgs.protocol.challenge.v1.ChallengeUserRequest.DefaultInstance; }
      }
      
      public override ChallengeUserRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      
      public pbc::IPopsicleList<global::bgs.protocol.challenge.v1.Challenge> ChallengesList {
        get { return PrepareBuilder().challenges_; }
      }
      public int ChallengesCount {
        get { return result.ChallengesCount; }
      }
      public global::bgs.protocol.challenge.v1.Challenge GetChallenges(int index) {
        return result.GetChallenges(index);
      }
      public Builder SetChallenges(int index, global::bgs.protocol.challenge.v1.Challenge value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.challenges_[index] = value;
        return this;
      }
      public Builder SetChallenges(int index, global::bgs.protocol.challenge.v1.Challenge.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.challenges_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddChallenges(global::bgs.protocol.challenge.v1.Challenge value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.challenges_.Add(value);
        return this;
      }
      public Builder AddChallenges(global::bgs.protocol.challenge.v1.Challenge.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.challenges_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeChallenges(scg::IEnumerable<global::bgs.protocol.challenge.v1.Challenge> values) {
        PrepareBuilder();
        result.challenges_.Add(values);
        return this;
      }
      public Builder ClearChallenges() {
        PrepareBuilder();
        result.challenges_.Clear();
        return this;
      }
      
      public bool HasContext {
        get { return result.hasContext; }
      }
      public uint Context {
        get { return result.Context; }
        set { SetContext(value); }
      }
      public Builder SetContext(uint value) {
        PrepareBuilder();
        result.hasContext = true;
        result.context_ = value;
        return this;
      }
      public Builder ClearContext() {
        PrepareBuilder();
        result.hasContext = false;
        result.context_ = 0;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasDeadline {
        get { return result.hasDeadline; }
      }
      public ulong Deadline {
        get { return result.Deadline; }
        set { SetDeadline(value); }
      }
      public Builder SetDeadline(ulong value) {
        PrepareBuilder();
        result.hasDeadline = true;
        result.deadline_ = value;
        return this;
      }
      public Builder ClearDeadline() {
        PrepareBuilder();
        result.hasDeadline = false;
        result.deadline_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::bgs.protocol.Attribute> AttributesList {
        get { return PrepareBuilder().attributes_; }
      }
      public int AttributesCount {
        get { return result.AttributesCount; }
      }
      public global::bgs.protocol.Attribute GetAttributes(int index) {
        return result.GetAttributes(index);
      }
      public Builder SetAttributes(int index, global::bgs.protocol.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_[index] = value;
        return this;
      }
      public Builder SetAttributes(int index, global::bgs.protocol.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttributes(global::bgs.protocol.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_.Add(value);
        return this;
      }
      public Builder AddAttributes(global::bgs.protocol.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttributes(scg::IEnumerable<global::bgs.protocol.Attribute> values) {
        PrepareBuilder();
        result.attributes_.Add(values);
        return this;
      }
      public Builder ClearAttributes() {
        PrepareBuilder();
        result.attributes_.Clear();
        return this;
      }
      
      public bool HasGameAccountId {
       get { return result.hasGameAccountId; }
      }
      public global::bgs.protocol.EntityId GameAccountId {
        get { return result.GameAccountId; }
        set { SetGameAccountId(value); }
      }
      public Builder SetGameAccountId(global::bgs.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder SetGameAccountId(global::bgs.protocol.EntityId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccountId(global::bgs.protocol.EntityId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccountId &&
            result.gameAccountId_ != global::bgs.protocol.EntityId.DefaultInstance) {
            result.gameAccountId_ = global::bgs.protocol.EntityId.CreateBuilder(result.gameAccountId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder ClearGameAccountId() {
        PrepareBuilder();
        result.hasGameAccountId = false;
        result.gameAccountId_ = null;
        return this;
      }
    }
    static ChallengeUserRequest() {
      object.ReferenceEquals(global::bgs.protocol.challenge.v1.Proto.ChallengeService.Descriptor, null);
    }
  }
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChallengeResultRequest : pb::GeneratedMessage<ChallengeResultRequest, ChallengeResultRequest.Builder> {
    private ChallengeResultRequest() { }
    private static readonly ChallengeResultRequest defaultInstance = new ChallengeResultRequest().MakeReadOnly();
    public static ChallengeResultRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChallengeResultRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChallengeResultRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengeResultRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChallengeResultRequest, ChallengeResultRequest.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengeResultRequest__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private uint type_;
    public bool HasType {
      get { return hasType; }
    }
    public uint Type {
      get { return type_; }
    }
    
    public const int ErrorIdFieldNumber = 3;
    private bool hasErrorId;
    private uint errorId_;
    public bool HasErrorId {
      get { return hasErrorId; }
    }
    public uint ErrorId {
      get { return errorId_; }
    }
    
    public const int AnswerFieldNumber = 4;
    private bool hasAnswer;
    private pb::ByteString answer_ = pb::ByteString.Empty;
    public bool HasAnswer {
      get { return hasAnswer; }
    }
    public pb::ByteString Answer {
      get { return answer_; }
    }
    
    public static ChallengeResultRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeResultRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeResultRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeResultRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeResultRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeResultRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChallengeResultRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChallengeResultRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChallengeResultRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeResultRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChallengeResultRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChallengeResultRequest prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChallengeResultRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChallengeResultRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChallengeResultRequest result;
      
      private ChallengeResultRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ChallengeResultRequest original = result;
          result = new ChallengeResultRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChallengeResultRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.challenge.v1.ChallengeResultRequest.Descriptor; }
      }
      
      public override ChallengeResultRequest DefaultInstanceForType {
        get { return global::bgs.protocol.challenge.v1.ChallengeResultRequest.DefaultInstance; }
      }
      
      public override ChallengeResultRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public uint Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(uint value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasErrorId {
        get { return result.hasErrorId; }
      }
      public uint ErrorId {
        get { return result.ErrorId; }
        set { SetErrorId(value); }
      }
      public Builder SetErrorId(uint value) {
        PrepareBuilder();
        result.hasErrorId = true;
        result.errorId_ = value;
        return this;
      }
      public Builder ClearErrorId() {
        PrepareBuilder();
        result.hasErrorId = false;
        result.errorId_ = 0;
        return this;
      }
      
      public bool HasAnswer {
        get { return result.hasAnswer; }
      }
      public pb::ByteString Answer {
        get { return result.Answer; }
        set { SetAnswer(value); }
      }
      public Builder SetAnswer(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAnswer = true;
        result.answer_ = value;
        return this;
      }
      public Builder ClearAnswer() {
        PrepareBuilder();
        result.hasAnswer = false;
        result.answer_ = pb::ByteString.Empty;
        return this;
      }
    }
    static ChallengeResultRequest() {
      object.ReferenceEquals(global::bgs.protocol.challenge.v1.Proto.ChallengeService.Descriptor, null);
    }
  }
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChallengeExternalRequest : pb::GeneratedMessage<ChallengeExternalRequest, ChallengeExternalRequest.Builder> {
    private ChallengeExternalRequest() { }
    private static readonly ChallengeExternalRequest defaultInstance = new ChallengeExternalRequest().MakeReadOnly();
    public static ChallengeExternalRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChallengeExternalRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChallengeExternalRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengeExternalRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChallengeExternalRequest, ChallengeExternalRequest.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengeExternalRequest__FieldAccessorTable; }
    }
    
    public const int RequestTokenFieldNumber = 1;
    private bool hasRequestToken;
    private string requestToken_ = "";
    public bool HasRequestToken {
      get { return hasRequestToken; }
    }
    public string RequestToken {
      get { return requestToken_; }
    }
    
    public const int PayloadTypeFieldNumber = 2;
    private bool hasPayloadType;
    private string payloadType_ = "";
    public bool HasPayloadType {
      get { return hasPayloadType; }
    }
    public string PayloadType {
      get { return payloadType_; }
    }
    
    public const int PayloadFieldNumber = 3;
    private bool hasPayload;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    public bool HasPayload {
      get { return hasPayload; }
    }
    public pb::ByteString Payload {
      get { return payload_; }
    }
    
    public static ChallengeExternalRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeExternalRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeExternalRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeExternalRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeExternalRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeExternalRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChallengeExternalRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChallengeExternalRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChallengeExternalRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeExternalRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChallengeExternalRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChallengeExternalRequest prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChallengeExternalRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChallengeExternalRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChallengeExternalRequest result;
      
      private ChallengeExternalRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ChallengeExternalRequest original = result;
          result = new ChallengeExternalRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChallengeExternalRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.challenge.v1.ChallengeExternalRequest.Descriptor; }
      }
      
      public override ChallengeExternalRequest DefaultInstanceForType {
        get { return global::bgs.protocol.challenge.v1.ChallengeExternalRequest.DefaultInstance; }
      }
      
      public override ChallengeExternalRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      
      public bool HasRequestToken {
        get { return result.hasRequestToken; }
      }
      public string RequestToken {
        get { return result.RequestToken; }
        set { SetRequestToken(value); }
      }
      public Builder SetRequestToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequestToken = true;
        result.requestToken_ = value;
        return this;
      }
      public Builder ClearRequestToken() {
        PrepareBuilder();
        result.hasRequestToken = false;
        result.requestToken_ = "";
        return this;
      }
      
      public bool HasPayloadType {
        get { return result.hasPayloadType; }
      }
      public string PayloadType {
        get { return result.PayloadType; }
        set { SetPayloadType(value); }
      }
      public Builder SetPayloadType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPayloadType = true;
        result.payloadType_ = value;
        return this;
      }
      public Builder ClearPayloadType() {
        PrepareBuilder();
        result.hasPayloadType = false;
        result.payloadType_ = "";
        return this;
      }
      
      public bool HasPayload {
        get { return result.hasPayload; }
      }
      public pb::ByteString Payload {
        get { return result.Payload; }
        set { SetPayload(value); }
      }
      public Builder SetPayload(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPayload = true;
        result.payload_ = value;
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.hasPayload = false;
        result.payload_ = pb::ByteString.Empty;
        return this;
      }
    }
    static ChallengeExternalRequest() {
      object.ReferenceEquals(global::bgs.protocol.challenge.v1.Proto.ChallengeService.Descriptor, null);
    }
  }
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChallengeExternalResult : pb::GeneratedMessage<ChallengeExternalResult, ChallengeExternalResult.Builder> {
    private ChallengeExternalResult() { }
    private static readonly ChallengeExternalResult defaultInstance = new ChallengeExternalResult().MakeReadOnly();
    public static ChallengeExternalResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChallengeExternalResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChallengeExternalResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengeExternalResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChallengeExternalResult, ChallengeExternalResult.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.challenge.v1.Proto.ChallengeService.internal__static_bgs_protocol_challenge_v1_ChallengeExternalResult__FieldAccessorTable; }
    }
    
    public const int RequestTokenFieldNumber = 1;
    private bool hasRequestToken;
    private string requestToken_ = "";
    public bool HasRequestToken {
      get { return hasRequestToken; }
    }
    public string RequestToken {
      get { return requestToken_; }
    }
    
    public const int PassedFieldNumber = 2;
    private bool hasPassed;
    private bool passed_ = true;
    public bool HasPassed {
      get { return hasPassed; }
    }
    public bool Passed {
      get { return passed_; }
    }
    
    public static ChallengeExternalResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeExternalResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeExternalResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChallengeExternalResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChallengeExternalResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeExternalResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChallengeExternalResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChallengeExternalResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChallengeExternalResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChallengeExternalResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChallengeExternalResult MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChallengeExternalResult prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChallengeExternalResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChallengeExternalResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChallengeExternalResult result;
      
      private ChallengeExternalResult PrepareBuilder() {
        if (resultIsReadOnly) {
          ChallengeExternalResult original = result;
          result = new ChallengeExternalResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChallengeExternalResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.challenge.v1.ChallengeExternalResult.Descriptor; }
      }
      
      public override ChallengeExternalResult DefaultInstanceForType {
        get { return global::bgs.protocol.challenge.v1.ChallengeExternalResult.DefaultInstance; }
      }
      
      public override ChallengeExternalResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      
      public bool HasRequestToken {
        get { return result.hasRequestToken; }
      }
      public string RequestToken {
        get { return result.RequestToken; }
        set { SetRequestToken(value); }
      }
      public Builder SetRequestToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequestToken = true;
        result.requestToken_ = value;
        return this;
      }
      public Builder ClearRequestToken() {
        PrepareBuilder();
        result.hasRequestToken = false;
        result.requestToken_ = "";
        return this;
      }
      
      public bool HasPassed {
        get { return result.hasPassed; }
      }
      public bool Passed {
        get { return result.Passed; }
        set { SetPassed(value); }
      }
      public Builder SetPassed(bool value) {
        PrepareBuilder();
        result.hasPassed = true;
        result.passed_ = value;
        return this;
      }
      public Builder ClearPassed() {
        PrepareBuilder();
        result.hasPassed = false;
        result.passed_ = true;
        return this;
      }
    }
    static ChallengeExternalResult() {
      object.ReferenceEquals(global::bgs.protocol.challenge.v1.Proto.ChallengeService.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class ChallengeService : pb::IService {
    public abstract void ChallengePicked(
        pb::IRpcController controller,
        global::bgs.protocol.challenge.v1.ChallengePickedRequest request,
        global::System.Action<global::bgs.protocol.challenge.v1.ChallengePickedResponse> done);
    public abstract void ChallengeAnswered(
        pb::IRpcController controller,
        global::bgs.protocol.challenge.v1.ChallengeAnsweredRequest request,
        global::System.Action<global::bgs.protocol.challenge.v1.ChallengeAnsweredResponse> done);
    public abstract void ChallengeCancelled(
        pb::IRpcController controller,
        global::bgs.protocol.challenge.v1.ChallengeCancelledRequest request,
        global::System.Action<global::bgs.protocol.NoData> done);
    public abstract void SendChallengeToUser(
        pb::IRpcController controller,
        global::bgs.protocol.challenge.v1.SendChallengeToUserRequest request,
        global::System.Action<global::bgs.protocol.challenge.v1.SendChallengeToUserResponse> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.ChallengeService.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.ChallengePicked(controller, (global::bgs.protocol.challenge.v1.ChallengePickedRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.challenge.v1.ChallengePickedResponse>(
              done));
          return;
        case 1:
          this.ChallengeAnswered(controller, (global::bgs.protocol.challenge.v1.ChallengeAnsweredRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.challenge.v1.ChallengeAnsweredResponse>(
              done));
          return;
        case 2:
          this.ChallengeCancelled(controller, (global::bgs.protocol.challenge.v1.ChallengeCancelledRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NoData>(
              done));
          return;
        case 3:
          this.SendChallengeToUser(controller, (global::bgs.protocol.challenge.v1.SendChallengeToUserRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.challenge.v1.SendChallengeToUserResponse>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bgs.protocol.challenge.v1.ChallengePickedRequest.DefaultInstance;
        case 1:
          return global::bgs.protocol.challenge.v1.ChallengeAnsweredRequest.DefaultInstance;
        case 2:
          return global::bgs.protocol.challenge.v1.ChallengeCancelledRequest.DefaultInstance;
        case 3:
          return global::bgs.protocol.challenge.v1.SendChallengeToUserRequest.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bgs.protocol.challenge.v1.ChallengePickedResponse.DefaultInstance;
        case 1:
          return global::bgs.protocol.challenge.v1.ChallengeAnsweredResponse.DefaultInstance;
        case 2:
          return global::bgs.protocol.NoData.DefaultInstance;
        case 3:
          return global::bgs.protocol.challenge.v1.SendChallengeToUserResponse.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bgs.protocol.challenge.v1.ChallengeService {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void ChallengePicked(
          pb::IRpcController controller,
          global::bgs.protocol.challenge.v1.ChallengePickedRequest request,
          global::System.Action<global::bgs.protocol.challenge.v1.ChallengePickedResponse> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bgs.protocol.challenge.v1.ChallengePickedResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.challenge.v1.ChallengePickedResponse, global::bgs.protocol.challenge.v1.ChallengePickedResponse.Builder>(done, global::bgs.protocol.challenge.v1.ChallengePickedResponse.DefaultInstance));
      }
      
      public override void ChallengeAnswered(
          pb::IRpcController controller,
          global::bgs.protocol.challenge.v1.ChallengeAnsweredRequest request,
          global::System.Action<global::bgs.protocol.challenge.v1.ChallengeAnsweredResponse> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bgs.protocol.challenge.v1.ChallengeAnsweredResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.challenge.v1.ChallengeAnsweredResponse, global::bgs.protocol.challenge.v1.ChallengeAnsweredResponse.Builder>(done, global::bgs.protocol.challenge.v1.ChallengeAnsweredResponse.DefaultInstance));
      }
      
      public override void ChallengeCancelled(
          pb::IRpcController controller,
          global::bgs.protocol.challenge.v1.ChallengeCancelledRequest request,
          global::System.Action<global::bgs.protocol.NoData> done) {
        channel.CallMethod(Descriptor.Methods[2],
            controller, request, global::bgs.protocol.NoData.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NoData, global::bgs.protocol.NoData.Builder>(done, global::bgs.protocol.NoData.DefaultInstance));
      }
      
      public override void SendChallengeToUser(
          pb::IRpcController controller,
          global::bgs.protocol.challenge.v1.SendChallengeToUserRequest request,
          global::System.Action<global::bgs.protocol.challenge.v1.SendChallengeToUserResponse> done) {
        channel.CallMethod(Descriptor.Methods[3],
            controller, request, global::bgs.protocol.challenge.v1.SendChallengeToUserResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.challenge.v1.SendChallengeToUserResponse, global::bgs.protocol.challenge.v1.SendChallengeToUserResponse.Builder>(done, global::bgs.protocol.challenge.v1.SendChallengeToUserResponse.DefaultInstance));
      }
    }
  }
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class ChallengeListener : pb::IService {
    public abstract void OnChallengeUser(
        pb::IRpcController controller,
        global::bgs.protocol.challenge.v1.ChallengeUserRequest request,
        global::System.Action<global::bgs.protocol.NO_RESPONSE> done);
    public abstract void OnChallengeResult(
        pb::IRpcController controller,
        global::bgs.protocol.challenge.v1.ChallengeResultRequest request,
        global::System.Action<global::bgs.protocol.NO_RESPONSE> done);
    public abstract void OnExternalChallenge(
        pb::IRpcController controller,
        global::bgs.protocol.challenge.v1.ChallengeExternalRequest request,
        global::System.Action<global::bgs.protocol.NO_RESPONSE> done);
    public abstract void OnExternalChallengeResult(
        pb::IRpcController controller,
        global::bgs.protocol.challenge.v1.ChallengeExternalResult request,
        global::System.Action<global::bgs.protocol.NO_RESPONSE> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.ChallengeService.Descriptor.Services[1]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.OnChallengeUser(controller, (global::bgs.protocol.challenge.v1.ChallengeUserRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NO_RESPONSE>(
              done));
          return;
        case 1:
          this.OnChallengeResult(controller, (global::bgs.protocol.challenge.v1.ChallengeResultRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NO_RESPONSE>(
              done));
          return;
        case 2:
          this.OnExternalChallenge(controller, (global::bgs.protocol.challenge.v1.ChallengeExternalRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NO_RESPONSE>(
              done));
          return;
        case 3:
          this.OnExternalChallengeResult(controller, (global::bgs.protocol.challenge.v1.ChallengeExternalResult) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NO_RESPONSE>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bgs.protocol.challenge.v1.ChallengeUserRequest.DefaultInstance;
        case 1:
          return global::bgs.protocol.challenge.v1.ChallengeResultRequest.DefaultInstance;
        case 2:
          return global::bgs.protocol.challenge.v1.ChallengeExternalRequest.DefaultInstance;
        case 3:
          return global::bgs.protocol.challenge.v1.ChallengeExternalResult.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bgs.protocol.NO_RESPONSE.DefaultInstance;
        case 1:
          return global::bgs.protocol.NO_RESPONSE.DefaultInstance;
        case 2:
          return global::bgs.protocol.NO_RESPONSE.DefaultInstance;
        case 3:
          return global::bgs.protocol.NO_RESPONSE.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bgs.protocol.challenge.v1.ChallengeListener {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void OnChallengeUser(
          pb::IRpcController controller,
          global::bgs.protocol.challenge.v1.ChallengeUserRequest request,
          global::System.Action<global::bgs.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bgs.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NO_RESPONSE, global::bgs.protocol.NO_RESPONSE.Builder>(done, global::bgs.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void OnChallengeResult(
          pb::IRpcController controller,
          global::bgs.protocol.challenge.v1.ChallengeResultRequest request,
          global::System.Action<global::bgs.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bgs.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NO_RESPONSE, global::bgs.protocol.NO_RESPONSE.Builder>(done, global::bgs.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void OnExternalChallenge(
          pb::IRpcController controller,
          global::bgs.protocol.challenge.v1.ChallengeExternalRequest request,
          global::System.Action<global::bgs.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[2],
            controller, request, global::bgs.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NO_RESPONSE, global::bgs.protocol.NO_RESPONSE.Builder>(done, global::bgs.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void OnExternalChallengeResult(
          pb::IRpcController controller,
          global::bgs.protocol.challenge.v1.ChallengeExternalResult request,
          global::System.Action<global::bgs.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[3],
            controller, request, global::bgs.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NO_RESPONSE, global::bgs.protocol.NO_RESPONSE.Builder>(done, global::bgs.protocol.NO_RESPONSE.DefaultInstance));
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
