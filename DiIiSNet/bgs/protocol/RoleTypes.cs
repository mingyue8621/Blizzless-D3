// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bgs.protocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class RoleTypes {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_Role__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.Role, global::bgs.protocol.Role.Builder> internal__static_bgs_protocol_Role__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_RoleState__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.RoleState, global::bgs.protocol.RoleState.Builder> internal__static_bgs_protocol_RoleState__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static RoleTypes() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CiJiZ3MvbG93L3BiL2NsaWVudC9yb2xlX3R5cGVzLnByb3RvEgxiZ3MucHJv" + 
          "dG9jb2wipgIKBFJvbGUSDgoCaWQYASACKA1SAmlkEhIKBG5hbWUYAiACKAlS" + 
          "BG5hbWUSHAoJcHJpdmlsZWdlGAMgAygJUglwcml2aWxlZ2USKwoPYXNzaWdu" + 
          "YWJsZV9yb2xlGAQgAygNQgIQAVIOYXNzaWduYWJsZVJvbGUSGgoIcmVxdWly" + 
          "ZWQYBSABKAhSCHJlcXVpcmVkEhYKBnVuaXF1ZRgGIAEoCFIGdW5pcXVlEicK" + 
          "D3JlbGVnYXRpb25fcm9sZRgHIAEoDVIOcmVsZWdhdGlvblJvbGUSJwoNa2lj" + 
          "a2FibGVfcm9sZRgJIAMoDUICEAFSDGtpY2thYmxlUm9sZRIpCg5yZW1vdmFi" + 
          "bGVfcm9sZRgKIAMoDUICEAFSDXJlbW92YWJsZVJvbGUirAIKCVJvbGVTdGF0" + 
          "ZRISCgRuYW1lGAIgASgJUgRuYW1lEisKD2Fzc2lnbmFibGVfcm9sZRgEIAMo" + 
          "DUICEAFSDmFzc2lnbmFibGVSb2xlEhoKCHJlcXVpcmVkGAUgASgIUghyZXF1" + 
          "aXJlZBIWCgZ1bmlxdWUYBiABKAhSBnVuaXF1ZRInCg9yZWxlZ2F0aW9uX3Jv" + 
          "bGUYByABKA1SDnJlbGVnYXRpb25Sb2xlEicKDWtpY2thYmxlX3JvbGUYCSAD" + 
          "KA1CAhABUgxraWNrYWJsZVJvbGUSKQoOcmVtb3ZhYmxlX3JvbGUYCiADKA1C" + 
          "AhABUg1yZW1vdmFibGVSb2xlEi0KEG1lbnRpb25hYmxlX3JvbGUYCyADKA1C" + 
          "AhABUg9tZW50aW9uYWJsZVJvbGU=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bgs_protocol_Role__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bgs_protocol_Role__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.Role, global::bgs.protocol.Role.Builder>(internal__static_bgs_protocol_Role__Descriptor,
                new string[] { "Id", "Name", "Privilege", "AssignableRole", "Required", "Unique", "RelegationRole", "KickableRole", "RemovableRole", });
        internal__static_bgs_protocol_RoleState__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bgs_protocol_RoleState__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.RoleState, global::bgs.protocol.RoleState.Builder>(internal__static_bgs_protocol_RoleState__Descriptor,
                new string[] { "Name", "AssignableRole", "Required", "Unique", "RelegationRole", "KickableRole", "RemovableRole", "MentionableRole", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Role : pb::GeneratedMessage<Role, Role.Builder> {
    private Role() { }
    private static readonly Role defaultInstance = new Role().MakeReadOnly();
    private static readonly string[] _roleFieldNames = new string[] { "assignable_role", "id", "kickable_role", "name", "privilege", "relegation_role", "removable_role", "required", "unique" };
    private static readonly uint[] _roleFieldTags = new uint[] { 34, 8, 74, 18, 26, 56, 82, 40, 48 };
    public static Role DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Role DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Role ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.RoleTypes.internal__static_bgs_protocol_Role__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Role, Role.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.RoleTypes.internal__static_bgs_protocol_Role__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int PrivilegeFieldNumber = 3;
    private pbc::PopsicleList<string> privilege_ = new pbc::PopsicleList<string>();
    public scg::IList<string> PrivilegeList {
      get { return pbc::Lists.AsReadOnly(privilege_); }
    }
    public int PrivilegeCount {
      get { return privilege_.Count; }
    }
    public string GetPrivilege(int index) {
      return privilege_[index];
    }
    
    public const int AssignableRoleFieldNumber = 4;
    private int assignableRoleMemoizedSerializedSize;
    private pbc::PopsicleList<uint> assignableRole_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> AssignableRoleList {
      get { return pbc::Lists.AsReadOnly(assignableRole_); }
    }
    public int AssignableRoleCount {
      get { return assignableRole_.Count; }
    }
    public uint GetAssignableRole(int index) {
      return assignableRole_[index];
    }
    
    public const int RequiredFieldNumber = 5;
    private bool hasRequired;
    private bool required_;
    public bool HasRequired {
      get { return hasRequired; }
    }
    public bool Required {
      get { return required_; }
    }
    
    public const int UniqueFieldNumber = 6;
    private bool hasUnique;
    private bool unique_;
    public bool HasUnique {
      get { return hasUnique; }
    }
    public bool Unique {
      get { return unique_; }
    }
    
    public const int RelegationRoleFieldNumber = 7;
    private bool hasRelegationRole;
    private uint relegationRole_;
    public bool HasRelegationRole {
      get { return hasRelegationRole; }
    }
    public uint RelegationRole {
      get { return relegationRole_; }
    }
    
    public const int KickableRoleFieldNumber = 9;
    private int kickableRoleMemoizedSerializedSize;
    private pbc::PopsicleList<uint> kickableRole_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> KickableRoleList {
      get { return pbc::Lists.AsReadOnly(kickableRole_); }
    }
    public int KickableRoleCount {
      get { return kickableRole_.Count; }
    }
    public uint GetKickableRole(int index) {
      return kickableRole_[index];
    }
    
    public const int RemovableRoleFieldNumber = 10;
    private int removableRoleMemoizedSerializedSize;
    private pbc::PopsicleList<uint> removableRole_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> RemovableRoleList {
      get { return pbc::Lists.AsReadOnly(removableRole_); }
    }
    public int RemovableRoleCount {
      get { return removableRole_.Count; }
    }
    public uint GetRemovableRole(int index) {
      return removableRole_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _roleFieldNames;
      if (hasId) {
        output.WriteUInt32(1, field_names[1], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[3], Name);
      }
      if (privilege_.Count > 0) {
        output.WriteStringArray(3, field_names[4], privilege_);
      }
      if (assignableRole_.Count > 0) {
        output.WritePackedUInt32Array(4, field_names[0], assignableRoleMemoizedSerializedSize, assignableRole_);
      }
      if (hasRequired) {
        output.WriteBool(5, field_names[7], Required);
      }
      if (hasUnique) {
        output.WriteBool(6, field_names[8], Unique);
      }
      if (hasRelegationRole) {
        output.WriteUInt32(7, field_names[5], RelegationRole);
      }
      if (kickableRole_.Count > 0) {
        output.WritePackedUInt32Array(9, field_names[2], kickableRoleMemoizedSerializedSize, kickableRole_);
      }
      if (removableRole_.Count > 0) {
        output.WritePackedUInt32Array(10, field_names[6], removableRoleMemoizedSerializedSize, removableRole_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        {
          int dataSize = 0;
          foreach (string element in PrivilegeList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * privilege_.Count;
        }
        {
          int dataSize = 0;
          foreach (uint element in AssignableRoleList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (assignableRole_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          assignableRoleMemoizedSerializedSize = dataSize;
        }
        if (hasRequired) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, Required);
        }
        if (hasUnique) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, Unique);
        }
        if (hasRelegationRole) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, RelegationRole);
        }
        {
          int dataSize = 0;
          foreach (uint element in KickableRoleList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (kickableRole_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          kickableRoleMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          foreach (uint element in RemovableRoleList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (removableRole_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          removableRoleMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Role ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Role ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Role ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Role ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Role ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Role ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Role ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Role ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Role ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Role ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Role MakeReadOnly() {
      privilege_.MakeReadOnly();
      assignableRole_.MakeReadOnly();
      kickableRole_.MakeReadOnly();
      removableRole_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Role prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Role, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Role cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Role result;
      
      private Role PrepareBuilder() {
        if (resultIsReadOnly) {
          Role original = result;
          result = new Role();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Role MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.Role.Descriptor; }
      }
      
      public override Role DefaultInstanceForType {
        get { return global::bgs.protocol.Role.DefaultInstance; }
      }
      
      public override Role BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Role) {
          return MergeFrom((Role) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Role other) {
        if (other == global::bgs.protocol.Role.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.privilege_.Count != 0) {
          result.privilege_.Add(other.privilege_);
        }
        if (other.assignableRole_.Count != 0) {
          result.assignableRole_.Add(other.assignableRole_);
        }
        if (other.HasRequired) {
          Required = other.Required;
        }
        if (other.HasUnique) {
          Unique = other.Unique;
        }
        if (other.HasRelegationRole) {
          RelegationRole = other.RelegationRole;
        }
        if (other.kickableRole_.Count != 0) {
          result.kickableRole_.Add(other.kickableRole_);
        }
        if (other.removableRole_.Count != 0) {
          result.removableRole_.Add(other.removableRole_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_roleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _roleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadUInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.privilege_);
              break;
            }
            case 34:
            case 32: {
              input.ReadUInt32Array(tag, field_name, result.assignableRole_);
              break;
            }
            case 40: {
              result.hasRequired = input.ReadBool(ref result.required_);
              break;
            }
            case 48: {
              result.hasUnique = input.ReadBool(ref result.unique_);
              break;
            }
            case 56: {
              result.hasRelegationRole = input.ReadUInt32(ref result.relegationRole_);
              break;
            }
            case 74:
            case 72: {
              input.ReadUInt32Array(tag, field_name, result.kickableRole_);
              break;
            }
            case 82:
            case 80: {
              input.ReadUInt32Array(tag, field_name, result.removableRole_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> PrivilegeList {
        get { return PrepareBuilder().privilege_; }
      }
      public int PrivilegeCount {
        get { return result.PrivilegeCount; }
      }
      public string GetPrivilege(int index) {
        return result.GetPrivilege(index);
      }
      public Builder SetPrivilege(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.privilege_[index] = value;
        return this;
      }
      public Builder AddPrivilege(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.privilege_.Add(value);
        return this;
      }
      public Builder AddRangePrivilege(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.privilege_.Add(values);
        return this;
      }
      public Builder ClearPrivilege() {
        PrepareBuilder();
        result.privilege_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<uint> AssignableRoleList {
        get { return PrepareBuilder().assignableRole_; }
      }
      public int AssignableRoleCount {
        get { return result.AssignableRoleCount; }
      }
      public uint GetAssignableRole(int index) {
        return result.GetAssignableRole(index);
      }
      public Builder SetAssignableRole(int index, uint value) {
        PrepareBuilder();
        result.assignableRole_[index] = value;
        return this;
      }
      public Builder AddAssignableRole(uint value) {
        PrepareBuilder();
        result.assignableRole_.Add(value);
        return this;
      }
      public Builder AddRangeAssignableRole(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.assignableRole_.Add(values);
        return this;
      }
      public Builder ClearAssignableRole() {
        PrepareBuilder();
        result.assignableRole_.Clear();
        return this;
      }
      
      public bool HasRequired {
        get { return result.hasRequired; }
      }
      public bool Required {
        get { return result.Required; }
        set { SetRequired(value); }
      }
      public Builder SetRequired(bool value) {
        PrepareBuilder();
        result.hasRequired = true;
        result.required_ = value;
        return this;
      }
      public Builder ClearRequired() {
        PrepareBuilder();
        result.hasRequired = false;
        result.required_ = false;
        return this;
      }
      
      public bool HasUnique {
        get { return result.hasUnique; }
      }
      public bool Unique {
        get { return result.Unique; }
        set { SetUnique(value); }
      }
      public Builder SetUnique(bool value) {
        PrepareBuilder();
        result.hasUnique = true;
        result.unique_ = value;
        return this;
      }
      public Builder ClearUnique() {
        PrepareBuilder();
        result.hasUnique = false;
        result.unique_ = false;
        return this;
      }
      
      public bool HasRelegationRole {
        get { return result.hasRelegationRole; }
      }
      public uint RelegationRole {
        get { return result.RelegationRole; }
        set { SetRelegationRole(value); }
      }
      public Builder SetRelegationRole(uint value) {
        PrepareBuilder();
        result.hasRelegationRole = true;
        result.relegationRole_ = value;
        return this;
      }
      public Builder ClearRelegationRole() {
        PrepareBuilder();
        result.hasRelegationRole = false;
        result.relegationRole_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<uint> KickableRoleList {
        get { return PrepareBuilder().kickableRole_; }
      }
      public int KickableRoleCount {
        get { return result.KickableRoleCount; }
      }
      public uint GetKickableRole(int index) {
        return result.GetKickableRole(index);
      }
      public Builder SetKickableRole(int index, uint value) {
        PrepareBuilder();
        result.kickableRole_[index] = value;
        return this;
      }
      public Builder AddKickableRole(uint value) {
        PrepareBuilder();
        result.kickableRole_.Add(value);
        return this;
      }
      public Builder AddRangeKickableRole(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.kickableRole_.Add(values);
        return this;
      }
      public Builder ClearKickableRole() {
        PrepareBuilder();
        result.kickableRole_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<uint> RemovableRoleList {
        get { return PrepareBuilder().removableRole_; }
      }
      public int RemovableRoleCount {
        get { return result.RemovableRoleCount; }
      }
      public uint GetRemovableRole(int index) {
        return result.GetRemovableRole(index);
      }
      public Builder SetRemovableRole(int index, uint value) {
        PrepareBuilder();
        result.removableRole_[index] = value;
        return this;
      }
      public Builder AddRemovableRole(uint value) {
        PrepareBuilder();
        result.removableRole_.Add(value);
        return this;
      }
      public Builder AddRangeRemovableRole(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.removableRole_.Add(values);
        return this;
      }
      public Builder ClearRemovableRole() {
        PrepareBuilder();
        result.removableRole_.Clear();
        return this;
      }
    }
    static Role() {
      object.ReferenceEquals(global::bgs.protocol.RoleTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RoleState : pb::GeneratedMessage<RoleState, RoleState.Builder> {
    private RoleState() { }
    private static readonly RoleState defaultInstance = new RoleState().MakeReadOnly();
    private static readonly string[] _roleStateFieldNames = new string[] { "assignable_role", "kickable_role", "mentionable_role", "name", "relegation_role", "removable_role", "required", "unique" };
    private static readonly uint[] _roleStateFieldTags = new uint[] { 34, 74, 90, 18, 56, 82, 40, 48 };
    public static RoleState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RoleState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RoleState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.RoleTypes.internal__static_bgs_protocol_RoleState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RoleState, RoleState.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.RoleTypes.internal__static_bgs_protocol_RoleState__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int AssignableRoleFieldNumber = 4;
    private int assignableRoleMemoizedSerializedSize;
    private pbc::PopsicleList<uint> assignableRole_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> AssignableRoleList {
      get { return pbc::Lists.AsReadOnly(assignableRole_); }
    }
    public int AssignableRoleCount {
      get { return assignableRole_.Count; }
    }
    public uint GetAssignableRole(int index) {
      return assignableRole_[index];
    }
    
    public const int RequiredFieldNumber = 5;
    private bool hasRequired;
    private bool required_;
    public bool HasRequired {
      get { return hasRequired; }
    }
    public bool Required {
      get { return required_; }
    }
    
    public const int UniqueFieldNumber = 6;
    private bool hasUnique;
    private bool unique_;
    public bool HasUnique {
      get { return hasUnique; }
    }
    public bool Unique {
      get { return unique_; }
    }
    
    public const int RelegationRoleFieldNumber = 7;
    private bool hasRelegationRole;
    private uint relegationRole_;
    public bool HasRelegationRole {
      get { return hasRelegationRole; }
    }
    public uint RelegationRole {
      get { return relegationRole_; }
    }
    
    public const int KickableRoleFieldNumber = 9;
    private int kickableRoleMemoizedSerializedSize;
    private pbc::PopsicleList<uint> kickableRole_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> KickableRoleList {
      get { return pbc::Lists.AsReadOnly(kickableRole_); }
    }
    public int KickableRoleCount {
      get { return kickableRole_.Count; }
    }
    public uint GetKickableRole(int index) {
      return kickableRole_[index];
    }
    
    public const int RemovableRoleFieldNumber = 10;
    private int removableRoleMemoizedSerializedSize;
    private pbc::PopsicleList<uint> removableRole_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> RemovableRoleList {
      get { return pbc::Lists.AsReadOnly(removableRole_); }
    }
    public int RemovableRoleCount {
      get { return removableRole_.Count; }
    }
    public uint GetRemovableRole(int index) {
      return removableRole_[index];
    }
    
    public const int MentionableRoleFieldNumber = 11;
    private int mentionableRoleMemoizedSerializedSize;
    private pbc::PopsicleList<uint> mentionableRole_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> MentionableRoleList {
      get { return pbc::Lists.AsReadOnly(mentionableRole_); }
    }
    public int MentionableRoleCount {
      get { return mentionableRole_.Count; }
    }
    public uint GetMentionableRole(int index) {
      return mentionableRole_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _roleStateFieldNames;
      if (hasName) {
        output.WriteString(2, field_names[3], Name);
      }
      if (assignableRole_.Count > 0) {
        output.WritePackedUInt32Array(4, field_names[0], assignableRoleMemoizedSerializedSize, assignableRole_);
      }
      if (hasRequired) {
        output.WriteBool(5, field_names[6], Required);
      }
      if (hasUnique) {
        output.WriteBool(6, field_names[7], Unique);
      }
      if (hasRelegationRole) {
        output.WriteUInt32(7, field_names[4], RelegationRole);
      }
      if (kickableRole_.Count > 0) {
        output.WritePackedUInt32Array(9, field_names[1], kickableRoleMemoizedSerializedSize, kickableRole_);
      }
      if (removableRole_.Count > 0) {
        output.WritePackedUInt32Array(10, field_names[5], removableRoleMemoizedSerializedSize, removableRole_);
      }
      if (mentionableRole_.Count > 0) {
        output.WritePackedUInt32Array(11, field_names[2], mentionableRoleMemoizedSerializedSize, mentionableRole_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        {
          int dataSize = 0;
          foreach (uint element in AssignableRoleList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (assignableRole_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          assignableRoleMemoizedSerializedSize = dataSize;
        }
        if (hasRequired) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, Required);
        }
        if (hasUnique) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, Unique);
        }
        if (hasRelegationRole) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, RelegationRole);
        }
        {
          int dataSize = 0;
          foreach (uint element in KickableRoleList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (kickableRole_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          kickableRoleMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          foreach (uint element in RemovableRoleList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (removableRole_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          removableRoleMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          foreach (uint element in MentionableRoleList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (mentionableRole_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          mentionableRoleMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RoleState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoleState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoleState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoleState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoleState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoleState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RoleState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RoleState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RoleState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoleState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RoleState MakeReadOnly() {
      assignableRole_.MakeReadOnly();
      kickableRole_.MakeReadOnly();
      removableRole_.MakeReadOnly();
      mentionableRole_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RoleState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RoleState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RoleState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RoleState result;
      
      private RoleState PrepareBuilder() {
        if (resultIsReadOnly) {
          RoleState original = result;
          result = new RoleState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RoleState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.RoleState.Descriptor; }
      }
      
      public override RoleState DefaultInstanceForType {
        get { return global::bgs.protocol.RoleState.DefaultInstance; }
      }
      
      public override RoleState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RoleState) {
          return MergeFrom((RoleState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RoleState other) {
        if (other == global::bgs.protocol.RoleState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.assignableRole_.Count != 0) {
          result.assignableRole_.Add(other.assignableRole_);
        }
        if (other.HasRequired) {
          Required = other.Required;
        }
        if (other.HasUnique) {
          Unique = other.Unique;
        }
        if (other.HasRelegationRole) {
          RelegationRole = other.RelegationRole;
        }
        if (other.kickableRole_.Count != 0) {
          result.kickableRole_.Add(other.kickableRole_);
        }
        if (other.removableRole_.Count != 0) {
          result.removableRole_.Add(other.removableRole_);
        }
        if (other.mentionableRole_.Count != 0) {
          result.mentionableRole_.Add(other.mentionableRole_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_roleStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _roleStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 34:
            case 32: {
              input.ReadUInt32Array(tag, field_name, result.assignableRole_);
              break;
            }
            case 40: {
              result.hasRequired = input.ReadBool(ref result.required_);
              break;
            }
            case 48: {
              result.hasUnique = input.ReadBool(ref result.unique_);
              break;
            }
            case 56: {
              result.hasRelegationRole = input.ReadUInt32(ref result.relegationRole_);
              break;
            }
            case 74:
            case 72: {
              input.ReadUInt32Array(tag, field_name, result.kickableRole_);
              break;
            }
            case 82:
            case 80: {
              input.ReadUInt32Array(tag, field_name, result.removableRole_);
              break;
            }
            case 90:
            case 88: {
              input.ReadUInt32Array(tag, field_name, result.mentionableRole_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<uint> AssignableRoleList {
        get { return PrepareBuilder().assignableRole_; }
      }
      public int AssignableRoleCount {
        get { return result.AssignableRoleCount; }
      }
      public uint GetAssignableRole(int index) {
        return result.GetAssignableRole(index);
      }
      public Builder SetAssignableRole(int index, uint value) {
        PrepareBuilder();
        result.assignableRole_[index] = value;
        return this;
      }
      public Builder AddAssignableRole(uint value) {
        PrepareBuilder();
        result.assignableRole_.Add(value);
        return this;
      }
      public Builder AddRangeAssignableRole(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.assignableRole_.Add(values);
        return this;
      }
      public Builder ClearAssignableRole() {
        PrepareBuilder();
        result.assignableRole_.Clear();
        return this;
      }
      
      public bool HasRequired {
        get { return result.hasRequired; }
      }
      public bool Required {
        get { return result.Required; }
        set { SetRequired(value); }
      }
      public Builder SetRequired(bool value) {
        PrepareBuilder();
        result.hasRequired = true;
        result.required_ = value;
        return this;
      }
      public Builder ClearRequired() {
        PrepareBuilder();
        result.hasRequired = false;
        result.required_ = false;
        return this;
      }
      
      public bool HasUnique {
        get { return result.hasUnique; }
      }
      public bool Unique {
        get { return result.Unique; }
        set { SetUnique(value); }
      }
      public Builder SetUnique(bool value) {
        PrepareBuilder();
        result.hasUnique = true;
        result.unique_ = value;
        return this;
      }
      public Builder ClearUnique() {
        PrepareBuilder();
        result.hasUnique = false;
        result.unique_ = false;
        return this;
      }
      
      public bool HasRelegationRole {
        get { return result.hasRelegationRole; }
      }
      public uint RelegationRole {
        get { return result.RelegationRole; }
        set { SetRelegationRole(value); }
      }
      public Builder SetRelegationRole(uint value) {
        PrepareBuilder();
        result.hasRelegationRole = true;
        result.relegationRole_ = value;
        return this;
      }
      public Builder ClearRelegationRole() {
        PrepareBuilder();
        result.hasRelegationRole = false;
        result.relegationRole_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<uint> KickableRoleList {
        get { return PrepareBuilder().kickableRole_; }
      }
      public int KickableRoleCount {
        get { return result.KickableRoleCount; }
      }
      public uint GetKickableRole(int index) {
        return result.GetKickableRole(index);
      }
      public Builder SetKickableRole(int index, uint value) {
        PrepareBuilder();
        result.kickableRole_[index] = value;
        return this;
      }
      public Builder AddKickableRole(uint value) {
        PrepareBuilder();
        result.kickableRole_.Add(value);
        return this;
      }
      public Builder AddRangeKickableRole(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.kickableRole_.Add(values);
        return this;
      }
      public Builder ClearKickableRole() {
        PrepareBuilder();
        result.kickableRole_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<uint> RemovableRoleList {
        get { return PrepareBuilder().removableRole_; }
      }
      public int RemovableRoleCount {
        get { return result.RemovableRoleCount; }
      }
      public uint GetRemovableRole(int index) {
        return result.GetRemovableRole(index);
      }
      public Builder SetRemovableRole(int index, uint value) {
        PrepareBuilder();
        result.removableRole_[index] = value;
        return this;
      }
      public Builder AddRemovableRole(uint value) {
        PrepareBuilder();
        result.removableRole_.Add(value);
        return this;
      }
      public Builder AddRangeRemovableRole(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.removableRole_.Add(values);
        return this;
      }
      public Builder ClearRemovableRole() {
        PrepareBuilder();
        result.removableRole_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<uint> MentionableRoleList {
        get { return PrepareBuilder().mentionableRole_; }
      }
      public int MentionableRoleCount {
        get { return result.MentionableRoleCount; }
      }
      public uint GetMentionableRole(int index) {
        return result.GetMentionableRole(index);
      }
      public Builder SetMentionableRole(int index, uint value) {
        PrepareBuilder();
        result.mentionableRole_[index] = value;
        return this;
      }
      public Builder AddMentionableRole(uint value) {
        PrepareBuilder();
        result.mentionableRole_.Add(value);
        return this;
      }
      public Builder AddRangeMentionableRole(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.mentionableRole_.Add(values);
        return this;
      }
      public Builder ClearMentionableRole() {
        PrepareBuilder();
        result.mentionableRole_.Clear();
        return this;
      }
    }
    static RoleState() {
      object.ReferenceEquals(global::bgs.protocol.RoleTypes.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
