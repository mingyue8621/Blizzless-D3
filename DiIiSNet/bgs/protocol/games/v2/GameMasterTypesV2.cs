// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bgs.protocol.games.v2 {
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class GameMasterTypesV2 {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_games_v2_ConnectInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.games.v2.ConnectInfo, global::bgs.protocol.games.v2.ConnectInfo.Builder> internal__static_bgs_protocol_games_v2_ConnectInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_games_v2_GameId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.games.v2.GameId, global::bgs.protocol.games.v2.GameId.Builder> internal__static_bgs_protocol_games_v2_GameId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_games_v2_FactoryId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.games.v2.FactoryId, global::bgs.protocol.games.v2.FactoryId.Builder> internal__static_bgs_protocol_games_v2_FactoryId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_games_v2_GameHandle__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.games.v2.GameHandle, global::bgs.protocol.games.v2.GameHandle.Builder> internal__static_bgs_protocol_games_v2_GameHandle__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_games_v2_FindGameRequestId__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.games.v2.FindGameRequestId, global::bgs.protocol.games.v2.FindGameRequestId.Builder> internal__static_bgs_protocol_games_v2_FindGameRequestId__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_games_v2_QueueUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.games.v2.QueueUpdate, global::bgs.protocol.games.v2.QueueUpdate.Builder> internal__static_bgs_protocol_games_v2_QueueUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_games_v2_Assignment__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.games.v2.Assignment, global::bgs.protocol.games.v2.Assignment.Builder> internal__static_bgs_protocol_games_v2_Assignment__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static GameMasterTypesV2() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CjZiZ3MvbG93L3BiL2NsaWVudC9jbGllbnQvdjIvZ2FtZV9tYXN0ZXJfdHlw" + 
          "ZXNfdjIucHJvdG8SFWJncy5wcm90b2NvbC5nYW1lcy52MholYmdzL2xvdy9w" + 
          "Yi9jbGllbnQvYWNjb3VudF90eXBlcy5wcm90bxonYmdzL2xvdy9wYi9jbGll" + 
          "bnQvYXR0cmlidXRlX3R5cGVzLnByb3RvGiFiZ3MvbG93L3BiL2NsaWVudC9y" + 
          "cGNfdHlwZXMucHJvdG8iiwEKC0Nvbm5lY3RJbmZvEi8KB2FkZHJlc3MYASAB" + 
          "KAsyFS5iZ3MucHJvdG9jb2wuQWRkcmVzc1IHYWRkcmVzcxIUCgV0b2tlbhgC" + 
          "IAEoDFIFdG9rZW4SNQoJYXR0cmlidXRlGAMgAygLMhcuYmdzLnByb3RvY29s" + 
          "LkF0dHJpYnV0ZVIJYXR0cmlidXRlIk4KBkdhbWVJZBIOCgJpZBgBIAEoB1IC" + 
          "aWQSNAoJc2VydmVyX2lkGAIgASgLMhcuYmdzLnByb3RvY29sLlByb2Nlc3NJ" + 
          "ZFIIc2VydmVySWQiGwoJRmFjdG9yeUlkEg4KAmlkGAEgASgGUgJpZCKFAQoK" + 
          "R2FtZUhhbmRsZRI/CgpmYWN0b3J5X2lkGAEgASgLMiAuYmdzLnByb3RvY29s" + 
          "LmdhbWVzLnYyLkZhY3RvcnlJZFIJZmFjdG9yeUlkEjYKB2dhbWVfaWQYAiAB" + 
          "KAsyHS5iZ3MucHJvdG9jb2wuZ2FtZXMudjIuR2FtZUlkUgZnYW1lSWQiIwoR" + 
          "RmluZEdhbWVSZXF1ZXN0SWQSDgoCaWQYASABKAZSAmlkIoABCgtRdWV1ZVVw" + 
          "ZGF0ZRIZCghtaW5fd2FpdBgBIAEoBVIHbWluV2FpdBIZCghtYXhfd2FpdBgC" + 
          "IAEoBVIHbWF4V2FpdBIZCghhdmdfd2FpdBgDIAEoBVIHYXZnV2FpdBIgCgxz" + 
          "dGRfZGV2X3dhaXQYBCABKAVSCnN0ZERldldhaXQiegoKQXNzaWdubWVudBJN" + 
          "CgxnYW1lX2FjY291bnQYASABKAsyKi5iZ3MucHJvdG9jb2wuYWNjb3VudC52" + 
          "MS5HYW1lQWNjb3VudEhhbmRsZVILZ2FtZUFjY291bnQSHQoKdGVhbV9pbmRl" + 
          "eBgCIAEoDVIJdGVhbUluZGV4KpYDChFQbGF5ZXJMZWF2ZVJlYXNvbhI1CjFQ" + 
          "TEFZRVJfTEVBVkVfUkVBU09OX1BMQVlFUl9SRU1PVkVEX0JZX0dBTUVfU0VS" + 
          "VkVSEAASMQotUExBWUVSX0xFQVZFX1JFQVNPTl9HQU1FX0VOREVEX0JZX0dB" + 
          "TUVfU0VSVkVSEAESPAo4UExBWUVSX0xFQVZFX1JFQVNPTl9QTEFZRVJfRElT" + 
          "Q09OTkVDVEVEX0ZST01fR0FNRV9TRVJWRVIQAhI9CjlQTEFZRVJfTEVBVkVf" + 
          "UkVBU09OX0dBTUVfU0VSVkVSX0RJU0NPTk5FQ1RFRF9GUk9NX1NFUlZJQ0UQ" + 
          "AxI9CjlQTEFZRVJfTEVBVkVfUkVBU09OX1BMQVlFUl9IT1NUX0RJU0NPTk5F" + 
          "Q1RFRF9GUk9NX1NFUlZJQ0UQBBI9CjlQTEFZRVJfTEVBVkVfUkVBU09OX0dB" + 
          "TUVfTUFTVEVSX0RJU0NPTk5FQ1RFRF9GUk9NX1NFUlZJQ0UQBRIcChhQTEFZ" + 
          "RVJfTEVBVkVfUkVBU09OX05PTkUQBkIwChZibmV0LnByb3RvY29sLmdhbWVz" + 
          "LnYyQhRHYW1lTWFzdGVyVHlwZXNQcm90b0gB");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bgs_protocol_games_v2_ConnectInfo__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bgs_protocol_games_v2_ConnectInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.games.v2.ConnectInfo, global::bgs.protocol.games.v2.ConnectInfo.Builder>(internal__static_bgs_protocol_games_v2_ConnectInfo__Descriptor,
                new string[] { "Address", "Token", "Attribute", });
        internal__static_bgs_protocol_games_v2_GameId__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bgs_protocol_games_v2_GameId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.games.v2.GameId, global::bgs.protocol.games.v2.GameId.Builder>(internal__static_bgs_protocol_games_v2_GameId__Descriptor,
                new string[] { "Id", "ServerId", });
        internal__static_bgs_protocol_games_v2_FactoryId__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bgs_protocol_games_v2_FactoryId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.games.v2.FactoryId, global::bgs.protocol.games.v2.FactoryId.Builder>(internal__static_bgs_protocol_games_v2_FactoryId__Descriptor,
                new string[] { "Id", });
        internal__static_bgs_protocol_games_v2_GameHandle__Descriptor = Descriptor.MessageTypes[3];
        internal__static_bgs_protocol_games_v2_GameHandle__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.games.v2.GameHandle, global::bgs.protocol.games.v2.GameHandle.Builder>(internal__static_bgs_protocol_games_v2_GameHandle__Descriptor,
                new string[] { "FactoryId", "GameId", });
        internal__static_bgs_protocol_games_v2_FindGameRequestId__Descriptor = Descriptor.MessageTypes[4];
        internal__static_bgs_protocol_games_v2_FindGameRequestId__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.games.v2.FindGameRequestId, global::bgs.protocol.games.v2.FindGameRequestId.Builder>(internal__static_bgs_protocol_games_v2_FindGameRequestId__Descriptor,
                new string[] { "Id", });
        internal__static_bgs_protocol_games_v2_QueueUpdate__Descriptor = Descriptor.MessageTypes[5];
        internal__static_bgs_protocol_games_v2_QueueUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.games.v2.QueueUpdate, global::bgs.protocol.games.v2.QueueUpdate.Builder>(internal__static_bgs_protocol_games_v2_QueueUpdate__Descriptor,
                new string[] { "MinWait", "MaxWait", "AvgWait", "StdDevWait", });
        internal__static_bgs_protocol_games_v2_Assignment__Descriptor = Descriptor.MessageTypes[6];
        internal__static_bgs_protocol_games_v2_Assignment__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.games.v2.Assignment, global::bgs.protocol.games.v2.Assignment.Builder>(internal__static_bgs_protocol_games_v2_Assignment__Descriptor,
                new string[] { "GameAccount", "TeamIndex", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::bgs.protocol.account.v1.AccountTypes.RegisterAllExtensions(registry);
        global::bgs.protocol.AttributeTypes.RegisterAllExtensions(registry);
        global::bgs.protocol.RpcTypes.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::bgs.protocol.account.v1.AccountTypes.Descriptor, 
          global::bgs.protocol.AttributeTypes.Descriptor, 
          global::bgs.protocol.RpcTypes.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public enum PlayerLeaveReason {
    PLAYER_LEAVE_REASON_PLAYER_REMOVED_BY_GAME_SERVER = 0,
    PLAYER_LEAVE_REASON_GAME_ENDED_BY_GAME_SERVER = 1,
    PLAYER_LEAVE_REASON_PLAYER_DISCONNECTED_FROM_GAME_SERVER = 2,
    PLAYER_LEAVE_REASON_GAME_SERVER_DISCONNECTED_FROM_SERVICE = 3,
    PLAYER_LEAVE_REASON_PLAYER_HOST_DISCONNECTED_FROM_SERVICE = 4,
    PLAYER_LEAVE_REASON_GAME_MASTER_DISCONNECTED_FROM_SERVICE = 5,
    PLAYER_LEAVE_REASON_NONE = 6,
  }
  
  #endregion
  
  #region Messages
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ConnectInfo : pb::GeneratedMessage<ConnectInfo, ConnectInfo.Builder> {
    private ConnectInfo() { }
    private static readonly ConnectInfo defaultInstance = new ConnectInfo().MakeReadOnly();
    private static readonly string[] _connectInfoFieldNames = new string[] { "address", "attribute", "token" };
    private static readonly uint[] _connectInfoFieldTags = new uint[] { 10, 26, 18 };
    public static ConnectInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConnectInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConnectInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.games.v2.GameMasterTypesV2.internal__static_bgs_protocol_games_v2_ConnectInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConnectInfo, ConnectInfo.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.games.v2.GameMasterTypesV2.internal__static_bgs_protocol_games_v2_ConnectInfo__FieldAccessorTable; }
    }
    
    public const int AddressFieldNumber = 1;
    private bool hasAddress;
    private global::bgs.protocol.Address address_;
    public bool HasAddress {
      get { return hasAddress; }
    }
    public global::bgs.protocol.Address Address {
      get { return address_ ?? global::bgs.protocol.Address.DefaultInstance; }
    }
    
    public const int TokenFieldNumber = 2;
    private bool hasToken;
    private pb::ByteString token_ = pb::ByteString.Empty;
    public bool HasToken {
      get { return hasToken; }
    }
    public pb::ByteString Token {
      get { return token_; }
    }
    
    public const int AttributeFieldNumber = 3;
    private pbc::PopsicleList<global::bgs.protocol.Attribute> attribute_ = new pbc::PopsicleList<global::bgs.protocol.Attribute>();
    public scg::IList<global::bgs.protocol.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bgs.protocol.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasAddress) {
          if (!Address.IsInitialized) return false;
        }
        foreach (global::bgs.protocol.Attribute element in AttributeList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _connectInfoFieldNames;
      if (hasAddress) {
        output.WriteMessage(1, field_names[0], Address);
      }
      if (hasToken) {
        output.WriteBytes(2, field_names[2], Token);
      }
      if (attribute_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], attribute_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAddress) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Address);
        }
        if (hasToken) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, Token);
        }
        foreach (global::bgs.protocol.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ConnectInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConnectInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConnectInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConnectInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConnectInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConnectInfo MakeReadOnly() {
      attribute_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConnectInfo prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ConnectInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConnectInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConnectInfo result;
      
      private ConnectInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ConnectInfo original = result;
          result = new ConnectInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConnectInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.games.v2.ConnectInfo.Descriptor; }
      }
      
      public override ConnectInfo DefaultInstanceForType {
        get { return global::bgs.protocol.games.v2.ConnectInfo.DefaultInstance; }
      }
      
      public override ConnectInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConnectInfo) {
          return MergeFrom((ConnectInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConnectInfo other) {
        if (other == global::bgs.protocol.games.v2.ConnectInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAddress) {
          MergeAddress(other.Address);
        }
        if (other.HasToken) {
          Token = other.Token;
        }
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_connectInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _connectInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.Address.Builder subBuilder = global::bgs.protocol.Address.CreateBuilder();
              if (result.hasAddress) {
                subBuilder.MergeFrom(Address);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Address = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasToken = input.ReadBytes(ref result.token_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bgs.protocol.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAddress {
       get { return result.hasAddress; }
      }
      public global::bgs.protocol.Address Address {
        get { return result.Address; }
        set { SetAddress(value); }
      }
      public Builder SetAddress(global::bgs.protocol.Address value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAddress = true;
        result.address_ = value;
        return this;
      }
      public Builder SetAddress(global::bgs.protocol.Address.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAddress = true;
        result.address_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAddress(global::bgs.protocol.Address value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAddress &&
            result.address_ != global::bgs.protocol.Address.DefaultInstance) {
            result.address_ = global::bgs.protocol.Address.CreateBuilder(result.address_).MergeFrom(value).BuildPartial();
        } else {
          result.address_ = value;
        }
        result.hasAddress = true;
        return this;
      }
      public Builder ClearAddress() {
        PrepareBuilder();
        result.hasAddress = false;
        result.address_ = null;
        return this;
      }
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public pb::ByteString Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = pb::ByteString.Empty;
        return this;
      }
      
      public pbc::IPopsicleList<global::bgs.protocol.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bgs.protocol.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bgs.protocol.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bgs.protocol.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bgs.protocol.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bgs.protocol.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bgs.protocol.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
    }
    static ConnectInfo() {
      object.ReferenceEquals(global::bgs.protocol.games.v2.GameMasterTypesV2.Descriptor, null);
    }
  }
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameId : pb::GeneratedMessage<GameId, GameId.Builder> {
    private GameId() { }
    private static readonly GameId defaultInstance = new GameId().MakeReadOnly();
    private static readonly string[] _gameIdFieldNames = new string[] { "id", "server_id" };
    private static readonly uint[] _gameIdFieldTags = new uint[] { 13, 18 };
    public static GameId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.games.v2.GameMasterTypesV2.internal__static_bgs_protocol_games_v2_GameId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameId, GameId.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.games.v2.GameMasterTypesV2.internal__static_bgs_protocol_games_v2_GameId__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public const int ServerIdFieldNumber = 2;
    private bool hasServerId;
    private global::bgs.protocol.ProcessId serverId_;
    public bool HasServerId {
      get { return hasServerId; }
    }
    public global::bgs.protocol.ProcessId ServerId {
      get { return serverId_ ?? global::bgs.protocol.ProcessId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasServerId) {
          if (!ServerId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameIdFieldNames;
      if (hasId) {
        output.WriteFixed32(1, field_names[0], Id);
      }
      if (hasServerId) {
        output.WriteMessage(2, field_names[1], ServerId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeFixed32Size(1, Id);
        }
        if (hasServerId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ServerId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameId prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameId result;
      
      private GameId PrepareBuilder() {
        if (resultIsReadOnly) {
          GameId original = result;
          result = new GameId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.games.v2.GameId.Descriptor; }
      }
      
      public override GameId DefaultInstanceForType {
        get { return global::bgs.protocol.games.v2.GameId.DefaultInstance; }
      }
      
      public override GameId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameId) {
          return MergeFrom((GameId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameId other) {
        if (other == global::bgs.protocol.games.v2.GameId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasServerId) {
          MergeServerId(other.ServerId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasId = input.ReadFixed32(ref result.id_);
              break;
            }
            case 18: {
              global::bgs.protocol.ProcessId.Builder subBuilder = global::bgs.protocol.ProcessId.CreateBuilder();
              if (result.hasServerId) {
                subBuilder.MergeFrom(ServerId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ServerId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasServerId {
       get { return result.hasServerId; }
      }
      public global::bgs.protocol.ProcessId ServerId {
        get { return result.ServerId; }
        set { SetServerId(value); }
      }
      public Builder SetServerId(global::bgs.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServerId = true;
        result.serverId_ = value;
        return this;
      }
      public Builder SetServerId(global::bgs.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasServerId = true;
        result.serverId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeServerId(global::bgs.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasServerId &&
            result.serverId_ != global::bgs.protocol.ProcessId.DefaultInstance) {
            result.serverId_ = global::bgs.protocol.ProcessId.CreateBuilder(result.serverId_).MergeFrom(value).BuildPartial();
        } else {
          result.serverId_ = value;
        }
        result.hasServerId = true;
        return this;
      }
      public Builder ClearServerId() {
        PrepareBuilder();
        result.hasServerId = false;
        result.serverId_ = null;
        return this;
      }
    }
    static GameId() {
      object.ReferenceEquals(global::bgs.protocol.games.v2.GameMasterTypesV2.Descriptor, null);
    }
  }
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FactoryId : pb::GeneratedMessage<FactoryId, FactoryId.Builder> {
    private FactoryId() { }
    private static readonly FactoryId defaultInstance = new FactoryId().MakeReadOnly();
    private static readonly string[] _factoryIdFieldNames = new string[] { "id" };
    private static readonly uint[] _factoryIdFieldTags = new uint[] { 9 };
    public static FactoryId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FactoryId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FactoryId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.games.v2.GameMasterTypesV2.internal__static_bgs_protocol_games_v2_FactoryId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FactoryId, FactoryId.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.games.v2.GameMasterTypesV2.internal__static_bgs_protocol_games_v2_FactoryId__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    public ulong Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _factoryIdFieldNames;
      if (hasId) {
        output.WriteFixed64(1, field_names[0], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeFixed64Size(1, Id);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FactoryId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FactoryId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FactoryId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FactoryId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FactoryId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FactoryId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FactoryId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FactoryId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FactoryId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FactoryId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FactoryId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FactoryId prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FactoryId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FactoryId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FactoryId result;
      
      private FactoryId PrepareBuilder() {
        if (resultIsReadOnly) {
          FactoryId original = result;
          result = new FactoryId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FactoryId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.games.v2.FactoryId.Descriptor; }
      }
      
      public override FactoryId DefaultInstanceForType {
        get { return global::bgs.protocol.games.v2.FactoryId.DefaultInstance; }
      }
      
      public override FactoryId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FactoryId) {
          return MergeFrom((FactoryId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FactoryId other) {
        if (other == global::bgs.protocol.games.v2.FactoryId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_factoryIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _factoryIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasId = input.ReadFixed64(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static FactoryId() {
      object.ReferenceEquals(global::bgs.protocol.games.v2.GameMasterTypesV2.Descriptor, null);
    }
  }
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GameHandle : pb::GeneratedMessage<GameHandle, GameHandle.Builder> {
    private GameHandle() { }
    private static readonly GameHandle defaultInstance = new GameHandle().MakeReadOnly();
    private static readonly string[] _gameHandleFieldNames = new string[] { "factory_id", "game_id" };
    private static readonly uint[] _gameHandleFieldTags = new uint[] { 10, 18 };
    public static GameHandle DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameHandle DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameHandle ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.games.v2.GameMasterTypesV2.internal__static_bgs_protocol_games_v2_GameHandle__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameHandle, GameHandle.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.games.v2.GameMasterTypesV2.internal__static_bgs_protocol_games_v2_GameHandle__FieldAccessorTable; }
    }
    
    public const int FactoryIdFieldNumber = 1;
    private bool hasFactoryId;
    private global::bgs.protocol.games.v2.FactoryId factoryId_;
    public bool HasFactoryId {
      get { return hasFactoryId; }
    }
    public global::bgs.protocol.games.v2.FactoryId FactoryId {
      get { return factoryId_ ?? global::bgs.protocol.games.v2.FactoryId.DefaultInstance; }
    }
    
    public const int GameIdFieldNumber = 2;
    private bool hasGameId;
    private global::bgs.protocol.games.v2.GameId gameId_;
    public bool HasGameId {
      get { return hasGameId; }
    }
    public global::bgs.protocol.games.v2.GameId GameId {
      get { return gameId_ ?? global::bgs.protocol.games.v2.GameId.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasGameId) {
          if (!GameId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameHandleFieldNames;
      if (hasFactoryId) {
        output.WriteMessage(1, field_names[0], FactoryId);
      }
      if (hasGameId) {
        output.WriteMessage(2, field_names[1], GameId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFactoryId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, FactoryId);
        }
        if (hasGameId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, GameId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GameHandle ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameHandle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameHandle ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameHandle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameHandle ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameHandle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameHandle ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameHandle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameHandle ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameHandle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameHandle MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameHandle prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GameHandle, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameHandle cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameHandle result;
      
      private GameHandle PrepareBuilder() {
        if (resultIsReadOnly) {
          GameHandle original = result;
          result = new GameHandle();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameHandle MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.games.v2.GameHandle.Descriptor; }
      }
      
      public override GameHandle DefaultInstanceForType {
        get { return global::bgs.protocol.games.v2.GameHandle.DefaultInstance; }
      }
      
      public override GameHandle BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameHandle) {
          return MergeFrom((GameHandle) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameHandle other) {
        if (other == global::bgs.protocol.games.v2.GameHandle.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFactoryId) {
          MergeFactoryId(other.FactoryId);
        }
        if (other.HasGameId) {
          MergeGameId(other.GameId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameHandleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameHandleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.games.v2.FactoryId.Builder subBuilder = global::bgs.protocol.games.v2.FactoryId.CreateBuilder();
              if (result.hasFactoryId) {
                subBuilder.MergeFrom(FactoryId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FactoryId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bgs.protocol.games.v2.GameId.Builder subBuilder = global::bgs.protocol.games.v2.GameId.CreateBuilder();
              if (result.hasGameId) {
                subBuilder.MergeFrom(GameId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFactoryId {
       get { return result.hasFactoryId; }
      }
      public global::bgs.protocol.games.v2.FactoryId FactoryId {
        get { return result.FactoryId; }
        set { SetFactoryId(value); }
      }
      public Builder SetFactoryId(global::bgs.protocol.games.v2.FactoryId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFactoryId = true;
        result.factoryId_ = value;
        return this;
      }
      public Builder SetFactoryId(global::bgs.protocol.games.v2.FactoryId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFactoryId = true;
        result.factoryId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFactoryId(global::bgs.protocol.games.v2.FactoryId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFactoryId &&
            result.factoryId_ != global::bgs.protocol.games.v2.FactoryId.DefaultInstance) {
            result.factoryId_ = global::bgs.protocol.games.v2.FactoryId.CreateBuilder(result.factoryId_).MergeFrom(value).BuildPartial();
        } else {
          result.factoryId_ = value;
        }
        result.hasFactoryId = true;
        return this;
      }
      public Builder ClearFactoryId() {
        PrepareBuilder();
        result.hasFactoryId = false;
        result.factoryId_ = null;
        return this;
      }
      
      public bool HasGameId {
       get { return result.hasGameId; }
      }
      public global::bgs.protocol.games.v2.GameId GameId {
        get { return result.GameId; }
        set { SetGameId(value); }
      }
      public Builder SetGameId(global::bgs.protocol.games.v2.GameId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameId = true;
        result.gameId_ = value;
        return this;
      }
      public Builder SetGameId(global::bgs.protocol.games.v2.GameId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameId = true;
        result.gameId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameId(global::bgs.protocol.games.v2.GameId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameId &&
            result.gameId_ != global::bgs.protocol.games.v2.GameId.DefaultInstance) {
            result.gameId_ = global::bgs.protocol.games.v2.GameId.CreateBuilder(result.gameId_).MergeFrom(value).BuildPartial();
        } else {
          result.gameId_ = value;
        }
        result.hasGameId = true;
        return this;
      }
      public Builder ClearGameId() {
        PrepareBuilder();
        result.hasGameId = false;
        result.gameId_ = null;
        return this;
      }
    }
    static GameHandle() {
      object.ReferenceEquals(global::bgs.protocol.games.v2.GameMasterTypesV2.Descriptor, null);
    }
  }
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FindGameRequestId : pb::GeneratedMessage<FindGameRequestId, FindGameRequestId.Builder> {
    private FindGameRequestId() { }
    private static readonly FindGameRequestId defaultInstance = new FindGameRequestId().MakeReadOnly();
    private static readonly string[] _findGameRequestIdFieldNames = new string[] { "id" };
    private static readonly uint[] _findGameRequestIdFieldTags = new uint[] { 9 };
    public static FindGameRequestId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FindGameRequestId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FindGameRequestId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.games.v2.GameMasterTypesV2.internal__static_bgs_protocol_games_v2_FindGameRequestId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FindGameRequestId, FindGameRequestId.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.games.v2.GameMasterTypesV2.internal__static_bgs_protocol_games_v2_FindGameRequestId__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    public ulong Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _findGameRequestIdFieldNames;
      if (hasId) {
        output.WriteFixed64(1, field_names[0], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeFixed64Size(1, Id);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FindGameRequestId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FindGameRequestId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FindGameRequestId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FindGameRequestId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FindGameRequestId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FindGameRequestId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FindGameRequestId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FindGameRequestId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FindGameRequestId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FindGameRequestId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FindGameRequestId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FindGameRequestId prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FindGameRequestId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FindGameRequestId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FindGameRequestId result;
      
      private FindGameRequestId PrepareBuilder() {
        if (resultIsReadOnly) {
          FindGameRequestId original = result;
          result = new FindGameRequestId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FindGameRequestId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.games.v2.FindGameRequestId.Descriptor; }
      }
      
      public override FindGameRequestId DefaultInstanceForType {
        get { return global::bgs.protocol.games.v2.FindGameRequestId.DefaultInstance; }
      }
      
      public override FindGameRequestId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FindGameRequestId) {
          return MergeFrom((FindGameRequestId) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FindGameRequestId other) {
        if (other == global::bgs.protocol.games.v2.FindGameRequestId.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_findGameRequestIdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _findGameRequestIdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasId = input.ReadFixed64(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static FindGameRequestId() {
      object.ReferenceEquals(global::bgs.protocol.games.v2.GameMasterTypesV2.Descriptor, null);
    }
  }
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class QueueUpdate : pb::GeneratedMessage<QueueUpdate, QueueUpdate.Builder> {
    private QueueUpdate() { }
    private static readonly QueueUpdate defaultInstance = new QueueUpdate().MakeReadOnly();
    private static readonly string[] _queueUpdateFieldNames = new string[] { "avg_wait", "max_wait", "min_wait", "std_dev_wait" };
    private static readonly uint[] _queueUpdateFieldTags = new uint[] { 24, 16, 8, 32 };
    public static QueueUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QueueUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QueueUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.games.v2.GameMasterTypesV2.internal__static_bgs_protocol_games_v2_QueueUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QueueUpdate, QueueUpdate.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.games.v2.GameMasterTypesV2.internal__static_bgs_protocol_games_v2_QueueUpdate__FieldAccessorTable; }
    }
    
    public const int MinWaitFieldNumber = 1;
    private bool hasMinWait;
    private int minWait_;
    public bool HasMinWait {
      get { return hasMinWait; }
    }
    public int MinWait {
      get { return minWait_; }
    }
    
    public const int MaxWaitFieldNumber = 2;
    private bool hasMaxWait;
    private int maxWait_;
    public bool HasMaxWait {
      get { return hasMaxWait; }
    }
    public int MaxWait {
      get { return maxWait_; }
    }
    
    public const int AvgWaitFieldNumber = 3;
    private bool hasAvgWait;
    private int avgWait_;
    public bool HasAvgWait {
      get { return hasAvgWait; }
    }
    public int AvgWait {
      get { return avgWait_; }
    }
    
    public const int StdDevWaitFieldNumber = 4;
    private bool hasStdDevWait;
    private int stdDevWait_;
    public bool HasStdDevWait {
      get { return hasStdDevWait; }
    }
    public int StdDevWait {
      get { return stdDevWait_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _queueUpdateFieldNames;
      if (hasMinWait) {
        output.WriteInt32(1, field_names[2], MinWait);
      }
      if (hasMaxWait) {
        output.WriteInt32(2, field_names[1], MaxWait);
      }
      if (hasAvgWait) {
        output.WriteInt32(3, field_names[0], AvgWait);
      }
      if (hasStdDevWait) {
        output.WriteInt32(4, field_names[3], StdDevWait);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMinWait) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, MinWait);
        }
        if (hasMaxWait) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, MaxWait);
        }
        if (hasAvgWait) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, AvgWait);
        }
        if (hasStdDevWait) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, StdDevWait);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QueueUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueueUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueueUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueueUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueueUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueueUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QueueUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QueueUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QueueUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueueUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QueueUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QueueUpdate prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<QueueUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QueueUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QueueUpdate result;
      
      private QueueUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          QueueUpdate original = result;
          result = new QueueUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QueueUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.games.v2.QueueUpdate.Descriptor; }
      }
      
      public override QueueUpdate DefaultInstanceForType {
        get { return global::bgs.protocol.games.v2.QueueUpdate.DefaultInstance; }
      }
      
      public override QueueUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QueueUpdate) {
          return MergeFrom((QueueUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QueueUpdate other) {
        if (other == global::bgs.protocol.games.v2.QueueUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMinWait) {
          MinWait = other.MinWait;
        }
        if (other.HasMaxWait) {
          MaxWait = other.MaxWait;
        }
        if (other.HasAvgWait) {
          AvgWait = other.AvgWait;
        }
        if (other.HasStdDevWait) {
          StdDevWait = other.StdDevWait;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_queueUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _queueUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMinWait = input.ReadInt32(ref result.minWait_);
              break;
            }
            case 16: {
              result.hasMaxWait = input.ReadInt32(ref result.maxWait_);
              break;
            }
            case 24: {
              result.hasAvgWait = input.ReadInt32(ref result.avgWait_);
              break;
            }
            case 32: {
              result.hasStdDevWait = input.ReadInt32(ref result.stdDevWait_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMinWait {
        get { return result.hasMinWait; }
      }
      public int MinWait {
        get { return result.MinWait; }
        set { SetMinWait(value); }
      }
      public Builder SetMinWait(int value) {
        PrepareBuilder();
        result.hasMinWait = true;
        result.minWait_ = value;
        return this;
      }
      public Builder ClearMinWait() {
        PrepareBuilder();
        result.hasMinWait = false;
        result.minWait_ = 0;
        return this;
      }
      
      public bool HasMaxWait {
        get { return result.hasMaxWait; }
      }
      public int MaxWait {
        get { return result.MaxWait; }
        set { SetMaxWait(value); }
      }
      public Builder SetMaxWait(int value) {
        PrepareBuilder();
        result.hasMaxWait = true;
        result.maxWait_ = value;
        return this;
      }
      public Builder ClearMaxWait() {
        PrepareBuilder();
        result.hasMaxWait = false;
        result.maxWait_ = 0;
        return this;
      }
      
      public bool HasAvgWait {
        get { return result.hasAvgWait; }
      }
      public int AvgWait {
        get { return result.AvgWait; }
        set { SetAvgWait(value); }
      }
      public Builder SetAvgWait(int value) {
        PrepareBuilder();
        result.hasAvgWait = true;
        result.avgWait_ = value;
        return this;
      }
      public Builder ClearAvgWait() {
        PrepareBuilder();
        result.hasAvgWait = false;
        result.avgWait_ = 0;
        return this;
      }
      
      public bool HasStdDevWait {
        get { return result.hasStdDevWait; }
      }
      public int StdDevWait {
        get { return result.StdDevWait; }
        set { SetStdDevWait(value); }
      }
      public Builder SetStdDevWait(int value) {
        PrepareBuilder();
        result.hasStdDevWait = true;
        result.stdDevWait_ = value;
        return this;
      }
      public Builder ClearStdDevWait() {
        PrepareBuilder();
        result.hasStdDevWait = false;
        result.stdDevWait_ = 0;
        return this;
      }
    }
    static QueueUpdate() {
      object.ReferenceEquals(global::bgs.protocol.games.v2.GameMasterTypesV2.Descriptor, null);
    }
  }
  
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Assignment : pb::GeneratedMessage<Assignment, Assignment.Builder> {
    private Assignment() { }
    private static readonly Assignment defaultInstance = new Assignment().MakeReadOnly();
    private static readonly string[] _assignmentFieldNames = new string[] { "game_account", "team_index" };
    private static readonly uint[] _assignmentFieldTags = new uint[] { 10, 16 };
    public static Assignment DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Assignment DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Assignment ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.games.v2.GameMasterTypesV2.internal__static_bgs_protocol_games_v2_Assignment__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Assignment, Assignment.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.games.v2.GameMasterTypesV2.internal__static_bgs_protocol_games_v2_Assignment__FieldAccessorTable; }
    }
    
    public const int GameAccountFieldNumber = 1;
    private bool hasGameAccount;
    private global::bgs.protocol.account.v1.GameAccountHandle gameAccount_;
    public bool HasGameAccount {
      get { return hasGameAccount; }
    }
    public global::bgs.protocol.account.v1.GameAccountHandle GameAccount {
      get { return gameAccount_ ?? global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance; }
    }
    
    public const int TeamIndexFieldNumber = 2;
    private bool hasTeamIndex;
    private uint teamIndex_;
    public bool HasTeamIndex {
      get { return hasTeamIndex; }
    }
    public uint TeamIndex {
      get { return teamIndex_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasGameAccount) {
          if (!GameAccount.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _assignmentFieldNames;
      if (hasGameAccount) {
        output.WriteMessage(1, field_names[0], GameAccount);
      }
      if (hasTeamIndex) {
        output.WriteUInt32(2, field_names[1], TeamIndex);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGameAccount) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, GameAccount);
        }
        if (hasTeamIndex) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, TeamIndex);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Assignment ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Assignment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Assignment ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Assignment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Assignment ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Assignment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Assignment ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Assignment ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Assignment ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Assignment ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Assignment MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Assignment prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Assignment, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Assignment cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Assignment result;
      
      private Assignment PrepareBuilder() {
        if (resultIsReadOnly) {
          Assignment original = result;
          result = new Assignment();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Assignment MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.games.v2.Assignment.Descriptor; }
      }
      
      public override Assignment DefaultInstanceForType {
        get { return global::bgs.protocol.games.v2.Assignment.DefaultInstance; }
      }
      
      public override Assignment BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Assignment) {
          return MergeFrom((Assignment) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Assignment other) {
        if (other == global::bgs.protocol.games.v2.Assignment.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameAccount) {
          MergeGameAccount(other.GameAccount);
        }
        if (other.HasTeamIndex) {
          TeamIndex = other.TeamIndex;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_assignmentFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _assignmentFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.GameAccountHandle.Builder subBuilder = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder();
              if (result.hasGameAccount) {
                subBuilder.MergeFrom(GameAccount);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameAccount = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasTeamIndex = input.ReadUInt32(ref result.teamIndex_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameAccount {
       get { return result.hasGameAccount; }
      }
      public global::bgs.protocol.account.v1.GameAccountHandle GameAccount {
        get { return result.GameAccount; }
        set { SetGameAccount(value); }
      }
      public Builder SetGameAccount(global::bgs.protocol.account.v1.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameAccount = true;
        result.gameAccount_ = value;
        return this;
      }
      public Builder SetGameAccount(global::bgs.protocol.account.v1.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameAccount = true;
        result.gameAccount_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameAccount(global::bgs.protocol.account.v1.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameAccount &&
            result.gameAccount_ != global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance) {
            result.gameAccount_ = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder(result.gameAccount_).MergeFrom(value).BuildPartial();
        } else {
          result.gameAccount_ = value;
        }
        result.hasGameAccount = true;
        return this;
      }
      public Builder ClearGameAccount() {
        PrepareBuilder();
        result.hasGameAccount = false;
        result.gameAccount_ = null;
        return this;
      }
      
      public bool HasTeamIndex {
        get { return result.hasTeamIndex; }
      }
      public uint TeamIndex {
        get { return result.TeamIndex; }
        set { SetTeamIndex(value); }
      }
      public Builder SetTeamIndex(uint value) {
        PrepareBuilder();
        result.hasTeamIndex = true;
        result.teamIndex_ = value;
        return this;
      }
      public Builder ClearTeamIndex() {
        PrepareBuilder();
        result.hasTeamIndex = false;
        result.teamIndex_ = 0;
        return this;
      }
    }
    static Assignment() {
      object.ReferenceEquals(global::bgs.protocol.games.v2.GameMasterTypesV2.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
