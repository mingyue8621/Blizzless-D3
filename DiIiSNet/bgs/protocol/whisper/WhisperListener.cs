// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bgs.protocol.whisper.v1 {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class WhisperListener {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_whisper_v1_WhisperNotification__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.whisper.v1.WhisperNotification, global::bgs.protocol.whisper.v1.WhisperNotification.Builder> internal__static_bgs_protocol_whisper_v1_WhisperNotification__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_whisper_v1_WhisperEchoNotification__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.whisper.v1.WhisperEchoNotification, global::bgs.protocol.whisper.v1.WhisperEchoNotification.Builder> internal__static_bgs_protocol_whisper_v1_WhisperEchoNotification__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_whisper_v1_TypingIndicatorNotification__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.whisper.v1.TypingIndicatorNotification, global::bgs.protocol.whisper.v1.TypingIndicatorNotification.Builder> internal__static_bgs_protocol_whisper_v1_TypingIndicatorNotification__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_whisper_v1_AdvanceViewTimeNotification__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.whisper.v1.AdvanceViewTimeNotification, global::bgs.protocol.whisper.v1.AdvanceViewTimeNotification.Builder> internal__static_bgs_protocol_whisper_v1_AdvanceViewTimeNotification__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_whisper_v1_WhisperUpdatedNotification__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.whisper.v1.WhisperUpdatedNotification, global::bgs.protocol.whisper.v1.WhisperUpdatedNotification.Builder> internal__static_bgs_protocol_whisper_v1_WhisperUpdatedNotification__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_whisper_v1_AdvanceClearTimeNotification__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.whisper.v1.AdvanceClearTimeNotification, global::bgs.protocol.whisper.v1.AdvanceClearTimeNotification.Builder> internal__static_bgs_protocol_whisper_v1_AdvanceClearTimeNotification__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static WhisperListener() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "CihiZ3MvbG93L3BiL2NsaWVudC93aGlzcGVyX2xpc3RlbmVyLnByb3RvEhdi" + 
            "Z3MucHJvdG9jb2wud2hpc3Blci52MRolYmdzL2xvdy9wYi9jbGllbnQvd2hp" + 
            "c3Blcl90eXBlcy5wcm90bxolYmdzL2xvdy9wYi9jbGllbnQvYWNjb3VudF90" + 
            "eXBlcy5wcm90bxohYmdzL2xvdy9wYi9jbGllbnQvcnBjX3R5cGVzLnByb3Rv" + 
            "GiViZ3MvbG93L3BiL2NsaWVudC9tZXNzYWdlX3R5cGVzLnByb3RvIs4BChNX" + 
            "aGlzcGVyTm90aWZpY2F0aW9uEkcKDXN1YnNjcmliZXJfaWQYASABKAsyIi5i" + 
            "Z3MucHJvdG9jb2wuYWNjb3VudC52MS5BY2NvdW50SWRSDHN1YnNjcmliZXJJ" + 
            "ZBI6Cgd3aGlzcGVyGAIgASgLMiAuYmdzLnByb3RvY29sLndoaXNwZXIudjEu" + 
            "V2hpc3BlclIHd2hpc3BlchIyChFzZW5kZXJfYmF0dGxlX3RhZxgDIAEoCUIG" + 
            "gvkrAggBUg9zZW5kZXJCYXR0bGVUYWcingEKF1doaXNwZXJFY2hvTm90aWZp" + 
            "Y2F0aW9uEkcKDXN1YnNjcmliZXJfaWQYASABKAsyIi5iZ3MucHJvdG9jb2wu" + 
            "YWNjb3VudC52MS5BY2NvdW50SWRSDHN1YnNjcmliZXJJZBI6Cgd3aGlzcGVy" + 
            "GAIgASgLMiAuYmdzLnByb3RvY29sLndoaXNwZXIudjEuV2hpc3BlclIHd2hp" + 
            "c3BlciLsAQobVHlwaW5nSW5kaWNhdG9yTm90aWZpY2F0aW9uEkcKDXN1YnNj" + 
            "cmliZXJfaWQYASABKAsyIi5iZ3MucHJvdG9jb2wuYWNjb3VudC52MS5BY2Nv" + 
            "dW50SWRSDHN1YnNjcmliZXJJZBI/CglzZW5kZXJfaWQYAiABKAsyIi5iZ3Mu" + 
            "cHJvdG9jb2wuYWNjb3VudC52MS5BY2NvdW50SWRSCHNlbmRlcklkEkMKBmFj" + 
            "dGlvbhgDIAEoDjIdLmJncy5wcm90b2NvbC5UeXBpbmdJbmRpY2F0b3I6DFRZ" + 
            "UElOR19TVEFSVFIGYWN0aW9uIsQBChtBZHZhbmNlVmlld1RpbWVOb3RpZmlj" + 
            "YXRpb24SRwoNc3Vic2NyaWJlcl9pZBgBIAEoCzIiLmJncy5wcm90b2NvbC5h" + 
            "Y2NvdW50LnYxLkFjY291bnRJZFIMc3Vic2NyaWJlcklkEj8KCXNlbmRlcl9p" + 
            "ZBgCIAEoCzIiLmJncy5wcm90b2NvbC5hY2NvdW50LnYxLkFjY291bnRJZFII" + 
            "c2VuZGVySWQSGwoJdmlld190aW1lGAMgASgEUgh2aWV3VGltZSKhAQoaV2hp" + 
            "c3BlclVwZGF0ZWROb3RpZmljYXRpb24SRwoNc3Vic2NyaWJlcl9pZBgBIAEo" + 
            "CzIiLmJncy5wcm90b2NvbC5hY2NvdW50LnYxLkFjY291bnRJZFIMc3Vic2Ny" + 
            "aWJlcklkEjoKB3doaXNwZXIYAiABKAsyIC5iZ3MucHJvdG9jb2wud2hpc3Bl" + 
            "ci52MS5XaGlzcGVyUgd3aGlzcGVyIscBChxBZHZhbmNlQ2xlYXJUaW1lTm90" + 
            "aWZpY2F0aW9uEkcKDXN1YnNjcmliZXJfaWQYASABKAsyIi5iZ3MucHJvdG9j" + 
            "b2wuYWNjb3VudC52MS5BY2NvdW50SWRSDHN1YnNjcmliZXJJZBI/CglzZW5k" + 
            "ZXJfaWQYAiABKAsyIi5iZ3MucHJvdG9jb2wuYWNjb3VudC52MS5BY2NvdW50" + 
            "SWRSCHNlbmRlcklkEh0KCmNsZWFyX3RpbWUYAyABKARSCWNsZWFyVGltZTLS" + 
            "BQoPV2hpc3Blckxpc3RlbmVyEmIKCU9uV2hpc3BlchIsLmJncy5wcm90b2Nv" + 
            "bC53aGlzcGVyLnYxLldoaXNwZXJOb3RpZmljYXRpb24aGS5iZ3MucHJvdG9j" + 
            "b2wuTk9fUkVTUE9OU0UiDIL5KwIIAYL5KwI4ARJkCg1PbldoaXNwZXJFY2hv" + 
            "EjAuYmdzLnByb3RvY29sLndoaXNwZXIudjEuV2hpc3BlckVjaG9Ob3RpZmlj" + 
            "YXRpb24aGS5iZ3MucHJvdG9jb2wuTk9fUkVTUE9OU0UiBoL5KwIIAhJyChdP" + 
            "blR5cGluZ0luZGljYXRvclVwZGF0ZRI0LmJncy5wcm90b2NvbC53aGlzcGVy" + 
            "LnYxLlR5cGluZ0luZGljYXRvck5vdGlmaWNhdGlvbhoZLmJncy5wcm90b2Nv" + 
            "bC5OT19SRVNQT05TRSIGgvkrAggDEmwKEU9uQWR2YW5jZVZpZXdUaW1lEjQu" + 
            "YmdzLnByb3RvY29sLndoaXNwZXIudjEuQWR2YW5jZVZpZXdUaW1lTm90aWZp" + 
            "Y2F0aW9uGhkuYmdzLnByb3RvY29sLk5PX1JFU1BPTlNFIgaC+SsCCAQSagoQ" + 
            "T25XaGlzcGVyVXBkYXRlZBIzLmJncy5wcm90b2NvbC53aGlzcGVyLnYxLldo" + 
            "aXNwZXJVcGRhdGVkTm90aWZpY2F0aW9uGhkuYmdzLnByb3RvY29sLk5PX1JF" + 
            "U1BPTlNFIgaC+SsCCAUSbgoST25BZHZhbmNlQ2xlYXJUaW1lEjUuYmdzLnBy" + 
            "b3RvY29sLndoaXNwZXIudjEuQWR2YW5jZUNsZWFyVGltZU5vdGlmaWNhdGlv" + 
            "bhoZLmJncy5wcm90b2NvbC5OT19SRVNQT05TRSIGgvkrAggGGjeC+SsnCiVi" + 
            "bmV0LnByb3RvY29sLndoaXNwZXIuV2hpc3Blckxpc3RlbmVygvkrAjgBivkr" + 
            "AggB");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_bgs_protocol_whisper_v1_WhisperNotification__Descriptor = Descriptor.MessageTypes[0];
          internal__static_bgs_protocol_whisper_v1_WhisperNotification__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.whisper.v1.WhisperNotification, global::bgs.protocol.whisper.v1.WhisperNotification.Builder>(internal__static_bgs_protocol_whisper_v1_WhisperNotification__Descriptor,
                  new string[] { "SubscriberId", "Whisper", "SenderBattleTag", });
          internal__static_bgs_protocol_whisper_v1_WhisperEchoNotification__Descriptor = Descriptor.MessageTypes[1];
          internal__static_bgs_protocol_whisper_v1_WhisperEchoNotification__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.whisper.v1.WhisperEchoNotification, global::bgs.protocol.whisper.v1.WhisperEchoNotification.Builder>(internal__static_bgs_protocol_whisper_v1_WhisperEchoNotification__Descriptor,
                  new string[] { "SubscriberId", "Whisper", });
          internal__static_bgs_protocol_whisper_v1_TypingIndicatorNotification__Descriptor = Descriptor.MessageTypes[2];
          internal__static_bgs_protocol_whisper_v1_TypingIndicatorNotification__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.whisper.v1.TypingIndicatorNotification, global::bgs.protocol.whisper.v1.TypingIndicatorNotification.Builder>(internal__static_bgs_protocol_whisper_v1_TypingIndicatorNotification__Descriptor,
                  new string[] { "SubscriberId", "SenderId", "Action", });
          internal__static_bgs_protocol_whisper_v1_AdvanceViewTimeNotification__Descriptor = Descriptor.MessageTypes[3];
          internal__static_bgs_protocol_whisper_v1_AdvanceViewTimeNotification__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.whisper.v1.AdvanceViewTimeNotification, global::bgs.protocol.whisper.v1.AdvanceViewTimeNotification.Builder>(internal__static_bgs_protocol_whisper_v1_AdvanceViewTimeNotification__Descriptor,
                  new string[] { "SubscriberId", "SenderId", "ViewTime", });
          internal__static_bgs_protocol_whisper_v1_WhisperUpdatedNotification__Descriptor = Descriptor.MessageTypes[4];
          internal__static_bgs_protocol_whisper_v1_WhisperUpdatedNotification__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.whisper.v1.WhisperUpdatedNotification, global::bgs.protocol.whisper.v1.WhisperUpdatedNotification.Builder>(internal__static_bgs_protocol_whisper_v1_WhisperUpdatedNotification__Descriptor,
                  new string[] { "SubscriberId", "Whisper", });
          internal__static_bgs_protocol_whisper_v1_AdvanceClearTimeNotification__Descriptor = Descriptor.MessageTypes[5];
          internal__static_bgs_protocol_whisper_v1_AdvanceClearTimeNotification__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.whisper.v1.AdvanceClearTimeNotification, global::bgs.protocol.whisper.v1.AdvanceClearTimeNotification.Builder>(internal__static_bgs_protocol_whisper_v1_AdvanceClearTimeNotification__Descriptor,
                  new string[] { "SubscriberId", "SenderId", "ClearTime", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::bgs.protocol.whisper.v1.WhisperTypes.RegisterAllExtensions(registry);
          global::bgs.protocol.account.v1.AccountTypes.RegisterAllExtensions(registry);
          global::bgs.protocol.RpcTypes.RegisterAllExtensions(registry);
          global::bgs.protocol.MessageTypes.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::bgs.protocol.whisper.v1.WhisperTypes.Descriptor, 
            global::bgs.protocol.account.v1.AccountTypes.Descriptor, 
            global::bgs.protocol.RpcTypes.Descriptor, 
            global::bgs.protocol.MessageTypes.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class WhisperNotification : pb::GeneratedMessage<WhisperNotification, WhisperNotification.Builder> {
    private WhisperNotification() { }
    private static readonly WhisperNotification defaultInstance = new WhisperNotification().MakeReadOnly();
    private static readonly string[] _whisperNotificationFieldNames = new string[] { "sender_battle_tag", "subscriber_id", "whisper" };
    private static readonly uint[] _whisperNotificationFieldTags = new uint[] { 26, 10, 18 };
    public static WhisperNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override WhisperNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override WhisperNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.whisper.v1.Proto.WhisperListener.internal__static_bgs_protocol_whisper_v1_WhisperNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<WhisperNotification, WhisperNotification.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.whisper.v1.Proto.WhisperListener.internal__static_bgs_protocol_whisper_v1_WhisperNotification__FieldAccessorTable; }
    }
    
    public const int SubscriberIdFieldNumber = 1;
    private bool hasSubscriberId;
    private global::bgs.protocol.account.v1.AccountId subscriberId_;
    public bool HasSubscriberId {
      get { return hasSubscriberId; }
    }
    public global::bgs.protocol.account.v1.AccountId SubscriberId {
      get { return subscriberId_ ?? global::bgs.protocol.account.v1.AccountId.DefaultInstance; }
    }
    
    public const int WhisperFieldNumber = 2;
    private bool hasWhisper;
    private global::bgs.protocol.whisper.v1.Whisper whisper_;
    public bool HasWhisper {
      get { return hasWhisper; }
    }
    public global::bgs.protocol.whisper.v1.Whisper Whisper {
      get { return whisper_ ?? global::bgs.protocol.whisper.v1.Whisper.DefaultInstance; }
    }
    
    public const int SenderBattleTagFieldNumber = 3;
    private bool hasSenderBattleTag;
    private string senderBattleTag_ = "";
    public bool HasSenderBattleTag {
      get { return hasSenderBattleTag; }
    }
    public string SenderBattleTag {
      get { return senderBattleTag_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasSubscriberId) {
          if (!SubscriberId.IsInitialized) return false;
        }
        if (HasWhisper) {
          if (!Whisper.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _whisperNotificationFieldNames;
      if (hasSubscriberId) {
        output.WriteMessage(1, field_names[1], SubscriberId);
      }
      if (hasWhisper) {
        output.WriteMessage(2, field_names[2], Whisper);
      }
      if (hasSenderBattleTag) {
        output.WriteString(3, field_names[0], SenderBattleTag);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSubscriberId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, SubscriberId);
        }
        if (hasWhisper) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Whisper);
        }
        if (hasSenderBattleTag) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SenderBattleTag);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static WhisperNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WhisperNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WhisperNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WhisperNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WhisperNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WhisperNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static WhisperNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static WhisperNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static WhisperNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WhisperNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private WhisperNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(WhisperNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<WhisperNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(WhisperNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private WhisperNotification result;
      
      private WhisperNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          WhisperNotification original = result;
          result = new WhisperNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override WhisperNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.whisper.v1.WhisperNotification.Descriptor; }
      }
      
      public override WhisperNotification DefaultInstanceForType {
        get { return global::bgs.protocol.whisper.v1.WhisperNotification.DefaultInstance; }
      }
      
      public override WhisperNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is WhisperNotification) {
          return MergeFrom((WhisperNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(WhisperNotification other) {
        if (other == global::bgs.protocol.whisper.v1.WhisperNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSubscriberId) {
          MergeSubscriberId(other.SubscriberId);
        }
        if (other.HasWhisper) {
          MergeWhisper(other.Whisper);
        }
        if (other.HasSenderBattleTag) {
          SenderBattleTag = other.SenderBattleTag;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_whisperNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _whisperNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.AccountId.Builder subBuilder = global::bgs.protocol.account.v1.AccountId.CreateBuilder();
              if (result.hasSubscriberId) {
                subBuilder.MergeFrom(SubscriberId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SubscriberId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bgs.protocol.whisper.v1.Whisper.Builder subBuilder = global::bgs.protocol.whisper.v1.Whisper.CreateBuilder();
              if (result.hasWhisper) {
                subBuilder.MergeFrom(Whisper);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Whisper = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              result.hasSenderBattleTag = input.ReadString(ref result.senderBattleTag_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSubscriberId {
       get { return result.hasSubscriberId; }
      }
      public global::bgs.protocol.account.v1.AccountId SubscriberId {
        get { return result.SubscriberId; }
        set { SetSubscriberId(value); }
      }
      public Builder SetSubscriberId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSubscriberId = true;
        result.subscriberId_ = value;
        return this;
      }
      public Builder SetSubscriberId(global::bgs.protocol.account.v1.AccountId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSubscriberId = true;
        result.subscriberId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSubscriberId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSubscriberId &&
            result.subscriberId_ != global::bgs.protocol.account.v1.AccountId.DefaultInstance) {
            result.subscriberId_ = global::bgs.protocol.account.v1.AccountId.CreateBuilder(result.subscriberId_).MergeFrom(value).BuildPartial();
        } else {
          result.subscriberId_ = value;
        }
        result.hasSubscriberId = true;
        return this;
      }
      public Builder ClearSubscriberId() {
        PrepareBuilder();
        result.hasSubscriberId = false;
        result.subscriberId_ = null;
        return this;
      }
      
      public bool HasWhisper {
       get { return result.hasWhisper; }
      }
      public global::bgs.protocol.whisper.v1.Whisper Whisper {
        get { return result.Whisper; }
        set { SetWhisper(value); }
      }
      public Builder SetWhisper(global::bgs.protocol.whisper.v1.Whisper value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWhisper = true;
        result.whisper_ = value;
        return this;
      }
      public Builder SetWhisper(global::bgs.protocol.whisper.v1.Whisper.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasWhisper = true;
        result.whisper_ = builderForValue.Build();
        return this;
      }
      public Builder MergeWhisper(global::bgs.protocol.whisper.v1.Whisper value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasWhisper &&
            result.whisper_ != global::bgs.protocol.whisper.v1.Whisper.DefaultInstance) {
            result.whisper_ = global::bgs.protocol.whisper.v1.Whisper.CreateBuilder(result.whisper_).MergeFrom(value).BuildPartial();
        } else {
          result.whisper_ = value;
        }
        result.hasWhisper = true;
        return this;
      }
      public Builder ClearWhisper() {
        PrepareBuilder();
        result.hasWhisper = false;
        result.whisper_ = null;
        return this;
      }
      
      public bool HasSenderBattleTag {
        get { return result.hasSenderBattleTag; }
      }
      public string SenderBattleTag {
        get { return result.SenderBattleTag; }
        set { SetSenderBattleTag(value); }
      }
      public Builder SetSenderBattleTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSenderBattleTag = true;
        result.senderBattleTag_ = value;
        return this;
      }
      public Builder ClearSenderBattleTag() {
        PrepareBuilder();
        result.hasSenderBattleTag = false;
        result.senderBattleTag_ = "";
        return this;
      }
    }
    static WhisperNotification() {
      object.ReferenceEquals(global::bgs.protocol.whisper.v1.Proto.WhisperListener.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class WhisperEchoNotification : pb::GeneratedMessage<WhisperEchoNotification, WhisperEchoNotification.Builder> {
    private WhisperEchoNotification() { }
    private static readonly WhisperEchoNotification defaultInstance = new WhisperEchoNotification().MakeReadOnly();
    private static readonly string[] _whisperEchoNotificationFieldNames = new string[] { "subscriber_id", "whisper" };
    private static readonly uint[] _whisperEchoNotificationFieldTags = new uint[] { 10, 18 };
    public static WhisperEchoNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override WhisperEchoNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override WhisperEchoNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.whisper.v1.Proto.WhisperListener.internal__static_bgs_protocol_whisper_v1_WhisperEchoNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<WhisperEchoNotification, WhisperEchoNotification.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.whisper.v1.Proto.WhisperListener.internal__static_bgs_protocol_whisper_v1_WhisperEchoNotification__FieldAccessorTable; }
    }
    
    public const int SubscriberIdFieldNumber = 1;
    private bool hasSubscriberId;
    private global::bgs.protocol.account.v1.AccountId subscriberId_;
    public bool HasSubscriberId {
      get { return hasSubscriberId; }
    }
    public global::bgs.protocol.account.v1.AccountId SubscriberId {
      get { return subscriberId_ ?? global::bgs.protocol.account.v1.AccountId.DefaultInstance; }
    }
    
    public const int WhisperFieldNumber = 2;
    private bool hasWhisper;
    private global::bgs.protocol.whisper.v1.Whisper whisper_;
    public bool HasWhisper {
      get { return hasWhisper; }
    }
    public global::bgs.protocol.whisper.v1.Whisper Whisper {
      get { return whisper_ ?? global::bgs.protocol.whisper.v1.Whisper.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasSubscriberId) {
          if (!SubscriberId.IsInitialized) return false;
        }
        if (HasWhisper) {
          if (!Whisper.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _whisperEchoNotificationFieldNames;
      if (hasSubscriberId) {
        output.WriteMessage(1, field_names[0], SubscriberId);
      }
      if (hasWhisper) {
        output.WriteMessage(2, field_names[1], Whisper);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSubscriberId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, SubscriberId);
        }
        if (hasWhisper) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Whisper);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static WhisperEchoNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WhisperEchoNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WhisperEchoNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WhisperEchoNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WhisperEchoNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WhisperEchoNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static WhisperEchoNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static WhisperEchoNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static WhisperEchoNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WhisperEchoNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private WhisperEchoNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(WhisperEchoNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<WhisperEchoNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(WhisperEchoNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private WhisperEchoNotification result;
      
      private WhisperEchoNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          WhisperEchoNotification original = result;
          result = new WhisperEchoNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override WhisperEchoNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.whisper.v1.WhisperEchoNotification.Descriptor; }
      }
      
      public override WhisperEchoNotification DefaultInstanceForType {
        get { return global::bgs.protocol.whisper.v1.WhisperEchoNotification.DefaultInstance; }
      }
      
      public override WhisperEchoNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is WhisperEchoNotification) {
          return MergeFrom((WhisperEchoNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(WhisperEchoNotification other) {
        if (other == global::bgs.protocol.whisper.v1.WhisperEchoNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSubscriberId) {
          MergeSubscriberId(other.SubscriberId);
        }
        if (other.HasWhisper) {
          MergeWhisper(other.Whisper);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_whisperEchoNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _whisperEchoNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.AccountId.Builder subBuilder = global::bgs.protocol.account.v1.AccountId.CreateBuilder();
              if (result.hasSubscriberId) {
                subBuilder.MergeFrom(SubscriberId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SubscriberId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bgs.protocol.whisper.v1.Whisper.Builder subBuilder = global::bgs.protocol.whisper.v1.Whisper.CreateBuilder();
              if (result.hasWhisper) {
                subBuilder.MergeFrom(Whisper);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Whisper = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSubscriberId {
       get { return result.hasSubscriberId; }
      }
      public global::bgs.protocol.account.v1.AccountId SubscriberId {
        get { return result.SubscriberId; }
        set { SetSubscriberId(value); }
      }
      public Builder SetSubscriberId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSubscriberId = true;
        result.subscriberId_ = value;
        return this;
      }
      public Builder SetSubscriberId(global::bgs.protocol.account.v1.AccountId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSubscriberId = true;
        result.subscriberId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSubscriberId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSubscriberId &&
            result.subscriberId_ != global::bgs.protocol.account.v1.AccountId.DefaultInstance) {
            result.subscriberId_ = global::bgs.protocol.account.v1.AccountId.CreateBuilder(result.subscriberId_).MergeFrom(value).BuildPartial();
        } else {
          result.subscriberId_ = value;
        }
        result.hasSubscriberId = true;
        return this;
      }
      public Builder ClearSubscriberId() {
        PrepareBuilder();
        result.hasSubscriberId = false;
        result.subscriberId_ = null;
        return this;
      }
      
      public bool HasWhisper {
       get { return result.hasWhisper; }
      }
      public global::bgs.protocol.whisper.v1.Whisper Whisper {
        get { return result.Whisper; }
        set { SetWhisper(value); }
      }
      public Builder SetWhisper(global::bgs.protocol.whisper.v1.Whisper value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWhisper = true;
        result.whisper_ = value;
        return this;
      }
      public Builder SetWhisper(global::bgs.protocol.whisper.v1.Whisper.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasWhisper = true;
        result.whisper_ = builderForValue.Build();
        return this;
      }
      public Builder MergeWhisper(global::bgs.protocol.whisper.v1.Whisper value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasWhisper &&
            result.whisper_ != global::bgs.protocol.whisper.v1.Whisper.DefaultInstance) {
            result.whisper_ = global::bgs.protocol.whisper.v1.Whisper.CreateBuilder(result.whisper_).MergeFrom(value).BuildPartial();
        } else {
          result.whisper_ = value;
        }
        result.hasWhisper = true;
        return this;
      }
      public Builder ClearWhisper() {
        PrepareBuilder();
        result.hasWhisper = false;
        result.whisper_ = null;
        return this;
      }
    }
    static WhisperEchoNotification() {
      object.ReferenceEquals(global::bgs.protocol.whisper.v1.Proto.WhisperListener.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TypingIndicatorNotification : pb::GeneratedMessage<TypingIndicatorNotification, TypingIndicatorNotification.Builder> {
    private TypingIndicatorNotification() { }
    private static readonly TypingIndicatorNotification defaultInstance = new TypingIndicatorNotification().MakeReadOnly();
    private static readonly string[] _typingIndicatorNotificationFieldNames = new string[] { "action", "sender_id", "subscriber_id" };
    private static readonly uint[] _typingIndicatorNotificationFieldTags = new uint[] { 24, 18, 10 };
    public static TypingIndicatorNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TypingIndicatorNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TypingIndicatorNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.whisper.v1.Proto.WhisperListener.internal__static_bgs_protocol_whisper_v1_TypingIndicatorNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TypingIndicatorNotification, TypingIndicatorNotification.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.whisper.v1.Proto.WhisperListener.internal__static_bgs_protocol_whisper_v1_TypingIndicatorNotification__FieldAccessorTable; }
    }
    
    public const int SubscriberIdFieldNumber = 1;
    private bool hasSubscriberId;
    private global::bgs.protocol.account.v1.AccountId subscriberId_;
    public bool HasSubscriberId {
      get { return hasSubscriberId; }
    }
    public global::bgs.protocol.account.v1.AccountId SubscriberId {
      get { return subscriberId_ ?? global::bgs.protocol.account.v1.AccountId.DefaultInstance; }
    }
    
    public const int SenderIdFieldNumber = 2;
    private bool hasSenderId;
    private global::bgs.protocol.account.v1.AccountId senderId_;
    public bool HasSenderId {
      get { return hasSenderId; }
    }
    public global::bgs.protocol.account.v1.AccountId SenderId {
      get { return senderId_ ?? global::bgs.protocol.account.v1.AccountId.DefaultInstance; }
    }
    
    public const int ActionFieldNumber = 3;
    private bool hasAction;
    private global::bgs.protocol.TypingIndicator action_ = global::bgs.protocol.TypingIndicator.TYPING_START;
    public bool HasAction {
      get { return hasAction; }
    }
    public global::bgs.protocol.TypingIndicator Action {
      get { return action_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasSubscriberId) {
          if (!SubscriberId.IsInitialized) return false;
        }
        if (HasSenderId) {
          if (!SenderId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _typingIndicatorNotificationFieldNames;
      if (hasSubscriberId) {
        output.WriteMessage(1, field_names[2], SubscriberId);
      }
      if (hasSenderId) {
        output.WriteMessage(2, field_names[1], SenderId);
      }
      if (hasAction) {
        output.WriteEnum(3, field_names[0], (int) Action, Action);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSubscriberId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, SubscriberId);
        }
        if (hasSenderId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, SenderId);
        }
        if (hasAction) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Action);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TypingIndicatorNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TypingIndicatorNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TypingIndicatorNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TypingIndicatorNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TypingIndicatorNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TypingIndicatorNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TypingIndicatorNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TypingIndicatorNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TypingIndicatorNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TypingIndicatorNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TypingIndicatorNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TypingIndicatorNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TypingIndicatorNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TypingIndicatorNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TypingIndicatorNotification result;
      
      private TypingIndicatorNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          TypingIndicatorNotification original = result;
          result = new TypingIndicatorNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TypingIndicatorNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.whisper.v1.TypingIndicatorNotification.Descriptor; }
      }
      
      public override TypingIndicatorNotification DefaultInstanceForType {
        get { return global::bgs.protocol.whisper.v1.TypingIndicatorNotification.DefaultInstance; }
      }
      
      public override TypingIndicatorNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TypingIndicatorNotification) {
          return MergeFrom((TypingIndicatorNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TypingIndicatorNotification other) {
        if (other == global::bgs.protocol.whisper.v1.TypingIndicatorNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSubscriberId) {
          MergeSubscriberId(other.SubscriberId);
        }
        if (other.HasSenderId) {
          MergeSenderId(other.SenderId);
        }
        if (other.HasAction) {
          Action = other.Action;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_typingIndicatorNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _typingIndicatorNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.AccountId.Builder subBuilder = global::bgs.protocol.account.v1.AccountId.CreateBuilder();
              if (result.hasSubscriberId) {
                subBuilder.MergeFrom(SubscriberId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SubscriberId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bgs.protocol.account.v1.AccountId.Builder subBuilder = global::bgs.protocol.account.v1.AccountId.CreateBuilder();
              if (result.hasSenderId) {
                subBuilder.MergeFrom(SenderId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SenderId = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.action_, out unknown)) {
                result.hasAction = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSubscriberId {
       get { return result.hasSubscriberId; }
      }
      public global::bgs.protocol.account.v1.AccountId SubscriberId {
        get { return result.SubscriberId; }
        set { SetSubscriberId(value); }
      }
      public Builder SetSubscriberId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSubscriberId = true;
        result.subscriberId_ = value;
        return this;
      }
      public Builder SetSubscriberId(global::bgs.protocol.account.v1.AccountId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSubscriberId = true;
        result.subscriberId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSubscriberId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSubscriberId &&
            result.subscriberId_ != global::bgs.protocol.account.v1.AccountId.DefaultInstance) {
            result.subscriberId_ = global::bgs.protocol.account.v1.AccountId.CreateBuilder(result.subscriberId_).MergeFrom(value).BuildPartial();
        } else {
          result.subscriberId_ = value;
        }
        result.hasSubscriberId = true;
        return this;
      }
      public Builder ClearSubscriberId() {
        PrepareBuilder();
        result.hasSubscriberId = false;
        result.subscriberId_ = null;
        return this;
      }
      
      public bool HasSenderId {
       get { return result.hasSenderId; }
      }
      public global::bgs.protocol.account.v1.AccountId SenderId {
        get { return result.SenderId; }
        set { SetSenderId(value); }
      }
      public Builder SetSenderId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSenderId = true;
        result.senderId_ = value;
        return this;
      }
      public Builder SetSenderId(global::bgs.protocol.account.v1.AccountId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSenderId = true;
        result.senderId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSenderId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSenderId &&
            result.senderId_ != global::bgs.protocol.account.v1.AccountId.DefaultInstance) {
            result.senderId_ = global::bgs.protocol.account.v1.AccountId.CreateBuilder(result.senderId_).MergeFrom(value).BuildPartial();
        } else {
          result.senderId_ = value;
        }
        result.hasSenderId = true;
        return this;
      }
      public Builder ClearSenderId() {
        PrepareBuilder();
        result.hasSenderId = false;
        result.senderId_ = null;
        return this;
      }
      
      public bool HasAction {
       get { return result.hasAction; }
      }
      public global::bgs.protocol.TypingIndicator Action {
        get { return result.Action; }
        set { SetAction(value); }
      }
      public Builder SetAction(global::bgs.protocol.TypingIndicator value) {
        PrepareBuilder();
        result.hasAction = true;
        result.action_ = value;
        return this;
      }
      public Builder ClearAction() {
        PrepareBuilder();
        result.hasAction = false;
        result.action_ = global::bgs.protocol.TypingIndicator.TYPING_START;
        return this;
      }
    }
    static TypingIndicatorNotification() {
      object.ReferenceEquals(global::bgs.protocol.whisper.v1.Proto.WhisperListener.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AdvanceViewTimeNotification : pb::GeneratedMessage<AdvanceViewTimeNotification, AdvanceViewTimeNotification.Builder> {
    private AdvanceViewTimeNotification() { }
    private static readonly AdvanceViewTimeNotification defaultInstance = new AdvanceViewTimeNotification().MakeReadOnly();
    private static readonly string[] _advanceViewTimeNotificationFieldNames = new string[] { "sender_id", "subscriber_id", "view_time" };
    private static readonly uint[] _advanceViewTimeNotificationFieldTags = new uint[] { 18, 10, 24 };
    public static AdvanceViewTimeNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AdvanceViewTimeNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AdvanceViewTimeNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.whisper.v1.Proto.WhisperListener.internal__static_bgs_protocol_whisper_v1_AdvanceViewTimeNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AdvanceViewTimeNotification, AdvanceViewTimeNotification.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.whisper.v1.Proto.WhisperListener.internal__static_bgs_protocol_whisper_v1_AdvanceViewTimeNotification__FieldAccessorTable; }
    }
    
    public const int SubscriberIdFieldNumber = 1;
    private bool hasSubscriberId;
    private global::bgs.protocol.account.v1.AccountId subscriberId_;
    public bool HasSubscriberId {
      get { return hasSubscriberId; }
    }
    public global::bgs.protocol.account.v1.AccountId SubscriberId {
      get { return subscriberId_ ?? global::bgs.protocol.account.v1.AccountId.DefaultInstance; }
    }
    
    public const int SenderIdFieldNumber = 2;
    private bool hasSenderId;
    private global::bgs.protocol.account.v1.AccountId senderId_;
    public bool HasSenderId {
      get { return hasSenderId; }
    }
    public global::bgs.protocol.account.v1.AccountId SenderId {
      get { return senderId_ ?? global::bgs.protocol.account.v1.AccountId.DefaultInstance; }
    }
    
    public const int ViewTimeFieldNumber = 3;
    private bool hasViewTime;
    private ulong viewTime_;
    public bool HasViewTime {
      get { return hasViewTime; }
    }
    public ulong ViewTime {
      get { return viewTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasSubscriberId) {
          if (!SubscriberId.IsInitialized) return false;
        }
        if (HasSenderId) {
          if (!SenderId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _advanceViewTimeNotificationFieldNames;
      if (hasSubscriberId) {
        output.WriteMessage(1, field_names[1], SubscriberId);
      }
      if (hasSenderId) {
        output.WriteMessage(2, field_names[0], SenderId);
      }
      if (hasViewTime) {
        output.WriteUInt64(3, field_names[2], ViewTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSubscriberId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, SubscriberId);
        }
        if (hasSenderId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, SenderId);
        }
        if (hasViewTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, ViewTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AdvanceViewTimeNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AdvanceViewTimeNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AdvanceViewTimeNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AdvanceViewTimeNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AdvanceViewTimeNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AdvanceViewTimeNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AdvanceViewTimeNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AdvanceViewTimeNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AdvanceViewTimeNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AdvanceViewTimeNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AdvanceViewTimeNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AdvanceViewTimeNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AdvanceViewTimeNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AdvanceViewTimeNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AdvanceViewTimeNotification result;
      
      private AdvanceViewTimeNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          AdvanceViewTimeNotification original = result;
          result = new AdvanceViewTimeNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AdvanceViewTimeNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.whisper.v1.AdvanceViewTimeNotification.Descriptor; }
      }
      
      public override AdvanceViewTimeNotification DefaultInstanceForType {
        get { return global::bgs.protocol.whisper.v1.AdvanceViewTimeNotification.DefaultInstance; }
      }
      
      public override AdvanceViewTimeNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AdvanceViewTimeNotification) {
          return MergeFrom((AdvanceViewTimeNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AdvanceViewTimeNotification other) {
        if (other == global::bgs.protocol.whisper.v1.AdvanceViewTimeNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSubscriberId) {
          MergeSubscriberId(other.SubscriberId);
        }
        if (other.HasSenderId) {
          MergeSenderId(other.SenderId);
        }
        if (other.HasViewTime) {
          ViewTime = other.ViewTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_advanceViewTimeNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _advanceViewTimeNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.AccountId.Builder subBuilder = global::bgs.protocol.account.v1.AccountId.CreateBuilder();
              if (result.hasSubscriberId) {
                subBuilder.MergeFrom(SubscriberId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SubscriberId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bgs.protocol.account.v1.AccountId.Builder subBuilder = global::bgs.protocol.account.v1.AccountId.CreateBuilder();
              if (result.hasSenderId) {
                subBuilder.MergeFrom(SenderId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SenderId = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasViewTime = input.ReadUInt64(ref result.viewTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSubscriberId {
       get { return result.hasSubscriberId; }
      }
      public global::bgs.protocol.account.v1.AccountId SubscriberId {
        get { return result.SubscriberId; }
        set { SetSubscriberId(value); }
      }
      public Builder SetSubscriberId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSubscriberId = true;
        result.subscriberId_ = value;
        return this;
      }
      public Builder SetSubscriberId(global::bgs.protocol.account.v1.AccountId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSubscriberId = true;
        result.subscriberId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSubscriberId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSubscriberId &&
            result.subscriberId_ != global::bgs.protocol.account.v1.AccountId.DefaultInstance) {
            result.subscriberId_ = global::bgs.protocol.account.v1.AccountId.CreateBuilder(result.subscriberId_).MergeFrom(value).BuildPartial();
        } else {
          result.subscriberId_ = value;
        }
        result.hasSubscriberId = true;
        return this;
      }
      public Builder ClearSubscriberId() {
        PrepareBuilder();
        result.hasSubscriberId = false;
        result.subscriberId_ = null;
        return this;
      }
      
      public bool HasSenderId {
       get { return result.hasSenderId; }
      }
      public global::bgs.protocol.account.v1.AccountId SenderId {
        get { return result.SenderId; }
        set { SetSenderId(value); }
      }
      public Builder SetSenderId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSenderId = true;
        result.senderId_ = value;
        return this;
      }
      public Builder SetSenderId(global::bgs.protocol.account.v1.AccountId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSenderId = true;
        result.senderId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSenderId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSenderId &&
            result.senderId_ != global::bgs.protocol.account.v1.AccountId.DefaultInstance) {
            result.senderId_ = global::bgs.protocol.account.v1.AccountId.CreateBuilder(result.senderId_).MergeFrom(value).BuildPartial();
        } else {
          result.senderId_ = value;
        }
        result.hasSenderId = true;
        return this;
      }
      public Builder ClearSenderId() {
        PrepareBuilder();
        result.hasSenderId = false;
        result.senderId_ = null;
        return this;
      }
      
      public bool HasViewTime {
        get { return result.hasViewTime; }
      }
      public ulong ViewTime {
        get { return result.ViewTime; }
        set { SetViewTime(value); }
      }
      public Builder SetViewTime(ulong value) {
        PrepareBuilder();
        result.hasViewTime = true;
        result.viewTime_ = value;
        return this;
      }
      public Builder ClearViewTime() {
        PrepareBuilder();
        result.hasViewTime = false;
        result.viewTime_ = 0UL;
        return this;
      }
    }
    static AdvanceViewTimeNotification() {
      object.ReferenceEquals(global::bgs.protocol.whisper.v1.Proto.WhisperListener.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class WhisperUpdatedNotification : pb::GeneratedMessage<WhisperUpdatedNotification, WhisperUpdatedNotification.Builder> {
    private WhisperUpdatedNotification() { }
    private static readonly WhisperUpdatedNotification defaultInstance = new WhisperUpdatedNotification().MakeReadOnly();
    private static readonly string[] _whisperUpdatedNotificationFieldNames = new string[] { "subscriber_id", "whisper" };
    private static readonly uint[] _whisperUpdatedNotificationFieldTags = new uint[] { 10, 18 };
    public static WhisperUpdatedNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override WhisperUpdatedNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override WhisperUpdatedNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.whisper.v1.Proto.WhisperListener.internal__static_bgs_protocol_whisper_v1_WhisperUpdatedNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<WhisperUpdatedNotification, WhisperUpdatedNotification.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.whisper.v1.Proto.WhisperListener.internal__static_bgs_protocol_whisper_v1_WhisperUpdatedNotification__FieldAccessorTable; }
    }
    
    public const int SubscriberIdFieldNumber = 1;
    private bool hasSubscriberId;
    private global::bgs.protocol.account.v1.AccountId subscriberId_;
    public bool HasSubscriberId {
      get { return hasSubscriberId; }
    }
    public global::bgs.protocol.account.v1.AccountId SubscriberId {
      get { return subscriberId_ ?? global::bgs.protocol.account.v1.AccountId.DefaultInstance; }
    }
    
    public const int WhisperFieldNumber = 2;
    private bool hasWhisper;
    private global::bgs.protocol.whisper.v1.Whisper whisper_;
    public bool HasWhisper {
      get { return hasWhisper; }
    }
    public global::bgs.protocol.whisper.v1.Whisper Whisper {
      get { return whisper_ ?? global::bgs.protocol.whisper.v1.Whisper.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasSubscriberId) {
          if (!SubscriberId.IsInitialized) return false;
        }
        if (HasWhisper) {
          if (!Whisper.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _whisperUpdatedNotificationFieldNames;
      if (hasSubscriberId) {
        output.WriteMessage(1, field_names[0], SubscriberId);
      }
      if (hasWhisper) {
        output.WriteMessage(2, field_names[1], Whisper);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSubscriberId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, SubscriberId);
        }
        if (hasWhisper) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Whisper);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static WhisperUpdatedNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WhisperUpdatedNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WhisperUpdatedNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WhisperUpdatedNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WhisperUpdatedNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WhisperUpdatedNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static WhisperUpdatedNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static WhisperUpdatedNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static WhisperUpdatedNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WhisperUpdatedNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private WhisperUpdatedNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(WhisperUpdatedNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<WhisperUpdatedNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(WhisperUpdatedNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private WhisperUpdatedNotification result;
      
      private WhisperUpdatedNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          WhisperUpdatedNotification original = result;
          result = new WhisperUpdatedNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override WhisperUpdatedNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.whisper.v1.WhisperUpdatedNotification.Descriptor; }
      }
      
      public override WhisperUpdatedNotification DefaultInstanceForType {
        get { return global::bgs.protocol.whisper.v1.WhisperUpdatedNotification.DefaultInstance; }
      }
      
      public override WhisperUpdatedNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is WhisperUpdatedNotification) {
          return MergeFrom((WhisperUpdatedNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(WhisperUpdatedNotification other) {
        if (other == global::bgs.protocol.whisper.v1.WhisperUpdatedNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSubscriberId) {
          MergeSubscriberId(other.SubscriberId);
        }
        if (other.HasWhisper) {
          MergeWhisper(other.Whisper);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_whisperUpdatedNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _whisperUpdatedNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.AccountId.Builder subBuilder = global::bgs.protocol.account.v1.AccountId.CreateBuilder();
              if (result.hasSubscriberId) {
                subBuilder.MergeFrom(SubscriberId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SubscriberId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bgs.protocol.whisper.v1.Whisper.Builder subBuilder = global::bgs.protocol.whisper.v1.Whisper.CreateBuilder();
              if (result.hasWhisper) {
                subBuilder.MergeFrom(Whisper);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Whisper = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSubscriberId {
       get { return result.hasSubscriberId; }
      }
      public global::bgs.protocol.account.v1.AccountId SubscriberId {
        get { return result.SubscriberId; }
        set { SetSubscriberId(value); }
      }
      public Builder SetSubscriberId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSubscriberId = true;
        result.subscriberId_ = value;
        return this;
      }
      public Builder SetSubscriberId(global::bgs.protocol.account.v1.AccountId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSubscriberId = true;
        result.subscriberId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSubscriberId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSubscriberId &&
            result.subscriberId_ != global::bgs.protocol.account.v1.AccountId.DefaultInstance) {
            result.subscriberId_ = global::bgs.protocol.account.v1.AccountId.CreateBuilder(result.subscriberId_).MergeFrom(value).BuildPartial();
        } else {
          result.subscriberId_ = value;
        }
        result.hasSubscriberId = true;
        return this;
      }
      public Builder ClearSubscriberId() {
        PrepareBuilder();
        result.hasSubscriberId = false;
        result.subscriberId_ = null;
        return this;
      }
      
      public bool HasWhisper {
       get { return result.hasWhisper; }
      }
      public global::bgs.protocol.whisper.v1.Whisper Whisper {
        get { return result.Whisper; }
        set { SetWhisper(value); }
      }
      public Builder SetWhisper(global::bgs.protocol.whisper.v1.Whisper value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWhisper = true;
        result.whisper_ = value;
        return this;
      }
      public Builder SetWhisper(global::bgs.protocol.whisper.v1.Whisper.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasWhisper = true;
        result.whisper_ = builderForValue.Build();
        return this;
      }
      public Builder MergeWhisper(global::bgs.protocol.whisper.v1.Whisper value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasWhisper &&
            result.whisper_ != global::bgs.protocol.whisper.v1.Whisper.DefaultInstance) {
            result.whisper_ = global::bgs.protocol.whisper.v1.Whisper.CreateBuilder(result.whisper_).MergeFrom(value).BuildPartial();
        } else {
          result.whisper_ = value;
        }
        result.hasWhisper = true;
        return this;
      }
      public Builder ClearWhisper() {
        PrepareBuilder();
        result.hasWhisper = false;
        result.whisper_ = null;
        return this;
      }
    }
    static WhisperUpdatedNotification() {
      object.ReferenceEquals(global::bgs.protocol.whisper.v1.Proto.WhisperListener.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AdvanceClearTimeNotification : pb::GeneratedMessage<AdvanceClearTimeNotification, AdvanceClearTimeNotification.Builder> {
    private AdvanceClearTimeNotification() { }
    private static readonly AdvanceClearTimeNotification defaultInstance = new AdvanceClearTimeNotification().MakeReadOnly();
    private static readonly string[] _advanceClearTimeNotificationFieldNames = new string[] { "clear_time", "sender_id", "subscriber_id" };
    private static readonly uint[] _advanceClearTimeNotificationFieldTags = new uint[] { 24, 18, 10 };
    public static AdvanceClearTimeNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AdvanceClearTimeNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AdvanceClearTimeNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.whisper.v1.Proto.WhisperListener.internal__static_bgs_protocol_whisper_v1_AdvanceClearTimeNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AdvanceClearTimeNotification, AdvanceClearTimeNotification.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.whisper.v1.Proto.WhisperListener.internal__static_bgs_protocol_whisper_v1_AdvanceClearTimeNotification__FieldAccessorTable; }
    }
    
    public const int SubscriberIdFieldNumber = 1;
    private bool hasSubscriberId;
    private global::bgs.protocol.account.v1.AccountId subscriberId_;
    public bool HasSubscriberId {
      get { return hasSubscriberId; }
    }
    public global::bgs.protocol.account.v1.AccountId SubscriberId {
      get { return subscriberId_ ?? global::bgs.protocol.account.v1.AccountId.DefaultInstance; }
    }
    
    public const int SenderIdFieldNumber = 2;
    private bool hasSenderId;
    private global::bgs.protocol.account.v1.AccountId senderId_;
    public bool HasSenderId {
      get { return hasSenderId; }
    }
    public global::bgs.protocol.account.v1.AccountId SenderId {
      get { return senderId_ ?? global::bgs.protocol.account.v1.AccountId.DefaultInstance; }
    }
    
    public const int ClearTimeFieldNumber = 3;
    private bool hasClearTime;
    private ulong clearTime_;
    public bool HasClearTime {
      get { return hasClearTime; }
    }
    public ulong ClearTime {
      get { return clearTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasSubscriberId) {
          if (!SubscriberId.IsInitialized) return false;
        }
        if (HasSenderId) {
          if (!SenderId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _advanceClearTimeNotificationFieldNames;
      if (hasSubscriberId) {
        output.WriteMessage(1, field_names[2], SubscriberId);
      }
      if (hasSenderId) {
        output.WriteMessage(2, field_names[1], SenderId);
      }
      if (hasClearTime) {
        output.WriteUInt64(3, field_names[0], ClearTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSubscriberId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, SubscriberId);
        }
        if (hasSenderId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, SenderId);
        }
        if (hasClearTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, ClearTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AdvanceClearTimeNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AdvanceClearTimeNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AdvanceClearTimeNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AdvanceClearTimeNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AdvanceClearTimeNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AdvanceClearTimeNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AdvanceClearTimeNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AdvanceClearTimeNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AdvanceClearTimeNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AdvanceClearTimeNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AdvanceClearTimeNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AdvanceClearTimeNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AdvanceClearTimeNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AdvanceClearTimeNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AdvanceClearTimeNotification result;
      
      private AdvanceClearTimeNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          AdvanceClearTimeNotification original = result;
          result = new AdvanceClearTimeNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AdvanceClearTimeNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.whisper.v1.AdvanceClearTimeNotification.Descriptor; }
      }
      
      public override AdvanceClearTimeNotification DefaultInstanceForType {
        get { return global::bgs.protocol.whisper.v1.AdvanceClearTimeNotification.DefaultInstance; }
      }
      
      public override AdvanceClearTimeNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AdvanceClearTimeNotification) {
          return MergeFrom((AdvanceClearTimeNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AdvanceClearTimeNotification other) {
        if (other == global::bgs.protocol.whisper.v1.AdvanceClearTimeNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSubscriberId) {
          MergeSubscriberId(other.SubscriberId);
        }
        if (other.HasSenderId) {
          MergeSenderId(other.SenderId);
        }
        if (other.HasClearTime) {
          ClearTime = other.ClearTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_advanceClearTimeNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _advanceClearTimeNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.AccountId.Builder subBuilder = global::bgs.protocol.account.v1.AccountId.CreateBuilder();
              if (result.hasSubscriberId) {
                subBuilder.MergeFrom(SubscriberId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SubscriberId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bgs.protocol.account.v1.AccountId.Builder subBuilder = global::bgs.protocol.account.v1.AccountId.CreateBuilder();
              if (result.hasSenderId) {
                subBuilder.MergeFrom(SenderId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SenderId = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasClearTime = input.ReadUInt64(ref result.clearTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSubscriberId {
       get { return result.hasSubscriberId; }
      }
      public global::bgs.protocol.account.v1.AccountId SubscriberId {
        get { return result.SubscriberId; }
        set { SetSubscriberId(value); }
      }
      public Builder SetSubscriberId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSubscriberId = true;
        result.subscriberId_ = value;
        return this;
      }
      public Builder SetSubscriberId(global::bgs.protocol.account.v1.AccountId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSubscriberId = true;
        result.subscriberId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSubscriberId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSubscriberId &&
            result.subscriberId_ != global::bgs.protocol.account.v1.AccountId.DefaultInstance) {
            result.subscriberId_ = global::bgs.protocol.account.v1.AccountId.CreateBuilder(result.subscriberId_).MergeFrom(value).BuildPartial();
        } else {
          result.subscriberId_ = value;
        }
        result.hasSubscriberId = true;
        return this;
      }
      public Builder ClearSubscriberId() {
        PrepareBuilder();
        result.hasSubscriberId = false;
        result.subscriberId_ = null;
        return this;
      }
      
      public bool HasSenderId {
       get { return result.hasSenderId; }
      }
      public global::bgs.protocol.account.v1.AccountId SenderId {
        get { return result.SenderId; }
        set { SetSenderId(value); }
      }
      public Builder SetSenderId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSenderId = true;
        result.senderId_ = value;
        return this;
      }
      public Builder SetSenderId(global::bgs.protocol.account.v1.AccountId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSenderId = true;
        result.senderId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSenderId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSenderId &&
            result.senderId_ != global::bgs.protocol.account.v1.AccountId.DefaultInstance) {
            result.senderId_ = global::bgs.protocol.account.v1.AccountId.CreateBuilder(result.senderId_).MergeFrom(value).BuildPartial();
        } else {
          result.senderId_ = value;
        }
        result.hasSenderId = true;
        return this;
      }
      public Builder ClearSenderId() {
        PrepareBuilder();
        result.hasSenderId = false;
        result.senderId_ = null;
        return this;
      }
      
      public bool HasClearTime {
        get { return result.hasClearTime; }
      }
      public ulong ClearTime {
        get { return result.ClearTime; }
        set { SetClearTime(value); }
      }
      public Builder SetClearTime(ulong value) {
        PrepareBuilder();
        result.hasClearTime = true;
        result.clearTime_ = value;
        return this;
      }
      public Builder ClearClearTime() {
        PrepareBuilder();
        result.hasClearTime = false;
        result.clearTime_ = 0UL;
        return this;
      }
    }
    static AdvanceClearTimeNotification() {
      object.ReferenceEquals(global::bgs.protocol.whisper.v1.Proto.WhisperListener.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class WhisperListener : pb::IService {
    public abstract void OnWhisper(
        pb::IRpcController controller,
        global::bgs.protocol.whisper.v1.WhisperNotification request,
        global::System.Action<global::bgs.protocol.NO_RESPONSE> done);
    public abstract void OnWhisperEcho(
        pb::IRpcController controller,
        global::bgs.protocol.whisper.v1.WhisperEchoNotification request,
        global::System.Action<global::bgs.protocol.NO_RESPONSE> done);
    public abstract void OnTypingIndicatorUpdate(
        pb::IRpcController controller,
        global::bgs.protocol.whisper.v1.TypingIndicatorNotification request,
        global::System.Action<global::bgs.protocol.NO_RESPONSE> done);
    public abstract void OnAdvanceViewTime(
        pb::IRpcController controller,
        global::bgs.protocol.whisper.v1.AdvanceViewTimeNotification request,
        global::System.Action<global::bgs.protocol.NO_RESPONSE> done);
    public abstract void OnWhisperUpdated(
        pb::IRpcController controller,
        global::bgs.protocol.whisper.v1.WhisperUpdatedNotification request,
        global::System.Action<global::bgs.protocol.NO_RESPONSE> done);
    public abstract void OnAdvanceClearTime(
        pb::IRpcController controller,
        global::bgs.protocol.whisper.v1.AdvanceClearTimeNotification request,
        global::System.Action<global::bgs.protocol.NO_RESPONSE> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.WhisperListener.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.OnWhisper(controller, (global::bgs.protocol.whisper.v1.WhisperNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NO_RESPONSE>(
              done));
          return;
        case 1:
          this.OnWhisperEcho(controller, (global::bgs.protocol.whisper.v1.WhisperEchoNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NO_RESPONSE>(
              done));
          return;
        case 2:
          this.OnTypingIndicatorUpdate(controller, (global::bgs.protocol.whisper.v1.TypingIndicatorNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NO_RESPONSE>(
              done));
          return;
        case 3:
          this.OnAdvanceViewTime(controller, (global::bgs.protocol.whisper.v1.AdvanceViewTimeNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NO_RESPONSE>(
              done));
          return;
        case 4:
          this.OnWhisperUpdated(controller, (global::bgs.protocol.whisper.v1.WhisperUpdatedNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NO_RESPONSE>(
              done));
          return;
        case 5:
          this.OnAdvanceClearTime(controller, (global::bgs.protocol.whisper.v1.AdvanceClearTimeNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NO_RESPONSE>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bgs.protocol.whisper.v1.WhisperNotification.DefaultInstance;
        case 1:
          return global::bgs.protocol.whisper.v1.WhisperEchoNotification.DefaultInstance;
        case 2:
          return global::bgs.protocol.whisper.v1.TypingIndicatorNotification.DefaultInstance;
        case 3:
          return global::bgs.protocol.whisper.v1.AdvanceViewTimeNotification.DefaultInstance;
        case 4:
          return global::bgs.protocol.whisper.v1.WhisperUpdatedNotification.DefaultInstance;
        case 5:
          return global::bgs.protocol.whisper.v1.AdvanceClearTimeNotification.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bgs.protocol.NO_RESPONSE.DefaultInstance;
        case 1:
          return global::bgs.protocol.NO_RESPONSE.DefaultInstance;
        case 2:
          return global::bgs.protocol.NO_RESPONSE.DefaultInstance;
        case 3:
          return global::bgs.protocol.NO_RESPONSE.DefaultInstance;
        case 4:
          return global::bgs.protocol.NO_RESPONSE.DefaultInstance;
        case 5:
          return global::bgs.protocol.NO_RESPONSE.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bgs.protocol.whisper.v1.WhisperListener {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void OnWhisper(
          pb::IRpcController controller,
          global::bgs.protocol.whisper.v1.WhisperNotification request,
          global::System.Action<global::bgs.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bgs.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NO_RESPONSE, global::bgs.protocol.NO_RESPONSE.Builder>(done, global::bgs.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void OnWhisperEcho(
          pb::IRpcController controller,
          global::bgs.protocol.whisper.v1.WhisperEchoNotification request,
          global::System.Action<global::bgs.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bgs.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NO_RESPONSE, global::bgs.protocol.NO_RESPONSE.Builder>(done, global::bgs.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void OnTypingIndicatorUpdate(
          pb::IRpcController controller,
          global::bgs.protocol.whisper.v1.TypingIndicatorNotification request,
          global::System.Action<global::bgs.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[2],
            controller, request, global::bgs.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NO_RESPONSE, global::bgs.protocol.NO_RESPONSE.Builder>(done, global::bgs.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void OnAdvanceViewTime(
          pb::IRpcController controller,
          global::bgs.protocol.whisper.v1.AdvanceViewTimeNotification request,
          global::System.Action<global::bgs.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[3],
            controller, request, global::bgs.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NO_RESPONSE, global::bgs.protocol.NO_RESPONSE.Builder>(done, global::bgs.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void OnWhisperUpdated(
          pb::IRpcController controller,
          global::bgs.protocol.whisper.v1.WhisperUpdatedNotification request,
          global::System.Action<global::bgs.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[4],
            controller, request, global::bgs.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NO_RESPONSE, global::bgs.protocol.NO_RESPONSE.Builder>(done, global::bgs.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void OnAdvanceClearTime(
          pb::IRpcController controller,
          global::bgs.protocol.whisper.v1.AdvanceClearTimeNotification request,
          global::System.Action<global::bgs.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[5],
            controller, request, global::bgs.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NO_RESPONSE, global::bgs.protocol.NO_RESPONSE.Builder>(done, global::bgs.protocol.NO_RESPONSE.DefaultInstance));
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
