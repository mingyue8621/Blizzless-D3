// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bgs.protocol.session.v1 {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class SessionService {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_CreateSessionRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.CreateSessionRequest, global::bgs.protocol.session.v1.CreateSessionRequest.Builder> internal__static_bgs_protocol_session_v1_CreateSessionRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_CreateSessionResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.CreateSessionResponse, global::bgs.protocol.session.v1.CreateSessionResponse.Builder> internal__static_bgs_protocol_session_v1_CreateSessionResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_UpdateSessionRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.UpdateSessionRequest, global::bgs.protocol.session.v1.UpdateSessionRequest.Builder> internal__static_bgs_protocol_session_v1_UpdateSessionRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_DestroySessionRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.DestroySessionRequest, global::bgs.protocol.session.v1.DestroySessionRequest.Builder> internal__static_bgs_protocol_session_v1_DestroySessionRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_GetSessionStateByBenefactorRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.GetSessionStateByBenefactorRequest, global::bgs.protocol.session.v1.GetSessionStateByBenefactorRequest.Builder> internal__static_bgs_protocol_session_v1_GetSessionStateByBenefactorRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_GetSessionStateByBenefactorResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.GetSessionStateByBenefactorResponse, global::bgs.protocol.session.v1.GetSessionStateByBenefactorResponse.Builder> internal__static_bgs_protocol_session_v1_GetSessionStateByBenefactorResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_MarkSessionsAliveRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.MarkSessionsAliveRequest, global::bgs.protocol.session.v1.MarkSessionsAliveRequest.Builder> internal__static_bgs_protocol_session_v1_MarkSessionsAliveRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_MarkSessionsAliveResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.MarkSessionsAliveResponse, global::bgs.protocol.session.v1.MarkSessionsAliveResponse.Builder> internal__static_bgs_protocol_session_v1_MarkSessionsAliveResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_GetSessionStateRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.GetSessionStateRequest, global::bgs.protocol.session.v1.GetSessionStateRequest.Builder> internal__static_bgs_protocol_session_v1_GetSessionStateRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_GetSessionStateResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.GetSessionStateResponse, global::bgs.protocol.session.v1.GetSessionStateResponse.Builder> internal__static_bgs_protocol_session_v1_GetSessionStateResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_GetSignedSessionStateRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.GetSignedSessionStateRequest, global::bgs.protocol.session.v1.GetSignedSessionStateRequest.Builder> internal__static_bgs_protocol_session_v1_GetSignedSessionStateRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_GetSignedSessionStateResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.GetSignedSessionStateResponse, global::bgs.protocol.session.v1.GetSignedSessionStateResponse.Builder> internal__static_bgs_protocol_session_v1_GetSignedSessionStateResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_RefreshSessionKeyRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.RefreshSessionKeyRequest, global::bgs.protocol.session.v1.RefreshSessionKeyRequest.Builder> internal__static_bgs_protocol_session_v1_RefreshSessionKeyRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_RefreshSessionKeyResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.RefreshSessionKeyResponse, global::bgs.protocol.session.v1.RefreshSessionKeyResponse.Builder> internal__static_bgs_protocol_session_v1_RefreshSessionKeyResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_SessionCreatedNotification__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.SessionCreatedNotification, global::bgs.protocol.session.v1.SessionCreatedNotification.Builder> internal__static_bgs_protocol_session_v1_SessionCreatedNotification__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_SessionDestroyedNotification__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.SessionDestroyedNotification, global::bgs.protocol.session.v1.SessionDestroyedNotification.Builder> internal__static_bgs_protocol_session_v1_SessionDestroyedNotification__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_SessionUpdatedNotification__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.SessionUpdatedNotification, global::bgs.protocol.session.v1.SessionUpdatedNotification.Builder> internal__static_bgs_protocol_session_v1_SessionUpdatedNotification__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_session_v1_SessionGameTimeWarningNotification__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.SessionGameTimeWarningNotification, global::bgs.protocol.session.v1.SessionGameTimeWarningNotification.Builder> internal__static_bgs_protocol_session_v1_SessionGameTimeWarningNotification__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static SessionService() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "CidiZ3MvbG93L3BiL2NsaWVudC9zZXNzaW9uX3NlcnZpY2UucHJvdG8SF2Jn" + 
            "cy5wcm90b2NvbC5zZXNzaW9uLnYxGiViZ3MvbG93L3BiL2NsaWVudC9hY2Nv" + 
            "dW50X3R5cGVzLnByb3RvGiFiZ3MvbG93L3BiL2NsaWVudC9ycGNfdHlwZXMu" + 
            "cHJvdG8aJWJncy9sb3cvcGIvY2xpZW50L3Nlc3Npb25fdHlwZXMucHJvdG8i" + 
            "xAMKFENyZWF0ZVNlc3Npb25SZXF1ZXN0Ej0KCGlkZW50aXR5GAEgASgLMiEu" + 
            "YmdzLnByb3RvY29sLmFjY291bnQudjEuSWRlbnRpdHlSCGlkZW50aXR5EhoK" + 
            "CHBsYXRmb3JtGAIgASgHUghwbGF0Zm9ybRIWCgZsb2NhbGUYAyABKAdSBmxv" + 
            "Y2FsZRIlCg5jbGllbnRfYWRkcmVzcxgEIAEoCVINY2xpZW50QWRkcmVzcxIv" + 
            "ChNhcHBsaWNhdGlvbl92ZXJzaW9uGAUgASgFUhJhcHBsaWNhdGlvblZlcnNp" + 
            "b24SHQoKdXNlcl9hZ2VudBgGIAEoCVIJdXNlckFnZW50Eh8KC3Nlc3Npb25f" + 
            "a2V5GAcgASgMUgpzZXNzaW9uS2V5EkEKB29wdGlvbnMYCCABKAsyJy5iZ3Mu" + 
            "cHJvdG9jb2wuc2Vzc2lvbi52MS5TZXNzaW9uT3B0aW9uc1IHb3B0aW9ucxI1" + 
            "ChNyZXF1aXJlc19tYXJrX2FsaXZlGAkgASgIOgVmYWxzZVIRcmVxdWlyZXNN" + 
            "YXJrQWxpdmUSHwoLbWFjX2FkZHJlc3MYCiABKAlSCm1hY0FkZHJlc3M6BoL5" + 
            "KwIIASI2ChVDcmVhdGVTZXNzaW9uUmVzcG9uc2USHQoKc2Vzc2lvbl9pZBgB" + 
            "IAEoCVIJc2Vzc2lvbklkIr8BChRVcGRhdGVTZXNzaW9uUmVxdWVzdBI9Cghp" + 
            "ZGVudGl0eRgBIAEoCzIhLmJncy5wcm90b2NvbC5hY2NvdW50LnYxLklkZW50" + 
            "aXR5UghpZGVudGl0eRJBCgdvcHRpb25zGAIgASgLMicuYmdzLnByb3RvY29s" + 
            "LnNlc3Npb24udjEuU2Vzc2lvbk9wdGlvbnNSB29wdGlvbnMSHQoKc2Vzc2lv" + 
            "bl9pZBgDIAEoCVIJc2Vzc2lvbklkOgaC+SsCCAEifQoVRGVzdHJveVNlc3Np" + 
            "b25SZXF1ZXN0Ej0KCGlkZW50aXR5GAEgASgLMiEuYmdzLnByb3RvY29sLmFj" + 
            "Y291bnQudjEuSWRlbnRpdHlSCGlkZW50aXR5Eh0KCnNlc3Npb25faWQYAiAB" + 
            "KAlSCXNlc3Npb25JZDoGgvkrAggBIucBCiJHZXRTZXNzaW9uU3RhdGVCeUJl" + 
            "bmVmYWN0b3JSZXF1ZXN0ElcKEWJlbmVmYWN0b3JfaGFuZGxlGAEgASgLMiou" + 
            "YmdzLnByb3RvY29sLmFjY291bnQudjEuR2FtZUFjY291bnRIYW5kbGVSEGJl" + 
            "bmVmYWN0b3JIYW5kbGUSPwoYaW5jbHVkZV9iaWxsaW5nX2Rpc2FibGVkGAIg" + 
            "ASgIOgVmYWxzZVIWaW5jbHVkZUJpbGxpbmdEaXNhYmxlZBInCg9iZW5lZmFj" + 
            "dG9yX3V1aWQYAyABKAlSDmJlbmVmYWN0b3JVdWlkIvABCiNHZXRTZXNzaW9u" + 
            "U3RhdGVCeUJlbmVmYWN0b3JSZXNwb25zZRJbChFiZW5lZmFjdG9yX2hhbmRs" + 
            "ZRgBIAEoCzIqLmJncy5wcm90b2NvbC5hY2NvdW50LnYxLkdhbWVBY2NvdW50" + 
            "SGFuZGxlQgIYAVIQYmVuZWZhY3RvckhhbmRsZRI/CgdzZXNzaW9uGAIgAygL" + 
            "MiUuYmdzLnByb3RvY29sLnNlc3Npb24udjEuU2Vzc2lvblN0YXRlUgdzZXNz" + 
            "aW9uEisKEW1pbnV0ZXNfcmVtYWluaW5nGAMgASgNUhBtaW51dGVzUmVtYWlu" + 
            "aW5nImAKGE1hcmtTZXNzaW9uc0FsaXZlUmVxdWVzdBJECgdzZXNzaW9uGAEg" + 
            "AygLMiouYmdzLnByb3RvY29sLnNlc3Npb24udjEuU2Vzc2lvbklkZW50aWZp" + 
            "ZXJSB3Nlc3Npb24ibgoZTWFya1Nlc3Npb25zQWxpdmVSZXNwb25zZRJRCg5m" + 
            "YWlsZWRfc2Vzc2lvbhgBIAMoCzIqLmJncy5wcm90b2NvbC5zZXNzaW9uLnYx" + 
            "LlNlc3Npb25JZGVudGlmaWVyUg1mYWlsZWRTZXNzaW9uIp0BChZHZXRTZXNz" + 
            "aW9uU3RhdGVSZXF1ZXN0EkIKBmhhbmRsZRgBIAEoCzIqLmJncy5wcm90b2Nv" + 
            "bC5hY2NvdW50LnYxLkdhbWVBY2NvdW50SGFuZGxlUgZoYW5kbGUSPwoYaW5j" + 
            "bHVkZV9iaWxsaW5nX2Rpc2FibGVkGAIgASgIOgVmYWxzZVIWaW5jbHVkZUJp" + 
            "bGxpbmdEaXNhYmxlZCKiAQoXR2V0U2Vzc2lvblN0YXRlUmVzcG9uc2USRgoG" + 
            "aGFuZGxlGAEgASgLMiouYmdzLnByb3RvY29sLmFjY291bnQudjEuR2FtZUFj" + 
            "Y291bnRIYW5kbGVCAhgBUgZoYW5kbGUSPwoHc2Vzc2lvbhgCIAEoCzIlLmJn" + 
            "cy5wcm90b2NvbC5zZXNzaW9uLnYxLlNlc3Npb25TdGF0ZVIHc2Vzc2lvbiJl" + 
            "ChxHZXRTaWduZWRTZXNzaW9uU3RhdGVSZXF1ZXN0EkUKCGFnZW50X2lkGAEg" + 
            "ASgLMiouYmdzLnByb3RvY29sLmFjY291bnQudjEuR2FtZUFjY291bnRIYW5k" + 
            "bGVSB2FnZW50SWQiNQodR2V0U2lnbmVkU2Vzc2lvblN0YXRlUmVzcG9uc2US" + 
            "FAoFdG9rZW4YASABKAlSBXRva2VuIkMKGFJlZnJlc2hTZXNzaW9uS2V5UmVx" + 
            "dWVzdBInCgtzZXNzaW9uX2tleRgBIAEoDEIGgvkrAhABUgpzZXNzaW9uS2V5" + 
            "IjwKGVJlZnJlc2hTZXNzaW9uS2V5UmVzcG9uc2USHwoLc2Vzc2lvbl9rZXkY" + 
            "ASABKAxSCnNlc3Npb25LZXki0AEKGlNlc3Npb25DcmVhdGVkTm90aWZpY2F0" + 
            "aW9uEj0KCGlkZW50aXR5GAEgASgLMiEuYmdzLnByb3RvY29sLmFjY291bnQu" + 
            "djEuSWRlbnRpdHlSCGlkZW50aXR5EhYKBnJlYXNvbhgCIAEoDVIGcmVhc29u" + 
            "Eh0KCnNlc3Npb25faWQYAyABKAlSCXNlc3Npb25JZBIfCgtzZXNzaW9uX2tl" + 
            "eRgEIAEoDFIKc2Vzc2lvbktleRIbCgljbGllbnRfaWQYBSABKAlSCGNsaWVu" + 
            "dElkIpQBChxTZXNzaW9uRGVzdHJveWVkTm90aWZpY2F0aW9uEj0KCGlkZW50" + 
            "aXR5GAEgASgLMiEuYmdzLnByb3RvY29sLmFjY291bnQudjEuSWRlbnRpdHlS" + 
            "CGlkZW50aXR5EhYKBnJlYXNvbhgCIAEoDVIGcmVhc29uEh0KCnNlc3Npb25f" + 
            "aWQYAyABKAlSCXNlc3Npb25JZCKSAQoaU2Vzc2lvblVwZGF0ZWROb3RpZmlj" + 
            "YXRpb24SPQoIaWRlbnRpdHkYASABKAsyIS5iZ3MucHJvdG9jb2wuYWNjb3Vu" + 
            "dC52MS5JZGVudGl0eVIIaWRlbnRpdHkSFgoGcmVhc29uGAIgASgNUgZyZWFz" + 
            "b24SHQoKc2Vzc2lvbl9pZBgDIAEoCVIJc2Vzc2lvbklkIuwBCiJTZXNzaW9u" + 
            "R2FtZVRpbWVXYXJuaW5nTm90aWZpY2F0aW9uEj0KCGlkZW50aXR5GAEgASgL" + 
            "MiEuYmdzLnByb3RvY29sLmFjY291bnQudjEuSWRlbnRpdHlSCGlkZW50aXR5" + 
            "Eh0KCnNlc3Npb25faWQYAiABKAlSCXNlc3Npb25JZBI9ChtyZW1haW5pbmdf" + 
            "dGltZV9kdXJhdGlvbl9taW4YAyABKA1SGHJlbWFpbmluZ1RpbWVEdXJhdGlv" + 
            "bk1pbhIpChByZXN0cmljdGlvbl90eXBlGAQgASgNUg9yZXN0cmljdGlvblR5" + 
            "cGUyiAQKD1Nlc3Npb25MaXN0ZW5lchJqChBPblNlc3Npb25DcmVhdGVkEjMu" + 
            "YmdzLnByb3RvY29sLnNlc3Npb24udjEuU2Vzc2lvbkNyZWF0ZWROb3RpZmlj" + 
            "YXRpb24aGS5iZ3MucHJvdG9jb2wuTk9fUkVTUE9OU0UiBoL5KwIIARJuChJP" + 
            "blNlc3Npb25EZXN0cm95ZWQSNS5iZ3MucHJvdG9jb2wuc2Vzc2lvbi52MS5T" + 
            "ZXNzaW9uRGVzdHJveWVkTm90aWZpY2F0aW9uGhkuYmdzLnByb3RvY29sLk5P" + 
            "X1JFU1BPTlNFIgaC+SsCCAISagoQT25TZXNzaW9uVXBkYXRlZBIzLmJncy5w" + 
            "cm90b2NvbC5zZXNzaW9uLnYxLlNlc3Npb25VcGRhdGVkTm90aWZpY2F0aW9u" + 
            "GhkuYmdzLnByb3RvY29sLk5PX1JFU1BPTlNFIgaC+SsCCAMSegoYT25TZXNz" + 
            "aW9uR2FtZVRpbWVXYXJuaW5nEjsuYmdzLnByb3RvY29sLnNlc3Npb24udjEu" + 
            "U2Vzc2lvbkdhbWVUaW1lV2FybmluZ05vdGlmaWNhdGlvbhoZLmJncy5wcm90" + 
            "b2NvbC5OT19SRVNQT05TRSIGgvkrAggEGjGC+SsnCiVibmV0LnByb3RvY29s" + 
            "LnNlc3Npb24uU2Vzc2lvbkxpc3RlbmVyivkrAggBMrQICg5TZXNzaW9uU2Vy" + 
            "dmljZRJ2Cg1DcmVhdGVTZXNzaW9uEi0uYmdzLnByb3RvY29sLnNlc3Npb24u" + 
            "djEuQ3JlYXRlU2Vzc2lvblJlcXVlc3QaLi5iZ3MucHJvdG9jb2wuc2Vzc2lv" + 
            "bi52MS5DcmVhdGVTZXNzaW9uUmVzcG9uc2UiBoL5KwIIARJeCg5EZXN0cm95" + 
            "U2Vzc2lvbhIuLmJncy5wcm90b2NvbC5zZXNzaW9uLnYxLkRlc3Ryb3lTZXNz" + 
            "aW9uUmVxdWVzdBoULmJncy5wcm90b2NvbC5Ob0RhdGEiBoL5KwIIAhJcCg1V" + 
            "cGRhdGVTZXNzaW9uEi0uYmdzLnByb3RvY29sLnNlc3Npb24udjEuVXBkYXRl" + 
            "U2Vzc2lvblJlcXVlc3QaFC5iZ3MucHJvdG9jb2wuTm9EYXRhIgaC+SsCCAUS" + 
            "oAEKG0dldFNlc3Npb25TdGF0ZUJ5QmVuZWZhY3RvchI7LmJncy5wcm90b2Nv" + 
            "bC5zZXNzaW9uLnYxLkdldFNlc3Npb25TdGF0ZUJ5QmVuZWZhY3RvclJlcXVl" + 
            "c3QaPC5iZ3MucHJvdG9jb2wuc2Vzc2lvbi52MS5HZXRTZXNzaW9uU3RhdGVC" + 
            "eUJlbmVmYWN0b3JSZXNwb25zZSIGgvkrAggHEoIBChFNYXJrU2Vzc2lvbnNB" + 
            "bGl2ZRIxLmJncy5wcm90b2NvbC5zZXNzaW9uLnYxLk1hcmtTZXNzaW9uc0Fs" + 
            "aXZlUmVxdWVzdBoyLmJncy5wcm90b2NvbC5zZXNzaW9uLnYxLk1hcmtTZXNz" + 
            "aW9uc0FsaXZlUmVzcG9uc2UiBoL5KwIICBJ8Cg9HZXRTZXNzaW9uU3RhdGUS" + 
            "Ly5iZ3MucHJvdG9jb2wuc2Vzc2lvbi52MS5HZXRTZXNzaW9uU3RhdGVSZXF1" + 
            "ZXN0GjAuYmdzLnByb3RvY29sLnNlc3Npb24udjEuR2V0U2Vzc2lvblN0YXRl" + 
            "UmVzcG9uc2UiBoL5KwIICRKOAQoVR2V0U2lnbmVkU2Vzc2lvblN0YXRlEjUu" + 
            "YmdzLnByb3RvY29sLnNlc3Npb24udjEuR2V0U2lnbmVkU2Vzc2lvblN0YXRl" + 
            "UmVxdWVzdBo2LmJncy5wcm90b2NvbC5zZXNzaW9uLnYxLkdldFNpZ25lZFNl" + 
            "c3Npb25TdGF0ZVJlc3BvbnNlIgaC+SsCCAoSggEKEVJlZnJlc2hTZXNzaW9u" + 
            "S2V5EjEuYmdzLnByb3RvY29sLnNlc3Npb24udjEuUmVmcmVzaFNlc3Npb25L" + 
            "ZXlSZXF1ZXN0GjIuYmdzLnByb3RvY29sLnNlc3Npb24udjEuUmVmcmVzaFNl" + 
            "c3Npb25LZXlSZXNwb25zZSIGgvkrAggLGjCC+SsmCiRibmV0LnByb3RvY29s" + 
            "LnNlc3Npb24uU2Vzc2lvblNlcnZpY2WK+SsCEAFCA4ABAA==");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_bgs_protocol_session_v1_CreateSessionRequest__Descriptor = Descriptor.MessageTypes[0];
          internal__static_bgs_protocol_session_v1_CreateSessionRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.CreateSessionRequest, global::bgs.protocol.session.v1.CreateSessionRequest.Builder>(internal__static_bgs_protocol_session_v1_CreateSessionRequest__Descriptor,
                  new string[] { "Identity", "Platform", "Locale", "ClientAddress", "ApplicationVersion", "UserAgent", "SessionKey", "Options", "RequiresMarkAlive", "MacAddress", });
          internal__static_bgs_protocol_session_v1_CreateSessionResponse__Descriptor = Descriptor.MessageTypes[1];
          internal__static_bgs_protocol_session_v1_CreateSessionResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.CreateSessionResponse, global::bgs.protocol.session.v1.CreateSessionResponse.Builder>(internal__static_bgs_protocol_session_v1_CreateSessionResponse__Descriptor,
                  new string[] { "SessionId", });
          internal__static_bgs_protocol_session_v1_UpdateSessionRequest__Descriptor = Descriptor.MessageTypes[2];
          internal__static_bgs_protocol_session_v1_UpdateSessionRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.UpdateSessionRequest, global::bgs.protocol.session.v1.UpdateSessionRequest.Builder>(internal__static_bgs_protocol_session_v1_UpdateSessionRequest__Descriptor,
                  new string[] { "Identity", "Options", "SessionId", });
          internal__static_bgs_protocol_session_v1_DestroySessionRequest__Descriptor = Descriptor.MessageTypes[3];
          internal__static_bgs_protocol_session_v1_DestroySessionRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.DestroySessionRequest, global::bgs.protocol.session.v1.DestroySessionRequest.Builder>(internal__static_bgs_protocol_session_v1_DestroySessionRequest__Descriptor,
                  new string[] { "Identity", "SessionId", });
          internal__static_bgs_protocol_session_v1_GetSessionStateByBenefactorRequest__Descriptor = Descriptor.MessageTypes[4];
          internal__static_bgs_protocol_session_v1_GetSessionStateByBenefactorRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.GetSessionStateByBenefactorRequest, global::bgs.protocol.session.v1.GetSessionStateByBenefactorRequest.Builder>(internal__static_bgs_protocol_session_v1_GetSessionStateByBenefactorRequest__Descriptor,
                  new string[] { "BenefactorHandle", "IncludeBillingDisabled", "BenefactorUuid", });
          internal__static_bgs_protocol_session_v1_GetSessionStateByBenefactorResponse__Descriptor = Descriptor.MessageTypes[5];
          internal__static_bgs_protocol_session_v1_GetSessionStateByBenefactorResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.GetSessionStateByBenefactorResponse, global::bgs.protocol.session.v1.GetSessionStateByBenefactorResponse.Builder>(internal__static_bgs_protocol_session_v1_GetSessionStateByBenefactorResponse__Descriptor,
                  new string[] { "BenefactorHandle", "Session", "MinutesRemaining", });
          internal__static_bgs_protocol_session_v1_MarkSessionsAliveRequest__Descriptor = Descriptor.MessageTypes[6];
          internal__static_bgs_protocol_session_v1_MarkSessionsAliveRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.MarkSessionsAliveRequest, global::bgs.protocol.session.v1.MarkSessionsAliveRequest.Builder>(internal__static_bgs_protocol_session_v1_MarkSessionsAliveRequest__Descriptor,
                  new string[] { "Session", });
          internal__static_bgs_protocol_session_v1_MarkSessionsAliveResponse__Descriptor = Descriptor.MessageTypes[7];
          internal__static_bgs_protocol_session_v1_MarkSessionsAliveResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.MarkSessionsAliveResponse, global::bgs.protocol.session.v1.MarkSessionsAliveResponse.Builder>(internal__static_bgs_protocol_session_v1_MarkSessionsAliveResponse__Descriptor,
                  new string[] { "FailedSession", });
          internal__static_bgs_protocol_session_v1_GetSessionStateRequest__Descriptor = Descriptor.MessageTypes[8];
          internal__static_bgs_protocol_session_v1_GetSessionStateRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.GetSessionStateRequest, global::bgs.protocol.session.v1.GetSessionStateRequest.Builder>(internal__static_bgs_protocol_session_v1_GetSessionStateRequest__Descriptor,
                  new string[] { "Handle", "IncludeBillingDisabled", });
          internal__static_bgs_protocol_session_v1_GetSessionStateResponse__Descriptor = Descriptor.MessageTypes[9];
          internal__static_bgs_protocol_session_v1_GetSessionStateResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.GetSessionStateResponse, global::bgs.protocol.session.v1.GetSessionStateResponse.Builder>(internal__static_bgs_protocol_session_v1_GetSessionStateResponse__Descriptor,
                  new string[] { "Handle", "Session", });
          internal__static_bgs_protocol_session_v1_GetSignedSessionStateRequest__Descriptor = Descriptor.MessageTypes[10];
          internal__static_bgs_protocol_session_v1_GetSignedSessionStateRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.GetSignedSessionStateRequest, global::bgs.protocol.session.v1.GetSignedSessionStateRequest.Builder>(internal__static_bgs_protocol_session_v1_GetSignedSessionStateRequest__Descriptor,
                  new string[] { "AgentId", });
          internal__static_bgs_protocol_session_v1_GetSignedSessionStateResponse__Descriptor = Descriptor.MessageTypes[11];
          internal__static_bgs_protocol_session_v1_GetSignedSessionStateResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.GetSignedSessionStateResponse, global::bgs.protocol.session.v1.GetSignedSessionStateResponse.Builder>(internal__static_bgs_protocol_session_v1_GetSignedSessionStateResponse__Descriptor,
                  new string[] { "Token", });
          internal__static_bgs_protocol_session_v1_RefreshSessionKeyRequest__Descriptor = Descriptor.MessageTypes[12];
          internal__static_bgs_protocol_session_v1_RefreshSessionKeyRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.RefreshSessionKeyRequest, global::bgs.protocol.session.v1.RefreshSessionKeyRequest.Builder>(internal__static_bgs_protocol_session_v1_RefreshSessionKeyRequest__Descriptor,
                  new string[] { "SessionKey", });
          internal__static_bgs_protocol_session_v1_RefreshSessionKeyResponse__Descriptor = Descriptor.MessageTypes[13];
          internal__static_bgs_protocol_session_v1_RefreshSessionKeyResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.RefreshSessionKeyResponse, global::bgs.protocol.session.v1.RefreshSessionKeyResponse.Builder>(internal__static_bgs_protocol_session_v1_RefreshSessionKeyResponse__Descriptor,
                  new string[] { "SessionKey", });
          internal__static_bgs_protocol_session_v1_SessionCreatedNotification__Descriptor = Descriptor.MessageTypes[14];
          internal__static_bgs_protocol_session_v1_SessionCreatedNotification__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.SessionCreatedNotification, global::bgs.protocol.session.v1.SessionCreatedNotification.Builder>(internal__static_bgs_protocol_session_v1_SessionCreatedNotification__Descriptor,
                  new string[] { "Identity", "Reason", "SessionId", "SessionKey", "ClientId", });
          internal__static_bgs_protocol_session_v1_SessionDestroyedNotification__Descriptor = Descriptor.MessageTypes[15];
          internal__static_bgs_protocol_session_v1_SessionDestroyedNotification__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.SessionDestroyedNotification, global::bgs.protocol.session.v1.SessionDestroyedNotification.Builder>(internal__static_bgs_protocol_session_v1_SessionDestroyedNotification__Descriptor,
                  new string[] { "Identity", "Reason", "SessionId", });
          internal__static_bgs_protocol_session_v1_SessionUpdatedNotification__Descriptor = Descriptor.MessageTypes[16];
          internal__static_bgs_protocol_session_v1_SessionUpdatedNotification__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.SessionUpdatedNotification, global::bgs.protocol.session.v1.SessionUpdatedNotification.Builder>(internal__static_bgs_protocol_session_v1_SessionUpdatedNotification__Descriptor,
                  new string[] { "Identity", "Reason", "SessionId", });
          internal__static_bgs_protocol_session_v1_SessionGameTimeWarningNotification__Descriptor = Descriptor.MessageTypes[17];
          internal__static_bgs_protocol_session_v1_SessionGameTimeWarningNotification__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.session.v1.SessionGameTimeWarningNotification, global::bgs.protocol.session.v1.SessionGameTimeWarningNotification.Builder>(internal__static_bgs_protocol_session_v1_SessionGameTimeWarningNotification__Descriptor,
                  new string[] { "Identity", "SessionId", "RemainingTimeDurationMin", "RestrictionType", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::bgs.protocol.account.v1.AccountTypes.RegisterAllExtensions(registry);
          global::bgs.protocol.RpcTypes.RegisterAllExtensions(registry);
          global::bgs.protocol.session.v1.SessionTypes.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::bgs.protocol.account.v1.AccountTypes.Descriptor, 
            global::bgs.protocol.RpcTypes.Descriptor, 
            global::bgs.protocol.session.v1.SessionTypes.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CreateSessionRequest : pb::GeneratedMessage<CreateSessionRequest, CreateSessionRequest.Builder> {
    private CreateSessionRequest() { }
    private static readonly CreateSessionRequest defaultInstance = new CreateSessionRequest().MakeReadOnly();
    private static readonly string[] _createSessionRequestFieldNames = new string[] { "application_version", "client_address", "identity", "locale", "mac_address", "options", "platform", "requires_mark_alive", "session_key", "user_agent" };
    private static readonly uint[] _createSessionRequestFieldTags = new uint[] { 40, 34, 10, 29, 82, 66, 21, 72, 58, 50 };
    public static CreateSessionRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateSessionRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreateSessionRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_CreateSessionRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateSessionRequest, CreateSessionRequest.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_CreateSessionRequest__FieldAccessorTable; }
    }
    
    public const int IdentityFieldNumber = 1;
    private bool hasIdentity;
    private global::bgs.protocol.account.v1.Identity identity_;
    public bool HasIdentity {
      get { return hasIdentity; }
    }
    public global::bgs.protocol.account.v1.Identity Identity {
      get { return identity_ ?? global::bgs.protocol.account.v1.Identity.DefaultInstance; }
    }
    
    public const int PlatformFieldNumber = 2;
    private bool hasPlatform;
    private uint platform_;
    public bool HasPlatform {
      get { return hasPlatform; }
    }
    public uint Platform {
      get { return platform_; }
    }
    
    public const int LocaleFieldNumber = 3;
    private bool hasLocale;
    private uint locale_;
    public bool HasLocale {
      get { return hasLocale; }
    }
    public uint Locale {
      get { return locale_; }
    }
    
    public const int ClientAddressFieldNumber = 4;
    private bool hasClientAddress;
    private string clientAddress_ = "";
    public bool HasClientAddress {
      get { return hasClientAddress; }
    }
    public string ClientAddress {
      get { return clientAddress_; }
    }
    
    public const int ApplicationVersionFieldNumber = 5;
    private bool hasApplicationVersion;
    private int applicationVersion_;
    public bool HasApplicationVersion {
      get { return hasApplicationVersion; }
    }
    public int ApplicationVersion {
      get { return applicationVersion_; }
    }
    
    public const int UserAgentFieldNumber = 6;
    private bool hasUserAgent;
    private string userAgent_ = "";
    public bool HasUserAgent {
      get { return hasUserAgent; }
    }
    public string UserAgent {
      get { return userAgent_; }
    }
    
    public const int SessionKeyFieldNumber = 7;
    private bool hasSessionKey;
    private pb::ByteString sessionKey_ = pb::ByteString.Empty;
    public bool HasSessionKey {
      get { return hasSessionKey; }
    }
    public pb::ByteString SessionKey {
      get { return sessionKey_; }
    }
    
    public const int OptionsFieldNumber = 8;
    private bool hasOptions;
    private global::bgs.protocol.session.v1.SessionOptions options_;
    public bool HasOptions {
      get { return hasOptions; }
    }
    public global::bgs.protocol.session.v1.SessionOptions Options {
      get { return options_ ?? global::bgs.protocol.session.v1.SessionOptions.DefaultInstance; }
    }
    
    public const int RequiresMarkAliveFieldNumber = 9;
    private bool hasRequiresMarkAlive;
    private bool requiresMarkAlive_;
    public bool HasRequiresMarkAlive {
      get { return hasRequiresMarkAlive; }
    }
    public bool RequiresMarkAlive {
      get { return requiresMarkAlive_; }
    }
    
    public const int MacAddressFieldNumber = 10;
    private bool hasMacAddress;
    private string macAddress_ = "";
    public bool HasMacAddress {
      get { return hasMacAddress; }
    }
    public string MacAddress {
      get { return macAddress_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasIdentity) {
          if (!Identity.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _createSessionRequestFieldNames;
      if (hasIdentity) {
        output.WriteMessage(1, field_names[2], Identity);
      }
      if (hasPlatform) {
        output.WriteFixed32(2, field_names[6], Platform);
      }
      if (hasLocale) {
        output.WriteFixed32(3, field_names[3], Locale);
      }
      if (hasClientAddress) {
        output.WriteString(4, field_names[1], ClientAddress);
      }
      if (hasApplicationVersion) {
        output.WriteInt32(5, field_names[0], ApplicationVersion);
      }
      if (hasUserAgent) {
        output.WriteString(6, field_names[9], UserAgent);
      }
      if (hasSessionKey) {
        output.WriteBytes(7, field_names[8], SessionKey);
      }
      if (hasOptions) {
        output.WriteMessage(8, field_names[5], Options);
      }
      if (hasRequiresMarkAlive) {
        output.WriteBool(9, field_names[7], RequiresMarkAlive);
      }
      if (hasMacAddress) {
        output.WriteString(10, field_names[4], MacAddress);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIdentity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Identity);
        }
        if (hasPlatform) {
          size += pb::CodedOutputStream.ComputeFixed32Size(2, Platform);
        }
        if (hasLocale) {
          size += pb::CodedOutputStream.ComputeFixed32Size(3, Locale);
        }
        if (hasClientAddress) {
          size += pb::CodedOutputStream.ComputeStringSize(4, ClientAddress);
        }
        if (hasApplicationVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, ApplicationVersion);
        }
        if (hasUserAgent) {
          size += pb::CodedOutputStream.ComputeStringSize(6, UserAgent);
        }
        if (hasSessionKey) {
          size += pb::CodedOutputStream.ComputeBytesSize(7, SessionKey);
        }
        if (hasOptions) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, Options);
        }
        if (hasRequiresMarkAlive) {
          size += pb::CodedOutputStream.ComputeBoolSize(9, RequiresMarkAlive);
        }
        if (hasMacAddress) {
          size += pb::CodedOutputStream.ComputeStringSize(10, MacAddress);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateSessionRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateSessionRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateSessionRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateSessionRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateSessionRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateSessionRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateSessionRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateSessionRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateSessionRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateSessionRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreateSessionRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateSessionRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CreateSessionRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreateSessionRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreateSessionRequest result;
      
      private CreateSessionRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CreateSessionRequest original = result;
          result = new CreateSessionRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreateSessionRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.CreateSessionRequest.Descriptor; }
      }
      
      public override CreateSessionRequest DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.CreateSessionRequest.DefaultInstance; }
      }
      
      public override CreateSessionRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateSessionRequest) {
          return MergeFrom((CreateSessionRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateSessionRequest other) {
        if (other == global::bgs.protocol.session.v1.CreateSessionRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdentity) {
          MergeIdentity(other.Identity);
        }
        if (other.HasPlatform) {
          Platform = other.Platform;
        }
        if (other.HasLocale) {
          Locale = other.Locale;
        }
        if (other.HasClientAddress) {
          ClientAddress = other.ClientAddress;
        }
        if (other.HasApplicationVersion) {
          ApplicationVersion = other.ApplicationVersion;
        }
        if (other.HasUserAgent) {
          UserAgent = other.UserAgent;
        }
        if (other.HasSessionKey) {
          SessionKey = other.SessionKey;
        }
        if (other.HasOptions) {
          MergeOptions(other.Options);
        }
        if (other.HasRequiresMarkAlive) {
          RequiresMarkAlive = other.RequiresMarkAlive;
        }
        if (other.HasMacAddress) {
          MacAddress = other.MacAddress;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_createSessionRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _createSessionRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.Identity.Builder subBuilder = global::bgs.protocol.account.v1.Identity.CreateBuilder();
              if (result.hasIdentity) {
                subBuilder.MergeFrom(Identity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Identity = subBuilder.BuildPartial();
              break;
            }
            case 21: {
              result.hasPlatform = input.ReadFixed32(ref result.platform_);
              break;
            }
            case 29: {
              result.hasLocale = input.ReadFixed32(ref result.locale_);
              break;
            }
            case 34: {
              result.hasClientAddress = input.ReadString(ref result.clientAddress_);
              break;
            }
            case 40: {
              result.hasApplicationVersion = input.ReadInt32(ref result.applicationVersion_);
              break;
            }
            case 50: {
              result.hasUserAgent = input.ReadString(ref result.userAgent_);
              break;
            }
            case 58: {
              result.hasSessionKey = input.ReadBytes(ref result.sessionKey_);
              break;
            }
            case 66: {
              global::bgs.protocol.session.v1.SessionOptions.Builder subBuilder = global::bgs.protocol.session.v1.SessionOptions.CreateBuilder();
              if (result.hasOptions) {
                subBuilder.MergeFrom(Options);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Options = subBuilder.BuildPartial();
              break;
            }
            case 72: {
              result.hasRequiresMarkAlive = input.ReadBool(ref result.requiresMarkAlive_);
              break;
            }
            case 82: {
              result.hasMacAddress = input.ReadString(ref result.macAddress_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdentity {
       get { return result.hasIdentity; }
      }
      public global::bgs.protocol.account.v1.Identity Identity {
        get { return result.Identity; }
        set { SetIdentity(value); }
      }
      public Builder SetIdentity(global::bgs.protocol.account.v1.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIdentity = true;
        result.identity_ = value;
        return this;
      }
      public Builder SetIdentity(global::bgs.protocol.account.v1.Identity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasIdentity = true;
        result.identity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeIdentity(global::bgs.protocol.account.v1.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasIdentity &&
            result.identity_ != global::bgs.protocol.account.v1.Identity.DefaultInstance) {
            result.identity_ = global::bgs.protocol.account.v1.Identity.CreateBuilder(result.identity_).MergeFrom(value).BuildPartial();
        } else {
          result.identity_ = value;
        }
        result.hasIdentity = true;
        return this;
      }
      public Builder ClearIdentity() {
        PrepareBuilder();
        result.hasIdentity = false;
        result.identity_ = null;
        return this;
      }
      
      public bool HasPlatform {
        get { return result.hasPlatform; }
      }
      public uint Platform {
        get { return result.Platform; }
        set { SetPlatform(value); }
      }
      public Builder SetPlatform(uint value) {
        PrepareBuilder();
        result.hasPlatform = true;
        result.platform_ = value;
        return this;
      }
      public Builder ClearPlatform() {
        PrepareBuilder();
        result.hasPlatform = false;
        result.platform_ = 0;
        return this;
      }
      
      public bool HasLocale {
        get { return result.hasLocale; }
      }
      public uint Locale {
        get { return result.Locale; }
        set { SetLocale(value); }
      }
      public Builder SetLocale(uint value) {
        PrepareBuilder();
        result.hasLocale = true;
        result.locale_ = value;
        return this;
      }
      public Builder ClearLocale() {
        PrepareBuilder();
        result.hasLocale = false;
        result.locale_ = 0;
        return this;
      }
      
      public bool HasClientAddress {
        get { return result.hasClientAddress; }
      }
      public string ClientAddress {
        get { return result.ClientAddress; }
        set { SetClientAddress(value); }
      }
      public Builder SetClientAddress(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientAddress = true;
        result.clientAddress_ = value;
        return this;
      }
      public Builder ClearClientAddress() {
        PrepareBuilder();
        result.hasClientAddress = false;
        result.clientAddress_ = "";
        return this;
      }
      
      public bool HasApplicationVersion {
        get { return result.hasApplicationVersion; }
      }
      public int ApplicationVersion {
        get { return result.ApplicationVersion; }
        set { SetApplicationVersion(value); }
      }
      public Builder SetApplicationVersion(int value) {
        PrepareBuilder();
        result.hasApplicationVersion = true;
        result.applicationVersion_ = value;
        return this;
      }
      public Builder ClearApplicationVersion() {
        PrepareBuilder();
        result.hasApplicationVersion = false;
        result.applicationVersion_ = 0;
        return this;
      }
      
      public bool HasUserAgent {
        get { return result.hasUserAgent; }
      }
      public string UserAgent {
        get { return result.UserAgent; }
        set { SetUserAgent(value); }
      }
      public Builder SetUserAgent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserAgent = true;
        result.userAgent_ = value;
        return this;
      }
      public Builder ClearUserAgent() {
        PrepareBuilder();
        result.hasUserAgent = false;
        result.userAgent_ = "";
        return this;
      }
      
      public bool HasSessionKey {
        get { return result.hasSessionKey; }
      }
      public pb::ByteString SessionKey {
        get { return result.SessionKey; }
        set { SetSessionKey(value); }
      }
      public Builder SetSessionKey(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionKey = true;
        result.sessionKey_ = value;
        return this;
      }
      public Builder ClearSessionKey() {
        PrepareBuilder();
        result.hasSessionKey = false;
        result.sessionKey_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasOptions {
       get { return result.hasOptions; }
      }
      public global::bgs.protocol.session.v1.SessionOptions Options {
        get { return result.Options; }
        set { SetOptions(value); }
      }
      public Builder SetOptions(global::bgs.protocol.session.v1.SessionOptions value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOptions = true;
        result.options_ = value;
        return this;
      }
      public Builder SetOptions(global::bgs.protocol.session.v1.SessionOptions.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOptions = true;
        result.options_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOptions(global::bgs.protocol.session.v1.SessionOptions value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOptions &&
            result.options_ != global::bgs.protocol.session.v1.SessionOptions.DefaultInstance) {
            result.options_ = global::bgs.protocol.session.v1.SessionOptions.CreateBuilder(result.options_).MergeFrom(value).BuildPartial();
        } else {
          result.options_ = value;
        }
        result.hasOptions = true;
        return this;
      }
      public Builder ClearOptions() {
        PrepareBuilder();
        result.hasOptions = false;
        result.options_ = null;
        return this;
      }
      
      public bool HasRequiresMarkAlive {
        get { return result.hasRequiresMarkAlive; }
      }
      public bool RequiresMarkAlive {
        get { return result.RequiresMarkAlive; }
        set { SetRequiresMarkAlive(value); }
      }
      public Builder SetRequiresMarkAlive(bool value) {
        PrepareBuilder();
        result.hasRequiresMarkAlive = true;
        result.requiresMarkAlive_ = value;
        return this;
      }
      public Builder ClearRequiresMarkAlive() {
        PrepareBuilder();
        result.hasRequiresMarkAlive = false;
        result.requiresMarkAlive_ = false;
        return this;
      }
      
      public bool HasMacAddress {
        get { return result.hasMacAddress; }
      }
      public string MacAddress {
        get { return result.MacAddress; }
        set { SetMacAddress(value); }
      }
      public Builder SetMacAddress(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMacAddress = true;
        result.macAddress_ = value;
        return this;
      }
      public Builder ClearMacAddress() {
        PrepareBuilder();
        result.hasMacAddress = false;
        result.macAddress_ = "";
        return this;
      }
    }
    static CreateSessionRequest() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CreateSessionResponse : pb::GeneratedMessage<CreateSessionResponse, CreateSessionResponse.Builder> {
    private CreateSessionResponse() { }
    private static readonly CreateSessionResponse defaultInstance = new CreateSessionResponse().MakeReadOnly();
    private static readonly string[] _createSessionResponseFieldNames = new string[] { "session_id" };
    private static readonly uint[] _createSessionResponseFieldTags = new uint[] { 10 };
    public static CreateSessionResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateSessionResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreateSessionResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_CreateSessionResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateSessionResponse, CreateSessionResponse.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_CreateSessionResponse__FieldAccessorTable; }
    }
    
    public const int SessionIdFieldNumber = 1;
    private bool hasSessionId;
    private string sessionId_ = "";
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public string SessionId {
      get { return sessionId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _createSessionResponseFieldNames;
      if (hasSessionId) {
        output.WriteString(1, field_names[0], SessionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, SessionId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateSessionResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateSessionResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateSessionResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateSessionResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateSessionResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateSessionResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateSessionResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateSessionResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateSessionResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateSessionResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreateSessionResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateSessionResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CreateSessionResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreateSessionResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreateSessionResponse result;
      
      private CreateSessionResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CreateSessionResponse original = result;
          result = new CreateSessionResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreateSessionResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.CreateSessionResponse.Descriptor; }
      }
      
      public override CreateSessionResponse DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.CreateSessionResponse.DefaultInstance; }
      }
      
      public override CreateSessionResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateSessionResponse) {
          return MergeFrom((CreateSessionResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateSessionResponse other) {
        if (other == global::bgs.protocol.session.v1.CreateSessionResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_createSessionResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _createSessionResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSessionId = input.ReadString(ref result.sessionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSessionId {
        get { return result.hasSessionId; }
      }
      public string SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        PrepareBuilder();
        result.hasSessionId = false;
        result.sessionId_ = "";
        return this;
      }
    }
    static CreateSessionResponse() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class UpdateSessionRequest : pb::GeneratedMessage<UpdateSessionRequest, UpdateSessionRequest.Builder> {
    private UpdateSessionRequest() { }
    private static readonly UpdateSessionRequest defaultInstance = new UpdateSessionRequest().MakeReadOnly();
    private static readonly string[] _updateSessionRequestFieldNames = new string[] { "identity", "options", "session_id" };
    private static readonly uint[] _updateSessionRequestFieldTags = new uint[] { 10, 18, 26 };
    public static UpdateSessionRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UpdateSessionRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UpdateSessionRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_UpdateSessionRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UpdateSessionRequest, UpdateSessionRequest.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_UpdateSessionRequest__FieldAccessorTable; }
    }
    
    public const int IdentityFieldNumber = 1;
    private bool hasIdentity;
    private global::bgs.protocol.account.v1.Identity identity_;
    public bool HasIdentity {
      get { return hasIdentity; }
    }
    public global::bgs.protocol.account.v1.Identity Identity {
      get { return identity_ ?? global::bgs.protocol.account.v1.Identity.DefaultInstance; }
    }
    
    public const int OptionsFieldNumber = 2;
    private bool hasOptions;
    private global::bgs.protocol.session.v1.SessionOptions options_;
    public bool HasOptions {
      get { return hasOptions; }
    }
    public global::bgs.protocol.session.v1.SessionOptions Options {
      get { return options_ ?? global::bgs.protocol.session.v1.SessionOptions.DefaultInstance; }
    }
    
    public const int SessionIdFieldNumber = 3;
    private bool hasSessionId;
    private string sessionId_ = "";
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public string SessionId {
      get { return sessionId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasIdentity) {
          if (!Identity.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _updateSessionRequestFieldNames;
      if (hasIdentity) {
        output.WriteMessage(1, field_names[0], Identity);
      }
      if (hasOptions) {
        output.WriteMessage(2, field_names[1], Options);
      }
      if (hasSessionId) {
        output.WriteString(3, field_names[2], SessionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIdentity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Identity);
        }
        if (hasOptions) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Options);
        }
        if (hasSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SessionId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UpdateSessionRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UpdateSessionRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UpdateSessionRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UpdateSessionRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UpdateSessionRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UpdateSessionRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UpdateSessionRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UpdateSessionRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UpdateSessionRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UpdateSessionRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UpdateSessionRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UpdateSessionRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<UpdateSessionRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UpdateSessionRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UpdateSessionRequest result;
      
      private UpdateSessionRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          UpdateSessionRequest original = result;
          result = new UpdateSessionRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UpdateSessionRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.UpdateSessionRequest.Descriptor; }
      }
      
      public override UpdateSessionRequest DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.UpdateSessionRequest.DefaultInstance; }
      }
      
      public override UpdateSessionRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UpdateSessionRequest) {
          return MergeFrom((UpdateSessionRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UpdateSessionRequest other) {
        if (other == global::bgs.protocol.session.v1.UpdateSessionRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdentity) {
          MergeIdentity(other.Identity);
        }
        if (other.HasOptions) {
          MergeOptions(other.Options);
        }
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_updateSessionRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _updateSessionRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.Identity.Builder subBuilder = global::bgs.protocol.account.v1.Identity.CreateBuilder();
              if (result.hasIdentity) {
                subBuilder.MergeFrom(Identity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Identity = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bgs.protocol.session.v1.SessionOptions.Builder subBuilder = global::bgs.protocol.session.v1.SessionOptions.CreateBuilder();
              if (result.hasOptions) {
                subBuilder.MergeFrom(Options);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Options = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              result.hasSessionId = input.ReadString(ref result.sessionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdentity {
       get { return result.hasIdentity; }
      }
      public global::bgs.protocol.account.v1.Identity Identity {
        get { return result.Identity; }
        set { SetIdentity(value); }
      }
      public Builder SetIdentity(global::bgs.protocol.account.v1.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIdentity = true;
        result.identity_ = value;
        return this;
      }
      public Builder SetIdentity(global::bgs.protocol.account.v1.Identity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasIdentity = true;
        result.identity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeIdentity(global::bgs.protocol.account.v1.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasIdentity &&
            result.identity_ != global::bgs.protocol.account.v1.Identity.DefaultInstance) {
            result.identity_ = global::bgs.protocol.account.v1.Identity.CreateBuilder(result.identity_).MergeFrom(value).BuildPartial();
        } else {
          result.identity_ = value;
        }
        result.hasIdentity = true;
        return this;
      }
      public Builder ClearIdentity() {
        PrepareBuilder();
        result.hasIdentity = false;
        result.identity_ = null;
        return this;
      }
      
      public bool HasOptions {
       get { return result.hasOptions; }
      }
      public global::bgs.protocol.session.v1.SessionOptions Options {
        get { return result.Options; }
        set { SetOptions(value); }
      }
      public Builder SetOptions(global::bgs.protocol.session.v1.SessionOptions value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOptions = true;
        result.options_ = value;
        return this;
      }
      public Builder SetOptions(global::bgs.protocol.session.v1.SessionOptions.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOptions = true;
        result.options_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOptions(global::bgs.protocol.session.v1.SessionOptions value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOptions &&
            result.options_ != global::bgs.protocol.session.v1.SessionOptions.DefaultInstance) {
            result.options_ = global::bgs.protocol.session.v1.SessionOptions.CreateBuilder(result.options_).MergeFrom(value).BuildPartial();
        } else {
          result.options_ = value;
        }
        result.hasOptions = true;
        return this;
      }
      public Builder ClearOptions() {
        PrepareBuilder();
        result.hasOptions = false;
        result.options_ = null;
        return this;
      }
      
      public bool HasSessionId {
        get { return result.hasSessionId; }
      }
      public string SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        PrepareBuilder();
        result.hasSessionId = false;
        result.sessionId_ = "";
        return this;
      }
    }
    static UpdateSessionRequest() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DestroySessionRequest : pb::GeneratedMessage<DestroySessionRequest, DestroySessionRequest.Builder> {
    private DestroySessionRequest() { }
    private static readonly DestroySessionRequest defaultInstance = new DestroySessionRequest().MakeReadOnly();
    private static readonly string[] _destroySessionRequestFieldNames = new string[] { "identity", "session_id" };
    private static readonly uint[] _destroySessionRequestFieldTags = new uint[] { 10, 18 };
    public static DestroySessionRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DestroySessionRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DestroySessionRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_DestroySessionRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DestroySessionRequest, DestroySessionRequest.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_DestroySessionRequest__FieldAccessorTable; }
    }
    
    public const int IdentityFieldNumber = 1;
    private bool hasIdentity;
    private global::bgs.protocol.account.v1.Identity identity_;
    public bool HasIdentity {
      get { return hasIdentity; }
    }
    public global::bgs.protocol.account.v1.Identity Identity {
      get { return identity_ ?? global::bgs.protocol.account.v1.Identity.DefaultInstance; }
    }
    
    public const int SessionIdFieldNumber = 2;
    private bool hasSessionId;
    private string sessionId_ = "";
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public string SessionId {
      get { return sessionId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasIdentity) {
          if (!Identity.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _destroySessionRequestFieldNames;
      if (hasIdentity) {
        output.WriteMessage(1, field_names[0], Identity);
      }
      if (hasSessionId) {
        output.WriteString(2, field_names[1], SessionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIdentity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Identity);
        }
        if (hasSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, SessionId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DestroySessionRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DestroySessionRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DestroySessionRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DestroySessionRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DestroySessionRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DestroySessionRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DestroySessionRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DestroySessionRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DestroySessionRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DestroySessionRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DestroySessionRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DestroySessionRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DestroySessionRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DestroySessionRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DestroySessionRequest result;
      
      private DestroySessionRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          DestroySessionRequest original = result;
          result = new DestroySessionRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DestroySessionRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.DestroySessionRequest.Descriptor; }
      }
      
      public override DestroySessionRequest DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.DestroySessionRequest.DefaultInstance; }
      }
      
      public override DestroySessionRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DestroySessionRequest) {
          return MergeFrom((DestroySessionRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DestroySessionRequest other) {
        if (other == global::bgs.protocol.session.v1.DestroySessionRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdentity) {
          MergeIdentity(other.Identity);
        }
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_destroySessionRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _destroySessionRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.Identity.Builder subBuilder = global::bgs.protocol.account.v1.Identity.CreateBuilder();
              if (result.hasIdentity) {
                subBuilder.MergeFrom(Identity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Identity = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasSessionId = input.ReadString(ref result.sessionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdentity {
       get { return result.hasIdentity; }
      }
      public global::bgs.protocol.account.v1.Identity Identity {
        get { return result.Identity; }
        set { SetIdentity(value); }
      }
      public Builder SetIdentity(global::bgs.protocol.account.v1.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIdentity = true;
        result.identity_ = value;
        return this;
      }
      public Builder SetIdentity(global::bgs.protocol.account.v1.Identity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasIdentity = true;
        result.identity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeIdentity(global::bgs.protocol.account.v1.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasIdentity &&
            result.identity_ != global::bgs.protocol.account.v1.Identity.DefaultInstance) {
            result.identity_ = global::bgs.protocol.account.v1.Identity.CreateBuilder(result.identity_).MergeFrom(value).BuildPartial();
        } else {
          result.identity_ = value;
        }
        result.hasIdentity = true;
        return this;
      }
      public Builder ClearIdentity() {
        PrepareBuilder();
        result.hasIdentity = false;
        result.identity_ = null;
        return this;
      }
      
      public bool HasSessionId {
        get { return result.hasSessionId; }
      }
      public string SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        PrepareBuilder();
        result.hasSessionId = false;
        result.sessionId_ = "";
        return this;
      }
    }
    static DestroySessionRequest() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetSessionStateByBenefactorRequest : pb::GeneratedMessage<GetSessionStateByBenefactorRequest, GetSessionStateByBenefactorRequest.Builder> {
    private GetSessionStateByBenefactorRequest() { }
    private static readonly GetSessionStateByBenefactorRequest defaultInstance = new GetSessionStateByBenefactorRequest().MakeReadOnly();
    private static readonly string[] _getSessionStateByBenefactorRequestFieldNames = new string[] { "benefactor_handle", "benefactor_uuid", "include_billing_disabled" };
    private static readonly uint[] _getSessionStateByBenefactorRequestFieldTags = new uint[] { 10, 26, 16 };
    public static GetSessionStateByBenefactorRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetSessionStateByBenefactorRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetSessionStateByBenefactorRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_GetSessionStateByBenefactorRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetSessionStateByBenefactorRequest, GetSessionStateByBenefactorRequest.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_GetSessionStateByBenefactorRequest__FieldAccessorTable; }
    }
    
    public const int BenefactorHandleFieldNumber = 1;
    private bool hasBenefactorHandle;
    private global::bgs.protocol.account.v1.GameAccountHandle benefactorHandle_;
    public bool HasBenefactorHandle {
      get { return hasBenefactorHandle; }
    }
    public global::bgs.protocol.account.v1.GameAccountHandle BenefactorHandle {
      get { return benefactorHandle_ ?? global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance; }
    }
    
    public const int IncludeBillingDisabledFieldNumber = 2;
    private bool hasIncludeBillingDisabled;
    private bool includeBillingDisabled_;
    public bool HasIncludeBillingDisabled {
      get { return hasIncludeBillingDisabled; }
    }
    public bool IncludeBillingDisabled {
      get { return includeBillingDisabled_; }
    }
    
    public const int BenefactorUuidFieldNumber = 3;
    private bool hasBenefactorUuid;
    private string benefactorUuid_ = "";
    public bool HasBenefactorUuid {
      get { return hasBenefactorUuid; }
    }
    public string BenefactorUuid {
      get { return benefactorUuid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasBenefactorHandle) {
          if (!BenefactorHandle.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getSessionStateByBenefactorRequestFieldNames;
      if (hasBenefactorHandle) {
        output.WriteMessage(1, field_names[0], BenefactorHandle);
      }
      if (hasIncludeBillingDisabled) {
        output.WriteBool(2, field_names[2], IncludeBillingDisabled);
      }
      if (hasBenefactorUuid) {
        output.WriteString(3, field_names[1], BenefactorUuid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBenefactorHandle) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BenefactorHandle);
        }
        if (hasIncludeBillingDisabled) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IncludeBillingDisabled);
        }
        if (hasBenefactorUuid) {
          size += pb::CodedOutputStream.ComputeStringSize(3, BenefactorUuid);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetSessionStateByBenefactorRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetSessionStateByBenefactorRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetSessionStateByBenefactorRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetSessionStateByBenefactorRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetSessionStateByBenefactorRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetSessionStateByBenefactorRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetSessionStateByBenefactorRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetSessionStateByBenefactorRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetSessionStateByBenefactorRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetSessionStateByBenefactorRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetSessionStateByBenefactorRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetSessionStateByBenefactorRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetSessionStateByBenefactorRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetSessionStateByBenefactorRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetSessionStateByBenefactorRequest result;
      
      private GetSessionStateByBenefactorRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetSessionStateByBenefactorRequest original = result;
          result = new GetSessionStateByBenefactorRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetSessionStateByBenefactorRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.GetSessionStateByBenefactorRequest.Descriptor; }
      }
      
      public override GetSessionStateByBenefactorRequest DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.GetSessionStateByBenefactorRequest.DefaultInstance; }
      }
      
      public override GetSessionStateByBenefactorRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetSessionStateByBenefactorRequest) {
          return MergeFrom((GetSessionStateByBenefactorRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetSessionStateByBenefactorRequest other) {
        if (other == global::bgs.protocol.session.v1.GetSessionStateByBenefactorRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBenefactorHandle) {
          MergeBenefactorHandle(other.BenefactorHandle);
        }
        if (other.HasIncludeBillingDisabled) {
          IncludeBillingDisabled = other.IncludeBillingDisabled;
        }
        if (other.HasBenefactorUuid) {
          BenefactorUuid = other.BenefactorUuid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getSessionStateByBenefactorRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getSessionStateByBenefactorRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.GameAccountHandle.Builder subBuilder = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder();
              if (result.hasBenefactorHandle) {
                subBuilder.MergeFrom(BenefactorHandle);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BenefactorHandle = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasIncludeBillingDisabled = input.ReadBool(ref result.includeBillingDisabled_);
              break;
            }
            case 26: {
              result.hasBenefactorUuid = input.ReadString(ref result.benefactorUuid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBenefactorHandle {
       get { return result.hasBenefactorHandle; }
      }
      public global::bgs.protocol.account.v1.GameAccountHandle BenefactorHandle {
        get { return result.BenefactorHandle; }
        set { SetBenefactorHandle(value); }
      }
      public Builder SetBenefactorHandle(global::bgs.protocol.account.v1.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBenefactorHandle = true;
        result.benefactorHandle_ = value;
        return this;
      }
      public Builder SetBenefactorHandle(global::bgs.protocol.account.v1.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBenefactorHandle = true;
        result.benefactorHandle_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBenefactorHandle(global::bgs.protocol.account.v1.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBenefactorHandle &&
            result.benefactorHandle_ != global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance) {
            result.benefactorHandle_ = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder(result.benefactorHandle_).MergeFrom(value).BuildPartial();
        } else {
          result.benefactorHandle_ = value;
        }
        result.hasBenefactorHandle = true;
        return this;
      }
      public Builder ClearBenefactorHandle() {
        PrepareBuilder();
        result.hasBenefactorHandle = false;
        result.benefactorHandle_ = null;
        return this;
      }
      
      public bool HasIncludeBillingDisabled {
        get { return result.hasIncludeBillingDisabled; }
      }
      public bool IncludeBillingDisabled {
        get { return result.IncludeBillingDisabled; }
        set { SetIncludeBillingDisabled(value); }
      }
      public Builder SetIncludeBillingDisabled(bool value) {
        PrepareBuilder();
        result.hasIncludeBillingDisabled = true;
        result.includeBillingDisabled_ = value;
        return this;
      }
      public Builder ClearIncludeBillingDisabled() {
        PrepareBuilder();
        result.hasIncludeBillingDisabled = false;
        result.includeBillingDisabled_ = false;
        return this;
      }
      
      public bool HasBenefactorUuid {
        get { return result.hasBenefactorUuid; }
      }
      public string BenefactorUuid {
        get { return result.BenefactorUuid; }
        set { SetBenefactorUuid(value); }
      }
      public Builder SetBenefactorUuid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBenefactorUuid = true;
        result.benefactorUuid_ = value;
        return this;
      }
      public Builder ClearBenefactorUuid() {
        PrepareBuilder();
        result.hasBenefactorUuid = false;
        result.benefactorUuid_ = "";
        return this;
      }
    }
    static GetSessionStateByBenefactorRequest() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetSessionStateByBenefactorResponse : pb::GeneratedMessage<GetSessionStateByBenefactorResponse, GetSessionStateByBenefactorResponse.Builder> {
    private GetSessionStateByBenefactorResponse() { }
    private static readonly GetSessionStateByBenefactorResponse defaultInstance = new GetSessionStateByBenefactorResponse().MakeReadOnly();
    private static readonly string[] _getSessionStateByBenefactorResponseFieldNames = new string[] { "benefactor_handle", "minutes_remaining", "session" };
    private static readonly uint[] _getSessionStateByBenefactorResponseFieldTags = new uint[] { 10, 24, 18 };
    public static GetSessionStateByBenefactorResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetSessionStateByBenefactorResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetSessionStateByBenefactorResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_GetSessionStateByBenefactorResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetSessionStateByBenefactorResponse, GetSessionStateByBenefactorResponse.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_GetSessionStateByBenefactorResponse__FieldAccessorTable; }
    }
    
    public const int BenefactorHandleFieldNumber = 1;
    private bool hasBenefactorHandle;
    private global::bgs.protocol.account.v1.GameAccountHandle benefactorHandle_;
    [global::System.ObsoleteAttribute()]
    public bool HasBenefactorHandle {
      get { return hasBenefactorHandle; }
    }
    [global::System.ObsoleteAttribute()]
    public global::bgs.protocol.account.v1.GameAccountHandle BenefactorHandle {
      get { return benefactorHandle_ ?? global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance; }
    }
    
    public const int SessionFieldNumber = 2;
    private pbc::PopsicleList<global::bgs.protocol.session.v1.SessionState> session_ = new pbc::PopsicleList<global::bgs.protocol.session.v1.SessionState>();
    public scg::IList<global::bgs.protocol.session.v1.SessionState> SessionList {
      get { return session_; }
    }
    public int SessionCount {
      get { return session_.Count; }
    }
    public global::bgs.protocol.session.v1.SessionState GetSession(int index) {
      return session_[index];
    }
    
    public const int MinutesRemainingFieldNumber = 3;
    private bool hasMinutesRemaining;
    private uint minutesRemaining_;
    public bool HasMinutesRemaining {
      get { return hasMinutesRemaining; }
    }
    public uint MinutesRemaining {
      get { return minutesRemaining_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasBenefactorHandle) {
          if (!BenefactorHandle.IsInitialized) return false;
        }
        foreach (global::bgs.protocol.session.v1.SessionState element in SessionList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getSessionStateByBenefactorResponseFieldNames;
      if (hasBenefactorHandle) {
        output.WriteMessage(1, field_names[0], BenefactorHandle);
      }
      if (session_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], session_);
      }
      if (hasMinutesRemaining) {
        output.WriteUInt32(3, field_names[1], MinutesRemaining);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBenefactorHandle) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BenefactorHandle);
        }
        foreach (global::bgs.protocol.session.v1.SessionState element in SessionList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasMinutesRemaining) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, MinutesRemaining);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetSessionStateByBenefactorResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetSessionStateByBenefactorResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetSessionStateByBenefactorResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetSessionStateByBenefactorResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetSessionStateByBenefactorResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetSessionStateByBenefactorResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetSessionStateByBenefactorResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetSessionStateByBenefactorResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetSessionStateByBenefactorResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetSessionStateByBenefactorResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetSessionStateByBenefactorResponse MakeReadOnly() {
      session_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetSessionStateByBenefactorResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetSessionStateByBenefactorResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetSessionStateByBenefactorResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetSessionStateByBenefactorResponse result;
      
      private GetSessionStateByBenefactorResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetSessionStateByBenefactorResponse original = result;
          result = new GetSessionStateByBenefactorResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetSessionStateByBenefactorResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.GetSessionStateByBenefactorResponse.Descriptor; }
      }
      
      public override GetSessionStateByBenefactorResponse DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.GetSessionStateByBenefactorResponse.DefaultInstance; }
      }
      
      public override GetSessionStateByBenefactorResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetSessionStateByBenefactorResponse) {
          return MergeFrom((GetSessionStateByBenefactorResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetSessionStateByBenefactorResponse other) {
        if (other == global::bgs.protocol.session.v1.GetSessionStateByBenefactorResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBenefactorHandle) {
          MergeBenefactorHandle(other.BenefactorHandle);
        }
        if (other.session_.Count != 0) {
          result.session_.Add(other.session_);
        }
        if (other.HasMinutesRemaining) {
          MinutesRemaining = other.MinutesRemaining;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getSessionStateByBenefactorResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getSessionStateByBenefactorResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.GameAccountHandle.Builder subBuilder = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder();
              if (result.hasBenefactorHandle) {
                subBuilder.MergeFrom(BenefactorHandle);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BenefactorHandle = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.session_, global::bgs.protocol.session.v1.SessionState.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasMinutesRemaining = input.ReadUInt32(ref result.minutesRemaining_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      [global::System.ObsoleteAttribute()]
      public bool HasBenefactorHandle {
       get { return result.hasBenefactorHandle; }
      }
      [global::System.ObsoleteAttribute()]
      public global::bgs.protocol.account.v1.GameAccountHandle BenefactorHandle {
        get { return result.BenefactorHandle; }
        set { SetBenefactorHandle(value); }
      }
      [global::System.ObsoleteAttribute()]
      public Builder SetBenefactorHandle(global::bgs.protocol.account.v1.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBenefactorHandle = true;
        result.benefactorHandle_ = value;
        return this;
      }
      [global::System.ObsoleteAttribute()]
      public Builder SetBenefactorHandle(global::bgs.protocol.account.v1.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBenefactorHandle = true;
        result.benefactorHandle_ = builderForValue.Build();
        return this;
      }
      [global::System.ObsoleteAttribute()]
      public Builder MergeBenefactorHandle(global::bgs.protocol.account.v1.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBenefactorHandle &&
            result.benefactorHandle_ != global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance) {
            result.benefactorHandle_ = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder(result.benefactorHandle_).MergeFrom(value).BuildPartial();
        } else {
          result.benefactorHandle_ = value;
        }
        result.hasBenefactorHandle = true;
        return this;
      }
      [global::System.ObsoleteAttribute()]
      public Builder ClearBenefactorHandle() {
        PrepareBuilder();
        result.hasBenefactorHandle = false;
        result.benefactorHandle_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::bgs.protocol.session.v1.SessionState> SessionList {
        get { return PrepareBuilder().session_; }
      }
      public int SessionCount {
        get { return result.SessionCount; }
      }
      public global::bgs.protocol.session.v1.SessionState GetSession(int index) {
        return result.GetSession(index);
      }
      public Builder SetSession(int index, global::bgs.protocol.session.v1.SessionState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.session_[index] = value;
        return this;
      }
      public Builder SetSession(int index, global::bgs.protocol.session.v1.SessionState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.session_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSession(global::bgs.protocol.session.v1.SessionState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.session_.Add(value);
        return this;
      }
      public Builder AddSession(global::bgs.protocol.session.v1.SessionState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.session_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSession(scg::IEnumerable<global::bgs.protocol.session.v1.SessionState> values) {
        PrepareBuilder();
        result.session_.Add(values);
        return this;
      }
      public Builder ClearSession() {
        PrepareBuilder();
        result.session_.Clear();
        return this;
      }
      
      public bool HasMinutesRemaining {
        get { return result.hasMinutesRemaining; }
      }
      public uint MinutesRemaining {
        get { return result.MinutesRemaining; }
        set { SetMinutesRemaining(value); }
      }
      public Builder SetMinutesRemaining(uint value) {
        PrepareBuilder();
        result.hasMinutesRemaining = true;
        result.minutesRemaining_ = value;
        return this;
      }
      public Builder ClearMinutesRemaining() {
        PrepareBuilder();
        result.hasMinutesRemaining = false;
        result.minutesRemaining_ = 0;
        return this;
      }
    }
    static GetSessionStateByBenefactorResponse() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MarkSessionsAliveRequest : pb::GeneratedMessage<MarkSessionsAliveRequest, MarkSessionsAliveRequest.Builder> {
    private MarkSessionsAliveRequest() { }
    private static readonly MarkSessionsAliveRequest defaultInstance = new MarkSessionsAliveRequest().MakeReadOnly();
    private static readonly string[] _markSessionsAliveRequestFieldNames = new string[] { "session" };
    private static readonly uint[] _markSessionsAliveRequestFieldTags = new uint[] { 10 };
    public static MarkSessionsAliveRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MarkSessionsAliveRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MarkSessionsAliveRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_MarkSessionsAliveRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MarkSessionsAliveRequest, MarkSessionsAliveRequest.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_MarkSessionsAliveRequest__FieldAccessorTable; }
    }
    
    public const int SessionFieldNumber = 1;
    private pbc::PopsicleList<global::bgs.protocol.session.v1.SessionIdentifier> session_ = new pbc::PopsicleList<global::bgs.protocol.session.v1.SessionIdentifier>();
    public scg::IList<global::bgs.protocol.session.v1.SessionIdentifier> SessionList {
      get { return session_; }
    }
    public int SessionCount {
      get { return session_.Count; }
    }
    public global::bgs.protocol.session.v1.SessionIdentifier GetSession(int index) {
      return session_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bgs.protocol.session.v1.SessionIdentifier element in SessionList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _markSessionsAliveRequestFieldNames;
      if (session_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], session_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bgs.protocol.session.v1.SessionIdentifier element in SessionList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MarkSessionsAliveRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarkSessionsAliveRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarkSessionsAliveRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarkSessionsAliveRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarkSessionsAliveRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarkSessionsAliveRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MarkSessionsAliveRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MarkSessionsAliveRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MarkSessionsAliveRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarkSessionsAliveRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MarkSessionsAliveRequest MakeReadOnly() {
      session_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MarkSessionsAliveRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MarkSessionsAliveRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MarkSessionsAliveRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MarkSessionsAliveRequest result;
      
      private MarkSessionsAliveRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          MarkSessionsAliveRequest original = result;
          result = new MarkSessionsAliveRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MarkSessionsAliveRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.MarkSessionsAliveRequest.Descriptor; }
      }
      
      public override MarkSessionsAliveRequest DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.MarkSessionsAliveRequest.DefaultInstance; }
      }
      
      public override MarkSessionsAliveRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MarkSessionsAliveRequest) {
          return MergeFrom((MarkSessionsAliveRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MarkSessionsAliveRequest other) {
        if (other == global::bgs.protocol.session.v1.MarkSessionsAliveRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.session_.Count != 0) {
          result.session_.Add(other.session_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_markSessionsAliveRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _markSessionsAliveRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.session_, global::bgs.protocol.session.v1.SessionIdentifier.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bgs.protocol.session.v1.SessionIdentifier> SessionList {
        get { return PrepareBuilder().session_; }
      }
      public int SessionCount {
        get { return result.SessionCount; }
      }
      public global::bgs.protocol.session.v1.SessionIdentifier GetSession(int index) {
        return result.GetSession(index);
      }
      public Builder SetSession(int index, global::bgs.protocol.session.v1.SessionIdentifier value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.session_[index] = value;
        return this;
      }
      public Builder SetSession(int index, global::bgs.protocol.session.v1.SessionIdentifier.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.session_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSession(global::bgs.protocol.session.v1.SessionIdentifier value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.session_.Add(value);
        return this;
      }
      public Builder AddSession(global::bgs.protocol.session.v1.SessionIdentifier.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.session_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSession(scg::IEnumerable<global::bgs.protocol.session.v1.SessionIdentifier> values) {
        PrepareBuilder();
        result.session_.Add(values);
        return this;
      }
      public Builder ClearSession() {
        PrepareBuilder();
        result.session_.Clear();
        return this;
      }
    }
    static MarkSessionsAliveRequest() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MarkSessionsAliveResponse : pb::GeneratedMessage<MarkSessionsAliveResponse, MarkSessionsAliveResponse.Builder> {
    private MarkSessionsAliveResponse() { }
    private static readonly MarkSessionsAliveResponse defaultInstance = new MarkSessionsAliveResponse().MakeReadOnly();
    private static readonly string[] _markSessionsAliveResponseFieldNames = new string[] { "failed_session" };
    private static readonly uint[] _markSessionsAliveResponseFieldTags = new uint[] { 10 };
    public static MarkSessionsAliveResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MarkSessionsAliveResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MarkSessionsAliveResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_MarkSessionsAliveResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MarkSessionsAliveResponse, MarkSessionsAliveResponse.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_MarkSessionsAliveResponse__FieldAccessorTable; }
    }
    
    public const int FailedSessionFieldNumber = 1;
    private pbc::PopsicleList<global::bgs.protocol.session.v1.SessionIdentifier> failedSession_ = new pbc::PopsicleList<global::bgs.protocol.session.v1.SessionIdentifier>();
    public scg::IList<global::bgs.protocol.session.v1.SessionIdentifier> FailedSessionList {
      get { return failedSession_; }
    }
    public int FailedSessionCount {
      get { return failedSession_.Count; }
    }
    public global::bgs.protocol.session.v1.SessionIdentifier GetFailedSession(int index) {
      return failedSession_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bgs.protocol.session.v1.SessionIdentifier element in FailedSessionList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _markSessionsAliveResponseFieldNames;
      if (failedSession_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], failedSession_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bgs.protocol.session.v1.SessionIdentifier element in FailedSessionList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MarkSessionsAliveResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarkSessionsAliveResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarkSessionsAliveResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarkSessionsAliveResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarkSessionsAliveResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarkSessionsAliveResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MarkSessionsAliveResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MarkSessionsAliveResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MarkSessionsAliveResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarkSessionsAliveResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MarkSessionsAliveResponse MakeReadOnly() {
      failedSession_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MarkSessionsAliveResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MarkSessionsAliveResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MarkSessionsAliveResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MarkSessionsAliveResponse result;
      
      private MarkSessionsAliveResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          MarkSessionsAliveResponse original = result;
          result = new MarkSessionsAliveResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MarkSessionsAliveResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.MarkSessionsAliveResponse.Descriptor; }
      }
      
      public override MarkSessionsAliveResponse DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.MarkSessionsAliveResponse.DefaultInstance; }
      }
      
      public override MarkSessionsAliveResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MarkSessionsAliveResponse) {
          return MergeFrom((MarkSessionsAliveResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MarkSessionsAliveResponse other) {
        if (other == global::bgs.protocol.session.v1.MarkSessionsAliveResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.failedSession_.Count != 0) {
          result.failedSession_.Add(other.failedSession_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_markSessionsAliveResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _markSessionsAliveResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.failedSession_, global::bgs.protocol.session.v1.SessionIdentifier.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bgs.protocol.session.v1.SessionIdentifier> FailedSessionList {
        get { return PrepareBuilder().failedSession_; }
      }
      public int FailedSessionCount {
        get { return result.FailedSessionCount; }
      }
      public global::bgs.protocol.session.v1.SessionIdentifier GetFailedSession(int index) {
        return result.GetFailedSession(index);
      }
      public Builder SetFailedSession(int index, global::bgs.protocol.session.v1.SessionIdentifier value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.failedSession_[index] = value;
        return this;
      }
      public Builder SetFailedSession(int index, global::bgs.protocol.session.v1.SessionIdentifier.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.failedSession_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFailedSession(global::bgs.protocol.session.v1.SessionIdentifier value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.failedSession_.Add(value);
        return this;
      }
      public Builder AddFailedSession(global::bgs.protocol.session.v1.SessionIdentifier.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.failedSession_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFailedSession(scg::IEnumerable<global::bgs.protocol.session.v1.SessionIdentifier> values) {
        PrepareBuilder();
        result.failedSession_.Add(values);
        return this;
      }
      public Builder ClearFailedSession() {
        PrepareBuilder();
        result.failedSession_.Clear();
        return this;
      }
    }
    static MarkSessionsAliveResponse() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetSessionStateRequest : pb::GeneratedMessage<GetSessionStateRequest, GetSessionStateRequest.Builder> {
    private GetSessionStateRequest() { }
    private static readonly GetSessionStateRequest defaultInstance = new GetSessionStateRequest().MakeReadOnly();
    private static readonly string[] _getSessionStateRequestFieldNames = new string[] { "handle", "include_billing_disabled" };
    private static readonly uint[] _getSessionStateRequestFieldTags = new uint[] { 10, 16 };
    public static GetSessionStateRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetSessionStateRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetSessionStateRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_GetSessionStateRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetSessionStateRequest, GetSessionStateRequest.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_GetSessionStateRequest__FieldAccessorTable; }
    }
    
    public const int HandleFieldNumber = 1;
    private bool hasHandle;
    private global::bgs.protocol.account.v1.GameAccountHandle handle_;
    public bool HasHandle {
      get { return hasHandle; }
    }
    public global::bgs.protocol.account.v1.GameAccountHandle Handle {
      get { return handle_ ?? global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance; }
    }
    
    public const int IncludeBillingDisabledFieldNumber = 2;
    private bool hasIncludeBillingDisabled;
    private bool includeBillingDisabled_;
    public bool HasIncludeBillingDisabled {
      get { return hasIncludeBillingDisabled; }
    }
    public bool IncludeBillingDisabled {
      get { return includeBillingDisabled_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasHandle) {
          if (!Handle.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getSessionStateRequestFieldNames;
      if (hasHandle) {
        output.WriteMessage(1, field_names[0], Handle);
      }
      if (hasIncludeBillingDisabled) {
        output.WriteBool(2, field_names[1], IncludeBillingDisabled);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHandle) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Handle);
        }
        if (hasIncludeBillingDisabled) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IncludeBillingDisabled);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetSessionStateRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetSessionStateRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetSessionStateRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetSessionStateRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetSessionStateRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetSessionStateRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetSessionStateRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetSessionStateRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetSessionStateRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetSessionStateRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetSessionStateRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetSessionStateRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetSessionStateRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetSessionStateRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetSessionStateRequest result;
      
      private GetSessionStateRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetSessionStateRequest original = result;
          result = new GetSessionStateRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetSessionStateRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.GetSessionStateRequest.Descriptor; }
      }
      
      public override GetSessionStateRequest DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.GetSessionStateRequest.DefaultInstance; }
      }
      
      public override GetSessionStateRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetSessionStateRequest) {
          return MergeFrom((GetSessionStateRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetSessionStateRequest other) {
        if (other == global::bgs.protocol.session.v1.GetSessionStateRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHandle) {
          MergeHandle(other.Handle);
        }
        if (other.HasIncludeBillingDisabled) {
          IncludeBillingDisabled = other.IncludeBillingDisabled;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getSessionStateRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getSessionStateRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.GameAccountHandle.Builder subBuilder = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder();
              if (result.hasHandle) {
                subBuilder.MergeFrom(Handle);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Handle = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasIncludeBillingDisabled = input.ReadBool(ref result.includeBillingDisabled_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHandle {
       get { return result.hasHandle; }
      }
      public global::bgs.protocol.account.v1.GameAccountHandle Handle {
        get { return result.Handle; }
        set { SetHandle(value); }
      }
      public Builder SetHandle(global::bgs.protocol.account.v1.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHandle = true;
        result.handle_ = value;
        return this;
      }
      public Builder SetHandle(global::bgs.protocol.account.v1.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHandle = true;
        result.handle_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHandle(global::bgs.protocol.account.v1.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHandle &&
            result.handle_ != global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance) {
            result.handle_ = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder(result.handle_).MergeFrom(value).BuildPartial();
        } else {
          result.handle_ = value;
        }
        result.hasHandle = true;
        return this;
      }
      public Builder ClearHandle() {
        PrepareBuilder();
        result.hasHandle = false;
        result.handle_ = null;
        return this;
      }
      
      public bool HasIncludeBillingDisabled {
        get { return result.hasIncludeBillingDisabled; }
      }
      public bool IncludeBillingDisabled {
        get { return result.IncludeBillingDisabled; }
        set { SetIncludeBillingDisabled(value); }
      }
      public Builder SetIncludeBillingDisabled(bool value) {
        PrepareBuilder();
        result.hasIncludeBillingDisabled = true;
        result.includeBillingDisabled_ = value;
        return this;
      }
      public Builder ClearIncludeBillingDisabled() {
        PrepareBuilder();
        result.hasIncludeBillingDisabled = false;
        result.includeBillingDisabled_ = false;
        return this;
      }
    }
    static GetSessionStateRequest() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetSessionStateResponse : pb::GeneratedMessage<GetSessionStateResponse, GetSessionStateResponse.Builder> {
    private GetSessionStateResponse() { }
    private static readonly GetSessionStateResponse defaultInstance = new GetSessionStateResponse().MakeReadOnly();
    private static readonly string[] _getSessionStateResponseFieldNames = new string[] { "handle", "session" };
    private static readonly uint[] _getSessionStateResponseFieldTags = new uint[] { 10, 18 };
    public static GetSessionStateResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetSessionStateResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetSessionStateResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_GetSessionStateResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetSessionStateResponse, GetSessionStateResponse.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_GetSessionStateResponse__FieldAccessorTable; }
    }
    
    public const int HandleFieldNumber = 1;
    private bool hasHandle;
    private global::bgs.protocol.account.v1.GameAccountHandle handle_;
    [global::System.ObsoleteAttribute()]
    public bool HasHandle {
      get { return hasHandle; }
    }
    [global::System.ObsoleteAttribute()]
    public global::bgs.protocol.account.v1.GameAccountHandle Handle {
      get { return handle_ ?? global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance; }
    }
    
    public const int SessionFieldNumber = 2;
    private bool hasSession;
    private global::bgs.protocol.session.v1.SessionState session_;
    public bool HasSession {
      get { return hasSession; }
    }
    public global::bgs.protocol.session.v1.SessionState Session {
      get { return session_ ?? global::bgs.protocol.session.v1.SessionState.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasHandle) {
          if (!Handle.IsInitialized) return false;
        }
        if (HasSession) {
          if (!Session.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getSessionStateResponseFieldNames;
      if (hasHandle) {
        output.WriteMessage(1, field_names[0], Handle);
      }
      if (hasSession) {
        output.WriteMessage(2, field_names[1], Session);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHandle) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Handle);
        }
        if (hasSession) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Session);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetSessionStateResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetSessionStateResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetSessionStateResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetSessionStateResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetSessionStateResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetSessionStateResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetSessionStateResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetSessionStateResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetSessionStateResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetSessionStateResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetSessionStateResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetSessionStateResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetSessionStateResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetSessionStateResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetSessionStateResponse result;
      
      private GetSessionStateResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetSessionStateResponse original = result;
          result = new GetSessionStateResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetSessionStateResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.GetSessionStateResponse.Descriptor; }
      }
      
      public override GetSessionStateResponse DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.GetSessionStateResponse.DefaultInstance; }
      }
      
      public override GetSessionStateResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetSessionStateResponse) {
          return MergeFrom((GetSessionStateResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetSessionStateResponse other) {
        if (other == global::bgs.protocol.session.v1.GetSessionStateResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHandle) {
          MergeHandle(other.Handle);
        }
        if (other.HasSession) {
          MergeSession(other.Session);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getSessionStateResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getSessionStateResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.GameAccountHandle.Builder subBuilder = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder();
              if (result.hasHandle) {
                subBuilder.MergeFrom(Handle);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Handle = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::bgs.protocol.session.v1.SessionState.Builder subBuilder = global::bgs.protocol.session.v1.SessionState.CreateBuilder();
              if (result.hasSession) {
                subBuilder.MergeFrom(Session);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Session = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      [global::System.ObsoleteAttribute()]
      public bool HasHandle {
       get { return result.hasHandle; }
      }
      [global::System.ObsoleteAttribute()]
      public global::bgs.protocol.account.v1.GameAccountHandle Handle {
        get { return result.Handle; }
        set { SetHandle(value); }
      }
      [global::System.ObsoleteAttribute()]
      public Builder SetHandle(global::bgs.protocol.account.v1.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHandle = true;
        result.handle_ = value;
        return this;
      }
      [global::System.ObsoleteAttribute()]
      public Builder SetHandle(global::bgs.protocol.account.v1.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHandle = true;
        result.handle_ = builderForValue.Build();
        return this;
      }
      [global::System.ObsoleteAttribute()]
      public Builder MergeHandle(global::bgs.protocol.account.v1.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHandle &&
            result.handle_ != global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance) {
            result.handle_ = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder(result.handle_).MergeFrom(value).BuildPartial();
        } else {
          result.handle_ = value;
        }
        result.hasHandle = true;
        return this;
      }
      [global::System.ObsoleteAttribute()]
      public Builder ClearHandle() {
        PrepareBuilder();
        result.hasHandle = false;
        result.handle_ = null;
        return this;
      }
      
      public bool HasSession {
       get { return result.hasSession; }
      }
      public global::bgs.protocol.session.v1.SessionState Session {
        get { return result.Session; }
        set { SetSession(value); }
      }
      public Builder SetSession(global::bgs.protocol.session.v1.SessionState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSession = true;
        result.session_ = value;
        return this;
      }
      public Builder SetSession(global::bgs.protocol.session.v1.SessionState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSession = true;
        result.session_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSession(global::bgs.protocol.session.v1.SessionState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSession &&
            result.session_ != global::bgs.protocol.session.v1.SessionState.DefaultInstance) {
            result.session_ = global::bgs.protocol.session.v1.SessionState.CreateBuilder(result.session_).MergeFrom(value).BuildPartial();
        } else {
          result.session_ = value;
        }
        result.hasSession = true;
        return this;
      }
      public Builder ClearSession() {
        PrepareBuilder();
        result.hasSession = false;
        result.session_ = null;
        return this;
      }
    }
    static GetSessionStateResponse() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetSignedSessionStateRequest : pb::GeneratedMessage<GetSignedSessionStateRequest, GetSignedSessionStateRequest.Builder> {
    private GetSignedSessionStateRequest() { }
    private static readonly GetSignedSessionStateRequest defaultInstance = new GetSignedSessionStateRequest().MakeReadOnly();
    private static readonly string[] _getSignedSessionStateRequestFieldNames = new string[] { "agent_id" };
    private static readonly uint[] _getSignedSessionStateRequestFieldTags = new uint[] { 10 };
    public static GetSignedSessionStateRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetSignedSessionStateRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetSignedSessionStateRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_GetSignedSessionStateRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetSignedSessionStateRequest, GetSignedSessionStateRequest.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_GetSignedSessionStateRequest__FieldAccessorTable; }
    }
    
    public const int AgentIdFieldNumber = 1;
    private bool hasAgentId;
    private global::bgs.protocol.account.v1.GameAccountHandle agentId_;
    public bool HasAgentId {
      get { return hasAgentId; }
    }
    public global::bgs.protocol.account.v1.GameAccountHandle AgentId {
      get { return agentId_ ?? global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasAgentId) {
          if (!AgentId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getSignedSessionStateRequestFieldNames;
      if (hasAgentId) {
        output.WriteMessage(1, field_names[0], AgentId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAgentId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AgentId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetSignedSessionStateRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetSignedSessionStateRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetSignedSessionStateRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetSignedSessionStateRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetSignedSessionStateRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetSignedSessionStateRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetSignedSessionStateRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetSignedSessionStateRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetSignedSessionStateRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetSignedSessionStateRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetSignedSessionStateRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetSignedSessionStateRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetSignedSessionStateRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetSignedSessionStateRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetSignedSessionStateRequest result;
      
      private GetSignedSessionStateRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetSignedSessionStateRequest original = result;
          result = new GetSignedSessionStateRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetSignedSessionStateRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.GetSignedSessionStateRequest.Descriptor; }
      }
      
      public override GetSignedSessionStateRequest DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.GetSignedSessionStateRequest.DefaultInstance; }
      }
      
      public override GetSignedSessionStateRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetSignedSessionStateRequest) {
          return MergeFrom((GetSignedSessionStateRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetSignedSessionStateRequest other) {
        if (other == global::bgs.protocol.session.v1.GetSignedSessionStateRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAgentId) {
          MergeAgentId(other.AgentId);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getSignedSessionStateRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getSignedSessionStateRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.GameAccountHandle.Builder subBuilder = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder();
              if (result.hasAgentId) {
                subBuilder.MergeFrom(AgentId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AgentId = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAgentId {
       get { return result.hasAgentId; }
      }
      public global::bgs.protocol.account.v1.GameAccountHandle AgentId {
        get { return result.AgentId; }
        set { SetAgentId(value); }
      }
      public Builder SetAgentId(global::bgs.protocol.account.v1.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAgentId = true;
        result.agentId_ = value;
        return this;
      }
      public Builder SetAgentId(global::bgs.protocol.account.v1.GameAccountHandle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAgentId = true;
        result.agentId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAgentId(global::bgs.protocol.account.v1.GameAccountHandle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAgentId &&
            result.agentId_ != global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance) {
            result.agentId_ = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder(result.agentId_).MergeFrom(value).BuildPartial();
        } else {
          result.agentId_ = value;
        }
        result.hasAgentId = true;
        return this;
      }
      public Builder ClearAgentId() {
        PrepareBuilder();
        result.hasAgentId = false;
        result.agentId_ = null;
        return this;
      }
    }
    static GetSignedSessionStateRequest() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class GetSignedSessionStateResponse : pb::GeneratedMessage<GetSignedSessionStateResponse, GetSignedSessionStateResponse.Builder> {
    private GetSignedSessionStateResponse() { }
    private static readonly GetSignedSessionStateResponse defaultInstance = new GetSignedSessionStateResponse().MakeReadOnly();
    private static readonly string[] _getSignedSessionStateResponseFieldNames = new string[] { "token" };
    private static readonly uint[] _getSignedSessionStateResponseFieldTags = new uint[] { 10 };
    public static GetSignedSessionStateResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetSignedSessionStateResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetSignedSessionStateResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_GetSignedSessionStateResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetSignedSessionStateResponse, GetSignedSessionStateResponse.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_GetSignedSessionStateResponse__FieldAccessorTable; }
    }
    
    public const int TokenFieldNumber = 1;
    private bool hasToken;
    private string token_ = "";
    public bool HasToken {
      get { return hasToken; }
    }
    public string Token {
      get { return token_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getSignedSessionStateResponseFieldNames;
      if (hasToken) {
        output.WriteString(1, field_names[0], Token);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasToken) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Token);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetSignedSessionStateResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetSignedSessionStateResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetSignedSessionStateResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetSignedSessionStateResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetSignedSessionStateResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetSignedSessionStateResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetSignedSessionStateResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetSignedSessionStateResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetSignedSessionStateResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetSignedSessionStateResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetSignedSessionStateResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetSignedSessionStateResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<GetSignedSessionStateResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetSignedSessionStateResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetSignedSessionStateResponse result;
      
      private GetSignedSessionStateResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetSignedSessionStateResponse original = result;
          result = new GetSignedSessionStateResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetSignedSessionStateResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.GetSignedSessionStateResponse.Descriptor; }
      }
      
      public override GetSignedSessionStateResponse DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.GetSignedSessionStateResponse.DefaultInstance; }
      }
      
      public override GetSignedSessionStateResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetSignedSessionStateResponse) {
          return MergeFrom((GetSignedSessionStateResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetSignedSessionStateResponse other) {
        if (other == global::bgs.protocol.session.v1.GetSignedSessionStateResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasToken) {
          Token = other.Token;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getSignedSessionStateResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getSignedSessionStateResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasToken = input.ReadString(ref result.token_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public string Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = "";
        return this;
      }
    }
    static GetSignedSessionStateResponse() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RefreshSessionKeyRequest : pb::GeneratedMessage<RefreshSessionKeyRequest, RefreshSessionKeyRequest.Builder> {
    private RefreshSessionKeyRequest() { }
    private static readonly RefreshSessionKeyRequest defaultInstance = new RefreshSessionKeyRequest().MakeReadOnly();
    private static readonly string[] _refreshSessionKeyRequestFieldNames = new string[] { "session_key" };
    private static readonly uint[] _refreshSessionKeyRequestFieldTags = new uint[] { 10 };
    public static RefreshSessionKeyRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RefreshSessionKeyRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RefreshSessionKeyRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_RefreshSessionKeyRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RefreshSessionKeyRequest, RefreshSessionKeyRequest.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_RefreshSessionKeyRequest__FieldAccessorTable; }
    }
    
    public const int SessionKeyFieldNumber = 1;
    private bool hasSessionKey;
    private pb::ByteString sessionKey_ = pb::ByteString.Empty;
    public bool HasSessionKey {
      get { return hasSessionKey; }
    }
    public pb::ByteString SessionKey {
      get { return sessionKey_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _refreshSessionKeyRequestFieldNames;
      if (hasSessionKey) {
        output.WriteBytes(1, field_names[0], SessionKey);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSessionKey) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, SessionKey);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RefreshSessionKeyRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RefreshSessionKeyRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RefreshSessionKeyRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RefreshSessionKeyRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RefreshSessionKeyRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RefreshSessionKeyRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RefreshSessionKeyRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RefreshSessionKeyRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RefreshSessionKeyRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RefreshSessionKeyRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RefreshSessionKeyRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RefreshSessionKeyRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RefreshSessionKeyRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RefreshSessionKeyRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RefreshSessionKeyRequest result;
      
      private RefreshSessionKeyRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          RefreshSessionKeyRequest original = result;
          result = new RefreshSessionKeyRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RefreshSessionKeyRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.RefreshSessionKeyRequest.Descriptor; }
      }
      
      public override RefreshSessionKeyRequest DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.RefreshSessionKeyRequest.DefaultInstance; }
      }
      
      public override RefreshSessionKeyRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RefreshSessionKeyRequest) {
          return MergeFrom((RefreshSessionKeyRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RefreshSessionKeyRequest other) {
        if (other == global::bgs.protocol.session.v1.RefreshSessionKeyRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSessionKey) {
          SessionKey = other.SessionKey;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_refreshSessionKeyRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _refreshSessionKeyRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSessionKey = input.ReadBytes(ref result.sessionKey_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSessionKey {
        get { return result.hasSessionKey; }
      }
      public pb::ByteString SessionKey {
        get { return result.SessionKey; }
        set { SetSessionKey(value); }
      }
      public Builder SetSessionKey(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionKey = true;
        result.sessionKey_ = value;
        return this;
      }
      public Builder ClearSessionKey() {
        PrepareBuilder();
        result.hasSessionKey = false;
        result.sessionKey_ = pb::ByteString.Empty;
        return this;
      }
    }
    static RefreshSessionKeyRequest() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RefreshSessionKeyResponse : pb::GeneratedMessage<RefreshSessionKeyResponse, RefreshSessionKeyResponse.Builder> {
    private RefreshSessionKeyResponse() { }
    private static readonly RefreshSessionKeyResponse defaultInstance = new RefreshSessionKeyResponse().MakeReadOnly();
    private static readonly string[] _refreshSessionKeyResponseFieldNames = new string[] { "session_key" };
    private static readonly uint[] _refreshSessionKeyResponseFieldTags = new uint[] { 10 };
    public static RefreshSessionKeyResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RefreshSessionKeyResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RefreshSessionKeyResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_RefreshSessionKeyResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RefreshSessionKeyResponse, RefreshSessionKeyResponse.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_RefreshSessionKeyResponse__FieldAccessorTable; }
    }
    
    public const int SessionKeyFieldNumber = 1;
    private bool hasSessionKey;
    private pb::ByteString sessionKey_ = pb::ByteString.Empty;
    public bool HasSessionKey {
      get { return hasSessionKey; }
    }
    public pb::ByteString SessionKey {
      get { return sessionKey_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _refreshSessionKeyResponseFieldNames;
      if (hasSessionKey) {
        output.WriteBytes(1, field_names[0], SessionKey);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSessionKey) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, SessionKey);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RefreshSessionKeyResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RefreshSessionKeyResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RefreshSessionKeyResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RefreshSessionKeyResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RefreshSessionKeyResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RefreshSessionKeyResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RefreshSessionKeyResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RefreshSessionKeyResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RefreshSessionKeyResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RefreshSessionKeyResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RefreshSessionKeyResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RefreshSessionKeyResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RefreshSessionKeyResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RefreshSessionKeyResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RefreshSessionKeyResponse result;
      
      private RefreshSessionKeyResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          RefreshSessionKeyResponse original = result;
          result = new RefreshSessionKeyResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RefreshSessionKeyResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.RefreshSessionKeyResponse.Descriptor; }
      }
      
      public override RefreshSessionKeyResponse DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.RefreshSessionKeyResponse.DefaultInstance; }
      }
      
      public override RefreshSessionKeyResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RefreshSessionKeyResponse) {
          return MergeFrom((RefreshSessionKeyResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RefreshSessionKeyResponse other) {
        if (other == global::bgs.protocol.session.v1.RefreshSessionKeyResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSessionKey) {
          SessionKey = other.SessionKey;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_refreshSessionKeyResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _refreshSessionKeyResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSessionKey = input.ReadBytes(ref result.sessionKey_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSessionKey {
        get { return result.hasSessionKey; }
      }
      public pb::ByteString SessionKey {
        get { return result.SessionKey; }
        set { SetSessionKey(value); }
      }
      public Builder SetSessionKey(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionKey = true;
        result.sessionKey_ = value;
        return this;
      }
      public Builder ClearSessionKey() {
        PrepareBuilder();
        result.hasSessionKey = false;
        result.sessionKey_ = pb::ByteString.Empty;
        return this;
      }
    }
    static RefreshSessionKeyResponse() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SessionCreatedNotification : pb::GeneratedMessage<SessionCreatedNotification, SessionCreatedNotification.Builder> {
    private SessionCreatedNotification() { }
    private static readonly SessionCreatedNotification defaultInstance = new SessionCreatedNotification().MakeReadOnly();
    private static readonly string[] _sessionCreatedNotificationFieldNames = new string[] { "client_id", "identity", "reason", "session_id", "session_key" };
    private static readonly uint[] _sessionCreatedNotificationFieldTags = new uint[] { 42, 10, 16, 26, 34 };
    public static SessionCreatedNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SessionCreatedNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SessionCreatedNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_SessionCreatedNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SessionCreatedNotification, SessionCreatedNotification.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_SessionCreatedNotification__FieldAccessorTable; }
    }
    
    public const int IdentityFieldNumber = 1;
    private bool hasIdentity;
    private global::bgs.protocol.account.v1.Identity identity_;
    public bool HasIdentity {
      get { return hasIdentity; }
    }
    public global::bgs.protocol.account.v1.Identity Identity {
      get { return identity_ ?? global::bgs.protocol.account.v1.Identity.DefaultInstance; }
    }
    
    public const int ReasonFieldNumber = 2;
    private bool hasReason;
    private uint reason_;
    public bool HasReason {
      get { return hasReason; }
    }
    public uint Reason {
      get { return reason_; }
    }
    
    public const int SessionIdFieldNumber = 3;
    private bool hasSessionId;
    private string sessionId_ = "";
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public string SessionId {
      get { return sessionId_; }
    }
    
    public const int SessionKeyFieldNumber = 4;
    private bool hasSessionKey;
    private pb::ByteString sessionKey_ = pb::ByteString.Empty;
    public bool HasSessionKey {
      get { return hasSessionKey; }
    }
    public pb::ByteString SessionKey {
      get { return sessionKey_; }
    }
    
    public const int ClientIdFieldNumber = 5;
    private bool hasClientId;
    private string clientId_ = "";
    public bool HasClientId {
      get { return hasClientId; }
    }
    public string ClientId {
      get { return clientId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasIdentity) {
          if (!Identity.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sessionCreatedNotificationFieldNames;
      if (hasIdentity) {
        output.WriteMessage(1, field_names[1], Identity);
      }
      if (hasReason) {
        output.WriteUInt32(2, field_names[2], Reason);
      }
      if (hasSessionId) {
        output.WriteString(3, field_names[3], SessionId);
      }
      if (hasSessionKey) {
        output.WriteBytes(4, field_names[4], SessionKey);
      }
      if (hasClientId) {
        output.WriteString(5, field_names[0], ClientId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIdentity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Identity);
        }
        if (hasReason) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Reason);
        }
        if (hasSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SessionId);
        }
        if (hasSessionKey) {
          size += pb::CodedOutputStream.ComputeBytesSize(4, SessionKey);
        }
        if (hasClientId) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ClientId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SessionCreatedNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SessionCreatedNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SessionCreatedNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SessionCreatedNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SessionCreatedNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SessionCreatedNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SessionCreatedNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SessionCreatedNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SessionCreatedNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SessionCreatedNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SessionCreatedNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SessionCreatedNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SessionCreatedNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SessionCreatedNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SessionCreatedNotification result;
      
      private SessionCreatedNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          SessionCreatedNotification original = result;
          result = new SessionCreatedNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SessionCreatedNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.SessionCreatedNotification.Descriptor; }
      }
      
      public override SessionCreatedNotification DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.SessionCreatedNotification.DefaultInstance; }
      }
      
      public override SessionCreatedNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SessionCreatedNotification) {
          return MergeFrom((SessionCreatedNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SessionCreatedNotification other) {
        if (other == global::bgs.protocol.session.v1.SessionCreatedNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdentity) {
          MergeIdentity(other.Identity);
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        if (other.HasSessionKey) {
          SessionKey = other.SessionKey;
        }
        if (other.HasClientId) {
          ClientId = other.ClientId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sessionCreatedNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sessionCreatedNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.Identity.Builder subBuilder = global::bgs.protocol.account.v1.Identity.CreateBuilder();
              if (result.hasIdentity) {
                subBuilder.MergeFrom(Identity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Identity = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasReason = input.ReadUInt32(ref result.reason_);
              break;
            }
            case 26: {
              result.hasSessionId = input.ReadString(ref result.sessionId_);
              break;
            }
            case 34: {
              result.hasSessionKey = input.ReadBytes(ref result.sessionKey_);
              break;
            }
            case 42: {
              result.hasClientId = input.ReadString(ref result.clientId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdentity {
       get { return result.hasIdentity; }
      }
      public global::bgs.protocol.account.v1.Identity Identity {
        get { return result.Identity; }
        set { SetIdentity(value); }
      }
      public Builder SetIdentity(global::bgs.protocol.account.v1.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIdentity = true;
        result.identity_ = value;
        return this;
      }
      public Builder SetIdentity(global::bgs.protocol.account.v1.Identity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasIdentity = true;
        result.identity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeIdentity(global::bgs.protocol.account.v1.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasIdentity &&
            result.identity_ != global::bgs.protocol.account.v1.Identity.DefaultInstance) {
            result.identity_ = global::bgs.protocol.account.v1.Identity.CreateBuilder(result.identity_).MergeFrom(value).BuildPartial();
        } else {
          result.identity_ = value;
        }
        result.hasIdentity = true;
        return this;
      }
      public Builder ClearIdentity() {
        PrepareBuilder();
        result.hasIdentity = false;
        result.identity_ = null;
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public uint Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(uint value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = 0;
        return this;
      }
      
      public bool HasSessionId {
        get { return result.hasSessionId; }
      }
      public string SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        PrepareBuilder();
        result.hasSessionId = false;
        result.sessionId_ = "";
        return this;
      }
      
      public bool HasSessionKey {
        get { return result.hasSessionKey; }
      }
      public pb::ByteString SessionKey {
        get { return result.SessionKey; }
        set { SetSessionKey(value); }
      }
      public Builder SetSessionKey(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionKey = true;
        result.sessionKey_ = value;
        return this;
      }
      public Builder ClearSessionKey() {
        PrepareBuilder();
        result.hasSessionKey = false;
        result.sessionKey_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasClientId {
        get { return result.hasClientId; }
      }
      public string ClientId {
        get { return result.ClientId; }
        set { SetClientId(value); }
      }
      public Builder SetClientId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientId = true;
        result.clientId_ = value;
        return this;
      }
      public Builder ClearClientId() {
        PrepareBuilder();
        result.hasClientId = false;
        result.clientId_ = "";
        return this;
      }
    }
    static SessionCreatedNotification() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SessionDestroyedNotification : pb::GeneratedMessage<SessionDestroyedNotification, SessionDestroyedNotification.Builder> {
    private SessionDestroyedNotification() { }
    private static readonly SessionDestroyedNotification defaultInstance = new SessionDestroyedNotification().MakeReadOnly();
    private static readonly string[] _sessionDestroyedNotificationFieldNames = new string[] { "identity", "reason", "session_id" };
    private static readonly uint[] _sessionDestroyedNotificationFieldTags = new uint[] { 10, 16, 26 };
    public static SessionDestroyedNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SessionDestroyedNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SessionDestroyedNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_SessionDestroyedNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SessionDestroyedNotification, SessionDestroyedNotification.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_SessionDestroyedNotification__FieldAccessorTable; }
    }
    
    public const int IdentityFieldNumber = 1;
    private bool hasIdentity;
    private global::bgs.protocol.account.v1.Identity identity_;
    public bool HasIdentity {
      get { return hasIdentity; }
    }
    public global::bgs.protocol.account.v1.Identity Identity {
      get { return identity_ ?? global::bgs.protocol.account.v1.Identity.DefaultInstance; }
    }
    
    public const int ReasonFieldNumber = 2;
    private bool hasReason;
    private uint reason_;
    public bool HasReason {
      get { return hasReason; }
    }
    public uint Reason {
      get { return reason_; }
    }
    
    public const int SessionIdFieldNumber = 3;
    private bool hasSessionId;
    private string sessionId_ = "";
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public string SessionId {
      get { return sessionId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasIdentity) {
          if (!Identity.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sessionDestroyedNotificationFieldNames;
      if (hasIdentity) {
        output.WriteMessage(1, field_names[0], Identity);
      }
      if (hasReason) {
        output.WriteUInt32(2, field_names[1], Reason);
      }
      if (hasSessionId) {
        output.WriteString(3, field_names[2], SessionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIdentity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Identity);
        }
        if (hasReason) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Reason);
        }
        if (hasSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SessionId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SessionDestroyedNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SessionDestroyedNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SessionDestroyedNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SessionDestroyedNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SessionDestroyedNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SessionDestroyedNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SessionDestroyedNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SessionDestroyedNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SessionDestroyedNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SessionDestroyedNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SessionDestroyedNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SessionDestroyedNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SessionDestroyedNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SessionDestroyedNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SessionDestroyedNotification result;
      
      private SessionDestroyedNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          SessionDestroyedNotification original = result;
          result = new SessionDestroyedNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SessionDestroyedNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.SessionDestroyedNotification.Descriptor; }
      }
      
      public override SessionDestroyedNotification DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.SessionDestroyedNotification.DefaultInstance; }
      }
      
      public override SessionDestroyedNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SessionDestroyedNotification) {
          return MergeFrom((SessionDestroyedNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SessionDestroyedNotification other) {
        if (other == global::bgs.protocol.session.v1.SessionDestroyedNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdentity) {
          MergeIdentity(other.Identity);
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sessionDestroyedNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sessionDestroyedNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.Identity.Builder subBuilder = global::bgs.protocol.account.v1.Identity.CreateBuilder();
              if (result.hasIdentity) {
                subBuilder.MergeFrom(Identity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Identity = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasReason = input.ReadUInt32(ref result.reason_);
              break;
            }
            case 26: {
              result.hasSessionId = input.ReadString(ref result.sessionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdentity {
       get { return result.hasIdentity; }
      }
      public global::bgs.protocol.account.v1.Identity Identity {
        get { return result.Identity; }
        set { SetIdentity(value); }
      }
      public Builder SetIdentity(global::bgs.protocol.account.v1.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIdentity = true;
        result.identity_ = value;
        return this;
      }
      public Builder SetIdentity(global::bgs.protocol.account.v1.Identity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasIdentity = true;
        result.identity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeIdentity(global::bgs.protocol.account.v1.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasIdentity &&
            result.identity_ != global::bgs.protocol.account.v1.Identity.DefaultInstance) {
            result.identity_ = global::bgs.protocol.account.v1.Identity.CreateBuilder(result.identity_).MergeFrom(value).BuildPartial();
        } else {
          result.identity_ = value;
        }
        result.hasIdentity = true;
        return this;
      }
      public Builder ClearIdentity() {
        PrepareBuilder();
        result.hasIdentity = false;
        result.identity_ = null;
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public uint Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(uint value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = 0;
        return this;
      }
      
      public bool HasSessionId {
        get { return result.hasSessionId; }
      }
      public string SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        PrepareBuilder();
        result.hasSessionId = false;
        result.sessionId_ = "";
        return this;
      }
    }
    static SessionDestroyedNotification() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SessionUpdatedNotification : pb::GeneratedMessage<SessionUpdatedNotification, SessionUpdatedNotification.Builder> {
    private SessionUpdatedNotification() { }
    private static readonly SessionUpdatedNotification defaultInstance = new SessionUpdatedNotification().MakeReadOnly();
    private static readonly string[] _sessionUpdatedNotificationFieldNames = new string[] { "identity", "reason", "session_id" };
    private static readonly uint[] _sessionUpdatedNotificationFieldTags = new uint[] { 10, 16, 26 };
    public static SessionUpdatedNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SessionUpdatedNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SessionUpdatedNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_SessionUpdatedNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SessionUpdatedNotification, SessionUpdatedNotification.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_SessionUpdatedNotification__FieldAccessorTable; }
    }
    
    public const int IdentityFieldNumber = 1;
    private bool hasIdentity;
    private global::bgs.protocol.account.v1.Identity identity_;
    public bool HasIdentity {
      get { return hasIdentity; }
    }
    public global::bgs.protocol.account.v1.Identity Identity {
      get { return identity_ ?? global::bgs.protocol.account.v1.Identity.DefaultInstance; }
    }
    
    public const int ReasonFieldNumber = 2;
    private bool hasReason;
    private uint reason_;
    public bool HasReason {
      get { return hasReason; }
    }
    public uint Reason {
      get { return reason_; }
    }
    
    public const int SessionIdFieldNumber = 3;
    private bool hasSessionId;
    private string sessionId_ = "";
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public string SessionId {
      get { return sessionId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasIdentity) {
          if (!Identity.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sessionUpdatedNotificationFieldNames;
      if (hasIdentity) {
        output.WriteMessage(1, field_names[0], Identity);
      }
      if (hasReason) {
        output.WriteUInt32(2, field_names[1], Reason);
      }
      if (hasSessionId) {
        output.WriteString(3, field_names[2], SessionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIdentity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Identity);
        }
        if (hasReason) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Reason);
        }
        if (hasSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SessionId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SessionUpdatedNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SessionUpdatedNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SessionUpdatedNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SessionUpdatedNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SessionUpdatedNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SessionUpdatedNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SessionUpdatedNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SessionUpdatedNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SessionUpdatedNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SessionUpdatedNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SessionUpdatedNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SessionUpdatedNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SessionUpdatedNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SessionUpdatedNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SessionUpdatedNotification result;
      
      private SessionUpdatedNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          SessionUpdatedNotification original = result;
          result = new SessionUpdatedNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SessionUpdatedNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.SessionUpdatedNotification.Descriptor; }
      }
      
      public override SessionUpdatedNotification DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.SessionUpdatedNotification.DefaultInstance; }
      }
      
      public override SessionUpdatedNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SessionUpdatedNotification) {
          return MergeFrom((SessionUpdatedNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SessionUpdatedNotification other) {
        if (other == global::bgs.protocol.session.v1.SessionUpdatedNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdentity) {
          MergeIdentity(other.Identity);
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sessionUpdatedNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sessionUpdatedNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.Identity.Builder subBuilder = global::bgs.protocol.account.v1.Identity.CreateBuilder();
              if (result.hasIdentity) {
                subBuilder.MergeFrom(Identity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Identity = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasReason = input.ReadUInt32(ref result.reason_);
              break;
            }
            case 26: {
              result.hasSessionId = input.ReadString(ref result.sessionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdentity {
       get { return result.hasIdentity; }
      }
      public global::bgs.protocol.account.v1.Identity Identity {
        get { return result.Identity; }
        set { SetIdentity(value); }
      }
      public Builder SetIdentity(global::bgs.protocol.account.v1.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIdentity = true;
        result.identity_ = value;
        return this;
      }
      public Builder SetIdentity(global::bgs.protocol.account.v1.Identity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasIdentity = true;
        result.identity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeIdentity(global::bgs.protocol.account.v1.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasIdentity &&
            result.identity_ != global::bgs.protocol.account.v1.Identity.DefaultInstance) {
            result.identity_ = global::bgs.protocol.account.v1.Identity.CreateBuilder(result.identity_).MergeFrom(value).BuildPartial();
        } else {
          result.identity_ = value;
        }
        result.hasIdentity = true;
        return this;
      }
      public Builder ClearIdentity() {
        PrepareBuilder();
        result.hasIdentity = false;
        result.identity_ = null;
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public uint Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(uint value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = 0;
        return this;
      }
      
      public bool HasSessionId {
        get { return result.hasSessionId; }
      }
      public string SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        PrepareBuilder();
        result.hasSessionId = false;
        result.sessionId_ = "";
        return this;
      }
    }
    static SessionUpdatedNotification() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SessionGameTimeWarningNotification : pb::GeneratedMessage<SessionGameTimeWarningNotification, SessionGameTimeWarningNotification.Builder> {
    private SessionGameTimeWarningNotification() { }
    private static readonly SessionGameTimeWarningNotification defaultInstance = new SessionGameTimeWarningNotification().MakeReadOnly();
    private static readonly string[] _sessionGameTimeWarningNotificationFieldNames = new string[] { "identity", "remaining_time_duration_min", "restriction_type", "session_id" };
    private static readonly uint[] _sessionGameTimeWarningNotificationFieldTags = new uint[] { 10, 24, 32, 18 };
    public static SessionGameTimeWarningNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SessionGameTimeWarningNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SessionGameTimeWarningNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_SessionGameTimeWarningNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SessionGameTimeWarningNotification, SessionGameTimeWarningNotification.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.session.v1.Proto.SessionService.internal__static_bgs_protocol_session_v1_SessionGameTimeWarningNotification__FieldAccessorTable; }
    }
    
    public const int IdentityFieldNumber = 1;
    private bool hasIdentity;
    private global::bgs.protocol.account.v1.Identity identity_;
    public bool HasIdentity {
      get { return hasIdentity; }
    }
    public global::bgs.protocol.account.v1.Identity Identity {
      get { return identity_ ?? global::bgs.protocol.account.v1.Identity.DefaultInstance; }
    }
    
    public const int SessionIdFieldNumber = 2;
    private bool hasSessionId;
    private string sessionId_ = "";
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public string SessionId {
      get { return sessionId_; }
    }
    
    public const int RemainingTimeDurationMinFieldNumber = 3;
    private bool hasRemainingTimeDurationMin;
    private uint remainingTimeDurationMin_;
    public bool HasRemainingTimeDurationMin {
      get { return hasRemainingTimeDurationMin; }
    }
    public uint RemainingTimeDurationMin {
      get { return remainingTimeDurationMin_; }
    }
    
    public const int RestrictionTypeFieldNumber = 4;
    private bool hasRestrictionType;
    private uint restrictionType_;
    public bool HasRestrictionType {
      get { return hasRestrictionType; }
    }
    public uint RestrictionType {
      get { return restrictionType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasIdentity) {
          if (!Identity.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sessionGameTimeWarningNotificationFieldNames;
      if (hasIdentity) {
        output.WriteMessage(1, field_names[0], Identity);
      }
      if (hasSessionId) {
        output.WriteString(2, field_names[3], SessionId);
      }
      if (hasRemainingTimeDurationMin) {
        output.WriteUInt32(3, field_names[1], RemainingTimeDurationMin);
      }
      if (hasRestrictionType) {
        output.WriteUInt32(4, field_names[2], RestrictionType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIdentity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Identity);
        }
        if (hasSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, SessionId);
        }
        if (hasRemainingTimeDurationMin) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, RemainingTimeDurationMin);
        }
        if (hasRestrictionType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, RestrictionType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SessionGameTimeWarningNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SessionGameTimeWarningNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SessionGameTimeWarningNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SessionGameTimeWarningNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SessionGameTimeWarningNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SessionGameTimeWarningNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SessionGameTimeWarningNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SessionGameTimeWarningNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SessionGameTimeWarningNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SessionGameTimeWarningNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SessionGameTimeWarningNotification MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SessionGameTimeWarningNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SessionGameTimeWarningNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SessionGameTimeWarningNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SessionGameTimeWarningNotification result;
      
      private SessionGameTimeWarningNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          SessionGameTimeWarningNotification original = result;
          result = new SessionGameTimeWarningNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SessionGameTimeWarningNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.session.v1.SessionGameTimeWarningNotification.Descriptor; }
      }
      
      public override SessionGameTimeWarningNotification DefaultInstanceForType {
        get { return global::bgs.protocol.session.v1.SessionGameTimeWarningNotification.DefaultInstance; }
      }
      
      public override SessionGameTimeWarningNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SessionGameTimeWarningNotification) {
          return MergeFrom((SessionGameTimeWarningNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SessionGameTimeWarningNotification other) {
        if (other == global::bgs.protocol.session.v1.SessionGameTimeWarningNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdentity) {
          MergeIdentity(other.Identity);
        }
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        if (other.HasRemainingTimeDurationMin) {
          RemainingTimeDurationMin = other.RemainingTimeDurationMin;
        }
        if (other.HasRestrictionType) {
          RestrictionType = other.RestrictionType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sessionGameTimeWarningNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sessionGameTimeWarningNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.Identity.Builder subBuilder = global::bgs.protocol.account.v1.Identity.CreateBuilder();
              if (result.hasIdentity) {
                subBuilder.MergeFrom(Identity);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Identity = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasSessionId = input.ReadString(ref result.sessionId_);
              break;
            }
            case 24: {
              result.hasRemainingTimeDurationMin = input.ReadUInt32(ref result.remainingTimeDurationMin_);
              break;
            }
            case 32: {
              result.hasRestrictionType = input.ReadUInt32(ref result.restrictionType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdentity {
       get { return result.hasIdentity; }
      }
      public global::bgs.protocol.account.v1.Identity Identity {
        get { return result.Identity; }
        set { SetIdentity(value); }
      }
      public Builder SetIdentity(global::bgs.protocol.account.v1.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIdentity = true;
        result.identity_ = value;
        return this;
      }
      public Builder SetIdentity(global::bgs.protocol.account.v1.Identity.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasIdentity = true;
        result.identity_ = builderForValue.Build();
        return this;
      }
      public Builder MergeIdentity(global::bgs.protocol.account.v1.Identity value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasIdentity &&
            result.identity_ != global::bgs.protocol.account.v1.Identity.DefaultInstance) {
            result.identity_ = global::bgs.protocol.account.v1.Identity.CreateBuilder(result.identity_).MergeFrom(value).BuildPartial();
        } else {
          result.identity_ = value;
        }
        result.hasIdentity = true;
        return this;
      }
      public Builder ClearIdentity() {
        PrepareBuilder();
        result.hasIdentity = false;
        result.identity_ = null;
        return this;
      }
      
      public bool HasSessionId {
        get { return result.hasSessionId; }
      }
      public string SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        PrepareBuilder();
        result.hasSessionId = false;
        result.sessionId_ = "";
        return this;
      }
      
      public bool HasRemainingTimeDurationMin {
        get { return result.hasRemainingTimeDurationMin; }
      }
      public uint RemainingTimeDurationMin {
        get { return result.RemainingTimeDurationMin; }
        set { SetRemainingTimeDurationMin(value); }
      }
      public Builder SetRemainingTimeDurationMin(uint value) {
        PrepareBuilder();
        result.hasRemainingTimeDurationMin = true;
        result.remainingTimeDurationMin_ = value;
        return this;
      }
      public Builder ClearRemainingTimeDurationMin() {
        PrepareBuilder();
        result.hasRemainingTimeDurationMin = false;
        result.remainingTimeDurationMin_ = 0;
        return this;
      }
      
      public bool HasRestrictionType {
        get { return result.hasRestrictionType; }
      }
      public uint RestrictionType {
        get { return result.RestrictionType; }
        set { SetRestrictionType(value); }
      }
      public Builder SetRestrictionType(uint value) {
        PrepareBuilder();
        result.hasRestrictionType = true;
        result.restrictionType_ = value;
        return this;
      }
      public Builder ClearRestrictionType() {
        PrepareBuilder();
        result.hasRestrictionType = false;
        result.restrictionType_ = 0;
        return this;
      }
    }
    static SessionGameTimeWarningNotification() {
      object.ReferenceEquals(global::bgs.protocol.session.v1.Proto.SessionService.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class SessionListener : pb::IService {
    public abstract void OnSessionCreated(
        pb::IRpcController controller,
        global::bgs.protocol.session.v1.SessionCreatedNotification request,
        global::System.Action<global::bgs.protocol.NO_RESPONSE> done);
    public abstract void OnSessionDestroyed(
        pb::IRpcController controller,
        global::bgs.protocol.session.v1.SessionDestroyedNotification request,
        global::System.Action<global::bgs.protocol.NO_RESPONSE> done);
    public abstract void OnSessionUpdated(
        pb::IRpcController controller,
        global::bgs.protocol.session.v1.SessionUpdatedNotification request,
        global::System.Action<global::bgs.protocol.NO_RESPONSE> done);
    public abstract void OnSessionGameTimeWarning(
        pb::IRpcController controller,
        global::bgs.protocol.session.v1.SessionGameTimeWarningNotification request,
        global::System.Action<global::bgs.protocol.NO_RESPONSE> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.SessionService.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.OnSessionCreated(controller, (global::bgs.protocol.session.v1.SessionCreatedNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NO_RESPONSE>(
              done));
          return;
        case 1:
          this.OnSessionDestroyed(controller, (global::bgs.protocol.session.v1.SessionDestroyedNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NO_RESPONSE>(
              done));
          return;
        case 2:
          this.OnSessionUpdated(controller, (global::bgs.protocol.session.v1.SessionUpdatedNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NO_RESPONSE>(
              done));
          return;
        case 3:
          this.OnSessionGameTimeWarning(controller, (global::bgs.protocol.session.v1.SessionGameTimeWarningNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NO_RESPONSE>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bgs.protocol.session.v1.SessionCreatedNotification.DefaultInstance;
        case 1:
          return global::bgs.protocol.session.v1.SessionDestroyedNotification.DefaultInstance;
        case 2:
          return global::bgs.protocol.session.v1.SessionUpdatedNotification.DefaultInstance;
        case 3:
          return global::bgs.protocol.session.v1.SessionGameTimeWarningNotification.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bgs.protocol.NO_RESPONSE.DefaultInstance;
        case 1:
          return global::bgs.protocol.NO_RESPONSE.DefaultInstance;
        case 2:
          return global::bgs.protocol.NO_RESPONSE.DefaultInstance;
        case 3:
          return global::bgs.protocol.NO_RESPONSE.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bgs.protocol.session.v1.SessionListener {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void OnSessionCreated(
          pb::IRpcController controller,
          global::bgs.protocol.session.v1.SessionCreatedNotification request,
          global::System.Action<global::bgs.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bgs.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NO_RESPONSE, global::bgs.protocol.NO_RESPONSE.Builder>(done, global::bgs.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void OnSessionDestroyed(
          pb::IRpcController controller,
          global::bgs.protocol.session.v1.SessionDestroyedNotification request,
          global::System.Action<global::bgs.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bgs.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NO_RESPONSE, global::bgs.protocol.NO_RESPONSE.Builder>(done, global::bgs.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void OnSessionUpdated(
          pb::IRpcController controller,
          global::bgs.protocol.session.v1.SessionUpdatedNotification request,
          global::System.Action<global::bgs.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[2],
            controller, request, global::bgs.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NO_RESPONSE, global::bgs.protocol.NO_RESPONSE.Builder>(done, global::bgs.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void OnSessionGameTimeWarning(
          pb::IRpcController controller,
          global::bgs.protocol.session.v1.SessionGameTimeWarningNotification request,
          global::System.Action<global::bgs.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[3],
            controller, request, global::bgs.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NO_RESPONSE, global::bgs.protocol.NO_RESPONSE.Builder>(done, global::bgs.protocol.NO_RESPONSE.DefaultInstance));
      }
    }
  }
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class SessionService : pb::IService {
    public abstract void CreateSession(
        pb::IRpcController controller,
        global::bgs.protocol.session.v1.CreateSessionRequest request,
        global::System.Action<global::bgs.protocol.session.v1.CreateSessionResponse> done);
    public abstract void DestroySession(
        pb::IRpcController controller,
        global::bgs.protocol.session.v1.DestroySessionRequest request,
        global::System.Action<global::bgs.protocol.NoData> done);
    public abstract void UpdateSession(
        pb::IRpcController controller,
        global::bgs.protocol.session.v1.UpdateSessionRequest request,
        global::System.Action<global::bgs.protocol.NoData> done);
    public abstract void GetSessionStateByBenefactor(
        pb::IRpcController controller,
        global::bgs.protocol.session.v1.GetSessionStateByBenefactorRequest request,
        global::System.Action<global::bgs.protocol.session.v1.GetSessionStateByBenefactorResponse> done);
    public abstract void MarkSessionsAlive(
        pb::IRpcController controller,
        global::bgs.protocol.session.v1.MarkSessionsAliveRequest request,
        global::System.Action<global::bgs.protocol.session.v1.MarkSessionsAliveResponse> done);
    public abstract void GetSessionState(
        pb::IRpcController controller,
        global::bgs.protocol.session.v1.GetSessionStateRequest request,
        global::System.Action<global::bgs.protocol.session.v1.GetSessionStateResponse> done);
    public abstract void GetSignedSessionState(
        pb::IRpcController controller,
        global::bgs.protocol.session.v1.GetSignedSessionStateRequest request,
        global::System.Action<global::bgs.protocol.session.v1.GetSignedSessionStateResponse> done);
    public abstract void RefreshSessionKey(
        pb::IRpcController controller,
        global::bgs.protocol.session.v1.RefreshSessionKeyRequest request,
        global::System.Action<global::bgs.protocol.session.v1.RefreshSessionKeyResponse> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.SessionService.Descriptor.Services[1]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.CreateSession(controller, (global::bgs.protocol.session.v1.CreateSessionRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.session.v1.CreateSessionResponse>(
              done));
          return;
        case 1:
          this.DestroySession(controller, (global::bgs.protocol.session.v1.DestroySessionRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NoData>(
              done));
          return;
        case 2:
          this.UpdateSession(controller, (global::bgs.protocol.session.v1.UpdateSessionRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NoData>(
              done));
          return;
        case 3:
          this.GetSessionStateByBenefactor(controller, (global::bgs.protocol.session.v1.GetSessionStateByBenefactorRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.session.v1.GetSessionStateByBenefactorResponse>(
              done));
          return;
        case 4:
          this.MarkSessionsAlive(controller, (global::bgs.protocol.session.v1.MarkSessionsAliveRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.session.v1.MarkSessionsAliveResponse>(
              done));
          return;
        case 5:
          this.GetSessionState(controller, (global::bgs.protocol.session.v1.GetSessionStateRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.session.v1.GetSessionStateResponse>(
              done));
          return;
        case 6:
          this.GetSignedSessionState(controller, (global::bgs.protocol.session.v1.GetSignedSessionStateRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.session.v1.GetSignedSessionStateResponse>(
              done));
          return;
        case 7:
          this.RefreshSessionKey(controller, (global::bgs.protocol.session.v1.RefreshSessionKeyRequest) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.session.v1.RefreshSessionKeyResponse>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bgs.protocol.session.v1.CreateSessionRequest.DefaultInstance;
        case 1:
          return global::bgs.protocol.session.v1.DestroySessionRequest.DefaultInstance;
        case 2:
          return global::bgs.protocol.session.v1.UpdateSessionRequest.DefaultInstance;
        case 3:
          return global::bgs.protocol.session.v1.GetSessionStateByBenefactorRequest.DefaultInstance;
        case 4:
          return global::bgs.protocol.session.v1.MarkSessionsAliveRequest.DefaultInstance;
        case 5:
          return global::bgs.protocol.session.v1.GetSessionStateRequest.DefaultInstance;
        case 6:
          return global::bgs.protocol.session.v1.GetSignedSessionStateRequest.DefaultInstance;
        case 7:
          return global::bgs.protocol.session.v1.RefreshSessionKeyRequest.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bgs.protocol.session.v1.CreateSessionResponse.DefaultInstance;
        case 1:
          return global::bgs.protocol.NoData.DefaultInstance;
        case 2:
          return global::bgs.protocol.NoData.DefaultInstance;
        case 3:
          return global::bgs.protocol.session.v1.GetSessionStateByBenefactorResponse.DefaultInstance;
        case 4:
          return global::bgs.protocol.session.v1.MarkSessionsAliveResponse.DefaultInstance;
        case 5:
          return global::bgs.protocol.session.v1.GetSessionStateResponse.DefaultInstance;
        case 6:
          return global::bgs.protocol.session.v1.GetSignedSessionStateResponse.DefaultInstance;
        case 7:
          return global::bgs.protocol.session.v1.RefreshSessionKeyResponse.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bgs.protocol.session.v1.SessionService {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void CreateSession(
          pb::IRpcController controller,
          global::bgs.protocol.session.v1.CreateSessionRequest request,
          global::System.Action<global::bgs.protocol.session.v1.CreateSessionResponse> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bgs.protocol.session.v1.CreateSessionResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.session.v1.CreateSessionResponse, global::bgs.protocol.session.v1.CreateSessionResponse.Builder>(done, global::bgs.protocol.session.v1.CreateSessionResponse.DefaultInstance));
      }
      
      public override void DestroySession(
          pb::IRpcController controller,
          global::bgs.protocol.session.v1.DestroySessionRequest request,
          global::System.Action<global::bgs.protocol.NoData> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bgs.protocol.NoData.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NoData, global::bgs.protocol.NoData.Builder>(done, global::bgs.protocol.NoData.DefaultInstance));
      }
      
      public override void UpdateSession(
          pb::IRpcController controller,
          global::bgs.protocol.session.v1.UpdateSessionRequest request,
          global::System.Action<global::bgs.protocol.NoData> done) {
        channel.CallMethod(Descriptor.Methods[2],
            controller, request, global::bgs.protocol.NoData.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NoData, global::bgs.protocol.NoData.Builder>(done, global::bgs.protocol.NoData.DefaultInstance));
      }
      
      public override void GetSessionStateByBenefactor(
          pb::IRpcController controller,
          global::bgs.protocol.session.v1.GetSessionStateByBenefactorRequest request,
          global::System.Action<global::bgs.protocol.session.v1.GetSessionStateByBenefactorResponse> done) {
        channel.CallMethod(Descriptor.Methods[3],
            controller, request, global::bgs.protocol.session.v1.GetSessionStateByBenefactorResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.session.v1.GetSessionStateByBenefactorResponse, global::bgs.protocol.session.v1.GetSessionStateByBenefactorResponse.Builder>(done, global::bgs.protocol.session.v1.GetSessionStateByBenefactorResponse.DefaultInstance));
      }
      
      public override void MarkSessionsAlive(
          pb::IRpcController controller,
          global::bgs.protocol.session.v1.MarkSessionsAliveRequest request,
          global::System.Action<global::bgs.protocol.session.v1.MarkSessionsAliveResponse> done) {
        channel.CallMethod(Descriptor.Methods[4],
            controller, request, global::bgs.protocol.session.v1.MarkSessionsAliveResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.session.v1.MarkSessionsAliveResponse, global::bgs.protocol.session.v1.MarkSessionsAliveResponse.Builder>(done, global::bgs.protocol.session.v1.MarkSessionsAliveResponse.DefaultInstance));
      }
      
      public override void GetSessionState(
          pb::IRpcController controller,
          global::bgs.protocol.session.v1.GetSessionStateRequest request,
          global::System.Action<global::bgs.protocol.session.v1.GetSessionStateResponse> done) {
        channel.CallMethod(Descriptor.Methods[5],
            controller, request, global::bgs.protocol.session.v1.GetSessionStateResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.session.v1.GetSessionStateResponse, global::bgs.protocol.session.v1.GetSessionStateResponse.Builder>(done, global::bgs.protocol.session.v1.GetSessionStateResponse.DefaultInstance));
      }
      
      public override void GetSignedSessionState(
          pb::IRpcController controller,
          global::bgs.protocol.session.v1.GetSignedSessionStateRequest request,
          global::System.Action<global::bgs.protocol.session.v1.GetSignedSessionStateResponse> done) {
        channel.CallMethod(Descriptor.Methods[6],
            controller, request, global::bgs.protocol.session.v1.GetSignedSessionStateResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.session.v1.GetSignedSessionStateResponse, global::bgs.protocol.session.v1.GetSignedSessionStateResponse.Builder>(done, global::bgs.protocol.session.v1.GetSignedSessionStateResponse.DefaultInstance));
      }
      
      public override void RefreshSessionKey(
          pb::IRpcController controller,
          global::bgs.protocol.session.v1.RefreshSessionKeyRequest request,
          global::System.Action<global::bgs.protocol.session.v1.RefreshSessionKeyResponse> done) {
        channel.CallMethod(Descriptor.Methods[7],
            controller, request, global::bgs.protocol.session.v1.RefreshSessionKeyResponse.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.session.v1.RefreshSessionKeyResponse, global::bgs.protocol.session.v1.RefreshSessionKeyResponse.Builder>(done, global::bgs.protocol.session.v1.RefreshSessionKeyResponse.DefaultInstance));
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
