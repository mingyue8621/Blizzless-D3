// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bgs.protocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Range {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_UnsignedIntRange__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.UnsignedIntRange, global::bgs.protocol.UnsignedIntRange.Builder> internal__static_bgs_protocol_UnsignedIntRange__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_SignedIntRange__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.SignedIntRange, global::bgs.protocol.SignedIntRange.Builder> internal__static_bgs_protocol_SignedIntRange__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_FloatRange__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.FloatRange, global::bgs.protocol.FloatRange.Builder> internal__static_bgs_protocol_FloatRange__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Range() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Ci9iZ3MvbG93L3BiL2NsaWVudC9nbG9iYWxfZXh0ZW5zaW9ucy9yYW5nZS5w" + 
          "cm90bxIMYmdzLnByb3RvY29sIjYKEFVuc2lnbmVkSW50UmFuZ2USEAoDbWlu" + 
          "GAEgASgEUgNtaW4SEAoDbWF4GAIgASgEUgNtYXgiNAoOU2lnbmVkSW50UmFu" + 
          "Z2USEAoDbWluGAEgASgDUgNtaW4SEAoDbWF4GAIgASgDUgNtYXgiMAoKRmxv" + 
          "YXRSYW5nZRIQCgNtaW4YASABKAJSA21pbhIQCgNtYXgYAiABKAJSA21heA==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bgs_protocol_UnsignedIntRange__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bgs_protocol_UnsignedIntRange__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.UnsignedIntRange, global::bgs.protocol.UnsignedIntRange.Builder>(internal__static_bgs_protocol_UnsignedIntRange__Descriptor,
                new string[] { "Min", "Max", });
        internal__static_bgs_protocol_SignedIntRange__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bgs_protocol_SignedIntRange__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.SignedIntRange, global::bgs.protocol.SignedIntRange.Builder>(internal__static_bgs_protocol_SignedIntRange__Descriptor,
                new string[] { "Min", "Max", });
        internal__static_bgs_protocol_FloatRange__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bgs_protocol_FloatRange__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.FloatRange, global::bgs.protocol.FloatRange.Builder>(internal__static_bgs_protocol_FloatRange__Descriptor,
                new string[] { "Min", "Max", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class UnsignedIntRange : pb::GeneratedMessage<UnsignedIntRange, UnsignedIntRange.Builder> {
    private UnsignedIntRange() { }
    private static readonly UnsignedIntRange defaultInstance = new UnsignedIntRange().MakeReadOnly();
    private static readonly string[] _unsignedIntRangeFieldNames = new string[] { "max", "min" };
    private static readonly uint[] _unsignedIntRangeFieldTags = new uint[] { 16, 8 };
    public static UnsignedIntRange DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UnsignedIntRange DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UnsignedIntRange ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.Range.internal__static_bgs_protocol_UnsignedIntRange__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UnsignedIntRange, UnsignedIntRange.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.Range.internal__static_bgs_protocol_UnsignedIntRange__FieldAccessorTable; }
    }
    
    public const int MinFieldNumber = 1;
    private bool hasMin;
    private ulong min_;
    public bool HasMin {
      get { return hasMin; }
    }
    public ulong Min {
      get { return min_; }
    }
    
    public const int MaxFieldNumber = 2;
    private bool hasMax;
    private ulong max_;
    public bool HasMax {
      get { return hasMax; }
    }
    public ulong Max {
      get { return max_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _unsignedIntRangeFieldNames;
      if (hasMin) {
        output.WriteUInt64(1, field_names[1], Min);
      }
      if (hasMax) {
        output.WriteUInt64(2, field_names[0], Max);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMin) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, Min);
        }
        if (hasMax) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, Max);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UnsignedIntRange ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UnsignedIntRange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UnsignedIntRange ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UnsignedIntRange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UnsignedIntRange ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UnsignedIntRange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UnsignedIntRange ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UnsignedIntRange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UnsignedIntRange ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UnsignedIntRange ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UnsignedIntRange MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UnsignedIntRange prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<UnsignedIntRange, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UnsignedIntRange cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UnsignedIntRange result;
      
      private UnsignedIntRange PrepareBuilder() {
        if (resultIsReadOnly) {
          UnsignedIntRange original = result;
          result = new UnsignedIntRange();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UnsignedIntRange MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.UnsignedIntRange.Descriptor; }
      }
      
      public override UnsignedIntRange DefaultInstanceForType {
        get { return global::bgs.protocol.UnsignedIntRange.DefaultInstance; }
      }
      
      public override UnsignedIntRange BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UnsignedIntRange) {
          return MergeFrom((UnsignedIntRange) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UnsignedIntRange other) {
        if (other == global::bgs.protocol.UnsignedIntRange.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMin) {
          Min = other.Min;
        }
        if (other.HasMax) {
          Max = other.Max;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_unsignedIntRangeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _unsignedIntRangeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMin = input.ReadUInt64(ref result.min_);
              break;
            }
            case 16: {
              result.hasMax = input.ReadUInt64(ref result.max_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMin {
        get { return result.hasMin; }
      }
      public ulong Min {
        get { return result.Min; }
        set { SetMin(value); }
      }
      public Builder SetMin(ulong value) {
        PrepareBuilder();
        result.hasMin = true;
        result.min_ = value;
        return this;
      }
      public Builder ClearMin() {
        PrepareBuilder();
        result.hasMin = false;
        result.min_ = 0UL;
        return this;
      }
      
      public bool HasMax {
        get { return result.hasMax; }
      }
      public ulong Max {
        get { return result.Max; }
        set { SetMax(value); }
      }
      public Builder SetMax(ulong value) {
        PrepareBuilder();
        result.hasMax = true;
        result.max_ = value;
        return this;
      }
      public Builder ClearMax() {
        PrepareBuilder();
        result.hasMax = false;
        result.max_ = 0UL;
        return this;
      }
    }
    static UnsignedIntRange() {
      object.ReferenceEquals(global::bgs.protocol.Range.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SignedIntRange : pb::GeneratedMessage<SignedIntRange, SignedIntRange.Builder> {
    private SignedIntRange() { }
    private static readonly SignedIntRange defaultInstance = new SignedIntRange().MakeReadOnly();
    private static readonly string[] _signedIntRangeFieldNames = new string[] { "max", "min" };
    private static readonly uint[] _signedIntRangeFieldTags = new uint[] { 16, 8 };
    public static SignedIntRange DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SignedIntRange DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SignedIntRange ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.Range.internal__static_bgs_protocol_SignedIntRange__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SignedIntRange, SignedIntRange.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.Range.internal__static_bgs_protocol_SignedIntRange__FieldAccessorTable; }
    }
    
    public const int MinFieldNumber = 1;
    private bool hasMin;
    private long min_;
    public bool HasMin {
      get { return hasMin; }
    }
    public long Min {
      get { return min_; }
    }
    
    public const int MaxFieldNumber = 2;
    private bool hasMax;
    private long max_;
    public bool HasMax {
      get { return hasMax; }
    }
    public long Max {
      get { return max_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _signedIntRangeFieldNames;
      if (hasMin) {
        output.WriteInt64(1, field_names[1], Min);
      }
      if (hasMax) {
        output.WriteInt64(2, field_names[0], Max);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMin) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, Min);
        }
        if (hasMax) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, Max);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SignedIntRange ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SignedIntRange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SignedIntRange ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SignedIntRange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SignedIntRange ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SignedIntRange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SignedIntRange ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SignedIntRange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SignedIntRange ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SignedIntRange ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SignedIntRange MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SignedIntRange prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SignedIntRange, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SignedIntRange cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SignedIntRange result;
      
      private SignedIntRange PrepareBuilder() {
        if (resultIsReadOnly) {
          SignedIntRange original = result;
          result = new SignedIntRange();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SignedIntRange MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.SignedIntRange.Descriptor; }
      }
      
      public override SignedIntRange DefaultInstanceForType {
        get { return global::bgs.protocol.SignedIntRange.DefaultInstance; }
      }
      
      public override SignedIntRange BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SignedIntRange) {
          return MergeFrom((SignedIntRange) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SignedIntRange other) {
        if (other == global::bgs.protocol.SignedIntRange.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMin) {
          Min = other.Min;
        }
        if (other.HasMax) {
          Max = other.Max;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_signedIntRangeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _signedIntRangeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMin = input.ReadInt64(ref result.min_);
              break;
            }
            case 16: {
              result.hasMax = input.ReadInt64(ref result.max_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMin {
        get { return result.hasMin; }
      }
      public long Min {
        get { return result.Min; }
        set { SetMin(value); }
      }
      public Builder SetMin(long value) {
        PrepareBuilder();
        result.hasMin = true;
        result.min_ = value;
        return this;
      }
      public Builder ClearMin() {
        PrepareBuilder();
        result.hasMin = false;
        result.min_ = 0L;
        return this;
      }
      
      public bool HasMax {
        get { return result.hasMax; }
      }
      public long Max {
        get { return result.Max; }
        set { SetMax(value); }
      }
      public Builder SetMax(long value) {
        PrepareBuilder();
        result.hasMax = true;
        result.max_ = value;
        return this;
      }
      public Builder ClearMax() {
        PrepareBuilder();
        result.hasMax = false;
        result.max_ = 0L;
        return this;
      }
    }
    static SignedIntRange() {
      object.ReferenceEquals(global::bgs.protocol.Range.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FloatRange : pb::GeneratedMessage<FloatRange, FloatRange.Builder> {
    private FloatRange() { }
    private static readonly FloatRange defaultInstance = new FloatRange().MakeReadOnly();
    private static readonly string[] _floatRangeFieldNames = new string[] { "max", "min" };
    private static readonly uint[] _floatRangeFieldTags = new uint[] { 21, 13 };
    public static FloatRange DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FloatRange DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FloatRange ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.Range.internal__static_bgs_protocol_FloatRange__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FloatRange, FloatRange.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.Range.internal__static_bgs_protocol_FloatRange__FieldAccessorTable; }
    }
    
    public const int MinFieldNumber = 1;
    private bool hasMin;
    private float min_;
    public bool HasMin {
      get { return hasMin; }
    }
    public float Min {
      get { return min_; }
    }
    
    public const int MaxFieldNumber = 2;
    private bool hasMax;
    private float max_;
    public bool HasMax {
      get { return hasMax; }
    }
    public float Max {
      get { return max_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _floatRangeFieldNames;
      if (hasMin) {
        output.WriteFloat(1, field_names[1], Min);
      }
      if (hasMax) {
        output.WriteFloat(2, field_names[0], Max);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMin) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, Min);
        }
        if (hasMax) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, Max);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FloatRange ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FloatRange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FloatRange ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FloatRange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FloatRange ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FloatRange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FloatRange ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FloatRange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FloatRange ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FloatRange ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FloatRange MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FloatRange prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FloatRange, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FloatRange cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FloatRange result;
      
      private FloatRange PrepareBuilder() {
        if (resultIsReadOnly) {
          FloatRange original = result;
          result = new FloatRange();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FloatRange MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.FloatRange.Descriptor; }
      }
      
      public override FloatRange DefaultInstanceForType {
        get { return global::bgs.protocol.FloatRange.DefaultInstance; }
      }
      
      public override FloatRange BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FloatRange) {
          return MergeFrom((FloatRange) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FloatRange other) {
        if (other == global::bgs.protocol.FloatRange.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMin) {
          Min = other.Min;
        }
        if (other.HasMax) {
          Max = other.Max;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_floatRangeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _floatRangeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasMin = input.ReadFloat(ref result.min_);
              break;
            }
            case 21: {
              result.hasMax = input.ReadFloat(ref result.max_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMin {
        get { return result.hasMin; }
      }
      public float Min {
        get { return result.Min; }
        set { SetMin(value); }
      }
      public Builder SetMin(float value) {
        PrepareBuilder();
        result.hasMin = true;
        result.min_ = value;
        return this;
      }
      public Builder ClearMin() {
        PrepareBuilder();
        result.hasMin = false;
        result.min_ = 0F;
        return this;
      }
      
      public bool HasMax {
        get { return result.hasMax; }
      }
      public float Max {
        get { return result.Max; }
        set { SetMax(value); }
      }
      public Builder SetMax(float value) {
        PrepareBuilder();
        result.hasMax = true;
        result.max_ = value;
        return this;
      }
      public Builder ClearMax() {
        PrepareBuilder();
        result.hasMax = false;
        result.max_ = 0F;
        return this;
      }
    }
    static FloatRange() {
      object.ReferenceEquals(global::bgs.protocol.Range.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
