// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bgs.protocol.club.v1 {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class ClubStream {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_StreamPosition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamPosition, global::bgs.protocol.club.v1.StreamPosition.Builder> internal__static_bgs_protocol_club_v1_StreamPosition__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_StreamAccess__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamAccess, global::bgs.protocol.club.v1.StreamAccess.Builder> internal__static_bgs_protocol_club_v1_StreamAccess__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_CreateStreamOptions__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.CreateStreamOptions, global::bgs.protocol.club.v1.CreateStreamOptions.Builder> internal__static_bgs_protocol_club_v1_CreateStreamOptions__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_Stream__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.Stream, global::bgs.protocol.club.v1.Stream.Builder> internal__static_bgs_protocol_club_v1_Stream__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_StreamDescription__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamDescription, global::bgs.protocol.club.v1.StreamDescription.Builder> internal__static_bgs_protocol_club_v1_StreamDescription__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_MentionContent__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.MentionContent, global::bgs.protocol.club.v1.MentionContent.Builder> internal__static_bgs_protocol_club_v1_MentionContent__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_CreateMessageOptions__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.CreateMessageOptions, global::bgs.protocol.club.v1.CreateMessageOptions.Builder> internal__static_bgs_protocol_club_v1_CreateMessageOptions__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_ClubStreamMessageContainer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.ClubStreamMessageContainer, global::bgs.protocol.club.v1.ClubStreamMessageContainer.Builder> internal__static_bgs_protocol_club_v1_ClubStreamMessageContainer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_ContentChain__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.ContentChain, global::bgs.protocol.club.v1.ContentChain.Builder> internal__static_bgs_protocol_club_v1_ContentChain__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_StreamMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamMessage, global::bgs.protocol.club.v1.StreamMessage.Builder> internal__static_bgs_protocol_club_v1_StreamMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_StreamMention__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamMention, global::bgs.protocol.club.v1.StreamMention.Builder> internal__static_bgs_protocol_club_v1_StreamMention__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_StreamView__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamView, global::bgs.protocol.club.v1.StreamView.Builder> internal__static_bgs_protocol_club_v1_StreamView__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_StreamAdvanceViewTime__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamAdvanceViewTime, global::bgs.protocol.club.v1.StreamAdvanceViewTime.Builder> internal__static_bgs_protocol_club_v1_StreamAdvanceViewTime__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_StreamEventTime__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamEventTime, global::bgs.protocol.club.v1.StreamEventTime.Builder> internal__static_bgs_protocol_club_v1_StreamEventTime__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_StreamMentionView__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamMentionView, global::bgs.protocol.club.v1.StreamMentionView.Builder> internal__static_bgs_protocol_club_v1_StreamMentionView__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_StreamStateOptions__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamStateOptions, global::bgs.protocol.club.v1.StreamStateOptions.Builder> internal__static_bgs_protocol_club_v1_StreamStateOptions__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_StreamStateAssignment__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamStateAssignment, global::bgs.protocol.club.v1.StreamStateAssignment.Builder> internal__static_bgs_protocol_club_v1_StreamStateAssignment__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_StreamTypingIndicator__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamTypingIndicator, global::bgs.protocol.club.v1.StreamTypingIndicator.Builder> internal__static_bgs_protocol_club_v1_StreamTypingIndicator__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ClubStream() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CiNiZ3MvbG93L3BiL2NsaWVudC9jbHViX3N0cmVhbS5wcm90bxIUYmdzLnBy" + 
          "b3RvY29sLmNsdWIudjEaJmJncy9sb3cvcGIvY2xpZW50L2NsdWJfbWVtYmVy" + 
          "X2lkLnByb3RvGiFiZ3MvbG93L3BiL2NsaWVudC9jbHViX2VudW0ucHJvdG8a" + 
          "I2Jncy9sb3cvcGIvY2xpZW50L2NsdWJfbWVtYmVyLnByb3RvGiFiZ3MvbG93" + 
          "L3BiL2NsaWVudC9jbHViX3R5cGUucHJvdG8aNWJncy9sb3cvcGIvY2xpZW50" + 
          "L2FwaS9jbGllbnQvdjIvYXR0cmlidXRlX3R5cGVzLnByb3RvGiNiZ3MvbG93" + 
          "L3BiL2NsaWVudC9lbWJlZF90eXBlcy5wcm90bxooYmdzL2xvdy9wYi9jbGll" + 
          "bnQvZXZlbnRfdmlld190eXBlcy5wcm90bxolYmdzL2xvdy9wYi9jbGllbnQv" + 
          "bWVzc2FnZV90eXBlcy5wcm90bxohYmdzL2xvdy9wYi9jbGllbnQvZXRzX3R5" + 
          "cGVzLnByb3RvIjEKDlN0cmVhbVBvc2l0aW9uEh8KCXN0cmVhbV9pZBgBIAMo" + 
          "BEICEAFSCHN0cmVhbUlkIiYKDFN0cmVhbUFjY2VzcxIWCgRyb2xlGAEgAygN" + 
          "QgIQAVIEcm9sZSKYAgoTQ3JlYXRlU3RyZWFtT3B0aW9ucxI4CglhdHRyaWJ1" + 
          "dGUYASADKAsyGi5iZ3MucHJvdG9jb2wudjIuQXR0cmlidXRlUglhdHRyaWJ1" + 
          "dGUSEgoEbmFtZRgCIAEoCVIEbmFtZRIYCgdzdWJqZWN0GAMgASgJUgdzdWJq" + 
          "ZWN0EjoKBmFjY2VzcxgEIAEoCzIiLmJncy5wcm90b2NvbC5jbHViLnYxLlN0" + 
          "cmVhbUFjY2Vzc1IGYWNjZXNzEl0KC3ZvaWNlX2xldmVsGAUgASgOMiYuYmdz" + 
          "LnByb3RvY29sLmNsdWIudjEuU3RyZWFtVm9pY2VMZXZlbDoUVk9JQ0VfTEVW" + 
          "RUxfRElTQUJMRURSCnZvaWNlTGV2ZWwi2QIKBlN0cmVhbRIXCgdjbHViX2lk" + 
          "GAEgASgEUgZjbHViSWQSDgoCaWQYAiABKARSAmlkEjgKCWF0dHJpYnV0ZRgD" + 
          "IAMoCzIaLmJncy5wcm90b2NvbC52Mi5BdHRyaWJ1dGVSCWF0dHJpYnV0ZRIS" + 
          "CgRuYW1lGAQgASgJUgRuYW1lEhgKB3N1YmplY3QYBSABKAlSB3N1YmplY3QS" + 
          "OgoGYWNjZXNzGAYgASgLMiIuYmdzLnByb3RvY29sLmNsdWIudjEuU3RyZWFt" + 
          "QWNjZXNzUgZhY2Nlc3MSXQoLdm9pY2VfbGV2ZWwYByABKA4yJi5iZ3MucHJv" + 
          "dG9jb2wuY2x1Yi52MS5TdHJlYW1Wb2ljZUxldmVsOhRWT0lDRV9MRVZFTF9E" + 
          "SVNBQkxFRFIKdm9pY2VMZXZlbBIjCg1jcmVhdGlvbl90aW1lGAggASgEUgxj" + 
          "cmVhdGlvblRpbWUiNwoRU3RyZWFtRGVzY3JpcHRpb24SDgoCaWQYAiABKARS" + 
          "AmlkEhIKBG5hbWUYBCABKAlSBG5hbWUiiwEKDk1lbnRpb25Db250ZW50EhAK" + 
          "A2FsbBgBIAEoCFIDYWxsEhIKBGhlcmUYAiABKAhSBGhlcmUSOwoJbWVtYmVy" + 
          "X2lkGAMgAygLMh4uYmdzLnByb3RvY29sLmNsdWIudjEuTWVtYmVySWRSCG1l" + 
          "bWJlcklkEhYKBHJvbGUYBCADKA1CAhABUgRyb2xlInAKFENyZWF0ZU1lc3Nh" + 
          "Z2VPcHRpb25zEhgKB2NvbnRlbnQYAiABKAlSB2NvbnRlbnQSPgoHbWVudGlv" + 
          "bhgDIAEoCzIkLmJncy5wcm90b2NvbC5jbHViLnYxLk1lbnRpb25Db250ZW50" + 
          "UgdtZW50aW9uIlsKGkNsdWJTdHJlYW1NZXNzYWdlQ29udGFpbmVyEj0KB21l" + 
          "c3NhZ2UYASADKAsyIy5iZ3MucHJvdG9jb2wuY2x1Yi52MS5TdHJlYW1NZXNz" + 
          "YWdlUgdtZXNzYWdlIrQBCgxDb250ZW50Q2hhaW4SGAoHY29udGVudBgFIAEo" + 
          "CVIHY29udGVudBItCgVlbWJlZBgGIAMoCzIXLmJncy5wcm90b2NvbC5FbWJl" + 
          "ZEluZm9SBWVtYmVkEj4KB21lbnRpb24YByABKAsyJC5iZ3MucHJvdG9jb2wu" + 
          "Y2x1Yi52MS5NZW50aW9uQ29udGVudFIHbWVudGlvbhIbCgllZGl0X3RpbWUY" + 
          "CCABKARSCGVkaXRUaW1lIsoCCg1TdHJlYW1NZXNzYWdlEicKAmlkGAMgASgL" + 
          "MhcuYmdzLnByb3RvY29sLk1lc3NhZ2VJZFICaWQSPwoGYXV0aG9yGAQgASgL" + 
          "MicuYmdzLnByb3RvY29sLmNsdWIudjEuTWVtYmVyRGVzY3JpcHRpb25SBmF1" + 
          "dGhvchJHCg1jb250ZW50X2NoYWluGAYgAygLMiIuYmdzLnByb3RvY29sLmNs" + 
          "dWIudjEuQ29udGVudENoYWluUgxjb250ZW50Q2hhaW4SRQoJZGVzdHJveWVy" + 
          "GA8gASgLMicuYmdzLnByb3RvY29sLmNsdWIudjEuTWVtYmVyRGVzY3JpcHRp" + 
          "b25SCWRlc3Ryb3llchIcCglkZXN0cm95ZWQYECABKAhSCWRlc3Ryb3llZBIh" + 
          "CgxkZXN0cm95X3RpbWUYESABKARSC2Rlc3Ryb3lUaW1lItYDCg1TdHJlYW1N" + 
          "ZW50aW9uEhcKB2NsdWJfaWQYASABKARSBmNsdWJJZBIbCglzdHJlYW1faWQY" + 
          "AiABKARSCHN0cmVhbUlkEjYKCm1lc3NhZ2VfaWQYAyABKAsyFy5iZ3MucHJv" + 
          "dG9jb2wuTWVzc2FnZUlkUgltZXNzYWdlSWQSPwoGYXV0aG9yGAQgASgLMicu" + 
          "YmdzLnByb3RvY29sLmNsdWIudjEuTWVtYmVyRGVzY3JpcHRpb25SBmF1dGhv" + 
          "chIcCglkZXN0cm95ZWQYBSABKAhSCWRlc3Ryb3llZBI5CgptZW50aW9uX2lk" + 
          "GAYgASgLMhouYmdzLnByb3RvY29sLlRpbWVTZXJpZXNJZFIJbWVudGlvbklk" + 
          "EjsKCW1lbWJlcl9pZBgHIAEoCzIeLmJncy5wcm90b2NvbC5jbHViLnYxLk1l" + 
          "bWJlcklkUghtZW1iZXJJZBI9CgdtZXNzYWdlGAggASgLMiMuYmdzLnByb3Rv" + 
          "Y29sLmNsdWIudjEuU3RyZWFtTWVzc2FnZVIHbWVzc2FnZRJBCgljbHViX3R5" + 
          "cGUYCSABKAsyJC5iZ3MucHJvdG9jb2wuY2x1Yi52MS5VbmlxdWVDbHViVHlw" + 
          "ZVIIY2x1YlR5cGUidAoKU3RyZWFtVmlldxIXCgdjbHViX2lkGAEgASgEUgZj" + 
          "bHViSWQSGwoJc3RyZWFtX2lkGAIgASgEUghzdHJlYW1JZBIwCgZtYXJrZXIY" + 
          "AyABKAsyGC5iZ3MucHJvdG9jb2wuVmlld01hcmtlclIGbWFya2VyIlEKFVN0" + 
          "cmVhbUFkdmFuY2VWaWV3VGltZRIbCglzdHJlYW1faWQYASABKARSCHN0cmVh" + 
          "bUlkEhsKCXZpZXdfdGltZRgCIAEoBFIIdmlld1RpbWUiTQoPU3RyZWFtRXZl" + 
          "bnRUaW1lEhsKCXN0cmVhbV9pZBgBIAEoBFIIc3RyZWFtSWQSHQoKZXZlbnRf" + 
          "dGltZRgCIAEoBFIJZXZlbnRUaW1lInsKEVN0cmVhbU1lbnRpb25WaWV3EhcK" + 
          "B2NsdWJfaWQYASABKARSBmNsdWJJZBIbCglzdHJlYW1faWQYAiABKARSCHN0" + 
          "cmVhbUlkEjAKBm1hcmtlchgDIAEoCzIYLmJncy5wcm90b2NvbC5WaWV3TWFy" + 
          "a2VyUgZtYXJrZXIilwIKElN0cmVhbVN0YXRlT3B0aW9ucxI4CglhdHRyaWJ1" + 
          "dGUYASADKAsyGi5iZ3MucHJvdG9jb2wudjIuQXR0cmlidXRlUglhdHRyaWJ1" + 
          "dGUSEgoEbmFtZRgCIAEoCVIEbmFtZRIYCgdzdWJqZWN0GAMgASgJUgdzdWJq" + 
          "ZWN0EjoKBmFjY2VzcxgEIAEoCzIiLmJncy5wcm90b2NvbC5jbHViLnYxLlN0" + 
          "cmVhbUFjY2Vzc1IGYWNjZXNzEl0KC3ZvaWNlX2xldmVsGAUgASgOMiYuYmdz" + 
          "LnByb3RvY29sLmNsdWIudjEuU3RyZWFtVm9pY2VMZXZlbDoUVk9JQ0VfTEVW" + 
          "RUxfRElTQUJMRURSCnZvaWNlTGV2ZWwi9wIKFVN0cmVhbVN0YXRlQXNzaWdu" + 
          "bWVudBIbCglzdHJlYW1faWQYASABKARSCHN0cmVhbUlkEjgKCWF0dHJpYnV0" + 
          "ZRgCIAMoCzIaLmJncy5wcm90b2NvbC52Mi5BdHRyaWJ1dGVSCWF0dHJpYnV0" + 
          "ZRISCgRuYW1lGAMgASgJUgRuYW1lEhgKB3N1YmplY3QYBCABKAlSB3N1Ympl" + 
          "Y3QSOgoGYWNjZXNzGAUgASgLMiIuYmdzLnByb3RvY29sLmNsdWIudjEuU3Ry" + 
          "ZWFtQWNjZXNzUgZhY2Nlc3MSPgobc3RyZWFtX3N1YnNjcmlwdGlvbl9yZW1v" + 
          "dmVkGAYgASgIUhlzdHJlYW1TdWJzY3JpcHRpb25SZW1vdmVkEl0KC3ZvaWNl" + 
          "X2xldmVsGAcgASgOMiYuYmdzLnByb3RvY29sLmNsdWIudjEuU3RyZWFtVm9p" + 
          "Y2VMZXZlbDoUVk9JQ0VfTEVWRUxfRElTQUJMRURSCnZvaWNlTGV2ZWwitQEK" + 
          "FVN0cmVhbVR5cGluZ0luZGljYXRvchI7CglhdXRob3JfaWQYASABKAsyHi5i" + 
          "Z3MucHJvdG9jb2wuY2x1Yi52MS5NZW1iZXJJZFIIYXV0aG9ySWQSSQoJaW5k" + 
          "aWNhdG9yGAIgASgOMh0uYmdzLnByb3RvY29sLlR5cGluZ0luZGljYXRvcjoM" + 
          "VFlQSU5HX1NUQVJUUglpbmRpY2F0b3ISFAoFZXBvY2gYAyABKARSBWVwb2No");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bgs_protocol_club_v1_StreamPosition__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bgs_protocol_club_v1_StreamPosition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamPosition, global::bgs.protocol.club.v1.StreamPosition.Builder>(internal__static_bgs_protocol_club_v1_StreamPosition__Descriptor,
                new string[] { "StreamId", });
        internal__static_bgs_protocol_club_v1_StreamAccess__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bgs_protocol_club_v1_StreamAccess__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamAccess, global::bgs.protocol.club.v1.StreamAccess.Builder>(internal__static_bgs_protocol_club_v1_StreamAccess__Descriptor,
                new string[] { "Role", });
        internal__static_bgs_protocol_club_v1_CreateStreamOptions__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bgs_protocol_club_v1_CreateStreamOptions__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.CreateStreamOptions, global::bgs.protocol.club.v1.CreateStreamOptions.Builder>(internal__static_bgs_protocol_club_v1_CreateStreamOptions__Descriptor,
                new string[] { "Attribute", "Name", "Subject", "Access", "VoiceLevel", });
        internal__static_bgs_protocol_club_v1_Stream__Descriptor = Descriptor.MessageTypes[3];
        internal__static_bgs_protocol_club_v1_Stream__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.Stream, global::bgs.protocol.club.v1.Stream.Builder>(internal__static_bgs_protocol_club_v1_Stream__Descriptor,
                new string[] { "ClubId", "Id", "Attribute", "Name", "Subject", "Access", "VoiceLevel", "CreationTime", });
        internal__static_bgs_protocol_club_v1_StreamDescription__Descriptor = Descriptor.MessageTypes[4];
        internal__static_bgs_protocol_club_v1_StreamDescription__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamDescription, global::bgs.protocol.club.v1.StreamDescription.Builder>(internal__static_bgs_protocol_club_v1_StreamDescription__Descriptor,
                new string[] { "Id", "Name", });
        internal__static_bgs_protocol_club_v1_MentionContent__Descriptor = Descriptor.MessageTypes[5];
        internal__static_bgs_protocol_club_v1_MentionContent__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.MentionContent, global::bgs.protocol.club.v1.MentionContent.Builder>(internal__static_bgs_protocol_club_v1_MentionContent__Descriptor,
                new string[] { "All", "Here", "MemberId", "Role", });
        internal__static_bgs_protocol_club_v1_CreateMessageOptions__Descriptor = Descriptor.MessageTypes[6];
        internal__static_bgs_protocol_club_v1_CreateMessageOptions__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.CreateMessageOptions, global::bgs.protocol.club.v1.CreateMessageOptions.Builder>(internal__static_bgs_protocol_club_v1_CreateMessageOptions__Descriptor,
                new string[] { "Content", "Mention", });
        internal__static_bgs_protocol_club_v1_ClubStreamMessageContainer__Descriptor = Descriptor.MessageTypes[7];
        internal__static_bgs_protocol_club_v1_ClubStreamMessageContainer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.ClubStreamMessageContainer, global::bgs.protocol.club.v1.ClubStreamMessageContainer.Builder>(internal__static_bgs_protocol_club_v1_ClubStreamMessageContainer__Descriptor,
                new string[] { "Message", });
        internal__static_bgs_protocol_club_v1_ContentChain__Descriptor = Descriptor.MessageTypes[8];
        internal__static_bgs_protocol_club_v1_ContentChain__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.ContentChain, global::bgs.protocol.club.v1.ContentChain.Builder>(internal__static_bgs_protocol_club_v1_ContentChain__Descriptor,
                new string[] { "Content", "Embed", "Mention", "EditTime", });
        internal__static_bgs_protocol_club_v1_StreamMessage__Descriptor = Descriptor.MessageTypes[9];
        internal__static_bgs_protocol_club_v1_StreamMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamMessage, global::bgs.protocol.club.v1.StreamMessage.Builder>(internal__static_bgs_protocol_club_v1_StreamMessage__Descriptor,
                new string[] { "Id", "Author", "ContentChain", "Destroyer", "Destroyed", "DestroyTime", });
        internal__static_bgs_protocol_club_v1_StreamMention__Descriptor = Descriptor.MessageTypes[10];
        internal__static_bgs_protocol_club_v1_StreamMention__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamMention, global::bgs.protocol.club.v1.StreamMention.Builder>(internal__static_bgs_protocol_club_v1_StreamMention__Descriptor,
                new string[] { "ClubId", "StreamId", "MessageId", "Author", "Destroyed", "MentionId", "MemberId", "Message", "ClubType", });
        internal__static_bgs_protocol_club_v1_StreamView__Descriptor = Descriptor.MessageTypes[11];
        internal__static_bgs_protocol_club_v1_StreamView__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamView, global::bgs.protocol.club.v1.StreamView.Builder>(internal__static_bgs_protocol_club_v1_StreamView__Descriptor,
                new string[] { "ClubId", "StreamId", "Marker", });
        internal__static_bgs_protocol_club_v1_StreamAdvanceViewTime__Descriptor = Descriptor.MessageTypes[12];
        internal__static_bgs_protocol_club_v1_StreamAdvanceViewTime__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamAdvanceViewTime, global::bgs.protocol.club.v1.StreamAdvanceViewTime.Builder>(internal__static_bgs_protocol_club_v1_StreamAdvanceViewTime__Descriptor,
                new string[] { "StreamId", "ViewTime", });
        internal__static_bgs_protocol_club_v1_StreamEventTime__Descriptor = Descriptor.MessageTypes[13];
        internal__static_bgs_protocol_club_v1_StreamEventTime__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamEventTime, global::bgs.protocol.club.v1.StreamEventTime.Builder>(internal__static_bgs_protocol_club_v1_StreamEventTime__Descriptor,
                new string[] { "StreamId", "EventTime", });
        internal__static_bgs_protocol_club_v1_StreamMentionView__Descriptor = Descriptor.MessageTypes[14];
        internal__static_bgs_protocol_club_v1_StreamMentionView__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamMentionView, global::bgs.protocol.club.v1.StreamMentionView.Builder>(internal__static_bgs_protocol_club_v1_StreamMentionView__Descriptor,
                new string[] { "ClubId", "StreamId", "Marker", });
        internal__static_bgs_protocol_club_v1_StreamStateOptions__Descriptor = Descriptor.MessageTypes[15];
        internal__static_bgs_protocol_club_v1_StreamStateOptions__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamStateOptions, global::bgs.protocol.club.v1.StreamStateOptions.Builder>(internal__static_bgs_protocol_club_v1_StreamStateOptions__Descriptor,
                new string[] { "Attribute", "Name", "Subject", "Access", "VoiceLevel", });
        internal__static_bgs_protocol_club_v1_StreamStateAssignment__Descriptor = Descriptor.MessageTypes[16];
        internal__static_bgs_protocol_club_v1_StreamStateAssignment__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamStateAssignment, global::bgs.protocol.club.v1.StreamStateAssignment.Builder>(internal__static_bgs_protocol_club_v1_StreamStateAssignment__Descriptor,
                new string[] { "StreamId", "Attribute", "Name", "Subject", "Access", "StreamSubscriptionRemoved", "VoiceLevel", });
        internal__static_bgs_protocol_club_v1_StreamTypingIndicator__Descriptor = Descriptor.MessageTypes[17];
        internal__static_bgs_protocol_club_v1_StreamTypingIndicator__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.StreamTypingIndicator, global::bgs.protocol.club.v1.StreamTypingIndicator.Builder>(internal__static_bgs_protocol_club_v1_StreamTypingIndicator__Descriptor,
                new string[] { "AuthorId", "Indicator", "Epoch", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::bgs.protocol.club.v1.ClubMemberId.RegisterAllExtensions(registry);
        global::bgs.protocol.club.v1.ClubEnum.RegisterAllExtensions(registry);
        global::bgs.protocol.club.v1.ClubMember.RegisterAllExtensions(registry);
        global::bgs.protocol.club.v1.ClubType.RegisterAllExtensions(registry);
        global::bgs.protocol.v2alt.AttributeTypes.RegisterAllExtensions(registry);
        global::bgs.protocol.EmbedTypes.RegisterAllExtensions(registry);
        global::bgs.protocol.EventViewTypes.RegisterAllExtensions(registry);
        global::bgs.protocol.MessageTypes.RegisterAllExtensions(registry);
        global::bgs.protocol.EtsTypes.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::bgs.protocol.club.v1.ClubMemberId.Descriptor, 
          global::bgs.protocol.club.v1.ClubEnum.Descriptor, 
          global::bgs.protocol.club.v1.ClubMember.Descriptor, 
          global::bgs.protocol.club.v1.ClubType.Descriptor, 
          global::bgs.protocol.v2alt.AttributeTypes.Descriptor, 
          global::bgs.protocol.EmbedTypes.Descriptor, 
          global::bgs.protocol.EventViewTypes.Descriptor, 
          global::bgs.protocol.MessageTypes.Descriptor, 
          global::bgs.protocol.EtsTypes.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StreamPosition : pb::GeneratedMessage<StreamPosition, StreamPosition.Builder> {
    private StreamPosition() { }
    private static readonly StreamPosition defaultInstance = new StreamPosition().MakeReadOnly();
    private static readonly string[] _streamPositionFieldNames = new string[] { "stream_id" };
    private static readonly uint[] _streamPositionFieldTags = new uint[] { 10 };
    public static StreamPosition DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StreamPosition DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StreamPosition ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamPosition__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StreamPosition, StreamPosition.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamPosition__FieldAccessorTable; }
    }
    
    public const int StreamIdFieldNumber = 1;
    private int streamIdMemoizedSerializedSize;
    private pbc::PopsicleList<ulong> streamId_ = new pbc::PopsicleList<ulong>();
    public scg::IList<ulong> StreamIdList {
      get { return pbc::Lists.AsReadOnly(streamId_); }
    }
    public int StreamIdCount {
      get { return streamId_.Count; }
    }
    public ulong GetStreamId(int index) {
      return streamId_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamPositionFieldNames;
      if (streamId_.Count > 0) {
        output.WritePackedUInt64Array(1, field_names[0], streamIdMemoizedSerializedSize, streamId_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (ulong element in StreamIdList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          if (streamId_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          streamIdMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StreamPosition ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamPosition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamPosition ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamPosition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamPosition ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamPosition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StreamPosition ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StreamPosition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StreamPosition ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamPosition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StreamPosition MakeReadOnly() {
      streamId_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StreamPosition prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StreamPosition, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StreamPosition cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StreamPosition result;
      
      private StreamPosition PrepareBuilder() {
        if (resultIsReadOnly) {
          StreamPosition original = result;
          result = new StreamPosition();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StreamPosition MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.StreamPosition.Descriptor; }
      }
      
      public override StreamPosition DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.StreamPosition.DefaultInstance; }
      }
      
      public override StreamPosition BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StreamPosition) {
          return MergeFrom((StreamPosition) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StreamPosition other) {
        if (other == global::bgs.protocol.club.v1.StreamPosition.DefaultInstance) return this;
        PrepareBuilder();
        if (other.streamId_.Count != 0) {
          result.streamId_.Add(other.streamId_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamPositionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt64Array(tag, field_name, result.streamId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<ulong> StreamIdList {
        get { return PrepareBuilder().streamId_; }
      }
      public int StreamIdCount {
        get { return result.StreamIdCount; }
      }
      public ulong GetStreamId(int index) {
        return result.GetStreamId(index);
      }
      public Builder SetStreamId(int index, ulong value) {
        PrepareBuilder();
        result.streamId_[index] = value;
        return this;
      }
      public Builder AddStreamId(ulong value) {
        PrepareBuilder();
        result.streamId_.Add(value);
        return this;
      }
      public Builder AddRangeStreamId(scg::IEnumerable<ulong> values) {
        PrepareBuilder();
        result.streamId_.Add(values);
        return this;
      }
      public Builder ClearStreamId() {
        PrepareBuilder();
        result.streamId_.Clear();
        return this;
      }
    }
    static StreamPosition() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StreamAccess : pb::GeneratedMessage<StreamAccess, StreamAccess.Builder> {
    private StreamAccess() { }
    private static readonly StreamAccess defaultInstance = new StreamAccess().MakeReadOnly();
    private static readonly string[] _streamAccessFieldNames = new string[] { "role" };
    private static readonly uint[] _streamAccessFieldTags = new uint[] { 10 };
    public static StreamAccess DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StreamAccess DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StreamAccess ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamAccess__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StreamAccess, StreamAccess.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamAccess__FieldAccessorTable; }
    }
    
    public const int RoleFieldNumber = 1;
    private int roleMemoizedSerializedSize;
    private pbc::PopsicleList<uint> role_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> RoleList {
      get { return pbc::Lists.AsReadOnly(role_); }
    }
    public int RoleCount {
      get { return role_.Count; }
    }
    public uint GetRole(int index) {
      return role_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamAccessFieldNames;
      if (role_.Count > 0) {
        output.WritePackedUInt32Array(1, field_names[0], roleMemoizedSerializedSize, role_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (uint element in RoleList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (role_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          roleMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StreamAccess ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamAccess ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamAccess ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamAccess ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamAccess ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamAccess ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StreamAccess ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StreamAccess ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StreamAccess ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamAccess ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StreamAccess MakeReadOnly() {
      role_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StreamAccess prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StreamAccess, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StreamAccess cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StreamAccess result;
      
      private StreamAccess PrepareBuilder() {
        if (resultIsReadOnly) {
          StreamAccess original = result;
          result = new StreamAccess();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StreamAccess MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.StreamAccess.Descriptor; }
      }
      
      public override StreamAccess DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.StreamAccess.DefaultInstance; }
      }
      
      public override StreamAccess BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StreamAccess) {
          return MergeFrom((StreamAccess) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StreamAccess other) {
        if (other == global::bgs.protocol.club.v1.StreamAccess.DefaultInstance) return this;
        PrepareBuilder();
        if (other.role_.Count != 0) {
          result.role_.Add(other.role_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamAccessFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamAccessFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt32Array(tag, field_name, result.role_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<uint> RoleList {
        get { return PrepareBuilder().role_; }
      }
      public int RoleCount {
        get { return result.RoleCount; }
      }
      public uint GetRole(int index) {
        return result.GetRole(index);
      }
      public Builder SetRole(int index, uint value) {
        PrepareBuilder();
        result.role_[index] = value;
        return this;
      }
      public Builder AddRole(uint value) {
        PrepareBuilder();
        result.role_.Add(value);
        return this;
      }
      public Builder AddRangeRole(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.role_.Add(values);
        return this;
      }
      public Builder ClearRole() {
        PrepareBuilder();
        result.role_.Clear();
        return this;
      }
    }
    static StreamAccess() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CreateStreamOptions : pb::GeneratedMessage<CreateStreamOptions, CreateStreamOptions.Builder> {
    private CreateStreamOptions() { }
    private static readonly CreateStreamOptions defaultInstance = new CreateStreamOptions().MakeReadOnly();
    private static readonly string[] _createStreamOptionsFieldNames = new string[] { "access", "attribute", "name", "subject", "voice_level" };
    private static readonly uint[] _createStreamOptionsFieldTags = new uint[] { 34, 10, 18, 26, 40 };
    public static CreateStreamOptions DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateStreamOptions DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreateStreamOptions ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_CreateStreamOptions__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateStreamOptions, CreateStreamOptions.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_CreateStreamOptions__FieldAccessorTable; }
    }
    
    public const int AttributeFieldNumber = 1;
    private pbc::PopsicleList<global::bgs.protocol.v2.Attribute> attribute_ = new pbc::PopsicleList<global::bgs.protocol.v2.Attribute>();
    public scg::IList<global::bgs.protocol.v2.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bgs.protocol.v2.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int SubjectFieldNumber = 3;
    private bool hasSubject;
    private string subject_ = "";
    public bool HasSubject {
      get { return hasSubject; }
    }
    public string Subject {
      get { return subject_; }
    }
    
    public const int AccessFieldNumber = 4;
    private bool hasAccess;
    private global::bgs.protocol.club.v1.StreamAccess access_;
    public bool HasAccess {
      get { return hasAccess; }
    }
    public global::bgs.protocol.club.v1.StreamAccess Access {
      get { return access_ ?? global::bgs.protocol.club.v1.StreamAccess.DefaultInstance; }
    }
    
    public const int VoiceLevelFieldNumber = 5;
    private bool hasVoiceLevel;
    private global::bgs.protocol.club.v1.StreamVoiceLevel voiceLevel_ = global::bgs.protocol.club.v1.StreamVoiceLevel.VOICE_LEVEL_DISABLED;
    public bool HasVoiceLevel {
      get { return hasVoiceLevel; }
    }
    public global::bgs.protocol.club.v1.StreamVoiceLevel VoiceLevel {
      get { return voiceLevel_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _createStreamOptionsFieldNames;
      if (attribute_.Count > 0) {
        output.WriteMessageArray(1, field_names[1], attribute_);
      }
      if (hasName) {
        output.WriteString(2, field_names[2], Name);
      }
      if (hasSubject) {
        output.WriteString(3, field_names[3], Subject);
      }
      if (hasAccess) {
        output.WriteMessage(4, field_names[0], Access);
      }
      if (hasVoiceLevel) {
        output.WriteEnum(5, field_names[4], (int) VoiceLevel, VoiceLevel);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bgs.protocol.v2.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasSubject) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Subject);
        }
        if (hasAccess) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Access);
        }
        if (hasVoiceLevel) {
          size += pb::CodedOutputStream.ComputeEnumSize(5, (int) VoiceLevel);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateStreamOptions ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateStreamOptions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateStreamOptions ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateStreamOptions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateStreamOptions ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateStreamOptions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateStreamOptions ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateStreamOptions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateStreamOptions ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateStreamOptions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreateStreamOptions MakeReadOnly() {
      attribute_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateStreamOptions prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CreateStreamOptions, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreateStreamOptions cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreateStreamOptions result;
      
      private CreateStreamOptions PrepareBuilder() {
        if (resultIsReadOnly) {
          CreateStreamOptions original = result;
          result = new CreateStreamOptions();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreateStreamOptions MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.CreateStreamOptions.Descriptor; }
      }
      
      public override CreateStreamOptions DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.CreateStreamOptions.DefaultInstance; }
      }
      
      public override CreateStreamOptions BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateStreamOptions) {
          return MergeFrom((CreateStreamOptions) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateStreamOptions other) {
        if (other == global::bgs.protocol.club.v1.CreateStreamOptions.DefaultInstance) return this;
        PrepareBuilder();
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasSubject) {
          Subject = other.Subject;
        }
        if (other.HasAccess) {
          MergeAccess(other.Access);
        }
        if (other.HasVoiceLevel) {
          VoiceLevel = other.VoiceLevel;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_createStreamOptionsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _createStreamOptionsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bgs.protocol.v2.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasSubject = input.ReadString(ref result.subject_);
              break;
            }
            case 34: {
              global::bgs.protocol.club.v1.StreamAccess.Builder subBuilder = global::bgs.protocol.club.v1.StreamAccess.CreateBuilder();
              if (result.hasAccess) {
                subBuilder.MergeFrom(Access);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Access = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              object unknown;
              if(input.ReadEnum(ref result.voiceLevel_, out unknown)) {
                result.hasVoiceLevel = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(5, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bgs.protocol.v2.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bgs.protocol.v2.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bgs.protocol.v2.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bgs.protocol.v2.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bgs.protocol.v2.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasSubject {
        get { return result.hasSubject; }
      }
      public string Subject {
        get { return result.Subject; }
        set { SetSubject(value); }
      }
      public Builder SetSubject(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSubject = true;
        result.subject_ = value;
        return this;
      }
      public Builder ClearSubject() {
        PrepareBuilder();
        result.hasSubject = false;
        result.subject_ = "";
        return this;
      }
      
      public bool HasAccess {
       get { return result.hasAccess; }
      }
      public global::bgs.protocol.club.v1.StreamAccess Access {
        get { return result.Access; }
        set { SetAccess(value); }
      }
      public Builder SetAccess(global::bgs.protocol.club.v1.StreamAccess value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccess = true;
        result.access_ = value;
        return this;
      }
      public Builder SetAccess(global::bgs.protocol.club.v1.StreamAccess.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccess = true;
        result.access_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccess(global::bgs.protocol.club.v1.StreamAccess value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccess &&
            result.access_ != global::bgs.protocol.club.v1.StreamAccess.DefaultInstance) {
            result.access_ = global::bgs.protocol.club.v1.StreamAccess.CreateBuilder(result.access_).MergeFrom(value).BuildPartial();
        } else {
          result.access_ = value;
        }
        result.hasAccess = true;
        return this;
      }
      public Builder ClearAccess() {
        PrepareBuilder();
        result.hasAccess = false;
        result.access_ = null;
        return this;
      }
      
      public bool HasVoiceLevel {
       get { return result.hasVoiceLevel; }
      }
      public global::bgs.protocol.club.v1.StreamVoiceLevel VoiceLevel {
        get { return result.VoiceLevel; }
        set { SetVoiceLevel(value); }
      }
      public Builder SetVoiceLevel(global::bgs.protocol.club.v1.StreamVoiceLevel value) {
        PrepareBuilder();
        result.hasVoiceLevel = true;
        result.voiceLevel_ = value;
        return this;
      }
      public Builder ClearVoiceLevel() {
        PrepareBuilder();
        result.hasVoiceLevel = false;
        result.voiceLevel_ = global::bgs.protocol.club.v1.StreamVoiceLevel.VOICE_LEVEL_DISABLED;
        return this;
      }
    }
    static CreateStreamOptions() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Stream : pb::GeneratedMessage<Stream, Stream.Builder> {
    private Stream() { }
    private static readonly Stream defaultInstance = new Stream().MakeReadOnly();
    private static readonly string[] _streamFieldNames = new string[] { "access", "attribute", "club_id", "creation_time", "id", "name", "subject", "voice_level" };
    private static readonly uint[] _streamFieldTags = new uint[] { 50, 26, 8, 64, 16, 34, 42, 56 };
    public static Stream DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Stream DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Stream ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_Stream__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Stream, Stream.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_Stream__FieldAccessorTable; }
    }
    
    public const int ClubIdFieldNumber = 1;
    private bool hasClubId;
    private ulong clubId_;
    public bool HasClubId {
      get { return hasClubId; }
    }
    public ulong ClubId {
      get { return clubId_; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    public ulong Id {
      get { return id_; }
    }
    
    public const int AttributeFieldNumber = 3;
    private pbc::PopsicleList<global::bgs.protocol.v2.Attribute> attribute_ = new pbc::PopsicleList<global::bgs.protocol.v2.Attribute>();
    public scg::IList<global::bgs.protocol.v2.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bgs.protocol.v2.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int NameFieldNumber = 4;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int SubjectFieldNumber = 5;
    private bool hasSubject;
    private string subject_ = "";
    public bool HasSubject {
      get { return hasSubject; }
    }
    public string Subject {
      get { return subject_; }
    }
    
    public const int AccessFieldNumber = 6;
    private bool hasAccess;
    private global::bgs.protocol.club.v1.StreamAccess access_;
    public bool HasAccess {
      get { return hasAccess; }
    }
    public global::bgs.protocol.club.v1.StreamAccess Access {
      get { return access_ ?? global::bgs.protocol.club.v1.StreamAccess.DefaultInstance; }
    }
    
    public const int VoiceLevelFieldNumber = 7;
    private bool hasVoiceLevel;
    private global::bgs.protocol.club.v1.StreamVoiceLevel voiceLevel_ = global::bgs.protocol.club.v1.StreamVoiceLevel.VOICE_LEVEL_DISABLED;
    public bool HasVoiceLevel {
      get { return hasVoiceLevel; }
    }
    public global::bgs.protocol.club.v1.StreamVoiceLevel VoiceLevel {
      get { return voiceLevel_; }
    }
    
    public const int CreationTimeFieldNumber = 8;
    private bool hasCreationTime;
    private ulong creationTime_;
    public bool HasCreationTime {
      get { return hasCreationTime; }
    }
    public ulong CreationTime {
      get { return creationTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamFieldNames;
      if (hasClubId) {
        output.WriteUInt64(1, field_names[2], ClubId);
      }
      if (hasId) {
        output.WriteUInt64(2, field_names[4], Id);
      }
      if (attribute_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], attribute_);
      }
      if (hasName) {
        output.WriteString(4, field_names[5], Name);
      }
      if (hasSubject) {
        output.WriteString(5, field_names[6], Subject);
      }
      if (hasAccess) {
        output.WriteMessage(6, field_names[0], Access);
      }
      if (hasVoiceLevel) {
        output.WriteEnum(7, field_names[7], (int) VoiceLevel, VoiceLevel);
      }
      if (hasCreationTime) {
        output.WriteUInt64(8, field_names[3], CreationTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasClubId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, ClubId);
        }
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, Id);
        }
        foreach (global::bgs.protocol.v2.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Name);
        }
        if (hasSubject) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Subject);
        }
        if (hasAccess) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Access);
        }
        if (hasVoiceLevel) {
          size += pb::CodedOutputStream.ComputeEnumSize(7, (int) VoiceLevel);
        }
        if (hasCreationTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(8, CreationTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Stream ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Stream ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Stream ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Stream ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Stream ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Stream ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Stream ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Stream ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Stream ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Stream ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Stream MakeReadOnly() {
      attribute_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Stream prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Stream, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Stream cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Stream result;
      
      private Stream PrepareBuilder() {
        if (resultIsReadOnly) {
          Stream original = result;
          result = new Stream();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Stream MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.Stream.Descriptor; }
      }
      
      public override Stream DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.Stream.DefaultInstance; }
      }
      
      public override Stream BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Stream) {
          return MergeFrom((Stream) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Stream other) {
        if (other == global::bgs.protocol.club.v1.Stream.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClubId) {
          ClubId = other.ClubId;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasSubject) {
          Subject = other.Subject;
        }
        if (other.HasAccess) {
          MergeAccess(other.Access);
        }
        if (other.HasVoiceLevel) {
          VoiceLevel = other.VoiceLevel;
        }
        if (other.HasCreationTime) {
          CreationTime = other.CreationTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasClubId = input.ReadUInt64(ref result.clubId_);
              break;
            }
            case 16: {
              result.hasId = input.ReadUInt64(ref result.id_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bgs.protocol.v2.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 42: {
              result.hasSubject = input.ReadString(ref result.subject_);
              break;
            }
            case 50: {
              global::bgs.protocol.club.v1.StreamAccess.Builder subBuilder = global::bgs.protocol.club.v1.StreamAccess.CreateBuilder();
              if (result.hasAccess) {
                subBuilder.MergeFrom(Access);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Access = subBuilder.BuildPartial();
              break;
            }
            case 56: {
              object unknown;
              if(input.ReadEnum(ref result.voiceLevel_, out unknown)) {
                result.hasVoiceLevel = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(7, (ulong)(int)unknown);
              }
              break;
            }
            case 64: {
              result.hasCreationTime = input.ReadUInt64(ref result.creationTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClubId {
        get { return result.hasClubId; }
      }
      public ulong ClubId {
        get { return result.ClubId; }
        set { SetClubId(value); }
      }
      public Builder SetClubId(ulong value) {
        PrepareBuilder();
        result.hasClubId = true;
        result.clubId_ = value;
        return this;
      }
      public Builder ClearClubId() {
        PrepareBuilder();
        result.hasClubId = false;
        result.clubId_ = 0UL;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::bgs.protocol.v2.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bgs.protocol.v2.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bgs.protocol.v2.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bgs.protocol.v2.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bgs.protocol.v2.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasSubject {
        get { return result.hasSubject; }
      }
      public string Subject {
        get { return result.Subject; }
        set { SetSubject(value); }
      }
      public Builder SetSubject(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSubject = true;
        result.subject_ = value;
        return this;
      }
      public Builder ClearSubject() {
        PrepareBuilder();
        result.hasSubject = false;
        result.subject_ = "";
        return this;
      }
      
      public bool HasAccess {
       get { return result.hasAccess; }
      }
      public global::bgs.protocol.club.v1.StreamAccess Access {
        get { return result.Access; }
        set { SetAccess(value); }
      }
      public Builder SetAccess(global::bgs.protocol.club.v1.StreamAccess value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccess = true;
        result.access_ = value;
        return this;
      }
      public Builder SetAccess(global::bgs.protocol.club.v1.StreamAccess.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccess = true;
        result.access_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccess(global::bgs.protocol.club.v1.StreamAccess value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccess &&
            result.access_ != global::bgs.protocol.club.v1.StreamAccess.DefaultInstance) {
            result.access_ = global::bgs.protocol.club.v1.StreamAccess.CreateBuilder(result.access_).MergeFrom(value).BuildPartial();
        } else {
          result.access_ = value;
        }
        result.hasAccess = true;
        return this;
      }
      public Builder ClearAccess() {
        PrepareBuilder();
        result.hasAccess = false;
        result.access_ = null;
        return this;
      }
      
      public bool HasVoiceLevel {
       get { return result.hasVoiceLevel; }
      }
      public global::bgs.protocol.club.v1.StreamVoiceLevel VoiceLevel {
        get { return result.VoiceLevel; }
        set { SetVoiceLevel(value); }
      }
      public Builder SetVoiceLevel(global::bgs.protocol.club.v1.StreamVoiceLevel value) {
        PrepareBuilder();
        result.hasVoiceLevel = true;
        result.voiceLevel_ = value;
        return this;
      }
      public Builder ClearVoiceLevel() {
        PrepareBuilder();
        result.hasVoiceLevel = false;
        result.voiceLevel_ = global::bgs.protocol.club.v1.StreamVoiceLevel.VOICE_LEVEL_DISABLED;
        return this;
      }
      
      public bool HasCreationTime {
        get { return result.hasCreationTime; }
      }
      public ulong CreationTime {
        get { return result.CreationTime; }
        set { SetCreationTime(value); }
      }
      public Builder SetCreationTime(ulong value) {
        PrepareBuilder();
        result.hasCreationTime = true;
        result.creationTime_ = value;
        return this;
      }
      public Builder ClearCreationTime() {
        PrepareBuilder();
        result.hasCreationTime = false;
        result.creationTime_ = 0UL;
        return this;
      }
    }
    static Stream() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StreamDescription : pb::GeneratedMessage<StreamDescription, StreamDescription.Builder> {
    private StreamDescription() { }
    private static readonly StreamDescription defaultInstance = new StreamDescription().MakeReadOnly();
    private static readonly string[] _streamDescriptionFieldNames = new string[] { "id", "name" };
    private static readonly uint[] _streamDescriptionFieldTags = new uint[] { 16, 34 };
    public static StreamDescription DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StreamDescription DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StreamDescription ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamDescription__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StreamDescription, StreamDescription.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamDescription__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private ulong id_;
    public bool HasId {
      get { return hasId; }
    }
    public ulong Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 4;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamDescriptionFieldNames;
      if (hasId) {
        output.WriteUInt64(2, field_names[0], Id);
      }
      if (hasName) {
        output.WriteString(4, field_names[1], Name);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, Id);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Name);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StreamDescription ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamDescription ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamDescription ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StreamDescription ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StreamDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StreamDescription ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StreamDescription MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StreamDescription prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StreamDescription, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StreamDescription cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StreamDescription result;
      
      private StreamDescription PrepareBuilder() {
        if (resultIsReadOnly) {
          StreamDescription original = result;
          result = new StreamDescription();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StreamDescription MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.StreamDescription.Descriptor; }
      }
      
      public override StreamDescription DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.StreamDescription.DefaultInstance; }
      }
      
      public override StreamDescription BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StreamDescription) {
          return MergeFrom((StreamDescription) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StreamDescription other) {
        if (other == global::bgs.protocol.club.v1.StreamDescription.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamDescriptionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 16: {
              result.hasId = input.ReadUInt64(ref result.id_);
              break;
            }
            case 34: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public ulong Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(ulong value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0UL;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static StreamDescription() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MentionContent : pb::GeneratedMessage<MentionContent, MentionContent.Builder> {
    private MentionContent() { }
    private static readonly MentionContent defaultInstance = new MentionContent().MakeReadOnly();
    private static readonly string[] _mentionContentFieldNames = new string[] { "all", "here", "member_id", "role" };
    private static readonly uint[] _mentionContentFieldTags = new uint[] { 8, 16, 26, 34 };
    public static MentionContent DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MentionContent DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MentionContent ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_MentionContent__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MentionContent, MentionContent.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_MentionContent__FieldAccessorTable; }
    }
    
    public const int AllFieldNumber = 1;
    private bool hasAll;
    private bool all_;
    public bool HasAll {
      get { return hasAll; }
    }
    public bool All {
      get { return all_; }
    }
    
    public const int HereFieldNumber = 2;
    private bool hasHere;
    private bool here_;
    public bool HasHere {
      get { return hasHere; }
    }
    public bool Here {
      get { return here_; }
    }
    
    public const int MemberIdFieldNumber = 3;
    private pbc::PopsicleList<global::bgs.protocol.club.v1.MemberId> memberId_ = new pbc::PopsicleList<global::bgs.protocol.club.v1.MemberId>();
    public scg::IList<global::bgs.protocol.club.v1.MemberId> MemberIdList {
      get { return memberId_; }
    }
    public int MemberIdCount {
      get { return memberId_.Count; }
    }
    public global::bgs.protocol.club.v1.MemberId GetMemberId(int index) {
      return memberId_[index];
    }
    
    public const int RoleFieldNumber = 4;
    private int roleMemoizedSerializedSize;
    private pbc::PopsicleList<uint> role_ = new pbc::PopsicleList<uint>();
    public scg::IList<uint> RoleList {
      get { return pbc::Lists.AsReadOnly(role_); }
    }
    public int RoleCount {
      get { return role_.Count; }
    }
    public uint GetRole(int index) {
      return role_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bgs.protocol.club.v1.MemberId element in MemberIdList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mentionContentFieldNames;
      if (hasAll) {
        output.WriteBool(1, field_names[0], All);
      }
      if (hasHere) {
        output.WriteBool(2, field_names[1], Here);
      }
      if (memberId_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], memberId_);
      }
      if (role_.Count > 0) {
        output.WritePackedUInt32Array(4, field_names[3], roleMemoizedSerializedSize, role_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAll) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, All);
        }
        if (hasHere) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, Here);
        }
        foreach (global::bgs.protocol.club.v1.MemberId element in MemberIdList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        {
          int dataSize = 0;
          foreach (uint element in RoleList) {
            dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
          }
          size += dataSize;
          if (role_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          roleMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MentionContent ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MentionContent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MentionContent ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MentionContent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MentionContent ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MentionContent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MentionContent ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MentionContent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MentionContent ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MentionContent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MentionContent MakeReadOnly() {
      memberId_.MakeReadOnly();
      role_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MentionContent prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MentionContent, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MentionContent cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MentionContent result;
      
      private MentionContent PrepareBuilder() {
        if (resultIsReadOnly) {
          MentionContent original = result;
          result = new MentionContent();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MentionContent MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.MentionContent.Descriptor; }
      }
      
      public override MentionContent DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.MentionContent.DefaultInstance; }
      }
      
      public override MentionContent BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MentionContent) {
          return MergeFrom((MentionContent) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MentionContent other) {
        if (other == global::bgs.protocol.club.v1.MentionContent.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAll) {
          All = other.All;
        }
        if (other.HasHere) {
          Here = other.Here;
        }
        if (other.memberId_.Count != 0) {
          result.memberId_.Add(other.memberId_);
        }
        if (other.role_.Count != 0) {
          result.role_.Add(other.role_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mentionContentFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mentionContentFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAll = input.ReadBool(ref result.all_);
              break;
            }
            case 16: {
              result.hasHere = input.ReadBool(ref result.here_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.memberId_, global::bgs.protocol.club.v1.MemberId.DefaultInstance, extensionRegistry);
              break;
            }
            case 34:
            case 32: {
              input.ReadUInt32Array(tag, field_name, result.role_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAll {
        get { return result.hasAll; }
      }
      public bool All {
        get { return result.All; }
        set { SetAll(value); }
      }
      public Builder SetAll(bool value) {
        PrepareBuilder();
        result.hasAll = true;
        result.all_ = value;
        return this;
      }
      public Builder ClearAll() {
        PrepareBuilder();
        result.hasAll = false;
        result.all_ = false;
        return this;
      }
      
      public bool HasHere {
        get { return result.hasHere; }
      }
      public bool Here {
        get { return result.Here; }
        set { SetHere(value); }
      }
      public Builder SetHere(bool value) {
        PrepareBuilder();
        result.hasHere = true;
        result.here_ = value;
        return this;
      }
      public Builder ClearHere() {
        PrepareBuilder();
        result.hasHere = false;
        result.here_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::bgs.protocol.club.v1.MemberId> MemberIdList {
        get { return PrepareBuilder().memberId_; }
      }
      public int MemberIdCount {
        get { return result.MemberIdCount; }
      }
      public global::bgs.protocol.club.v1.MemberId GetMemberId(int index) {
        return result.GetMemberId(index);
      }
      public Builder SetMemberId(int index, global::bgs.protocol.club.v1.MemberId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.memberId_[index] = value;
        return this;
      }
      public Builder SetMemberId(int index, global::bgs.protocol.club.v1.MemberId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.memberId_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMemberId(global::bgs.protocol.club.v1.MemberId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.memberId_.Add(value);
        return this;
      }
      public Builder AddMemberId(global::bgs.protocol.club.v1.MemberId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.memberId_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMemberId(scg::IEnumerable<global::bgs.protocol.club.v1.MemberId> values) {
        PrepareBuilder();
        result.memberId_.Add(values);
        return this;
      }
      public Builder ClearMemberId() {
        PrepareBuilder();
        result.memberId_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<uint> RoleList {
        get { return PrepareBuilder().role_; }
      }
      public int RoleCount {
        get { return result.RoleCount; }
      }
      public uint GetRole(int index) {
        return result.GetRole(index);
      }
      public Builder SetRole(int index, uint value) {
        PrepareBuilder();
        result.role_[index] = value;
        return this;
      }
      public Builder AddRole(uint value) {
        PrepareBuilder();
        result.role_.Add(value);
        return this;
      }
      public Builder AddRangeRole(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.role_.Add(values);
        return this;
      }
      public Builder ClearRole() {
        PrepareBuilder();
        result.role_.Clear();
        return this;
      }
    }
    static MentionContent() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CreateMessageOptions : pb::GeneratedMessage<CreateMessageOptions, CreateMessageOptions.Builder> {
    private CreateMessageOptions() { }
    private static readonly CreateMessageOptions defaultInstance = new CreateMessageOptions().MakeReadOnly();
    private static readonly string[] _createMessageOptionsFieldNames = new string[] { "content", "mention" };
    private static readonly uint[] _createMessageOptionsFieldTags = new uint[] { 18, 26 };
    public static CreateMessageOptions DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateMessageOptions DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreateMessageOptions ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_CreateMessageOptions__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateMessageOptions, CreateMessageOptions.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_CreateMessageOptions__FieldAccessorTable; }
    }
    
    public const int ContentFieldNumber = 2;
    private bool hasContent;
    private string content_ = "";
    public bool HasContent {
      get { return hasContent; }
    }
    public string Content {
      get { return content_; }
    }
    
    public const int MentionFieldNumber = 3;
    private bool hasMention;
    private global::bgs.protocol.club.v1.MentionContent mention_;
    public bool HasMention {
      get { return hasMention; }
    }
    public global::bgs.protocol.club.v1.MentionContent Mention {
      get { return mention_ ?? global::bgs.protocol.club.v1.MentionContent.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasMention) {
          if (!Mention.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _createMessageOptionsFieldNames;
      if (hasContent) {
        output.WriteString(2, field_names[0], Content);
      }
      if (hasMention) {
        output.WriteMessage(3, field_names[1], Mention);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasContent) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Content);
        }
        if (hasMention) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Mention);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateMessageOptions ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateMessageOptions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateMessageOptions ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateMessageOptions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateMessageOptions ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateMessageOptions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateMessageOptions ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateMessageOptions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateMessageOptions ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateMessageOptions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreateMessageOptions MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateMessageOptions prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CreateMessageOptions, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreateMessageOptions cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreateMessageOptions result;
      
      private CreateMessageOptions PrepareBuilder() {
        if (resultIsReadOnly) {
          CreateMessageOptions original = result;
          result = new CreateMessageOptions();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreateMessageOptions MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.CreateMessageOptions.Descriptor; }
      }
      
      public override CreateMessageOptions DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.CreateMessageOptions.DefaultInstance; }
      }
      
      public override CreateMessageOptions BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateMessageOptions) {
          return MergeFrom((CreateMessageOptions) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateMessageOptions other) {
        if (other == global::bgs.protocol.club.v1.CreateMessageOptions.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasContent) {
          Content = other.Content;
        }
        if (other.HasMention) {
          MergeMention(other.Mention);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_createMessageOptionsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _createMessageOptionsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              result.hasContent = input.ReadString(ref result.content_);
              break;
            }
            case 26: {
              global::bgs.protocol.club.v1.MentionContent.Builder subBuilder = global::bgs.protocol.club.v1.MentionContent.CreateBuilder();
              if (result.hasMention) {
                subBuilder.MergeFrom(Mention);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Mention = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public string Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = "";
        return this;
      }
      
      public bool HasMention {
       get { return result.hasMention; }
      }
      public global::bgs.protocol.club.v1.MentionContent Mention {
        get { return result.Mention; }
        set { SetMention(value); }
      }
      public Builder SetMention(global::bgs.protocol.club.v1.MentionContent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMention = true;
        result.mention_ = value;
        return this;
      }
      public Builder SetMention(global::bgs.protocol.club.v1.MentionContent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMention = true;
        result.mention_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMention(global::bgs.protocol.club.v1.MentionContent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMention &&
            result.mention_ != global::bgs.protocol.club.v1.MentionContent.DefaultInstance) {
            result.mention_ = global::bgs.protocol.club.v1.MentionContent.CreateBuilder(result.mention_).MergeFrom(value).BuildPartial();
        } else {
          result.mention_ = value;
        }
        result.hasMention = true;
        return this;
      }
      public Builder ClearMention() {
        PrepareBuilder();
        result.hasMention = false;
        result.mention_ = null;
        return this;
      }
    }
    static CreateMessageOptions() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ClubStreamMessageContainer : pb::GeneratedMessage<ClubStreamMessageContainer, ClubStreamMessageContainer.Builder> {
    private ClubStreamMessageContainer() { }
    private static readonly ClubStreamMessageContainer defaultInstance = new ClubStreamMessageContainer().MakeReadOnly();
    private static readonly string[] _clubStreamMessageContainerFieldNames = new string[] { "message" };
    private static readonly uint[] _clubStreamMessageContainerFieldTags = new uint[] { 10 };
    public static ClubStreamMessageContainer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClubStreamMessageContainer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ClubStreamMessageContainer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_ClubStreamMessageContainer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClubStreamMessageContainer, ClubStreamMessageContainer.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_ClubStreamMessageContainer__FieldAccessorTable; }
    }
    
    public const int MessageFieldNumber = 1;
    private pbc::PopsicleList<global::bgs.protocol.club.v1.StreamMessage> message_ = new pbc::PopsicleList<global::bgs.protocol.club.v1.StreamMessage>();
    public scg::IList<global::bgs.protocol.club.v1.StreamMessage> MessageList {
      get { return message_; }
    }
    public int MessageCount {
      get { return message_.Count; }
    }
    public global::bgs.protocol.club.v1.StreamMessage GetMessage(int index) {
      return message_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::bgs.protocol.club.v1.StreamMessage element in MessageList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _clubStreamMessageContainerFieldNames;
      if (message_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], message_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bgs.protocol.club.v1.StreamMessage element in MessageList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClubStreamMessageContainer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClubStreamMessageContainer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClubStreamMessageContainer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClubStreamMessageContainer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClubStreamMessageContainer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClubStreamMessageContainer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClubStreamMessageContainer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClubStreamMessageContainer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClubStreamMessageContainer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClubStreamMessageContainer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ClubStreamMessageContainer MakeReadOnly() {
      message_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClubStreamMessageContainer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ClubStreamMessageContainer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ClubStreamMessageContainer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ClubStreamMessageContainer result;
      
      private ClubStreamMessageContainer PrepareBuilder() {
        if (resultIsReadOnly) {
          ClubStreamMessageContainer original = result;
          result = new ClubStreamMessageContainer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ClubStreamMessageContainer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.ClubStreamMessageContainer.Descriptor; }
      }
      
      public override ClubStreamMessageContainer DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.ClubStreamMessageContainer.DefaultInstance; }
      }
      
      public override ClubStreamMessageContainer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClubStreamMessageContainer) {
          return MergeFrom((ClubStreamMessageContainer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClubStreamMessageContainer other) {
        if (other == global::bgs.protocol.club.v1.ClubStreamMessageContainer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.message_.Count != 0) {
          result.message_.Add(other.message_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_clubStreamMessageContainerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _clubStreamMessageContainerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.message_, global::bgs.protocol.club.v1.StreamMessage.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bgs.protocol.club.v1.StreamMessage> MessageList {
        get { return PrepareBuilder().message_; }
      }
      public int MessageCount {
        get { return result.MessageCount; }
      }
      public global::bgs.protocol.club.v1.StreamMessage GetMessage(int index) {
        return result.GetMessage(index);
      }
      public Builder SetMessage(int index, global::bgs.protocol.club.v1.StreamMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.message_[index] = value;
        return this;
      }
      public Builder SetMessage(int index, global::bgs.protocol.club.v1.StreamMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.message_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMessage(global::bgs.protocol.club.v1.StreamMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.message_.Add(value);
        return this;
      }
      public Builder AddMessage(global::bgs.protocol.club.v1.StreamMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.message_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMessage(scg::IEnumerable<global::bgs.protocol.club.v1.StreamMessage> values) {
        PrepareBuilder();
        result.message_.Add(values);
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.message_.Clear();
        return this;
      }
    }
    static ClubStreamMessageContainer() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ContentChain : pb::GeneratedMessage<ContentChain, ContentChain.Builder> {
    private ContentChain() { }
    private static readonly ContentChain defaultInstance = new ContentChain().MakeReadOnly();
    private static readonly string[] _contentChainFieldNames = new string[] { "content", "edit_time", "embed", "mention" };
    private static readonly uint[] _contentChainFieldTags = new uint[] { 42, 64, 50, 58 };
    public static ContentChain DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ContentChain DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ContentChain ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_ContentChain__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ContentChain, ContentChain.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_ContentChain__FieldAccessorTable; }
    }
    
    public const int ContentFieldNumber = 5;
    private bool hasContent;
    private string content_ = "";
    public bool HasContent {
      get { return hasContent; }
    }
    public string Content {
      get { return content_; }
    }
    
    public const int EmbedFieldNumber = 6;
    private pbc::PopsicleList<global::bgs.protocol.EmbedInfo> embed_ = new pbc::PopsicleList<global::bgs.protocol.EmbedInfo>();
    public scg::IList<global::bgs.protocol.EmbedInfo> EmbedList {
      get { return embed_; }
    }
    public int EmbedCount {
      get { return embed_.Count; }
    }
    public global::bgs.protocol.EmbedInfo GetEmbed(int index) {
      return embed_[index];
    }
    
    public const int MentionFieldNumber = 7;
    private bool hasMention;
    private global::bgs.protocol.club.v1.MentionContent mention_;
    public bool HasMention {
      get { return hasMention; }
    }
    public global::bgs.protocol.club.v1.MentionContent Mention {
      get { return mention_ ?? global::bgs.protocol.club.v1.MentionContent.DefaultInstance; }
    }
    
    public const int EditTimeFieldNumber = 8;
    private bool hasEditTime;
    private ulong editTime_;
    public bool HasEditTime {
      get { return hasEditTime; }
    }
    public ulong EditTime {
      get { return editTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasMention) {
          if (!Mention.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _contentChainFieldNames;
      if (hasContent) {
        output.WriteString(5, field_names[0], Content);
      }
      if (embed_.Count > 0) {
        output.WriteMessageArray(6, field_names[2], embed_);
      }
      if (hasMention) {
        output.WriteMessage(7, field_names[3], Mention);
      }
      if (hasEditTime) {
        output.WriteUInt64(8, field_names[1], EditTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasContent) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Content);
        }
        foreach (global::bgs.protocol.EmbedInfo element in EmbedList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        if (hasMention) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, Mention);
        }
        if (hasEditTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(8, EditTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ContentChain ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContentChain ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContentChain ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ContentChain ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ContentChain ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContentChain ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ContentChain ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ContentChain ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ContentChain ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ContentChain ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ContentChain MakeReadOnly() {
      embed_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ContentChain prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ContentChain, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ContentChain cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ContentChain result;
      
      private ContentChain PrepareBuilder() {
        if (resultIsReadOnly) {
          ContentChain original = result;
          result = new ContentChain();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ContentChain MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.ContentChain.Descriptor; }
      }
      
      public override ContentChain DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.ContentChain.DefaultInstance; }
      }
      
      public override ContentChain BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ContentChain) {
          return MergeFrom((ContentChain) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ContentChain other) {
        if (other == global::bgs.protocol.club.v1.ContentChain.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasContent) {
          Content = other.Content;
        }
        if (other.embed_.Count != 0) {
          result.embed_.Add(other.embed_);
        }
        if (other.HasMention) {
          MergeMention(other.Mention);
        }
        if (other.HasEditTime) {
          EditTime = other.EditTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_contentChainFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _contentChainFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 42: {
              result.hasContent = input.ReadString(ref result.content_);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.embed_, global::bgs.protocol.EmbedInfo.DefaultInstance, extensionRegistry);
              break;
            }
            case 58: {
              global::bgs.protocol.club.v1.MentionContent.Builder subBuilder = global::bgs.protocol.club.v1.MentionContent.CreateBuilder();
              if (result.hasMention) {
                subBuilder.MergeFrom(Mention);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Mention = subBuilder.BuildPartial();
              break;
            }
            case 64: {
              result.hasEditTime = input.ReadUInt64(ref result.editTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public string Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::bgs.protocol.EmbedInfo> EmbedList {
        get { return PrepareBuilder().embed_; }
      }
      public int EmbedCount {
        get { return result.EmbedCount; }
      }
      public global::bgs.protocol.EmbedInfo GetEmbed(int index) {
        return result.GetEmbed(index);
      }
      public Builder SetEmbed(int index, global::bgs.protocol.EmbedInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.embed_[index] = value;
        return this;
      }
      public Builder SetEmbed(int index, global::bgs.protocol.EmbedInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.embed_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEmbed(global::bgs.protocol.EmbedInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.embed_.Add(value);
        return this;
      }
      public Builder AddEmbed(global::bgs.protocol.EmbedInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.embed_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEmbed(scg::IEnumerable<global::bgs.protocol.EmbedInfo> values) {
        PrepareBuilder();
        result.embed_.Add(values);
        return this;
      }
      public Builder ClearEmbed() {
        PrepareBuilder();
        result.embed_.Clear();
        return this;
      }
      
      public bool HasMention {
       get { return result.hasMention; }
      }
      public global::bgs.protocol.club.v1.MentionContent Mention {
        get { return result.Mention; }
        set { SetMention(value); }
      }
      public Builder SetMention(global::bgs.protocol.club.v1.MentionContent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMention = true;
        result.mention_ = value;
        return this;
      }
      public Builder SetMention(global::bgs.protocol.club.v1.MentionContent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMention = true;
        result.mention_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMention(global::bgs.protocol.club.v1.MentionContent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMention &&
            result.mention_ != global::bgs.protocol.club.v1.MentionContent.DefaultInstance) {
            result.mention_ = global::bgs.protocol.club.v1.MentionContent.CreateBuilder(result.mention_).MergeFrom(value).BuildPartial();
        } else {
          result.mention_ = value;
        }
        result.hasMention = true;
        return this;
      }
      public Builder ClearMention() {
        PrepareBuilder();
        result.hasMention = false;
        result.mention_ = null;
        return this;
      }
      
      public bool HasEditTime {
        get { return result.hasEditTime; }
      }
      public ulong EditTime {
        get { return result.EditTime; }
        set { SetEditTime(value); }
      }
      public Builder SetEditTime(ulong value) {
        PrepareBuilder();
        result.hasEditTime = true;
        result.editTime_ = value;
        return this;
      }
      public Builder ClearEditTime() {
        PrepareBuilder();
        result.hasEditTime = false;
        result.editTime_ = 0UL;
        return this;
      }
    }
    static ContentChain() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StreamMessage : pb::GeneratedMessage<StreamMessage, StreamMessage.Builder> {
    private StreamMessage() { }
    private static readonly StreamMessage defaultInstance = new StreamMessage().MakeReadOnly();
    private static readonly string[] _streamMessageFieldNames = new string[] { "author", "content_chain", "destroy_time", "destroyed", "destroyer", "id" };
    private static readonly uint[] _streamMessageFieldTags = new uint[] { 34, 50, 136, 128, 122, 26 };
    public static StreamMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StreamMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StreamMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StreamMessage, StreamMessage.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamMessage__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 3;
    private bool hasId;
    private global::bgs.protocol.MessageId id_;
    public bool HasId {
      get { return hasId; }
    }
    public global::bgs.protocol.MessageId Id {
      get { return id_ ?? global::bgs.protocol.MessageId.DefaultInstance; }
    }
    
    public const int AuthorFieldNumber = 4;
    private bool hasAuthor;
    private global::bgs.protocol.club.v1.MemberDescription author_;
    public bool HasAuthor {
      get { return hasAuthor; }
    }
    public global::bgs.protocol.club.v1.MemberDescription Author {
      get { return author_ ?? global::bgs.protocol.club.v1.MemberDescription.DefaultInstance; }
    }
    
    public const int ContentChainFieldNumber = 6;
    private pbc::PopsicleList<global::bgs.protocol.club.v1.ContentChain> contentChain_ = new pbc::PopsicleList<global::bgs.protocol.club.v1.ContentChain>();
    public scg::IList<global::bgs.protocol.club.v1.ContentChain> ContentChainList {
      get { return contentChain_; }
    }
    public int ContentChainCount {
      get { return contentChain_.Count; }
    }
    public global::bgs.protocol.club.v1.ContentChain GetContentChain(int index) {
      return contentChain_[index];
    }
    
    public const int DestroyerFieldNumber = 15;
    private bool hasDestroyer;
    private global::bgs.protocol.club.v1.MemberDescription destroyer_;
    public bool HasDestroyer {
      get { return hasDestroyer; }
    }
    public global::bgs.protocol.club.v1.MemberDescription Destroyer {
      get { return destroyer_ ?? global::bgs.protocol.club.v1.MemberDescription.DefaultInstance; }
    }
    
    public const int DestroyedFieldNumber = 16;
    private bool hasDestroyed;
    private bool destroyed_;
    public bool HasDestroyed {
      get { return hasDestroyed; }
    }
    public bool Destroyed {
      get { return destroyed_; }
    }
    
    public const int DestroyTimeFieldNumber = 17;
    private bool hasDestroyTime;
    private ulong destroyTime_;
    public bool HasDestroyTime {
      get { return hasDestroyTime; }
    }
    public ulong DestroyTime {
      get { return destroyTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasAuthor) {
          if (!Author.IsInitialized) return false;
        }
        foreach (global::bgs.protocol.club.v1.ContentChain element in ContentChainList) {
          if (!element.IsInitialized) return false;
        }
        if (HasDestroyer) {
          if (!Destroyer.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamMessageFieldNames;
      if (hasId) {
        output.WriteMessage(3, field_names[5], Id);
      }
      if (hasAuthor) {
        output.WriteMessage(4, field_names[0], Author);
      }
      if (contentChain_.Count > 0) {
        output.WriteMessageArray(6, field_names[1], contentChain_);
      }
      if (hasDestroyer) {
        output.WriteMessage(15, field_names[4], Destroyer);
      }
      if (hasDestroyed) {
        output.WriteBool(16, field_names[3], Destroyed);
      }
      if (hasDestroyTime) {
        output.WriteUInt64(17, field_names[2], DestroyTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Id);
        }
        if (hasAuthor) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Author);
        }
        foreach (global::bgs.protocol.club.v1.ContentChain element in ContentChainList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        if (hasDestroyer) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, Destroyer);
        }
        if (hasDestroyed) {
          size += pb::CodedOutputStream.ComputeBoolSize(16, Destroyed);
        }
        if (hasDestroyTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(17, DestroyTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StreamMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StreamMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StreamMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StreamMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StreamMessage MakeReadOnly() {
      contentChain_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StreamMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StreamMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StreamMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StreamMessage result;
      
      private StreamMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          StreamMessage original = result;
          result = new StreamMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StreamMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.StreamMessage.Descriptor; }
      }
      
      public override StreamMessage DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.StreamMessage.DefaultInstance; }
      }
      
      public override StreamMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StreamMessage) {
          return MergeFrom((StreamMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StreamMessage other) {
        if (other == global::bgs.protocol.club.v1.StreamMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          MergeId(other.Id);
        }
        if (other.HasAuthor) {
          MergeAuthor(other.Author);
        }
        if (other.contentChain_.Count != 0) {
          result.contentChain_.Add(other.contentChain_);
        }
        if (other.HasDestroyer) {
          MergeDestroyer(other.Destroyer);
        }
        if (other.HasDestroyed) {
          Destroyed = other.Destroyed;
        }
        if (other.HasDestroyTime) {
          DestroyTime = other.DestroyTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 26: {
              global::bgs.protocol.MessageId.Builder subBuilder = global::bgs.protocol.MessageId.CreateBuilder();
              if (result.hasId) {
                subBuilder.MergeFrom(Id);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Id = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::bgs.protocol.club.v1.MemberDescription.Builder subBuilder = global::bgs.protocol.club.v1.MemberDescription.CreateBuilder();
              if (result.hasAuthor) {
                subBuilder.MergeFrom(Author);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Author = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.contentChain_, global::bgs.protocol.club.v1.ContentChain.DefaultInstance, extensionRegistry);
              break;
            }
            case 122: {
              global::bgs.protocol.club.v1.MemberDescription.Builder subBuilder = global::bgs.protocol.club.v1.MemberDescription.CreateBuilder();
              if (result.hasDestroyer) {
                subBuilder.MergeFrom(Destroyer);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Destroyer = subBuilder.BuildPartial();
              break;
            }
            case 128: {
              result.hasDestroyed = input.ReadBool(ref result.destroyed_);
              break;
            }
            case 136: {
              result.hasDestroyTime = input.ReadUInt64(ref result.destroyTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
       get { return result.hasId; }
      }
      public global::bgs.protocol.MessageId Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(global::bgs.protocol.MessageId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder SetId(global::bgs.protocol.MessageId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = builderForValue.Build();
        return this;
      }
      public Builder MergeId(global::bgs.protocol.MessageId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasId &&
            result.id_ != global::bgs.protocol.MessageId.DefaultInstance) {
            result.id_ = global::bgs.protocol.MessageId.CreateBuilder(result.id_).MergeFrom(value).BuildPartial();
        } else {
          result.id_ = value;
        }
        result.hasId = true;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = null;
        return this;
      }
      
      public bool HasAuthor {
       get { return result.hasAuthor; }
      }
      public global::bgs.protocol.club.v1.MemberDescription Author {
        get { return result.Author; }
        set { SetAuthor(value); }
      }
      public Builder SetAuthor(global::bgs.protocol.club.v1.MemberDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthor = true;
        result.author_ = value;
        return this;
      }
      public Builder SetAuthor(global::bgs.protocol.club.v1.MemberDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAuthor = true;
        result.author_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAuthor(global::bgs.protocol.club.v1.MemberDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAuthor &&
            result.author_ != global::bgs.protocol.club.v1.MemberDescription.DefaultInstance) {
            result.author_ = global::bgs.protocol.club.v1.MemberDescription.CreateBuilder(result.author_).MergeFrom(value).BuildPartial();
        } else {
          result.author_ = value;
        }
        result.hasAuthor = true;
        return this;
      }
      public Builder ClearAuthor() {
        PrepareBuilder();
        result.hasAuthor = false;
        result.author_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::bgs.protocol.club.v1.ContentChain> ContentChainList {
        get { return PrepareBuilder().contentChain_; }
      }
      public int ContentChainCount {
        get { return result.ContentChainCount; }
      }
      public global::bgs.protocol.club.v1.ContentChain GetContentChain(int index) {
        return result.GetContentChain(index);
      }
      public Builder SetContentChain(int index, global::bgs.protocol.club.v1.ContentChain value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contentChain_[index] = value;
        return this;
      }
      public Builder SetContentChain(int index, global::bgs.protocol.club.v1.ContentChain.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contentChain_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddContentChain(global::bgs.protocol.club.v1.ContentChain value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contentChain_.Add(value);
        return this;
      }
      public Builder AddContentChain(global::bgs.protocol.club.v1.ContentChain.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contentChain_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeContentChain(scg::IEnumerable<global::bgs.protocol.club.v1.ContentChain> values) {
        PrepareBuilder();
        result.contentChain_.Add(values);
        return this;
      }
      public Builder ClearContentChain() {
        PrepareBuilder();
        result.contentChain_.Clear();
        return this;
      }
      
      public bool HasDestroyer {
       get { return result.hasDestroyer; }
      }
      public global::bgs.protocol.club.v1.MemberDescription Destroyer {
        get { return result.Destroyer; }
        set { SetDestroyer(value); }
      }
      public Builder SetDestroyer(global::bgs.protocol.club.v1.MemberDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDestroyer = true;
        result.destroyer_ = value;
        return this;
      }
      public Builder SetDestroyer(global::bgs.protocol.club.v1.MemberDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDestroyer = true;
        result.destroyer_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDestroyer(global::bgs.protocol.club.v1.MemberDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDestroyer &&
            result.destroyer_ != global::bgs.protocol.club.v1.MemberDescription.DefaultInstance) {
            result.destroyer_ = global::bgs.protocol.club.v1.MemberDescription.CreateBuilder(result.destroyer_).MergeFrom(value).BuildPartial();
        } else {
          result.destroyer_ = value;
        }
        result.hasDestroyer = true;
        return this;
      }
      public Builder ClearDestroyer() {
        PrepareBuilder();
        result.hasDestroyer = false;
        result.destroyer_ = null;
        return this;
      }
      
      public bool HasDestroyed {
        get { return result.hasDestroyed; }
      }
      public bool Destroyed {
        get { return result.Destroyed; }
        set { SetDestroyed(value); }
      }
      public Builder SetDestroyed(bool value) {
        PrepareBuilder();
        result.hasDestroyed = true;
        result.destroyed_ = value;
        return this;
      }
      public Builder ClearDestroyed() {
        PrepareBuilder();
        result.hasDestroyed = false;
        result.destroyed_ = false;
        return this;
      }
      
      public bool HasDestroyTime {
        get { return result.hasDestroyTime; }
      }
      public ulong DestroyTime {
        get { return result.DestroyTime; }
        set { SetDestroyTime(value); }
      }
      public Builder SetDestroyTime(ulong value) {
        PrepareBuilder();
        result.hasDestroyTime = true;
        result.destroyTime_ = value;
        return this;
      }
      public Builder ClearDestroyTime() {
        PrepareBuilder();
        result.hasDestroyTime = false;
        result.destroyTime_ = 0UL;
        return this;
      }
    }
    static StreamMessage() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StreamMention : pb::GeneratedMessage<StreamMention, StreamMention.Builder> {
    private StreamMention() { }
    private static readonly StreamMention defaultInstance = new StreamMention().MakeReadOnly();
    private static readonly string[] _streamMentionFieldNames = new string[] { "author", "club_id", "club_type", "destroyed", "member_id", "mention_id", "message", "message_id", "stream_id" };
    private static readonly uint[] _streamMentionFieldTags = new uint[] { 34, 8, 74, 40, 58, 50, 66, 26, 16 };
    public static StreamMention DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StreamMention DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StreamMention ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamMention__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StreamMention, StreamMention.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamMention__FieldAccessorTable; }
    }
    
    public const int ClubIdFieldNumber = 1;
    private bool hasClubId;
    private ulong clubId_;
    public bool HasClubId {
      get { return hasClubId; }
    }
    public ulong ClubId {
      get { return clubId_; }
    }
    
    public const int StreamIdFieldNumber = 2;
    private bool hasStreamId;
    private ulong streamId_;
    public bool HasStreamId {
      get { return hasStreamId; }
    }
    public ulong StreamId {
      get { return streamId_; }
    }
    
    public const int MessageIdFieldNumber = 3;
    private bool hasMessageId;
    private global::bgs.protocol.MessageId messageId_;
    public bool HasMessageId {
      get { return hasMessageId; }
    }
    public global::bgs.protocol.MessageId MessageId {
      get { return messageId_ ?? global::bgs.protocol.MessageId.DefaultInstance; }
    }
    
    public const int AuthorFieldNumber = 4;
    private bool hasAuthor;
    private global::bgs.protocol.club.v1.MemberDescription author_;
    public bool HasAuthor {
      get { return hasAuthor; }
    }
    public global::bgs.protocol.club.v1.MemberDescription Author {
      get { return author_ ?? global::bgs.protocol.club.v1.MemberDescription.DefaultInstance; }
    }
    
    public const int DestroyedFieldNumber = 5;
    private bool hasDestroyed;
    private bool destroyed_;
    public bool HasDestroyed {
      get { return hasDestroyed; }
    }
    public bool Destroyed {
      get { return destroyed_; }
    }
    
    public const int MentionIdFieldNumber = 6;
    private bool hasMentionId;
    private global::bgs.protocol.TimeSeriesId mentionId_;
    public bool HasMentionId {
      get { return hasMentionId; }
    }
    public global::bgs.protocol.TimeSeriesId MentionId {
      get { return mentionId_ ?? global::bgs.protocol.TimeSeriesId.DefaultInstance; }
    }
    
    public const int MemberIdFieldNumber = 7;
    private bool hasMemberId;
    private global::bgs.protocol.club.v1.MemberId memberId_;
    public bool HasMemberId {
      get { return hasMemberId; }
    }
    public global::bgs.protocol.club.v1.MemberId MemberId {
      get { return memberId_ ?? global::bgs.protocol.club.v1.MemberId.DefaultInstance; }
    }
    
    public const int MessageFieldNumber = 8;
    private bool hasMessage;
    private global::bgs.protocol.club.v1.StreamMessage message_;
    public bool HasMessage {
      get { return hasMessage; }
    }
    public global::bgs.protocol.club.v1.StreamMessage Message {
      get { return message_ ?? global::bgs.protocol.club.v1.StreamMessage.DefaultInstance; }
    }
    
    public const int ClubTypeFieldNumber = 9;
    private bool hasClubType;
    private global::bgs.protocol.club.v1.UniqueClubType clubType_;
    public bool HasClubType {
      get { return hasClubType; }
    }
    public global::bgs.protocol.club.v1.UniqueClubType ClubType {
      get { return clubType_ ?? global::bgs.protocol.club.v1.UniqueClubType.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasAuthor) {
          if (!Author.IsInitialized) return false;
        }
        if (HasMemberId) {
          if (!MemberId.IsInitialized) return false;
        }
        if (HasMessage) {
          if (!Message.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamMentionFieldNames;
      if (hasClubId) {
        output.WriteUInt64(1, field_names[1], ClubId);
      }
      if (hasStreamId) {
        output.WriteUInt64(2, field_names[8], StreamId);
      }
      if (hasMessageId) {
        output.WriteMessage(3, field_names[7], MessageId);
      }
      if (hasAuthor) {
        output.WriteMessage(4, field_names[0], Author);
      }
      if (hasDestroyed) {
        output.WriteBool(5, field_names[3], Destroyed);
      }
      if (hasMentionId) {
        output.WriteMessage(6, field_names[5], MentionId);
      }
      if (hasMemberId) {
        output.WriteMessage(7, field_names[4], MemberId);
      }
      if (hasMessage) {
        output.WriteMessage(8, field_names[6], Message);
      }
      if (hasClubType) {
        output.WriteMessage(9, field_names[2], ClubType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasClubId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, ClubId);
        }
        if (hasStreamId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, StreamId);
        }
        if (hasMessageId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, MessageId);
        }
        if (hasAuthor) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Author);
        }
        if (hasDestroyed) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, Destroyed);
        }
        if (hasMentionId) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, MentionId);
        }
        if (hasMemberId) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, MemberId);
        }
        if (hasMessage) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, Message);
        }
        if (hasClubType) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, ClubType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StreamMention ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamMention ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamMention ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamMention ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamMention ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamMention ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StreamMention ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StreamMention ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StreamMention ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamMention ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StreamMention MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StreamMention prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StreamMention, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StreamMention cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StreamMention result;
      
      private StreamMention PrepareBuilder() {
        if (resultIsReadOnly) {
          StreamMention original = result;
          result = new StreamMention();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StreamMention MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.StreamMention.Descriptor; }
      }
      
      public override StreamMention DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.StreamMention.DefaultInstance; }
      }
      
      public override StreamMention BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StreamMention) {
          return MergeFrom((StreamMention) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StreamMention other) {
        if (other == global::bgs.protocol.club.v1.StreamMention.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClubId) {
          ClubId = other.ClubId;
        }
        if (other.HasStreamId) {
          StreamId = other.StreamId;
        }
        if (other.HasMessageId) {
          MergeMessageId(other.MessageId);
        }
        if (other.HasAuthor) {
          MergeAuthor(other.Author);
        }
        if (other.HasDestroyed) {
          Destroyed = other.Destroyed;
        }
        if (other.HasMentionId) {
          MergeMentionId(other.MentionId);
        }
        if (other.HasMemberId) {
          MergeMemberId(other.MemberId);
        }
        if (other.HasMessage) {
          MergeMessage(other.Message);
        }
        if (other.HasClubType) {
          MergeClubType(other.ClubType);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamMentionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamMentionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasClubId = input.ReadUInt64(ref result.clubId_);
              break;
            }
            case 16: {
              result.hasStreamId = input.ReadUInt64(ref result.streamId_);
              break;
            }
            case 26: {
              global::bgs.protocol.MessageId.Builder subBuilder = global::bgs.protocol.MessageId.CreateBuilder();
              if (result.hasMessageId) {
                subBuilder.MergeFrom(MessageId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MessageId = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::bgs.protocol.club.v1.MemberDescription.Builder subBuilder = global::bgs.protocol.club.v1.MemberDescription.CreateBuilder();
              if (result.hasAuthor) {
                subBuilder.MergeFrom(Author);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Author = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasDestroyed = input.ReadBool(ref result.destroyed_);
              break;
            }
            case 50: {
              global::bgs.protocol.TimeSeriesId.Builder subBuilder = global::bgs.protocol.TimeSeriesId.CreateBuilder();
              if (result.hasMentionId) {
                subBuilder.MergeFrom(MentionId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MentionId = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::bgs.protocol.club.v1.MemberId.Builder subBuilder = global::bgs.protocol.club.v1.MemberId.CreateBuilder();
              if (result.hasMemberId) {
                subBuilder.MergeFrom(MemberId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MemberId = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::bgs.protocol.club.v1.StreamMessage.Builder subBuilder = global::bgs.protocol.club.v1.StreamMessage.CreateBuilder();
              if (result.hasMessage) {
                subBuilder.MergeFrom(Message);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Message = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::bgs.protocol.club.v1.UniqueClubType.Builder subBuilder = global::bgs.protocol.club.v1.UniqueClubType.CreateBuilder();
              if (result.hasClubType) {
                subBuilder.MergeFrom(ClubType);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClubType = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClubId {
        get { return result.hasClubId; }
      }
      public ulong ClubId {
        get { return result.ClubId; }
        set { SetClubId(value); }
      }
      public Builder SetClubId(ulong value) {
        PrepareBuilder();
        result.hasClubId = true;
        result.clubId_ = value;
        return this;
      }
      public Builder ClearClubId() {
        PrepareBuilder();
        result.hasClubId = false;
        result.clubId_ = 0UL;
        return this;
      }
      
      public bool HasStreamId {
        get { return result.hasStreamId; }
      }
      public ulong StreamId {
        get { return result.StreamId; }
        set { SetStreamId(value); }
      }
      public Builder SetStreamId(ulong value) {
        PrepareBuilder();
        result.hasStreamId = true;
        result.streamId_ = value;
        return this;
      }
      public Builder ClearStreamId() {
        PrepareBuilder();
        result.hasStreamId = false;
        result.streamId_ = 0UL;
        return this;
      }
      
      public bool HasMessageId {
       get { return result.hasMessageId; }
      }
      public global::bgs.protocol.MessageId MessageId {
        get { return result.MessageId; }
        set { SetMessageId(value); }
      }
      public Builder SetMessageId(global::bgs.protocol.MessageId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = value;
        return this;
      }
      public Builder SetMessageId(global::bgs.protocol.MessageId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMessageId(global::bgs.protocol.MessageId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMessageId &&
            result.messageId_ != global::bgs.protocol.MessageId.DefaultInstance) {
            result.messageId_ = global::bgs.protocol.MessageId.CreateBuilder(result.messageId_).MergeFrom(value).BuildPartial();
        } else {
          result.messageId_ = value;
        }
        result.hasMessageId = true;
        return this;
      }
      public Builder ClearMessageId() {
        PrepareBuilder();
        result.hasMessageId = false;
        result.messageId_ = null;
        return this;
      }
      
      public bool HasAuthor {
       get { return result.hasAuthor; }
      }
      public global::bgs.protocol.club.v1.MemberDescription Author {
        get { return result.Author; }
        set { SetAuthor(value); }
      }
      public Builder SetAuthor(global::bgs.protocol.club.v1.MemberDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthor = true;
        result.author_ = value;
        return this;
      }
      public Builder SetAuthor(global::bgs.protocol.club.v1.MemberDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAuthor = true;
        result.author_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAuthor(global::bgs.protocol.club.v1.MemberDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAuthor &&
            result.author_ != global::bgs.protocol.club.v1.MemberDescription.DefaultInstance) {
            result.author_ = global::bgs.protocol.club.v1.MemberDescription.CreateBuilder(result.author_).MergeFrom(value).BuildPartial();
        } else {
          result.author_ = value;
        }
        result.hasAuthor = true;
        return this;
      }
      public Builder ClearAuthor() {
        PrepareBuilder();
        result.hasAuthor = false;
        result.author_ = null;
        return this;
      }
      
      public bool HasDestroyed {
        get { return result.hasDestroyed; }
      }
      public bool Destroyed {
        get { return result.Destroyed; }
        set { SetDestroyed(value); }
      }
      public Builder SetDestroyed(bool value) {
        PrepareBuilder();
        result.hasDestroyed = true;
        result.destroyed_ = value;
        return this;
      }
      public Builder ClearDestroyed() {
        PrepareBuilder();
        result.hasDestroyed = false;
        result.destroyed_ = false;
        return this;
      }
      
      public bool HasMentionId {
       get { return result.hasMentionId; }
      }
      public global::bgs.protocol.TimeSeriesId MentionId {
        get { return result.MentionId; }
        set { SetMentionId(value); }
      }
      public Builder SetMentionId(global::bgs.protocol.TimeSeriesId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMentionId = true;
        result.mentionId_ = value;
        return this;
      }
      public Builder SetMentionId(global::bgs.protocol.TimeSeriesId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMentionId = true;
        result.mentionId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMentionId(global::bgs.protocol.TimeSeriesId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMentionId &&
            result.mentionId_ != global::bgs.protocol.TimeSeriesId.DefaultInstance) {
            result.mentionId_ = global::bgs.protocol.TimeSeriesId.CreateBuilder(result.mentionId_).MergeFrom(value).BuildPartial();
        } else {
          result.mentionId_ = value;
        }
        result.hasMentionId = true;
        return this;
      }
      public Builder ClearMentionId() {
        PrepareBuilder();
        result.hasMentionId = false;
        result.mentionId_ = null;
        return this;
      }
      
      public bool HasMemberId {
       get { return result.hasMemberId; }
      }
      public global::bgs.protocol.club.v1.MemberId MemberId {
        get { return result.MemberId; }
        set { SetMemberId(value); }
      }
      public Builder SetMemberId(global::bgs.protocol.club.v1.MemberId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMemberId = true;
        result.memberId_ = value;
        return this;
      }
      public Builder SetMemberId(global::bgs.protocol.club.v1.MemberId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMemberId = true;
        result.memberId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMemberId(global::bgs.protocol.club.v1.MemberId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMemberId &&
            result.memberId_ != global::bgs.protocol.club.v1.MemberId.DefaultInstance) {
            result.memberId_ = global::bgs.protocol.club.v1.MemberId.CreateBuilder(result.memberId_).MergeFrom(value).BuildPartial();
        } else {
          result.memberId_ = value;
        }
        result.hasMemberId = true;
        return this;
      }
      public Builder ClearMemberId() {
        PrepareBuilder();
        result.hasMemberId = false;
        result.memberId_ = null;
        return this;
      }
      
      public bool HasMessage {
       get { return result.hasMessage; }
      }
      public global::bgs.protocol.club.v1.StreamMessage Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(global::bgs.protocol.club.v1.StreamMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder SetMessage(global::bgs.protocol.club.v1.StreamMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMessage(global::bgs.protocol.club.v1.StreamMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMessage &&
            result.message_ != global::bgs.protocol.club.v1.StreamMessage.DefaultInstance) {
            result.message_ = global::bgs.protocol.club.v1.StreamMessage.CreateBuilder(result.message_).MergeFrom(value).BuildPartial();
        } else {
          result.message_ = value;
        }
        result.hasMessage = true;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = null;
        return this;
      }
      
      public bool HasClubType {
       get { return result.hasClubType; }
      }
      public global::bgs.protocol.club.v1.UniqueClubType ClubType {
        get { return result.ClubType; }
        set { SetClubType(value); }
      }
      public Builder SetClubType(global::bgs.protocol.club.v1.UniqueClubType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClubType = true;
        result.clubType_ = value;
        return this;
      }
      public Builder SetClubType(global::bgs.protocol.club.v1.UniqueClubType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClubType = true;
        result.clubType_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClubType(global::bgs.protocol.club.v1.UniqueClubType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClubType &&
            result.clubType_ != global::bgs.protocol.club.v1.UniqueClubType.DefaultInstance) {
            result.clubType_ = global::bgs.protocol.club.v1.UniqueClubType.CreateBuilder(result.clubType_).MergeFrom(value).BuildPartial();
        } else {
          result.clubType_ = value;
        }
        result.hasClubType = true;
        return this;
      }
      public Builder ClearClubType() {
        PrepareBuilder();
        result.hasClubType = false;
        result.clubType_ = null;
        return this;
      }
    }
    static StreamMention() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StreamView : pb::GeneratedMessage<StreamView, StreamView.Builder> {
    private StreamView() { }
    private static readonly StreamView defaultInstance = new StreamView().MakeReadOnly();
    private static readonly string[] _streamViewFieldNames = new string[] { "club_id", "marker", "stream_id" };
    private static readonly uint[] _streamViewFieldTags = new uint[] { 8, 26, 16 };
    public static StreamView DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StreamView DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StreamView ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamView__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StreamView, StreamView.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamView__FieldAccessorTable; }
    }
    
    public const int ClubIdFieldNumber = 1;
    private bool hasClubId;
    private ulong clubId_;
    public bool HasClubId {
      get { return hasClubId; }
    }
    public ulong ClubId {
      get { return clubId_; }
    }
    
    public const int StreamIdFieldNumber = 2;
    private bool hasStreamId;
    private ulong streamId_;
    public bool HasStreamId {
      get { return hasStreamId; }
    }
    public ulong StreamId {
      get { return streamId_; }
    }
    
    public const int MarkerFieldNumber = 3;
    private bool hasMarker;
    private global::bgs.protocol.ViewMarker marker_;
    public bool HasMarker {
      get { return hasMarker; }
    }
    public global::bgs.protocol.ViewMarker Marker {
      get { return marker_ ?? global::bgs.protocol.ViewMarker.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamViewFieldNames;
      if (hasClubId) {
        output.WriteUInt64(1, field_names[0], ClubId);
      }
      if (hasStreamId) {
        output.WriteUInt64(2, field_names[2], StreamId);
      }
      if (hasMarker) {
        output.WriteMessage(3, field_names[1], Marker);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasClubId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, ClubId);
        }
        if (hasStreamId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, StreamId);
        }
        if (hasMarker) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Marker);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StreamView ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamView ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamView ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamView ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamView ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamView ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StreamView ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StreamView ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StreamView ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamView ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StreamView MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StreamView prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StreamView, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StreamView cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StreamView result;
      
      private StreamView PrepareBuilder() {
        if (resultIsReadOnly) {
          StreamView original = result;
          result = new StreamView();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StreamView MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.StreamView.Descriptor; }
      }
      
      public override StreamView DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.StreamView.DefaultInstance; }
      }
      
      public override StreamView BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StreamView) {
          return MergeFrom((StreamView) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StreamView other) {
        if (other == global::bgs.protocol.club.v1.StreamView.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClubId) {
          ClubId = other.ClubId;
        }
        if (other.HasStreamId) {
          StreamId = other.StreamId;
        }
        if (other.HasMarker) {
          MergeMarker(other.Marker);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamViewFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamViewFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasClubId = input.ReadUInt64(ref result.clubId_);
              break;
            }
            case 16: {
              result.hasStreamId = input.ReadUInt64(ref result.streamId_);
              break;
            }
            case 26: {
              global::bgs.protocol.ViewMarker.Builder subBuilder = global::bgs.protocol.ViewMarker.CreateBuilder();
              if (result.hasMarker) {
                subBuilder.MergeFrom(Marker);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Marker = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClubId {
        get { return result.hasClubId; }
      }
      public ulong ClubId {
        get { return result.ClubId; }
        set { SetClubId(value); }
      }
      public Builder SetClubId(ulong value) {
        PrepareBuilder();
        result.hasClubId = true;
        result.clubId_ = value;
        return this;
      }
      public Builder ClearClubId() {
        PrepareBuilder();
        result.hasClubId = false;
        result.clubId_ = 0UL;
        return this;
      }
      
      public bool HasStreamId {
        get { return result.hasStreamId; }
      }
      public ulong StreamId {
        get { return result.StreamId; }
        set { SetStreamId(value); }
      }
      public Builder SetStreamId(ulong value) {
        PrepareBuilder();
        result.hasStreamId = true;
        result.streamId_ = value;
        return this;
      }
      public Builder ClearStreamId() {
        PrepareBuilder();
        result.hasStreamId = false;
        result.streamId_ = 0UL;
        return this;
      }
      
      public bool HasMarker {
       get { return result.hasMarker; }
      }
      public global::bgs.protocol.ViewMarker Marker {
        get { return result.Marker; }
        set { SetMarker(value); }
      }
      public Builder SetMarker(global::bgs.protocol.ViewMarker value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMarker = true;
        result.marker_ = value;
        return this;
      }
      public Builder SetMarker(global::bgs.protocol.ViewMarker.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMarker = true;
        result.marker_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMarker(global::bgs.protocol.ViewMarker value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMarker &&
            result.marker_ != global::bgs.protocol.ViewMarker.DefaultInstance) {
            result.marker_ = global::bgs.protocol.ViewMarker.CreateBuilder(result.marker_).MergeFrom(value).BuildPartial();
        } else {
          result.marker_ = value;
        }
        result.hasMarker = true;
        return this;
      }
      public Builder ClearMarker() {
        PrepareBuilder();
        result.hasMarker = false;
        result.marker_ = null;
        return this;
      }
    }
    static StreamView() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StreamAdvanceViewTime : pb::GeneratedMessage<StreamAdvanceViewTime, StreamAdvanceViewTime.Builder> {
    private StreamAdvanceViewTime() { }
    private static readonly StreamAdvanceViewTime defaultInstance = new StreamAdvanceViewTime().MakeReadOnly();
    private static readonly string[] _streamAdvanceViewTimeFieldNames = new string[] { "stream_id", "view_time" };
    private static readonly uint[] _streamAdvanceViewTimeFieldTags = new uint[] { 8, 16 };
    public static StreamAdvanceViewTime DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StreamAdvanceViewTime DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StreamAdvanceViewTime ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamAdvanceViewTime__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StreamAdvanceViewTime, StreamAdvanceViewTime.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamAdvanceViewTime__FieldAccessorTable; }
    }
    
    public const int StreamIdFieldNumber = 1;
    private bool hasStreamId;
    private ulong streamId_;
    public bool HasStreamId {
      get { return hasStreamId; }
    }
    public ulong StreamId {
      get { return streamId_; }
    }
    
    public const int ViewTimeFieldNumber = 2;
    private bool hasViewTime;
    private ulong viewTime_;
    public bool HasViewTime {
      get { return hasViewTime; }
    }
    public ulong ViewTime {
      get { return viewTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamAdvanceViewTimeFieldNames;
      if (hasStreamId) {
        output.WriteUInt64(1, field_names[0], StreamId);
      }
      if (hasViewTime) {
        output.WriteUInt64(2, field_names[1], ViewTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStreamId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, StreamId);
        }
        if (hasViewTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, ViewTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StreamAdvanceViewTime ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamAdvanceViewTime ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamAdvanceViewTime ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamAdvanceViewTime ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamAdvanceViewTime ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamAdvanceViewTime ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StreamAdvanceViewTime ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StreamAdvanceViewTime ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StreamAdvanceViewTime ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamAdvanceViewTime ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StreamAdvanceViewTime MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StreamAdvanceViewTime prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StreamAdvanceViewTime, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StreamAdvanceViewTime cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StreamAdvanceViewTime result;
      
      private StreamAdvanceViewTime PrepareBuilder() {
        if (resultIsReadOnly) {
          StreamAdvanceViewTime original = result;
          result = new StreamAdvanceViewTime();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StreamAdvanceViewTime MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.StreamAdvanceViewTime.Descriptor; }
      }
      
      public override StreamAdvanceViewTime DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.StreamAdvanceViewTime.DefaultInstance; }
      }
      
      public override StreamAdvanceViewTime BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StreamAdvanceViewTime) {
          return MergeFrom((StreamAdvanceViewTime) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StreamAdvanceViewTime other) {
        if (other == global::bgs.protocol.club.v1.StreamAdvanceViewTime.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStreamId) {
          StreamId = other.StreamId;
        }
        if (other.HasViewTime) {
          ViewTime = other.ViewTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamAdvanceViewTimeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamAdvanceViewTimeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStreamId = input.ReadUInt64(ref result.streamId_);
              break;
            }
            case 16: {
              result.hasViewTime = input.ReadUInt64(ref result.viewTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStreamId {
        get { return result.hasStreamId; }
      }
      public ulong StreamId {
        get { return result.StreamId; }
        set { SetStreamId(value); }
      }
      public Builder SetStreamId(ulong value) {
        PrepareBuilder();
        result.hasStreamId = true;
        result.streamId_ = value;
        return this;
      }
      public Builder ClearStreamId() {
        PrepareBuilder();
        result.hasStreamId = false;
        result.streamId_ = 0UL;
        return this;
      }
      
      public bool HasViewTime {
        get { return result.hasViewTime; }
      }
      public ulong ViewTime {
        get { return result.ViewTime; }
        set { SetViewTime(value); }
      }
      public Builder SetViewTime(ulong value) {
        PrepareBuilder();
        result.hasViewTime = true;
        result.viewTime_ = value;
        return this;
      }
      public Builder ClearViewTime() {
        PrepareBuilder();
        result.hasViewTime = false;
        result.viewTime_ = 0UL;
        return this;
      }
    }
    static StreamAdvanceViewTime() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StreamEventTime : pb::GeneratedMessage<StreamEventTime, StreamEventTime.Builder> {
    private StreamEventTime() { }
    private static readonly StreamEventTime defaultInstance = new StreamEventTime().MakeReadOnly();
    private static readonly string[] _streamEventTimeFieldNames = new string[] { "event_time", "stream_id" };
    private static readonly uint[] _streamEventTimeFieldTags = new uint[] { 16, 8 };
    public static StreamEventTime DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StreamEventTime DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StreamEventTime ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamEventTime__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StreamEventTime, StreamEventTime.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamEventTime__FieldAccessorTable; }
    }
    
    public const int StreamIdFieldNumber = 1;
    private bool hasStreamId;
    private ulong streamId_;
    public bool HasStreamId {
      get { return hasStreamId; }
    }
    public ulong StreamId {
      get { return streamId_; }
    }
    
    public const int EventTimeFieldNumber = 2;
    private bool hasEventTime;
    private ulong eventTime_;
    public bool HasEventTime {
      get { return hasEventTime; }
    }
    public ulong EventTime {
      get { return eventTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamEventTimeFieldNames;
      if (hasStreamId) {
        output.WriteUInt64(1, field_names[1], StreamId);
      }
      if (hasEventTime) {
        output.WriteUInt64(2, field_names[0], EventTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStreamId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, StreamId);
        }
        if (hasEventTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, EventTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StreamEventTime ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamEventTime ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamEventTime ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamEventTime ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamEventTime ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamEventTime ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StreamEventTime ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StreamEventTime ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StreamEventTime ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamEventTime ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StreamEventTime MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StreamEventTime prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StreamEventTime, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StreamEventTime cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StreamEventTime result;
      
      private StreamEventTime PrepareBuilder() {
        if (resultIsReadOnly) {
          StreamEventTime original = result;
          result = new StreamEventTime();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StreamEventTime MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.StreamEventTime.Descriptor; }
      }
      
      public override StreamEventTime DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.StreamEventTime.DefaultInstance; }
      }
      
      public override StreamEventTime BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StreamEventTime) {
          return MergeFrom((StreamEventTime) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StreamEventTime other) {
        if (other == global::bgs.protocol.club.v1.StreamEventTime.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStreamId) {
          StreamId = other.StreamId;
        }
        if (other.HasEventTime) {
          EventTime = other.EventTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamEventTimeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamEventTimeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStreamId = input.ReadUInt64(ref result.streamId_);
              break;
            }
            case 16: {
              result.hasEventTime = input.ReadUInt64(ref result.eventTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStreamId {
        get { return result.hasStreamId; }
      }
      public ulong StreamId {
        get { return result.StreamId; }
        set { SetStreamId(value); }
      }
      public Builder SetStreamId(ulong value) {
        PrepareBuilder();
        result.hasStreamId = true;
        result.streamId_ = value;
        return this;
      }
      public Builder ClearStreamId() {
        PrepareBuilder();
        result.hasStreamId = false;
        result.streamId_ = 0UL;
        return this;
      }
      
      public bool HasEventTime {
        get { return result.hasEventTime; }
      }
      public ulong EventTime {
        get { return result.EventTime; }
        set { SetEventTime(value); }
      }
      public Builder SetEventTime(ulong value) {
        PrepareBuilder();
        result.hasEventTime = true;
        result.eventTime_ = value;
        return this;
      }
      public Builder ClearEventTime() {
        PrepareBuilder();
        result.hasEventTime = false;
        result.eventTime_ = 0UL;
        return this;
      }
    }
    static StreamEventTime() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StreamMentionView : pb::GeneratedMessage<StreamMentionView, StreamMentionView.Builder> {
    private StreamMentionView() { }
    private static readonly StreamMentionView defaultInstance = new StreamMentionView().MakeReadOnly();
    private static readonly string[] _streamMentionViewFieldNames = new string[] { "club_id", "marker", "stream_id" };
    private static readonly uint[] _streamMentionViewFieldTags = new uint[] { 8, 26, 16 };
    public static StreamMentionView DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StreamMentionView DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StreamMentionView ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamMentionView__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StreamMentionView, StreamMentionView.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamMentionView__FieldAccessorTable; }
    }
    
    public const int ClubIdFieldNumber = 1;
    private bool hasClubId;
    private ulong clubId_;
    public bool HasClubId {
      get { return hasClubId; }
    }
    public ulong ClubId {
      get { return clubId_; }
    }
    
    public const int StreamIdFieldNumber = 2;
    private bool hasStreamId;
    private ulong streamId_;
    public bool HasStreamId {
      get { return hasStreamId; }
    }
    public ulong StreamId {
      get { return streamId_; }
    }
    
    public const int MarkerFieldNumber = 3;
    private bool hasMarker;
    private global::bgs.protocol.ViewMarker marker_;
    public bool HasMarker {
      get { return hasMarker; }
    }
    public global::bgs.protocol.ViewMarker Marker {
      get { return marker_ ?? global::bgs.protocol.ViewMarker.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamMentionViewFieldNames;
      if (hasClubId) {
        output.WriteUInt64(1, field_names[0], ClubId);
      }
      if (hasStreamId) {
        output.WriteUInt64(2, field_names[2], StreamId);
      }
      if (hasMarker) {
        output.WriteMessage(3, field_names[1], Marker);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasClubId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, ClubId);
        }
        if (hasStreamId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, StreamId);
        }
        if (hasMarker) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Marker);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StreamMentionView ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamMentionView ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamMentionView ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamMentionView ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamMentionView ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamMentionView ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StreamMentionView ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StreamMentionView ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StreamMentionView ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamMentionView ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StreamMentionView MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StreamMentionView prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StreamMentionView, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StreamMentionView cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StreamMentionView result;
      
      private StreamMentionView PrepareBuilder() {
        if (resultIsReadOnly) {
          StreamMentionView original = result;
          result = new StreamMentionView();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StreamMentionView MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.StreamMentionView.Descriptor; }
      }
      
      public override StreamMentionView DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.StreamMentionView.DefaultInstance; }
      }
      
      public override StreamMentionView BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StreamMentionView) {
          return MergeFrom((StreamMentionView) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StreamMentionView other) {
        if (other == global::bgs.protocol.club.v1.StreamMentionView.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClubId) {
          ClubId = other.ClubId;
        }
        if (other.HasStreamId) {
          StreamId = other.StreamId;
        }
        if (other.HasMarker) {
          MergeMarker(other.Marker);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamMentionViewFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamMentionViewFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasClubId = input.ReadUInt64(ref result.clubId_);
              break;
            }
            case 16: {
              result.hasStreamId = input.ReadUInt64(ref result.streamId_);
              break;
            }
            case 26: {
              global::bgs.protocol.ViewMarker.Builder subBuilder = global::bgs.protocol.ViewMarker.CreateBuilder();
              if (result.hasMarker) {
                subBuilder.MergeFrom(Marker);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Marker = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClubId {
        get { return result.hasClubId; }
      }
      public ulong ClubId {
        get { return result.ClubId; }
        set { SetClubId(value); }
      }
      public Builder SetClubId(ulong value) {
        PrepareBuilder();
        result.hasClubId = true;
        result.clubId_ = value;
        return this;
      }
      public Builder ClearClubId() {
        PrepareBuilder();
        result.hasClubId = false;
        result.clubId_ = 0UL;
        return this;
      }
      
      public bool HasStreamId {
        get { return result.hasStreamId; }
      }
      public ulong StreamId {
        get { return result.StreamId; }
        set { SetStreamId(value); }
      }
      public Builder SetStreamId(ulong value) {
        PrepareBuilder();
        result.hasStreamId = true;
        result.streamId_ = value;
        return this;
      }
      public Builder ClearStreamId() {
        PrepareBuilder();
        result.hasStreamId = false;
        result.streamId_ = 0UL;
        return this;
      }
      
      public bool HasMarker {
       get { return result.hasMarker; }
      }
      public global::bgs.protocol.ViewMarker Marker {
        get { return result.Marker; }
        set { SetMarker(value); }
      }
      public Builder SetMarker(global::bgs.protocol.ViewMarker value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMarker = true;
        result.marker_ = value;
        return this;
      }
      public Builder SetMarker(global::bgs.protocol.ViewMarker.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMarker = true;
        result.marker_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMarker(global::bgs.protocol.ViewMarker value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMarker &&
            result.marker_ != global::bgs.protocol.ViewMarker.DefaultInstance) {
            result.marker_ = global::bgs.protocol.ViewMarker.CreateBuilder(result.marker_).MergeFrom(value).BuildPartial();
        } else {
          result.marker_ = value;
        }
        result.hasMarker = true;
        return this;
      }
      public Builder ClearMarker() {
        PrepareBuilder();
        result.hasMarker = false;
        result.marker_ = null;
        return this;
      }
    }
    static StreamMentionView() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StreamStateOptions : pb::GeneratedMessage<StreamStateOptions, StreamStateOptions.Builder> {
    private StreamStateOptions() { }
    private static readonly StreamStateOptions defaultInstance = new StreamStateOptions().MakeReadOnly();
    private static readonly string[] _streamStateOptionsFieldNames = new string[] { "access", "attribute", "name", "subject", "voice_level" };
    private static readonly uint[] _streamStateOptionsFieldTags = new uint[] { 34, 10, 18, 26, 40 };
    public static StreamStateOptions DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StreamStateOptions DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StreamStateOptions ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamStateOptions__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StreamStateOptions, StreamStateOptions.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamStateOptions__FieldAccessorTable; }
    }
    
    public const int AttributeFieldNumber = 1;
    private pbc::PopsicleList<global::bgs.protocol.v2.Attribute> attribute_ = new pbc::PopsicleList<global::bgs.protocol.v2.Attribute>();
    public scg::IList<global::bgs.protocol.v2.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bgs.protocol.v2.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int SubjectFieldNumber = 3;
    private bool hasSubject;
    private string subject_ = "";
    public bool HasSubject {
      get { return hasSubject; }
    }
    public string Subject {
      get { return subject_; }
    }
    
    public const int AccessFieldNumber = 4;
    private bool hasAccess;
    private global::bgs.protocol.club.v1.StreamAccess access_;
    public bool HasAccess {
      get { return hasAccess; }
    }
    public global::bgs.protocol.club.v1.StreamAccess Access {
      get { return access_ ?? global::bgs.protocol.club.v1.StreamAccess.DefaultInstance; }
    }
    
    public const int VoiceLevelFieldNumber = 5;
    private bool hasVoiceLevel;
    private global::bgs.protocol.club.v1.StreamVoiceLevel voiceLevel_ = global::bgs.protocol.club.v1.StreamVoiceLevel.VOICE_LEVEL_DISABLED;
    public bool HasVoiceLevel {
      get { return hasVoiceLevel; }
    }
    public global::bgs.protocol.club.v1.StreamVoiceLevel VoiceLevel {
      get { return voiceLevel_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamStateOptionsFieldNames;
      if (attribute_.Count > 0) {
        output.WriteMessageArray(1, field_names[1], attribute_);
      }
      if (hasName) {
        output.WriteString(2, field_names[2], Name);
      }
      if (hasSubject) {
        output.WriteString(3, field_names[3], Subject);
      }
      if (hasAccess) {
        output.WriteMessage(4, field_names[0], Access);
      }
      if (hasVoiceLevel) {
        output.WriteEnum(5, field_names[4], (int) VoiceLevel, VoiceLevel);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::bgs.protocol.v2.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasSubject) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Subject);
        }
        if (hasAccess) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Access);
        }
        if (hasVoiceLevel) {
          size += pb::CodedOutputStream.ComputeEnumSize(5, (int) VoiceLevel);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StreamStateOptions ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamStateOptions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamStateOptions ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamStateOptions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamStateOptions ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamStateOptions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StreamStateOptions ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StreamStateOptions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StreamStateOptions ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamStateOptions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StreamStateOptions MakeReadOnly() {
      attribute_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StreamStateOptions prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StreamStateOptions, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StreamStateOptions cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StreamStateOptions result;
      
      private StreamStateOptions PrepareBuilder() {
        if (resultIsReadOnly) {
          StreamStateOptions original = result;
          result = new StreamStateOptions();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StreamStateOptions MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.StreamStateOptions.Descriptor; }
      }
      
      public override StreamStateOptions DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.StreamStateOptions.DefaultInstance; }
      }
      
      public override StreamStateOptions BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StreamStateOptions) {
          return MergeFrom((StreamStateOptions) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StreamStateOptions other) {
        if (other == global::bgs.protocol.club.v1.StreamStateOptions.DefaultInstance) return this;
        PrepareBuilder();
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasSubject) {
          Subject = other.Subject;
        }
        if (other.HasAccess) {
          MergeAccess(other.Access);
        }
        if (other.HasVoiceLevel) {
          VoiceLevel = other.VoiceLevel;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamStateOptionsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamStateOptionsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bgs.protocol.v2.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasSubject = input.ReadString(ref result.subject_);
              break;
            }
            case 34: {
              global::bgs.protocol.club.v1.StreamAccess.Builder subBuilder = global::bgs.protocol.club.v1.StreamAccess.CreateBuilder();
              if (result.hasAccess) {
                subBuilder.MergeFrom(Access);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Access = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              object unknown;
              if(input.ReadEnum(ref result.voiceLevel_, out unknown)) {
                result.hasVoiceLevel = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(5, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::bgs.protocol.v2.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bgs.protocol.v2.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bgs.protocol.v2.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bgs.protocol.v2.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bgs.protocol.v2.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasSubject {
        get { return result.hasSubject; }
      }
      public string Subject {
        get { return result.Subject; }
        set { SetSubject(value); }
      }
      public Builder SetSubject(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSubject = true;
        result.subject_ = value;
        return this;
      }
      public Builder ClearSubject() {
        PrepareBuilder();
        result.hasSubject = false;
        result.subject_ = "";
        return this;
      }
      
      public bool HasAccess {
       get { return result.hasAccess; }
      }
      public global::bgs.protocol.club.v1.StreamAccess Access {
        get { return result.Access; }
        set { SetAccess(value); }
      }
      public Builder SetAccess(global::bgs.protocol.club.v1.StreamAccess value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccess = true;
        result.access_ = value;
        return this;
      }
      public Builder SetAccess(global::bgs.protocol.club.v1.StreamAccess.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccess = true;
        result.access_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccess(global::bgs.protocol.club.v1.StreamAccess value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccess &&
            result.access_ != global::bgs.protocol.club.v1.StreamAccess.DefaultInstance) {
            result.access_ = global::bgs.protocol.club.v1.StreamAccess.CreateBuilder(result.access_).MergeFrom(value).BuildPartial();
        } else {
          result.access_ = value;
        }
        result.hasAccess = true;
        return this;
      }
      public Builder ClearAccess() {
        PrepareBuilder();
        result.hasAccess = false;
        result.access_ = null;
        return this;
      }
      
      public bool HasVoiceLevel {
       get { return result.hasVoiceLevel; }
      }
      public global::bgs.protocol.club.v1.StreamVoiceLevel VoiceLevel {
        get { return result.VoiceLevel; }
        set { SetVoiceLevel(value); }
      }
      public Builder SetVoiceLevel(global::bgs.protocol.club.v1.StreamVoiceLevel value) {
        PrepareBuilder();
        result.hasVoiceLevel = true;
        result.voiceLevel_ = value;
        return this;
      }
      public Builder ClearVoiceLevel() {
        PrepareBuilder();
        result.hasVoiceLevel = false;
        result.voiceLevel_ = global::bgs.protocol.club.v1.StreamVoiceLevel.VOICE_LEVEL_DISABLED;
        return this;
      }
    }
    static StreamStateOptions() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StreamStateAssignment : pb::GeneratedMessage<StreamStateAssignment, StreamStateAssignment.Builder> {
    private StreamStateAssignment() { }
    private static readonly StreamStateAssignment defaultInstance = new StreamStateAssignment().MakeReadOnly();
    private static readonly string[] _streamStateAssignmentFieldNames = new string[] { "access", "attribute", "name", "stream_id", "stream_subscription_removed", "subject", "voice_level" };
    private static readonly uint[] _streamStateAssignmentFieldTags = new uint[] { 42, 18, 26, 8, 48, 34, 56 };
    public static StreamStateAssignment DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StreamStateAssignment DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StreamStateAssignment ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamStateAssignment__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StreamStateAssignment, StreamStateAssignment.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamStateAssignment__FieldAccessorTable; }
    }
    
    public const int StreamIdFieldNumber = 1;
    private bool hasStreamId;
    private ulong streamId_;
    public bool HasStreamId {
      get { return hasStreamId; }
    }
    public ulong StreamId {
      get { return streamId_; }
    }
    
    public const int AttributeFieldNumber = 2;
    private pbc::PopsicleList<global::bgs.protocol.v2.Attribute> attribute_ = new pbc::PopsicleList<global::bgs.protocol.v2.Attribute>();
    public scg::IList<global::bgs.protocol.v2.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bgs.protocol.v2.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int SubjectFieldNumber = 4;
    private bool hasSubject;
    private string subject_ = "";
    public bool HasSubject {
      get { return hasSubject; }
    }
    public string Subject {
      get { return subject_; }
    }
    
    public const int AccessFieldNumber = 5;
    private bool hasAccess;
    private global::bgs.protocol.club.v1.StreamAccess access_;
    public bool HasAccess {
      get { return hasAccess; }
    }
    public global::bgs.protocol.club.v1.StreamAccess Access {
      get { return access_ ?? global::bgs.protocol.club.v1.StreamAccess.DefaultInstance; }
    }
    
    public const int StreamSubscriptionRemovedFieldNumber = 6;
    private bool hasStreamSubscriptionRemoved;
    private bool streamSubscriptionRemoved_;
    public bool HasStreamSubscriptionRemoved {
      get { return hasStreamSubscriptionRemoved; }
    }
    public bool StreamSubscriptionRemoved {
      get { return streamSubscriptionRemoved_; }
    }
    
    public const int VoiceLevelFieldNumber = 7;
    private bool hasVoiceLevel;
    private global::bgs.protocol.club.v1.StreamVoiceLevel voiceLevel_ = global::bgs.protocol.club.v1.StreamVoiceLevel.VOICE_LEVEL_DISABLED;
    public bool HasVoiceLevel {
      get { return hasVoiceLevel; }
    }
    public global::bgs.protocol.club.v1.StreamVoiceLevel VoiceLevel {
      get { return voiceLevel_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamStateAssignmentFieldNames;
      if (hasStreamId) {
        output.WriteUInt64(1, field_names[3], StreamId);
      }
      if (attribute_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], attribute_);
      }
      if (hasName) {
        output.WriteString(3, field_names[2], Name);
      }
      if (hasSubject) {
        output.WriteString(4, field_names[5], Subject);
      }
      if (hasAccess) {
        output.WriteMessage(5, field_names[0], Access);
      }
      if (hasStreamSubscriptionRemoved) {
        output.WriteBool(6, field_names[4], StreamSubscriptionRemoved);
      }
      if (hasVoiceLevel) {
        output.WriteEnum(7, field_names[6], (int) VoiceLevel, VoiceLevel);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStreamId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, StreamId);
        }
        foreach (global::bgs.protocol.v2.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Name);
        }
        if (hasSubject) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Subject);
        }
        if (hasAccess) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Access);
        }
        if (hasStreamSubscriptionRemoved) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, StreamSubscriptionRemoved);
        }
        if (hasVoiceLevel) {
          size += pb::CodedOutputStream.ComputeEnumSize(7, (int) VoiceLevel);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StreamStateAssignment ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamStateAssignment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamStateAssignment ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamStateAssignment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamStateAssignment ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamStateAssignment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StreamStateAssignment ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StreamStateAssignment ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StreamStateAssignment ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamStateAssignment ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StreamStateAssignment MakeReadOnly() {
      attribute_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StreamStateAssignment prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StreamStateAssignment, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StreamStateAssignment cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StreamStateAssignment result;
      
      private StreamStateAssignment PrepareBuilder() {
        if (resultIsReadOnly) {
          StreamStateAssignment original = result;
          result = new StreamStateAssignment();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StreamStateAssignment MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.StreamStateAssignment.Descriptor; }
      }
      
      public override StreamStateAssignment DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.StreamStateAssignment.DefaultInstance; }
      }
      
      public override StreamStateAssignment BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StreamStateAssignment) {
          return MergeFrom((StreamStateAssignment) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StreamStateAssignment other) {
        if (other == global::bgs.protocol.club.v1.StreamStateAssignment.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStreamId) {
          StreamId = other.StreamId;
        }
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasSubject) {
          Subject = other.Subject;
        }
        if (other.HasAccess) {
          MergeAccess(other.Access);
        }
        if (other.HasStreamSubscriptionRemoved) {
          StreamSubscriptionRemoved = other.StreamSubscriptionRemoved;
        }
        if (other.HasVoiceLevel) {
          VoiceLevel = other.VoiceLevel;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamStateAssignmentFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamStateAssignmentFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStreamId = input.ReadUInt64(ref result.streamId_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bgs.protocol.v2.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 34: {
              result.hasSubject = input.ReadString(ref result.subject_);
              break;
            }
            case 42: {
              global::bgs.protocol.club.v1.StreamAccess.Builder subBuilder = global::bgs.protocol.club.v1.StreamAccess.CreateBuilder();
              if (result.hasAccess) {
                subBuilder.MergeFrom(Access);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Access = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              result.hasStreamSubscriptionRemoved = input.ReadBool(ref result.streamSubscriptionRemoved_);
              break;
            }
            case 56: {
              object unknown;
              if(input.ReadEnum(ref result.voiceLevel_, out unknown)) {
                result.hasVoiceLevel = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(7, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStreamId {
        get { return result.hasStreamId; }
      }
      public ulong StreamId {
        get { return result.StreamId; }
        set { SetStreamId(value); }
      }
      public Builder SetStreamId(ulong value) {
        PrepareBuilder();
        result.hasStreamId = true;
        result.streamId_ = value;
        return this;
      }
      public Builder ClearStreamId() {
        PrepareBuilder();
        result.hasStreamId = false;
        result.streamId_ = 0UL;
        return this;
      }
      
      public pbc::IPopsicleList<global::bgs.protocol.v2.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bgs.protocol.v2.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bgs.protocol.v2.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bgs.protocol.v2.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bgs.protocol.v2.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasSubject {
        get { return result.hasSubject; }
      }
      public string Subject {
        get { return result.Subject; }
        set { SetSubject(value); }
      }
      public Builder SetSubject(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSubject = true;
        result.subject_ = value;
        return this;
      }
      public Builder ClearSubject() {
        PrepareBuilder();
        result.hasSubject = false;
        result.subject_ = "";
        return this;
      }
      
      public bool HasAccess {
       get { return result.hasAccess; }
      }
      public global::bgs.protocol.club.v1.StreamAccess Access {
        get { return result.Access; }
        set { SetAccess(value); }
      }
      public Builder SetAccess(global::bgs.protocol.club.v1.StreamAccess value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccess = true;
        result.access_ = value;
        return this;
      }
      public Builder SetAccess(global::bgs.protocol.club.v1.StreamAccess.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccess = true;
        result.access_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccess(global::bgs.protocol.club.v1.StreamAccess value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccess &&
            result.access_ != global::bgs.protocol.club.v1.StreamAccess.DefaultInstance) {
            result.access_ = global::bgs.protocol.club.v1.StreamAccess.CreateBuilder(result.access_).MergeFrom(value).BuildPartial();
        } else {
          result.access_ = value;
        }
        result.hasAccess = true;
        return this;
      }
      public Builder ClearAccess() {
        PrepareBuilder();
        result.hasAccess = false;
        result.access_ = null;
        return this;
      }
      
      public bool HasStreamSubscriptionRemoved {
        get { return result.hasStreamSubscriptionRemoved; }
      }
      public bool StreamSubscriptionRemoved {
        get { return result.StreamSubscriptionRemoved; }
        set { SetStreamSubscriptionRemoved(value); }
      }
      public Builder SetStreamSubscriptionRemoved(bool value) {
        PrepareBuilder();
        result.hasStreamSubscriptionRemoved = true;
        result.streamSubscriptionRemoved_ = value;
        return this;
      }
      public Builder ClearStreamSubscriptionRemoved() {
        PrepareBuilder();
        result.hasStreamSubscriptionRemoved = false;
        result.streamSubscriptionRemoved_ = false;
        return this;
      }
      
      public bool HasVoiceLevel {
       get { return result.hasVoiceLevel; }
      }
      public global::bgs.protocol.club.v1.StreamVoiceLevel VoiceLevel {
        get { return result.VoiceLevel; }
        set { SetVoiceLevel(value); }
      }
      public Builder SetVoiceLevel(global::bgs.protocol.club.v1.StreamVoiceLevel value) {
        PrepareBuilder();
        result.hasVoiceLevel = true;
        result.voiceLevel_ = value;
        return this;
      }
      public Builder ClearVoiceLevel() {
        PrepareBuilder();
        result.hasVoiceLevel = false;
        result.voiceLevel_ = global::bgs.protocol.club.v1.StreamVoiceLevel.VOICE_LEVEL_DISABLED;
        return this;
      }
    }
    static StreamStateAssignment() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StreamTypingIndicator : pb::GeneratedMessage<StreamTypingIndicator, StreamTypingIndicator.Builder> {
    private StreamTypingIndicator() { }
    private static readonly StreamTypingIndicator defaultInstance = new StreamTypingIndicator().MakeReadOnly();
    private static readonly string[] _streamTypingIndicatorFieldNames = new string[] { "author_id", "epoch", "indicator" };
    private static readonly uint[] _streamTypingIndicatorFieldTags = new uint[] { 10, 24, 16 };
    public static StreamTypingIndicator DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StreamTypingIndicator DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StreamTypingIndicator ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamTypingIndicator__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StreamTypingIndicator, StreamTypingIndicator.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.ClubStream.internal__static_bgs_protocol_club_v1_StreamTypingIndicator__FieldAccessorTable; }
    }
    
    public const int AuthorIdFieldNumber = 1;
    private bool hasAuthorId;
    private global::bgs.protocol.club.v1.MemberId authorId_;
    public bool HasAuthorId {
      get { return hasAuthorId; }
    }
    public global::bgs.protocol.club.v1.MemberId AuthorId {
      get { return authorId_ ?? global::bgs.protocol.club.v1.MemberId.DefaultInstance; }
    }
    
    public const int IndicatorFieldNumber = 2;
    private bool hasIndicator;
    private global::bgs.protocol.TypingIndicator indicator_ = global::bgs.protocol.TypingIndicator.TYPING_START;
    public bool HasIndicator {
      get { return hasIndicator; }
    }
    public global::bgs.protocol.TypingIndicator Indicator {
      get { return indicator_; }
    }
    
    public const int EpochFieldNumber = 3;
    private bool hasEpoch;
    private ulong epoch_;
    public bool HasEpoch {
      get { return hasEpoch; }
    }
    public ulong Epoch {
      get { return epoch_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasAuthorId) {
          if (!AuthorId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamTypingIndicatorFieldNames;
      if (hasAuthorId) {
        output.WriteMessage(1, field_names[0], AuthorId);
      }
      if (hasIndicator) {
        output.WriteEnum(2, field_names[2], (int) Indicator, Indicator);
      }
      if (hasEpoch) {
        output.WriteUInt64(3, field_names[1], Epoch);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAuthorId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AuthorId);
        }
        if (hasIndicator) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Indicator);
        }
        if (hasEpoch) {
          size += pb::CodedOutputStream.ComputeUInt64Size(3, Epoch);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StreamTypingIndicator ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamTypingIndicator ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamTypingIndicator ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamTypingIndicator ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamTypingIndicator ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamTypingIndicator ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StreamTypingIndicator ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StreamTypingIndicator ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StreamTypingIndicator ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamTypingIndicator ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StreamTypingIndicator MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StreamTypingIndicator prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StreamTypingIndicator, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StreamTypingIndicator cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StreamTypingIndicator result;
      
      private StreamTypingIndicator PrepareBuilder() {
        if (resultIsReadOnly) {
          StreamTypingIndicator original = result;
          result = new StreamTypingIndicator();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StreamTypingIndicator MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.StreamTypingIndicator.Descriptor; }
      }
      
      public override StreamTypingIndicator DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.StreamTypingIndicator.DefaultInstance; }
      }
      
      public override StreamTypingIndicator BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StreamTypingIndicator) {
          return MergeFrom((StreamTypingIndicator) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StreamTypingIndicator other) {
        if (other == global::bgs.protocol.club.v1.StreamTypingIndicator.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAuthorId) {
          MergeAuthorId(other.AuthorId);
        }
        if (other.HasIndicator) {
          Indicator = other.Indicator;
        }
        if (other.HasEpoch) {
          Epoch = other.Epoch;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamTypingIndicatorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamTypingIndicatorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.club.v1.MemberId.Builder subBuilder = global::bgs.protocol.club.v1.MemberId.CreateBuilder();
              if (result.hasAuthorId) {
                subBuilder.MergeFrom(AuthorId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AuthorId = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.indicator_, out unknown)) {
                result.hasIndicator = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              result.hasEpoch = input.ReadUInt64(ref result.epoch_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAuthorId {
       get { return result.hasAuthorId; }
      }
      public global::bgs.protocol.club.v1.MemberId AuthorId {
        get { return result.AuthorId; }
        set { SetAuthorId(value); }
      }
      public Builder SetAuthorId(global::bgs.protocol.club.v1.MemberId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthorId = true;
        result.authorId_ = value;
        return this;
      }
      public Builder SetAuthorId(global::bgs.protocol.club.v1.MemberId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAuthorId = true;
        result.authorId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAuthorId(global::bgs.protocol.club.v1.MemberId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAuthorId &&
            result.authorId_ != global::bgs.protocol.club.v1.MemberId.DefaultInstance) {
            result.authorId_ = global::bgs.protocol.club.v1.MemberId.CreateBuilder(result.authorId_).MergeFrom(value).BuildPartial();
        } else {
          result.authorId_ = value;
        }
        result.hasAuthorId = true;
        return this;
      }
      public Builder ClearAuthorId() {
        PrepareBuilder();
        result.hasAuthorId = false;
        result.authorId_ = null;
        return this;
      }
      
      public bool HasIndicator {
       get { return result.hasIndicator; }
      }
      public global::bgs.protocol.TypingIndicator Indicator {
        get { return result.Indicator; }
        set { SetIndicator(value); }
      }
      public Builder SetIndicator(global::bgs.protocol.TypingIndicator value) {
        PrepareBuilder();
        result.hasIndicator = true;
        result.indicator_ = value;
        return this;
      }
      public Builder ClearIndicator() {
        PrepareBuilder();
        result.hasIndicator = false;
        result.indicator_ = global::bgs.protocol.TypingIndicator.TYPING_START;
        return this;
      }
      
      public bool HasEpoch {
        get { return result.hasEpoch; }
      }
      public ulong Epoch {
        get { return result.Epoch; }
        set { SetEpoch(value); }
      }
      public Builder SetEpoch(ulong value) {
        PrepareBuilder();
        result.hasEpoch = true;
        result.epoch_ = value;
        return this;
      }
      public Builder ClearEpoch() {
        PrepareBuilder();
        result.hasEpoch = false;
        result.epoch_ = 0UL;
        return this;
      }
    }
    static StreamTypingIndicator() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.ClubStream.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
