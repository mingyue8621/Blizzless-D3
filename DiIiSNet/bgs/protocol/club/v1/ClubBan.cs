// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bgs.protocol.club.v1 {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class ClubBan {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_AddBanOptions__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.AddBanOptions, global::bgs.protocol.club.v1.AddBanOptions.Builder> internal__static_bgs_protocol_club_v1_AddBanOptions__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_club_v1_ClubBan__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.ClubBan, global::bgs.protocol.club.v1.ClubBan.Builder> internal__static_bgs_protocol_club_v1_ClubBan__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static ClubBan() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "CiBiZ3MvbG93L3BiL2NsaWVudC9jbHViX2Jhbi5wcm90bxIUYmdzLnByb3Rv" + 
            "Y29sLmNsdWIudjEaN2Jncy9sb3cvcGIvY2xpZW50L2dsb2JhbF9leHRlbnNp" + 
            "b25zL2ZpZWxkX29wdGlvbnMucHJvdG8aI2Jncy9sb3cvcGIvY2xpZW50L2Ns" + 
            "dWJfbWVtYmVyLnByb3RvGjViZ3MvbG93L3BiL2NsaWVudC9hcGkvY2xpZW50" + 
            "L3YyL2F0dHJpYnV0ZV90eXBlcy5wcm90bxomYmdzL2xvdy9wYi9jbGllbnQv" + 
            "Y2x1Yl9tZW1iZXJfaWQucHJvdG8ingEKDUFkZEJhbk9wdGlvbnMSOwoJdGFy" + 
            "Z2V0X2lkGAEgASgLMh4uYmdzLnByb3RvY29sLmNsdWIudjEuTWVtYmVySWRS" + 
            "CHRhcmdldElkEjgKCWF0dHJpYnV0ZRgCIAMoCzIaLmJncy5wcm90b2NvbC52" + 
            "Mi5BdHRyaWJ1dGVSCWF0dHJpYnV0ZRIWCgZyZWFzb24YAyABKAlSBnJlYXNv" + 
            "biKaAgoHQ2x1YkJhbhIuCgJpZBgBIAEoCzIeLmJncy5wcm90b2NvbC5jbHVi" + 
            "LnYxLk1lbWJlcklkUgJpZBIlCgpiYXR0bGVfdGFnGAIgASgJQgaC+SsCCAFS" + 
            "CWJhdHRsZVRhZxJBCgdjcmVhdG9yGAMgASgLMicuYmdzLnByb3RvY29sLmNs" + 
            "dWIudjEuTWVtYmVyRGVzY3JpcHRpb25SB2NyZWF0b3ISOAoJYXR0cmlidXRl" + 
            "GAQgAygLMhouYmdzLnByb3RvY29sLnYyLkF0dHJpYnV0ZVIJYXR0cmlidXRl" + 
            "EhYKBnJlYXNvbhgFIAEoCVIGcmVhc29uEiMKDWNyZWF0aW9uX3RpbWUYBiAB" + 
            "KARSDGNyZWF0aW9uVGltZQ==");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_bgs_protocol_club_v1_AddBanOptions__Descriptor = Descriptor.MessageTypes[0];
          internal__static_bgs_protocol_club_v1_AddBanOptions__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.AddBanOptions, global::bgs.protocol.club.v1.AddBanOptions.Builder>(internal__static_bgs_protocol_club_v1_AddBanOptions__Descriptor,
                  new string[] { "TargetId", "Attribute", "Reason", });
          internal__static_bgs_protocol_club_v1_ClubBan__Descriptor = Descriptor.MessageTypes[1];
          internal__static_bgs_protocol_club_v1_ClubBan__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.club.v1.ClubBan, global::bgs.protocol.club.v1.ClubBan.Builder>(internal__static_bgs_protocol_club_v1_ClubBan__Descriptor,
                  new string[] { "Id", "BattleTag", "Creator", "Attribute", "Reason", "CreationTime", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::bgs.protocol.FieldOptions.RegisterAllExtensions(registry);
          global::bgs.protocol.club.v1.ClubMember.RegisterAllExtensions(registry);
          global::bgs.protocol.v2alt.AttributeTypes.RegisterAllExtensions(registry);
          global::bgs.protocol.club.v1.ClubMemberId.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::bgs.protocol.FieldOptions.Descriptor, 
            global::bgs.protocol.club.v1.ClubMember.Descriptor, 
            global::bgs.protocol.v2alt.AttributeTypes.Descriptor, 
            global::bgs.protocol.club.v1.ClubMemberId.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class AddBanOptions : pb::GeneratedMessage<AddBanOptions, AddBanOptions.Builder> {
    private AddBanOptions() { }
    private static readonly AddBanOptions defaultInstance = new AddBanOptions().MakeReadOnly();
    private static readonly string[] _addBanOptionsFieldNames = new string[] { "attribute", "reason", "target_id" };
    private static readonly uint[] _addBanOptionsFieldTags = new uint[] { 18, 26, 10 };
    public static AddBanOptions DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AddBanOptions DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AddBanOptions ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.Proto.ClubBan.internal__static_bgs_protocol_club_v1_AddBanOptions__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AddBanOptions, AddBanOptions.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.Proto.ClubBan.internal__static_bgs_protocol_club_v1_AddBanOptions__FieldAccessorTable; }
    }
    
    public const int TargetIdFieldNumber = 1;
    private bool hasTargetId;
    private global::bgs.protocol.club.v1.MemberId targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public global::bgs.protocol.club.v1.MemberId TargetId {
      get { return targetId_ ?? global::bgs.protocol.club.v1.MemberId.DefaultInstance; }
    }
    
    public const int AttributeFieldNumber = 2;
    private pbc::PopsicleList<global::bgs.protocol.v2.Attribute> attribute_ = new pbc::PopsicleList<global::bgs.protocol.v2.Attribute>();
    public scg::IList<global::bgs.protocol.v2.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bgs.protocol.v2.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int ReasonFieldNumber = 3;
    private bool hasReason;
    private string reason_ = "";
    public bool HasReason {
      get { return hasReason; }
    }
    public string Reason {
      get { return reason_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasTargetId) {
          if (!TargetId.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _addBanOptionsFieldNames;
      if (hasTargetId) {
        output.WriteMessage(1, field_names[2], TargetId);
      }
      if (attribute_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], attribute_);
      }
      if (hasReason) {
        output.WriteString(3, field_names[1], Reason);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTargetId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, TargetId);
        }
        foreach (global::bgs.protocol.v2.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasReason) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Reason);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AddBanOptions ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AddBanOptions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AddBanOptions ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AddBanOptions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AddBanOptions ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AddBanOptions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AddBanOptions ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AddBanOptions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AddBanOptions ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AddBanOptions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AddBanOptions MakeReadOnly() {
      attribute_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AddBanOptions prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<AddBanOptions, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AddBanOptions cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AddBanOptions result;
      
      private AddBanOptions PrepareBuilder() {
        if (resultIsReadOnly) {
          AddBanOptions original = result;
          result = new AddBanOptions();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AddBanOptions MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.AddBanOptions.Descriptor; }
      }
      
      public override AddBanOptions DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.AddBanOptions.DefaultInstance; }
      }
      
      public override AddBanOptions BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AddBanOptions) {
          return MergeFrom((AddBanOptions) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AddBanOptions other) {
        if (other == global::bgs.protocol.club.v1.AddBanOptions.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTargetId) {
          MergeTargetId(other.TargetId);
        }
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_addBanOptionsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _addBanOptionsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.club.v1.MemberId.Builder subBuilder = global::bgs.protocol.club.v1.MemberId.CreateBuilder();
              if (result.hasTargetId) {
                subBuilder.MergeFrom(TargetId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bgs.protocol.v2.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              result.hasReason = input.ReadString(ref result.reason_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTargetId {
       get { return result.hasTargetId; }
      }
      public global::bgs.protocol.club.v1.MemberId TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(global::bgs.protocol.club.v1.MemberId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder SetTargetId(global::bgs.protocol.club.v1.MemberId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetId(global::bgs.protocol.club.v1.MemberId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetId &&
            result.targetId_ != global::bgs.protocol.club.v1.MemberId.DefaultInstance) {
            result.targetId_ = global::bgs.protocol.club.v1.MemberId.CreateBuilder(result.targetId_).MergeFrom(value).BuildPartial();
        } else {
          result.targetId_ = value;
        }
        result.hasTargetId = true;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::bgs.protocol.v2.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bgs.protocol.v2.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bgs.protocol.v2.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bgs.protocol.v2.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bgs.protocol.v2.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public string Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = "";
        return this;
      }
    }
    static AddBanOptions() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.Proto.ClubBan.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ClubBan : pb::GeneratedMessage<ClubBan, ClubBan.Builder> {
    private ClubBan() { }
    private static readonly ClubBan defaultInstance = new ClubBan().MakeReadOnly();
    private static readonly string[] _clubBanFieldNames = new string[] { "attribute", "battle_tag", "creation_time", "creator", "id", "reason" };
    private static readonly uint[] _clubBanFieldTags = new uint[] { 34, 18, 48, 26, 10, 42 };
    public static ClubBan DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClubBan DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ClubBan ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.club.v1.Proto.ClubBan.internal__static_bgs_protocol_club_v1_ClubBan__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClubBan, ClubBan.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.club.v1.Proto.ClubBan.internal__static_bgs_protocol_club_v1_ClubBan__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private global::bgs.protocol.club.v1.MemberId id_;
    public bool HasId {
      get { return hasId; }
    }
    public global::bgs.protocol.club.v1.MemberId Id {
      get { return id_ ?? global::bgs.protocol.club.v1.MemberId.DefaultInstance; }
    }
    
    public const int BattleTagFieldNumber = 2;
    private bool hasBattleTag;
    private string battleTag_ = "";
    public bool HasBattleTag {
      get { return hasBattleTag; }
    }
    public string BattleTag {
      get { return battleTag_; }
    }
    
    public const int CreatorFieldNumber = 3;
    private bool hasCreator;
    private global::bgs.protocol.club.v1.MemberDescription creator_;
    public bool HasCreator {
      get { return hasCreator; }
    }
    public global::bgs.protocol.club.v1.MemberDescription Creator {
      get { return creator_ ?? global::bgs.protocol.club.v1.MemberDescription.DefaultInstance; }
    }
    
    public const int AttributeFieldNumber = 4;
    private pbc::PopsicleList<global::bgs.protocol.v2.Attribute> attribute_ = new pbc::PopsicleList<global::bgs.protocol.v2.Attribute>();
    public scg::IList<global::bgs.protocol.v2.Attribute> AttributeList {
      get { return attribute_; }
    }
    public int AttributeCount {
      get { return attribute_.Count; }
    }
    public global::bgs.protocol.v2.Attribute GetAttribute(int index) {
      return attribute_[index];
    }
    
    public const int ReasonFieldNumber = 5;
    private bool hasReason;
    private string reason_ = "";
    public bool HasReason {
      get { return hasReason; }
    }
    public string Reason {
      get { return reason_; }
    }
    
    public const int CreationTimeFieldNumber = 6;
    private bool hasCreationTime;
    private ulong creationTime_;
    public bool HasCreationTime {
      get { return hasCreationTime; }
    }
    public ulong CreationTime {
      get { return creationTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasId) {
          if (!Id.IsInitialized) return false;
        }
        if (HasCreator) {
          if (!Creator.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _clubBanFieldNames;
      if (hasId) {
        output.WriteMessage(1, field_names[4], Id);
      }
      if (hasBattleTag) {
        output.WriteString(2, field_names[1], BattleTag);
      }
      if (hasCreator) {
        output.WriteMessage(3, field_names[3], Creator);
      }
      if (attribute_.Count > 0) {
        output.WriteMessageArray(4, field_names[0], attribute_);
      }
      if (hasReason) {
        output.WriteString(5, field_names[5], Reason);
      }
      if (hasCreationTime) {
        output.WriteUInt64(6, field_names[2], CreationTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Id);
        }
        if (hasBattleTag) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BattleTag);
        }
        if (hasCreator) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Creator);
        }
        foreach (global::bgs.protocol.v2.Attribute element in AttributeList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        if (hasReason) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Reason);
        }
        if (hasCreationTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(6, CreationTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClubBan ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClubBan ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClubBan ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClubBan ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClubBan ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClubBan ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClubBan ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClubBan ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClubBan ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClubBan ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ClubBan MakeReadOnly() {
      attribute_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClubBan prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ClubBan, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ClubBan cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ClubBan result;
      
      private ClubBan PrepareBuilder() {
        if (resultIsReadOnly) {
          ClubBan original = result;
          result = new ClubBan();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ClubBan MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.club.v1.ClubBan.Descriptor; }
      }
      
      public override ClubBan DefaultInstanceForType {
        get { return global::bgs.protocol.club.v1.ClubBan.DefaultInstance; }
      }
      
      public override ClubBan BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClubBan) {
          return MergeFrom((ClubBan) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClubBan other) {
        if (other == global::bgs.protocol.club.v1.ClubBan.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          MergeId(other.Id);
        }
        if (other.HasBattleTag) {
          BattleTag = other.BattleTag;
        }
        if (other.HasCreator) {
          MergeCreator(other.Creator);
        }
        if (other.attribute_.Count != 0) {
          result.attribute_.Add(other.attribute_);
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasCreationTime) {
          CreationTime = other.CreationTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_clubBanFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _clubBanFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.club.v1.MemberId.Builder subBuilder = global::bgs.protocol.club.v1.MemberId.CreateBuilder();
              if (result.hasId) {
                subBuilder.MergeFrom(Id);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Id = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasBattleTag = input.ReadString(ref result.battleTag_);
              break;
            }
            case 26: {
              global::bgs.protocol.club.v1.MemberDescription.Builder subBuilder = global::bgs.protocol.club.v1.MemberDescription.CreateBuilder();
              if (result.hasCreator) {
                subBuilder.MergeFrom(Creator);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Creator = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.attribute_, global::bgs.protocol.v2.Attribute.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              result.hasReason = input.ReadString(ref result.reason_);
              break;
            }
            case 48: {
              result.hasCreationTime = input.ReadUInt64(ref result.creationTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
       get { return result.hasId; }
      }
      public global::bgs.protocol.club.v1.MemberId Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(global::bgs.protocol.club.v1.MemberId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder SetId(global::bgs.protocol.club.v1.MemberId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = builderForValue.Build();
        return this;
      }
      public Builder MergeId(global::bgs.protocol.club.v1.MemberId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasId &&
            result.id_ != global::bgs.protocol.club.v1.MemberId.DefaultInstance) {
            result.id_ = global::bgs.protocol.club.v1.MemberId.CreateBuilder(result.id_).MergeFrom(value).BuildPartial();
        } else {
          result.id_ = value;
        }
        result.hasId = true;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = null;
        return this;
      }
      
      public bool HasBattleTag {
        get { return result.hasBattleTag; }
      }
      public string BattleTag {
        get { return result.BattleTag; }
        set { SetBattleTag(value); }
      }
      public Builder SetBattleTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBattleTag = true;
        result.battleTag_ = value;
        return this;
      }
      public Builder ClearBattleTag() {
        PrepareBuilder();
        result.hasBattleTag = false;
        result.battleTag_ = "";
        return this;
      }
      
      public bool HasCreator {
       get { return result.hasCreator; }
      }
      public global::bgs.protocol.club.v1.MemberDescription Creator {
        get { return result.Creator; }
        set { SetCreator(value); }
      }
      public Builder SetCreator(global::bgs.protocol.club.v1.MemberDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCreator = true;
        result.creator_ = value;
        return this;
      }
      public Builder SetCreator(global::bgs.protocol.club.v1.MemberDescription.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCreator = true;
        result.creator_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCreator(global::bgs.protocol.club.v1.MemberDescription value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCreator &&
            result.creator_ != global::bgs.protocol.club.v1.MemberDescription.DefaultInstance) {
            result.creator_ = global::bgs.protocol.club.v1.MemberDescription.CreateBuilder(result.creator_).MergeFrom(value).BuildPartial();
        } else {
          result.creator_ = value;
        }
        result.hasCreator = true;
        return this;
      }
      public Builder ClearCreator() {
        PrepareBuilder();
        result.hasCreator = false;
        result.creator_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::bgs.protocol.v2.Attribute> AttributeList {
        get { return PrepareBuilder().attribute_; }
      }
      public int AttributeCount {
        get { return result.AttributeCount; }
      }
      public global::bgs.protocol.v2.Attribute GetAttribute(int index) {
        return result.GetAttribute(index);
      }
      public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_[index] = value;
        return this;
      }
      public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttribute(global::bgs.protocol.v2.Attribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attribute_.Add(value);
        return this;
      }
      public Builder AddAttribute(global::bgs.protocol.v2.Attribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attribute_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttribute(scg::IEnumerable<global::bgs.protocol.v2.Attribute> values) {
        PrepareBuilder();
        result.attribute_.Add(values);
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.attribute_.Clear();
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public string Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = "";
        return this;
      }
      
      public bool HasCreationTime {
        get { return result.hasCreationTime; }
      }
      public ulong CreationTime {
        get { return result.CreationTime; }
        set { SetCreationTime(value); }
      }
      public Builder SetCreationTime(ulong value) {
        PrepareBuilder();
        result.hasCreationTime = true;
        result.creationTime_ = value;
        return this;
      }
      public Builder ClearCreationTime() {
        PrepareBuilder();
        result.hasCreationTime = false;
        result.creationTime_ = 0UL;
        return this;
      }
    }
    static ClubBan() {
      object.ReferenceEquals(global::bgs.protocol.club.v1.Proto.ClubBan.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
