// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bgs.protocol.channel.v2
{

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class ChannelTypes
    {

        #region Extension registration
        public static void RegisterAllExtensions(pb::ExtensionRegistry registry)
        {
        }
        #endregion
        #region Static variables
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_ChannelId__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.ChannelId, global::bgs.protocol.channel.v2.ChannelId.Builder> internal__static_bgs_protocol_channel_v2_ChannelId__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_UniqueChannelType__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.UniqueChannelType, global::bgs.protocol.channel.v2.UniqueChannelType.Builder> internal__static_bgs_protocol_channel_v2_UniqueChannelType__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_RoleAssignment__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.RoleAssignment, global::bgs.protocol.channel.v2.RoleAssignment.Builder> internal__static_bgs_protocol_channel_v2_RoleAssignment__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_AttributeAssignment__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.AttributeAssignment, global::bgs.protocol.channel.v2.AttributeAssignment.Builder> internal__static_bgs_protocol_channel_v2_AttributeAssignment__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_CreateMemberOptions__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.CreateMemberOptions, global::bgs.protocol.channel.v2.CreateMemberOptions.Builder> internal__static_bgs_protocol_channel_v2_CreateMemberOptions__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_Member__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.Member, global::bgs.protocol.channel.v2.Member.Builder> internal__static_bgs_protocol_channel_v2_Member__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_CreateChannelOptions__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.CreateChannelOptions, global::bgs.protocol.channel.v2.CreateChannelOptions.Builder> internal__static_bgs_protocol_channel_v2_CreateChannelOptions__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_PublicChannelType__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.PublicChannelType, global::bgs.protocol.channel.v2.PublicChannelType.Builder> internal__static_bgs_protocol_channel_v2_PublicChannelType__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_GetPublicChannelTypesOptions__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.GetPublicChannelTypesOptions, global::bgs.protocol.channel.v2.GetPublicChannelTypesOptions.Builder> internal__static_bgs_protocol_channel_v2_GetPublicChannelTypesOptions__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_FindChannelOptions__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.FindChannelOptions, global::bgs.protocol.channel.v2.FindChannelOptions.Builder> internal__static_bgs_protocol_channel_v2_FindChannelOptions__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_SendMessageOptions__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.SendMessageOptions, global::bgs.protocol.channel.v2.SendMessageOptions.Builder> internal__static_bgs_protocol_channel_v2_SendMessageOptions__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_ChannelMessage__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.ChannelMessage, global::bgs.protocol.channel.v2.ChannelMessage.Builder> internal__static_bgs_protocol_channel_v2_ChannelMessage__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_PublicChannelState__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.PublicChannelState, global::bgs.protocol.channel.v2.PublicChannelState.Builder> internal__static_bgs_protocol_channel_v2_PublicChannelState__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_Channel__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.Channel, global::bgs.protocol.channel.v2.Channel.Builder> internal__static_bgs_protocol_channel_v2_Channel__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_ChannelDescription__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.ChannelDescription, global::bgs.protocol.channel.v2.ChannelDescription.Builder> internal__static_bgs_protocol_channel_v2_ChannelDescription__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_ChannelMembershipState__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.ChannelMembershipState, global::bgs.protocol.channel.v2.ChannelMembershipState.Builder> internal__static_bgs_protocol_channel_v2_ChannelMembershipState__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_ChannelSlot__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.ChannelSlot, global::bgs.protocol.channel.v2.ChannelSlot.Builder> internal__static_bgs_protocol_channel_v2_ChannelSlot__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_SendInvitationOptions__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.SendInvitationOptions, global::bgs.protocol.channel.v2.SendInvitationOptions.Builder> internal__static_bgs_protocol_channel_v2_SendInvitationOptions__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_MemberDescription__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.MemberDescription, global::bgs.protocol.channel.v2.MemberDescription.Builder> internal__static_bgs_protocol_channel_v2_MemberDescription__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_ChannelInvitation__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.ChannelInvitation, global::bgs.protocol.channel.v2.ChannelInvitation.Builder> internal__static_bgs_protocol_channel_v2_ChannelInvitation__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_SendSuggestionOptions__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.SendSuggestionOptions, global::bgs.protocol.channel.v2.SendSuggestionOptions.Builder> internal__static_bgs_protocol_channel_v2_SendSuggestionOptions__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v2_Suggestion__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.Suggestion, global::bgs.protocol.channel.v2.Suggestion.Builder> internal__static_bgs_protocol_channel_v2_Suggestion__FieldAccessorTable;
        #endregion
        #region Descriptor
        public static pbd::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbd::FileDescriptor descriptor;

        static ChannelTypes()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                "CjNiZ3MvbG93L3BiL2NsaWVudC9hcGkvY2xpZW50L3YyL2NoYW5uZWxfdHlw" +
                "ZXMucHJvdG8SF2Jncy5wcm90b2NvbC5jaGFubmVsLnYyGjViZ3MvbG93L3Bi" +
                "L2NsaWVudC9hcGkvY2xpZW50L3YyL2F0dHJpYnV0ZV90eXBlcy5wcm90bxoy" +
                "YmdzL2xvdy9wYi9jbGllbnQvYXBpL2NsaWVudC92Mi9jaGFubmVsX2VudW0u" +
                "cHJvdG8aJWJncy9sb3cvcGIvY2xpZW50L2FjY291bnRfdHlwZXMucHJvdG8a" +
                "KGJncy9sb3cvcGIvY2xpZW50L2NoYW5uZWxfcm9sZV9zZXQucHJvdG8aIWJn" +
                "cy9sb3cvcGIvY2xpZW50L3JwY190eXBlcy5wcm90byJQCglDaGFubmVsSWQS" +
                "KwoEaG9zdBgCIAEoCzIXLmJncy5wcm90b2NvbC5Qcm9jZXNzSWRSBGhvc3QS" +
                "DgoCaWQYAyABKAdSAmlkOgaC+SsCCAEiUAoRVW5pcXVlQ2hhbm5lbFR5cGUS" +
                "GAoHcHJvZ3JhbRgCIAEoB1IHcHJvZ3JhbRIhCgxjaGFubmVsX3R5cGUYAyAB" +
                "KAlSC2NoYW5uZWxUeXBlInEKDlJvbGVBc3NpZ25tZW50EkcKCW1lbWJlcl9p" +
                "ZBgBIAEoCzIqLmJncy5wcm90b2NvbC5hY2NvdW50LnYxLkdhbWVBY2NvdW50" +
                "SGFuZGxlUghtZW1iZXJJZBIWCgRyb2xlGAIgAygNQgIQAVIEcm9sZSKYAQoT" +
                "QXR0cmlidXRlQXNzaWdubWVudBJHCgltZW1iZXJfaWQYASABKAsyKi5iZ3Mu" +
                "cHJvdG9jb2wuYWNjb3VudC52MS5HYW1lQWNjb3VudEhhbmRsZVIIbWVtYmVy" +
                "SWQSOAoJYXR0cmlidXRlGAIgAygLMhouYmdzLnByb3RvY29sLnYyLkF0dHJp" +
                "YnV0ZVIJYXR0cmlidXRlIpgBChNDcmVhdGVNZW1iZXJPcHRpb25zEkcKCW1l" +
                "bWJlcl9pZBgBIAEoCzIqLmJncy5wcm90b2NvbC5hY2NvdW50LnYxLkdhbWVB" +
                "Y2NvdW50SGFuZGxlUghtZW1iZXJJZBI4CglhdHRyaWJ1dGUYAyADKAsyGi5i" +
                "Z3MucHJvdG9jb2wudjIuQXR0cmlidXRlUglhdHRyaWJ1dGUi2AEKBk1lbWJl" +
                "chI6CgJpZBgBIAEoCzIqLmJncy5wcm90b2NvbC5hY2NvdW50LnYxLkdhbWVB" +
                "Y2NvdW50SGFuZGxlUgJpZBIlCgpiYXR0bGVfdGFnGAIgASgJQgaC+SsCCAFS" +
                "CWJhdHRsZVRhZxIZCgh2b2ljZV9pZBgDIAEoCVIHdm9pY2VJZBIWCgRyb2xl" +
                "GAQgAygNQgIQAVIEcm9sZRI4CglhdHRyaWJ1dGUYBSADKAsyGi5iZ3MucHJv" +
                "dG9jb2wudjIuQXR0cmlidXRlUglhdHRyaWJ1dGUiygIKFENyZWF0ZUNoYW5u" +
                "ZWxPcHRpb25zEj4KBHR5cGUYASABKAsyKi5iZ3MucHJvdG9jb2wuY2hhbm5l" +
                "bC52Mi5VbmlxdWVDaGFubmVsVHlwZVIEdHlwZRISCgRuYW1lGAIgASgJUgRu" +
                "YW1lEl4KDXByaXZhY3lfbGV2ZWwYAyABKA4yJS5iZ3MucHJvdG9jb2wuY2hh" +
                "bm5lbC52Mi5Qcml2YWN5TGV2ZWw6ElBSSVZBQ1lfTEVWRUxfT1BFTlIMcHJp" +
                "dmFjeUxldmVsEjgKCWF0dHJpYnV0ZRgEIAMoCzIaLmJncy5wcm90b2NvbC52" +
                "Mi5BdHRyaWJ1dGVSCWF0dHJpYnV0ZRJECgZtZW1iZXIYBSABKAsyLC5iZ3Mu" +
                "cHJvdG9jb2wuY2hhbm5lbC52Mi5DcmVhdGVNZW1iZXJPcHRpb25zUgZtZW1i" +
                "ZXIigwEKEVB1YmxpY0NoYW5uZWxUeXBlEj4KBHR5cGUYASABKAsyKi5iZ3Mu" +
                "cHJvdG9jb2wuY2hhbm5lbC52Mi5VbmlxdWVDaGFubmVsVHlwZVIEdHlwZRIS" +
                "CgRuYW1lGAIgASgJUgRuYW1lEhoKCGlkZW50aXR5GAMgASgJUghpZGVudGl0" +
                "eSJeChxHZXRQdWJsaWNDaGFubmVsVHlwZXNPcHRpb25zEj4KBHR5cGUYASAB" +
                "KAsyKi5iZ3MucHJvdG9jb2wuY2hhbm5lbC52Mi5VbmlxdWVDaGFubmVsVHlw" +
                "ZVIEdHlwZSKzAgoSRmluZENoYW5uZWxPcHRpb25zEj4KBHR5cGUYASABKAsy" +
                "Ki5iZ3MucHJvdG9jb2wuY2hhbm5lbC52Mi5VbmlxdWVDaGFubmVsVHlwZVIE" +
                "dHlwZRIaCghpZGVudGl0eRgCIAEoCVIIaWRlbnRpdHkSFgoGbG9jYWxlGAMg" +
                "ASgHUgZsb2NhbGUSRQoQc2VhcmNoX2F0dHJpYnV0ZRgEIAMoCzIaLmJncy5w" +
                "cm90b2NvbC52Mi5BdHRyaWJ1dGVSD3NlYXJjaEF0dHJpYnV0ZRJiCgtyZXNl" +
                "cnZhdGlvbhgGIAMoCzIiLmJncy5wcm90b2NvbC5hY2NvdW50LnYxLkFjY291" +
                "bnRJZEIcivkrBioECgIIAIr5KwYqBAoCEBSK+SsEKgIQAVILcmVzZXJ2YXRp" +
                "b24iaAoSU2VuZE1lc3NhZ2VPcHRpb25zEhgKB2NvbnRlbnQYBCABKAlSB2Nv" +
                "bnRlbnQSOAoJYXR0cmlidXRlGAUgAygLMhouYmdzLnByb3RvY29sLnYyLkF0" +
                "dHJpYnV0ZVIJYXR0cmlidXRlItIBCg5DaGFubmVsTWVzc2FnZRJHCglhdXRo" +
                "b3JfaWQYASABKAsyKi5iZ3MucHJvdG9jb2wuYWNjb3VudC52MS5HYW1lQWNj" +
                "b3VudEhhbmRsZVIIYXV0aG9ySWQSGAoHY29udGVudBgDIAEoCVIHY29udGVu" +
                "dBI4CglhdHRyaWJ1dGUYBCADKAsyGi5iZ3MucHJvdG9jb2wudjIuQXR0cmli" +
                "dXRlUglhdHRyaWJ1dGUSIwoNY3JlYXRpb25fdGltZRgFIAEoBFIMY3JlYXRp" +
                "b25UaW1lItUBChJQdWJsaWNDaGFubmVsU3RhdGUSGgoIaWRlbnRpdHkYASAB" +
                "KAlSCGlkZW50aXR5EhYKBmxvY2FsZRgCIAEoB1IGbG9jYWxlEkUKEHNlYXJj" +
                "aF9hdHRyaWJ1dGUYAyADKAsyGi5iZ3MucHJvdG9jb2wudjIuQXR0cmlidXRl" +
                "Ug9zZWFyY2hBdHRyaWJ1dGUSRAoLcmVzZXJ2YXRpb24YBiADKAsyIi5iZ3Mu" +
                "cHJvdG9jb2wuYWNjb3VudC52MS5BY2NvdW50SWRSC3Jlc2VydmF0aW9uIuAE" +
                "CgdDaGFubmVsEjIKAmlkGAEgASgLMiIuYmdzLnByb3RvY29sLmNoYW5uZWwu" +
                "djIuQ2hhbm5lbElkUgJpZBI+CgR0eXBlGAIgASgLMiouYmdzLnByb3RvY29s" +
                "LmNoYW5uZWwudjIuVW5pcXVlQ2hhbm5lbFR5cGVSBHR5cGUSEgoEbmFtZRgD" +
                "IAEoCVIEbmFtZRJeCg1wcml2YWN5X2xldmVsGAQgASgOMiUuYmdzLnByb3Rv" +
                "Y29sLmNoYW5uZWwudjIuUHJpdmFjeUxldmVsOhJQUklWQUNZX0xFVkVMX09Q" +
                "RU5SDHByaXZhY3lMZXZlbBI4CglhdHRyaWJ1dGUYBSADKAsyGi5iZ3MucHJv" +
                "dG9jb2wudjIuQXR0cmlidXRlUglhdHRyaWJ1dGUSNwoGbWVtYmVyGAYgAygL" +
                "Mh8uYmdzLnByb3RvY29sLmNoYW5uZWwudjIuTWVtYmVyUgZtZW1iZXISSgoK" +
                "aW52aXRhdGlvbhgHIAMoCzIqLmJncy5wcm90b2NvbC5jaGFubmVsLnYyLkNo" +
                "YW5uZWxJbnZpdGF0aW9uUgppbnZpdGF0aW9uEj8KCHJvbGVfc2V0GAggASgL" +
                "MiQuYmdzLnByb3RvY29sLmNoYW5uZWwuQ2hhbm5lbFJvbGVTZXRSB3JvbGVT" +
                "ZXQSXwoUcHVibGljX2NoYW5uZWxfc3RhdGUYbiABKAsyKy5iZ3MucHJvdG9j" +
                "b2wuY2hhbm5lbC52Mi5QdWJsaWNDaGFubmVsU3RhdGVIAFIScHVibGljQ2hh" +
                "bm5lbFN0YXRlQgwKCnN0YXRlX3R5cGUiyAMKEkNoYW5uZWxEZXNjcmlwdGlv" +
                "bhIyCgJpZBgBIAEoCzIiLmJncy5wcm90b2NvbC5jaGFubmVsLnYyLkNoYW5u" +
                "ZWxJZFICaWQSPgoEdHlwZRgCIAEoCzIqLmJncy5wcm90b2NvbC5jaGFubmVs" +
                "LnYyLlVuaXF1ZUNoYW5uZWxUeXBlUgR0eXBlEhIKBG5hbWUYAyABKAlSBG5h" +
                "bWUSXgoNcHJpdmFjeV9sZXZlbBgEIAEoDjIlLmJncy5wcm90b2NvbC5jaGFu" +
                "bmVsLnYyLlByaXZhY3lMZXZlbDoSUFJJVkFDWV9MRVZFTF9PUEVOUgxwcml2" +
                "YWN5TGV2ZWwSOAoJYXR0cmlidXRlGAUgAygLMhouYmdzLnByb3RvY29sLnYy" +
                "LkF0dHJpYnV0ZVIJYXR0cmlidXRlEiEKDG1lbWJlcl9jb3VudBgGIAEoDVIL" +
                "bWVtYmVyQ291bnQSXwoUcHVibGljX2NoYW5uZWxfc3RhdGUYbiABKAsyKy5i" +
                "Z3MucHJvdG9jb2wuY2hhbm5lbC52Mi5QdWJsaWNDaGFubmVsU3RhdGVIAFIS" +
                "cHVibGljQ2hhbm5lbFN0YXRlQgwKCnN0YXRlX3R5cGUiswEKFkNoYW5uZWxN" +
                "ZW1iZXJzaGlwU3RhdGUSTQoLZGVzY3JpcHRpb24YASADKAsyKy5iZ3MucHJv" +
                "dG9jb2wuY2hhbm5lbC52Mi5DaGFubmVsRGVzY3JpcHRpb25SC2Rlc2NyaXB0" +
                "aW9uEkoKCmludml0YXRpb24YAiADKAsyKi5iZ3MucHJvdG9jb2wuY2hhbm5l" +
                "bC52Mi5DaGFubmVsSW52aXRhdGlvblIKaW52aXRhdGlvbiJBCgtDaGFubmVs" +
                "U2xvdBIaCghyZXNlcnZlZBgBIAEoCFIIcmVzZXJ2ZWQSFgoGcmVqb2luGAIg" +
                "ASgIUgZyZWpvaW4i5wEKFVNlbmRJbnZpdGF0aW9uT3B0aW9ucxJLCgpjaGFu" +
                "bmVsX2lkGAEgASgLMiIuYmdzLnByb3RvY29sLmNoYW5uZWwudjIuQ2hhbm5l" +
                "bElkQgiK+SsEMgIIAVIJY2hhbm5lbElkEkcKCXRhcmdldF9pZBgCIAEoCzIq" +
                "LmJncy5wcm90b2NvbC5hY2NvdW50LnYxLkdhbWVBY2NvdW50SGFuZGxlUgh0" +
                "YXJnZXRJZBI4CgRzbG90GAMgASgLMiQuYmdzLnByb3RvY29sLmNoYW5uZWwu" +
                "djIuQ2hhbm5lbFNsb3RSBHNsb3QidgoRTWVtYmVyRGVzY3JpcHRpb24SOgoC" +
                "aWQYASABKAsyKi5iZ3MucHJvdG9jb2wuYWNjb3VudC52MS5HYW1lQWNjb3Vu" +
                "dEhhbmRsZVICaWQSJQoKYmF0dGxlX3RhZxgCIAEoCUIGgvkrAggBUgliYXR0" +
                "bGVUYWci/gIKEUNoYW5uZWxJbnZpdGF0aW9uEg4KAmlkGAEgASgGUgJpZBJE" +
                "CgdpbnZpdGVyGAIgASgLMiouYmdzLnByb3RvY29sLmNoYW5uZWwudjIuTWVt" +
                "YmVyRGVzY3JpcHRpb25SB2ludml0ZXISRAoHaW52aXRlZRgDIAEoCzIqLmJn" +
                "cy5wcm90b2NvbC5jaGFubmVsLnYyLk1lbWJlckRlc2NyaXB0aW9uUgdpbnZp" +
                "dGVlEkUKB2NoYW5uZWwYBCABKAsyKy5iZ3MucHJvdG9jb2wuY2hhbm5lbC52" +
                "Mi5DaGFubmVsRGVzY3JpcHRpb25SB2NoYW5uZWwSOAoEc2xvdBgFIAEoCzIk" +
                "LmJncy5wcm90b2NvbC5jaGFubmVsLnYyLkNoYW5uZWxTbG90UgRzbG90EiMK" +
                "DWNyZWF0aW9uX3RpbWUYByABKARSDGNyZWF0aW9uVGltZRInCg9leHBpcmF0" +
                "aW9uX3RpbWUYCCABKARSDmV4cGlyYXRpb25UaW1lIvoBChVTZW5kU3VnZ2Vz" +
                "dGlvbk9wdGlvbnMSSwoKY2hhbm5lbF9pZBgBIAEoCzIiLmJncy5wcm90b2Nv" +
                "bC5jaGFubmVsLnYyLkNoYW5uZWxJZEIIivkrBDICCAFSCWNoYW5uZWxJZBJH" +
                "Cgl0YXJnZXRfaWQYAiABKAsyKi5iZ3MucHJvdG9jb2wuYWNjb3VudC52MS5H" +
                "YW1lQWNjb3VudEhhbmRsZVIIdGFyZ2V0SWQSSwoLYXBwcm92YWxfaWQYAyAB" +
                "KAsyKi5iZ3MucHJvdG9jb2wuYWNjb3VudC52MS5HYW1lQWNjb3VudEhhbmRs" +
                "ZVIKYXBwcm92YWxJZCKIAgoKU3VnZ2VzdGlvbhJBCgpjaGFubmVsX2lkGAIg" +
                "ASgLMiIuYmdzLnByb3RvY29sLmNoYW5uZWwudjIuQ2hhbm5lbElkUgljaGFu" +
                "bmVsSWQSSAoJc3VnZ2VzdGVyGAMgASgLMiouYmdzLnByb3RvY29sLmNoYW5u" +
                "ZWwudjIuTWVtYmVyRGVzY3JpcHRpb25SCXN1Z2dlc3RlchJICglzdWdnZXN0" +
                "ZWUYBCABKAsyKi5iZ3MucHJvdG9jb2wuY2hhbm5lbC52Mi5NZW1iZXJEZXNj" +
                "cmlwdGlvblIJc3VnZ2VzdGVlEiMKDWNyZWF0aW9uX3RpbWUYByABKARSDGNy" +
                "ZWF0aW9uVGltZVAAUAFQAg==");
            pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate (pbd::FileDescriptor root) {
                descriptor = root;
                internal__static_bgs_protocol_channel_v2_ChannelId__Descriptor = Descriptor.MessageTypes[0];
                internal__static_bgs_protocol_channel_v2_ChannelId__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.ChannelId, global::bgs.protocol.channel.v2.ChannelId.Builder>(internal__static_bgs_protocol_channel_v2_ChannelId__Descriptor,
                        new string[] { "Host", "Id", });
                internal__static_bgs_protocol_channel_v2_UniqueChannelType__Descriptor = Descriptor.MessageTypes[1];
                internal__static_bgs_protocol_channel_v2_UniqueChannelType__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.UniqueChannelType, global::bgs.protocol.channel.v2.UniqueChannelType.Builder>(internal__static_bgs_protocol_channel_v2_UniqueChannelType__Descriptor,
                        new string[] { "Program", "ChannelType", });
                internal__static_bgs_protocol_channel_v2_RoleAssignment__Descriptor = Descriptor.MessageTypes[2];
                internal__static_bgs_protocol_channel_v2_RoleAssignment__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.RoleAssignment, global::bgs.protocol.channel.v2.RoleAssignment.Builder>(internal__static_bgs_protocol_channel_v2_RoleAssignment__Descriptor,
                        new string[] { "MemberId", "Role", });
                internal__static_bgs_protocol_channel_v2_AttributeAssignment__Descriptor = Descriptor.MessageTypes[3];
                internal__static_bgs_protocol_channel_v2_AttributeAssignment__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.AttributeAssignment, global::bgs.protocol.channel.v2.AttributeAssignment.Builder>(internal__static_bgs_protocol_channel_v2_AttributeAssignment__Descriptor,
                        new string[] { "MemberId", "Attribute", });
                internal__static_bgs_protocol_channel_v2_CreateMemberOptions__Descriptor = Descriptor.MessageTypes[4];
                internal__static_bgs_protocol_channel_v2_CreateMemberOptions__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.CreateMemberOptions, global::bgs.protocol.channel.v2.CreateMemberOptions.Builder>(internal__static_bgs_protocol_channel_v2_CreateMemberOptions__Descriptor,
                        new string[] { "MemberId", "Attribute", });
                internal__static_bgs_protocol_channel_v2_Member__Descriptor = Descriptor.MessageTypes[5];
                internal__static_bgs_protocol_channel_v2_Member__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.Member, global::bgs.protocol.channel.v2.Member.Builder>(internal__static_bgs_protocol_channel_v2_Member__Descriptor,
                        new string[] { "Id", "BattleTag", "VoiceId", "Role", "Attribute", });
                internal__static_bgs_protocol_channel_v2_CreateChannelOptions__Descriptor = Descriptor.MessageTypes[6];
                internal__static_bgs_protocol_channel_v2_CreateChannelOptions__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.CreateChannelOptions, global::bgs.protocol.channel.v2.CreateChannelOptions.Builder>(internal__static_bgs_protocol_channel_v2_CreateChannelOptions__Descriptor,
                        new string[] { "Type", "Name", "PrivacyLevel", "Attribute", "Member", });
                internal__static_bgs_protocol_channel_v2_PublicChannelType__Descriptor = Descriptor.MessageTypes[7];
                internal__static_bgs_protocol_channel_v2_PublicChannelType__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.PublicChannelType, global::bgs.protocol.channel.v2.PublicChannelType.Builder>(internal__static_bgs_protocol_channel_v2_PublicChannelType__Descriptor,
                        new string[] { "Type", "Name", "Identity", });
                internal__static_bgs_protocol_channel_v2_GetPublicChannelTypesOptions__Descriptor = Descriptor.MessageTypes[8];
                internal__static_bgs_protocol_channel_v2_GetPublicChannelTypesOptions__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.GetPublicChannelTypesOptions, global::bgs.protocol.channel.v2.GetPublicChannelTypesOptions.Builder>(internal__static_bgs_protocol_channel_v2_GetPublicChannelTypesOptions__Descriptor,
                        new string[] { "Type", });
                internal__static_bgs_protocol_channel_v2_FindChannelOptions__Descriptor = Descriptor.MessageTypes[9];
                internal__static_bgs_protocol_channel_v2_FindChannelOptions__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.FindChannelOptions, global::bgs.protocol.channel.v2.FindChannelOptions.Builder>(internal__static_bgs_protocol_channel_v2_FindChannelOptions__Descriptor,
                        new string[] { "Type", "Identity", "Locale", "SearchAttribute", "Reservation", });
                internal__static_bgs_protocol_channel_v2_SendMessageOptions__Descriptor = Descriptor.MessageTypes[10];
                internal__static_bgs_protocol_channel_v2_SendMessageOptions__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.SendMessageOptions, global::bgs.protocol.channel.v2.SendMessageOptions.Builder>(internal__static_bgs_protocol_channel_v2_SendMessageOptions__Descriptor,
                        new string[] { "Content", "Attribute", });
                internal__static_bgs_protocol_channel_v2_ChannelMessage__Descriptor = Descriptor.MessageTypes[11];
                internal__static_bgs_protocol_channel_v2_ChannelMessage__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.ChannelMessage, global::bgs.protocol.channel.v2.ChannelMessage.Builder>(internal__static_bgs_protocol_channel_v2_ChannelMessage__Descriptor,
                        new string[] { "AuthorId", "Content", "Attribute", "CreationTime", });
                internal__static_bgs_protocol_channel_v2_PublicChannelState__Descriptor = Descriptor.MessageTypes[12];
                internal__static_bgs_protocol_channel_v2_PublicChannelState__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.PublicChannelState, global::bgs.protocol.channel.v2.PublicChannelState.Builder>(internal__static_bgs_protocol_channel_v2_PublicChannelState__Descriptor,
                        new string[] { "Identity", "Locale", "SearchAttribute", "Reservation", });
                internal__static_bgs_protocol_channel_v2_Channel__Descriptor = Descriptor.MessageTypes[13];
                internal__static_bgs_protocol_channel_v2_Channel__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.Channel, global::bgs.protocol.channel.v2.Channel.Builder>(internal__static_bgs_protocol_channel_v2_Channel__Descriptor,
                        new string[] { "Id", "Type", "Name", "PrivacyLevel", "Attribute", "Member", "Invitation", "RoleSet", "PublicChannelState", });
                internal__static_bgs_protocol_channel_v2_ChannelDescription__Descriptor = Descriptor.MessageTypes[14];
                internal__static_bgs_protocol_channel_v2_ChannelDescription__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.ChannelDescription, global::bgs.protocol.channel.v2.ChannelDescription.Builder>(internal__static_bgs_protocol_channel_v2_ChannelDescription__Descriptor,
                        new string[] { "Id", "Type", "Name", "PrivacyLevel", "Attribute", "MemberCount", "PublicChannelState", });
                internal__static_bgs_protocol_channel_v2_ChannelMembershipState__Descriptor = Descriptor.MessageTypes[15];
                internal__static_bgs_protocol_channel_v2_ChannelMembershipState__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.ChannelMembershipState, global::bgs.protocol.channel.v2.ChannelMembershipState.Builder>(internal__static_bgs_protocol_channel_v2_ChannelMembershipState__Descriptor,
                        new string[] { "Description", "Invitation", });
                internal__static_bgs_protocol_channel_v2_ChannelSlot__Descriptor = Descriptor.MessageTypes[16];
                internal__static_bgs_protocol_channel_v2_ChannelSlot__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.ChannelSlot, global::bgs.protocol.channel.v2.ChannelSlot.Builder>(internal__static_bgs_protocol_channel_v2_ChannelSlot__Descriptor,
                        new string[] { "Reserved", "Rejoin", });
                internal__static_bgs_protocol_channel_v2_SendInvitationOptions__Descriptor = Descriptor.MessageTypes[17];
                internal__static_bgs_protocol_channel_v2_SendInvitationOptions__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.SendInvitationOptions, global::bgs.protocol.channel.v2.SendInvitationOptions.Builder>(internal__static_bgs_protocol_channel_v2_SendInvitationOptions__Descriptor,
                        new string[] { "ChannelId", "TargetId", "Slot", });
                internal__static_bgs_protocol_channel_v2_MemberDescription__Descriptor = Descriptor.MessageTypes[18];
                internal__static_bgs_protocol_channel_v2_MemberDescription__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.MemberDescription, global::bgs.protocol.channel.v2.MemberDescription.Builder>(internal__static_bgs_protocol_channel_v2_MemberDescription__Descriptor,
                        new string[] { "Id", "BattleTag", });
                internal__static_bgs_protocol_channel_v2_ChannelInvitation__Descriptor = Descriptor.MessageTypes[19];
                internal__static_bgs_protocol_channel_v2_ChannelInvitation__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.ChannelInvitation, global::bgs.protocol.channel.v2.ChannelInvitation.Builder>(internal__static_bgs_protocol_channel_v2_ChannelInvitation__Descriptor,
                        new string[] { "Id", "Inviter", "Invitee", "Channel", "Slot", "CreationTime", "ExpirationTime", });
                internal__static_bgs_protocol_channel_v2_SendSuggestionOptions__Descriptor = Descriptor.MessageTypes[20];
                internal__static_bgs_protocol_channel_v2_SendSuggestionOptions__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.SendSuggestionOptions, global::bgs.protocol.channel.v2.SendSuggestionOptions.Builder>(internal__static_bgs_protocol_channel_v2_SendSuggestionOptions__Descriptor,
                        new string[] { "ChannelId", "TargetId", "ApprovalId", });
                internal__static_bgs_protocol_channel_v2_Suggestion__Descriptor = Descriptor.MessageTypes[21];
                internal__static_bgs_protocol_channel_v2_Suggestion__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v2.Suggestion, global::bgs.protocol.channel.v2.Suggestion.Builder>(internal__static_bgs_protocol_channel_v2_Suggestion__Descriptor,
                        new string[] { "ChannelId", "Suggester", "Suggestee", "CreationTime", });
                pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
                RegisterAllExtensions(registry);
                global::bgs.protocol.v2.AttributeTypesV2.RegisterAllExtensions(registry);
                global::bgs.protocol.channel.v2.ChannelEnum.RegisterAllExtensions(registry);
                global::bgs.protocol.account.v1.AccountTypes.RegisterAllExtensions(registry);
                global::bgs.protocol.channel.Proto.ChannelRoleSet.RegisterAllExtensions(registry);
                global::bgs.protocol.RpcTypes.RegisterAllExtensions(registry);
                return registry;
            };
            pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
                new pbd::FileDescriptor[] {
          global::bgs.protocol.v2.AttributeTypesV2.Descriptor,
          global::bgs.protocol.channel.v2.ChannelEnum.Descriptor,
          global::bgs.protocol.account.v1.AccountTypes.Descriptor,
          global::bgs.protocol.channel.Proto.ChannelRoleSet.Descriptor,
          global::bgs.protocol.RpcTypes.Descriptor,
                }, assigner);
        }
        #endregion

    }
    #region Messages
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class ChannelId : pb::GeneratedMessage<ChannelId, ChannelId.Builder>
    {
        private ChannelId() { }
        private static readonly ChannelId defaultInstance = new ChannelId().MakeReadOnly();
        private static readonly string[] _channelIdFieldNames = new string[] { "host", "id" };
        private static readonly uint[] _channelIdFieldTags = new uint[] { 18, 29 };
        public static ChannelId DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ChannelId DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ChannelId ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_ChannelId__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ChannelId, ChannelId.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_ChannelId__FieldAccessorTable; }
        }

        public const int HostFieldNumber = 2;
        private bool hasHost;
        private global::bgs.protocol.ProcessId host_;
        public bool HasHost
        {
            get { return hasHost; }
        }
        public global::bgs.protocol.ProcessId Host
        {
            get { return host_ ?? global::bgs.protocol.ProcessId.DefaultInstance; }
        }

        public const int IdFieldNumber = 3;
        private bool hasId;
        private uint id_;
        public bool HasId
        {
            get { return hasId; }
        }
        public uint Id
        {
            get { return id_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasHost)
                {
                    if (!Host.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _channelIdFieldNames;
            if (hasHost)
            {
                output.WriteMessage(2, field_names[0], Host);
            }
            if (hasId)
            {
                output.WriteFixed32(3, field_names[1], Id);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasHost)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, Host);
                }
                if (hasId)
                {
                    size += pb::CodedOutputStream.ComputeFixed32Size(3, Id);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ChannelId ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChannelId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChannelId ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChannelId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChannelId ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChannelId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ChannelId ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ChannelId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ChannelId ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChannelId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ChannelId MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ChannelId prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<ChannelId, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ChannelId cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ChannelId result;

            private ChannelId PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ChannelId original = result;
                    result = new ChannelId();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ChannelId MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.ChannelId.Descriptor; }
            }

            public override ChannelId DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.ChannelId.DefaultInstance; }
            }

            public override ChannelId BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ChannelId)
                {
                    return MergeFrom((ChannelId)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ChannelId other)
            {
                if (other == global::bgs.protocol.channel.v2.ChannelId.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasHost)
                {
                    MergeHost(other.Host);
                }
                if (other.HasId)
                {
                    Id = other.Id;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_channelIdFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _channelIdFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 18:
                            {
                                global::bgs.protocol.ProcessId.Builder subBuilder = global::bgs.protocol.ProcessId.CreateBuilder();
                                if (result.hasHost)
                                {
                                    subBuilder.MergeFrom(Host);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Host = subBuilder.BuildPartial();
                                break;
                            }
                        case 29:
                            {
                                result.hasId = input.ReadFixed32(ref result.id_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasHost
            {
                get { return result.hasHost; }
            }
            public global::bgs.protocol.ProcessId Host
            {
                get { return result.Host; }
                set { SetHost(value); }
            }
            public Builder SetHost(global::bgs.protocol.ProcessId value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasHost = true;
                result.host_ = value;
                return this;
            }
            public Builder SetHost(global::bgs.protocol.ProcessId.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasHost = true;
                result.host_ = builderForValue.Build();
                return this;
            }
            public Builder MergeHost(global::bgs.protocol.ProcessId value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasHost &&
                    result.host_ != global::bgs.protocol.ProcessId.DefaultInstance)
                {
                    result.host_ = global::bgs.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.host_ = value;
                }
                result.hasHost = true;
                return this;
            }
            public Builder ClearHost()
            {
                PrepareBuilder();
                result.hasHost = false;
                result.host_ = null;
                return this;
            }

            public bool HasId
            {
                get { return result.hasId; }
            }
            public uint Id
            {
                get { return result.Id; }
                set { SetId(value); }
            }
            public Builder SetId(uint value)
            {
                PrepareBuilder();
                result.hasId = true;
                result.id_ = value;
                return this;
            }
            public Builder ClearId()
            {
                PrepareBuilder();
                result.hasId = false;
                result.id_ = 0;
                return this;
            }
        }
        static ChannelId()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class UniqueChannelType : pb::GeneratedMessage<UniqueChannelType, UniqueChannelType.Builder>
    {
        private UniqueChannelType() { }
        private static readonly UniqueChannelType defaultInstance = new UniqueChannelType().MakeReadOnly();
        private static readonly string[] _uniqueChannelTypeFieldNames = new string[] { "channel_type", "program" };
        private static readonly uint[] _uniqueChannelTypeFieldTags = new uint[] { 26, 21 };
        public static UniqueChannelType DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override UniqueChannelType DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override UniqueChannelType ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_UniqueChannelType__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<UniqueChannelType, UniqueChannelType.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_UniqueChannelType__FieldAccessorTable; }
        }

        public const int ProgramFieldNumber = 2;
        private bool hasProgram;
        private uint program_;
        public bool HasProgram
        {
            get { return hasProgram; }
        }
        public uint Program
        {
            get { return program_; }
        }

        public const int ChannelTypeFieldNumber = 3;
        private bool hasChannelType;
        private string channelType_ = "";
        public bool HasChannelType
        {
            get { return hasChannelType; }
        }
        public string ChannelType
        {
            get { return channelType_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _uniqueChannelTypeFieldNames;
            if (hasProgram)
            {
                output.WriteFixed32(2, field_names[1], Program);
            }
            if (hasChannelType)
            {
                output.WriteString(3, field_names[0], ChannelType);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasProgram)
                {
                    size += pb::CodedOutputStream.ComputeFixed32Size(2, Program);
                }
                if (hasChannelType)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, ChannelType);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static UniqueChannelType ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static UniqueChannelType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static UniqueChannelType ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static UniqueChannelType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static UniqueChannelType ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static UniqueChannelType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static UniqueChannelType ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static UniqueChannelType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static UniqueChannelType ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static UniqueChannelType ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private UniqueChannelType MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(UniqueChannelType prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<UniqueChannelType, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(UniqueChannelType cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private UniqueChannelType result;

            private UniqueChannelType PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    UniqueChannelType original = result;
                    result = new UniqueChannelType();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override UniqueChannelType MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.UniqueChannelType.Descriptor; }
            }

            public override UniqueChannelType DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.UniqueChannelType.DefaultInstance; }
            }

            public override UniqueChannelType BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is UniqueChannelType)
                {
                    return MergeFrom((UniqueChannelType)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(UniqueChannelType other)
            {
                if (other == global::bgs.protocol.channel.v2.UniqueChannelType.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasProgram)
                {
                    Program = other.Program;
                }
                if (other.HasChannelType)
                {
                    ChannelType = other.ChannelType;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_uniqueChannelTypeFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _uniqueChannelTypeFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 21:
                            {
                                result.hasProgram = input.ReadFixed32(ref result.program_);
                                break;
                            }
                        case 26:
                            {
                                result.hasChannelType = input.ReadString(ref result.channelType_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasProgram
            {
                get { return result.hasProgram; }
            }
            public uint Program
            {
                get { return result.Program; }
                set { SetProgram(value); }
            }
            public Builder SetProgram(uint value)
            {
                PrepareBuilder();
                result.hasProgram = true;
                result.program_ = value;
                return this;
            }
            public Builder ClearProgram()
            {
                PrepareBuilder();
                result.hasProgram = false;
                result.program_ = 0;
                return this;
            }

            public bool HasChannelType
            {
                get { return result.hasChannelType; }
            }
            public string ChannelType
            {
                get { return result.ChannelType; }
                set { SetChannelType(value); }
            }
            public Builder SetChannelType(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasChannelType = true;
                result.channelType_ = value;
                return this;
            }
            public Builder ClearChannelType()
            {
                PrepareBuilder();
                result.hasChannelType = false;
                result.channelType_ = "";
                return this;
            }
        }
        static UniqueChannelType()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class RoleAssignment : pb::GeneratedMessage<RoleAssignment, RoleAssignment.Builder>
    {
        private RoleAssignment() { }
        private static readonly RoleAssignment defaultInstance = new RoleAssignment().MakeReadOnly();
        private static readonly string[] _roleAssignmentFieldNames = new string[] { "member_id", "role" };
        private static readonly uint[] _roleAssignmentFieldTags = new uint[] { 10, 18 };
        public static RoleAssignment DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override RoleAssignment DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override RoleAssignment ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_RoleAssignment__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<RoleAssignment, RoleAssignment.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_RoleAssignment__FieldAccessorTable; }
        }

        public const int MemberIdFieldNumber = 1;
        private bool hasMemberId;
        private global::bgs.protocol.account.v1.GameAccountHandle memberId_;
        public bool HasMemberId
        {
            get { return hasMemberId; }
        }
        public global::bgs.protocol.account.v1.GameAccountHandle MemberId
        {
            get { return memberId_ ?? global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance; }
        }

        public const int RoleFieldNumber = 2;
        private int roleMemoizedSerializedSize;
        private pbc::PopsicleList<uint> role_ = new pbc::PopsicleList<uint>();
        public scg::IList<uint> RoleList
        {
            get { return pbc::Lists.AsReadOnly(role_); }
        }
        public int RoleCount
        {
            get { return role_.Count; }
        }
        public uint GetRole(int index)
        {
            return role_[index];
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasMemberId)
                {
                    if (!MemberId.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _roleAssignmentFieldNames;
            if (hasMemberId)
            {
                output.WriteMessage(1, field_names[0], MemberId);
            }
            if (role_.Count > 0)
            {
                output.WritePackedUInt32Array(2, field_names[1], roleMemoizedSerializedSize, role_);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasMemberId)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, MemberId);
                }
                {
                    int dataSize = 0;
                    foreach (uint element in RoleList)
                    {
                        dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
                    }
                    size += dataSize;
                    if (role_.Count != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
                    }
                    roleMemoizedSerializedSize = dataSize;
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static RoleAssignment ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RoleAssignment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RoleAssignment ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RoleAssignment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RoleAssignment ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RoleAssignment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RoleAssignment ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RoleAssignment ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RoleAssignment ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RoleAssignment ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RoleAssignment MakeReadOnly()
        {
            role_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RoleAssignment prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<RoleAssignment, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(RoleAssignment cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private RoleAssignment result;

            private RoleAssignment PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    RoleAssignment original = result;
                    result = new RoleAssignment();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override RoleAssignment MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.RoleAssignment.Descriptor; }
            }

            public override RoleAssignment DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.RoleAssignment.DefaultInstance; }
            }

            public override RoleAssignment BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is RoleAssignment)
                {
                    return MergeFrom((RoleAssignment)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(RoleAssignment other)
            {
                if (other == global::bgs.protocol.channel.v2.RoleAssignment.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasMemberId)
                {
                    MergeMemberId(other.MemberId);
                }
                if (other.role_.Count != 0)
                {
                    result.role_.Add(other.role_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_roleAssignmentFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _roleAssignmentFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::bgs.protocol.account.v1.GameAccountHandle.Builder subBuilder = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder();
                                if (result.hasMemberId)
                                {
                                    subBuilder.MergeFrom(MemberId);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                MemberId = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                        case 16:
                            {
                                input.ReadUInt32Array(tag, field_name, result.role_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasMemberId
            {
                get { return result.hasMemberId; }
            }
            public global::bgs.protocol.account.v1.GameAccountHandle MemberId
            {
                get { return result.MemberId; }
                set { SetMemberId(value); }
            }
            public Builder SetMemberId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMemberId = true;
                result.memberId_ = value;
                return this;
            }
            public Builder SetMemberId(global::bgs.protocol.account.v1.GameAccountHandle.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasMemberId = true;
                result.memberId_ = builderForValue.Build();
                return this;
            }
            public Builder MergeMemberId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasMemberId &&
                    result.memberId_ != global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance)
                {
                    result.memberId_ = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder(result.memberId_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.memberId_ = value;
                }
                result.hasMemberId = true;
                return this;
            }
            public Builder ClearMemberId()
            {
                PrepareBuilder();
                result.hasMemberId = false;
                result.memberId_ = null;
                return this;
            }

            public pbc::IPopsicleList<uint> RoleList
            {
                get { return PrepareBuilder().role_; }
            }
            public int RoleCount
            {
                get { return result.RoleCount; }
            }
            public uint GetRole(int index)
            {
                return result.GetRole(index);
            }
            public Builder SetRole(int index, uint value)
            {
                PrepareBuilder();
                result.role_[index] = value;
                return this;
            }
            public Builder AddRole(uint value)
            {
                PrepareBuilder();
                result.role_.Add(value);
                return this;
            }
            public Builder AddRangeRole(scg::IEnumerable<uint> values)
            {
                PrepareBuilder();
                result.role_.Add(values);
                return this;
            }
            public Builder ClearRole()
            {
                PrepareBuilder();
                result.role_.Clear();
                return this;
            }
        }
        static RoleAssignment()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class AttributeAssignment : pb::GeneratedMessage<AttributeAssignment, AttributeAssignment.Builder>
    {
        private AttributeAssignment() { }
        private static readonly AttributeAssignment defaultInstance = new AttributeAssignment().MakeReadOnly();
        private static readonly string[] _attributeAssignmentFieldNames = new string[] { "attribute", "member_id" };
        private static readonly uint[] _attributeAssignmentFieldTags = new uint[] { 18, 10 };
        public static AttributeAssignment DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override AttributeAssignment DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override AttributeAssignment ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_AttributeAssignment__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<AttributeAssignment, AttributeAssignment.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_AttributeAssignment__FieldAccessorTable; }
        }

        public const int MemberIdFieldNumber = 1;
        private bool hasMemberId;
        private global::bgs.protocol.account.v1.GameAccountHandle memberId_;
        public bool HasMemberId
        {
            get { return hasMemberId; }
        }
        public global::bgs.protocol.account.v1.GameAccountHandle MemberId
        {
            get { return memberId_ ?? global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance; }
        }

        public const int AttributeFieldNumber = 2;
        private pbc::PopsicleList<global::bgs.protocol.v2.Attribute> attribute_ = new pbc::PopsicleList<global::bgs.protocol.v2.Attribute>();
        public scg::IList<global::bgs.protocol.v2.Attribute> AttributeList
        {
            get { return attribute_; }
        }
        public int AttributeCount
        {
            get { return attribute_.Count; }
        }
        public global::bgs.protocol.v2.Attribute GetAttribute(int index)
        {
            return attribute_[index];
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasMemberId)
                {
                    if (!MemberId.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _attributeAssignmentFieldNames;
            if (hasMemberId)
            {
                output.WriteMessage(1, field_names[1], MemberId);
            }
            if (attribute_.Count > 0)
            {
                output.WriteMessageArray(2, field_names[0], attribute_);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasMemberId)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, MemberId);
                }
                foreach (global::bgs.protocol.v2.Attribute element in AttributeList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static AttributeAssignment ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AttributeAssignment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AttributeAssignment ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AttributeAssignment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AttributeAssignment ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AttributeAssignment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static AttributeAssignment ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static AttributeAssignment ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static AttributeAssignment ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AttributeAssignment ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private AttributeAssignment MakeReadOnly()
        {
            attribute_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(AttributeAssignment prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<AttributeAssignment, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(AttributeAssignment cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private AttributeAssignment result;

            private AttributeAssignment PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    AttributeAssignment original = result;
                    result = new AttributeAssignment();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override AttributeAssignment MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.AttributeAssignment.Descriptor; }
            }

            public override AttributeAssignment DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.AttributeAssignment.DefaultInstance; }
            }

            public override AttributeAssignment BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is AttributeAssignment)
                {
                    return MergeFrom((AttributeAssignment)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(AttributeAssignment other)
            {
                if (other == global::bgs.protocol.channel.v2.AttributeAssignment.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasMemberId)
                {
                    MergeMemberId(other.MemberId);
                }
                if (other.attribute_.Count != 0)
                {
                    result.attribute_.Add(other.attribute_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_attributeAssignmentFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _attributeAssignmentFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::bgs.protocol.account.v1.GameAccountHandle.Builder subBuilder = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder();
                                if (result.hasMemberId)
                                {
                                    subBuilder.MergeFrom(MemberId);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                MemberId = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                input.ReadMessageArray(tag, field_name, result.attribute_, global::bgs.protocol.v2.Attribute.DefaultInstance, extensionRegistry);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasMemberId
            {
                get { return result.hasMemberId; }
            }
            public global::bgs.protocol.account.v1.GameAccountHandle MemberId
            {
                get { return result.MemberId; }
                set { SetMemberId(value); }
            }
            public Builder SetMemberId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMemberId = true;
                result.memberId_ = value;
                return this;
            }
            public Builder SetMemberId(global::bgs.protocol.account.v1.GameAccountHandle.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasMemberId = true;
                result.memberId_ = builderForValue.Build();
                return this;
            }
            public Builder MergeMemberId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasMemberId &&
                    result.memberId_ != global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance)
                {
                    result.memberId_ = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder(result.memberId_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.memberId_ = value;
                }
                result.hasMemberId = true;
                return this;
            }
            public Builder ClearMemberId()
            {
                PrepareBuilder();
                result.hasMemberId = false;
                result.memberId_ = null;
                return this;
            }

            public pbc::IPopsicleList<global::bgs.protocol.v2.Attribute> AttributeList
            {
                get { return PrepareBuilder().attribute_; }
            }
            public int AttributeCount
            {
                get { return result.AttributeCount; }
            }
            public global::bgs.protocol.v2.Attribute GetAttribute(int index)
            {
                return result.GetAttribute(index);
            }
            public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.attribute_[index] = value;
                return this;
            }
            public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.attribute_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddAttribute(global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.attribute_.Add(value);
                return this;
            }
            public Builder AddAttribute(global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.attribute_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeAttribute(scg::IEnumerable<global::bgs.protocol.v2.Attribute> values)
            {
                PrepareBuilder();
                result.attribute_.Add(values);
                return this;
            }
            public Builder ClearAttribute()
            {
                PrepareBuilder();
                result.attribute_.Clear();
                return this;
            }
        }
        static AttributeAssignment()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class CreateMemberOptions : pb::GeneratedMessage<CreateMemberOptions, CreateMemberOptions.Builder>
    {
        private CreateMemberOptions() { }
        private static readonly CreateMemberOptions defaultInstance = new CreateMemberOptions().MakeReadOnly();
        private static readonly string[] _createMemberOptionsFieldNames = new string[] { "attribute", "member_id" };
        private static readonly uint[] _createMemberOptionsFieldTags = new uint[] { 26, 10 };
        public static CreateMemberOptions DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override CreateMemberOptions DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override CreateMemberOptions ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_CreateMemberOptions__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<CreateMemberOptions, CreateMemberOptions.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_CreateMemberOptions__FieldAccessorTable; }
        }

        public const int MemberIdFieldNumber = 1;
        private bool hasMemberId;
        private global::bgs.protocol.account.v1.GameAccountHandle memberId_;
        public bool HasMemberId
        {
            get { return hasMemberId; }
        }
        public global::bgs.protocol.account.v1.GameAccountHandle MemberId
        {
            get { return memberId_ ?? global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance; }
        }

        public const int AttributeFieldNumber = 3;
        private pbc::PopsicleList<global::bgs.protocol.v2.Attribute> attribute_ = new pbc::PopsicleList<global::bgs.protocol.v2.Attribute>();
        public scg::IList<global::bgs.protocol.v2.Attribute> AttributeList
        {
            get { return attribute_; }
        }
        public int AttributeCount
        {
            get { return attribute_.Count; }
        }
        public global::bgs.protocol.v2.Attribute GetAttribute(int index)
        {
            return attribute_[index];
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasMemberId)
                {
                    if (!MemberId.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _createMemberOptionsFieldNames;
            if (hasMemberId)
            {
                output.WriteMessage(1, field_names[1], MemberId);
            }
            if (attribute_.Count > 0)
            {
                output.WriteMessageArray(3, field_names[0], attribute_);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasMemberId)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, MemberId);
                }
                foreach (global::bgs.protocol.v2.Attribute element in AttributeList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static CreateMemberOptions ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static CreateMemberOptions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static CreateMemberOptions ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static CreateMemberOptions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static CreateMemberOptions ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static CreateMemberOptions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static CreateMemberOptions ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static CreateMemberOptions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static CreateMemberOptions ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static CreateMemberOptions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private CreateMemberOptions MakeReadOnly()
        {
            attribute_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(CreateMemberOptions prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<CreateMemberOptions, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(CreateMemberOptions cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private CreateMemberOptions result;

            private CreateMemberOptions PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    CreateMemberOptions original = result;
                    result = new CreateMemberOptions();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override CreateMemberOptions MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.CreateMemberOptions.Descriptor; }
            }

            public override CreateMemberOptions DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.CreateMemberOptions.DefaultInstance; }
            }

            public override CreateMemberOptions BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is CreateMemberOptions)
                {
                    return MergeFrom((CreateMemberOptions)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(CreateMemberOptions other)
            {
                if (other == global::bgs.protocol.channel.v2.CreateMemberOptions.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasMemberId)
                {
                    MergeMemberId(other.MemberId);
                }
                if (other.attribute_.Count != 0)
                {
                    result.attribute_.Add(other.attribute_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_createMemberOptionsFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _createMemberOptionsFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::bgs.protocol.account.v1.GameAccountHandle.Builder subBuilder = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder();
                                if (result.hasMemberId)
                                {
                                    subBuilder.MergeFrom(MemberId);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                MemberId = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                input.ReadMessageArray(tag, field_name, result.attribute_, global::bgs.protocol.v2.Attribute.DefaultInstance, extensionRegistry);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasMemberId
            {
                get { return result.hasMemberId; }
            }
            public global::bgs.protocol.account.v1.GameAccountHandle MemberId
            {
                get { return result.MemberId; }
                set { SetMemberId(value); }
            }
            public Builder SetMemberId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMemberId = true;
                result.memberId_ = value;
                return this;
            }
            public Builder SetMemberId(global::bgs.protocol.account.v1.GameAccountHandle.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasMemberId = true;
                result.memberId_ = builderForValue.Build();
                return this;
            }
            public Builder MergeMemberId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasMemberId &&
                    result.memberId_ != global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance)
                {
                    result.memberId_ = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder(result.memberId_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.memberId_ = value;
                }
                result.hasMemberId = true;
                return this;
            }
            public Builder ClearMemberId()
            {
                PrepareBuilder();
                result.hasMemberId = false;
                result.memberId_ = null;
                return this;
            }

            public pbc::IPopsicleList<global::bgs.protocol.v2.Attribute> AttributeList
            {
                get { return PrepareBuilder().attribute_; }
            }
            public int AttributeCount
            {
                get { return result.AttributeCount; }
            }
            public global::bgs.protocol.v2.Attribute GetAttribute(int index)
            {
                return result.GetAttribute(index);
            }
            public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.attribute_[index] = value;
                return this;
            }
            public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.attribute_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddAttribute(global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.attribute_.Add(value);
                return this;
            }
            public Builder AddAttribute(global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.attribute_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeAttribute(scg::IEnumerable<global::bgs.protocol.v2.Attribute> values)
            {
                PrepareBuilder();
                result.attribute_.Add(values);
                return this;
            }
            public Builder ClearAttribute()
            {
                PrepareBuilder();
                result.attribute_.Clear();
                return this;
            }
        }
        static CreateMemberOptions()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Member : pb::GeneratedMessage<Member, Member.Builder>
    {
        private Member() { }
        private static readonly Member defaultInstance = new Member().MakeReadOnly();
        private static readonly string[] _memberFieldNames = new string[] { "attribute", "battle_tag", "id", "role", "voice_id" };
        private static readonly uint[] _memberFieldTags = new uint[] { 42, 18, 10, 34, 26 };
        public static Member DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override Member DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override Member ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_Member__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<Member, Member.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_Member__FieldAccessorTable; }
        }

        public const int IdFieldNumber = 1;
        private bool hasId;
        private global::bgs.protocol.account.v1.GameAccountHandle id_;
        public bool HasId
        {
            get { return hasId; }
        }
        public global::bgs.protocol.account.v1.GameAccountHandle Id
        {
            get { return id_ ?? global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance; }
        }

        public const int BattleTagFieldNumber = 2;
        private bool hasBattleTag;
        private string battleTag_ = "";
        public bool HasBattleTag
        {
            get { return hasBattleTag; }
        }
        public string BattleTag
        {
            get { return battleTag_; }
        }

        public const int VoiceIdFieldNumber = 3;
        private bool hasVoiceId;
        private string voiceId_ = "";
        public bool HasVoiceId
        {
            get { return hasVoiceId; }
        }
        public string VoiceId
        {
            get { return voiceId_; }
        }

        public const int RoleFieldNumber = 4;
        private int roleMemoizedSerializedSize;
        private pbc::PopsicleList<uint> role_ = new pbc::PopsicleList<uint>();
        public scg::IList<uint> RoleList
        {
            get { return pbc::Lists.AsReadOnly(role_); }
        }
        public int RoleCount
        {
            get { return role_.Count; }
        }
        public uint GetRole(int index)
        {
            return role_[index];
        }

        public const int AttributeFieldNumber = 5;
        private pbc::PopsicleList<global::bgs.protocol.v2.Attribute> attribute_ = new pbc::PopsicleList<global::bgs.protocol.v2.Attribute>();
        public scg::IList<global::bgs.protocol.v2.Attribute> AttributeList
        {
            get { return attribute_; }
        }
        public int AttributeCount
        {
            get { return attribute_.Count; }
        }
        public global::bgs.protocol.v2.Attribute GetAttribute(int index)
        {
            return attribute_[index];
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasId)
                {
                    if (!Id.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _memberFieldNames;
            if (hasId)
            {
                output.WriteMessage(1, field_names[2], Id);
            }
            if (hasBattleTag)
            {
                output.WriteString(2, field_names[1], BattleTag);
            }
            if (hasVoiceId)
            {
                output.WriteString(3, field_names[4], VoiceId);
            }
            if (role_.Count > 0)
            {
                output.WritePackedUInt32Array(4, field_names[3], roleMemoizedSerializedSize, role_);
            }
            if (attribute_.Count > 0)
            {
                output.WriteMessageArray(5, field_names[0], attribute_);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasId)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, Id);
                }
                if (hasBattleTag)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, BattleTag);
                }
                if (hasVoiceId)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, VoiceId);
                }
                {
                    int dataSize = 0;
                    foreach (uint element in RoleList)
                    {
                        dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
                    }
                    size += dataSize;
                    if (role_.Count != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
                    }
                    roleMemoizedSerializedSize = dataSize;
                }
                foreach (global::bgs.protocol.v2.Attribute element in AttributeList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(5, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static Member ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Member ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Member ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Member ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Member ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Member ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Member ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Member ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Member ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Member ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Member MakeReadOnly()
        {
            role_.MakeReadOnly();
            attribute_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Member prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Member, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(Member cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private Member result;

            private Member PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    Member original = result;
                    result = new Member();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override Member MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.Member.Descriptor; }
            }

            public override Member DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.Member.DefaultInstance; }
            }

            public override Member BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is Member)
                {
                    return MergeFrom((Member)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(Member other)
            {
                if (other == global::bgs.protocol.channel.v2.Member.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasId)
                {
                    MergeId(other.Id);
                }
                if (other.HasBattleTag)
                {
                    BattleTag = other.BattleTag;
                }
                if (other.HasVoiceId)
                {
                    VoiceId = other.VoiceId;
                }
                if (other.role_.Count != 0)
                {
                    result.role_.Add(other.role_);
                }
                if (other.attribute_.Count != 0)
                {
                    result.attribute_.Add(other.attribute_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_memberFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _memberFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::bgs.protocol.account.v1.GameAccountHandle.Builder subBuilder = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder();
                                if (result.hasId)
                                {
                                    subBuilder.MergeFrom(Id);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Id = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                result.hasBattleTag = input.ReadString(ref result.battleTag_);
                                break;
                            }
                        case 26:
                            {
                                result.hasVoiceId = input.ReadString(ref result.voiceId_);
                                break;
                            }
                        case 34:
                        case 32:
                            {
                                input.ReadUInt32Array(tag, field_name, result.role_);
                                break;
                            }
                        case 42:
                            {
                                input.ReadMessageArray(tag, field_name, result.attribute_, global::bgs.protocol.v2.Attribute.DefaultInstance, extensionRegistry);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasId
            {
                get { return result.hasId; }
            }
            public global::bgs.protocol.account.v1.GameAccountHandle Id
            {
                get { return result.Id; }
                set { SetId(value); }
            }
            public Builder SetId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasId = true;
                result.id_ = value;
                return this;
            }
            public Builder SetId(global::bgs.protocol.account.v1.GameAccountHandle.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasId = true;
                result.id_ = builderForValue.Build();
                return this;
            }
            public Builder MergeId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasId &&
                    result.id_ != global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance)
                {
                    result.id_ = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder(result.id_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.id_ = value;
                }
                result.hasId = true;
                return this;
            }
            public Builder ClearId()
            {
                PrepareBuilder();
                result.hasId = false;
                result.id_ = null;
                return this;
            }

            public bool HasBattleTag
            {
                get { return result.hasBattleTag; }
            }
            public string BattleTag
            {
                get { return result.BattleTag; }
                set { SetBattleTag(value); }
            }
            public Builder SetBattleTag(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBattleTag = true;
                result.battleTag_ = value;
                return this;
            }
            public Builder ClearBattleTag()
            {
                PrepareBuilder();
                result.hasBattleTag = false;
                result.battleTag_ = "";
                return this;
            }

            public bool HasVoiceId
            {
                get { return result.hasVoiceId; }
            }
            public string VoiceId
            {
                get { return result.VoiceId; }
                set { SetVoiceId(value); }
            }
            public Builder SetVoiceId(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasVoiceId = true;
                result.voiceId_ = value;
                return this;
            }
            public Builder ClearVoiceId()
            {
                PrepareBuilder();
                result.hasVoiceId = false;
                result.voiceId_ = "";
                return this;
            }

            public pbc::IPopsicleList<uint> RoleList
            {
                get { return PrepareBuilder().role_; }
            }
            public int RoleCount
            {
                get { return result.RoleCount; }
            }
            public uint GetRole(int index)
            {
                return result.GetRole(index);
            }
            public Builder SetRole(int index, uint value)
            {
                PrepareBuilder();
                result.role_[index] = value;
                return this;
            }
            public Builder AddRole(uint value)
            {
                PrepareBuilder();
                result.role_.Add(value);
                return this;
            }
            public Builder AddRangeRole(scg::IEnumerable<uint> values)
            {
                PrepareBuilder();
                result.role_.Add(values);
                return this;
            }
            public Builder ClearRole()
            {
                PrepareBuilder();
                result.role_.Clear();
                return this;
            }

            public pbc::IPopsicleList<global::bgs.protocol.v2.Attribute> AttributeList
            {
                get { return PrepareBuilder().attribute_; }
            }
            public int AttributeCount
            {
                get { return result.AttributeCount; }
            }
            public global::bgs.protocol.v2.Attribute GetAttribute(int index)
            {
                return result.GetAttribute(index);
            }
            public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.attribute_[index] = value;
                return this;
            }
            public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.attribute_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddAttribute(global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.attribute_.Add(value);
                return this;
            }
            public Builder AddAttribute(global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.attribute_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeAttribute(scg::IEnumerable<global::bgs.protocol.v2.Attribute> values)
            {
                PrepareBuilder();
                result.attribute_.Add(values);
                return this;
            }
            public Builder ClearAttribute()
            {
                PrepareBuilder();
                result.attribute_.Clear();
                return this;
            }
        }
        static Member()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class CreateChannelOptions : pb::GeneratedMessage<CreateChannelOptions, CreateChannelOptions.Builder>
    {
        private CreateChannelOptions() { }
        private static readonly CreateChannelOptions defaultInstance = new CreateChannelOptions().MakeReadOnly();
        private static readonly string[] _createChannelOptionsFieldNames = new string[] { "attribute", "member", "name", "privacy_level", "type" };
        private static readonly uint[] _createChannelOptionsFieldTags = new uint[] { 34, 42, 18, 24, 10 };
        public static CreateChannelOptions DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override CreateChannelOptions DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override CreateChannelOptions ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_CreateChannelOptions__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<CreateChannelOptions, CreateChannelOptions.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_CreateChannelOptions__FieldAccessorTable; }
        }

        public const int TypeFieldNumber = 1;
        private bool hasType;
        private global::bgs.protocol.channel.v2.UniqueChannelType type_;
        public bool HasType
        {
            get { return hasType; }
        }
        public global::bgs.protocol.channel.v2.UniqueChannelType Type
        {
            get { return type_ ?? global::bgs.protocol.channel.v2.UniqueChannelType.DefaultInstance; }
        }

        public const int NameFieldNumber = 2;
        private bool hasName;
        private string name_ = "";
        public bool HasName
        {
            get { return hasName; }
        }
        public string Name
        {
            get { return name_; }
        }

        public const int PrivacyLevelFieldNumber = 3;
        private bool hasPrivacyLevel;
        private global::bgs.protocol.channel.v2.PrivacyLevel privacyLevel_ = global::bgs.protocol.channel.v2.PrivacyLevel.PRIVACY_LEVEL_OPEN;
        public bool HasPrivacyLevel
        {
            get { return hasPrivacyLevel; }
        }
        public global::bgs.protocol.channel.v2.PrivacyLevel PrivacyLevel
        {
            get { return privacyLevel_; }
        }

        public const int AttributeFieldNumber = 4;
        private pbc::PopsicleList<global::bgs.protocol.v2.Attribute> attribute_ = new pbc::PopsicleList<global::bgs.protocol.v2.Attribute>();
        public scg::IList<global::bgs.protocol.v2.Attribute> AttributeList
        {
            get { return attribute_; }
        }
        public int AttributeCount
        {
            get { return attribute_.Count; }
        }
        public global::bgs.protocol.v2.Attribute GetAttribute(int index)
        {
            return attribute_[index];
        }

        public const int MemberFieldNumber = 5;
        private bool hasMember;
        private global::bgs.protocol.channel.v2.CreateMemberOptions member_;
        public bool HasMember
        {
            get { return hasMember; }
        }
        public global::bgs.protocol.channel.v2.CreateMemberOptions Member
        {
            get { return member_ ?? global::bgs.protocol.channel.v2.CreateMemberOptions.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasMember)
                {
                    if (!Member.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _createChannelOptionsFieldNames;
            if (hasType)
            {
                output.WriteMessage(1, field_names[4], Type);
            }
            if (hasName)
            {
                output.WriteString(2, field_names[2], Name);
            }
            if (hasPrivacyLevel)
            {
                output.WriteEnum(3, field_names[3], (int)PrivacyLevel, PrivacyLevel);
            }
            if (attribute_.Count > 0)
            {
                output.WriteMessageArray(4, field_names[0], attribute_);
            }
            if (hasMember)
            {
                output.WriteMessage(5, field_names[1], Member);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasType)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, Type);
                }
                if (hasName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Name);
                }
                if (hasPrivacyLevel)
                {
                    size += pb::CodedOutputStream.ComputeEnumSize(3, (int)PrivacyLevel);
                }
                foreach (global::bgs.protocol.v2.Attribute element in AttributeList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(4, element);
                }
                if (hasMember)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(5, Member);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static CreateChannelOptions ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static CreateChannelOptions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static CreateChannelOptions ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static CreateChannelOptions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static CreateChannelOptions ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static CreateChannelOptions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static CreateChannelOptions ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static CreateChannelOptions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static CreateChannelOptions ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static CreateChannelOptions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private CreateChannelOptions MakeReadOnly()
        {
            attribute_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(CreateChannelOptions prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<CreateChannelOptions, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(CreateChannelOptions cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private CreateChannelOptions result;

            private CreateChannelOptions PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    CreateChannelOptions original = result;
                    result = new CreateChannelOptions();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override CreateChannelOptions MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.CreateChannelOptions.Descriptor; }
            }

            public override CreateChannelOptions DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.CreateChannelOptions.DefaultInstance; }
            }

            public override CreateChannelOptions BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is CreateChannelOptions)
                {
                    return MergeFrom((CreateChannelOptions)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(CreateChannelOptions other)
            {
                if (other == global::bgs.protocol.channel.v2.CreateChannelOptions.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasType)
                {
                    MergeType(other.Type);
                }
                if (other.HasName)
                {
                    Name = other.Name;
                }
                if (other.HasPrivacyLevel)
                {
                    PrivacyLevel = other.PrivacyLevel;
                }
                if (other.attribute_.Count != 0)
                {
                    result.attribute_.Add(other.attribute_);
                }
                if (other.HasMember)
                {
                    MergeMember(other.Member);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_createChannelOptionsFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _createChannelOptionsFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::bgs.protocol.channel.v2.UniqueChannelType.Builder subBuilder = global::bgs.protocol.channel.v2.UniqueChannelType.CreateBuilder();
                                if (result.hasType)
                                {
                                    subBuilder.MergeFrom(Type);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Type = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                result.hasName = input.ReadString(ref result.name_);
                                break;
                            }
                        case 24:
                            {
                                object unknown;
                                if (input.ReadEnum(ref result.privacyLevel_, out unknown))
                                {
                                    result.hasPrivacyLevel = true;
                                }
                                else if (unknown is int)
                                {
                                    if (unknownFields == null)
                                    {
                                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                    }
                                    unknownFields.MergeVarintField(3, (ulong)(int)unknown);
                                }
                                break;
                            }
                        case 34:
                            {
                                input.ReadMessageArray(tag, field_name, result.attribute_, global::bgs.protocol.v2.Attribute.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 42:
                            {
                                global::bgs.protocol.channel.v2.CreateMemberOptions.Builder subBuilder = global::bgs.protocol.channel.v2.CreateMemberOptions.CreateBuilder();
                                if (result.hasMember)
                                {
                                    subBuilder.MergeFrom(Member);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Member = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasType
            {
                get { return result.hasType; }
            }
            public global::bgs.protocol.channel.v2.UniqueChannelType Type
            {
                get { return result.Type; }
                set { SetType(value); }
            }
            public Builder SetType(global::bgs.protocol.channel.v2.UniqueChannelType value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
            }
            public Builder SetType(global::bgs.protocol.channel.v2.UniqueChannelType.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasType = true;
                result.type_ = builderForValue.Build();
                return this;
            }
            public Builder MergeType(global::bgs.protocol.channel.v2.UniqueChannelType value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasType &&
                    result.type_ != global::bgs.protocol.channel.v2.UniqueChannelType.DefaultInstance)
                {
                    result.type_ = global::bgs.protocol.channel.v2.UniqueChannelType.CreateBuilder(result.type_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.type_ = value;
                }
                result.hasType = true;
                return this;
            }
            public Builder ClearType()
            {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = null;
                return this;
            }

            public bool HasName
            {
                get { return result.hasName; }
            }
            public string Name
            {
                get { return result.Name; }
                set { SetName(value); }
            }
            public Builder SetName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasName = true;
                result.name_ = value;
                return this;
            }
            public Builder ClearName()
            {
                PrepareBuilder();
                result.hasName = false;
                result.name_ = "";
                return this;
            }

            public bool HasPrivacyLevel
            {
                get { return result.hasPrivacyLevel; }
            }
            public global::bgs.protocol.channel.v2.PrivacyLevel PrivacyLevel
            {
                get { return result.PrivacyLevel; }
                set { SetPrivacyLevel(value); }
            }
            public Builder SetPrivacyLevel(global::bgs.protocol.channel.v2.PrivacyLevel value)
            {
                PrepareBuilder();
                result.hasPrivacyLevel = true;
                result.privacyLevel_ = value;
                return this;
            }
            public Builder ClearPrivacyLevel()
            {
                PrepareBuilder();
                result.hasPrivacyLevel = false;
                result.privacyLevel_ = global::bgs.protocol.channel.v2.PrivacyLevel.PRIVACY_LEVEL_OPEN;
                return this;
            }

            public pbc::IPopsicleList<global::bgs.protocol.v2.Attribute> AttributeList
            {
                get { return PrepareBuilder().attribute_; }
            }
            public int AttributeCount
            {
                get { return result.AttributeCount; }
            }
            public global::bgs.protocol.v2.Attribute GetAttribute(int index)
            {
                return result.GetAttribute(index);
            }
            public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.attribute_[index] = value;
                return this;
            }
            public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.attribute_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddAttribute(global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.attribute_.Add(value);
                return this;
            }
            public Builder AddAttribute(global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.attribute_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeAttribute(scg::IEnumerable<global::bgs.protocol.v2.Attribute> values)
            {
                PrepareBuilder();
                result.attribute_.Add(values);
                return this;
            }
            public Builder ClearAttribute()
            {
                PrepareBuilder();
                result.attribute_.Clear();
                return this;
            }

            public bool HasMember
            {
                get { return result.hasMember; }
            }
            public global::bgs.protocol.channel.v2.CreateMemberOptions Member
            {
                get { return result.Member; }
                set { SetMember(value); }
            }
            public Builder SetMember(global::bgs.protocol.channel.v2.CreateMemberOptions value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMember = true;
                result.member_ = value;
                return this;
            }
            public Builder SetMember(global::bgs.protocol.channel.v2.CreateMemberOptions.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasMember = true;
                result.member_ = builderForValue.Build();
                return this;
            }
            public Builder MergeMember(global::bgs.protocol.channel.v2.CreateMemberOptions value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasMember &&
                    result.member_ != global::bgs.protocol.channel.v2.CreateMemberOptions.DefaultInstance)
                {
                    result.member_ = global::bgs.protocol.channel.v2.CreateMemberOptions.CreateBuilder(result.member_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.member_ = value;
                }
                result.hasMember = true;
                return this;
            }
            public Builder ClearMember()
            {
                PrepareBuilder();
                result.hasMember = false;
                result.member_ = null;
                return this;
            }
        }
        static CreateChannelOptions()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class PublicChannelType : pb::GeneratedMessage<PublicChannelType, PublicChannelType.Builder>
    {
        private PublicChannelType() { }
        private static readonly PublicChannelType defaultInstance = new PublicChannelType().MakeReadOnly();
        private static readonly string[] _publicChannelTypeFieldNames = new string[] { "identity", "name", "type" };
        private static readonly uint[] _publicChannelTypeFieldTags = new uint[] { 26, 18, 10 };
        public static PublicChannelType DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override PublicChannelType DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override PublicChannelType ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_PublicChannelType__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<PublicChannelType, PublicChannelType.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_PublicChannelType__FieldAccessorTable; }
        }

        public const int TypeFieldNumber = 1;
        private bool hasType;
        private global::bgs.protocol.channel.v2.UniqueChannelType type_;
        public bool HasType
        {
            get { return hasType; }
        }
        public global::bgs.protocol.channel.v2.UniqueChannelType Type
        {
            get { return type_ ?? global::bgs.protocol.channel.v2.UniqueChannelType.DefaultInstance; }
        }

        public const int NameFieldNumber = 2;
        private bool hasName;
        private string name_ = "";
        public bool HasName
        {
            get { return hasName; }
        }
        public string Name
        {
            get { return name_; }
        }

        public const int IdentityFieldNumber = 3;
        private bool hasIdentity;
        private string identity_ = "";
        public bool HasIdentity
        {
            get { return hasIdentity; }
        }
        public string Identity
        {
            get { return identity_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _publicChannelTypeFieldNames;
            if (hasType)
            {
                output.WriteMessage(1, field_names[2], Type);
            }
            if (hasName)
            {
                output.WriteString(2, field_names[1], Name);
            }
            if (hasIdentity)
            {
                output.WriteString(3, field_names[0], Identity);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasType)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, Type);
                }
                if (hasName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Name);
                }
                if (hasIdentity)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, Identity);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static PublicChannelType ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PublicChannelType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PublicChannelType ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PublicChannelType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PublicChannelType ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PublicChannelType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static PublicChannelType ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static PublicChannelType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static PublicChannelType ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PublicChannelType ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private PublicChannelType MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(PublicChannelType prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<PublicChannelType, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(PublicChannelType cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private PublicChannelType result;

            private PublicChannelType PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    PublicChannelType original = result;
                    result = new PublicChannelType();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override PublicChannelType MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.PublicChannelType.Descriptor; }
            }

            public override PublicChannelType DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.PublicChannelType.DefaultInstance; }
            }

            public override PublicChannelType BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is PublicChannelType)
                {
                    return MergeFrom((PublicChannelType)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(PublicChannelType other)
            {
                if (other == global::bgs.protocol.channel.v2.PublicChannelType.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasType)
                {
                    MergeType(other.Type);
                }
                if (other.HasName)
                {
                    Name = other.Name;
                }
                if (other.HasIdentity)
                {
                    Identity = other.Identity;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_publicChannelTypeFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _publicChannelTypeFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::bgs.protocol.channel.v2.UniqueChannelType.Builder subBuilder = global::bgs.protocol.channel.v2.UniqueChannelType.CreateBuilder();
                                if (result.hasType)
                                {
                                    subBuilder.MergeFrom(Type);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Type = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                result.hasName = input.ReadString(ref result.name_);
                                break;
                            }
                        case 26:
                            {
                                result.hasIdentity = input.ReadString(ref result.identity_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasType
            {
                get { return result.hasType; }
            }
            public global::bgs.protocol.channel.v2.UniqueChannelType Type
            {
                get { return result.Type; }
                set { SetType(value); }
            }
            public Builder SetType(global::bgs.protocol.channel.v2.UniqueChannelType value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
            }
            public Builder SetType(global::bgs.protocol.channel.v2.UniqueChannelType.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasType = true;
                result.type_ = builderForValue.Build();
                return this;
            }
            public Builder MergeType(global::bgs.protocol.channel.v2.UniqueChannelType value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasType &&
                    result.type_ != global::bgs.protocol.channel.v2.UniqueChannelType.DefaultInstance)
                {
                    result.type_ = global::bgs.protocol.channel.v2.UniqueChannelType.CreateBuilder(result.type_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.type_ = value;
                }
                result.hasType = true;
                return this;
            }
            public Builder ClearType()
            {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = null;
                return this;
            }

            public bool HasName
            {
                get { return result.hasName; }
            }
            public string Name
            {
                get { return result.Name; }
                set { SetName(value); }
            }
            public Builder SetName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasName = true;
                result.name_ = value;
                return this;
            }
            public Builder ClearName()
            {
                PrepareBuilder();
                result.hasName = false;
                result.name_ = "";
                return this;
            }

            public bool HasIdentity
            {
                get { return result.hasIdentity; }
            }
            public string Identity
            {
                get { return result.Identity; }
                set { SetIdentity(value); }
            }
            public Builder SetIdentity(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasIdentity = true;
                result.identity_ = value;
                return this;
            }
            public Builder ClearIdentity()
            {
                PrepareBuilder();
                result.hasIdentity = false;
                result.identity_ = "";
                return this;
            }
        }
        static PublicChannelType()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class GetPublicChannelTypesOptions : pb::GeneratedMessage<GetPublicChannelTypesOptions, GetPublicChannelTypesOptions.Builder>
    {
        private GetPublicChannelTypesOptions() { }
        private static readonly GetPublicChannelTypesOptions defaultInstance = new GetPublicChannelTypesOptions().MakeReadOnly();
        private static readonly string[] _getPublicChannelTypesOptionsFieldNames = new string[] { "type" };
        private static readonly uint[] _getPublicChannelTypesOptionsFieldTags = new uint[] { 10 };
        public static GetPublicChannelTypesOptions DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override GetPublicChannelTypesOptions DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override GetPublicChannelTypesOptions ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_GetPublicChannelTypesOptions__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<GetPublicChannelTypesOptions, GetPublicChannelTypesOptions.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_GetPublicChannelTypesOptions__FieldAccessorTable; }
        }

        public const int TypeFieldNumber = 1;
        private bool hasType;
        private global::bgs.protocol.channel.v2.UniqueChannelType type_;
        public bool HasType
        {
            get { return hasType; }
        }
        public global::bgs.protocol.channel.v2.UniqueChannelType Type
        {
            get { return type_ ?? global::bgs.protocol.channel.v2.UniqueChannelType.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _getPublicChannelTypesOptionsFieldNames;
            if (hasType)
            {
                output.WriteMessage(1, field_names[0], Type);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasType)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, Type);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static GetPublicChannelTypesOptions ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static GetPublicChannelTypesOptions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static GetPublicChannelTypesOptions ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static GetPublicChannelTypesOptions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static GetPublicChannelTypesOptions ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static GetPublicChannelTypesOptions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static GetPublicChannelTypesOptions ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static GetPublicChannelTypesOptions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static GetPublicChannelTypesOptions ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static GetPublicChannelTypesOptions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private GetPublicChannelTypesOptions MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(GetPublicChannelTypesOptions prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<GetPublicChannelTypesOptions, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(GetPublicChannelTypesOptions cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private GetPublicChannelTypesOptions result;

            private GetPublicChannelTypesOptions PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    GetPublicChannelTypesOptions original = result;
                    result = new GetPublicChannelTypesOptions();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override GetPublicChannelTypesOptions MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.GetPublicChannelTypesOptions.Descriptor; }
            }

            public override GetPublicChannelTypesOptions DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.GetPublicChannelTypesOptions.DefaultInstance; }
            }

            public override GetPublicChannelTypesOptions BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is GetPublicChannelTypesOptions)
                {
                    return MergeFrom((GetPublicChannelTypesOptions)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(GetPublicChannelTypesOptions other)
            {
                if (other == global::bgs.protocol.channel.v2.GetPublicChannelTypesOptions.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasType)
                {
                    MergeType(other.Type);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_getPublicChannelTypesOptionsFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _getPublicChannelTypesOptionsFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::bgs.protocol.channel.v2.UniqueChannelType.Builder subBuilder = global::bgs.protocol.channel.v2.UniqueChannelType.CreateBuilder();
                                if (result.hasType)
                                {
                                    subBuilder.MergeFrom(Type);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Type = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasType
            {
                get { return result.hasType; }
            }
            public global::bgs.protocol.channel.v2.UniqueChannelType Type
            {
                get { return result.Type; }
                set { SetType(value); }
            }
            public Builder SetType(global::bgs.protocol.channel.v2.UniqueChannelType value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
            }
            public Builder SetType(global::bgs.protocol.channel.v2.UniqueChannelType.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasType = true;
                result.type_ = builderForValue.Build();
                return this;
            }
            public Builder MergeType(global::bgs.protocol.channel.v2.UniqueChannelType value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasType &&
                    result.type_ != global::bgs.protocol.channel.v2.UniqueChannelType.DefaultInstance)
                {
                    result.type_ = global::bgs.protocol.channel.v2.UniqueChannelType.CreateBuilder(result.type_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.type_ = value;
                }
                result.hasType = true;
                return this;
            }
            public Builder ClearType()
            {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = null;
                return this;
            }
        }
        static GetPublicChannelTypesOptions()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class FindChannelOptions : pb::GeneratedMessage<FindChannelOptions, FindChannelOptions.Builder>
    {
        private FindChannelOptions() { }
        private static readonly FindChannelOptions defaultInstance = new FindChannelOptions().MakeReadOnly();
        private static readonly string[] _findChannelOptionsFieldNames = new string[] { "identity", "locale", "reservation", "search_attribute", "type" };
        private static readonly uint[] _findChannelOptionsFieldTags = new uint[] { 18, 29, 50, 34, 10 };
        public static FindChannelOptions DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override FindChannelOptions DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override FindChannelOptions ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_FindChannelOptions__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<FindChannelOptions, FindChannelOptions.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_FindChannelOptions__FieldAccessorTable; }
        }

        public const int TypeFieldNumber = 1;
        private bool hasType;
        private global::bgs.protocol.channel.v2.UniqueChannelType type_;
        public bool HasType
        {
            get { return hasType; }
        }
        public global::bgs.protocol.channel.v2.UniqueChannelType Type
        {
            get { return type_ ?? global::bgs.protocol.channel.v2.UniqueChannelType.DefaultInstance; }
        }

        public const int IdentityFieldNumber = 2;
        private bool hasIdentity;
        private string identity_ = "";
        public bool HasIdentity
        {
            get { return hasIdentity; }
        }
        public string Identity
        {
            get { return identity_; }
        }

        public const int LocaleFieldNumber = 3;
        private bool hasLocale;
        private uint locale_;
        public bool HasLocale
        {
            get { return hasLocale; }
        }
        public uint Locale
        {
            get { return locale_; }
        }

        public const int SearchAttributeFieldNumber = 4;
        private pbc::PopsicleList<global::bgs.protocol.v2.Attribute> searchAttribute_ = new pbc::PopsicleList<global::bgs.protocol.v2.Attribute>();
        public scg::IList<global::bgs.protocol.v2.Attribute> SearchAttributeList
        {
            get { return searchAttribute_; }
        }
        public int SearchAttributeCount
        {
            get { return searchAttribute_.Count; }
        }
        public global::bgs.protocol.v2.Attribute GetSearchAttribute(int index)
        {
            return searchAttribute_[index];
        }

        public const int ReservationFieldNumber = 6;
        private pbc::PopsicleList<global::bgs.protocol.account.v1.AccountId> reservation_ = new pbc::PopsicleList<global::bgs.protocol.account.v1.AccountId>();
        public scg::IList<global::bgs.protocol.account.v1.AccountId> ReservationList
        {
            get { return reservation_; }
        }
        public int ReservationCount
        {
            get { return reservation_.Count; }
        }
        public global::bgs.protocol.account.v1.AccountId GetReservation(int index)
        {
            return reservation_[index];
        }

        public override bool IsInitialized
        {
            get
            {
                foreach (global::bgs.protocol.account.v1.AccountId element in ReservationList)
                {
                    if (!element.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _findChannelOptionsFieldNames;
            if (hasType)
            {
                output.WriteMessage(1, field_names[4], Type);
            }
            if (hasIdentity)
            {
                output.WriteString(2, field_names[0], Identity);
            }
            if (hasLocale)
            {
                output.WriteFixed32(3, field_names[1], Locale);
            }
            if (searchAttribute_.Count > 0)
            {
                output.WriteMessageArray(4, field_names[3], searchAttribute_);
            }
            if (reservation_.Count > 0)
            {
                output.WriteMessageArray(6, field_names[2], reservation_);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasType)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, Type);
                }
                if (hasIdentity)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Identity);
                }
                if (hasLocale)
                {
                    size += pb::CodedOutputStream.ComputeFixed32Size(3, Locale);
                }
                foreach (global::bgs.protocol.v2.Attribute element in SearchAttributeList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(4, element);
                }
                foreach (global::bgs.protocol.account.v1.AccountId element in ReservationList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(6, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static FindChannelOptions ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static FindChannelOptions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static FindChannelOptions ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static FindChannelOptions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static FindChannelOptions ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static FindChannelOptions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static FindChannelOptions ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static FindChannelOptions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static FindChannelOptions ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static FindChannelOptions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private FindChannelOptions MakeReadOnly()
        {
            searchAttribute_.MakeReadOnly();
            reservation_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(FindChannelOptions prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<FindChannelOptions, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(FindChannelOptions cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private FindChannelOptions result;

            private FindChannelOptions PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    FindChannelOptions original = result;
                    result = new FindChannelOptions();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override FindChannelOptions MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.FindChannelOptions.Descriptor; }
            }

            public override FindChannelOptions DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.FindChannelOptions.DefaultInstance; }
            }

            public override FindChannelOptions BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is FindChannelOptions)
                {
                    return MergeFrom((FindChannelOptions)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(FindChannelOptions other)
            {
                if (other == global::bgs.protocol.channel.v2.FindChannelOptions.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasType)
                {
                    MergeType(other.Type);
                }
                if (other.HasIdentity)
                {
                    Identity = other.Identity;
                }
                if (other.HasLocale)
                {
                    Locale = other.Locale;
                }
                if (other.searchAttribute_.Count != 0)
                {
                    result.searchAttribute_.Add(other.searchAttribute_);
                }
                if (other.reservation_.Count != 0)
                {
                    result.reservation_.Add(other.reservation_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_findChannelOptionsFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _findChannelOptionsFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::bgs.protocol.channel.v2.UniqueChannelType.Builder subBuilder = global::bgs.protocol.channel.v2.UniqueChannelType.CreateBuilder();
                                if (result.hasType)
                                {
                                    subBuilder.MergeFrom(Type);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Type = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                result.hasIdentity = input.ReadString(ref result.identity_);
                                break;
                            }
                        case 29:
                            {
                                result.hasLocale = input.ReadFixed32(ref result.locale_);
                                break;
                            }
                        case 34:
                            {
                                input.ReadMessageArray(tag, field_name, result.searchAttribute_, global::bgs.protocol.v2.Attribute.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 50:
                            {
                                input.ReadMessageArray(tag, field_name, result.reservation_, global::bgs.protocol.account.v1.AccountId.DefaultInstance, extensionRegistry);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasType
            {
                get { return result.hasType; }
            }
            public global::bgs.protocol.channel.v2.UniqueChannelType Type
            {
                get { return result.Type; }
                set { SetType(value); }
            }
            public Builder SetType(global::bgs.protocol.channel.v2.UniqueChannelType value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
            }
            public Builder SetType(global::bgs.protocol.channel.v2.UniqueChannelType.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasType = true;
                result.type_ = builderForValue.Build();
                return this;
            }
            public Builder MergeType(global::bgs.protocol.channel.v2.UniqueChannelType value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasType &&
                    result.type_ != global::bgs.protocol.channel.v2.UniqueChannelType.DefaultInstance)
                {
                    result.type_ = global::bgs.protocol.channel.v2.UniqueChannelType.CreateBuilder(result.type_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.type_ = value;
                }
                result.hasType = true;
                return this;
            }
            public Builder ClearType()
            {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = null;
                return this;
            }

            public bool HasIdentity
            {
                get { return result.hasIdentity; }
            }
            public string Identity
            {
                get { return result.Identity; }
                set { SetIdentity(value); }
            }
            public Builder SetIdentity(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasIdentity = true;
                result.identity_ = value;
                return this;
            }
            public Builder ClearIdentity()
            {
                PrepareBuilder();
                result.hasIdentity = false;
                result.identity_ = "";
                return this;
            }

            public bool HasLocale
            {
                get { return result.hasLocale; }
            }
            public uint Locale
            {
                get { return result.Locale; }
                set { SetLocale(value); }
            }
            public Builder SetLocale(uint value)
            {
                PrepareBuilder();
                result.hasLocale = true;
                result.locale_ = value;
                return this;
            }
            public Builder ClearLocale()
            {
                PrepareBuilder();
                result.hasLocale = false;
                result.locale_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::bgs.protocol.v2.Attribute> SearchAttributeList
            {
                get { return PrepareBuilder().searchAttribute_; }
            }
            public int SearchAttributeCount
            {
                get { return result.SearchAttributeCount; }
            }
            public global::bgs.protocol.v2.Attribute GetSearchAttribute(int index)
            {
                return result.GetSearchAttribute(index);
            }
            public Builder SetSearchAttribute(int index, global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.searchAttribute_[index] = value;
                return this;
            }
            public Builder SetSearchAttribute(int index, global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.searchAttribute_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddSearchAttribute(global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.searchAttribute_.Add(value);
                return this;
            }
            public Builder AddSearchAttribute(global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.searchAttribute_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeSearchAttribute(scg::IEnumerable<global::bgs.protocol.v2.Attribute> values)
            {
                PrepareBuilder();
                result.searchAttribute_.Add(values);
                return this;
            }
            public Builder ClearSearchAttribute()
            {
                PrepareBuilder();
                result.searchAttribute_.Clear();
                return this;
            }

            public pbc::IPopsicleList<global::bgs.protocol.account.v1.AccountId> ReservationList
            {
                get { return PrepareBuilder().reservation_; }
            }
            public int ReservationCount
            {
                get { return result.ReservationCount; }
            }
            public global::bgs.protocol.account.v1.AccountId GetReservation(int index)
            {
                return result.GetReservation(index);
            }
            public Builder SetReservation(int index, global::bgs.protocol.account.v1.AccountId value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.reservation_[index] = value;
                return this;
            }
            public Builder SetReservation(int index, global::bgs.protocol.account.v1.AccountId.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.reservation_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddReservation(global::bgs.protocol.account.v1.AccountId value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.reservation_.Add(value);
                return this;
            }
            public Builder AddReservation(global::bgs.protocol.account.v1.AccountId.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.reservation_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeReservation(scg::IEnumerable<global::bgs.protocol.account.v1.AccountId> values)
            {
                PrepareBuilder();
                result.reservation_.Add(values);
                return this;
            }
            public Builder ClearReservation()
            {
                PrepareBuilder();
                result.reservation_.Clear();
                return this;
            }
        }
        static FindChannelOptions()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class SendMessageOptions : pb::GeneratedMessage<SendMessageOptions, SendMessageOptions.Builder>
    {
        private SendMessageOptions() { }
        private static readonly SendMessageOptions defaultInstance = new SendMessageOptions().MakeReadOnly();
        private static readonly string[] _sendMessageOptionsFieldNames = new string[] { "attribute", "content" };
        private static readonly uint[] _sendMessageOptionsFieldTags = new uint[] { 42, 34 };
        public static SendMessageOptions DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override SendMessageOptions DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override SendMessageOptions ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_SendMessageOptions__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<SendMessageOptions, SendMessageOptions.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_SendMessageOptions__FieldAccessorTable; }
        }

        public const int ContentFieldNumber = 4;
        private bool hasContent;
        private string content_ = "";
        public bool HasContent
        {
            get { return hasContent; }
        }
        public string Content
        {
            get { return content_; }
        }

        public const int AttributeFieldNumber = 5;
        private pbc::PopsicleList<global::bgs.protocol.v2.Attribute> attribute_ = new pbc::PopsicleList<global::bgs.protocol.v2.Attribute>();
        public scg::IList<global::bgs.protocol.v2.Attribute> AttributeList
        {
            get { return attribute_; }
        }
        public int AttributeCount
        {
            get { return attribute_.Count; }
        }
        public global::bgs.protocol.v2.Attribute GetAttribute(int index)
        {
            return attribute_[index];
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _sendMessageOptionsFieldNames;
            if (hasContent)
            {
                output.WriteString(4, field_names[1], Content);
            }
            if (attribute_.Count > 0)
            {
                output.WriteMessageArray(5, field_names[0], attribute_);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasContent)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(4, Content);
                }
                foreach (global::bgs.protocol.v2.Attribute element in AttributeList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(5, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static SendMessageOptions ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SendMessageOptions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SendMessageOptions ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SendMessageOptions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SendMessageOptions ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SendMessageOptions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SendMessageOptions ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SendMessageOptions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SendMessageOptions ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SendMessageOptions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SendMessageOptions MakeReadOnly()
        {
            attribute_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SendMessageOptions prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<SendMessageOptions, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(SendMessageOptions cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private SendMessageOptions result;

            private SendMessageOptions PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    SendMessageOptions original = result;
                    result = new SendMessageOptions();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override SendMessageOptions MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.SendMessageOptions.Descriptor; }
            }

            public override SendMessageOptions DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.SendMessageOptions.DefaultInstance; }
            }

            public override SendMessageOptions BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is SendMessageOptions)
                {
                    return MergeFrom((SendMessageOptions)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(SendMessageOptions other)
            {
                if (other == global::bgs.protocol.channel.v2.SendMessageOptions.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasContent)
                {
                    Content = other.Content;
                }
                if (other.attribute_.Count != 0)
                {
                    result.attribute_.Add(other.attribute_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_sendMessageOptionsFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _sendMessageOptionsFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 34:
                            {
                                result.hasContent = input.ReadString(ref result.content_);
                                break;
                            }
                        case 42:
                            {
                                input.ReadMessageArray(tag, field_name, result.attribute_, global::bgs.protocol.v2.Attribute.DefaultInstance, extensionRegistry);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasContent
            {
                get { return result.hasContent; }
            }
            public string Content
            {
                get { return result.Content; }
                set { SetContent(value); }
            }
            public Builder SetContent(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasContent = true;
                result.content_ = value;
                return this;
            }
            public Builder ClearContent()
            {
                PrepareBuilder();
                result.hasContent = false;
                result.content_ = "";
                return this;
            }

            public pbc::IPopsicleList<global::bgs.protocol.v2.Attribute> AttributeList
            {
                get { return PrepareBuilder().attribute_; }
            }
            public int AttributeCount
            {
                get { return result.AttributeCount; }
            }
            public global::bgs.protocol.v2.Attribute GetAttribute(int index)
            {
                return result.GetAttribute(index);
            }
            public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.attribute_[index] = value;
                return this;
            }
            public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.attribute_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddAttribute(global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.attribute_.Add(value);
                return this;
            }
            public Builder AddAttribute(global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.attribute_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeAttribute(scg::IEnumerable<global::bgs.protocol.v2.Attribute> values)
            {
                PrepareBuilder();
                result.attribute_.Add(values);
                return this;
            }
            public Builder ClearAttribute()
            {
                PrepareBuilder();
                result.attribute_.Clear();
                return this;
            }
        }
        static SendMessageOptions()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class ChannelMessage : pb::GeneratedMessage<ChannelMessage, ChannelMessage.Builder>
    {
        private ChannelMessage() { }
        private static readonly ChannelMessage defaultInstance = new ChannelMessage().MakeReadOnly();
        private static readonly string[] _channelMessageFieldNames = new string[] { "attribute", "author_id", "content", "creation_time" };
        private static readonly uint[] _channelMessageFieldTags = new uint[] { 34, 10, 26, 40 };
        public static ChannelMessage DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ChannelMessage DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ChannelMessage ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_ChannelMessage__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ChannelMessage, ChannelMessage.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_ChannelMessage__FieldAccessorTable; }
        }

        public const int AuthorIdFieldNumber = 1;
        private bool hasAuthorId;
        private global::bgs.protocol.account.v1.GameAccountHandle authorId_;
        public bool HasAuthorId
        {
            get { return hasAuthorId; }
        }
        public global::bgs.protocol.account.v1.GameAccountHandle AuthorId
        {
            get { return authorId_ ?? global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance; }
        }

        public const int ContentFieldNumber = 3;
        private bool hasContent;
        private string content_ = "";
        public bool HasContent
        {
            get { return hasContent; }
        }
        public string Content
        {
            get { return content_; }
        }

        public const int AttributeFieldNumber = 4;
        private pbc::PopsicleList<global::bgs.protocol.v2.Attribute> attribute_ = new pbc::PopsicleList<global::bgs.protocol.v2.Attribute>();
        public scg::IList<global::bgs.protocol.v2.Attribute> AttributeList
        {
            get { return attribute_; }
        }
        public int AttributeCount
        {
            get { return attribute_.Count; }
        }
        public global::bgs.protocol.v2.Attribute GetAttribute(int index)
        {
            return attribute_[index];
        }

        public const int CreationTimeFieldNumber = 5;
        private bool hasCreationTime;
        private ulong creationTime_;
        public bool HasCreationTime
        {
            get { return hasCreationTime; }
        }
        public ulong CreationTime
        {
            get { return creationTime_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasAuthorId)
                {
                    if (!AuthorId.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _channelMessageFieldNames;
            if (hasAuthorId)
            {
                output.WriteMessage(1, field_names[1], AuthorId);
            }
            if (hasContent)
            {
                output.WriteString(3, field_names[2], Content);
            }
            if (attribute_.Count > 0)
            {
                output.WriteMessageArray(4, field_names[0], attribute_);
            }
            if (hasCreationTime)
            {
                output.WriteUInt64(5, field_names[3], CreationTime);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasAuthorId)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, AuthorId);
                }
                if (hasContent)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, Content);
                }
                foreach (global::bgs.protocol.v2.Attribute element in AttributeList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(4, element);
                }
                if (hasCreationTime)
                {
                    size += pb::CodedOutputStream.ComputeUInt64Size(5, CreationTime);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ChannelMessage ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChannelMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChannelMessage ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChannelMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChannelMessage ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChannelMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ChannelMessage ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ChannelMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ChannelMessage ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChannelMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ChannelMessage MakeReadOnly()
        {
            attribute_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ChannelMessage prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<ChannelMessage, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ChannelMessage cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ChannelMessage result;

            private ChannelMessage PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ChannelMessage original = result;
                    result = new ChannelMessage();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ChannelMessage MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.ChannelMessage.Descriptor; }
            }

            public override ChannelMessage DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.ChannelMessage.DefaultInstance; }
            }

            public override ChannelMessage BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ChannelMessage)
                {
                    return MergeFrom((ChannelMessage)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ChannelMessage other)
            {
                if (other == global::bgs.protocol.channel.v2.ChannelMessage.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasAuthorId)
                {
                    MergeAuthorId(other.AuthorId);
                }
                if (other.HasContent)
                {
                    Content = other.Content;
                }
                if (other.attribute_.Count != 0)
                {
                    result.attribute_.Add(other.attribute_);
                }
                if (other.HasCreationTime)
                {
                    CreationTime = other.CreationTime;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_channelMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _channelMessageFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::bgs.protocol.account.v1.GameAccountHandle.Builder subBuilder = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder();
                                if (result.hasAuthorId)
                                {
                                    subBuilder.MergeFrom(AuthorId);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                AuthorId = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                result.hasContent = input.ReadString(ref result.content_);
                                break;
                            }
                        case 34:
                            {
                                input.ReadMessageArray(tag, field_name, result.attribute_, global::bgs.protocol.v2.Attribute.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 40:
                            {
                                result.hasCreationTime = input.ReadUInt64(ref result.creationTime_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasAuthorId
            {
                get { return result.hasAuthorId; }
            }
            public global::bgs.protocol.account.v1.GameAccountHandle AuthorId
            {
                get { return result.AuthorId; }
                set { SetAuthorId(value); }
            }
            public Builder SetAuthorId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAuthorId = true;
                result.authorId_ = value;
                return this;
            }
            public Builder SetAuthorId(global::bgs.protocol.account.v1.GameAccountHandle.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasAuthorId = true;
                result.authorId_ = builderForValue.Build();
                return this;
            }
            public Builder MergeAuthorId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasAuthorId &&
                    result.authorId_ != global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance)
                {
                    result.authorId_ = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder(result.authorId_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.authorId_ = value;
                }
                result.hasAuthorId = true;
                return this;
            }
            public Builder ClearAuthorId()
            {
                PrepareBuilder();
                result.hasAuthorId = false;
                result.authorId_ = null;
                return this;
            }

            public bool HasContent
            {
                get { return result.hasContent; }
            }
            public string Content
            {
                get { return result.Content; }
                set { SetContent(value); }
            }
            public Builder SetContent(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasContent = true;
                result.content_ = value;
                return this;
            }
            public Builder ClearContent()
            {
                PrepareBuilder();
                result.hasContent = false;
                result.content_ = "";
                return this;
            }

            public pbc::IPopsicleList<global::bgs.protocol.v2.Attribute> AttributeList
            {
                get { return PrepareBuilder().attribute_; }
            }
            public int AttributeCount
            {
                get { return result.AttributeCount; }
            }
            public global::bgs.protocol.v2.Attribute GetAttribute(int index)
            {
                return result.GetAttribute(index);
            }
            public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.attribute_[index] = value;
                return this;
            }
            public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.attribute_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddAttribute(global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.attribute_.Add(value);
                return this;
            }
            public Builder AddAttribute(global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.attribute_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeAttribute(scg::IEnumerable<global::bgs.protocol.v2.Attribute> values)
            {
                PrepareBuilder();
                result.attribute_.Add(values);
                return this;
            }
            public Builder ClearAttribute()
            {
                PrepareBuilder();
                result.attribute_.Clear();
                return this;
            }

            public bool HasCreationTime
            {
                get { return result.hasCreationTime; }
            }
            public ulong CreationTime
            {
                get { return result.CreationTime; }
                set { SetCreationTime(value); }
            }
            public Builder SetCreationTime(ulong value)
            {
                PrepareBuilder();
                result.hasCreationTime = true;
                result.creationTime_ = value;
                return this;
            }
            public Builder ClearCreationTime()
            {
                PrepareBuilder();
                result.hasCreationTime = false;
                result.creationTime_ = 0UL;
                return this;
            }
        }
        static ChannelMessage()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class PublicChannelState : pb::GeneratedMessage<PublicChannelState, PublicChannelState.Builder>
    {
        private PublicChannelState() { }
        private static readonly PublicChannelState defaultInstance = new PublicChannelState().MakeReadOnly();
        private static readonly string[] _publicChannelStateFieldNames = new string[] { "identity", "locale", "reservation", "search_attribute" };
        private static readonly uint[] _publicChannelStateFieldTags = new uint[] { 10, 21, 50, 26 };
        public static PublicChannelState DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override PublicChannelState DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override PublicChannelState ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_PublicChannelState__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<PublicChannelState, PublicChannelState.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_PublicChannelState__FieldAccessorTable; }
        }

        public const int IdentityFieldNumber = 1;
        private bool hasIdentity;
        private string identity_ = "";
        public bool HasIdentity
        {
            get { return hasIdentity; }
        }
        public string Identity
        {
            get { return identity_; }
        }

        public const int LocaleFieldNumber = 2;
        private bool hasLocale;
        private uint locale_;
        public bool HasLocale
        {
            get { return hasLocale; }
        }
        public uint Locale
        {
            get { return locale_; }
        }

        public const int SearchAttributeFieldNumber = 3;
        private pbc::PopsicleList<global::bgs.protocol.v2.Attribute> searchAttribute_ = new pbc::PopsicleList<global::bgs.protocol.v2.Attribute>();
        public scg::IList<global::bgs.protocol.v2.Attribute> SearchAttributeList
        {
            get { return searchAttribute_; }
        }
        public int SearchAttributeCount
        {
            get { return searchAttribute_.Count; }
        }
        public global::bgs.protocol.v2.Attribute GetSearchAttribute(int index)
        {
            return searchAttribute_[index];
        }

        public const int ReservationFieldNumber = 6;
        private pbc::PopsicleList<global::bgs.protocol.account.v1.AccountId> reservation_ = new pbc::PopsicleList<global::bgs.protocol.account.v1.AccountId>();
        public scg::IList<global::bgs.protocol.account.v1.AccountId> ReservationList
        {
            get { return reservation_; }
        }
        public int ReservationCount
        {
            get { return reservation_.Count; }
        }
        public global::bgs.protocol.account.v1.AccountId GetReservation(int index)
        {
            return reservation_[index];
        }

        public override bool IsInitialized
        {
            get
            {
                foreach (global::bgs.protocol.account.v1.AccountId element in ReservationList)
                {
                    if (!element.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _publicChannelStateFieldNames;
            if (hasIdentity)
            {
                output.WriteString(1, field_names[0], Identity);
            }
            if (hasLocale)
            {
                output.WriteFixed32(2, field_names[1], Locale);
            }
            if (searchAttribute_.Count > 0)
            {
                output.WriteMessageArray(3, field_names[3], searchAttribute_);
            }
            if (reservation_.Count > 0)
            {
                output.WriteMessageArray(6, field_names[2], reservation_);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasIdentity)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, Identity);
                }
                if (hasLocale)
                {
                    size += pb::CodedOutputStream.ComputeFixed32Size(2, Locale);
                }
                foreach (global::bgs.protocol.v2.Attribute element in SearchAttributeList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, element);
                }
                foreach (global::bgs.protocol.account.v1.AccountId element in ReservationList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(6, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static PublicChannelState ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PublicChannelState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PublicChannelState ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PublicChannelState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PublicChannelState ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PublicChannelState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static PublicChannelState ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static PublicChannelState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static PublicChannelState ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PublicChannelState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private PublicChannelState MakeReadOnly()
        {
            searchAttribute_.MakeReadOnly();
            reservation_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(PublicChannelState prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<PublicChannelState, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(PublicChannelState cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private PublicChannelState result;

            private PublicChannelState PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    PublicChannelState original = result;
                    result = new PublicChannelState();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override PublicChannelState MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.PublicChannelState.Descriptor; }
            }

            public override PublicChannelState DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.PublicChannelState.DefaultInstance; }
            }

            public override PublicChannelState BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is PublicChannelState)
                {
                    return MergeFrom((PublicChannelState)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(PublicChannelState other)
            {
                if (other == global::bgs.protocol.channel.v2.PublicChannelState.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasIdentity)
                {
                    Identity = other.Identity;
                }
                if (other.HasLocale)
                {
                    Locale = other.Locale;
                }
                if (other.searchAttribute_.Count != 0)
                {
                    result.searchAttribute_.Add(other.searchAttribute_);
                }
                if (other.reservation_.Count != 0)
                {
                    result.reservation_.Add(other.reservation_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_publicChannelStateFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _publicChannelStateFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasIdentity = input.ReadString(ref result.identity_);
                                break;
                            }
                        case 21:
                            {
                                result.hasLocale = input.ReadFixed32(ref result.locale_);
                                break;
                            }
                        case 26:
                            {
                                input.ReadMessageArray(tag, field_name, result.searchAttribute_, global::bgs.protocol.v2.Attribute.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 50:
                            {
                                input.ReadMessageArray(tag, field_name, result.reservation_, global::bgs.protocol.account.v1.AccountId.DefaultInstance, extensionRegistry);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasIdentity
            {
                get { return result.hasIdentity; }
            }
            public string Identity
            {
                get { return result.Identity; }
                set { SetIdentity(value); }
            }
            public Builder SetIdentity(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasIdentity = true;
                result.identity_ = value;
                return this;
            }
            public Builder ClearIdentity()
            {
                PrepareBuilder();
                result.hasIdentity = false;
                result.identity_ = "";
                return this;
            }

            public bool HasLocale
            {
                get { return result.hasLocale; }
            }
            public uint Locale
            {
                get { return result.Locale; }
                set { SetLocale(value); }
            }
            public Builder SetLocale(uint value)
            {
                PrepareBuilder();
                result.hasLocale = true;
                result.locale_ = value;
                return this;
            }
            public Builder ClearLocale()
            {
                PrepareBuilder();
                result.hasLocale = false;
                result.locale_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::bgs.protocol.v2.Attribute> SearchAttributeList
            {
                get { return PrepareBuilder().searchAttribute_; }
            }
            public int SearchAttributeCount
            {
                get { return result.SearchAttributeCount; }
            }
            public global::bgs.protocol.v2.Attribute GetSearchAttribute(int index)
            {
                return result.GetSearchAttribute(index);
            }
            public Builder SetSearchAttribute(int index, global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.searchAttribute_[index] = value;
                return this;
            }
            public Builder SetSearchAttribute(int index, global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.searchAttribute_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddSearchAttribute(global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.searchAttribute_.Add(value);
                return this;
            }
            public Builder AddSearchAttribute(global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.searchAttribute_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeSearchAttribute(scg::IEnumerable<global::bgs.protocol.v2.Attribute> values)
            {
                PrepareBuilder();
                result.searchAttribute_.Add(values);
                return this;
            }
            public Builder ClearSearchAttribute()
            {
                PrepareBuilder();
                result.searchAttribute_.Clear();
                return this;
            }

            public pbc::IPopsicleList<global::bgs.protocol.account.v1.AccountId> ReservationList
            {
                get { return PrepareBuilder().reservation_; }
            }
            public int ReservationCount
            {
                get { return result.ReservationCount; }
            }
            public global::bgs.protocol.account.v1.AccountId GetReservation(int index)
            {
                return result.GetReservation(index);
            }
            public Builder SetReservation(int index, global::bgs.protocol.account.v1.AccountId value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.reservation_[index] = value;
                return this;
            }
            public Builder SetReservation(int index, global::bgs.protocol.account.v1.AccountId.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.reservation_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddReservation(global::bgs.protocol.account.v1.AccountId value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.reservation_.Add(value);
                return this;
            }
            public Builder AddReservation(global::bgs.protocol.account.v1.AccountId.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.reservation_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeReservation(scg::IEnumerable<global::bgs.protocol.account.v1.AccountId> values)
            {
                PrepareBuilder();
                result.reservation_.Add(values);
                return this;
            }
            public Builder ClearReservation()
            {
                PrepareBuilder();
                result.reservation_.Clear();
                return this;
            }
        }
        static PublicChannelState()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Channel : pb::GeneratedMessage<Channel, Channel.Builder>
    {
        private Channel() { }
        private static readonly Channel defaultInstance = new Channel().MakeReadOnly();
        private static readonly string[] _channelFieldNames = new string[] { "attribute", "id", "invitation", "member", "name", "privacy_level", "public_channel_state", "role_set", "type" };
        private static readonly uint[] _channelFieldTags = new uint[] { 42, 10, 58, 50, 26, 32, 882, 66, 18 };
        public static Channel DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override Channel DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override Channel ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_Channel__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<Channel, Channel.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_Channel__FieldAccessorTable; }
        }

        public const int IdFieldNumber = 1;
        private bool hasId;
        private global::bgs.protocol.channel.v2.ChannelId id_;
        public bool HasId
        {
            get { return hasId; }
        }
        public global::bgs.protocol.channel.v2.ChannelId Id
        {
            get { return id_ ?? global::bgs.protocol.channel.v2.ChannelId.DefaultInstance; }
        }

        public const int TypeFieldNumber = 2;
        private bool hasType;
        private global::bgs.protocol.channel.v2.UniqueChannelType type_;
        public bool HasType
        {
            get { return hasType; }
        }
        public global::bgs.protocol.channel.v2.UniqueChannelType Type
        {
            get { return type_ ?? global::bgs.protocol.channel.v2.UniqueChannelType.DefaultInstance; }
        }

        public const int NameFieldNumber = 3;
        private bool hasName;
        private string name_ = "";
        public bool HasName
        {
            get { return hasName; }
        }
        public string Name
        {
            get { return name_; }
        }

        public const int PrivacyLevelFieldNumber = 4;
        private bool hasPrivacyLevel;
        private global::bgs.protocol.channel.v2.PrivacyLevel privacyLevel_ = global::bgs.protocol.channel.v2.PrivacyLevel.PRIVACY_LEVEL_OPEN;
        public bool HasPrivacyLevel
        {
            get { return hasPrivacyLevel; }
        }
        public global::bgs.protocol.channel.v2.PrivacyLevel PrivacyLevel
        {
            get { return privacyLevel_; }
        }

        public const int AttributeFieldNumber = 5;
        private pbc::PopsicleList<global::bgs.protocol.v2.Attribute> attribute_ = new pbc::PopsicleList<global::bgs.protocol.v2.Attribute>();
        public scg::IList<global::bgs.protocol.v2.Attribute> AttributeList
        {
            get { return attribute_; }
        }
        public int AttributeCount
        {
            get { return attribute_.Count; }
        }
        public global::bgs.protocol.v2.Attribute GetAttribute(int index)
        {
            return attribute_[index];
        }

        public const int MemberFieldNumber = 6;
        private pbc::PopsicleList<global::bgs.protocol.channel.v2.Member> member_ = new pbc::PopsicleList<global::bgs.protocol.channel.v2.Member>();
        public scg::IList<global::bgs.protocol.channel.v2.Member> MemberList
        {
            get { return member_; }
        }
        public int MemberCount
        {
            get { return member_.Count; }
        }
        public global::bgs.protocol.channel.v2.Member GetMember(int index)
        {
            return member_[index];
        }

        public const int InvitationFieldNumber = 7;
        private pbc::PopsicleList<global::bgs.protocol.channel.v2.ChannelInvitation> invitation_ = new pbc::PopsicleList<global::bgs.protocol.channel.v2.ChannelInvitation>();
        public scg::IList<global::bgs.protocol.channel.v2.ChannelInvitation> InvitationList
        {
            get { return invitation_; }
        }
        public int InvitationCount
        {
            get { return invitation_.Count; }
        }
        public global::bgs.protocol.channel.v2.ChannelInvitation GetInvitation(int index)
        {
            return invitation_[index];
        }

        public const int RoleSetFieldNumber = 8;
        private bool hasRoleSet;
        private global::bgs.protocol.channel.ChannelRoleSet roleSet_;
        public bool HasRoleSet
        {
            get { return hasRoleSet; }
        }
        public global::bgs.protocol.channel.ChannelRoleSet RoleSet
        {
            get { return roleSet_ ?? global::bgs.protocol.channel.ChannelRoleSet.DefaultInstance; }
        }

        public const int PublicChannelStateFieldNumber = 110;
        private bool hasPublicChannelState;
        private global::bgs.protocol.channel.v2.PublicChannelState publicChannelState_;
        public bool HasPublicChannelState
        {
            get { return hasPublicChannelState; }
        }
        public global::bgs.protocol.channel.v2.PublicChannelState PublicChannelState
        {
            get { return publicChannelState_ ?? global::bgs.protocol.channel.v2.PublicChannelState.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasId)
                {
                    if (!Id.IsInitialized) return false;
                }
                foreach (global::bgs.protocol.channel.v2.Member element in MemberList)
                {
                    if (!element.IsInitialized) return false;
                }
                foreach (global::bgs.protocol.channel.v2.ChannelInvitation element in InvitationList)
                {
                    if (!element.IsInitialized) return false;
                }
                if (HasPublicChannelState)
                {
                    if (!PublicChannelState.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _channelFieldNames;
            if (hasId)
            {
                output.WriteMessage(1, field_names[1], Id);
            }
            if (hasType)
            {
                output.WriteMessage(2, field_names[8], Type);
            }
            if (hasName)
            {
                output.WriteString(3, field_names[4], Name);
            }
            if (hasPrivacyLevel)
            {
                output.WriteEnum(4, field_names[5], (int)PrivacyLevel, PrivacyLevel);
            }
            if (attribute_.Count > 0)
            {
                output.WriteMessageArray(5, field_names[0], attribute_);
            }
            if (member_.Count > 0)
            {
                output.WriteMessageArray(6, field_names[3], member_);
            }
            if (invitation_.Count > 0)
            {
                output.WriteMessageArray(7, field_names[2], invitation_);
            }
            if (hasRoleSet)
            {
                output.WriteMessage(8, field_names[7], RoleSet);
            }
            if (hasPublicChannelState)
            {
                output.WriteMessage(110, field_names[6], PublicChannelState);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasId)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, Id);
                }
                if (hasType)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, Type);
                }
                if (hasName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, Name);
                }
                if (hasPrivacyLevel)
                {
                    size += pb::CodedOutputStream.ComputeEnumSize(4, (int)PrivacyLevel);
                }
                foreach (global::bgs.protocol.v2.Attribute element in AttributeList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(5, element);
                }
                foreach (global::bgs.protocol.channel.v2.Member element in MemberList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(6, element);
                }
                foreach (global::bgs.protocol.channel.v2.ChannelInvitation element in InvitationList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(7, element);
                }
                if (hasRoleSet)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(8, RoleSet);
                }
                if (hasPublicChannelState)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(110, PublicChannelState);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static Channel ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Channel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Channel ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Channel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Channel ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Channel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Channel ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Channel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Channel ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Channel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Channel MakeReadOnly()
        {
            attribute_.MakeReadOnly();
            member_.MakeReadOnly();
            invitation_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Channel prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Channel, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(Channel cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private Channel result;

            private Channel PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    Channel original = result;
                    result = new Channel();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override Channel MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.Channel.Descriptor; }
            }

            public override Channel DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.Channel.DefaultInstance; }
            }

            public override Channel BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is Channel)
                {
                    return MergeFrom((Channel)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(Channel other)
            {
                if (other == global::bgs.protocol.channel.v2.Channel.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasId)
                {
                    MergeId(other.Id);
                }
                if (other.HasType)
                {
                    MergeType(other.Type);
                }
                if (other.HasName)
                {
                    Name = other.Name;
                }
                if (other.HasPrivacyLevel)
                {
                    PrivacyLevel = other.PrivacyLevel;
                }
                if (other.attribute_.Count != 0)
                {
                    result.attribute_.Add(other.attribute_);
                }
                if (other.member_.Count != 0)
                {
                    result.member_.Add(other.member_);
                }
                if (other.invitation_.Count != 0)
                {
                    result.invitation_.Add(other.invitation_);
                }
                if (other.HasRoleSet)
                {
                    MergeRoleSet(other.RoleSet);
                }
                if (other.HasPublicChannelState)
                {
                    MergePublicChannelState(other.PublicChannelState);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_channelFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _channelFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::bgs.protocol.channel.v2.ChannelId.Builder subBuilder = global::bgs.protocol.channel.v2.ChannelId.CreateBuilder();
                                if (result.hasId)
                                {
                                    subBuilder.MergeFrom(Id);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Id = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                global::bgs.protocol.channel.v2.UniqueChannelType.Builder subBuilder = global::bgs.protocol.channel.v2.UniqueChannelType.CreateBuilder();
                                if (result.hasType)
                                {
                                    subBuilder.MergeFrom(Type);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Type = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                result.hasName = input.ReadString(ref result.name_);
                                break;
                            }
                        case 32:
                            {
                                object unknown;
                                if (input.ReadEnum(ref result.privacyLevel_, out unknown))
                                {
                                    result.hasPrivacyLevel = true;
                                }
                                else if (unknown is int)
                                {
                                    if (unknownFields == null)
                                    {
                                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                    }
                                    unknownFields.MergeVarintField(4, (ulong)(int)unknown);
                                }
                                break;
                            }
                        case 42:
                            {
                                input.ReadMessageArray(tag, field_name, result.attribute_, global::bgs.protocol.v2.Attribute.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 50:
                            {
                                input.ReadMessageArray(tag, field_name, result.member_, global::bgs.protocol.channel.v2.Member.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 58:
                            {
                                input.ReadMessageArray(tag, field_name, result.invitation_, global::bgs.protocol.channel.v2.ChannelInvitation.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 66:
                            {
                                global::bgs.protocol.channel.ChannelRoleSet.Builder subBuilder = global::bgs.protocol.channel.ChannelRoleSet.CreateBuilder();
                                if (result.hasRoleSet)
                                {
                                    subBuilder.MergeFrom(RoleSet);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                RoleSet = subBuilder.BuildPartial();
                                break;
                            }
                        case 882:
                            {
                                global::bgs.protocol.channel.v2.PublicChannelState.Builder subBuilder = global::bgs.protocol.channel.v2.PublicChannelState.CreateBuilder();
                                if (result.hasPublicChannelState)
                                {
                                    subBuilder.MergeFrom(PublicChannelState);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                PublicChannelState = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasId
            {
                get { return result.hasId; }
            }
            public global::bgs.protocol.channel.v2.ChannelId Id
            {
                get { return result.Id; }
                set { SetId(value); }
            }
            public Builder SetId(global::bgs.protocol.channel.v2.ChannelId value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasId = true;
                result.id_ = value;
                return this;
            }
            public Builder SetId(global::bgs.protocol.channel.v2.ChannelId.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasId = true;
                result.id_ = builderForValue.Build();
                return this;
            }
            public Builder MergeId(global::bgs.protocol.channel.v2.ChannelId value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasId &&
                    result.id_ != global::bgs.protocol.channel.v2.ChannelId.DefaultInstance)
                {
                    result.id_ = global::bgs.protocol.channel.v2.ChannelId.CreateBuilder(result.id_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.id_ = value;
                }
                result.hasId = true;
                return this;
            }
            public Builder ClearId()
            {
                PrepareBuilder();
                result.hasId = false;
                result.id_ = null;
                return this;
            }

            public bool HasType
            {
                get { return result.hasType; }
            }
            public global::bgs.protocol.channel.v2.UniqueChannelType Type
            {
                get { return result.Type; }
                set { SetType(value); }
            }
            public Builder SetType(global::bgs.protocol.channel.v2.UniqueChannelType value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
            }
            public Builder SetType(global::bgs.protocol.channel.v2.UniqueChannelType.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasType = true;
                result.type_ = builderForValue.Build();
                return this;
            }
            public Builder MergeType(global::bgs.protocol.channel.v2.UniqueChannelType value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasType &&
                    result.type_ != global::bgs.protocol.channel.v2.UniqueChannelType.DefaultInstance)
                {
                    result.type_ = global::bgs.protocol.channel.v2.UniqueChannelType.CreateBuilder(result.type_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.type_ = value;
                }
                result.hasType = true;
                return this;
            }
            public Builder ClearType()
            {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = null;
                return this;
            }

            public bool HasName
            {
                get { return result.hasName; }
            }
            public string Name
            {
                get { return result.Name; }
                set { SetName(value); }
            }
            public Builder SetName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasName = true;
                result.name_ = value;
                return this;
            }
            public Builder ClearName()
            {
                PrepareBuilder();
                result.hasName = false;
                result.name_ = "";
                return this;
            }

            public bool HasPrivacyLevel
            {
                get { return result.hasPrivacyLevel; }
            }
            public global::bgs.protocol.channel.v2.PrivacyLevel PrivacyLevel
            {
                get { return result.PrivacyLevel; }
                set { SetPrivacyLevel(value); }
            }
            public Builder SetPrivacyLevel(global::bgs.protocol.channel.v2.PrivacyLevel value)
            {
                PrepareBuilder();
                result.hasPrivacyLevel = true;
                result.privacyLevel_ = value;
                return this;
            }
            public Builder ClearPrivacyLevel()
            {
                PrepareBuilder();
                result.hasPrivacyLevel = false;
                result.privacyLevel_ = global::bgs.protocol.channel.v2.PrivacyLevel.PRIVACY_LEVEL_OPEN;
                return this;
            }

            public pbc::IPopsicleList<global::bgs.protocol.v2.Attribute> AttributeList
            {
                get { return PrepareBuilder().attribute_; }
            }
            public int AttributeCount
            {
                get { return result.AttributeCount; }
            }
            public global::bgs.protocol.v2.Attribute GetAttribute(int index)
            {
                return result.GetAttribute(index);
            }
            public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.attribute_[index] = value;
                return this;
            }
            public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.attribute_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddAttribute(global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.attribute_.Add(value);
                return this;
            }
            public Builder AddAttribute(global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.attribute_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeAttribute(scg::IEnumerable<global::bgs.protocol.v2.Attribute> values)
            {
                PrepareBuilder();
                result.attribute_.Add(values);
                return this;
            }
            public Builder ClearAttribute()
            {
                PrepareBuilder();
                result.attribute_.Clear();
                return this;
            }

            public pbc::IPopsicleList<global::bgs.protocol.channel.v2.Member> MemberList
            {
                get { return PrepareBuilder().member_; }
            }
            public int MemberCount
            {
                get { return result.MemberCount; }
            }
            public global::bgs.protocol.channel.v2.Member GetMember(int index)
            {
                return result.GetMember(index);
            }
            public Builder SetMember(int index, global::bgs.protocol.channel.v2.Member value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.member_[index] = value;
                return this;
            }
            public Builder SetMember(int index, global::bgs.protocol.channel.v2.Member.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.member_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddMember(global::bgs.protocol.channel.v2.Member value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.member_.Add(value);
                return this;
            }
            public Builder AddMember(global::bgs.protocol.channel.v2.Member.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.member_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeMember(scg::IEnumerable<global::bgs.protocol.channel.v2.Member> values)
            {
                PrepareBuilder();
                result.member_.Add(values);
                return this;
            }
            public Builder ClearMember()
            {
                PrepareBuilder();
                result.member_.Clear();
                return this;
            }

            public pbc::IPopsicleList<global::bgs.protocol.channel.v2.ChannelInvitation> InvitationList
            {
                get { return PrepareBuilder().invitation_; }
            }
            public int InvitationCount
            {
                get { return result.InvitationCount; }
            }
            public global::bgs.protocol.channel.v2.ChannelInvitation GetInvitation(int index)
            {
                return result.GetInvitation(index);
            }
            public Builder SetInvitation(int index, global::bgs.protocol.channel.v2.ChannelInvitation value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.invitation_[index] = value;
                return this;
            }
            public Builder SetInvitation(int index, global::bgs.protocol.channel.v2.ChannelInvitation.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.invitation_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddInvitation(global::bgs.protocol.channel.v2.ChannelInvitation value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.invitation_.Add(value);
                return this;
            }
            public Builder AddInvitation(global::bgs.protocol.channel.v2.ChannelInvitation.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.invitation_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeInvitation(scg::IEnumerable<global::bgs.protocol.channel.v2.ChannelInvitation> values)
            {
                PrepareBuilder();
                result.invitation_.Add(values);
                return this;
            }
            public Builder ClearInvitation()
            {
                PrepareBuilder();
                result.invitation_.Clear();
                return this;
            }

            public bool HasRoleSet
            {
                get { return result.hasRoleSet; }
            }
            public global::bgs.protocol.channel.ChannelRoleSet RoleSet
            {
                get { return result.RoleSet; }
                set { SetRoleSet(value); }
            }
            public Builder SetRoleSet(global::bgs.protocol.channel.ChannelRoleSet value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasRoleSet = true;
                result.roleSet_ = value;
                return this;
            }
            public Builder SetRoleSet(global::bgs.protocol.channel.ChannelRoleSet.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasRoleSet = true;
                result.roleSet_ = builderForValue.Build();
                return this;
            }
            public Builder MergeRoleSet(global::bgs.protocol.channel.ChannelRoleSet value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasRoleSet &&
                    result.roleSet_ != global::bgs.protocol.channel.ChannelRoleSet.DefaultInstance)
                {
                    result.roleSet_ = global::bgs.protocol.channel.ChannelRoleSet.CreateBuilder(result.roleSet_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.roleSet_ = value;
                }
                result.hasRoleSet = true;
                return this;
            }
            public Builder ClearRoleSet()
            {
                PrepareBuilder();
                result.hasRoleSet = false;
                result.roleSet_ = null;
                return this;
            }

            public bool HasPublicChannelState
            {
                get { return result.hasPublicChannelState; }
            }
            public global::bgs.protocol.channel.v2.PublicChannelState PublicChannelState
            {
                get { return result.PublicChannelState; }
                set { SetPublicChannelState(value); }
            }
            public Builder SetPublicChannelState(global::bgs.protocol.channel.v2.PublicChannelState value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPublicChannelState = true;
                result.publicChannelState_ = value;
                return this;
            }
            public Builder SetPublicChannelState(global::bgs.protocol.channel.v2.PublicChannelState.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasPublicChannelState = true;
                result.publicChannelState_ = builderForValue.Build();
                return this;
            }
            public Builder MergePublicChannelState(global::bgs.protocol.channel.v2.PublicChannelState value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasPublicChannelState &&
                    result.publicChannelState_ != global::bgs.protocol.channel.v2.PublicChannelState.DefaultInstance)
                {
                    result.publicChannelState_ = global::bgs.protocol.channel.v2.PublicChannelState.CreateBuilder(result.publicChannelState_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.publicChannelState_ = value;
                }
                result.hasPublicChannelState = true;
                return this;
            }
            public Builder ClearPublicChannelState()
            {
                PrepareBuilder();
                result.hasPublicChannelState = false;
                result.publicChannelState_ = null;
                return this;
            }
        }
        static Channel()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class ChannelDescription : pb::GeneratedMessage<ChannelDescription, ChannelDescription.Builder>
    {
        private ChannelDescription() { }
        private static readonly ChannelDescription defaultInstance = new ChannelDescription().MakeReadOnly();
        private static readonly string[] _channelDescriptionFieldNames = new string[] { "attribute", "id", "member_count", "name", "privacy_level", "public_channel_state", "type" };
        private static readonly uint[] _channelDescriptionFieldTags = new uint[] { 42, 10, 48, 26, 32, 882, 18 };
        public static ChannelDescription DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ChannelDescription DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ChannelDescription ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_ChannelDescription__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ChannelDescription, ChannelDescription.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_ChannelDescription__FieldAccessorTable; }
        }

        public const int IdFieldNumber = 1;
        private bool hasId;
        private global::bgs.protocol.channel.v2.ChannelId id_;
        public bool HasId
        {
            get { return hasId; }
        }
        public global::bgs.protocol.channel.v2.ChannelId Id
        {
            get { return id_ ?? global::bgs.protocol.channel.v2.ChannelId.DefaultInstance; }
        }

        public const int TypeFieldNumber = 2;
        private bool hasType;
        private global::bgs.protocol.channel.v2.UniqueChannelType type_;
        public bool HasType
        {
            get { return hasType; }
        }
        public global::bgs.protocol.channel.v2.UniqueChannelType Type
        {
            get { return type_ ?? global::bgs.protocol.channel.v2.UniqueChannelType.DefaultInstance; }
        }

        public const int NameFieldNumber = 3;
        private bool hasName;
        private string name_ = "";
        public bool HasName
        {
            get { return hasName; }
        }
        public string Name
        {
            get { return name_; }
        }

        public const int PrivacyLevelFieldNumber = 4;
        private bool hasPrivacyLevel;
        private global::bgs.protocol.channel.v2.PrivacyLevel privacyLevel_ = global::bgs.protocol.channel.v2.PrivacyLevel.PRIVACY_LEVEL_OPEN;
        public bool HasPrivacyLevel
        {
            get { return hasPrivacyLevel; }
        }
        public global::bgs.protocol.channel.v2.PrivacyLevel PrivacyLevel
        {
            get { return privacyLevel_; }
        }

        public const int AttributeFieldNumber = 5;
        private pbc::PopsicleList<global::bgs.protocol.v2.Attribute> attribute_ = new pbc::PopsicleList<global::bgs.protocol.v2.Attribute>();
        public scg::IList<global::bgs.protocol.v2.Attribute> AttributeList
        {
            get { return attribute_; }
        }
        public int AttributeCount
        {
            get { return attribute_.Count; }
        }
        public global::bgs.protocol.v2.Attribute GetAttribute(int index)
        {
            return attribute_[index];
        }

        public const int MemberCountFieldNumber = 6;
        private bool hasMemberCount;
        private uint memberCount_;
        public bool HasMemberCount
        {
            get { return hasMemberCount; }
        }
        public uint MemberCount
        {
            get { return memberCount_; }
        }

        public const int PublicChannelStateFieldNumber = 110;
        private bool hasPublicChannelState;
        private global::bgs.protocol.channel.v2.PublicChannelState publicChannelState_;
        public bool HasPublicChannelState
        {
            get { return hasPublicChannelState; }
        }
        public global::bgs.protocol.channel.v2.PublicChannelState PublicChannelState
        {
            get { return publicChannelState_ ?? global::bgs.protocol.channel.v2.PublicChannelState.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasId)
                {
                    if (!Id.IsInitialized) return false;
                }
                if (HasPublicChannelState)
                {
                    if (!PublicChannelState.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _channelDescriptionFieldNames;
            if (hasId)
            {
                output.WriteMessage(1, field_names[1], Id);
            }
            if (hasType)
            {
                output.WriteMessage(2, field_names[6], Type);
            }
            if (hasName)
            {
                output.WriteString(3, field_names[3], Name);
            }
            if (hasPrivacyLevel)
            {
                output.WriteEnum(4, field_names[4], (int)PrivacyLevel, PrivacyLevel);
            }
            if (attribute_.Count > 0)
            {
                output.WriteMessageArray(5, field_names[0], attribute_);
            }
            if (hasMemberCount)
            {
                output.WriteUInt32(6, field_names[2], MemberCount);
            }
            if (hasPublicChannelState)
            {
                output.WriteMessage(110, field_names[5], PublicChannelState);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasId)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, Id);
                }
                if (hasType)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, Type);
                }
                if (hasName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, Name);
                }
                if (hasPrivacyLevel)
                {
                    size += pb::CodedOutputStream.ComputeEnumSize(4, (int)PrivacyLevel);
                }
                foreach (global::bgs.protocol.v2.Attribute element in AttributeList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(5, element);
                }
                if (hasMemberCount)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(6, MemberCount);
                }
                if (hasPublicChannelState)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(110, PublicChannelState);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ChannelDescription ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChannelDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChannelDescription ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChannelDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChannelDescription ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChannelDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ChannelDescription ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ChannelDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ChannelDescription ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChannelDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ChannelDescription MakeReadOnly()
        {
            attribute_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ChannelDescription prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<ChannelDescription, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ChannelDescription cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ChannelDescription result;

            private ChannelDescription PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ChannelDescription original = result;
                    result = new ChannelDescription();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ChannelDescription MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.ChannelDescription.Descriptor; }
            }

            public override ChannelDescription DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.ChannelDescription.DefaultInstance; }
            }

            public override ChannelDescription BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ChannelDescription)
                {
                    return MergeFrom((ChannelDescription)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ChannelDescription other)
            {
                if (other == global::bgs.protocol.channel.v2.ChannelDescription.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasId)
                {
                    MergeId(other.Id);
                }
                if (other.HasType)
                {
                    MergeType(other.Type);
                }
                if (other.HasName)
                {
                    Name = other.Name;
                }
                if (other.HasPrivacyLevel)
                {
                    PrivacyLevel = other.PrivacyLevel;
                }
                if (other.attribute_.Count != 0)
                {
                    result.attribute_.Add(other.attribute_);
                }
                if (other.HasMemberCount)
                {
                    MemberCount = other.MemberCount;
                }
                if (other.HasPublicChannelState)
                {
                    MergePublicChannelState(other.PublicChannelState);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_channelDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _channelDescriptionFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::bgs.protocol.channel.v2.ChannelId.Builder subBuilder = global::bgs.protocol.channel.v2.ChannelId.CreateBuilder();
                                if (result.hasId)
                                {
                                    subBuilder.MergeFrom(Id);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Id = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                global::bgs.protocol.channel.v2.UniqueChannelType.Builder subBuilder = global::bgs.protocol.channel.v2.UniqueChannelType.CreateBuilder();
                                if (result.hasType)
                                {
                                    subBuilder.MergeFrom(Type);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Type = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                result.hasName = input.ReadString(ref result.name_);
                                break;
                            }
                        case 32:
                            {
                                object unknown;
                                if (input.ReadEnum(ref result.privacyLevel_, out unknown))
                                {
                                    result.hasPrivacyLevel = true;
                                }
                                else if (unknown is int)
                                {
                                    if (unknownFields == null)
                                    {
                                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                    }
                                    unknownFields.MergeVarintField(4, (ulong)(int)unknown);
                                }
                                break;
                            }
                        case 42:
                            {
                                input.ReadMessageArray(tag, field_name, result.attribute_, global::bgs.protocol.v2.Attribute.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 48:
                            {
                                result.hasMemberCount = input.ReadUInt32(ref result.memberCount_);
                                break;
                            }
                        case 882:
                            {
                                global::bgs.protocol.channel.v2.PublicChannelState.Builder subBuilder = global::bgs.protocol.channel.v2.PublicChannelState.CreateBuilder();
                                if (result.hasPublicChannelState)
                                {
                                    subBuilder.MergeFrom(PublicChannelState);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                PublicChannelState = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasId
            {
                get { return result.hasId; }
            }
            public global::bgs.protocol.channel.v2.ChannelId Id
            {
                get { return result.Id; }
                set { SetId(value); }
            }
            public Builder SetId(global::bgs.protocol.channel.v2.ChannelId value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasId = true;
                result.id_ = value;
                return this;
            }
            public Builder SetId(global::bgs.protocol.channel.v2.ChannelId.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasId = true;
                result.id_ = builderForValue.Build();
                return this;
            }
            public Builder MergeId(global::bgs.protocol.channel.v2.ChannelId value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasId &&
                    result.id_ != global::bgs.protocol.channel.v2.ChannelId.DefaultInstance)
                {
                    result.id_ = global::bgs.protocol.channel.v2.ChannelId.CreateBuilder(result.id_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.id_ = value;
                }
                result.hasId = true;
                return this;
            }
            public Builder ClearId()
            {
                PrepareBuilder();
                result.hasId = false;
                result.id_ = null;
                return this;
            }

            public bool HasType
            {
                get { return result.hasType; }
            }
            public global::bgs.protocol.channel.v2.UniqueChannelType Type
            {
                get { return result.Type; }
                set { SetType(value); }
            }
            public Builder SetType(global::bgs.protocol.channel.v2.UniqueChannelType value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
            }
            public Builder SetType(global::bgs.protocol.channel.v2.UniqueChannelType.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasType = true;
                result.type_ = builderForValue.Build();
                return this;
            }
            public Builder MergeType(global::bgs.protocol.channel.v2.UniqueChannelType value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasType &&
                    result.type_ != global::bgs.protocol.channel.v2.UniqueChannelType.DefaultInstance)
                {
                    result.type_ = global::bgs.protocol.channel.v2.UniqueChannelType.CreateBuilder(result.type_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.type_ = value;
                }
                result.hasType = true;
                return this;
            }
            public Builder ClearType()
            {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = null;
                return this;
            }

            public bool HasName
            {
                get { return result.hasName; }
            }
            public string Name
            {
                get { return result.Name; }
                set { SetName(value); }
            }
            public Builder SetName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasName = true;
                result.name_ = value;
                return this;
            }
            public Builder ClearName()
            {
                PrepareBuilder();
                result.hasName = false;
                result.name_ = "";
                return this;
            }

            public bool HasPrivacyLevel
            {
                get { return result.hasPrivacyLevel; }
            }
            public global::bgs.protocol.channel.v2.PrivacyLevel PrivacyLevel
            {
                get { return result.PrivacyLevel; }
                set { SetPrivacyLevel(value); }
            }
            public Builder SetPrivacyLevel(global::bgs.protocol.channel.v2.PrivacyLevel value)
            {
                PrepareBuilder();
                result.hasPrivacyLevel = true;
                result.privacyLevel_ = value;
                return this;
            }
            public Builder ClearPrivacyLevel()
            {
                PrepareBuilder();
                result.hasPrivacyLevel = false;
                result.privacyLevel_ = global::bgs.protocol.channel.v2.PrivacyLevel.PRIVACY_LEVEL_OPEN;
                return this;
            }

            public pbc::IPopsicleList<global::bgs.protocol.v2.Attribute> AttributeList
            {
                get { return PrepareBuilder().attribute_; }
            }
            public int AttributeCount
            {
                get { return result.AttributeCount; }
            }
            public global::bgs.protocol.v2.Attribute GetAttribute(int index)
            {
                return result.GetAttribute(index);
            }
            public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.attribute_[index] = value;
                return this;
            }
            public Builder SetAttribute(int index, global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.attribute_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddAttribute(global::bgs.protocol.v2.Attribute value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.attribute_.Add(value);
                return this;
            }
            public Builder AddAttribute(global::bgs.protocol.v2.Attribute.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.attribute_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeAttribute(scg::IEnumerable<global::bgs.protocol.v2.Attribute> values)
            {
                PrepareBuilder();
                result.attribute_.Add(values);
                return this;
            }
            public Builder ClearAttribute()
            {
                PrepareBuilder();
                result.attribute_.Clear();
                return this;
            }

            public bool HasMemberCount
            {
                get { return result.hasMemberCount; }
            }
            public uint MemberCount
            {
                get { return result.MemberCount; }
                set { SetMemberCount(value); }
            }
            public Builder SetMemberCount(uint value)
            {
                PrepareBuilder();
                result.hasMemberCount = true;
                result.memberCount_ = value;
                return this;
            }
            public Builder ClearMemberCount()
            {
                PrepareBuilder();
                result.hasMemberCount = false;
                result.memberCount_ = 0;
                return this;
            }

            public bool HasPublicChannelState
            {
                get { return result.hasPublicChannelState; }
            }
            public global::bgs.protocol.channel.v2.PublicChannelState PublicChannelState
            {
                get { return result.PublicChannelState; }
                set { SetPublicChannelState(value); }
            }
            public Builder SetPublicChannelState(global::bgs.protocol.channel.v2.PublicChannelState value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPublicChannelState = true;
                result.publicChannelState_ = value;
                return this;
            }
            public Builder SetPublicChannelState(global::bgs.protocol.channel.v2.PublicChannelState.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasPublicChannelState = true;
                result.publicChannelState_ = builderForValue.Build();
                return this;
            }
            public Builder MergePublicChannelState(global::bgs.protocol.channel.v2.PublicChannelState value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasPublicChannelState &&
                    result.publicChannelState_ != global::bgs.protocol.channel.v2.PublicChannelState.DefaultInstance)
                {
                    result.publicChannelState_ = global::bgs.protocol.channel.v2.PublicChannelState.CreateBuilder(result.publicChannelState_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.publicChannelState_ = value;
                }
                result.hasPublicChannelState = true;
                return this;
            }
            public Builder ClearPublicChannelState()
            {
                PrepareBuilder();
                result.hasPublicChannelState = false;
                result.publicChannelState_ = null;
                return this;
            }
        }
        static ChannelDescription()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class ChannelMembershipState : pb::GeneratedMessage<ChannelMembershipState, ChannelMembershipState.Builder>
    {
        private ChannelMembershipState() { }
        private static readonly ChannelMembershipState defaultInstance = new ChannelMembershipState().MakeReadOnly();
        private static readonly string[] _channelMembershipStateFieldNames = new string[] { "description", "invitation" };
        private static readonly uint[] _channelMembershipStateFieldTags = new uint[] { 10, 18 };
        public static ChannelMembershipState DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ChannelMembershipState DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ChannelMembershipState ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_ChannelMembershipState__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ChannelMembershipState, ChannelMembershipState.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_ChannelMembershipState__FieldAccessorTable; }
        }

        public const int DescriptionFieldNumber = 1;
        private pbc::PopsicleList<global::bgs.protocol.channel.v2.ChannelDescription> description_ = new pbc::PopsicleList<global::bgs.protocol.channel.v2.ChannelDescription>();
        public scg::IList<global::bgs.protocol.channel.v2.ChannelDescription> DescriptionList
        {
            get { return description_; }
        }
        public int DescriptionCount
        {
            get { return description_.Count; }
        }
        public global::bgs.protocol.channel.v2.ChannelDescription GetDescription(int index)
        {
            return description_[index];
        }

        public const int InvitationFieldNumber = 2;
        private pbc::PopsicleList<global::bgs.protocol.channel.v2.ChannelInvitation> invitation_ = new pbc::PopsicleList<global::bgs.protocol.channel.v2.ChannelInvitation>();
        public scg::IList<global::bgs.protocol.channel.v2.ChannelInvitation> InvitationList
        {
            get { return invitation_; }
        }
        public int InvitationCount
        {
            get { return invitation_.Count; }
        }
        public global::bgs.protocol.channel.v2.ChannelInvitation GetInvitation(int index)
        {
            return invitation_[index];
        }

        public override bool IsInitialized
        {
            get
            {
                foreach (global::bgs.protocol.channel.v2.ChannelDescription element in DescriptionList)
                {
                    if (!element.IsInitialized) return false;
                }
                foreach (global::bgs.protocol.channel.v2.ChannelInvitation element in InvitationList)
                {
                    if (!element.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _channelMembershipStateFieldNames;
            if (description_.Count > 0)
            {
                output.WriteMessageArray(1, field_names[0], description_);
            }
            if (invitation_.Count > 0)
            {
                output.WriteMessageArray(2, field_names[1], invitation_);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                foreach (global::bgs.protocol.channel.v2.ChannelDescription element in DescriptionList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, element);
                }
                foreach (global::bgs.protocol.channel.v2.ChannelInvitation element in InvitationList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ChannelMembershipState ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChannelMembershipState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChannelMembershipState ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChannelMembershipState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChannelMembershipState ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChannelMembershipState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ChannelMembershipState ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ChannelMembershipState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ChannelMembershipState ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChannelMembershipState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ChannelMembershipState MakeReadOnly()
        {
            description_.MakeReadOnly();
            invitation_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ChannelMembershipState prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<ChannelMembershipState, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ChannelMembershipState cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ChannelMembershipState result;

            private ChannelMembershipState PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ChannelMembershipState original = result;
                    result = new ChannelMembershipState();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ChannelMembershipState MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.ChannelMembershipState.Descriptor; }
            }

            public override ChannelMembershipState DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.ChannelMembershipState.DefaultInstance; }
            }

            public override ChannelMembershipState BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ChannelMembershipState)
                {
                    return MergeFrom((ChannelMembershipState)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ChannelMembershipState other)
            {
                if (other == global::bgs.protocol.channel.v2.ChannelMembershipState.DefaultInstance) return this;
                PrepareBuilder();
                if (other.description_.Count != 0)
                {
                    result.description_.Add(other.description_);
                }
                if (other.invitation_.Count != 0)
                {
                    result.invitation_.Add(other.invitation_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_channelMembershipStateFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _channelMembershipStateFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                input.ReadMessageArray(tag, field_name, result.description_, global::bgs.protocol.channel.v2.ChannelDescription.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 18:
                            {
                                input.ReadMessageArray(tag, field_name, result.invitation_, global::bgs.protocol.channel.v2.ChannelInvitation.DefaultInstance, extensionRegistry);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public pbc::IPopsicleList<global::bgs.protocol.channel.v2.ChannelDescription> DescriptionList
            {
                get { return PrepareBuilder().description_; }
            }
            public int DescriptionCount
            {
                get { return result.DescriptionCount; }
            }
            public global::bgs.protocol.channel.v2.ChannelDescription GetDescription(int index)
            {
                return result.GetDescription(index);
            }
            public Builder SetDescription(int index, global::bgs.protocol.channel.v2.ChannelDescription value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.description_[index] = value;
                return this;
            }
            public Builder SetDescription(int index, global::bgs.protocol.channel.v2.ChannelDescription.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.description_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddDescription(global::bgs.protocol.channel.v2.ChannelDescription value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.description_.Add(value);
                return this;
            }
            public Builder AddDescription(global::bgs.protocol.channel.v2.ChannelDescription.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.description_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeDescription(scg::IEnumerable<global::bgs.protocol.channel.v2.ChannelDescription> values)
            {
                PrepareBuilder();
                result.description_.Add(values);
                return this;
            }
            public Builder ClearDescription()
            {
                PrepareBuilder();
                result.description_.Clear();
                return this;
            }

            public pbc::IPopsicleList<global::bgs.protocol.channel.v2.ChannelInvitation> InvitationList
            {
                get { return PrepareBuilder().invitation_; }
            }
            public int InvitationCount
            {
                get { return result.InvitationCount; }
            }
            public global::bgs.protocol.channel.v2.ChannelInvitation GetInvitation(int index)
            {
                return result.GetInvitation(index);
            }
            public Builder SetInvitation(int index, global::bgs.protocol.channel.v2.ChannelInvitation value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.invitation_[index] = value;
                return this;
            }
            public Builder SetInvitation(int index, global::bgs.protocol.channel.v2.ChannelInvitation.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.invitation_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddInvitation(global::bgs.protocol.channel.v2.ChannelInvitation value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.invitation_.Add(value);
                return this;
            }
            public Builder AddInvitation(global::bgs.protocol.channel.v2.ChannelInvitation.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.invitation_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeInvitation(scg::IEnumerable<global::bgs.protocol.channel.v2.ChannelInvitation> values)
            {
                PrepareBuilder();
                result.invitation_.Add(values);
                return this;
            }
            public Builder ClearInvitation()
            {
                PrepareBuilder();
                result.invitation_.Clear();
                return this;
            }
        }
        static ChannelMembershipState()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class ChannelSlot : pb::GeneratedMessage<ChannelSlot, ChannelSlot.Builder>
    {
        private ChannelSlot() { }
        private static readonly ChannelSlot defaultInstance = new ChannelSlot().MakeReadOnly();
        private static readonly string[] _channelSlotFieldNames = new string[] { "rejoin", "reserved" };
        private static readonly uint[] _channelSlotFieldTags = new uint[] { 16, 8 };
        public static ChannelSlot DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ChannelSlot DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ChannelSlot ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_ChannelSlot__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ChannelSlot, ChannelSlot.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_ChannelSlot__FieldAccessorTable; }
        }

        public const int ReservedFieldNumber = 1;
        private bool hasReserved;
        private bool reserved_;
        public bool HasReserved
        {
            get { return hasReserved; }
        }
        public bool Reserved
        {
            get { return reserved_; }
        }

        public const int RejoinFieldNumber = 2;
        private bool hasRejoin;
        private bool rejoin_;
        public bool HasRejoin
        {
            get { return hasRejoin; }
        }
        public bool Rejoin
        {
            get { return rejoin_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _channelSlotFieldNames;
            if (hasReserved)
            {
                output.WriteBool(1, field_names[1], Reserved);
            }
            if (hasRejoin)
            {
                output.WriteBool(2, field_names[0], Rejoin);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasReserved)
                {
                    size += pb::CodedOutputStream.ComputeBoolSize(1, Reserved);
                }
                if (hasRejoin)
                {
                    size += pb::CodedOutputStream.ComputeBoolSize(2, Rejoin);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ChannelSlot ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChannelSlot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChannelSlot ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChannelSlot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChannelSlot ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChannelSlot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ChannelSlot ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ChannelSlot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ChannelSlot ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChannelSlot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ChannelSlot MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ChannelSlot prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<ChannelSlot, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ChannelSlot cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ChannelSlot result;

            private ChannelSlot PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ChannelSlot original = result;
                    result = new ChannelSlot();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ChannelSlot MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.ChannelSlot.Descriptor; }
            }

            public override ChannelSlot DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.ChannelSlot.DefaultInstance; }
            }

            public override ChannelSlot BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ChannelSlot)
                {
                    return MergeFrom((ChannelSlot)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ChannelSlot other)
            {
                if (other == global::bgs.protocol.channel.v2.ChannelSlot.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasReserved)
                {
                    Reserved = other.Reserved;
                }
                if (other.HasRejoin)
                {
                    Rejoin = other.Rejoin;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_channelSlotFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _channelSlotFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasReserved = input.ReadBool(ref result.reserved_);
                                break;
                            }
                        case 16:
                            {
                                result.hasRejoin = input.ReadBool(ref result.rejoin_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasReserved
            {
                get { return result.hasReserved; }
            }
            public bool Reserved
            {
                get { return result.Reserved; }
                set { SetReserved(value); }
            }
            public Builder SetReserved(bool value)
            {
                PrepareBuilder();
                result.hasReserved = true;
                result.reserved_ = value;
                return this;
            }
            public Builder ClearReserved()
            {
                PrepareBuilder();
                result.hasReserved = false;
                result.reserved_ = false;
                return this;
            }

            public bool HasRejoin
            {
                get { return result.hasRejoin; }
            }
            public bool Rejoin
            {
                get { return result.Rejoin; }
                set { SetRejoin(value); }
            }
            public Builder SetRejoin(bool value)
            {
                PrepareBuilder();
                result.hasRejoin = true;
                result.rejoin_ = value;
                return this;
            }
            public Builder ClearRejoin()
            {
                PrepareBuilder();
                result.hasRejoin = false;
                result.rejoin_ = false;
                return this;
            }
        }
        static ChannelSlot()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class SendInvitationOptions : pb::GeneratedMessage<SendInvitationOptions, SendInvitationOptions.Builder>
    {
        private SendInvitationOptions() { }
        private static readonly SendInvitationOptions defaultInstance = new SendInvitationOptions().MakeReadOnly();
        private static readonly string[] _sendInvitationOptionsFieldNames = new string[] { "channel_id", "slot", "target_id" };
        private static readonly uint[] _sendInvitationOptionsFieldTags = new uint[] { 10, 26, 18 };
        public static SendInvitationOptions DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override SendInvitationOptions DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override SendInvitationOptions ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_SendInvitationOptions__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<SendInvitationOptions, SendInvitationOptions.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_SendInvitationOptions__FieldAccessorTable; }
        }

        public const int ChannelIdFieldNumber = 1;
        private bool hasChannelId;
        private global::bgs.protocol.channel.v2.ChannelId channelId_;
        public bool HasChannelId
        {
            get { return hasChannelId; }
        }
        public global::bgs.protocol.channel.v2.ChannelId ChannelId
        {
            get { return channelId_ ?? global::bgs.protocol.channel.v2.ChannelId.DefaultInstance; }
        }

        public const int TargetIdFieldNumber = 2;
        private bool hasTargetId;
        private global::bgs.protocol.account.v1.GameAccountHandle targetId_;
        public bool HasTargetId
        {
            get { return hasTargetId; }
        }
        public global::bgs.protocol.account.v1.GameAccountHandle TargetId
        {
            get { return targetId_ ?? global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance; }
        }

        public const int SlotFieldNumber = 3;
        private bool hasSlot;
        private global::bgs.protocol.channel.v2.ChannelSlot slot_;
        public bool HasSlot
        {
            get { return hasSlot; }
        }
        public global::bgs.protocol.channel.v2.ChannelSlot Slot
        {
            get { return slot_ ?? global::bgs.protocol.channel.v2.ChannelSlot.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasChannelId)
                {
                    if (!ChannelId.IsInitialized) return false;
                }
                if (HasTargetId)
                {
                    if (!TargetId.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _sendInvitationOptionsFieldNames;
            if (hasChannelId)
            {
                output.WriteMessage(1, field_names[0], ChannelId);
            }
            if (hasTargetId)
            {
                output.WriteMessage(2, field_names[2], TargetId);
            }
            if (hasSlot)
            {
                output.WriteMessage(3, field_names[1], Slot);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasChannelId)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, ChannelId);
                }
                if (hasTargetId)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, TargetId);
                }
                if (hasSlot)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, Slot);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static SendInvitationOptions ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SendInvitationOptions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SendInvitationOptions ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SendInvitationOptions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SendInvitationOptions ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SendInvitationOptions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SendInvitationOptions ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SendInvitationOptions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SendInvitationOptions ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SendInvitationOptions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SendInvitationOptions MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SendInvitationOptions prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<SendInvitationOptions, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(SendInvitationOptions cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private SendInvitationOptions result;

            private SendInvitationOptions PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    SendInvitationOptions original = result;
                    result = new SendInvitationOptions();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override SendInvitationOptions MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.SendInvitationOptions.Descriptor; }
            }

            public override SendInvitationOptions DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.SendInvitationOptions.DefaultInstance; }
            }

            public override SendInvitationOptions BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is SendInvitationOptions)
                {
                    return MergeFrom((SendInvitationOptions)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(SendInvitationOptions other)
            {
                if (other == global::bgs.protocol.channel.v2.SendInvitationOptions.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasChannelId)
                {
                    MergeChannelId(other.ChannelId);
                }
                if (other.HasTargetId)
                {
                    MergeTargetId(other.TargetId);
                }
                if (other.HasSlot)
                {
                    MergeSlot(other.Slot);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_sendInvitationOptionsFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _sendInvitationOptionsFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::bgs.protocol.channel.v2.ChannelId.Builder subBuilder = global::bgs.protocol.channel.v2.ChannelId.CreateBuilder();
                                if (result.hasChannelId)
                                {
                                    subBuilder.MergeFrom(ChannelId);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ChannelId = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                global::bgs.protocol.account.v1.GameAccountHandle.Builder subBuilder = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder();
                                if (result.hasTargetId)
                                {
                                    subBuilder.MergeFrom(TargetId);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                TargetId = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                global::bgs.protocol.channel.v2.ChannelSlot.Builder subBuilder = global::bgs.protocol.channel.v2.ChannelSlot.CreateBuilder();
                                if (result.hasSlot)
                                {
                                    subBuilder.MergeFrom(Slot);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Slot = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasChannelId
            {
                get { return result.hasChannelId; }
            }
            public global::bgs.protocol.channel.v2.ChannelId ChannelId
            {
                get { return result.ChannelId; }
                set { SetChannelId(value); }
            }
            public Builder SetChannelId(global::bgs.protocol.channel.v2.ChannelId value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasChannelId = true;
                result.channelId_ = value;
                return this;
            }
            public Builder SetChannelId(global::bgs.protocol.channel.v2.ChannelId.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasChannelId = true;
                result.channelId_ = builderForValue.Build();
                return this;
            }
            public Builder MergeChannelId(global::bgs.protocol.channel.v2.ChannelId value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasChannelId &&
                    result.channelId_ != global::bgs.protocol.channel.v2.ChannelId.DefaultInstance)
                {
                    result.channelId_ = global::bgs.protocol.channel.v2.ChannelId.CreateBuilder(result.channelId_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.channelId_ = value;
                }
                result.hasChannelId = true;
                return this;
            }
            public Builder ClearChannelId()
            {
                PrepareBuilder();
                result.hasChannelId = false;
                result.channelId_ = null;
                return this;
            }

            public bool HasTargetId
            {
                get { return result.hasTargetId; }
            }
            public global::bgs.protocol.account.v1.GameAccountHandle TargetId
            {
                get { return result.TargetId; }
                set { SetTargetId(value); }
            }
            public Builder SetTargetId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasTargetId = true;
                result.targetId_ = value;
                return this;
            }
            public Builder SetTargetId(global::bgs.protocol.account.v1.GameAccountHandle.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasTargetId = true;
                result.targetId_ = builderForValue.Build();
                return this;
            }
            public Builder MergeTargetId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasTargetId &&
                    result.targetId_ != global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance)
                {
                    result.targetId_ = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder(result.targetId_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.targetId_ = value;
                }
                result.hasTargetId = true;
                return this;
            }
            public Builder ClearTargetId()
            {
                PrepareBuilder();
                result.hasTargetId = false;
                result.targetId_ = null;
                return this;
            }

            public bool HasSlot
            {
                get { return result.hasSlot; }
            }
            public global::bgs.protocol.channel.v2.ChannelSlot Slot
            {
                get { return result.Slot; }
                set { SetSlot(value); }
            }
            public Builder SetSlot(global::bgs.protocol.channel.v2.ChannelSlot value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSlot = true;
                result.slot_ = value;
                return this;
            }
            public Builder SetSlot(global::bgs.protocol.channel.v2.ChannelSlot.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasSlot = true;
                result.slot_ = builderForValue.Build();
                return this;
            }
            public Builder MergeSlot(global::bgs.protocol.channel.v2.ChannelSlot value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasSlot &&
                    result.slot_ != global::bgs.protocol.channel.v2.ChannelSlot.DefaultInstance)
                {
                    result.slot_ = global::bgs.protocol.channel.v2.ChannelSlot.CreateBuilder(result.slot_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.slot_ = value;
                }
                result.hasSlot = true;
                return this;
            }
            public Builder ClearSlot()
            {
                PrepareBuilder();
                result.hasSlot = false;
                result.slot_ = null;
                return this;
            }
        }
        static SendInvitationOptions()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class MemberDescription : pb::GeneratedMessage<MemberDescription, MemberDescription.Builder>
    {
        private MemberDescription() { }
        private static readonly MemberDescription defaultInstance = new MemberDescription().MakeReadOnly();
        private static readonly string[] _memberDescriptionFieldNames = new string[] { "battle_tag", "id" };
        private static readonly uint[] _memberDescriptionFieldTags = new uint[] { 18, 10 };
        public static MemberDescription DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override MemberDescription DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override MemberDescription ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_MemberDescription__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<MemberDescription, MemberDescription.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_MemberDescription__FieldAccessorTable; }
        }

        public const int IdFieldNumber = 1;
        private bool hasId;
        private global::bgs.protocol.account.v1.GameAccountHandle id_;
        public bool HasId
        {
            get { return hasId; }
        }
        public global::bgs.protocol.account.v1.GameAccountHandle Id
        {
            get { return id_ ?? global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance; }
        }

        public const int BattleTagFieldNumber = 2;
        private bool hasBattleTag;
        private string battleTag_ = "";
        public bool HasBattleTag
        {
            get { return hasBattleTag; }
        }
        public string BattleTag
        {
            get { return battleTag_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasId)
                {
                    if (!Id.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _memberDescriptionFieldNames;
            if (hasId)
            {
                output.WriteMessage(1, field_names[1], Id);
            }
            if (hasBattleTag)
            {
                output.WriteString(2, field_names[0], BattleTag);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasId)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, Id);
                }
                if (hasBattleTag)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, BattleTag);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static MemberDescription ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MemberDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MemberDescription ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MemberDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MemberDescription ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MemberDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static MemberDescription ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static MemberDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static MemberDescription ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MemberDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private MemberDescription MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(MemberDescription prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<MemberDescription, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(MemberDescription cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private MemberDescription result;

            private MemberDescription PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    MemberDescription original = result;
                    result = new MemberDescription();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override MemberDescription MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.MemberDescription.Descriptor; }
            }

            public override MemberDescription DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.MemberDescription.DefaultInstance; }
            }

            public override MemberDescription BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is MemberDescription)
                {
                    return MergeFrom((MemberDescription)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(MemberDescription other)
            {
                if (other == global::bgs.protocol.channel.v2.MemberDescription.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasId)
                {
                    MergeId(other.Id);
                }
                if (other.HasBattleTag)
                {
                    BattleTag = other.BattleTag;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_memberDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _memberDescriptionFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::bgs.protocol.account.v1.GameAccountHandle.Builder subBuilder = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder();
                                if (result.hasId)
                                {
                                    subBuilder.MergeFrom(Id);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Id = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                result.hasBattleTag = input.ReadString(ref result.battleTag_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasId
            {
                get { return result.hasId; }
            }
            public global::bgs.protocol.account.v1.GameAccountHandle Id
            {
                get { return result.Id; }
                set { SetId(value); }
            }
            public Builder SetId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasId = true;
                result.id_ = value;
                return this;
            }
            public Builder SetId(global::bgs.protocol.account.v1.GameAccountHandle.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasId = true;
                result.id_ = builderForValue.Build();
                return this;
            }
            public Builder MergeId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasId &&
                    result.id_ != global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance)
                {
                    result.id_ = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder(result.id_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.id_ = value;
                }
                result.hasId = true;
                return this;
            }
            public Builder ClearId()
            {
                PrepareBuilder();
                result.hasId = false;
                result.id_ = null;
                return this;
            }

            public bool HasBattleTag
            {
                get { return result.hasBattleTag; }
            }
            public string BattleTag
            {
                get { return result.BattleTag; }
                set { SetBattleTag(value); }
            }
            public Builder SetBattleTag(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBattleTag = true;
                result.battleTag_ = value;
                return this;
            }
            public Builder ClearBattleTag()
            {
                PrepareBuilder();
                result.hasBattleTag = false;
                result.battleTag_ = "";
                return this;
            }
        }
        static MemberDescription()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class ChannelInvitation : pb::GeneratedMessage<ChannelInvitation, ChannelInvitation.Builder>
    {
        private ChannelInvitation() { }
        private static readonly ChannelInvitation defaultInstance = new ChannelInvitation().MakeReadOnly();
        private static readonly string[] _channelInvitationFieldNames = new string[] { "channel", "creation_time", "expiration_time", "id", "invitee", "inviter", "slot" };
        private static readonly uint[] _channelInvitationFieldTags = new uint[] { 34, 56, 64, 9, 26, 18, 42 };
        public static ChannelInvitation DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ChannelInvitation DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ChannelInvitation ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_ChannelInvitation__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ChannelInvitation, ChannelInvitation.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_ChannelInvitation__FieldAccessorTable; }
        }

        public const int IdFieldNumber = 1;
        private bool hasId;
        private ulong id_;
        public bool HasId
        {
            get { return hasId; }
        }
        public ulong Id
        {
            get { return id_; }
        }

        public const int InviterFieldNumber = 2;
        private bool hasInviter;
        private global::bgs.protocol.channel.v2.MemberDescription inviter_;
        public bool HasInviter
        {
            get { return hasInviter; }
        }
        public global::bgs.protocol.channel.v2.MemberDescription Inviter
        {
            get { return inviter_ ?? global::bgs.protocol.channel.v2.MemberDescription.DefaultInstance; }
        }

        public const int InviteeFieldNumber = 3;
        private bool hasInvitee;
        private global::bgs.protocol.channel.v2.MemberDescription invitee_;
        public bool HasInvitee
        {
            get { return hasInvitee; }
        }
        public global::bgs.protocol.channel.v2.MemberDescription Invitee
        {
            get { return invitee_ ?? global::bgs.protocol.channel.v2.MemberDescription.DefaultInstance; }
        }

        public const int ChannelFieldNumber = 4;
        private bool hasChannel;
        private global::bgs.protocol.channel.v2.ChannelDescription channel_;
        public bool HasChannel
        {
            get { return hasChannel; }
        }
        public global::bgs.protocol.channel.v2.ChannelDescription Channel
        {
            get { return channel_ ?? global::bgs.protocol.channel.v2.ChannelDescription.DefaultInstance; }
        }

        public const int SlotFieldNumber = 5;
        private bool hasSlot;
        private global::bgs.protocol.channel.v2.ChannelSlot slot_;
        public bool HasSlot
        {
            get { return hasSlot; }
        }
        public global::bgs.protocol.channel.v2.ChannelSlot Slot
        {
            get { return slot_ ?? global::bgs.protocol.channel.v2.ChannelSlot.DefaultInstance; }
        }

        public const int CreationTimeFieldNumber = 7;
        private bool hasCreationTime;
        private ulong creationTime_;
        public bool HasCreationTime
        {
            get { return hasCreationTime; }
        }
        public ulong CreationTime
        {
            get { return creationTime_; }
        }

        public const int ExpirationTimeFieldNumber = 8;
        private bool hasExpirationTime;
        private ulong expirationTime_;
        public bool HasExpirationTime
        {
            get { return hasExpirationTime; }
        }
        public ulong ExpirationTime
        {
            get { return expirationTime_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasInviter)
                {
                    if (!Inviter.IsInitialized) return false;
                }
                if (HasInvitee)
                {
                    if (!Invitee.IsInitialized) return false;
                }
                if (HasChannel)
                {
                    if (!Channel.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _channelInvitationFieldNames;
            if (hasId)
            {
                output.WriteFixed64(1, field_names[3], Id);
            }
            if (hasInviter)
            {
                output.WriteMessage(2, field_names[5], Inviter);
            }
            if (hasInvitee)
            {
                output.WriteMessage(3, field_names[4], Invitee);
            }
            if (hasChannel)
            {
                output.WriteMessage(4, field_names[0], Channel);
            }
            if (hasSlot)
            {
                output.WriteMessage(5, field_names[6], Slot);
            }
            if (hasCreationTime)
            {
                output.WriteUInt64(7, field_names[1], CreationTime);
            }
            if (hasExpirationTime)
            {
                output.WriteUInt64(8, field_names[2], ExpirationTime);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasId)
                {
                    size += pb::CodedOutputStream.ComputeFixed64Size(1, Id);
                }
                if (hasInviter)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, Inviter);
                }
                if (hasInvitee)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, Invitee);
                }
                if (hasChannel)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(4, Channel);
                }
                if (hasSlot)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(5, Slot);
                }
                if (hasCreationTime)
                {
                    size += pb::CodedOutputStream.ComputeUInt64Size(7, CreationTime);
                }
                if (hasExpirationTime)
                {
                    size += pb::CodedOutputStream.ComputeUInt64Size(8, ExpirationTime);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ChannelInvitation ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChannelInvitation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChannelInvitation ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChannelInvitation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChannelInvitation ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChannelInvitation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ChannelInvitation ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ChannelInvitation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ChannelInvitation ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChannelInvitation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ChannelInvitation MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ChannelInvitation prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<ChannelInvitation, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ChannelInvitation cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ChannelInvitation result;

            private ChannelInvitation PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ChannelInvitation original = result;
                    result = new ChannelInvitation();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ChannelInvitation MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.ChannelInvitation.Descriptor; }
            }

            public override ChannelInvitation DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.ChannelInvitation.DefaultInstance; }
            }

            public override ChannelInvitation BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ChannelInvitation)
                {
                    return MergeFrom((ChannelInvitation)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ChannelInvitation other)
            {
                if (other == global::bgs.protocol.channel.v2.ChannelInvitation.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasId)
                {
                    Id = other.Id;
                }
                if (other.HasInviter)
                {
                    MergeInviter(other.Inviter);
                }
                if (other.HasInvitee)
                {
                    MergeInvitee(other.Invitee);
                }
                if (other.HasChannel)
                {
                    MergeChannel(other.Channel);
                }
                if (other.HasSlot)
                {
                    MergeSlot(other.Slot);
                }
                if (other.HasCreationTime)
                {
                    CreationTime = other.CreationTime;
                }
                if (other.HasExpirationTime)
                {
                    ExpirationTime = other.ExpirationTime;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_channelInvitationFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _channelInvitationFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 9:
                            {
                                result.hasId = input.ReadFixed64(ref result.id_);
                                break;
                            }
                        case 18:
                            {
                                global::bgs.protocol.channel.v2.MemberDescription.Builder subBuilder = global::bgs.protocol.channel.v2.MemberDescription.CreateBuilder();
                                if (result.hasInviter)
                                {
                                    subBuilder.MergeFrom(Inviter);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Inviter = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                global::bgs.protocol.channel.v2.MemberDescription.Builder subBuilder = global::bgs.protocol.channel.v2.MemberDescription.CreateBuilder();
                                if (result.hasInvitee)
                                {
                                    subBuilder.MergeFrom(Invitee);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Invitee = subBuilder.BuildPartial();
                                break;
                            }
                        case 34:
                            {
                                global::bgs.protocol.channel.v2.ChannelDescription.Builder subBuilder = global::bgs.protocol.channel.v2.ChannelDescription.CreateBuilder();
                                if (result.hasChannel)
                                {
                                    subBuilder.MergeFrom(Channel);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Channel = subBuilder.BuildPartial();
                                break;
                            }
                        case 42:
                            {
                                global::bgs.protocol.channel.v2.ChannelSlot.Builder subBuilder = global::bgs.protocol.channel.v2.ChannelSlot.CreateBuilder();
                                if (result.hasSlot)
                                {
                                    subBuilder.MergeFrom(Slot);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Slot = subBuilder.BuildPartial();
                                break;
                            }
                        case 56:
                            {
                                result.hasCreationTime = input.ReadUInt64(ref result.creationTime_);
                                break;
                            }
                        case 64:
                            {
                                result.hasExpirationTime = input.ReadUInt64(ref result.expirationTime_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasId
            {
                get { return result.hasId; }
            }
            public ulong Id
            {
                get { return result.Id; }
                set { SetId(value); }
            }
            public Builder SetId(ulong value)
            {
                PrepareBuilder();
                result.hasId = true;
                result.id_ = value;
                return this;
            }
            public Builder ClearId()
            {
                PrepareBuilder();
                result.hasId = false;
                result.id_ = 0;
                return this;
            }

            public bool HasInviter
            {
                get { return result.hasInviter; }
            }
            public global::bgs.protocol.channel.v2.MemberDescription Inviter
            {
                get { return result.Inviter; }
                set { SetInviter(value); }
            }
            public Builder SetInviter(global::bgs.protocol.channel.v2.MemberDescription value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasInviter = true;
                result.inviter_ = value;
                return this;
            }
            public Builder SetInviter(global::bgs.protocol.channel.v2.MemberDescription.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasInviter = true;
                result.inviter_ = builderForValue.Build();
                return this;
            }
            public Builder MergeInviter(global::bgs.protocol.channel.v2.MemberDescription value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasInviter &&
                    result.inviter_ != global::bgs.protocol.channel.v2.MemberDescription.DefaultInstance)
                {
                    result.inviter_ = global::bgs.protocol.channel.v2.MemberDescription.CreateBuilder(result.inviter_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.inviter_ = value;
                }
                result.hasInviter = true;
                return this;
            }
            public Builder ClearInviter()
            {
                PrepareBuilder();
                result.hasInviter = false;
                result.inviter_ = null;
                return this;
            }

            public bool HasInvitee
            {
                get { return result.hasInvitee; }
            }
            public global::bgs.protocol.channel.v2.MemberDescription Invitee
            {
                get { return result.Invitee; }
                set { SetInvitee(value); }
            }
            public Builder SetInvitee(global::bgs.protocol.channel.v2.MemberDescription value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasInvitee = true;
                result.invitee_ = value;
                return this;
            }
            public Builder SetInvitee(global::bgs.protocol.channel.v2.MemberDescription.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasInvitee = true;
                result.invitee_ = builderForValue.Build();
                return this;
            }
            public Builder MergeInvitee(global::bgs.protocol.channel.v2.MemberDescription value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasInvitee &&
                    result.invitee_ != global::bgs.protocol.channel.v2.MemberDescription.DefaultInstance)
                {
                    result.invitee_ = global::bgs.protocol.channel.v2.MemberDescription.CreateBuilder(result.invitee_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.invitee_ = value;
                }
                result.hasInvitee = true;
                return this;
            }
            public Builder ClearInvitee()
            {
                PrepareBuilder();
                result.hasInvitee = false;
                result.invitee_ = null;
                return this;
            }

            public bool HasChannel
            {
                get { return result.hasChannel; }
            }
            public global::bgs.protocol.channel.v2.ChannelDescription Channel
            {
                get { return result.Channel; }
                set { SetChannel(value); }
            }
            public Builder SetChannel(global::bgs.protocol.channel.v2.ChannelDescription value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasChannel = true;
                result.channel_ = value;
                return this;
            }
            public Builder SetChannel(global::bgs.protocol.channel.v2.ChannelDescription.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasChannel = true;
                result.channel_ = builderForValue.Build();
                return this;
            }
            public Builder MergeChannel(global::bgs.protocol.channel.v2.ChannelDescription value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasChannel &&
                    result.channel_ != global::bgs.protocol.channel.v2.ChannelDescription.DefaultInstance)
                {
                    result.channel_ = global::bgs.protocol.channel.v2.ChannelDescription.CreateBuilder(result.channel_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.channel_ = value;
                }
                result.hasChannel = true;
                return this;
            }
            public Builder ClearChannel()
            {
                PrepareBuilder();
                result.hasChannel = false;
                result.channel_ = null;
                return this;
            }

            public bool HasSlot
            {
                get { return result.hasSlot; }
            }
            public global::bgs.protocol.channel.v2.ChannelSlot Slot
            {
                get { return result.Slot; }
                set { SetSlot(value); }
            }
            public Builder SetSlot(global::bgs.protocol.channel.v2.ChannelSlot value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSlot = true;
                result.slot_ = value;
                return this;
            }
            public Builder SetSlot(global::bgs.protocol.channel.v2.ChannelSlot.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasSlot = true;
                result.slot_ = builderForValue.Build();
                return this;
            }
            public Builder MergeSlot(global::bgs.protocol.channel.v2.ChannelSlot value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasSlot &&
                    result.slot_ != global::bgs.protocol.channel.v2.ChannelSlot.DefaultInstance)
                {
                    result.slot_ = global::bgs.protocol.channel.v2.ChannelSlot.CreateBuilder(result.slot_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.slot_ = value;
                }
                result.hasSlot = true;
                return this;
            }
            public Builder ClearSlot()
            {
                PrepareBuilder();
                result.hasSlot = false;
                result.slot_ = null;
                return this;
            }

            public bool HasCreationTime
            {
                get { return result.hasCreationTime; }
            }
            public ulong CreationTime
            {
                get { return result.CreationTime; }
                set { SetCreationTime(value); }
            }
            public Builder SetCreationTime(ulong value)
            {
                PrepareBuilder();
                result.hasCreationTime = true;
                result.creationTime_ = value;
                return this;
            }
            public Builder ClearCreationTime()
            {
                PrepareBuilder();
                result.hasCreationTime = false;
                result.creationTime_ = 0UL;
                return this;
            }

            public bool HasExpirationTime
            {
                get { return result.hasExpirationTime; }
            }
            public ulong ExpirationTime
            {
                get { return result.ExpirationTime; }
                set { SetExpirationTime(value); }
            }
            public Builder SetExpirationTime(ulong value)
            {
                PrepareBuilder();
                result.hasExpirationTime = true;
                result.expirationTime_ = value;
                return this;
            }
            public Builder ClearExpirationTime()
            {
                PrepareBuilder();
                result.hasExpirationTime = false;
                result.expirationTime_ = 0UL;
                return this;
            }
        }
        static ChannelInvitation()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class SendSuggestionOptions : pb::GeneratedMessage<SendSuggestionOptions, SendSuggestionOptions.Builder>
    {
        private SendSuggestionOptions() { }
        private static readonly SendSuggestionOptions defaultInstance = new SendSuggestionOptions().MakeReadOnly();
        private static readonly string[] _sendSuggestionOptionsFieldNames = new string[] { "approval_id", "channel_id", "target_id" };
        private static readonly uint[] _sendSuggestionOptionsFieldTags = new uint[] { 26, 10, 18 };
        public static SendSuggestionOptions DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override SendSuggestionOptions DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override SendSuggestionOptions ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_SendSuggestionOptions__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<SendSuggestionOptions, SendSuggestionOptions.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_SendSuggestionOptions__FieldAccessorTable; }
        }

        public const int ChannelIdFieldNumber = 1;
        private bool hasChannelId;
        private global::bgs.protocol.channel.v2.ChannelId channelId_;
        public bool HasChannelId
        {
            get { return hasChannelId; }
        }
        public global::bgs.protocol.channel.v2.ChannelId ChannelId
        {
            get { return channelId_ ?? global::bgs.protocol.channel.v2.ChannelId.DefaultInstance; }
        }

        public const int TargetIdFieldNumber = 2;
        private bool hasTargetId;
        private global::bgs.protocol.account.v1.GameAccountHandle targetId_;
        public bool HasTargetId
        {
            get { return hasTargetId; }
        }
        public global::bgs.protocol.account.v1.GameAccountHandle TargetId
        {
            get { return targetId_ ?? global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance; }
        }

        public const int ApprovalIdFieldNumber = 3;
        private bool hasApprovalId;
        private global::bgs.protocol.account.v1.GameAccountHandle approvalId_;
        public bool HasApprovalId
        {
            get { return hasApprovalId; }
        }
        public global::bgs.protocol.account.v1.GameAccountHandle ApprovalId
        {
            get { return approvalId_ ?? global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasChannelId)
                {
                    if (!ChannelId.IsInitialized) return false;
                }
                if (HasTargetId)
                {
                    if (!TargetId.IsInitialized) return false;
                }
                if (HasApprovalId)
                {
                    if (!ApprovalId.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _sendSuggestionOptionsFieldNames;
            if (hasChannelId)
            {
                output.WriteMessage(1, field_names[1], ChannelId);
            }
            if (hasTargetId)
            {
                output.WriteMessage(2, field_names[2], TargetId);
            }
            if (hasApprovalId)
            {
                output.WriteMessage(3, field_names[0], ApprovalId);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasChannelId)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, ChannelId);
                }
                if (hasTargetId)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, TargetId);
                }
                if (hasApprovalId)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, ApprovalId);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static SendSuggestionOptions ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SendSuggestionOptions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SendSuggestionOptions ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SendSuggestionOptions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SendSuggestionOptions ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SendSuggestionOptions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SendSuggestionOptions ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SendSuggestionOptions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SendSuggestionOptions ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SendSuggestionOptions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SendSuggestionOptions MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SendSuggestionOptions prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<SendSuggestionOptions, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(SendSuggestionOptions cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private SendSuggestionOptions result;

            private SendSuggestionOptions PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    SendSuggestionOptions original = result;
                    result = new SendSuggestionOptions();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override SendSuggestionOptions MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.SendSuggestionOptions.Descriptor; }
            }

            public override SendSuggestionOptions DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.SendSuggestionOptions.DefaultInstance; }
            }

            public override SendSuggestionOptions BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is SendSuggestionOptions)
                {
                    return MergeFrom((SendSuggestionOptions)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(SendSuggestionOptions other)
            {
                if (other == global::bgs.protocol.channel.v2.SendSuggestionOptions.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasChannelId)
                {
                    MergeChannelId(other.ChannelId);
                }
                if (other.HasTargetId)
                {
                    MergeTargetId(other.TargetId);
                }
                if (other.HasApprovalId)
                {
                    MergeApprovalId(other.ApprovalId);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_sendSuggestionOptionsFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _sendSuggestionOptionsFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::bgs.protocol.channel.v2.ChannelId.Builder subBuilder = global::bgs.protocol.channel.v2.ChannelId.CreateBuilder();
                                if (result.hasChannelId)
                                {
                                    subBuilder.MergeFrom(ChannelId);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ChannelId = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                global::bgs.protocol.account.v1.GameAccountHandle.Builder subBuilder = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder();
                                if (result.hasTargetId)
                                {
                                    subBuilder.MergeFrom(TargetId);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                TargetId = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                global::bgs.protocol.account.v1.GameAccountHandle.Builder subBuilder = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder();
                                if (result.hasApprovalId)
                                {
                                    subBuilder.MergeFrom(ApprovalId);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ApprovalId = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasChannelId
            {
                get { return result.hasChannelId; }
            }
            public global::bgs.protocol.channel.v2.ChannelId ChannelId
            {
                get { return result.ChannelId; }
                set { SetChannelId(value); }
            }
            public Builder SetChannelId(global::bgs.protocol.channel.v2.ChannelId value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasChannelId = true;
                result.channelId_ = value;
                return this;
            }
            public Builder SetChannelId(global::bgs.protocol.channel.v2.ChannelId.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasChannelId = true;
                result.channelId_ = builderForValue.Build();
                return this;
            }
            public Builder MergeChannelId(global::bgs.protocol.channel.v2.ChannelId value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasChannelId &&
                    result.channelId_ != global::bgs.protocol.channel.v2.ChannelId.DefaultInstance)
                {
                    result.channelId_ = global::bgs.protocol.channel.v2.ChannelId.CreateBuilder(result.channelId_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.channelId_ = value;
                }
                result.hasChannelId = true;
                return this;
            }
            public Builder ClearChannelId()
            {
                PrepareBuilder();
                result.hasChannelId = false;
                result.channelId_ = null;
                return this;
            }

            public bool HasTargetId
            {
                get { return result.hasTargetId; }
            }
            public global::bgs.protocol.account.v1.GameAccountHandle TargetId
            {
                get { return result.TargetId; }
                set { SetTargetId(value); }
            }
            public Builder SetTargetId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasTargetId = true;
                result.targetId_ = value;
                return this;
            }
            public Builder SetTargetId(global::bgs.protocol.account.v1.GameAccountHandle.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasTargetId = true;
                result.targetId_ = builderForValue.Build();
                return this;
            }
            public Builder MergeTargetId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasTargetId &&
                    result.targetId_ != global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance)
                {
                    result.targetId_ = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder(result.targetId_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.targetId_ = value;
                }
                result.hasTargetId = true;
                return this;
            }
            public Builder ClearTargetId()
            {
                PrepareBuilder();
                result.hasTargetId = false;
                result.targetId_ = null;
                return this;
            }

            public bool HasApprovalId
            {
                get { return result.hasApprovalId; }
            }
            public global::bgs.protocol.account.v1.GameAccountHandle ApprovalId
            {
                get { return result.ApprovalId; }
                set { SetApprovalId(value); }
            }
            public Builder SetApprovalId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasApprovalId = true;
                result.approvalId_ = value;
                return this;
            }
            public Builder SetApprovalId(global::bgs.protocol.account.v1.GameAccountHandle.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasApprovalId = true;
                result.approvalId_ = builderForValue.Build();
                return this;
            }
            public Builder MergeApprovalId(global::bgs.protocol.account.v1.GameAccountHandle value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasApprovalId &&
                    result.approvalId_ != global::bgs.protocol.account.v1.GameAccountHandle.DefaultInstance)
                {
                    result.approvalId_ = global::bgs.protocol.account.v1.GameAccountHandle.CreateBuilder(result.approvalId_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.approvalId_ = value;
                }
                result.hasApprovalId = true;
                return this;
            }
            public Builder ClearApprovalId()
            {
                PrepareBuilder();
                result.hasApprovalId = false;
                result.approvalId_ = null;
                return this;
            }
        }
        static SendSuggestionOptions()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Suggestion : pb::GeneratedMessage<Suggestion, Suggestion.Builder>
    {
        private Suggestion() { }
        private static readonly Suggestion defaultInstance = new Suggestion().MakeReadOnly();
        private static readonly string[] _suggestionFieldNames = new string[] { "channel_id", "creation_time", "suggestee", "suggester" };
        private static readonly uint[] _suggestionFieldTags = new uint[] { 18, 56, 34, 26 };
        public static Suggestion DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override Suggestion DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override Suggestion ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_Suggestion__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<Suggestion, Suggestion.Builder> InternalFieldAccessors
        {
            get { return global::bgs.protocol.channel.v2.ChannelTypes.internal__static_bgs_protocol_channel_v2_Suggestion__FieldAccessorTable; }
        }

        public const int ChannelIdFieldNumber = 2;
        private bool hasChannelId;
        private global::bgs.protocol.channel.v2.ChannelId channelId_;
        public bool HasChannelId
        {
            get { return hasChannelId; }
        }
        public global::bgs.protocol.channel.v2.ChannelId ChannelId
        {
            get { return channelId_ ?? global::bgs.protocol.channel.v2.ChannelId.DefaultInstance; }
        }

        public const int SuggesterFieldNumber = 3;
        private bool hasSuggester;
        private global::bgs.protocol.channel.v2.MemberDescription suggester_;
        public bool HasSuggester
        {
            get { return hasSuggester; }
        }
        public global::bgs.protocol.channel.v2.MemberDescription Suggester
        {
            get { return suggester_ ?? global::bgs.protocol.channel.v2.MemberDescription.DefaultInstance; }
        }

        public const int SuggesteeFieldNumber = 4;
        private bool hasSuggestee;
        private global::bgs.protocol.channel.v2.MemberDescription suggestee_;
        public bool HasSuggestee
        {
            get { return hasSuggestee; }
        }
        public global::bgs.protocol.channel.v2.MemberDescription Suggestee
        {
            get { return suggestee_ ?? global::bgs.protocol.channel.v2.MemberDescription.DefaultInstance; }
        }

        public const int CreationTimeFieldNumber = 7;
        private bool hasCreationTime;
        private ulong creationTime_;
        public bool HasCreationTime
        {
            get { return hasCreationTime; }
        }
        public ulong CreationTime
        {
            get { return creationTime_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasChannelId)
                {
                    if (!ChannelId.IsInitialized) return false;
                }
                if (HasSuggester)
                {
                    if (!Suggester.IsInitialized) return false;
                }
                if (HasSuggestee)
                {
                    if (!Suggestee.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _suggestionFieldNames;
            if (hasChannelId)
            {
                output.WriteMessage(2, field_names[0], ChannelId);
            }
            if (hasSuggester)
            {
                output.WriteMessage(3, field_names[3], Suggester);
            }
            if (hasSuggestee)
            {
                output.WriteMessage(4, field_names[2], Suggestee);
            }
            if (hasCreationTime)
            {
                output.WriteUInt64(7, field_names[1], CreationTime);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasChannelId)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, ChannelId);
                }
                if (hasSuggester)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, Suggester);
                }
                if (hasSuggestee)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(4, Suggestee);
                }
                if (hasCreationTime)
                {
                    size += pb::CodedOutputStream.ComputeUInt64Size(7, CreationTime);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static Suggestion ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Suggestion ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Suggestion ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Suggestion ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Suggestion ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Suggestion ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Suggestion ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Suggestion ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Suggestion ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Suggestion ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Suggestion MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Suggestion prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Suggestion, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(Suggestion cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private Suggestion result;

            private Suggestion PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    Suggestion original = result;
                    result = new Suggestion();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override Suggestion MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::bgs.protocol.channel.v2.Suggestion.Descriptor; }
            }

            public override Suggestion DefaultInstanceForType
            {
                get { return global::bgs.protocol.channel.v2.Suggestion.DefaultInstance; }
            }

            public override Suggestion BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is Suggestion)
                {
                    return MergeFrom((Suggestion)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(Suggestion other)
            {
                if (other == global::bgs.protocol.channel.v2.Suggestion.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasChannelId)
                {
                    MergeChannelId(other.ChannelId);
                }
                if (other.HasSuggester)
                {
                    MergeSuggester(other.Suggester);
                }
                if (other.HasSuggestee)
                {
                    MergeSuggestee(other.Suggestee);
                }
                if (other.HasCreationTime)
                {
                    CreationTime = other.CreationTime;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_suggestionFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _suggestionFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 18:
                            {
                                global::bgs.protocol.channel.v2.ChannelId.Builder subBuilder = global::bgs.protocol.channel.v2.ChannelId.CreateBuilder();
                                if (result.hasChannelId)
                                {
                                    subBuilder.MergeFrom(ChannelId);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ChannelId = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                global::bgs.protocol.channel.v2.MemberDescription.Builder subBuilder = global::bgs.protocol.channel.v2.MemberDescription.CreateBuilder();
                                if (result.hasSuggester)
                                {
                                    subBuilder.MergeFrom(Suggester);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Suggester = subBuilder.BuildPartial();
                                break;
                            }
                        case 34:
                            {
                                global::bgs.protocol.channel.v2.MemberDescription.Builder subBuilder = global::bgs.protocol.channel.v2.MemberDescription.CreateBuilder();
                                if (result.hasSuggestee)
                                {
                                    subBuilder.MergeFrom(Suggestee);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Suggestee = subBuilder.BuildPartial();
                                break;
                            }
                        case 56:
                            {
                                result.hasCreationTime = input.ReadUInt64(ref result.creationTime_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasChannelId
            {
                get { return result.hasChannelId; }
            }
            public global::bgs.protocol.channel.v2.ChannelId ChannelId
            {
                get { return result.ChannelId; }
                set { SetChannelId(value); }
            }
            public Builder SetChannelId(global::bgs.protocol.channel.v2.ChannelId value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasChannelId = true;
                result.channelId_ = value;
                return this;
            }
            public Builder SetChannelId(global::bgs.protocol.channel.v2.ChannelId.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasChannelId = true;
                result.channelId_ = builderForValue.Build();
                return this;
            }
            public Builder MergeChannelId(global::bgs.protocol.channel.v2.ChannelId value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasChannelId &&
                    result.channelId_ != global::bgs.protocol.channel.v2.ChannelId.DefaultInstance)
                {
                    result.channelId_ = global::bgs.protocol.channel.v2.ChannelId.CreateBuilder(result.channelId_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.channelId_ = value;
                }
                result.hasChannelId = true;
                return this;
            }
            public Builder ClearChannelId()
            {
                PrepareBuilder();
                result.hasChannelId = false;
                result.channelId_ = null;
                return this;
            }

            public bool HasSuggester
            {
                get { return result.hasSuggester; }
            }
            public global::bgs.protocol.channel.v2.MemberDescription Suggester
            {
                get { return result.Suggester; }
                set { SetSuggester(value); }
            }
            public Builder SetSuggester(global::bgs.protocol.channel.v2.MemberDescription value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSuggester = true;
                result.suggester_ = value;
                return this;
            }
            public Builder SetSuggester(global::bgs.protocol.channel.v2.MemberDescription.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasSuggester = true;
                result.suggester_ = builderForValue.Build();
                return this;
            }
            public Builder MergeSuggester(global::bgs.protocol.channel.v2.MemberDescription value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasSuggester &&
                    result.suggester_ != global::bgs.protocol.channel.v2.MemberDescription.DefaultInstance)
                {
                    result.suggester_ = global::bgs.protocol.channel.v2.MemberDescription.CreateBuilder(result.suggester_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.suggester_ = value;
                }
                result.hasSuggester = true;
                return this;
            }
            public Builder ClearSuggester()
            {
                PrepareBuilder();
                result.hasSuggester = false;
                result.suggester_ = null;
                return this;
            }

            public bool HasSuggestee
            {
                get { return result.hasSuggestee; }
            }
            public global::bgs.protocol.channel.v2.MemberDescription Suggestee
            {
                get { return result.Suggestee; }
                set { SetSuggestee(value); }
            }
            public Builder SetSuggestee(global::bgs.protocol.channel.v2.MemberDescription value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSuggestee = true;
                result.suggestee_ = value;
                return this;
            }
            public Builder SetSuggestee(global::bgs.protocol.channel.v2.MemberDescription.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasSuggestee = true;
                result.suggestee_ = builderForValue.Build();
                return this;
            }
            public Builder MergeSuggestee(global::bgs.protocol.channel.v2.MemberDescription value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasSuggestee &&
                    result.suggestee_ != global::bgs.protocol.channel.v2.MemberDescription.DefaultInstance)
                {
                    result.suggestee_ = global::bgs.protocol.channel.v2.MemberDescription.CreateBuilder(result.suggestee_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.suggestee_ = value;
                }
                result.hasSuggestee = true;
                return this;
            }
            public Builder ClearSuggestee()
            {
                PrepareBuilder();
                result.hasSuggestee = false;
                result.suggestee_ = null;
                return this;
            }

            public bool HasCreationTime
            {
                get { return result.hasCreationTime; }
            }
            public ulong CreationTime
            {
                get { return result.CreationTime; }
                set { SetCreationTime(value); }
            }
            public Builder SetCreationTime(ulong value)
            {
                PrepareBuilder();
                result.hasCreationTime = true;
                result.creationTime_ = value;
                return this;
            }
            public Builder ClearCreationTime()
            {
                PrepareBuilder();
                result.hasCreationTime = false;
                result.creationTime_ = 0UL;
                return this;
            }
        }
        static Suggestion()
        {
            object.ReferenceEquals(global::bgs.protocol.channel.v2.ChannelTypes.Descriptor, null);
        }
    }

    #endregion

}

#endregion Designer generated code