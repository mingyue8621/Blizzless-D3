// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bgs.protocol.channel.v1 {
  
  namespace Proto {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class ChannelId {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_channel_v1_ChannelId__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v1.ChannelId, global::bgs.protocol.channel.v1.ChannelId.Builder> internal__static_bgs_protocol_channel_v1_ChannelId__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static ChannelId() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "CixiZ3MvbG93L3BiL2NsaWVudC9jbGllbnQvdjEvY2hhbm5lbF9pZC5wcm90" + 
            "bxIXYmdzLnByb3RvY29sLmNoYW5uZWwudjEaIWJncy9sb3cvcGIvY2xpZW50" + 
            "L3JwY190eXBlcy5wcm90byJcCglDaGFubmVsSWQSEgoEdHlwZRgBIAEoDVIE" + 
            "dHlwZRIrCgRob3N0GAIgASgLMhcuYmdzLnByb3RvY29sLlByb2Nlc3NJZFIE" + 
            "aG9zdBIOCgJpZBgDIAEoB1ICaWRCLAoYYm5ldC5wcm90b2NvbC5jaGFubmVs" + 
            "LnYxQg5DaGFubmVsSWRQcm90b0gC");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_bgs_protocol_channel_v1_ChannelId__Descriptor = Descriptor.MessageTypes[0];
          internal__static_bgs_protocol_channel_v1_ChannelId__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.channel.v1.ChannelId, global::bgs.protocol.channel.v1.ChannelId.Builder>(internal__static_bgs_protocol_channel_v1_ChannelId__Descriptor,
                  new string[] { "Type", "Host", "Id", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::bgs.protocol.RpcTypes.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::bgs.protocol.RpcTypes.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ChannelId : pb::GeneratedMessage<ChannelId, ChannelId.Builder> {
    private ChannelId() { }
    private static readonly ChannelId defaultInstance = new ChannelId().MakeReadOnly();
    public static ChannelId DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChannelId DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChannelId ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.channel.v1.Proto.ChannelId.internal__static_bgs_protocol_channel_v1_ChannelId__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChannelId, ChannelId.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.channel.v1.Proto.ChannelId.internal__static_bgs_protocol_channel_v1_ChannelId__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private uint type_;
    public bool HasType {
      get { return hasType; }
    }
    public uint Type {
      get { return type_; }
    }
    
    public const int HostFieldNumber = 2;
    private bool hasHost;
    private global::bgs.protocol.ProcessId host_;
    public bool HasHost {
      get { return hasHost; }
    }
    public global::bgs.protocol.ProcessId Host {
      get { return host_ ?? global::bgs.protocol.ProcessId.DefaultInstance; }
    }
    
    public const int IdFieldNumber = 3;
    private bool hasId;
    private uint id_;
    public bool HasId {
      get { return hasId; }
    }
    public uint Id {
      get { return id_; }
    }
    
    public static ChannelId ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelId ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelId ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChannelId ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChannelId ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelId ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChannelId ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChannelId ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChannelId ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChannelId ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChannelId MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChannelId prototype) {
      return new Builder(prototype);
    }
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ChannelId, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChannelId cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChannelId result;
      
      private ChannelId PrepareBuilder() {
        if (resultIsReadOnly) {
          ChannelId original = result;
          result = new ChannelId();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChannelId MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.channel.v1.ChannelId.Descriptor; }
      }
      
      public override ChannelId DefaultInstanceForType {
        get { return global::bgs.protocol.channel.v1.ChannelId.DefaultInstance; }
      }
      
      public override ChannelId BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public uint Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(uint value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasHost {
       get { return result.hasHost; }
      }
      public global::bgs.protocol.ProcessId Host {
        get { return result.Host; }
        set { SetHost(value); }
      }
      public Builder SetHost(global::bgs.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder SetHost(global::bgs.protocol.ProcessId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHost = true;
        result.host_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHost(global::bgs.protocol.ProcessId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHost &&
            result.host_ != global::bgs.protocol.ProcessId.DefaultInstance) {
            result.host_ = global::bgs.protocol.ProcessId.CreateBuilder(result.host_).MergeFrom(value).BuildPartial();
        } else {
          result.host_ = value;
        }
        result.hasHost = true;
        return this;
      }
      public Builder ClearHost() {
        PrepareBuilder();
        result.hasHost = false;
        result.host_ = null;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public uint Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(uint value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static ChannelId() {
      object.ReferenceEquals(global::bgs.protocol.channel.v1.Proto.ChannelId.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
