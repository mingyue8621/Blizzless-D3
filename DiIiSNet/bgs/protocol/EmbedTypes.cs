// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bgs.protocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class EmbedTypes {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_EmbedImage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.EmbedImage, global::bgs.protocol.EmbedImage.Builder> internal__static_bgs_protocol_EmbedImage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_Provider__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.Provider, global::bgs.protocol.Provider.Builder> internal__static_bgs_protocol_Provider__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_EmbedHTML__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.EmbedHTML, global::bgs.protocol.EmbedHTML.Builder> internal__static_bgs_protocol_EmbedHTML__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_bgs_protocol_EmbedInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.EmbedInfo, global::bgs.protocol.EmbedInfo.Builder> internal__static_bgs_protocol_EmbedInfo__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static EmbedTypes() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CiNiZ3MvbG93L3BiL2NsaWVudC9lbWJlZF90eXBlcy5wcm90bxIMYmdzLnBy" + 
          "b3RvY29sIkwKCkVtYmVkSW1hZ2USEAoDdXJsGAEgASgJUgN1cmwSFAoFd2lk" + 
          "dGgYAiABKA1SBXdpZHRoEhYKBmhlaWdodBgDIAEoDVIGaGVpZ2h0Ih4KCFBy" + 
          "b3ZpZGVyEhIKBG5hbWUYASABKAlSBG5hbWUiUwoJRW1iZWRIVE1MEhgKB2Nv" + 
          "bnRlbnQYASABKAlSB2NvbnRlbnQSFAoFd2lkdGgYAiABKA1SBXdpZHRoEhYK" + 
          "BmhlaWdodBgDIAEoDVIGaGVpZ2h0IpMCCglFbWJlZEluZm8SFAoFdGl0bGUY" + 
          "ASABKAlSBXRpdGxlEhIKBHR5cGUYAiABKAlSBHR5cGUSIQoMb3JpZ2luYWxf" + 
          "dXJsGAMgASgJUgtvcmlnaW5hbFVybBI2Cgl0aHVtYm5haWwYBCABKAsyGC5i" + 
          "Z3MucHJvdG9jb2wuRW1iZWRJbWFnZVIJdGh1bWJuYWlsEjIKCHByb3ZpZGVy" + 
          "GAUgASgLMhYuYmdzLnByb3RvY29sLlByb3ZpZGVyUghwcm92aWRlchIgCgtk" + 
          "ZXNjcmlwdGlvbhgGIAEoCVILZGVzY3JpcHRpb24SKwoEaHRtbBgIIAEoCzIX" + 
          "LmJncy5wcm90b2NvbC5FbWJlZEhUTUxSBGh0bWw=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_bgs_protocol_EmbedImage__Descriptor = Descriptor.MessageTypes[0];
        internal__static_bgs_protocol_EmbedImage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.EmbedImage, global::bgs.protocol.EmbedImage.Builder>(internal__static_bgs_protocol_EmbedImage__Descriptor,
                new string[] { "Url", "Width", "Height", });
        internal__static_bgs_protocol_Provider__Descriptor = Descriptor.MessageTypes[1];
        internal__static_bgs_protocol_Provider__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.Provider, global::bgs.protocol.Provider.Builder>(internal__static_bgs_protocol_Provider__Descriptor,
                new string[] { "Name", });
        internal__static_bgs_protocol_EmbedHTML__Descriptor = Descriptor.MessageTypes[2];
        internal__static_bgs_protocol_EmbedHTML__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.EmbedHTML, global::bgs.protocol.EmbedHTML.Builder>(internal__static_bgs_protocol_EmbedHTML__Descriptor,
                new string[] { "Content", "Width", "Height", });
        internal__static_bgs_protocol_EmbedInfo__Descriptor = Descriptor.MessageTypes[3];
        internal__static_bgs_protocol_EmbedInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.EmbedInfo, global::bgs.protocol.EmbedInfo.Builder>(internal__static_bgs_protocol_EmbedInfo__Descriptor,
                new string[] { "Title", "Type", "OriginalUrl", "Thumbnail", "Provider", "Description", "Html", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class EmbedImage : pb::GeneratedMessage<EmbedImage, EmbedImage.Builder> {
    private EmbedImage() { }
    private static readonly EmbedImage defaultInstance = new EmbedImage().MakeReadOnly();
    private static readonly string[] _embedImageFieldNames = new string[] { "height", "url", "width" };
    private static readonly uint[] _embedImageFieldTags = new uint[] { 24, 10, 16 };
    public static EmbedImage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EmbedImage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EmbedImage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.EmbedTypes.internal__static_bgs_protocol_EmbedImage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EmbedImage, EmbedImage.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.EmbedTypes.internal__static_bgs_protocol_EmbedImage__FieldAccessorTable; }
    }
    
    public const int UrlFieldNumber = 1;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int WidthFieldNumber = 2;
    private bool hasWidth;
    private uint width_;
    public bool HasWidth {
      get { return hasWidth; }
    }
    public uint Width {
      get { return width_; }
    }
    
    public const int HeightFieldNumber = 3;
    private bool hasHeight;
    private uint height_;
    public bool HasHeight {
      get { return hasHeight; }
    }
    public uint Height {
      get { return height_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _embedImageFieldNames;
      if (hasUrl) {
        output.WriteString(1, field_names[1], Url);
      }
      if (hasWidth) {
        output.WriteUInt32(2, field_names[2], Width);
      }
      if (hasHeight) {
        output.WriteUInt32(3, field_names[0], Height);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Url);
        }
        if (hasWidth) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Width);
        }
        if (hasHeight) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Height);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EmbedImage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EmbedImage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EmbedImage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EmbedImage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EmbedImage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EmbedImage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EmbedImage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EmbedImage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EmbedImage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EmbedImage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EmbedImage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EmbedImage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<EmbedImage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EmbedImage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EmbedImage result;
      
      private EmbedImage PrepareBuilder() {
        if (resultIsReadOnly) {
          EmbedImage original = result;
          result = new EmbedImage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EmbedImage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.EmbedImage.Descriptor; }
      }
      
      public override EmbedImage DefaultInstanceForType {
        get { return global::bgs.protocol.EmbedImage.DefaultInstance; }
      }
      
      public override EmbedImage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EmbedImage) {
          return MergeFrom((EmbedImage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EmbedImage other) {
        if (other == global::bgs.protocol.EmbedImage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.HasWidth) {
          Width = other.Width;
        }
        if (other.HasHeight) {
          Height = other.Height;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_embedImageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _embedImageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 16: {
              result.hasWidth = input.ReadUInt32(ref result.width_);
              break;
            }
            case 24: {
              result.hasHeight = input.ReadUInt32(ref result.height_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public bool HasWidth {
        get { return result.hasWidth; }
      }
      public uint Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(uint value) {
        PrepareBuilder();
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.hasWidth = false;
        result.width_ = 0;
        return this;
      }
      
      public bool HasHeight {
        get { return result.hasHeight; }
      }
      public uint Height {
        get { return result.Height; }
        set { SetHeight(value); }
      }
      public Builder SetHeight(uint value) {
        PrepareBuilder();
        result.hasHeight = true;
        result.height_ = value;
        return this;
      }
      public Builder ClearHeight() {
        PrepareBuilder();
        result.hasHeight = false;
        result.height_ = 0;
        return this;
      }
    }
    static EmbedImage() {
      object.ReferenceEquals(global::bgs.protocol.EmbedTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Provider : pb::GeneratedMessage<Provider, Provider.Builder> {
    private Provider() { }
    private static readonly Provider defaultInstance = new Provider().MakeReadOnly();
    private static readonly string[] _providerFieldNames = new string[] { "name" };
    private static readonly uint[] _providerFieldTags = new uint[] { 10 };
    public static Provider DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Provider DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Provider ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.EmbedTypes.internal__static_bgs_protocol_Provider__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Provider, Provider.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.EmbedTypes.internal__static_bgs_protocol_Provider__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _providerFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[0], Name);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Provider ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Provider ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Provider ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Provider ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Provider ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Provider ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Provider ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Provider ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Provider ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Provider ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Provider MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Provider prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Provider, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Provider cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Provider result;
      
      private Provider PrepareBuilder() {
        if (resultIsReadOnly) {
          Provider original = result;
          result = new Provider();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Provider MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.Provider.Descriptor; }
      }
      
      public override Provider DefaultInstanceForType {
        get { return global::bgs.protocol.Provider.DefaultInstance; }
      }
      
      public override Provider BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Provider) {
          return MergeFrom((Provider) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Provider other) {
        if (other == global::bgs.protocol.Provider.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_providerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _providerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static Provider() {
      object.ReferenceEquals(global::bgs.protocol.EmbedTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class EmbedHTML : pb::GeneratedMessage<EmbedHTML, EmbedHTML.Builder> {
    private EmbedHTML() { }
    private static readonly EmbedHTML defaultInstance = new EmbedHTML().MakeReadOnly();
    private static readonly string[] _embedHTMLFieldNames = new string[] { "content", "height", "width" };
    private static readonly uint[] _embedHTMLFieldTags = new uint[] { 10, 24, 16 };
    public static EmbedHTML DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EmbedHTML DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EmbedHTML ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.EmbedTypes.internal__static_bgs_protocol_EmbedHTML__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EmbedHTML, EmbedHTML.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.EmbedTypes.internal__static_bgs_protocol_EmbedHTML__FieldAccessorTable; }
    }
    
    public const int ContentFieldNumber = 1;
    private bool hasContent;
    private string content_ = "";
    public bool HasContent {
      get { return hasContent; }
    }
    public string Content {
      get { return content_; }
    }
    
    public const int WidthFieldNumber = 2;
    private bool hasWidth;
    private uint width_;
    public bool HasWidth {
      get { return hasWidth; }
    }
    public uint Width {
      get { return width_; }
    }
    
    public const int HeightFieldNumber = 3;
    private bool hasHeight;
    private uint height_;
    public bool HasHeight {
      get { return hasHeight; }
    }
    public uint Height {
      get { return height_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _embedHTMLFieldNames;
      if (hasContent) {
        output.WriteString(1, field_names[0], Content);
      }
      if (hasWidth) {
        output.WriteUInt32(2, field_names[2], Width);
      }
      if (hasHeight) {
        output.WriteUInt32(3, field_names[1], Height);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasContent) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Content);
        }
        if (hasWidth) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Width);
        }
        if (hasHeight) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Height);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EmbedHTML ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EmbedHTML ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EmbedHTML ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EmbedHTML ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EmbedHTML ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EmbedHTML ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EmbedHTML ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EmbedHTML ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EmbedHTML ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EmbedHTML ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EmbedHTML MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EmbedHTML prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<EmbedHTML, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EmbedHTML cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EmbedHTML result;
      
      private EmbedHTML PrepareBuilder() {
        if (resultIsReadOnly) {
          EmbedHTML original = result;
          result = new EmbedHTML();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EmbedHTML MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.EmbedHTML.Descriptor; }
      }
      
      public override EmbedHTML DefaultInstanceForType {
        get { return global::bgs.protocol.EmbedHTML.DefaultInstance; }
      }
      
      public override EmbedHTML BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EmbedHTML) {
          return MergeFrom((EmbedHTML) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EmbedHTML other) {
        if (other == global::bgs.protocol.EmbedHTML.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasContent) {
          Content = other.Content;
        }
        if (other.HasWidth) {
          Width = other.Width;
        }
        if (other.HasHeight) {
          Height = other.Height;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_embedHTMLFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _embedHTMLFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasContent = input.ReadString(ref result.content_);
              break;
            }
            case 16: {
              result.hasWidth = input.ReadUInt32(ref result.width_);
              break;
            }
            case 24: {
              result.hasHeight = input.ReadUInt32(ref result.height_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public string Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = "";
        return this;
      }
      
      public bool HasWidth {
        get { return result.hasWidth; }
      }
      public uint Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(uint value) {
        PrepareBuilder();
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.hasWidth = false;
        result.width_ = 0;
        return this;
      }
      
      public bool HasHeight {
        get { return result.hasHeight; }
      }
      public uint Height {
        get { return result.Height; }
        set { SetHeight(value); }
      }
      public Builder SetHeight(uint value) {
        PrepareBuilder();
        result.hasHeight = true;
        result.height_ = value;
        return this;
      }
      public Builder ClearHeight() {
        PrepareBuilder();
        result.hasHeight = false;
        result.height_ = 0;
        return this;
      }
    }
    static EmbedHTML() {
      object.ReferenceEquals(global::bgs.protocol.EmbedTypes.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class EmbedInfo : pb::GeneratedMessage<EmbedInfo, EmbedInfo.Builder> {
    private EmbedInfo() { }
    private static readonly EmbedInfo defaultInstance = new EmbedInfo().MakeReadOnly();
    private static readonly string[] _embedInfoFieldNames = new string[] { "description", "html", "original_url", "provider", "thumbnail", "title", "type" };
    private static readonly uint[] _embedInfoFieldTags = new uint[] { 50, 66, 26, 42, 34, 10, 18 };
    public static EmbedInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EmbedInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EmbedInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.EmbedTypes.internal__static_bgs_protocol_EmbedInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EmbedInfo, EmbedInfo.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.EmbedTypes.internal__static_bgs_protocol_EmbedInfo__FieldAccessorTable; }
    }
    
    public const int TitleFieldNumber = 1;
    private bool hasTitle;
    private string title_ = "";
    public bool HasTitle {
      get { return hasTitle; }
    }
    public string Title {
      get { return title_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private string type_ = "";
    public bool HasType {
      get { return hasType; }
    }
    public string Type {
      get { return type_; }
    }
    
    public const int OriginalUrlFieldNumber = 3;
    private bool hasOriginalUrl;
    private string originalUrl_ = "";
    public bool HasOriginalUrl {
      get { return hasOriginalUrl; }
    }
    public string OriginalUrl {
      get { return originalUrl_; }
    }
    
    public const int ThumbnailFieldNumber = 4;
    private bool hasThumbnail;
    private global::bgs.protocol.EmbedImage thumbnail_;
    public bool HasThumbnail {
      get { return hasThumbnail; }
    }
    public global::bgs.protocol.EmbedImage Thumbnail {
      get { return thumbnail_ ?? global::bgs.protocol.EmbedImage.DefaultInstance; }
    }
    
    public const int ProviderFieldNumber = 5;
    private bool hasProvider;
    private global::bgs.protocol.Provider provider_;
    public bool HasProvider {
      get { return hasProvider; }
    }
    public global::bgs.protocol.Provider Provider {
      get { return provider_ ?? global::bgs.protocol.Provider.DefaultInstance; }
    }
    
    public const int DescriptionFieldNumber = 6;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public const int HtmlFieldNumber = 8;
    private bool hasHtml;
    private global::bgs.protocol.EmbedHTML html_;
    public bool HasHtml {
      get { return hasHtml; }
    }
    public global::bgs.protocol.EmbedHTML Html {
      get { return html_ ?? global::bgs.protocol.EmbedHTML.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _embedInfoFieldNames;
      if (hasTitle) {
        output.WriteString(1, field_names[5], Title);
      }
      if (hasType) {
        output.WriteString(2, field_names[6], Type);
      }
      if (hasOriginalUrl) {
        output.WriteString(3, field_names[2], OriginalUrl);
      }
      if (hasThumbnail) {
        output.WriteMessage(4, field_names[4], Thumbnail);
      }
      if (hasProvider) {
        output.WriteMessage(5, field_names[3], Provider);
      }
      if (hasDescription) {
        output.WriteString(6, field_names[0], Description);
      }
      if (hasHtml) {
        output.WriteMessage(8, field_names[1], Html);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTitle) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Title);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Type);
        }
        if (hasOriginalUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(3, OriginalUrl);
        }
        if (hasThumbnail) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Thumbnail);
        }
        if (hasProvider) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Provider);
        }
        if (hasDescription) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Description);
        }
        if (hasHtml) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, Html);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EmbedInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EmbedInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EmbedInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EmbedInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EmbedInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EmbedInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EmbedInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EmbedInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EmbedInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EmbedInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EmbedInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EmbedInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<EmbedInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EmbedInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EmbedInfo result;
      
      private EmbedInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          EmbedInfo original = result;
          result = new EmbedInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EmbedInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.EmbedInfo.Descriptor; }
      }
      
      public override EmbedInfo DefaultInstanceForType {
        get { return global::bgs.protocol.EmbedInfo.DefaultInstance; }
      }
      
      public override EmbedInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EmbedInfo) {
          return MergeFrom((EmbedInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EmbedInfo other) {
        if (other == global::bgs.protocol.EmbedInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTitle) {
          Title = other.Title;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasOriginalUrl) {
          OriginalUrl = other.OriginalUrl;
        }
        if (other.HasThumbnail) {
          MergeThumbnail(other.Thumbnail);
        }
        if (other.HasProvider) {
          MergeProvider(other.Provider);
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        if (other.HasHtml) {
          MergeHtml(other.Html);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_embedInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _embedInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTitle = input.ReadString(ref result.title_);
              break;
            }
            case 18: {
              result.hasType = input.ReadString(ref result.type_);
              break;
            }
            case 26: {
              result.hasOriginalUrl = input.ReadString(ref result.originalUrl_);
              break;
            }
            case 34: {
              global::bgs.protocol.EmbedImage.Builder subBuilder = global::bgs.protocol.EmbedImage.CreateBuilder();
              if (result.hasThumbnail) {
                subBuilder.MergeFrom(Thumbnail);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Thumbnail = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::bgs.protocol.Provider.Builder subBuilder = global::bgs.protocol.Provider.CreateBuilder();
              if (result.hasProvider) {
                subBuilder.MergeFrom(Provider);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Provider = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
            case 66: {
              global::bgs.protocol.EmbedHTML.Builder subBuilder = global::bgs.protocol.EmbedHTML.CreateBuilder();
              if (result.hasHtml) {
                subBuilder.MergeFrom(Html);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Html = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTitle {
        get { return result.hasTitle; }
      }
      public string Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.hasTitle = false;
        result.title_ = "";
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = "";
        return this;
      }
      
      public bool HasOriginalUrl {
        get { return result.hasOriginalUrl; }
      }
      public string OriginalUrl {
        get { return result.OriginalUrl; }
        set { SetOriginalUrl(value); }
      }
      public Builder SetOriginalUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOriginalUrl = true;
        result.originalUrl_ = value;
        return this;
      }
      public Builder ClearOriginalUrl() {
        PrepareBuilder();
        result.hasOriginalUrl = false;
        result.originalUrl_ = "";
        return this;
      }
      
      public bool HasThumbnail {
       get { return result.hasThumbnail; }
      }
      public global::bgs.protocol.EmbedImage Thumbnail {
        get { return result.Thumbnail; }
        set { SetThumbnail(value); }
      }
      public Builder SetThumbnail(global::bgs.protocol.EmbedImage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasThumbnail = true;
        result.thumbnail_ = value;
        return this;
      }
      public Builder SetThumbnail(global::bgs.protocol.EmbedImage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasThumbnail = true;
        result.thumbnail_ = builderForValue.Build();
        return this;
      }
      public Builder MergeThumbnail(global::bgs.protocol.EmbedImage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasThumbnail &&
            result.thumbnail_ != global::bgs.protocol.EmbedImage.DefaultInstance) {
            result.thumbnail_ = global::bgs.protocol.EmbedImage.CreateBuilder(result.thumbnail_).MergeFrom(value).BuildPartial();
        } else {
          result.thumbnail_ = value;
        }
        result.hasThumbnail = true;
        return this;
      }
      public Builder ClearThumbnail() {
        PrepareBuilder();
        result.hasThumbnail = false;
        result.thumbnail_ = null;
        return this;
      }
      
      public bool HasProvider {
       get { return result.hasProvider; }
      }
      public global::bgs.protocol.Provider Provider {
        get { return result.Provider; }
        set { SetProvider(value); }
      }
      public Builder SetProvider(global::bgs.protocol.Provider value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProvider = true;
        result.provider_ = value;
        return this;
      }
      public Builder SetProvider(global::bgs.protocol.Provider.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasProvider = true;
        result.provider_ = builderForValue.Build();
        return this;
      }
      public Builder MergeProvider(global::bgs.protocol.Provider value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasProvider &&
            result.provider_ != global::bgs.protocol.Provider.DefaultInstance) {
            result.provider_ = global::bgs.protocol.Provider.CreateBuilder(result.provider_).MergeFrom(value).BuildPartial();
        } else {
          result.provider_ = value;
        }
        result.hasProvider = true;
        return this;
      }
      public Builder ClearProvider() {
        PrepareBuilder();
        result.hasProvider = false;
        result.provider_ = null;
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
      
      public bool HasHtml {
       get { return result.hasHtml; }
      }
      public global::bgs.protocol.EmbedHTML Html {
        get { return result.Html; }
        set { SetHtml(value); }
      }
      public Builder SetHtml(global::bgs.protocol.EmbedHTML value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHtml = true;
        result.html_ = value;
        return this;
      }
      public Builder SetHtml(global::bgs.protocol.EmbedHTML.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHtml = true;
        result.html_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHtml(global::bgs.protocol.EmbedHTML value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHtml &&
            result.html_ != global::bgs.protocol.EmbedHTML.DefaultInstance) {
            result.html_ = global::bgs.protocol.EmbedHTML.CreateBuilder(result.html_).MergeFrom(value).BuildPartial();
        } else {
          result.html_ = value;
        }
        result.hasHtml = true;
        return this;
      }
      public Builder ClearHtml() {
        PrepareBuilder();
        result.hasHtml = false;
        result.html_ = null;
        return this;
      }
    }
    static EmbedInfo() {
      object.ReferenceEquals(global::bgs.protocol.EmbedTypes.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
