// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace bgs.protocol.presence.v1 {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class PresenceListener {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_presence_v1_SubscribeNotification__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.presence.v1.SubscribeNotification, global::bgs.protocol.presence.v1.SubscribeNotification.Builder> internal__static_bgs_protocol_presence_v1_SubscribeNotification__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_bgs_protocol_presence_v1_StateChangedNotification__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.presence.v1.StateChangedNotification, global::bgs.protocol.presence.v1.StateChangedNotification.Builder> internal__static_bgs_protocol_presence_v1_StateChangedNotification__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static PresenceListener() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "CiliZ3MvbG93L3BiL2NsaWVudC9wcmVzZW5jZV9saXN0ZW5lci5wcm90bxIY" + 
            "YmdzLnByb3RvY29sLnByZXNlbmNlLnYxGiZiZ3MvbG93L3BiL2NsaWVudC9w" + 
            "cmVzZW5jZV90eXBlcy5wcm90bxolYmdzL2xvdy9wYi9jbGllbnQvYWNjb3Vu" + 
            "dF90eXBlcy5wcm90bxohYmdzL2xvdy9wYi9jbGllbnQvcnBjX3R5cGVzLnBy" + 
            "b3RvIp8BChVTdWJzY3JpYmVOb3RpZmljYXRpb24SRwoNc3Vic2NyaWJlcl9p" + 
            "ZBgBIAEoCzIiLmJncy5wcm90b2NvbC5hY2NvdW50LnYxLkFjY291bnRJZFIM" + 
            "c3Vic2NyaWJlcklkEj0KBXN0YXRlGAIgAygLMicuYmdzLnByb3RvY29sLnBy" + 
            "ZXNlbmNlLnYxLlByZXNlbmNlU3RhdGVSBXN0YXRlIqIBChhTdGF0ZUNoYW5n" + 
            "ZWROb3RpZmljYXRpb24SRwoNc3Vic2NyaWJlcl9pZBgBIAEoCzIiLmJncy5w" + 
            "cm90b2NvbC5hY2NvdW50LnYxLkFjY291bnRJZFIMc3Vic2NyaWJlcklkEj0K" + 
            "BXN0YXRlGAIgAygLMicuYmdzLnByb3RvY29sLnByZXNlbmNlLnYxLlByZXNl" + 
            "bmNlU3RhdGVSBXN0YXRlMqgCChBQcmVzZW5jZUxpc3RlbmVyEmcKC09uU3Vi" + 
            "c2NyaWJlEi8uYmdzLnByb3RvY29sLnByZXNlbmNlLnYxLlN1YnNjcmliZU5v" + 
            "dGlmaWNhdGlvbhoZLmJncy5wcm90b2NvbC5OT19SRVNQT05TRSIMgvkrAggB" + 
            "gvkrAjgBEm0KDk9uU3RhdGVDaGFuZ2VkEjIuYmdzLnByb3RvY29sLnByZXNl" + 
            "bmNlLnYxLlN0YXRlQ2hhbmdlZE5vdGlmaWNhdGlvbhoZLmJncy5wcm90b2Nv" + 
            "bC5OT19SRVNQT05TRSIMgvkrAggCgvkrAjgBGjyC+SssCipibmV0LnByb3Rv" + 
            "Y29sLnByZXNlbmNlLnYxLlByZXNlbmNlTGlzdGVuZXKC+SsCOAGK+SsCCAE=");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_bgs_protocol_presence_v1_SubscribeNotification__Descriptor = Descriptor.MessageTypes[0];
          internal__static_bgs_protocol_presence_v1_SubscribeNotification__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.presence.v1.SubscribeNotification, global::bgs.protocol.presence.v1.SubscribeNotification.Builder>(internal__static_bgs_protocol_presence_v1_SubscribeNotification__Descriptor,
                  new string[] { "SubscriberId", "State", });
          internal__static_bgs_protocol_presence_v1_StateChangedNotification__Descriptor = Descriptor.MessageTypes[1];
          internal__static_bgs_protocol_presence_v1_StateChangedNotification__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::bgs.protocol.presence.v1.StateChangedNotification, global::bgs.protocol.presence.v1.StateChangedNotification.Builder>(internal__static_bgs_protocol_presence_v1_StateChangedNotification__Descriptor,
                  new string[] { "SubscriberId", "State", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::bgs.protocol.presence.v1.PresenceTypes.RegisterAllExtensions(registry);
          global::bgs.protocol.account.v1.AccountTypes.RegisterAllExtensions(registry);
          global::bgs.protocol.RpcTypes.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::bgs.protocol.presence.v1.PresenceTypes.Descriptor, 
            global::bgs.protocol.account.v1.AccountTypes.Descriptor, 
            global::bgs.protocol.RpcTypes.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SubscribeNotification : pb::GeneratedMessage<SubscribeNotification, SubscribeNotification.Builder> {
    private SubscribeNotification() { }
    private static readonly SubscribeNotification defaultInstance = new SubscribeNotification().MakeReadOnly();
    private static readonly string[] _subscribeNotificationFieldNames = new string[] { "state", "subscriber_id" };
    private static readonly uint[] _subscribeNotificationFieldTags = new uint[] { 18, 10 };
    public static SubscribeNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SubscribeNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SubscribeNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.presence.v1.Proto.PresenceListener.internal__static_bgs_protocol_presence_v1_SubscribeNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SubscribeNotification, SubscribeNotification.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.presence.v1.Proto.PresenceListener.internal__static_bgs_protocol_presence_v1_SubscribeNotification__FieldAccessorTable; }
    }
    
    public const int SubscriberIdFieldNumber = 1;
    private bool hasSubscriberId;
    private global::bgs.protocol.account.v1.AccountId subscriberId_;
    public bool HasSubscriberId {
      get { return hasSubscriberId; }
    }
    public global::bgs.protocol.account.v1.AccountId SubscriberId {
      get { return subscriberId_ ?? global::bgs.protocol.account.v1.AccountId.DefaultInstance; }
    }
    
    public const int StateFieldNumber = 2;
    private pbc::PopsicleList<global::bgs.protocol.presence.v1.PresenceState> state_ = new pbc::PopsicleList<global::bgs.protocol.presence.v1.PresenceState>();
    public scg::IList<global::bgs.protocol.presence.v1.PresenceState> StateList {
      get { return state_; }
    }
    public int StateCount {
      get { return state_.Count; }
    }
    public global::bgs.protocol.presence.v1.PresenceState GetState(int index) {
      return state_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasSubscriberId) {
          if (!SubscriberId.IsInitialized) return false;
        }
        foreach (global::bgs.protocol.presence.v1.PresenceState element in StateList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _subscribeNotificationFieldNames;
      if (hasSubscriberId) {
        output.WriteMessage(1, field_names[1], SubscriberId);
      }
      if (state_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], state_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSubscriberId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, SubscriberId);
        }
        foreach (global::bgs.protocol.presence.v1.PresenceState element in StateList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SubscribeNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SubscribeNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SubscribeNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SubscribeNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SubscribeNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SubscribeNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SubscribeNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SubscribeNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SubscribeNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SubscribeNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SubscribeNotification MakeReadOnly() {
      state_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SubscribeNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SubscribeNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SubscribeNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SubscribeNotification result;
      
      private SubscribeNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          SubscribeNotification original = result;
          result = new SubscribeNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SubscribeNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.presence.v1.SubscribeNotification.Descriptor; }
      }
      
      public override SubscribeNotification DefaultInstanceForType {
        get { return global::bgs.protocol.presence.v1.SubscribeNotification.DefaultInstance; }
      }
      
      public override SubscribeNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SubscribeNotification) {
          return MergeFrom((SubscribeNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SubscribeNotification other) {
        if (other == global::bgs.protocol.presence.v1.SubscribeNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSubscriberId) {
          MergeSubscriberId(other.SubscriberId);
        }
        if (other.state_.Count != 0) {
          result.state_.Add(other.state_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_subscribeNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _subscribeNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.AccountId.Builder subBuilder = global::bgs.protocol.account.v1.AccountId.CreateBuilder();
              if (result.hasSubscriberId) {
                subBuilder.MergeFrom(SubscriberId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SubscriberId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.state_, global::bgs.protocol.presence.v1.PresenceState.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSubscriberId {
       get { return result.hasSubscriberId; }
      }
      public global::bgs.protocol.account.v1.AccountId SubscriberId {
        get { return result.SubscriberId; }
        set { SetSubscriberId(value); }
      }
      public Builder SetSubscriberId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSubscriberId = true;
        result.subscriberId_ = value;
        return this;
      }
      public Builder SetSubscriberId(global::bgs.protocol.account.v1.AccountId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSubscriberId = true;
        result.subscriberId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSubscriberId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSubscriberId &&
            result.subscriberId_ != global::bgs.protocol.account.v1.AccountId.DefaultInstance) {
            result.subscriberId_ = global::bgs.protocol.account.v1.AccountId.CreateBuilder(result.subscriberId_).MergeFrom(value).BuildPartial();
        } else {
          result.subscriberId_ = value;
        }
        result.hasSubscriberId = true;
        return this;
      }
      public Builder ClearSubscriberId() {
        PrepareBuilder();
        result.hasSubscriberId = false;
        result.subscriberId_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::bgs.protocol.presence.v1.PresenceState> StateList {
        get { return PrepareBuilder().state_; }
      }
      public int StateCount {
        get { return result.StateCount; }
      }
      public global::bgs.protocol.presence.v1.PresenceState GetState(int index) {
        return result.GetState(index);
      }
      public Builder SetState(int index, global::bgs.protocol.presence.v1.PresenceState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.state_[index] = value;
        return this;
      }
      public Builder SetState(int index, global::bgs.protocol.presence.v1.PresenceState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.state_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddState(global::bgs.protocol.presence.v1.PresenceState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.state_.Add(value);
        return this;
      }
      public Builder AddState(global::bgs.protocol.presence.v1.PresenceState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.state_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeState(scg::IEnumerable<global::bgs.protocol.presence.v1.PresenceState> values) {
        PrepareBuilder();
        result.state_.Add(values);
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.state_.Clear();
        return this;
      }
    }
    static SubscribeNotification() {
      object.ReferenceEquals(global::bgs.protocol.presence.v1.Proto.PresenceListener.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class StateChangedNotification : pb::GeneratedMessage<StateChangedNotification, StateChangedNotification.Builder> {
    private StateChangedNotification() { }
    private static readonly StateChangedNotification defaultInstance = new StateChangedNotification().MakeReadOnly();
    private static readonly string[] _stateChangedNotificationFieldNames = new string[] { "state", "subscriber_id" };
    private static readonly uint[] _stateChangedNotificationFieldTags = new uint[] { 18, 10 };
    public static StateChangedNotification DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StateChangedNotification DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StateChangedNotification ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::bgs.protocol.presence.v1.Proto.PresenceListener.internal__static_bgs_protocol_presence_v1_StateChangedNotification__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StateChangedNotification, StateChangedNotification.Builder> InternalFieldAccessors {
      get { return global::bgs.protocol.presence.v1.Proto.PresenceListener.internal__static_bgs_protocol_presence_v1_StateChangedNotification__FieldAccessorTable; }
    }
    
    public const int SubscriberIdFieldNumber = 1;
    private bool hasSubscriberId;
    private global::bgs.protocol.account.v1.AccountId subscriberId_;
    public bool HasSubscriberId {
      get { return hasSubscriberId; }
    }
    public global::bgs.protocol.account.v1.AccountId SubscriberId {
      get { return subscriberId_ ?? global::bgs.protocol.account.v1.AccountId.DefaultInstance; }
    }
    
    public const int StateFieldNumber = 2;
    private pbc::PopsicleList<global::bgs.protocol.presence.v1.PresenceState> state_ = new pbc::PopsicleList<global::bgs.protocol.presence.v1.PresenceState>();
    public scg::IList<global::bgs.protocol.presence.v1.PresenceState> StateList {
      get { return state_; }
    }
    public int StateCount {
      get { return state_.Count; }
    }
    public global::bgs.protocol.presence.v1.PresenceState GetState(int index) {
      return state_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasSubscriberId) {
          if (!SubscriberId.IsInitialized) return false;
        }
        foreach (global::bgs.protocol.presence.v1.PresenceState element in StateList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _stateChangedNotificationFieldNames;
      if (hasSubscriberId) {
        output.WriteMessage(1, field_names[1], SubscriberId);
      }
      if (state_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], state_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSubscriberId) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, SubscriberId);
        }
        foreach (global::bgs.protocol.presence.v1.PresenceState element in StateList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StateChangedNotification ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StateChangedNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StateChangedNotification ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StateChangedNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StateChangedNotification ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StateChangedNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StateChangedNotification ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StateChangedNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StateChangedNotification ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StateChangedNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StateChangedNotification MakeReadOnly() {
      state_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StateChangedNotification prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<StateChangedNotification, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StateChangedNotification cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StateChangedNotification result;
      
      private StateChangedNotification PrepareBuilder() {
        if (resultIsReadOnly) {
          StateChangedNotification original = result;
          result = new StateChangedNotification();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StateChangedNotification MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::bgs.protocol.presence.v1.StateChangedNotification.Descriptor; }
      }
      
      public override StateChangedNotification DefaultInstanceForType {
        get { return global::bgs.protocol.presence.v1.StateChangedNotification.DefaultInstance; }
      }
      
      public override StateChangedNotification BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StateChangedNotification) {
          return MergeFrom((StateChangedNotification) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StateChangedNotification other) {
        if (other == global::bgs.protocol.presence.v1.StateChangedNotification.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSubscriberId) {
          MergeSubscriberId(other.SubscriberId);
        }
        if (other.state_.Count != 0) {
          result.state_.Add(other.state_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_stateChangedNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _stateChangedNotificationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::bgs.protocol.account.v1.AccountId.Builder subBuilder = global::bgs.protocol.account.v1.AccountId.CreateBuilder();
              if (result.hasSubscriberId) {
                subBuilder.MergeFrom(SubscriberId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SubscriberId = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.state_, global::bgs.protocol.presence.v1.PresenceState.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSubscriberId {
       get { return result.hasSubscriberId; }
      }
      public global::bgs.protocol.account.v1.AccountId SubscriberId {
        get { return result.SubscriberId; }
        set { SetSubscriberId(value); }
      }
      public Builder SetSubscriberId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSubscriberId = true;
        result.subscriberId_ = value;
        return this;
      }
      public Builder SetSubscriberId(global::bgs.protocol.account.v1.AccountId.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSubscriberId = true;
        result.subscriberId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSubscriberId(global::bgs.protocol.account.v1.AccountId value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSubscriberId &&
            result.subscriberId_ != global::bgs.protocol.account.v1.AccountId.DefaultInstance) {
            result.subscriberId_ = global::bgs.protocol.account.v1.AccountId.CreateBuilder(result.subscriberId_).MergeFrom(value).BuildPartial();
        } else {
          result.subscriberId_ = value;
        }
        result.hasSubscriberId = true;
        return this;
      }
      public Builder ClearSubscriberId() {
        PrepareBuilder();
        result.hasSubscriberId = false;
        result.subscriberId_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::bgs.protocol.presence.v1.PresenceState> StateList {
        get { return PrepareBuilder().state_; }
      }
      public int StateCount {
        get { return result.StateCount; }
      }
      public global::bgs.protocol.presence.v1.PresenceState GetState(int index) {
        return result.GetState(index);
      }
      public Builder SetState(int index, global::bgs.protocol.presence.v1.PresenceState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.state_[index] = value;
        return this;
      }
      public Builder SetState(int index, global::bgs.protocol.presence.v1.PresenceState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.state_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddState(global::bgs.protocol.presence.v1.PresenceState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.state_.Add(value);
        return this;
      }
      public Builder AddState(global::bgs.protocol.presence.v1.PresenceState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.state_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeState(scg::IEnumerable<global::bgs.protocol.presence.v1.PresenceState> values) {
        PrepareBuilder();
        result.state_.Add(values);
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.state_.Clear();
        return this;
      }
    }
    static StateChangedNotification() {
      object.ReferenceEquals(global::bgs.protocol.presence.v1.Proto.PresenceListener.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public abstract class PresenceListener : pb::IService {
    public abstract void OnSubscribe(
        pb::IRpcController controller,
        global::bgs.protocol.presence.v1.SubscribeNotification request,
        global::System.Action<global::bgs.protocol.NO_RESPONSE> done);
    public abstract void OnStateChanged(
        pb::IRpcController controller,
        global::bgs.protocol.presence.v1.StateChangedNotification request,
        global::System.Action<global::bgs.protocol.NO_RESPONSE> done);
    
    public static pbd::ServiceDescriptor Descriptor {
      get { return Proto.PresenceListener.Descriptor.Services[0]; }
    }
    public pbd::ServiceDescriptor DescriptorForType {
      get { return Descriptor; }
    }
    
    public void CallMethod(
        pbd::MethodDescriptor method,
        pb::IRpcController controller,
        pb::IMessage request,
        global::System.Action<pb::IMessage> done) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.CallMethod() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          this.OnSubscribe(controller, (global::bgs.protocol.presence.v1.SubscribeNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NO_RESPONSE>(
              done));
          return;
        case 1:
          this.OnStateChanged(controller, (global::bgs.protocol.presence.v1.StateChangedNotification) request,
              pb::RpcUtil.SpecializeCallback<global::bgs.protocol.NO_RESPONSE>(
              done));
          return;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetRequestPrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetRequestPrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bgs.protocol.presence.v1.SubscribeNotification.DefaultInstance;
        case 1:
          return global::bgs.protocol.presence.v1.StateChangedNotification.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public pb::IMessage GetResponsePrototype(pbd::MethodDescriptor method) {
      if (method.Service != Descriptor) {
        throw new global::System.ArgumentException(
            "Service.GetResponsePrototype() given method descriptor for wrong service type.");
      }
      switch(method.Index) {
        case 0:
          return global::bgs.protocol.NO_RESPONSE.DefaultInstance;
        case 1:
          return global::bgs.protocol.NO_RESPONSE.DefaultInstance;
        default:
          throw new global::System.InvalidOperationException("Can't get here.");
      }
    }
    
    public static Stub CreateStub(pb::IRpcChannel channel) {
      return new Stub(channel);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public class Stub : global::bgs.protocol.presence.v1.PresenceListener {
      internal Stub(pb::IRpcChannel channel) {
        this.channel = channel;
      }
      
      private readonly pb::IRpcChannel channel;
      
      public pb::IRpcChannel Channel {
        get { return channel; }
      }
      
      public override void OnSubscribe(
          pb::IRpcController controller,
          global::bgs.protocol.presence.v1.SubscribeNotification request,
          global::System.Action<global::bgs.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[0],
            controller, request, global::bgs.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NO_RESPONSE, global::bgs.protocol.NO_RESPONSE.Builder>(done, global::bgs.protocol.NO_RESPONSE.DefaultInstance));
      }
      
      public override void OnStateChanged(
          pb::IRpcController controller,
          global::bgs.protocol.presence.v1.StateChangedNotification request,
          global::System.Action<global::bgs.protocol.NO_RESPONSE> done) {
        channel.CallMethod(Descriptor.Methods[1],
            controller, request, global::bgs.protocol.NO_RESPONSE.DefaultInstance,
            pb::RpcUtil.GeneralizeCallback<global::bgs.protocol.NO_RESPONSE, global::bgs.protocol.NO_RESPONSE.Builder>(done, global::bgs.protocol.NO_RESPONSE.DefaultInstance));
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
